<?php

// PATH
require_once 'assets/include/path_variable.php';

// Session
require_once PATH_INCLUDE . DS . 'session_variable.php';

// Initiate DB connection
require_once PATH_INCLUDE . DS . 'db_init.php';

require_once PATH_INCLUDE . DS . 'Bcrypt.php';

date_default_timezone_set('Asia/Jakarta');

$date = new DateTime();
$currentDate = $date->format('d/m/Y H:i:s');
$currentMonthYear = $date->format('m-y');
$currentYearMonth = $date->format('ym');
$todayDate = $date->format('Y-m-d');
$currentYear = $date->format('y');

/*if(!empty($_SERVER['HTTP_CLIENT_IP'])){
        //ip from share internet
        $ipPublic = $_SERVER['HTTP_CLIENT_IP'];
    }elseif(!empty($_SERVER['HTTP_X_FORWARDED_FOR'])){
        //ip pass from proxy
        $ipPublic = $_SERVER['HTTP_X_FORWARDED_FOR'];
    }else{
        $ipPublic = $_SERVER['REMOTE_ADDR'];
    }*/

if (isset($_REQUEST['action']) && $_REQUEST['action'] == 'login') {
    // <editor-fold defaultstate="collapsed" desc="Login">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $userEmail = $myDatabase->real_escape_string($_POST['userEmail']);
    $userPassword = $myDatabase->real_escape_string($_POST['userPassword']);
    //$ipAddress = get_ip_address();
    // </editor-fold>

    if ($userEmail != '' && $userPassword != '') {
        $sql = "SELECT * FROM `user`
                WHERE user_email = '{$userEmail}'";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            if ($row->active == 1) {
                $salt = $row->user_salt;
                $saltedPW = trim($userPassword) . $salt;
                $hashedPW = hash('sha256', $saltedPW);

                if ($hashedPW == $row->user_password) {
                    unset($_SESSION['menu_name']);
                    $_SESSION['isLogin'] = 1;
                    $_SESSION['userName'] = $row->user_name;
                    $_SESSION['userId'] = $row->user_id;
                    $_SESSION['companyId'] = 2;
                    $return_value = '|OK||';
                    if ($row->change_password == 1) {
                        $return_value = '|PASS||';
                    }

                    $sql1 = "INSERT INTO user_login (user_id,login_date) VALUES ({$row->user_id},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                    $result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);

                    echo $sql1;
                } else {
                    $return_value = '|FAIL|Password not match.|';
                }
            } else {
                $return_value = '|FAIL|Your account is not active.|';
            }
        } else {
            $return_value = '|FAIL|Email & Password combination not found.|';
        }
    } else {
		echo $userEmail;
		
		
        $return_value = '|FAIL|Email & Password can not be empty.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'c_bank_data') {
    // <editor-fold defaultstate="collapsed" desc="user_stockpile_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['modalcustomerId']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
    $branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $masterBankId = $myDatabase->real_escape_string($_POST['masterBank']);
    $cBankId = $myDatabase->real_escape_string($_POST['cBankId']);
    $active = $myDatabase->real_escape_string($_POST['active']);

    // </editor-fold>

    if ($cBankId == '') {
        $boolNew = true;
    }

    if ($vendorId != '' && $bankName != '' && $branch != '' && $accountNo != '' && $beneficiary != '') {
        if ($boolNew) {
            $sql = "INSERT INTO customer_bank (customer_id, bank_name, branch, account_no, beneficiary, swift_code,master_bank_id, active)
            VALUES ({$vendorId}, '{$bankName}', '{$branch}', '{$accountNo}', '{$beneficiary}', '{$swiftCode}',{$masterBankId},{$active} )";

        } else {
            $sql = "UPDATE `customer_bank` SET "
                . "bank_name = '{$bankName}', "
                . "branch = '{$branch}', "
                . "account_no = '{$accountNo}', "
                . "beneficiary = '{$beneficiary}', "
                . "swift_code = '{$swiftCode}', "
                . "active = '{$active}', "
                . "master_bank_id = {$masterBankId} "
                . "WHERE cust_bank_id = {$cBankId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Bank added successfully.|';
        } else {
            $return_value = '|FAIL|Failed adding Bank.|'.$sql.'|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'freight_cost_local_sales_data') {
    // <editor-fold defaultstate="collapsed" desc="stockpile_freight_data">

    $return_value = '';
    $boolNew = false;
    $boolShrink = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightCostId = $myDatabase->real_escape_string($_POST['freightCostId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $paymentNotes = $myDatabase->real_escape_string($_POST['paymentNotes']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    $contractPKHOA = $myDatabase->real_escape_string($_POST['contractPKHOA']);
    //$shrink_tolerance_kg = $myDatabase->real_escape_string($_POST['shrink_tolerance_kg']);
    //$shrink_tolerance_persen = $myDatabase->real_escape_string($_POST['shrink_tolerance_persen']);
    //$shrink_claim = $myDatabase->real_escape_string($_POST['shrink_claim']);
    $active_from = $myDatabase->real_escape_string($_POST['active_from']);
    // </editor-fold>

    if ($freightCostId == '') {
        $boolNew = true;
    }

    if ($freightId != '' && $stockpileId != '' && $currencyId != '' && $price != '' && $vendorId != '') {
//        if($boolNew) {
//            $sql = "SELECT * FROM `freight_cost` WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId}";
//        } else {
//            $sql = "SELECT * FROM `freight_cost` WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId} AND freight_cost_id <> {$freightCostId}";
//        }
//        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//        if($result !== false && $result->num_rows == 0) {

        /*if ($shrink_tolerance_kg > 0 && $shrink_tolerance_persen > 0) {
            $boolShrink = false;
        }*/

        if ($exchangeRate == '') {
            $exchangeRate = 1;
        }

        $priceConverted = $price * $exchangeRate;

        if ($boolNew) {
            $sql = "INSERT INTO `freight_cost_local_sales` (freight_id, stockpile_id, vendor_id, currency_id, exchange_rate, price, "
                . "price_converted, payment_notes, remarks, company_id, entry_by, entry_date,contract_pkhoa,active_from) VALUES ("
                . "{$freightId}, {$stockpileId}, {$vendorId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, "
                . "'{$paymentNotes}', '{$remarks}', {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),'{$contractPKHOA}','{$active_from}')";
        } else {
            $sql = "UPDATE `freight_cost_local_sales` SET "
                . "freight_id = {$freightId}, "
                . "currency_id = {$currencyId}, "
                . "exchange_rate = {$exchangeRate}, "
                . "vendor_id = {$vendorId}, "
                . "price = {$price}, "
                . "price_converted = {$priceConverted}, "
                . "payment_notes = '{$paymentNotes}', "
                . "contract_pkhoa = '{$contractPKHOA}', "
                . "remarks = '{$remarks}', "
                //. "shrink_tolerance_kg = '{$shrink_tolerance_kg}', "
                //. "shrink_tolerance_persen = '{$shrink_tolerance_persen}', "
                //. "shrink_claim = '{$shrink_claim}', "
                . "active_from = '{$active_from}', "
                . "modify_by = {$_SESSION['userId']}, "
                . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                . "WHERE freight_cost_id = {$freightCostId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Freight cost has successfully inserted/updated.|';
        } else {
            $return_value = '|FAIL|Insert/update freight cost failed.|';
            echo $sql;
        }
//        } else {
//            $return_value = '|FAIL|Freight cost already exists.|';
//        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'freight_local_sales_bank_data') {
    // <editor-fold defaultstate="collapsed" desc="user_stockpile_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightId = $myDatabase->real_escape_string($_POST['modalFreightId']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
    $branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $masterBankId = $myDatabase->real_escape_string($_POST['masterBank']);
    $fBankId = $myDatabase->real_escape_string($_POST['fBankId']);
    $active = $myDatabase->real_escape_string($_POST['active']);

    // </editor-fold>

    if ($fBankId == '') {
        $boolNew = true;
    }

    if ($freightId != '' && $bankName != '' && $branch != '' && $accountNo != '' && $beneficiary != '') {

        if ($boolNew) {
            $sql = "INSERT INTO freight_local_sales_bank (freight_id, bank_name, branch, account_no, beneficiary, swift_code,master_bank_id,active)
        VALUES ({$freightId}, '{$bankName}', '{$branch}', '{$accountNo}', '{$beneficiary}', '{$swiftCode}',{$masterBankId},{$active} )";
        } else {
            $sql = "UPDATE `freight_local_sales_bank` SET "
                . "bank_name = '{$bankName}', "
                . "branch = '{$branch}', "
                . "account_no = '{$accountNo}', "
                . "beneficiary = '{$beneficiary}', "
                . "swift_code = '{$swiftCode}', "
                . "active = '{$active}', "
                . "master_bank_id = {$masterBankId} "
                . "WHERE f_bank_id = {$fBankId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Bank added successfully.|';
        } else {
            $return_value = '|FAIL|Failed adding Bank.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'freight_local_sales_data') {
    // <editor-fold defaultstate="collapsed" desc="freight_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    $freightCode = 'FR-' . $myDatabase->real_escape_string($_POST['freightCode']);
    $freightSupplier = $myDatabase->real_escape_string($_POST['freightSupplier']);
    $freightAddress = $myDatabase->real_escape_string($_POST['freightAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
    $branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $active = $myDatabase->real_escape_string($_POST['active']);
    $freightRule = $myDatabase->real_escape_string($_POST['freightRule']);;
    $nik = $myDatabase->real_escape_string($_POST['nik']);
    // </editor-fold>

    if ($freightId == '') {
        $boolNew = true;
    }

    if ($freightCode != '' && $freightSupplier != '' && $freightAddress != '' && $npwp != '' && $npwp_name != '' && $ppn != '' && $pph != '' && $active != '' && $freightRule != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `freight_local_sales` WHERE UPPER(freight_supplier) = UPPER('{$freightSupplier}') AND UPPER(freight_code) = UPPER('{$freightCode}')";
        } else {
            $sql = "SELECT * FROM `freight_local_sales` WHERE UPPER(freight_supplier) = UPPER('{$freightSupplier}') AND UPPER(freight_code) = UPPER('{$freightCode}') AND freight_id <> {$freightId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;

            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }

            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }

            if ($boolNew) {
                $sql = "INSERT INTO `freight_local_sales` (freight_code, freight_supplier, freight_address, nik, npwp, npwp_name, bank_name, branch, account_no, beneficiary, "
                    . "swift_code, ppn_tax_id, pph_tax_id, ppn, pph, active, freight_rule, entry_by, entry_date) VALUES ("
                    . "UPPER('{$freightCode}'), '{$freightSupplier}', '{$freightAddress}', '{$nik}', '{$npwp}', '{$npwp_name}', '{$bankName}', '{$branch}', '{$accountNo}', "
                    . "'{$beneficiary}', '{$swiftCode}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$active}, {$freightRule}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `freight_local_sales` SET "
                    . "freight_code = UPPER('{$freightCode}'), "
                    . "freight_supplier = '{$freightSupplier}', "
                    . "freight_address = '{$freightAddress}', "
                    . "nik = '{$nik}', "
                    . "npwp = '{$npwp}', "
                    . "npwp_name = '{$npwp_name}', "
                    . "bank_name = '{$bankName}', "
                    . "branch = '{$branch}', "
                    . "account_no = '{$accountNo}', "
                    . "beneficiary = '{$beneficiary}', "
                    . "swift_code = '{$swiftCode}', "
                    . "ppn_tax_id = {$ppn}, "
                    . "pph_tax_id = {$pph}, "
                    . "ppn = {$ppnValue}, "
                    . "pph = {$pphValue}, "
                    . "active = {$active}, "
                    . "freight_rule = {$freightRule} "
                    . "WHERE freight_id = {$freightId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $freightId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Freight has successfully inserted/updated.|' . $freightId . '|';
            } else {
                $return_value = '|FAIL|Insert/update freight failed.||';
            }
        } else {
            $return_value = '|FAIL|Freight supplier and vendor already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_price_rate_sales_local') {
    // <editor-fold defaultstate="collapsed" desc="update_price_rate_sales">
    // <editor-fold defaultstate="collapsed" desc="POST DATA">
    $return_value = '';
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRateUpdate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceUpdate']));
    // </editor-fold>
    if ($salesId != '' && $exchangeRate != '' && $price != '') {
        $priceConverted = $price * $exchangeRate;
		
		$sql = "DELETE FROM shipment WHERE sales_id = {$salesId} AND shipment_date IS NULL AND shipment_status = 0";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
		$sql = "SELECT COUNT(*) AS total_shipment FROM shipment WHERE sales_id = {$salesId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $total_shipment = $rowStockpile->total_shipment;
            }
		
        $sql = "UPDATE `sales` sl SET "
            . "sl.exchange_rate = {$exchangeRate}, "
            . "sl.price = {$price}, "
            . "sl.price_converted = {$priceConverted}, "
			. "sl.total_shipment = {$total_shipment}, "
            . "sl.sales_status = 3 "
            . "WHERE sl.sales_id = {$salesId}";

        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
			
			$sql = "SELECT sl.sales_id, t.transaction_id
						FROM sales sl 
						LEFT JOIN shipment sh ON sh.`sales_id` = sl.`sales_id`
						LEFT JOIN `transaction` t ON t.`shipment_id` = sh.`shipment_id` 
						WHERE sl.sales_id = {$salesId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result->num_rows > 0) {
                while ($row = $result->fetch_object()) {
                    $transactionId = $row->transaction_id;
                   // insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                   // insertReportGL($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                }
            }
            $return_value = '|OK|Sales Agreement has successfully inserted/updated.' . $salesId . '|';
        } else {
            $return_value = '|FAIL|Insert/update sales agreement failed.||';
            echo $sql;
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'sales_local_data') {
    // <editor-fold defaultstate="collapsed" desc="sales_data">

    $return_value = '';
    $boolNew = false;
    $boolExists = true;
    $boolShipment = true;
    $boolUpdateShipment = false;
    
    $addMessage = "";
    // <editor-fold defaultstate="collapsed" desc="VARIABLE POST DATA">
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $salesNo = $myDatabase->real_escape_string($_POST['salesNo']);
    $shipmentNo = $myDatabase->real_escape_string($_POST['shipmentNo']);
    $salesDate = $myDatabase->real_escape_string($_POST['salesDate']);
    $shipmentDate = $myDatabase->real_escape_string($_POST['shipmentDate']);
    $salesType = $myDatabase->real_escape_string($_POST['salesType']);
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    //$customerName = $myDatabase->real_escape_string($_POST['customerName']);
    //$customerAddress = $myDatabase->real_escape_string($_POST['customerAddress']);
    //$npwp = $myDatabase->real_escape_string($_POST['npwp']);
    //$ppn = $myDatabase->real_escape_string($_POST['ppn']);
    //$pph = $myDatabase->real_escape_string($_POST['pph']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $destination = $myDatabase->real_escape_string($_POST['destination']);
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    $totalShipment = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalShipment']));
    $oldTotalShipment = str_replace(",", "", $myDatabase->real_escape_string($_POST['oldTotalShipment']));
    $bkp_jkp = $myDatabase->real_escape_string($_POST['bkp_jkp']);
    $peb_fp_no = $myDatabase->real_escape_string($_POST['peb_fp_no']);
    $pebDate = $myDatabase->real_escape_string($_POST['pebDate']);
	$vendorLangsir = 0;
    $stockpileLangsir = 0;
	$stockpileContractId = 0;
	
	echo $totalShipment;
	echo $oldTotalShipment;
    //$stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    //$vendorLangsir = $myDatabase->real_escapzle_string($_POST['vendorLangsir']);
    //$stockpileLangsir = $myDatabase->real_escape_string($_POST['stockpileLangsir']);
    // </editor-fold>
   

    if ($salesId == '') {
        $boolNew = true;
    } else {
        /*if ($totalShipment != $oldTotalShipment) {
            if ($totalShipment < $oldTotalShipment) {
                $boolShipment = false;
            }
        }*/
    }

		if ($salesDate != '' && $salesNo != '' && $salesType != '' && $customerId != '' && $currencyId != '' && $price != '' && $quantity != '' && $totalShipment != '' && $stockpileId != '' && $boolShipment) {

        if ($boolNew) {
            $sql = "SELECT * FROM `sales` WHERE company_id = {$_SESSION['companyId']} AND sales_no = '{$salesNo}'";
            $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($resultSales->num_rows > 0) {
                $boolExists = false;
            }
        }

        if ($boolExists) {
            if ($exchangeRate == '') {
                $exchangeRate = 1;
            }

           

            $priceConverted = $price * $exchangeRate;

            //closingDate
            $newSalesDate = implode("-", array_reverse(explode("/", $salesDate)));
            $checkClosingDate = explode('-', closingDate($newSalesDate, 'Sales - Sales Agreement'));
            $boolClosing = $checkClosingDate[0];
            $closingDate = $checkClosingDate[1];

            if (!$boolClosing) {
                $return_value = $closingDate;
                echo $return_value;
            } else {
                if ($boolNew) {
                    $sql = "INSERT INTO `sales` (sales_no, sales_date, sales_type, customer_id, "
                        . "stockpile_id, account_id, destination, notes, currency_id, exchange_rate, price, price_converted, quantity, "
                        . "total_shipment, shipment_date, bkp_jkp, peb_fp_no, peb_fp_date, company_id, entry_by, entry_date, stockpileContractId,vendorLangsir,stockpileLangsir,localSales) VALUES ("
                        . "'{$salesNo}', STR_TO_DATE('{$salesDate}', '%d/%m/%Y'), {$salesType}, "
                        . "{$customerId}, {$stockpileId}, {$accountId}, '{$destination}', '{$notes}', {$currencyId}, {$exchangeRate}, {$price}, "
                        . "{$priceConverted}, {$quantity}, {$totalShipment}, STR_TO_DATE('{$shipmentDate}', '%m/%Y'), '{$bkp_jkp}', '{$peb_fp_no}', STR_TO_DATE('{$pebDate}', '%d/%m/%Y'), {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$stockpileContractId},{$vendorLangsir},{$stockpileLangsir},1)";
                } else {
					
					$sql = "DELETE FROM shipment WHERE sales_id = {$salesId} AND shipment_date IS NULL AND shipment_status = 0";
					$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
					
					$sql = "SELECT COUNT(*) AS total_shipment FROM shipment WHERE sales_id = {$salesId}";
						$resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
						if ($resultStockpile->num_rows == 1) {
							$rowStockpile = $resultStockpile->fetch_object();
							$total_shipment = $rowStockpile->total_shipment;
						}
						if($total_shipment > $totalShipment){
							$totalShipment2 = $total_shipment;
						}else{
							$totalShipment2 = $totalShipment;
						}
						
                    $sql = "UPDATE `sales` sl LEFT JOIN shipment sh ON sl.sales_id = sh.sales_id SET "
                        . "sh.shipment_no = '{$shipmentNo}', "
                        . "sl.sales_no = '{$salesNo}', "
                        . "sl.sales_date = STR_TO_DATE('{$salesDate}', '%d/%m/%Y'), "
                        . "sl.sales_type = {$salesType}, "
                        . "sl.customer_id = {$customerId}, "
                        . "sl.stockpile_id = {$stockpileId}, "
                        . "sl.account_id = {$accountId}, "
                        . "sl.destination = '{$destination}', "
                        . "sl.notes = '{$notes}', "
                        . "sl.currency_id = {$currencyId}, "
                        . "sl.exchange_rate = {$exchangeRate}, "
                        . "sl.price = {$price}, "
                        . "sl.price_converted = {$priceConverted}, "
                        . "sl.quantity = {$quantity}, "
                        . "sl.total_shipment = {$totalShipment}, "
                        //. "sl.stockpileContractId = {$stockpileContractId}, "
                        //. "sl.vendorLangsir = {$vendorLangsir}, "
                        //. "sl.stockpileLangsir = {$stockpileLangsir}, "
                        . "sl.shipment_date = STR_TO_DATE('{$shipmentDate}', '%m/%Y'), "
                        . "sl.bkp_jkp = '{$bkp_jkp}', "
                        . "sl.peb_fp_no = '{$peb_fp_no}', "
                        . "sl.peb_fp_date = STR_TO_DATE('{$pebDate}', '%d/%m/%Y') "
                        . "WHERE sl.sales_id = {$salesId}";
                }
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				echo $sql;
                if ($result !== false) {
                    if ($boolNew) {
                        $salesId = $myDatabase->insert_id;
                        $j = 1;
                        $boolUpdateShipment = true;
                    } else {
                        if ($totalShipment > $total_shipment) {
                            $j = $total_shipment + 1;
                            $boolUpdateShipment = true;
                        } else {
                            $addMessage = "";
							//$boolUpdateShipment = true;
                        }

//                    $sql = "DELETE FROM `shipment` WHERE sales_id = {$salesId}";
//                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }

                    if ($boolUpdateShipment) {
                        for ($i = $j; $i <= $totalShipment; $i++) {
                            $shipmentCode = $salesNo . '-' . $i;

                            $sql = "INSERT INTO `shipment` (shipment_code, shipment_no, sales_id, entry_by, entry_date) VALUES ("
                                . "'{$shipmentCode}', '{$shipmentNo}', {$salesId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        }
                    }

                    $return_value = '|OK|Sales Agreement has successfully inserted/updated.' . $addMessage . '|' . $salesId . '|';
                } else {
                    $return_value = '|FAIL|Insert/update sales agreement failed.||';
                    echo $sql;
                }
            }
        } else {
            $return_value = '|FAIL|Sales agreement already exists.||';
        }
    } else {
        if (!$boolShipment) {
            $return_value = '|FAIL|Total shipment cant be less than before.||';
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'pengajuan_payment_sales_oa') {
    // <editor-fold defaultstate="collapsed" desc="pengajuan_payment">

    $return_value = '';
    $boolContinue = false;
    $boolBank = false;
    $boolUpdateTransaction = false;
    $boolUpdateShipment = false;
    $boolContinue2 = true;
    $boolContinue3 = true;
    $tempStamp = '';
    $periodPaymentFrom = '';
    $periodPaymentTo = '';
    $updateP = '';
    $swift = 'NULL';
    $uploadDocument = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentMethod = $myDatabase->real_escape_string($_POST['paymentMethod']);
    $paymentType = $myDatabase->real_escape_string($_POST['paymentType']);
    $stockpileLocation = $myDatabase->real_escape_string($_POST['stockpileLocationId']);
    $paymentFor = $myDatabase->real_escape_string($_POST['paymentFor']);

    

    $totalPrice = $myDatabase->real_escape_string($_POST['totalPrice']);
    $totalPrice1 = $myDatabase->real_escape_string($_POST['totalPrice1']);
    $downPayment = $myDatabase->real_escape_string($_POST['downPayment']);


    

    $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
    $originalAmount = $amount;
    $totalPPN = $myDatabase->real_escape_string($_POST['totalPpn']);
    $totalPPh = $myDatabase->real_escape_string($_POST['totalPph']);
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty']));
    $dpp = str_replace(",", "", $myDatabase->real_escape_string($_POST['dpp']));
    $grandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal']));

   
    $slipNos = "";

    //FreightDownPayment
    $qtyFreight = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyFreight']));
    $priceFreight = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceFreight']));
    $terminFreight = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminFreight']));
    $stockpileIdFcDp = $myDatabase->real_escape_string($_POST['stockpileIdFcDp']);
    $freightIdFcDp = $myDatabase->real_escape_string($_POST['freightIdFcDp']);
    $vendorFreightIdDp = $myDatabase->real_escape_string($_POST['vendorFreightIdDp']);
    $contractPKHOA1 = $myDatabase->real_escape_string($_POST['contractPKHOA1']);
    $freightBankDp = $myDatabase->real_escape_string($_POST['freightBankDp']); 
    $contractNoDp = $myDatabase->real_escape_string($_POST['contractNoDp']); 
    $ppnStatus = $myDatabase->real_escape_string($_POST['ppnStatus']);
    $pphStatus = $myDatabase->real_escape_string($_POST['pphStatus']);


    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $bank = $myDatabase->real_escape_string($_POST['bank']);
    $rek = $myDatabase->real_escape_string($_POST['rek']);
    $swift = $myDatabase->real_escape_string($_POST['swift']);

    $taxInvoice = $myDatabase->real_escape_string($_POST['taxInvoice']);
    $invoiceNo = $myDatabase->real_escape_string($_POST['invoiceNo']);
    $invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    $idPP = $myDatabase->real_escape_string($_POST['idPP']);
    $urgent_payment_type = $myDatabase->real_escape_string($_POST['tipeBayar']);
    $urgent_payment_date = $myDatabase->real_escape_string($_POST['tglBayarUrgent']);
    $dppTotal = $myDatabase->real_escape_string($_POST['dppTotal']);

    $freightBankId = $myDatabase->real_escape_string($_POST['freightBankId_1']);
	$freightId_1 = $myDatabase->real_escape_string($_POST['freightId_1']);
    $paymentFromFP = $myDatabase->real_escape_string($_POST['paymentFromFP']);
    $paymentToFP = $myDatabase->real_escape_string($_POST['paymentToFP']);
    $stockpileIdFreight = $myDatabase->real_escape_string($_POST['stockpileIdFreight']);
	$qty = $myDatabase->real_escape_string($_POST['totalQty']);
	$price = $myDatabase->real_escape_string($_POST['price']);
  
    $tempLog = '';
    $tempFile = '';

    //FILE
    if (isset($_FILES['file']) && $_FILES['file']['size'] > 0) {
        $allowed = array('png', 'jpg', 'pdf', 'doc', 'docs', 'xls', 'xlsx');
        $fileName = $_FILES['file']['name'];
        $x = explode('.', $fileName);
        $ekstensi = strtolower(end($x));
        $ukuran = $_FILES['file']['size'];
        $file_tmp = $_FILES['file']['tmp_name'];

        if (in_array($ekstensi, $allowed) === true) {

            $attachmentPath = "./import/pengajuan-stockpile-tipePengajuan-yyyymmdd/";
            if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
                $temp = mkdir($attachmentPath, 0755, TRUE);
            else
                $temp = TRUE;

            if ($temp === TRUE) {
                $attachmentPath .= "/" . date("ymdHis") . "-" . basename($fileName);
                if (!move_uploaded_file($file_tmp, $attachmentPath)) {
                    echo '|FAIL|Error while uploading file.|';
                    die();
                }
            } else {
                echo '|FAIL|Error while creating directory.|';
                die();
            }


        } else {
            echo '|FAIL|EKSTENSI FILE YANG DI UPLOAD TIDAK DI PERBOLEHKAN.|';
            die();
        }
    } else {
        $attachmentPath = 'NULL';
        $uploadDocument = false;
    }

    if ($vendorHandlingId == '') {
        $vendorHandlingId = 'NULL';
    }
    //$vendorBank = 'NULL';
    //$beneficiary = 'NULL';


    if ($urgent_payment_type == 1 && $urgent_payment_date == '') {
        $boolContinue3 = false;
    }
	//else if ($urgent_payment_type == 0 && $urgent_payment_date != '') {
    //    $urgent_payment_date = '';
    //}

    if ($paymentFor == 2) { //FREIGHT
        // FC payment
        $periodPaymentFrom = $paymentFrom;
        $periodPaymentTo = $paymentTo;
        //DP
        if($paymentMethod == 2 && $stockpileIdFcDp != '' && $freightIdFcDp != '' && $amount != 0 && $vendorFreightIdDp != '' && $contractNoDp != '' && $freightBankDp != '') {
            $boolContinue = true;
            $vendorFreightId = $vendorFreightIdDp;
            $stockpileContractId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
            $vendorId = 'NULL';
            $qty = $qtyFreight;
            $price = $priceFreight;
            $dpp = $originalAmountDp;
            $termin = $terminFreight;
            $freightId = $freightIdFcDp;
            $vendorBank = $freightBankDp;
            $contractId_settle = $contractNoDp;
            $settle = 'NULL';
            $totalPrice = $originalAmountDp;
            $dppShrinkPrice = 0;
            $contractPKHOA1 = 'NULL';

            if($ppnStatus == 0){
                $ppn = 0;
            }else{
                $ppn = $originalAmountDp * ($ppn/100);
            }

            if($pphStatus == 0){
                $pph = 0;
            }else{
                $pph = $originalAmountDp * ($pph/100);  
            }
       //     echo 'NILAI '.$pphStatus.' || '.$pph. '||' .$ppn. '|| ' .$ppnStatus;
        } else if ($paymentMethod == 1 && $stockpileId2 == 10 && $freightId == 26) {
            $boolContinue = true;
            //$ppn = 0;
            //$pph = 0;
            $freightId = 26;
            $stockpileContractId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
            $vendorId = 'NULL';
            $qty = 'NULL';
            $price = 'NULL';
            $vendorBank = $freightBankId;
            //$vendorBank = NULL;
            $grandTotal = $originalAmount;
            $termin = 'NULL';
            if($ppn == 0 || $ppn == 'NULL'){
                $ppnStatus = 0;
            }else{
                $ppnStatus = 1;
            }

            if($pph == 0 || $pph = 'NULL'){
                $pphStatus = 0;
            }else{
                $pphStatus = 1;
            }
        } elseif ($paymentMethod == 1 && $stockpileId2 != '' && $freightId != '' && $grandTotal >= 0 && $freightCostId1 != '') {
            if ($ppn > 0) {
                if ($taxInvoice != '') {
                    $boolContinue = true;
                }
            } else {
                $boolContinue = true;
            }
            $stockpileContractId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
            $vendorId = 'NULL';
            $vendorBank = $freightBankId;
            //$vendorBank = NULL;
            $contractPKHOA1 = $freightCostId1;
            $termin = 'NULL';
            $dpp = $totalPrice1;
            if($ppn == 0 || $ppn == 'NULL'){
                $ppnStatus = 0;
            }else{
                $ppnStatus = 1;
            }

            if($pph == 0 || $pph = 'NULL'){
                $pphStatus = 0;
            }else{
                $pphStatus = 1;
            }

        } elseif ($paymentMethod == 1 && $stockpileIdFreight != '' && $freightId_1 != '' && $grandTotal >= 0) {
            if ($ppn > 0) {
                if ($taxInvoice != '') {
                    $boolContinue = true;
                }
            } else {
                $boolContinue = true;
            }
            $stockpileContractId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
            $vendorId = 'NULL';
            $vendorBank = $freightBankId;
            //$vendorBank = NULL;
            $contractPKHOA1 = $freightCostId1;
            $termin = 'NULL';
            $dpp = $totalPrice;
			$amount = $grandTotal;
			//$originalAmount = $grandTotal;
            if ($contractPKHOA1 == '') {
                $contractPKHOA1 = 'NULL';
                $periodPaymentFrom = $paymentFromFP;
                $periodPaymentTo = $paymentToFP;
                $stockpileContractId = 'NULL';
                $vendorBank = $freightBankId;
                //	$vendorBank = NULL;
                $freightId = $freightId_1;
            } else {
                $contractPKHOA1 = $freightCostId1;
            }
            if($totalPPN == 0 || $totalPPN == 'NULL'){
                $ppnStatus = 0;
            }else{
                $ppnStatus = 1;
            }

            if($totalPPh == 0 || $totalPPh == 'NULL'){
                $pphStatus = 0;
            }else{
                $pphStatus = 1;
				 //$totalPPh = 1;
            }

        }
    } 

    if ($_POST['_method'] == 'INSERT') {
        if ($idPP == '' && $uploadDocument) {
            if ($paymentType != '' && $boolContinue && ($attachmentPath == 'NULL' || $attachmentPath != '') && $boolContinue3) {
                if ($paymentType == 2 && ($paymentFor == 2)) { //OUT
                    // <editor-fold defaultstate="collapsed" desc="PAYMENT - OUT - PKS Curah/FC/UC - UPDATE TRANSACTION">
                    if ($amount < $grandTotal || ($amount != 0 && $amount > $grandTotal)) {
                        $boolContinue2 = false;
                    } else {
                        $boolUpdateTransaction = true;

                         if ($paymentFor == 2) {
                            $whereProperty = "  p.freight_id = {$freightId} ";
                            $updateProperty = " fc_ppayment_id ";
                        } 
                        

                        if (isset($_POST['checkedSlips'])) {
                            $checks = $_POST['checkedSlips'];
                            for ($i = 0; $i < sizeof($checks); $i++) {
                                if ($slipNos == '') {
                                    $slipNos .= $checks[$i];
                                } else {
                                    $slipNos .= ',' . $checks[$i];

                                }
                            }
                        }

                    }
                    // </editor-fold>
                }
                //transaction_id = checklist/$slipNos


                $sql = "INSERT INTO pengajuan_payment_sales_oa(stockpile_location,payment_method, payment_type, stockpile_id, payment_for, vendor_id, vendor_bank_id,  
                        freight_id, vendor_handling_id, labor_id, total_qty, price, total_dpp, termin, total_amount, currency_id, total_ppn_amount, status_ppn,
                        total_pph_amount, status_pph, grand_total, tax_invoice, invoice_no, invoice_date, file, remarks, beneficiary,  bank, rek, swift, periodeFrom, periodeTo, entry_date,  settlement_status, user, urgent_payment_type) 
                        values ({$stockpileIdFreight},{$paymentMethod}, {$paymentType}, {$stockpileLocation}, {$paymentFor}, {$vendorId1}, {$vendorBank}, 
                        {$freightId}, {$vendorHandlingId}, {$laborId}, {$qty}, {$price}, {$dpp}, {$termin}, {$amount}, 1, {$totalPPN}, {$ppnStatus}, {$totalPPh}, {$pphStatus},{$grandTotal},
                        '{$taxInvoice}', '{$invoiceNo}', STR_TO_DATE('$invoiceDate', '%d/%m/%Y %H:%i:%s'), '{$attachmentPath}', '{$remarks}', '{$beneficiary}', '{$bank}', '{$rek}', '{$swift}', 
                        STR_TO_DATE('{$periodPaymentFrom}', '%d/%m/%Y'),STR_TO_DATE('{$periodPaymentTo}', '%d/%m/%Y'), STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),  0, {$_SESSION['userId']}, 0)";


                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if ($result !== false) {
                    $idPP = $myDatabase->insert_id;

                    //Log INSERT Pengajuan OA
                    $tempLog = '[INSERT][Pengajuan-OA]' . '[' . $idPP . ']';
                    $log = "INSERT INTO log_pengajuan_OA(entry_by, entry_date, log) value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
                    $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
                    if ($result_log !== false) {
                        $log_id = $myDatabase->insert_id;
                    }

                   /* $dpUpdate = "UPDATE pengajuan_payment_sales_oa SET dp_status = 1 where freight_cost_id = {$contractPKHOA1} and payment_method = 2 and dp_status = 0 and idPP != {$idPP} ";
                    $resultDp = $myDatabase->query($dpUpdate, MYSQLI_STORE_RESULT);*/


                   /* if ($paymentFor == 2) {
                        //detail supplier
                        $sqlSupplier = "SELECT vendor_id FROM vendor WHERE vendor_id IN ({$vendorFreightId})";
                        $resultSupplier = $myDatabase->query($sqlSupplier, MYSQLI_STORE_RESULT);

                        if ($resultSupplier->num_rows > 0) {
                            while ($rowSup = $resultSupplier->fetch_object()) {
                                $sql = "INSERT INTO pengajuan_payment_supplier(idPP, vendor_id, entry_by, entry_date) values ({$idPP}, {$rowSup->vendor_id}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result1 = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                            if ($result1 !== false) {
                                $pp_supplier = $myDatabase->insert_id;
                            }
                        }

                    }
					
					if($paymentMethod != 1){
                        // $sqlyy = "UPDATE `pengajuan_payment_dp` SET idpp = {$idPP} WHERE payment_id IN ({$paymentIds}) AND STATUS = 0";
                        // $result = $myDatabase->query($sqlyy, MYSQLI_STORE_RESULT);

                        if($paymentFor == 2 || $paymentFor == 9 || $paymentFor == 1){
                            $sqlContract_settle ="SELECT contract_id FROM contract WHERE contract_id IN ({$contractId_settle})";
                            $resultContract = $myDatabase->query($sqlContract_settle, MYSQLI_STORE_RESULT);
                            if($resultContract->num_rows > 0){
                                while($rowCon = $resultContract->fetch_object()){
                                    $sql = "INSERT INTO pengajuan_pks_contract(idPP, contract_id) values ({$idPP}, {$rowCon->contract_id})";
                                    $result1 = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                }
                                if($result1 !== false){
                                    $pks_contract_id = $myDatabase->insert_id;
                                }
                            }
                        }
                    }*/

                    if ($boolUpdateTransaction) {

                        $sqlNotim = "SELECT a.*, c.`ppn`, c.`ppn_tax_id`, c.`pph`, c.`pph_tax_id`, d.`tax_category`, c.`freight_supplier`
                        FROM `transaction` a
                        LEFT JOIN freight_cost_local_sales b ON a.`freight_cost_id` = b.`freight_cost_id`
                        LEFT JOIN freight_local_sales c ON c.`freight_id` = b.`freight_id`
                        LEFT JOIN tax d ON d.`tax_id` = c.`pph_tax_id`
                        WHERE a.`transaction_id` IN ({$slipNos})";
								$resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);  

                               
                                if($resultNotim !== false && $resultNotim->num_rows > 0) {
                                    
                                    while($rowNotim = $resultNotim->fetch_object()) {

                                        if($rowNotim->tax_category == 1){
                                            $fp = $rowNotim->freight_price / ((100 - $rowNotim->pph)/100);
                                        }else{
                                            $fp = $rowNotim->freight_price;
                                        }
                                            $transactionId = $rowNotim->transaction_id;
                                            $qty = $rowNotim->freight_quantity;
                                            $ppnId = $rowNotim->ppn_tax_id;
                                            $pphId = $rowNotim->pph_tax_id;
											$dppTotalPrice = $fp *  $qty;
                                            $ppnValue = $dppTotalPrice * ($rowNotim->ppn/100);
											$pphValue = $dppTotalPrice * ($rowNotim->pph/100);
                                            //$unitPrice = $rowNotim->price_converted;
											
											
											$totalOriginalAmount = ($dppTotalPrice + $ppnValue) - $pphValue;
                                            
                                            $sqlPayment = "INSERT INTO pengajuan_sales_oa(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                               ."  total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, status) "
                                                               ." VALUES({$idPP}, {$transactionId},{$paymentMethod}, {$fp}, {$qty}, {$dppTotalPrice}, "
                                                               ." {$totalOriginalAmount}, {$totalOriginalAmount}, {$ppnId}, {$ppnValue}, "
                                                               ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), 0)";
                                                $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT);    
                                          

									}
								}

                        /*$sql = "UPDATE `transaction` SET {$updateProperty} = {$idPP} WHERE transaction_id IN ($slipNos)";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/

                       /* if ($paymentFor == 0) {
                            $sql2 = "UPDATE stockpile_contract SET ppayment_id = {$idPP} WHERE stockpile_contract_id = ($stockpileContractId)";
                            $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                        }*/
                    }

                    // //INSERT Logbook
                    $sqlLog = "INSERT INTO logbook_new (ppayment_id, type_pengajuan, entry_date, status1) values ({$idPP}, 1, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),0)";
                    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
                    if ($resultLog !== false) {
                        $logbook_id = $myDatabase->insert_id;
                    }

                    //NILAI DP
                    //Koment by Yeni
                    /*if($paymentMethod == 1 && $paymentFor == 2){
                        if($contractPKHOA1 > 0 || $contractPKHOA1 != 0){
                            $sqlDp = "SELECT (downPayment - amount_payment) AS sisaDp FROM pengajuan_dp
                                    WHERE freight_cost_id = {$contractPKHOA1} AND STATUS = 3  ORDER BY pengajuan_dp_id DESC LIMIT 1";
                            $resultDp = $myDatabase->query($sqlDp, MYSQLI_STORE_RESULT);
                            if($resultDp !== false && $resultDp->num_rows == 1) {
                                $rowDp = $resultDp->fetch_object();
                                if($rowDp->sisaDp == 0 || $rowDp->sisaDp < 0){
                                    $downPayment = 0;
                                }
                                if($downPayment > 0){
                                $sqlDp = "INSERT INTO pengajuan_dp (idpp, freight_cost_id, labor_id, handling_id, amount_payment, downPayment, dpp_amount, entry_date, entry_by, status) values ({$idPP}, {$contractPKHOA1}, {$laborId}, {$vendorHandlingId}, {$totalPrice}, {$downPayment}, {$totalPrice1}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$_SESSION['userId']}, 0)";
                                    $resultDp = $myDatabase->query($sqlDp, MYSQLI_STORE_RESULT);
                                    if($resultDp !== false) {
                                        $pengajuan_dp_id = $myDatabase->insert_id;
                                    }
                                }
                            }else {
                                $sqlDp = "INSERT INTO pengajuan_dp (idpp, freight_cost_id, labor_id, handling_id, amount_payment, downPayment, dpp_amount, entry_date, entry_by, status) values ({$idPP}, {$contractPKHOA1}, {$laborId}, {$vendorHandlingId}, {$totalPrice}, {$downPayment}, {$totalPrice1}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$_SESSION['userId']}, 0)";
                                $resultDp = $myDatabase->query($sqlDp, MYSQLI_STORE_RESULT);
                                if($resultDp !== false) {
                                    $pengajuan_dp_id = $myDatabase->insert_id;
                                }
                            }
                        }
                    }*/


                    $return_value = '|OK|Pengajuan payment ' . $idPP . ' has inserted successfully. ';
                } else {
                    $return_value = '|FAIL| Fail to insert data.| ' . $sql;
                }
            } else {
                $return_value = '|FAIL| pengajuan payment type/boolContinue is null.| ';
            }
        } else {
            $return_value = '|FAIL| Dokumen invoice belum di upload.| ';
        }
    } else if($_POST['_method'] == 'REJECT'){

        $reject_remarks = $myDatabase->real_escape_string($_POST['reject_remarks']);

        $sqlx = "UPDATE pengajuan_sales_oa SET status = 1 WHERE idpp = {$idPP}";
        $result1 = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);

        $sqlUpdate = "UPDATE `pengajuan_payment_sales_oa` SET status = 5, reject_by = {$_SESSION['userId']}, reject_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), reject_remarks = '{$reject_remarks}'  WHERE idPP = {$idPP}";
        $result1 = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
        if($result1 !== false) {
            $return_value = '|OK|Reject successfully. ';
        }else {
            $return_value = '|FAIL| Fail to reject data.| ' . $sqlUpdate;
        }

        //$whereStatus = '';
        //$updateDP = '';
        /*$sqlReject = "SELECT * FROM reject_ppayment WHERE idPP = {$idPP}";
        $resultReject = $myDatabase->query($sqlReject, MYSQLI_STORE_RESULT);

        if($resultReject !== false && $resultReject->num_rows == 1){
            $sqlDelete = "DELETE FROM reject_ppayment where idPP = {$idPP}";
            $resultDelete = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);
             
            $whereStatus = " status = 0, email_date = NULL, re_pengajuan = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') , re_pengajuan_user = {$_SESSION['userId']}, ";

            $LogbooUpdate = "UPDATE logbook_new SET status1 = 0 WHERE ppayment_id = {$idPP}";
            $resultLogbook = $myDatabase->query($LogbooUpdate, MYSQLI_STORE_RESULT);

         }
         
        if($attachmentPath != 'NULL'){
            $tempFile = " file = '{$attachmentPath}', ";
        }

        if($paymentMethod == 2){
            $updateDP = " stockpile_id = {$stockpileId},
                        vendor_id = {$vendorId},
                        vendor_bank_id = {$vendorBank},
                        freight_id = {$freightId},
                        vendor_handling_id = {$vendorHandlingId},
                        labor_id = {$laborId},
                        total_qty = {$total_qty},
                        price = {$totalPrice},
                        termin = {$termin},
                        total_amount = {$total_amount},
                        total_ppn_amount = {$total_ppn},
                        status_ppn = {$ppnStatus},
                        total_pph_amount = {$total_pph},
                        status_pph = {$pphStatus},
                        grand_total = {$amount},
                        beneficiary = '{$beneficiary}',
                        bank = '{$bank}',
                        rek = '{$rek}', 
                        swift = '{$swift}', ";

            $sql1 = "UPDATE pengajuan_pks_contract SET contract_id = {$contractIds} WHERE idPP = {$idPP}";
            $result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
        }

        $sql = "UPDATE pengajuan_payment
            SET tax_invoice = '{$taxInvoice}',
                {$updateDP}
                invoice_no = '{$invoiceNo}',
                invoice_date = STR_TO_DATE('$invoiceDate', '%d/%m/%Y %H:%i:%s'),
                urgent_payment_type = {$urgent_payment_type},
                urgent_payment_date = STR_TO_DATE('$urgent_payment_date', '%d/%m/%Y %H:%i:%s'),
                {$whereStatus}
                {$tempFile}
                remarks = '{$remarks}'
            WHERE idPP = {$idPP}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($result !== false) {
                $tempLog = '[UPDATE][Pengajuan-OA]'. '['.$idPP.']';
                $log = "INSERT INTO log_pengajuan_OA(entry_by, entry_date, log) value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
                $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);

                $return_value = '|OK|Update successfully. ';
            }else {
                $return_value = '|FAIL| Fail to update data.| ' . $sql;
            }*/
    }
//$return_value = $test;


    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'approve_invoice_sales_oa') {
        // <editor-fold defaultstate="collapsed" desc="return_payment">
        $return_value = '';
        $vendorAll = '';
        $exchangeRate = 1;
        $uploadDocument = true;
        $whereproperty = '';
    
        $duedate = $myDatabase->real_escape_string($_POST['duedate']);
        $paymentMethod = $myDatabase->real_escape_string($_POST['paymentMethod']);
        $idPP = $myDatabase->real_escape_string($_POST['idPP']);
        $paymentFor = $myDatabase->real_escape_string($_POST['paymentForId']);
        $generatedInvoiceNo = $myDatabase->real_escape_string($_POST['generatedInvoiceNo']);
        $vendorId1 = $myDatabase->real_escape_string($_POST['vendorId']);
        $freightId = $myDatabase->real_escape_string($_POST['freightId_1']);
        $laborId = $myDatabase->real_escape_string($_POST['laborId']);
		$customerId = $myDatabase->real_escape_string($_POST['customerId']);
		$paymentTypeId = $myDatabase->real_escape_string($_POST['paymentTypeId']);
      //  echo " B " .$laborId;
        $vendorHandlingId = $myDatabase->real_escape_string($_POST['vendorHandlingId']);
        // $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
        // $exchangeRate = $myDatabase->real_escape_string($_POST['exchangeRate']);
        $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
        $dpp = str_replace(",", "", $myDatabase->real_escape_string($_POST['dppamount']));
        $ppn = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalppn']));
        $pph = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalpph']));
        $totalPrice = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalprice']));
        // $bankId = $myDatabase->real_escape_string($_POST['bankId']);
    
        //FreightDownPayment
        $freightIdFcDp = $myDatabase->real_escape_string($_POST['freightIdFcDp']); //currency kosong
        $vendorHandlingDp = $myDatabase->real_escape_string($_POST['vendorHandlingDp']); //currency kosong
        $laborDp = $myDatabase->real_escape_string($_POST['laborDp']);

        //FILE
        if (isset($_FILES['file2']) && $_FILES['file2']['size'] > 0) {
            $allowed = array('png', 'jpg', 'pdf', 'doc', 'docs', 'xls', 'xlsx');
            $fileName = $_FILES['file2']['name'];
            $x = explode('.', $fileName);
            $ekstensi = strtolower(end($x));
            $ukuran = $_FILES['file2']['size'];
            $file_tmp = $_FILES['file2']['tmp_name'];
    
            if (in_array($ekstensi, $allowed) === true) {
    
                $attachmentPath = "./import/pengajuan-bukti-email/";
                    if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
                        $temp = mkdir($attachmentPath, 0755, TRUE);
                    else
                        $temp = TRUE;
    
                    if ($temp === TRUE) {
                        $attachmentPath .= "/" . date("ymdHis") . "-" . basename($fileName);
                        if (!move_uploaded_file($file_tmp, $attachmentPath)) {
                            echo '|FAIL|Error while uploading file.|';
                            die();
                        }
                    } else {
                        echo '|FAIL|Error while creating directory.|';
                        die();
                    }
    
                
            } else {
                echo '|FAIL|EKSTENSI FILE YANG DI UPLOAD TIDAK DI PERBOLEHKAN.|';
                die();
            }
        } else {
            $attachmentPath = 'NULL';
            $uploadDocument = false;
        }
    
        if ($paymentFor == 1 && $paymentTypeId == 1) {
            //SALES
            $freightId = 0;
            $laborId = 0;
            $vendorHandlingId = 0;
			
        } else if ($paymentFor == 1) {
            //CURAH
            $freightId = 0;
            $laborId = 0;
            $vendorHandlingId = 0;
			$customerId = 0;
        }else if ($paymentFor == 9) {
            // HandlingC payment
            $laborId = 0;
            $freightId = 0;
            $vendorId1 = 0;
			$customerId = 0;
            if($paymentMethod == 2){
                $vendorHandlingId = $vendorHandlingId;
            }
            // else if($paymentMethod == 3 && $amount <= 0){
            //     $whereproperty = " ,ppn_amount = {$ppn}, pph_amount = {$pph}, dpp = {$dpp}, original_amount = {$totalPrice}";
            // }
        } else if ($paymentFor == 2) { //FREIGHT
            $laborId = 0;
            $vendorId1 = 0;
            $vendorHandlingId = 0;
			$customerId = 0;
            if ($paymentMethod == 2) {
                //DP
                $freightId = $freightIdFcDp;
            } else if($paymentMethod == 3 && $amount <= 0){
                //Settlement
                $whereproperty = " ,ppn_amount = {$ppn}, pph_amount = {$pph}, dpp = {$dpp}, original_amount = {$totalPrice}";
            }
        } else if ($paymentFor == 3) {
            // UNLOADING C payment
            $freightId = 0;
            $vendorId1 = 0;
            $vendorHandlingId = 0;
			$customerId = 0;
          
        }
    
        $amountConvert = 0;
        $amountConvert = $amount * $exchangeRate;
        if ($_POST['_method'] == 'INSERT') {
            if ($idPP != ''  && $uploadDocument) {
                if($amount > 0){
                    $statusPayment = 0;
                }else if($amount <= 0){
                    $statusPayment = 1;
                }
                $sql = "INSERT INTO invoice_sales_oa(idPP, type_transaction_id, inv_notim_no, vendor_id, freightId, laborId,
                                    vendorHandlingId, customer_id, bankId, currency, kurs, dpp, total_ppn, total_pph, amount, amount_converted, file1, entry_date, entry_by, due_date_inv, status_payment,invoice_status)
                            values ({$idPP}, {$paymentFor}, '{$generatedInvoiceNo}', {$vendorId1}, {$freightId}, {$laborId}, {$vendorHandlingId}, {$customerId}, 0, 0,
                           0, {$dpp}, {$ppn}, {$pph}, {$amount}, {$amount}, '{$attachmentPath}', STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']}, STR_TO_DATE('{$duedate}', '%d/%m/%Y %H:%i:%s'), {$statusPayment},1)";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
              //  echo $sql;
                if($result !== false) {
                    $inv_notim_id = $myDatabase->insert_id;
                    $invoiceId = $inv_notim_id;			
                    
                    if($amount <= 0){
                        $sqlPP = "UPDATE pengajuan_payment_sales_oa SET status = 3 {$whereproperty}
                                WHERE idPP = {$idPP}"; //UPDATE status Pengajuan Payment
                        $resultPP = $myDatabase->query($sqlPP, MYSQLI_STORE_RESULT);
                        echo $sqlPP;
                    }
                    else if($amount > 0){
                        $sqlPP = "UPDATE pengajuan_payment_sales_oa SET status = 1  WHERE idPP = {$idPP}"; //UPDATE status Pengajuan Payment
                        $resultPP = $myDatabase->query($sqlPP, MYSQLI_STORE_RESULT);
                    }
                    //echo $sqlPP;
                    if($paymentFor == 2 && $paymentMethod != 2 ){
                        $sqlx = "UPDATE pengajuan_sales_oa SET inv_notim_id = {$inv_notim_id} WHERE idpp = {$idPP}";
                        $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);

                    }
    
                    //UPDATE LOGBOOK PKS
                    $sqlLog = "UPDATE logbook_new set inv_notim_sales_id = {$inv_notim_id}, status1 = 1 where ppayment_id = {$idPP}";
                    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
    
                    $tempLog = '[INSERT][APPROVE-INVOICE-NOTIM]'. '['.$inv_notim_id.']';
                    $log = "INSERT INTO log_approve_invoice_notim(entry_by, entry_date, log) value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
                    $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
                    if($result_log !== false) {
                        $log_id = $myDatabase->insert_id;
                    }
					
					insertGeneralLedger($myDatabase, 'INVOICE SALES OA', $invoiceId);
					insertReportGL($myDatabase, 'INVOICE SALES OA', $invoiceId);
    
                    //  insertGeneralLedger($myDatabase, 'INVOICE NOTIM', $invoiceId);
                    //  insertReportGL($myDatabase, 'INVOICE NOTIM', $invoiceId);
                   // insertGeneralLedger($myDatabase, 'INVOICE NOTIM', $invoiceId);
    
                    $return_value = '|OK|Approve Pengajuan Invoice Berhasil|'.$sql;
                }else {
                    $return_value = '|FAIL|Approve Pengajuan Invoice failed.|'.$sql;
                }
            }else {
                $return_value = '|OK|GAGAL, Dokumen belum di upload.|'; 
            }
        }
        echo $return_value;
        die();
        
    }
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'payment_data_sales_oa') {
    // <editor-fold defaultstate="collapsed" desc="payment_data">

    $return_value = '';
    $boolContinue = false;
	$boolBank = false;
    $boolUpdateTransaction = false;
    $boolUpdateShipment = false;
    $boolContinue2 = true;
    $tempStamp = '';
    $periodPaymentFrom='';
    $periodPaymentTo='';
	$paymentId = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
     $paymentMethod = $myDatabase->real_escape_string($_POST['paymentMethod']);
    $paymentDate = $myDatabase->real_escape_string($_POST['paymentDate']);
    $paymentType = $myDatabase->real_escape_string($_POST['paymentType']);
	$payment_type = $myDatabase->real_escape_string($_POST['payment_type']);
    $bankId = $myDatabase->real_escape_string($_POST['bankId']);
    $paymentFor = $myDatabase->real_escape_string($_POST['paymentFor']);
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $stockpileSalesId = $myDatabase->real_escape_string($_POST['stockpileSalesId']);
    
    //$taxInvoice = $myDatabase->real_escape_string($_POST['taxInvoice']);
    //$invoiceNo = $myDatabase->real_escape_string($_POST['invoiceNo']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $bankCurrencyId = $myDatabase->real_escape_string($_POST['bankCurrencyId']);
    $journalCurrencyId = $myDatabase->real_escape_string($_POST['journalCurrencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
    $originalAmount = $amount;
	$totalDpp = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalDpp']));
	$totalAmount = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalAmount']));
    //$totalPrice = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalPrice']));
    $downPayment = str_replace(",", "", $myDatabase->real_escape_string($_POST['downPayment']));
    $grandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal']));
	$ppnInvoice = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppnInvoice']));
    $pphInvoice = str_replace(",", "", $myDatabase->real_escape_string($_POST['pphInvoice']));
    //$notes = $myDatabase->real_escape_string($_POST['paymentNotes']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
	$remarks2 = $myDatabase->real_escape_string($_POST['remarks2']);
    $paymentLocation = $myDatabase->real_escape_string($_POST['paymentLocation']);
	$stockpileLocation = $myDatabase->real_escape_string($_POST['stockpileLocation']);
    $chequeNo = $myDatabase->real_escape_string($_POST['chequeNo']);
	
    $slipNos = "";
    $shipmentNos = "";
	
	$invoiceBankId = $myDatabase->real_escape_string($_POST['invoiceBankId']);
	$invoiceCurrencyId = $myDatabase->real_escape_string($_POST['invoiceCurrencyId']);
	$invoiceKurs = $myDatabase->real_escape_string($_POST['invoiceKurs']);
	$idPP = $myDatabase->real_escape_string($_POST['idPP']);
	
	$idPG = $myDatabase->real_escape_string($_POST['idPG']);
	
	$invoiceOAId = $myDatabase->real_escape_string($_POST['invoiceSalesId']);
	$invoiceVendorOAId = $myDatabase->real_escape_string($_POST['invoiceVendorSalesId']);
  
  
	if($pphInvoice == '') {
            $pphInvoice = 0;
        }
	if($ppnInvoice == '') {
            $ppnInvoice = 0;
    }
		
	if($currencyId == 0 ) {
            $currencyId = 1;
        }

	$sqlBankAcc = "SELECT account_id FROM bank WHERE bank_id = {$bankId}";
                    $resultBankAcc = $myDatabase->query($sqlBankAcc, MYSQLI_STORE_RESULT);
                    if($resultBankAcc->num_rows == 1) {
                        $rowBankAcc = $resultBankAcc->fetch_object();

						if($rowBankAcc->account_id !== $accountId){
							$boolBank = true;
						}
					}	
		
	$termin = 'NULL';
	$vendorBank = 'NULL';

     if($paymentFor == 2) {
        // FC payment
        $periodPaymentFrom=$paymentFrom;
        $periodPaymentTo=$paymentTo;
        if($paymentMethod == 2 && $invoiceFreightId != '' && $bankId != '' && $stockpileOAId != '') { //Freight Dp && $stockpileIdFcDp != '' && $freightIdFcDp != '' && $freightBankDp != '' && $grandTotal != 0
           
            $boolContinue = true;
            $stockpileContractId = 'NULL';
            $invoiceId = 'NULL';
            $salesId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
			$qty = $qtyDp;
			$price = $priceDp;
			$termin = $termin;
			$freightId = $invoiceFreightId;
			$vendorBank = $FreightbankDp;
			$stockpileLocation = $stockpileOAId;
			$ppn = $ppnInvoice;
			$pph = $pphInvoice;
            $generalVendorId = 'NULL';
			$vendorHandlingId = 'NULL';
			$pphJournal = 'NULL';
			$amountConverted = $totalDpp;
			$originalAmount = $totalDpp;
			$amount = $totalDpp;

        } elseif($paymentMethod == 1 && $stockpileId2 == 10 && $freightId == 26 && $freightBankId != '') {
			$boolContinue = true;
            $ppn = 0;
            $pph = 0;
			$freightId = 26;
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
			$qty = 'NULL';
			$price = 'NULL';
            $generalVendorId = 'NULL';
			$vendorBank = $freightBankId;
			$totalPrice = $grandTotal;
      }elseif($paymentMethod == 1 && $stockpileLocation != '' && $idPP != '' && $grandTotal >= 0 && $invoiceBankId != '') { //payment
		  
			$pph = $pphInvoice;
			$ppn = $ppnInvoice;
            if($ppn > 0) {
                if($taxInvoice != '') {
                    $boolContinue = true;
                }
            } else {
                $boolContinue = true;
            }
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
			$qty = 'NULL';
			$price = 'NULL';
			$vendorBank = $invoiceBankId;
            $generalVendorId = 'NULL';
			$amount = $grandTotal;
			$originalAmount = $grandTotal;
			$pph = $pphInvoice;
			$ppn = $ppnInvoice;
        }
    } 
if ($_POST['_method'] == 'INSERT') {
	if($boolBank){
        if($paymentDate != '' && $paymentType != '' && $paymentMethod != '' && $accountId != '' && $bankId != '' &&
                $currencyId != ''  /*&& $boolContinue*/) {
        if($paymentMethod == 1 && $paymentType == 2 && ($paymentFor == 2)) {
                // <editor-fold defaultstate="collapsed" desc="PAYMENT - OUT - PKS Curah/FC/UC - UPDATE TRANSACTION">
                if($amount < $grandTotal || ($amount != 0 && $amount > $grandTotal)) {
                    $boolContinue2 = false;

                } else {
                    $boolUpdateTransaction = true;
                     if($paymentFor == 2) {
                        //$whereProperty = " AND p.freight_id = {$freightId} ";
                        //$updateProperty = " fc_payment_id ";
                        //$invoiceId = 'NULL';
                    } 

                    if (isset($_POST['checkedSlips'])) {
                        $checks = $_POST['checkedSlips'];
                        for ($i = 0; $i < sizeof($checks); $i++) {
                            if($slipNos == '') {
                                $slipNos .= $checks[$i];
                            } else {
                                $slipNos .= ','. $checks[$i];
                            }
                        }
                    }

                  

               /* if($grandTotal <= 0) {
                        $amount = $grandTotal;

                        $sql = "SELECT p.*, f.pph
                                FROM `payment` p
                                LEFT JOIN freight f ON f.`freight_id` = p.`freight_id`
                                WHERE p.payment_type = {$paymentType}
                                AND p.payment_method = 2 AND p.payment_status = 0
                                {$whereProperty}
                                AND p.amount_converted > 0
                                AND p.company_id = {$_SESSION['companyId']}
                                ORDER BY p.payment_id ASC";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if($result !== false && $result->num_rows > 0) {
                            $balanceLeft = $totalPrice;
                            while($row = $result->fetch_object()) {
                                    $dp = $row->amount_converted;
                                    $availableDP = $dp - $balanceLeft;
                                if($availableDP > 0) {
                                    $sql2 = "UPDATE payment SET amount = ". $availableDP/$row->exchange_rate .", amount_converted = ". $availableDP ." WHERE payment_id = {$row->payment_id}";
                                    $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                                //  break;
                                } elseif($availableDP <= 0) {
                                    $balanceLeft = $balanceLeft - $row->amount_converted;
                                    $sql2 = "UPDATE payment SET amount = 0, amount_converted = 0, pph_amount = 0  WHERE payment_id = {$row->payment_id}";
                                    $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                                }
                            }
                        }
                    } else {

                        ///if($freightId != 312 && $stockpileLocation != 8){
                    $amount = $grandTotal;

                        $sql = "UPDATE `payment` p SET p.amount = 0, p.amount_converted = 0
                                WHERE p.payment_type = {$paymentType}
                                AND p.payment_method = 2
                                {$whereProperty}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        //}
                    } //edited by alan*/
                    
                }
         
                // </editor-fold>
            }
            

        if($boolContinue2) {
                $sql = "select DATE_FORMAT(STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), '%y%m') AS slip_prefix from dual";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                $rowSlip = $resultSlip->fetch_object();
                $checkPaymentNo = $rowSlip->slip_prefix;


                $sql = "SELECT LPAD(RIGHT(payment_no, 5) + 1, 5, '0') AS next_id FROM payment WHERE company_id = {$_SESSION['companyId']} AND bank_id = {$bankId} AND payment_no LIKE '{$checkPaymentNo}%' ORDER BY payment_no DESC LIMIT 1";
                $resultPaymentNo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultPaymentNo->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 5, '0') AS next_id FROM dual LIMIT 1";
                    $resultPaymentNo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowPaymentNo = $resultPaymentNo->fetch_object();
                $nextPaymentNo = $rowPaymentNo->next_id;
                $paymentNo = $checkPaymentNo .'-'. $nextPaymentNo;

                if($exchangeRate == '') {
                    $exchangeRate = 1;
                }
                
              
                if($bankCurrencyId == $currencyId && $currencyId != $journalCurrencyId) {
                    // USD - USD - IDR
                    $originalAmountConverted = $originalAmount;
                    $amountConverted = $amount;
                    $ppnConverted = $ppn;
                    $pphConverted = $pph;
                    $amountJournal = $originalAmount * $exchangeRate;
                    $ppnJournal = $ppn * $exchangeRate;
                    $pphJournal = $pph * $exchangeRate;
                } elseif($bankCurrencyId != $currencyId && $currencyId != $journalCurrencyId) {
                    // IDR - USD - IDR
                    $originalAmountConverted = $originalAmount / $exchangeRate;
                    $amountConverted = $amount / $exchangeRate;
                    $ppnConverted = $ppn / $exchangeRate;
                    $pphConverted = $pph / $exchangeRate;
                    $amountJournal = $originalAmount;
                    $ppnJournal = $ppn;
                    $pphJournal = $pph;
                    $currencyId = $bankCurrencyId;
                } elseif($bankCurrencyId != $currencyId && $currencyId == $journalCurrencyId) {
                    // USD - IDR - IDR
                    $originalAmountConverted = $originalAmount * $exchangeRate;
                    $amountConverted = $amount * $exchangeRate;
                    $ppnConverted = $ppn * $exchangeRate;
                    $pphConverted = $pph * $exchangeRate;
                    $amountJournal = $originalAmount * $exchangeRate;
                    $ppnJournal = $ppn * $exchangeRate;
                    $pphJournal = $pph * $exchangeRate;
                    $currencyId = $bankCurrencyId;
                } else {
                    $originalAmountConverted = $originalAmount;
                    $amountConverted = $amount;
                    $ppnConverted = $ppn;
                    $pphConverted = $pph;
                    $amountJournal = $originalAmount;
                    $ppnJournal = $ppn;
                    $pphJournal = $pph;

                   

                }
                    if($freightId != '' && $fc_ppn_dp != 0){
                        //$amountJournal = $originalAmount - $fc_ppn_dp;
                    }

                 
                    
                $sql = "INSERT INTO payment (payment_no, payment_date, payment_type, payment_type2, payment_method, account_id, bank_id, invoice_sales_oa_id,"
                        . "vendor_bank_id,  remarks, currency_id, "
                        . "exchange_rate, amount, amount_converted, original_amount, original_amount_converted, ppn_amount, ppn_amount_converted, "
                        . "pph_amount, pph_amount_converted, amount_journal, ppn_journal, pph_journal, payment_location, cheque_no, entry_by, entry_date, stockpile_location,remarks2, status) VALUES ("
                        . "'{$paymentNo}', STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), {$paymentType}, {$payment_type},{$paymentMethod}, {$accountId}, {$bankId}, "
                        . "{$invoiceOAId},  {$vendorBank}, '{$remarks}', "
                        . "'{$currencyId}', {$exchangeRate}, "
                        . "'{$amount}', {$amountConverted}, {$originalAmount}, {$originalAmountConverted}, {$ppn}, {$ppnConverted}, "
                        . "{$pph}, {$pphConverted}, {$amountJournal}, {$ppnJournal}, {$pphJournal}, {$paymentLocation}, '{$chequeNo}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$stockpileLocation}, '{$remarks2}', 1)";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
           //       echo " SQL P ". $sql;
                if($result !== false) {
                    $paymentId = $myDatabase->insert_id;


                    if($boolUpdateTransaction) {
                        if($paymentFor == 2){
                            $sql = "SELECT transaction_id FROM `pengajuan_sales_oa` WHERE inv_notim_id = {$invoiceOAId}";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result !== false && $result->num_rows > 0) {
                            while($row = $result->fetch_object()) {
                                
                                $sqlU = "UPDATE `pengajuan_sales_oa` SET payment_id = '{$paymentId}' WHERE transaction_id = {$row->transaction_id} AND inv_notim_id = {$invoiceOAId}";
                                $resultU = $myDatabase->query($sqlU, MYSQLI_STORE_RESULT);

                                $sqlA = "UPDATE `transaction` SET fc_payment_id = '{$paymentId}' WHERE transaction_id = {$row->transaction_id}";
                                $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                            }
                        }
                    }
                            
                        $sql = "SELECT transaction_id, sync_status FROM `transaction` WHERE transaction_id IN ($slipNos)";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if($result !== false && $result->num_rows > 0) {
                            while($row = $result->fetch_object()) {
                                $syncStatus = 0;
                                if($row->sync_status == 1) {
                                    $syncStatus = 2;
                                }

                                $sql2 = "UPDATE `transaction` SET sync_status = {$syncStatus} WHERE transaction_id = {$row->transaction_id}";
                                $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                            }
                        }
                        
                    }
                    
                    //Update by yeni
                    if($idPP != ''){
                        $sqlPP = "UPDATE pengajuan_payment_sales_oa SET status = 3 WHERE idPP = {$idPP}"; //UPDATE status Pengajuan Payment
                        $resultPP = $myDatabase->query($sqlPP, MYSQLI_STORE_RESULT);
                        //echo $sqlPP;

                    
                        //UPDATE LOGBOOK PKS
                        $sqlLog = "UPDATE logbook_new set payment_id = {$paymentId}, status1 = 3,  type_pengajuan = 1 where ppayment_id = {$idPP}";
                        $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
                        
                        $sqlInvNotim = "UPDATE invoice_sales_oa set payment_id = {$paymentId}, status_payment = 1 where idPP = {$idPP}";
                        $resultInvNotim = $myDatabase->query($sqlInvNotim, MYSQLI_STORE_RESULT);
                        
                    }

                   /* if($boolUpdateShipment) {
                        $sql = "UPDATE `shipment` SET payment_id = {$paymentId} WHERE shipment_id IN ($shipmentNos)";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }

                    if($tempStamp != '') {
                        $sql = "UPDATE payment_detail SET payment_id = {$paymentId} WHERE payment_id = {$tempStamp}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }
                    if($paymentFor == 0) {
                        $sql = "SELECT con.contract_id, con.price_converted * con.quantity AS contract_amount, SUM(p.amount_converted) AS paid_amount, v.ppn, v.pph
                                FROM stockpile_contract sc
                                INNER JOIN `contract` con
                                    ON con.contract_id = sc.contract_id
                                INNER JOIN `payment` p
                                    ON p.stockpile_contract_id = sc.stockpile_contract_id
                                INNER JOIN vendor v
                                    ON v.vendor_id = con.vendor_id
                                WHERE sc.stockpile_contract_id = {$stockpileContractId}
                                AND con.company_id = {$_SESSION['companyId']} AND p.payment_status = 0
                                GROUP BY sc.stockpile_contract_id";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if($result->num_rows > 0) {
                            $row = $result->fetch_object();
                            $ppn = $row->ppn;
                            $pph = $row->pph;

                            $ppnAmount = ($ppn/100) * $row->contract_amount;
                            $pphAmount = ($pph/100) * $row->contract_amount;
                            $total  = $pphAmount + $ppnAmount + $row->contract_amount;


                            if($row->paid_amount >= $total)
                    {
                                $sqlUpdate = "UPDATE `contract` SET payment_status = 1 WHERE contract_id = {$row->contract_id}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            }
                        }
                    }

                    if($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 8) {
                        if($paymentMethod == 1){
                                $sqlUpdate = "UPDATE `invoice` SET payment_status = 1 WHERE invoice_id = {$invoiceId}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

                        }
                    }

                        $sql = "SELECT b.* FROM bank b LEFT JOIN payment p ON p.`bank_id` = b.`bank_id` WHERE p.payment_id = {$paymentId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if($result !== false && $result->num_rows > 0) {
                            while($row = $result->fetch_object()) {
                                $bankType = $row->bank_type;
                                $bankStockpile = $row->stockpile_id;

                            }
                        }


                    if($paymentFor == 10){
                            $sqlUpdate = "UPDATE `payment_cash` SET payment_id = {$paymentId}, payment_cash_method = {$paymentMethod} WHERE payment_id IS NULL AND entry_by = {$_SESSION['userId']}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

                            if($paymentMethod == 1){
                                $sqlUpdate = "UPDATE `payment_cash` SET payment_cash_status = 1 WHERE payment_id = {$paymentId}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

                        }
                    }*/
					
					insertGeneralLedger($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", "NULL", $paymentId);

					insertReportGL($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", "NULL", $paymentId);
					
                    unset($_SESSION['payment']);
                    
                    $return_value = '|OK|Payment has inserted successfully.|'. $paymentId .'|' .$sqlInvNotim;

                } else {
                    $return_value = '|FAIL|Failed insert payment1.||' . $sql .' |'; //invoiceFreightText
                    if($tempStamp != '') {
                        $sql = "DELETE FROM payment_detail WHERE payment_id = {$tempStamp}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }
                }
            } else {
                $return_value = '|FAIL|Please insert correct amount.||' . $sql;
            }
        } else {
            $return_value = '|FAIL|Please fill the required fields.||' . $invoiceFreightId;
            echo $sql;

        }
        }else{
            $return_value = '|FAIL|Please Choose Different Bank.||';
        }
    }

    echo $return_value;
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'pengajuan_payment_sales') {
        $return_value = '';
        $boolContinue = false;
        $boolBank = false;
        $boolUpdateTransaction = false;
        $boolContinue2 = true;
        $boolContinue3 = true;
        $tempStamp = '';
        $periodPaymentFrom='';
        $periodPaymentTo='';
        $updateP = '';
        $swift = 'NULL';
        $uploadDocument = true;
        $fromTable = '';
        $fromTable2 = '';
        $dppShrinkPrice = 0;
        $slipNos = "";
        $tempLog = '';
        $tempFile = '';
        $statusDp = 0; // 1 = checked
        $wherePropertyDp = '';

        $idPP = $myDatabase->real_escape_string($_POST['idPP']);
        $paymentMethod = $myDatabase->real_escape_string($_POST['paymentMethod']);
        $paymentType = $myDatabase->real_escape_string($_POST['paymentType']);
        $stockpileLocation = $myDatabase->real_escape_string($_POST['stockpileLocationId']);
        $paymentFor = $myDatabase->real_escape_string($_POST['paymentFor']);
    
        $total_amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalAllPrice']));
        $total_ppn = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn']));
        $total_pph = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph']));
        $ppnStatus = $myDatabase->real_escape_string($_POST['ppnStatus']);
        $pphStatus = $myDatabase->real_escape_string($_POST['pphStatus']);
        $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
        $total_qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalQty']));
		$unitPrice = str_replace(",", "", $myDatabase->real_escape_string($_POST['unitPrice']));
        $total_dpp = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalPrice2'])); 
        $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
        $totalShrink = $myDatabase->real_escape_string($_POST['totaldppShrink']);	

        //Curah
        $paymentFromSales = $myDatabase->real_escape_string($_POST['paymentFromSales']);
        $paymentToSales = $myDatabase->real_escape_string($_POST['paymentToSales']);
        $stockpileIdSales = $myDatabase->real_escape_string($_POST['stockpileIdSales']);
        $customerId = $myDatabase->real_escape_string($_POST['customerId']);
        $contractSales = $myDatabase->real_escape_string($_POST['contractSales']); 
        $salesBankId =  $myDatabase->real_escape_string($_POST['salesBankId']); 

        //Curah DP
        /*$stockpileIdCurahDp = $myDatabase->real_escape_string($_POST['stockpileIdCurahDp']);
        $vendorIdCurahDp = $myDatabase->real_escape_string($_POST['vendorIdCurahDp']);
        $contractCurahDp = $myDatabase->real_escape_string($_POST['contractCurahDp']);
        $curahBankDp = $myDatabase->real_escape_string($_POST['curahBankDp']);
        $cDp_ppnId =  $myDatabase->real_escape_string($_POST['taxidPpnC']); 
        $cDp_ppnVal =  $myDatabase->real_escape_string($_POST['ppnC']); 
        $cDp_ppnStatus =  $myDatabase->real_escape_string($_POST['ppnStatusC']); 
        $cDp_pphId =  $myDatabase->real_escape_string($_POST['taxidPphC']); 
        $cDp_pphVal =  $myDatabase->real_escape_string($_POST['pphC']); 
        $cDp_pphStatus =  $myDatabase->real_escape_string($_POST['pphStatusC']); 
        $qtyCurahDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyCurah']));
        $priceCurahDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceCurah']));
        $terminCurahDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminCurah']));
		*/
        //Freight Payment
        $freightId_1 = $myDatabase->real_escape_string($_POST['freightId_1']);
        $paymentFromFP = $myDatabase->real_escape_string($_POST['paymentFromFP']);
        $paymentToFP = $myDatabase->real_escape_string($_POST['paymentToFP']);
        $freightBankId_1 = $myDatabase->real_escape_string($_POST['freightBankId_1']);
        $contractIds = $myDatabase->real_escape_string($_POST['contractIds']); 
        $stockpileIdFreight =  $myDatabase->real_escape_string($_POST['stockpileIdFreight']); 
        $grandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal']));

        //Freight Settle
        $DppGrandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['DppGrandTotal']));
        $totalDownPayment = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalDownPayment']));
        $totalDppDpFC = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalDppDpFC']));

        //Freight DP
        $stockpileIdFcDp = $myDatabase->real_escape_string($_POST['stockpileIdFcDp']);
        $freightIdFcDp = $myDatabase->real_escape_string($_POST['freightIdFcDp']);
        $freightBankDp = $myDatabase->real_escape_string($_POST['freightBankDp']);
        $supplierIdDp = $myDatabase->real_escape_string($_POST['supplierIdDp']);
        $contractNoDp = $myDatabase->real_escape_string($_POST['contractNoDp']); 
        $fDp_ppnId =  $myDatabase->real_escape_string($_POST['taxidPpn']); 
        $fDp_ppnVal =  $myDatabase->real_escape_string($_POST['ppn']); 
        $fDp_ppnStatus =  $myDatabase->real_escape_string($_POST['ppnStatus']); 
        $fDp_pphId =  $myDatabase->real_escape_string($_POST['taxidPph']); 
        $fDp_pphVal =  $myDatabase->real_escape_string($_POST['pph']); 
        $fDp_pphStatus =  $myDatabase->real_escape_string($_POST['pphStatus']); 
        $qtyFreightDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyFreight']));
        $priceFreightDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceFreight']));
        $terminFreightDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminFreight']));
        $originalAmountDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['originalAmountDp']));

        //Handling Payment
        /*$stockpileIdHandling = $myDatabase->real_escape_string($_POST['stockpileIdHandling']); 
        $vendorHandlingId =  $myDatabase->real_escape_string($_POST['vendorHandlingId']);
        $paymentFromHP =  $myDatabase->real_escape_string($_POST['paymentFromHP']);
        $paymentToHP =  $myDatabase->real_escape_string($_POST['paymentToHP']);
        $vendorHandlingBankId =  $myDatabase->real_escape_string($_POST['vendorHandlingBankId']);

        //Handling DP
        $stockpileVhDp = $myDatabase->real_escape_string($_POST['stockpileVhDp']);
        $vendorHandlingDp = $myDatabase->real_escape_string($_POST['vendorHandlingDp']);
        $vendorHandlingBankDp = $myDatabase->real_escape_string($_POST['vendorHandlingBankDp']);
        $contractHandlingDp = $myDatabase->real_escape_string($_POST['contractHandlingDp']); 
        $hDp_ppnId =  $myDatabase->real_escape_string($_POST['taxidPpnH']); 
        $hDp_ppnVal =  $myDatabase->real_escape_string($_POST['ppnH']); 
        $hDp_ppnStatus =  $myDatabase->real_escape_string($_POST['ppnStatusHC']); 
        $hDp_pphId =  $myDatabase->real_escape_string($_POST['taxidPphH']); 
        $hDp_pphVal =  $myDatabase->real_escape_string($_POST['pphH']); 
        $hDp_pphStatus =  $myDatabase->real_escape_string($_POST['pphStatusHC']); 
        $qtyHandlingDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyHandlingDP']));
        $priceHandlingDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceHandlingDP']));
        $terminHandlingDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminHandlingDP']));

        //Unloading Payment
        $paymentFromUP = $myDatabase->real_escape_string($_POST['paymentFromUP']); 
        $paymentToUP =  $myDatabase->real_escape_string($_POST['paymentToUP']);
        $stockpileOB =  $myDatabase->real_escape_string($_POST['stockpileOB']);
        $laborId =  $myDatabase->real_escape_string($_POST['laborId']);
        $laborBankId =  $myDatabase->real_escape_string($_POST['laborBankId']);

        //Unloading DP
        $stockpileLaborDp = $myDatabase->real_escape_string($_POST['stockpileLaborDp']);
        $laborDp = $myDatabase->real_escape_string($_POST['laborDp']);
        $laborBankDp = $myDatabase->real_escape_string($_POST['laborBankDp']);
        $lDp_ppnId =  $myDatabase->real_escape_string($_POST['taxidPpnOB']); 
        $lDp_ppnVal =  $myDatabase->real_escape_string($_POST['ppnOB']); 
        $lDp_ppnStatus =  $myDatabase->real_escape_string($_POST['ppnStatusOb']); 
        $lDp_pphId =  $myDatabase->real_escape_string($_POST['taxidPphOB']); 
        $lDp_pphVal =  $myDatabase->real_escape_string($_POST['pphOB']); 
        $lDp_pphStatus =  $myDatabase->real_escape_string($_POST['pphStatusOb']); 
        $qtyLaborDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyLabor']));
        $priceLaborDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceLabor']));
        $terminLaborDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminLabor']));
		*/
        $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
        $bank = $myDatabase->real_escape_string($_POST['bank']);
        $rek = $myDatabase->real_escape_string($_POST['rek']);
        $swift = $myDatabase->real_escape_string($_POST['swift']);
    
        $taxInvoice = $myDatabase->real_escape_string($_POST['taxInvoice']);
        $invoiceNo = $myDatabase->real_escape_string($_POST['invoiceNo']);
        $invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
        $remarks = $myDatabase->real_escape_string($_POST['remarks']);
        $urgent_payment_type = $myDatabase->real_escape_string($_POST['tipeBayar']);
        if($urgent_payment_type == 1){
            $urgent_payment_date = $myDatabase->real_escape_string($_POST['requestPaymentDate1']);
        }else{
            $urgent_payment_date = $myDatabase->real_escape_string($_POST['requestPaymentDate']);
        }
        $settle = $myDatabase->real_escape_string($_POST['settle']);
        if($paymentMethod == 3){
            if($settle == ''){
                $settle = 0;
            }else{
                $settle = $myDatabase->real_escape_string($_POST['settle']);
            }

        }
        //FILE
        if (isset($_FILES['file']) && $_FILES['file']['size'] > 0) {
            $allowed = array('png', 'jpg', 'pdf', 'doc', 'docs', 'xls', 'xlsx');
            $fileName = $_FILES['file']['name'];
            $x = explode('.', $fileName);
            $ekstensi = strtolower(end($x));
            $ukuran = $_FILES['file']['size'];
            $file_tmp = $_FILES['file']['tmp_name'];
    
            if (in_array($ekstensi, $allowed) === true) {
    
                $attachmentPath = "./import/pengajuan-sales/.$currentYearMonth.";
                    if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
                        $temp = mkdir($attachmentPath, 0755, TRUE);
                    else
                        $temp = TRUE;
    
                    if ($temp === TRUE) {
                        $attachmentPath .= "/" . date("ymdHis") . "-" . basename($fileName);
                            if (!move_uploaded_file($file_tmp, $attachmentPath)) {
                                echo '|FAIL|Error while uploading file.|';
                                die();
                            }
                    } else {
                        echo '|FAIL|Error while creating directory.|';
                        die();
                    }
    
                
            } else {
                echo '|FAIL|EKSTENSI FILE YANG DI UPLOAD TIDAK DI PERBOLEHKAN.|';
                die();
            }
        } else {
            $attachmentPath = 'NULL';
            $uploadDocument = false;
        }

        if($paymentFor == 1) { //Sales 
            $vendorHandlingId = 0;
            $freightId = 0;
            $laborId = 0;
			$vendorId = 0;
            $totalShrink2 = 0;
            $totalShrink = 0;
			//$total_ppn = 0;
			$total_pph = 0;
            //PAYMENT
            if($paymentMethod != 2 && $stockpileIdSales != '' && $customerId != '' && $grandTotal != 0) 
            {
                $periodPaymentFrom=$paymentFromSales;
                $periodPaymentTo=$paymentToSales;
                $stockpileId = $stockpileIdSales;
                $vendorBank = $salesBankId;
                $total_amount = $total_dpp;
                if($paymentMethod == 1){
                    $settle = 0;
                }
                $termin = 0;
                if($total_ppn > 0) {
                    if($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
                if($total_ppn == 0){
                    $ppnStatus = 0;
					$total_ppn = 0;
                }else{
                    $ppnStatus = 1;
					$total_ppn = $total_ppn;
                }
            
                if($total_pph == 0){
                    $pphStatus = 0;
                }else{
                    $pphStatus = 1;
                }
            } //DP
            else if($paymentMethod == 2 && $stockpileIdCurahDp != '' && $vendorIdCurahDp != '' && $contractCurahDp != '' && $amount != 0) 
            {
                $boolContinue = true;
                $stockpileId = $stockpileIdCurahDp;
                $vendorBank = $curahBankDp;
                $vendorId = $vendorIdCurahDp;
                $contractIds = $contractCurahDp;
                $total_qty = $qtyCurahDp;
                $totalPrice = $priceCurahDp;
                $termin = $terminCurahDp;
                $total_dpp = $originalAmountDp;
                $total_amount = $originalAmountDp;
                $ppnStatus = $cDp_ppnStatus;
                $pphStatus = $cDp_pphStatus;
                $settle = 0;

                if($ppnStatus == 0){
                    $total_ppn = 0;
                }else{
                    $total_ppn = $total_dpp * ($cDp_ppnVal/100);
                }
    
                if($pphStatus == 0){
                    $total_pph = 0;
                }else{
                    $total_pph = $total_dpp * ($cDp_pphVal/100);  
                }
            }
          }else if($paymentFor == 2) { //FREIGHT
            $vendorHandlingId = 0;
            $laborId = 0;
            //DP
            if($paymentMethod == 2 && $stockpileIdFcDp != '' && $freightIdFcDp != '' && $amount != 0 && $supplierIdDp != '' && $contractNoDp != '' && $freightBankDp != '') {
              
                $boolContinue = true;
                $vendorBank = $freightBankDp;
                $freightId = $freightIdFcDp;
                $total_qty = $qtyFreightDp;
                $totalPrice = $priceFreightDp;
                $total_dpp = $originalAmountDp;
                $totalShrink2 = 0;
                $totalShrink = 0;
                $termin = $terminFreightDp;
                $total_amount = $originalAmountDp;
                $ppnStatus = $fDp_ppnStatus;
                $pphStatus = $fDp_pphStatus;
                $settle = 0;
                $vendorId = $supplierIdDp;
                $contractIds = $contractNoDp;
                $stockpileId = $stockpileIdFcDp;
    
                if($ppnStatus == 0){
                    $total_ppn = 0;
                }else{
                    $total_ppn = $total_dpp * ($fDp_ppnVal/100);
                }
    
                if($pphStatus == 0){
                    $total_pph = 0;
                }else{
                    $total_pph = $total_dpp * ($fDp_pphVal/100);  
                }
           //     echo 'NILAI '.$pphStatus.' || '.$pph. '||' .$ppn. '|| ' .$ppnStatus;
            }else if($paymentMethod != 2 && $stockpileIdFreight != '' && $freightId_1 != '' && $grandTotal >= 0) {
                $periodPaymentFrom = $paymentFromFP;
                $periodPaymentTo = $paymentToFP;
                $vendorId = 0;
                if($total_ppn > 0) {
                    if($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
                $termin = 0;
                $vendorBank = $freightBankId_1;
                $freightId = $freightId_1;
                $vendorFreightId = $vendorFreightId_1;
                $totalShrink2 = 0;
                if($paymentMethod == 1){
                    $settle = 0;
                }
              
                $stockpileId = $stockpileIdFreight;
                $amount = $grandTotal;
              
                if($total_ppn == 0){
                    $ppnStatus = 0;
                }else{
                    $ppnStatus = 1;
                }
    
                if($total_pph == 0){
                    $pphStatus = 0;
                }else{
                    $pphStatus = 1;
                }
            }
        }/*else if($paymentFor == 9) { //Handling
            $freightId = 0;
            $vendorId = 0;
            $laborId = 0;
            $totalShrink2 = 0;
            $totalShrink = 0;
            
            // PAYMENT
            if($paymentMethod == 1 && $stockpileIdHandling != '' && $vendorHandlingId != '' && $grandTotal >= 0 ) {
                $periodPaymentFrom = $paymentFromHP;
                $periodPaymentTo = $paymentToHP;
                $stockpileId = $stockpileIdHandling;
                $termin = 0;

                if($total_ppn > 0) {
                    if($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
                $vendorBank = $vendorHandlingBankId;
                $total_amount = $total_dpp;
                $settle = 0;
                
                if($total_ppn == 0){
                    $ppnStatus = 0;
                }else{
                    $ppnStatus = 1;
                }
    
                if($total_pph == 0){
                    $pphStatus = 0;
                }else{
                    $pphStatus = 1;
                }
            } //HANDLING DP
            else if($paymentMethod == 2 && $stockpileVhDp != '' && $vendorHandlingDp != '' && $vendorHandlingBankDp != '' && $amount != 0) {
              
                $boolContinue = true;
                $stockpileId = $stockpileVhDp;
                $vendorHandlingId = $vendorHandlingDp;
                $vendorBank = $vendorHandlingBankDp;
                $total_qty = $qtyHandlingDp;
                $totalPrice = $priceHandlingDp;
                $total_dpp = $originalAmountDp;
                $termin = $terminHandlingDp;
                $total_amount = $originalAmountDp;
                $ppnStatus = $hDp_ppnStatus;
                $pphStatus = $hDp_pphStatus;
                $settle = 0;
                $contractIds = $contractHandlingDp;

                if($ppnStatus == 0){
                    $total_ppn = 0;
                }else{
                    $total_ppn = $total_amount * ($hDp_ppnVal/100);
                }
    
                if($pphStatus == 0){
                    $total_pph = 0;
                }else{
                    $total_pph = $total_amount * ($hDp_pphVal/100);  
                }
            }
        }else if($paymentFor == 3) {// UNLOADING 
            $freightId = 0;
            $vendorId = 0;
            $vendorHandlingId = 0;
            $totalShrink2 = 0;
            $totalShrink = 0;

            if(($paymentMethod == 1 || $paymentMethod == 3 )&& $stockpileOB != '' && $laborId != '' && $grandTotal >= 0 )  {
                $periodPaymentFrom=$paymentFromUP;
                $periodPaymentTo=$paymentToUP;
                $stockpileId = $stockpileOB;
                $totalPrice = $total_dpp;
                $total_amount = $total_dpp;
                $termin = 0;
                $settle = 0;
                $vendorBank = $laborBankId;
                $termin = 0;
               
                
                if($total_ppn > 0) {
                    if($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
             
                if($total_ppn == 0){
                    $ppnStatus = 0;
                }else{
                    $ppnStatus = 1;
                }
    
                if($total_pph == 0){
                    $pphStatus = 0;
                }else{
                    $pphStatus = 1;
                }
            }//DP
            else if($paymentMethod == 2 && $stockpileLaborDp != '' && $laborDp != '' && $amount != 0){
                $boolContinue = true;
               $stockpileId = $stockpileLaborDp;
               $vendorBank = $laborBankDp;
               $laborId = $laborDp;
               $total_qty = $qtyLaborDp;
               $totalPrice = $priceLaborDp;
               $total_dpp = $originalAmountDp;
               $termin = $terminLaborDp;
               $total_amount = $originalAmountDp;
               $ppnStatus = $lDp_ppnStatus;
                $pphStatus = $lDp_pphStatus;
                $settle = 0;
                if($ppnStatus == 0){
                    $total_ppn = 0;
                }else{
                    $total_ppn = $total_amount * ($lDp_ppnVal/100);
                }
    
                if($pphStatus == 0){
                    $total_pph = 0;
                }else{
                    $total_pph = $total_amount * ($lDp_pphVal/100);  
                }
            }
        }*/

        if ($_POST['_method'] == 'INSERT') {
            if($idPP == '' && $uploadDocument){
                if($paymentType != '' && $boolContinue && ($attachmentPath == 'NULL' || $attachmentPath != '')) {
                    //Transaction Id
                    if (isset($_POST['checkedSlips'])) {                                            
                        $checks = $_POST['checkedSlips'];
                        for ($i = 0; $i < sizeof($checks); $i++) {
                            if($slipNos == '') {
                                $slipNos .= $checks[$i];
                            } else {
                                $slipNos .= ','. $checks[$i];            
                            }
                        }
                    }
                    //Curah
                    if($paymentFor == 1) {
                        $paymentIds = '';
						$totalPrice = 0;
                        if (isset($_POST['checkedSlipsDP'])) {
                            $checksDP = $_POST['checkedSlipsDP'];
                            for ($i = 0; $i < sizeof($checksDP); $i++) {
                                if($paymentIds == '') {
                                    $paymentIds .= $checksDP[$i];
                                } else {
                                    $paymentIds .= ','. $checksDP[$i];         
                                }
                            }
                        }
                        
                            $whereProperty = " AND p.vendor_id = {$vendorId} AND p.payment_id IN ({$paymentIds})";
                            $statusDp = $paymentIds;

                            $sqlPrice = "SELECT round(t.unit_price,2) as unitPrice FROM TRANSACTION t
                            LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                            LEFT JOIN contract con ON con.contract_id = sc.contract_id
                            WHERE transaction_id IN ({$slipNos}) GROUP BY con.contract_id";
                          //  echo $sqlprice;
                            $resultPrice =  $myDatabase->query($sqlPrice, MYSQLI_STORE_RESULT);    
                            if($resultPrice !== false) {
                                
                                while($row = $resultPrice->fetch_object()){
                                    $totalPrice = $totalPrice + $row->unitPrice;
                                }
                            }
                        
                    } 

                    //FREIGHT
                   else if($paymentFor == 2) {
                        if($paymentMethod != 2){
                            if (isset($_POST['checkedSlipsDP'])) {
                                $checksDP = $_POST['checkedSlipsDP'];
                                for ($i = 0; $i < sizeof($checksDP); $i++) {
                                    if($paymentIds == '') {
                                        $paymentIds .= $checksDP[$i];
                                    } else {
                                        $paymentIds .= ','. $checksDP[$i];
                                    }
                                }
                            }
                            $wherePropertyDp = "  AND p.freight_id = {$freightId_1} AND p.payment_id IN ({$paymentIds})";
                            $statusDp = $paymentIds;
                        

                            $sqlPrice = "SELECT t.freight_price FROM TRANSACTION t
                                        LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                                        LEFT JOIN contract con ON con.contract_id = sc.contract_id
                                        WHERE transaction_id IN ({$slipNos}) GROUP BY con.contract_id";
                            $resultPrice =  $myDatabase->query($sqlPrice, MYSQLI_STORE_RESULT);    
                            if($resultPrice !== false) {
                                $totalPrice = 0;
                                while($row = $resultPrice->fetch_object()){
                                    $totalPrice = $totalPrice + $row->freight_price;
                                }
                            }
                        }
                    }  //HANDLING
                   /* else if($paymentFor == 9) {
                        $paymentIds = '';
                        if($paymentMethod != 2){
                            if (isset($_POST['checkedSlipsDP'])) {
                                $checksDP = $_POST['checkedSlipsDP'];
                                for ($i = 0; $i < sizeof($checksDP); $i++) {
                                    if($paymentIds == '') {
                                        $paymentIds .= $checksDP[$i];
                                    } else {
                                        $paymentIds .= ','. $checksDP[$i];
                                    }
                                }
                            }
                            $whereProperty = " AND p.vendor_handling_id = {$vendorHandlingId} AND p.payment_id IN ({$paymentIds})";
                            $statusDp = $paymentIds;
                        

                            $sqlPrice = "SELECT t.handling_price FROM TRANSACTION t
                                        LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                                        LEFT JOIN contract con ON con.contract_id = sc.contract_id
                                        LEFT JOIN vendor_handling_cost vhc ON vhc.`handling_cost_id` = t.`handling_cost_id`
                                        WHERE transaction_id IN ({$slipNos}) GROUP BY con.contract_id";
                            $resultPrice =  $myDatabase->query($sqlPrice, MYSQLI_STORE_RESULT);    
                            if($resultPrice !== false) {
                                $totalPrice = 0;
                                while($row = $resultPrice->fetch_object()){
                                    $totalPrice = $totalPrice + $row->handling_price;
                                }
                            }
                        }
                    }   //UNLOADING
                    else if($paymentFor == 3) {
                        $paymentIds = '';
                        if($paymentMethod != 2){
                            if (isset($_POST['checkedSlipsDP'])) {
                                $checksDP = $_POST['checkedSlipsDP'];
                                for ($i = 0; $i < sizeof($checksDP); $i++) {
                                    if($paymentIds == '') {
                                        $paymentIds .= $checksDP[$i];
                                    } else {
                                        $paymentIds .= ','. $checksDP[$i];         
                                    }
                                }
                            }
                        
                            $whereProperty = " AND p.labor_id = {$laborId} AND p.payment_id IN ({$paymentIds})";
                            $statusDp = $paymentIds;
                        }
                    } */

                    if(($paymentMethod == 3 && $statusDp != 0) || (($paymentMethod == 1 || $paymentMethod == 2))) {
                        
                        $sql = "INSERT INTO pengajuan_payment_sales(payment_method, payment_type, stockpile_location, stockpile_id, payment_for, vendor_id, vendor_bank_id, 
                                freight_id, vendor_handling_id, labor_id, customer_id, total_qty, price, total_dpp, total_shrink2, total_shrink, termin, total_amount, currency_id, total_ppn_amount,status_ppn, 
                                total_pph_amount, status_pph, grand_total, tax_invoice, invoice_no, invoice_date, file, remarks, beneficiary,  bank, rek, swift, periodeFrom, periodeTo, entry_date, status, settlement_status, user ) 
                                values ({$paymentMethod}, {$paymentType}, {$stockpileLocation}, {$stockpileId}, {$paymentFor}, {$vendorId}, {$vendorBank}, 
                                {$freightId}, {$vendorHandlingId}, {$laborId}, {$customerId}, {$total_qty}, {$unitPrice}, {$total_dpp}, {$totalShrink2}, {$totalShrink}, {$termin}, {$total_amount}, 1, {$total_ppn}, {$ppnStatus}, {$total_pph}, {$pphStatus}, {$grandTotal},
                                '{$taxInvoice}', '{$invoiceNo}', STR_TO_DATE('$invoiceDate', '%d/%m/%Y %H:%i:%s'), '{$attachmentPath}', '{$remarks}', '{$beneficiary}', '{$bank}', '{$rek}', '{$swift}', 
                                STR_TO_DATE('{$periodPaymentFrom}', '%d/%m/%Y'),STR_TO_DATE('{$periodPaymentTo}', '%d/%m/%Y'), STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), 0, {$settle}, {$_SESSION['userId']})";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);    
                     //  echo " INPUT " . $sql;
                        if($result !== false) {
                            $idPP = $myDatabase->insert_id;
                            $return_value = '|OK|Pengajuan payment  has inserted successfully |';
							
							if($paymentFor == 1){
								
								$sqlNotim = "SELECT a.*, d.`ppn`, d.`ppn_tax_id`, d.`pph`, d.`pph_tax_id`, c.price_converted
											FROM `transaction` a
											LEFT JOIN shipment b ON a.`shipment_id` = b.`shipment_id`
											LEFT JOIN sales c ON c.`sales_id` = b.`sales_id`
											LEFT JOIN customer d ON d.`customer_id` = c.`customer_id`
											WHERE a.`transaction_id` IN ({$slipNos})";
								$resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);  

                               
                                if($resultNotim !== false && $resultNotim->num_rows > 0) {
                                    
                                    while($rowNotim = $resultNotim->fetch_object()) {
										
											$dppTotalPrice = $rowNotim->price_converted * $rowNotim->quantity;
                                            $ppnId = $rowNotim->ppn_tax_id;
											$ppnValue = $dppTotalPrice * ($rowNotim->ppn/100);
											$pphId = $rowNotim->pph_tax_id;
											$pphValue = $dppTotalPrice * ($rowNotim->pph/100);
                                            $unitPrice = $rowNotim->price_converted;
											$qty = $rowNotim->quantity;
											$transactionId = $rowNotim->transaction_id;
											$totalOriginalAmount = ($dppTotalPrice + $ppnValue) - $pphValue;
                                            
                                            $sqlPayment = "INSERT INTO pengajuan_sales(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                               ."  total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, status) "
                                                               ." VALUES({$idPP}, {$transactionId},{$paymentMethod}, {$unitPrice}, {$qty}, {$dppTotalPrice}, "
                                                               ." {$totalOriginalAmount}, {$totalOriginalAmount}, {$ppnId}, {$ppnValue}, "
                                                               ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), 0)";
                                                $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT);    
                                          

									}
								}									
								
							}
							echo $sqlNotim;
							echo $sqlPayment;
                            
                           if($amount > 0){
                                $sqlLog = "INSERT INTO logbook_new (ppayment_sales_id, type_pengajuan, entry_date, status1) values ({$idPP}, 1, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),0)";
                                $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
                            }else{
                                $sqlLog = "INSERT INTO logbook_new (ppayment_sales_id, type_pengajuan, entry_date, status1) values ({$idPP}, 1, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),0)";
                                $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
                            }

                        } else {
                            $return_value = '|FAIL| Fail to insert data.| ' . $sql;
                        }  

          
                        
                    }else{
                        $return_value = '|FAIL| Please check Down Payment.| ';
                    }       
                } else {
                    $return_value = '|FAIL| pengajuan payment type/boolContinue is null.| '.$boolContinue;
                }
            }else{
                $return_value = '|FAIL| Dokumen invoice belum di upload.| ';
            }
            echo $return_value;
    } else if($_POST['_method'] == 'REJECT'){

        $reject_remarks = $myDatabase->real_escape_string($_POST['reject_remarks']);

        $sqlx = "UPDATE pengajuan_sales SET status = 1 WHERE idpp = {$idPP}";
        $result1 = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);

        $sqlUpdate = "UPDATE `pengajuan_payment_sales` SET status = 5, reject_by = {$_SESSION['userId']}, reject_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), reject_remarks = '{$reject_remarks}'  WHERE idPP = {$idPP}";
        $result1 = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
        if($result1 !== false) {
            $return_value = '|OK|Reject successfully. ';
        }else {
            $return_value = '|FAIL| Fail to reject data.| ' . $sql;
        }

        //$whereStatus = '';
        //$updateDP = '';
        /*$sqlReject = "SELECT * FROM reject_ppayment WHERE idPP = {$idPP}";
        $resultReject = $myDatabase->query($sqlReject, MYSQLI_STORE_RESULT);

        if($resultReject !== false && $resultReject->num_rows == 1){
            $sqlDelete = "DELETE FROM reject_ppayment where idPP = {$idPP}";
            $resultDelete = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);
             
            $whereStatus = " status = 0, email_date = NULL, re_pengajuan = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') , re_pengajuan_user = {$_SESSION['userId']}, ";

            $LogbooUpdate = "UPDATE logbook_new SET status1 = 0 WHERE ppayment_id = {$idPP}";
            $resultLogbook = $myDatabase->query($LogbooUpdate, MYSQLI_STORE_RESULT);

         }
         
        if($attachmentPath != 'NULL'){
            $tempFile = " file = '{$attachmentPath}', ";
        }

        if($paymentMethod == 2){
            $updateDP = " stockpile_id = {$stockpileId},
                        vendor_id = {$vendorId},
                        vendor_bank_id = {$vendorBank},
                        freight_id = {$freightId},
                        vendor_handling_id = {$vendorHandlingId},
                        labor_id = {$laborId},
                        total_qty = {$total_qty},
                        price = {$totalPrice},
                        termin = {$termin},
                        total_amount = {$total_amount},
                        total_ppn_amount = {$total_ppn},
                        status_ppn = {$ppnStatus},
                        total_pph_amount = {$total_pph},
                        status_pph = {$pphStatus},
                        grand_total = {$amount},
                        beneficiary = '{$beneficiary}',
                        bank = '{$bank}',
                        rek = '{$rek}', 
                        swift = '{$swift}', ";

            $sql1 = "UPDATE pengajuan_pks_contract SET contract_id = {$contractIds} WHERE idPP = {$idPP}";
            $result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
        }

        $sql = "UPDATE pengajuan_payment
            SET tax_invoice = '{$taxInvoice}',
                {$updateDP}
                invoice_no = '{$invoiceNo}',
                invoice_date = STR_TO_DATE('$invoiceDate', '%d/%m/%Y %H:%i:%s'),
                urgent_payment_type = {$urgent_payment_type},
                urgent_payment_date = STR_TO_DATE('$urgent_payment_date', '%d/%m/%Y %H:%i:%s'),
                {$whereStatus}
                {$tempFile}
                remarks = '{$remarks}'
            WHERE idPP = {$idPP}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($result !== false) {
                $tempLog = '[UPDATE][Pengajuan-OA]'. '['.$idPP.']';
                $log = "INSERT INTO log_pengajuan_OA(entry_by, entry_date, log) value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
                $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);

                $return_value = '|OK|Update successfully. ';
            }else {
                $return_value = '|FAIL| Fail to update data.| ' . $sql;
            }*/
    }
    echo $return_value;
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'approve_invoice_sales') {
    // <editor-fold defaultstate="collapsed" desc="return_payment">
    $return_value = '';
    $vendorAll = '';
    $exchangeRate = 1;
    $uploadDocument = true;
    $whereproperty = '';

    $duedate = $myDatabase->real_escape_string($_POST['duedate']);
    $paymentMethod = $myDatabase->real_escape_string($_POST['paymentMethod']);
    $idPP = $myDatabase->real_escape_string($_POST['idPP']);
    $paymentFor = $myDatabase->real_escape_string($_POST['paymentForId']);
    $generatedInvoiceNo = $myDatabase->real_escape_string($_POST['generatedInvoiceNo']);
    $vendorId1 = $myDatabase->real_escape_string($_POST['vendorId']);
    $freightId = $myDatabase->real_escape_string($_POST['freightId_1']);
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    $paymentTypeId = $myDatabase->real_escape_string($_POST['paymentTypeId']);
  //  echo " B " .$laborId;
    $vendorHandlingId = $myDatabase->real_escape_string($_POST['vendorHandlingId']);
    // $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    // $exchangeRate = $myDatabase->real_escape_string($_POST['exchangeRate']);
    $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
    $dpp = str_replace(",", "", $myDatabase->real_escape_string($_POST['dppamount']));
    $ppn = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalppn']));
    $pph = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalpph']));
    $totalPrice = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalprice']));
    // $bankId = $myDatabase->real_escape_string($_POST['bankId']);

    //FreightDownPayment
    $freightIdFcDp = $myDatabase->real_escape_string($_POST['freightIdFcDp']); //currency kosong
    $vendorHandlingDp = $myDatabase->real_escape_string($_POST['vendorHandlingDp']); //currency kosong
    $laborDp = $myDatabase->real_escape_string($_POST['laborDp']);

    //FILE
    if (isset($_FILES['file2']) && $_FILES['file2']['size'] > 0) {
        $allowed = array('png', 'jpg', 'pdf', 'doc', 'docs', 'xls', 'xlsx');
        $fileName = $_FILES['file2']['name'];
        $x = explode('.', $fileName);
        $ekstensi = strtolower(end($x));
        $ukuran = $_FILES['file2']['size'];
        $file_tmp = $_FILES['file2']['tmp_name'];

        if (in_array($ekstensi, $allowed) === true) {

            $attachmentPath = "./import/pengajuan-bukti-email/";
                if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
                    $temp = mkdir($attachmentPath, 0755, TRUE);
                else
                    $temp = TRUE;

                if ($temp === TRUE) {
                    $attachmentPath .= "/" . date("ymdHis") . "-" . basename($fileName);
                    if (!move_uploaded_file($file_tmp, $attachmentPath)) {
                        echo '|FAIL|Error while uploading file.|';
                        die();
                    }
                } else {
                    echo '|FAIL|Error while creating directory.|';
                    die();
                }

            
        } else {
            echo '|FAIL|EKSTENSI FILE YANG DI UPLOAD TIDAK DI PERBOLEHKAN.|';
            die();
        }
    } else {
        $attachmentPath = 'NULL';
        $uploadDocument = false;
    }

    if ($paymentFor == 1 && $paymentTypeId == 1) {
        //SALES
        $freightId = 0;
        $laborId = 0;
        $vendorHandlingId = 0;
        
    } else if ($paymentFor == 1) {
        //CURAH
        $freightId = 0;
        $laborId = 0;
        $vendorHandlingId = 0;
        $customerId = 0;
    }else if ($paymentFor == 9) {
        // HandlingC payment
        $laborId = 0;
        $freightId = 0;
        $vendorId1 = 0;
        $customerId = 0;
        if($paymentMethod == 2){
            $vendorHandlingId = $vendorHandlingId;
        }
        // else if($paymentMethod == 3 && $amount <= 0){
        //     $whereproperty = " ,ppn_amount = {$ppn}, pph_amount = {$pph}, dpp = {$dpp}, original_amount = {$totalPrice}";
        // }
    } else if ($paymentFor == 2) { //FREIGHT
        $laborId = 0;
        $vendorId1 = 0;
        $vendorHandlingId = 0;
        $customerId = 0;
        if ($paymentMethod == 2) {
            //DP
            $freightId = $freightIdFcDp;
        } else if($paymentMethod == 3 && $amount <= 0){
            //Settlement
            $whereproperty = " ,ppn_amount = {$ppn}, pph_amount = {$pph}, dpp = {$dpp}, original_amount = {$totalPrice}";
        }
    } else if ($paymentFor == 3) {
        // UNLOADING C payment
        $freightId = 0;
        $vendorId1 = 0;
        $vendorHandlingId = 0;
        $customerId = 0;
      
    }

    $amountConvert = 0;
    $amountConvert = $amount * $exchangeRate;
    if ($_POST['_method'] == 'INSERT') {
        if ($idPP != ''  && $uploadDocument) {
            if($amount > 0){
                $statusPayment = 0;
            }else if($amount <= 0){
                $statusPayment = 1;
            }
            $sql = "INSERT INTO invoice_sales(idPP, type_transaction_id, inv_notim_no, vendor_id, freightId, laborId,
                                vendorHandlingId, customer_id, bankId, currency, kurs, dpp, total_ppn, total_pph, amount, amount_converted, file1, entry_date, entry_by, due_date_inv, status_payment,invoice_status)
                        values ({$idPP}, {$paymentFor}, '{$generatedInvoiceNo}', {$vendorId1}, {$freightId}, {$laborId}, {$vendorHandlingId}, {$customerId}, 0, 0,
                       0, {$dpp}, {$ppn}, {$pph}, {$amount}, {$amount}, '{$attachmentPath}', STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']}, STR_TO_DATE('{$duedate}', '%d/%m/%Y %H:%i:%s'), {$statusPayment},1)";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
          //  echo $sql;
            if($result !== false) {
                $inv_notim_id = $myDatabase->insert_id;
                $invoiceId = $inv_notim_id;			
                
                if($amount <= 0){
                    $sqlPP = "UPDATE pengajuan_payment_sales SET status = 3 {$whereproperty}
                            WHERE idPP = {$idPP}"; //UPDATE status Pengajuan Payment
                    $resultPP = $myDatabase->query($sqlPP, MYSQLI_STORE_RESULT);
                    echo $sqlPP;
                }
                else if($amount > 0){
                    $sqlPP = "UPDATE pengajuan_payment_sales SET status = 1  WHERE idPP = {$idPP}"; //UPDATE status Pengajuan Payment
                    $resultPP = $myDatabase->query($sqlPP, MYSQLI_STORE_RESULT);
                }
                //echo $sqlPP;

                //SETTLE 50%
                 /*if($paymentMethod == 3){
                    $sql = "UPDATE pengajuan_payment_dp SET status = 1 WHERE idpp = {$idPP}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }

               if($paymentFor == 2 && $paymentMethod != 2 ){
                    $sqlx = "UPDATE payment_oa SET inv_notim_id = {$inv_notim_id} WHERE idpp = {$idPP}";
                    $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);

                }else if($paymentFor == 9 && $paymentMethod != 2){
                    $sqlx = "UPDATE payment_handling SET inv_notim_id = {$inv_notim_id} WHERE idpp = {$idPP}";
                    $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);
                }else if($paymentFor == 3 && $paymentMethod != 2){
                    $sqlx = "UPDATE payment_ob SET inv_notim_id = {$inv_notim_id} WHERE idpp = {$idPP}";
                    $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);

                }else*/ if($paymentFor == 1 && $paymentTypeId == 1){
                    $sqlx = "UPDATE pengajuan_sales SET inv_notim_id = {$inv_notim_id} WHERE idpp = {$idPP}";
                    $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);
                }/*else if($paymentFor == 1){
                    $sqlx = "UPDATE payment_curah SET inv_notim_id = {$inv_notim_id} WHERE idpp = {$idPP}";
                    $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);
                }*/

                //UPDATE LOGBOOK PKS
                $sqlLog = "UPDATE logbook_new set inv_notim_sales_id = {$inv_notim_id}, status1 = 1 where ppayment_sales_id = {$idPP}";
                $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);

                $tempLog = '[INSERT][APPROVE-INVOICE-NOTIM]'. '['.$inv_notim_id.']';
                $log = "INSERT INTO log_approve_invoice_notim(entry_by, entry_date, log) value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
                $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
                if($result_log !== false) {
                    $log_id = $myDatabase->insert_id;
                }
                
                insertGeneralLedger($myDatabase, 'INVOICE SALES', $invoiceId);
                insertReportGL($myDatabase, 'INVOICE SALES', $invoiceId);

                //  insertGeneralLedger($myDatabase, 'INVOICE NOTIM', $invoiceId);
                //  insertReportGL($myDatabase, 'INVOICE NOTIM', $invoiceId);
               // insertGeneralLedger($myDatabase, 'INVOICE NOTIM', $invoiceId);

                $return_value = '|OK|Approve Pengajuan Invoice Berhasil|'.$sql;
            }else {
                $return_value = '|FAIL|Approve Pengajuan Invoice failed.|'.$sql;
            }
        }else {
            $return_value = '|FAIL|GAGAL, Dokumen belum di upload.|'; 
        }
    }
    echo $return_value;
    die();
    
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'payment_data_sales') {
// <editor-fold defaultstate="collapsed" desc="payment_data">

$return_value = '';
$boolContinue = false;
$boolBank = false;
$boolUpdateTransaction = false;
$boolUpdateShipment = false;
$boolContinue2 = true;
$tempStamp = '';
$periodPaymentFrom='';
$periodPaymentTo='';
$paymentId = '';

// <editor-fold defaultstate="collapsed" desc="POST variables">
$paymentMethod = $myDatabase->real_escape_string($_POST['paymentMethod']);
$paymentDate = $myDatabase->real_escape_string($_POST['paymentDate']);
$paymentType = $myDatabase->real_escape_string($_POST['paymentType']);
$payment_type = $myDatabase->real_escape_string($_POST['payment_type']);
$bankId = $myDatabase->real_escape_string($_POST['bankId']);
$paymentFor = $myDatabase->real_escape_string($_POST['paymentFor']);
$accountId = $myDatabase->real_escape_string($_POST['accountId']);
$stockpileSalesId = $myDatabase->real_escape_string($_POST['stockpileSalesId']);

//$taxInvoice = $myDatabase->real_escape_string($_POST['taxInvoice']);
//$invoiceNo = $myDatabase->real_escape_string($_POST['invoiceNo']);
$currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
$bankCurrencyId = $myDatabase->real_escape_string($_POST['bankCurrencyId']);
$journalCurrencyId = $myDatabase->real_escape_string($_POST['journalCurrencyId']);
$exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
$amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
$originalAmount = $amount;
$totalDpp = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalDpp']));
$totalAmount = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalAmount']));
//$totalPrice = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalPrice']));
$downPayment = str_replace(",", "", $myDatabase->real_escape_string($_POST['downPayment']));
$grandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal']));
$ppnInvoice = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppnInvoice']));
$pphInvoice = str_replace(",", "", $myDatabase->real_escape_string($_POST['pphInvoice']));
//$notes = $myDatabase->real_escape_string($_POST['paymentNotes']);
$remarks = $myDatabase->real_escape_string($_POST['remarks']);
$remarks2 = $myDatabase->real_escape_string($_POST['remarks2']);
$paymentLocation = $myDatabase->real_escape_string($_POST['paymentLocation']);
$stockpileLocation = $myDatabase->real_escape_string($_POST['stockpileLocation']);
$chequeNo = $myDatabase->real_escape_string($_POST['chequeNo']);

$slipNos = "";
$shipmentNos = "";

$invoiceBankId = $myDatabase->real_escape_string($_POST['invoiceBankId']);
$invoiceCurrencyId = $myDatabase->real_escape_string($_POST['invoiceCurrencyId']);
$invoiceKurs = $myDatabase->real_escape_string($_POST['invoiceKurs']);
$idPP = $myDatabase->real_escape_string($_POST['idPP']);

$idPG = $myDatabase->real_escape_string($_POST['idPG']);

$invoiceSalesId = $myDatabase->real_escape_string($_POST['invoiceSalesId']);
$invoiceVendorSalesId = $myDatabase->real_escape_string($_POST['invoiceVendorSalesId']);



if($pphInvoice == '') {
        $pphInvoice = 0;
    }
if($ppnInvoice == '') {
        $ppnInvoice = 0;
}
    
if($currencyId == 0 ) {
        $currencyId = 1;
    }

$sqlBankAcc = "SELECT account_id FROM bank WHERE bank_id = {$bankId}";
                $resultBankAcc = $myDatabase->query($sqlBankAcc, MYSQLI_STORE_RESULT);
                if($resultBankAcc->num_rows == 1) {
                    $rowBankAcc = $resultBankAcc->fetch_object();

                    if($rowBankAcc->account_id !== $accountId){
                        $boolBank = true;
                    }
                }	
    
$termin = 'NULL';
$vendorBank = 'NULL';

 if($paymentFor == 1) {
// echo 'zz';
     if($paymentType == 1) {
        // Sales Lokal
        //echo 'cc';
      if($paymentMethod == 1 && $stockpileSalesId != '' && $invoiceSalesId != '' && $grandTotal >= 0 && $invoiceBankId != '') {
        $invoiceId = 'NULL';
        //echo 'xx';
            
                $boolContinue = true;
            
            $salesId = 'NULL';
            $stockpileContractId = 'NULL';
            $freightId = 'NULL';
            $laborId = 'NULL';
            $qty = 'NULL';
            $price = 'NULL';
            $vendorBank = $invoiceBankId;
            $generalVendorId = 'NULL';
            $amount = $grandTotal;
            $originalAmount = $grandTotal;
            $pph = $pphInvoice;
            $ppn = $ppnInvoice;
        } 
    }
}
if ($_POST['_method'] == 'INSERT') {
if($boolBank){
    if($paymentDate != '' && $paymentType != '' && $paymentMethod != '' && $accountId != '' && $bankId != '' && $currencyId != ''  /*&& $boolContinue*/) {
    if($paymentMethod == 1 && $paymentType == 1 &&  $paymentFor == 1) {
            // <editor-fold defaultstate="collapsed" desc="PAYMENT - IN - Lokal Sales">
            if($amount < $grandTotal || ($amount != 0 && $amount > $grandTotal)) {
                $boolContinue2 = false;

            } else {
                $boolUpdateTransaction = true;
                 if($paymentFor == 1) {
                   /* $whereProperty = " AND vendor_id = {$vendorId1} ";
                    $updateProperty = " payment_id ";
                    $invoiceId = 'NULL';*/

                } 

                if (isset($_POST['checkedSlips'])) {
                    $checks = $_POST['checkedSlips'];
                    for ($i = 0; $i < sizeof($checks); $i++) {
                        if($slipNos == '') {
                            $slipNos .= $checks[$i];
                        } else {
                            $slipNos .= ','. $checks[$i];
                        }
                    }
                }

              

            /*if($grandTotal <= 0) {
                    $amount = $grandTotal;

                    $sql = "SELECT p.*, f.pph
                            FROM `payment` p
                            LEFT JOIN freight f ON f.`freight_id` = p.`freight_id`
                            WHERE p.payment_type = {$paymentType}
                            AND p.payment_method = 2 AND p.payment_status = 0
                            {$whereProperty}
                            AND p.amount_converted > 0
                            AND p.company_id = {$_SESSION['companyId']}
                            ORDER BY p.payment_id ASC";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($result !== false && $result->num_rows > 0) {
                        $balanceLeft = $totalPrice;
                        while($row = $result->fetch_object()) {
                                $dp = $row->amount_converted;
                                $availableDP = $dp - $balanceLeft;
                            if($availableDP > 0) {
                                $sql2 = "UPDATE payment SET amount = ". $availableDP/$row->exchange_rate .", amount_converted = ". $availableDP ." WHERE payment_id = {$row->payment_id}";
                                $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                            //  break;
                            } elseif($availableDP <= 0) {
                                $balanceLeft = $balanceLeft - $row->amount_converted;
                                $sql2 = "UPDATE payment SET amount = 0, amount_converted = 0, pph_amount = 0  WHERE payment_id = {$row->payment_id}";
                                $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                            }
                        }
                    }
                } else {

                    ///if($freightId != 312 && $stockpileLocation != 8){
                $amount = $grandTotal;

                    $sql = "UPDATE `payment` p SET p.amount = 0, p.amount_converted = 0
                            WHERE p.payment_type = {$paymentType}
                            AND p.payment_method = 2
                            {$whereProperty}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    //}
                }*/ //edited by alan
                
            }
     
            // </editor-fold>
        }


    if($boolContinue2) {
            $sql = "select DATE_FORMAT(STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), '%y%m') AS slip_prefix from dual";
            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            $rowSlip = $resultSlip->fetch_object();
            $checkPaymentNo = $rowSlip->slip_prefix;


            $sql = "SELECT LPAD(RIGHT(payment_no, 5) + 1, 5, '0') AS next_id FROM payment WHERE company_id = {$_SESSION['companyId']} AND bank_id = {$bankId} AND payment_no LIKE '{$checkPaymentNo}%' ORDER BY payment_no DESC LIMIT 1";
            $resultPaymentNo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultPaymentNo->num_rows == 0) {
                $sql = "SELECT LPAD(1, 5, '0') AS next_id FROM dual LIMIT 1";
                $resultPaymentNo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }
            $rowPaymentNo = $resultPaymentNo->fetch_object();
            $nextPaymentNo = $rowPaymentNo->next_id;
            $paymentNo = $checkPaymentNo .'-'. $nextPaymentNo;

            if($exchangeRate == '') {
                $exchangeRate = 1;
            }
            
          
            if($bankCurrencyId == $currencyId && $currencyId != $journalCurrencyId) {
                // USD - USD - IDR
                $originalAmountConverted = $originalAmount;
                $amountConverted = $amount;
                $ppnConverted = $ppn;
                $pphConverted = $pph;
                $amountJournal = $originalAmount * $exchangeRate;
                $ppnJournal = $ppn * $exchangeRate;
                $pphJournal = $pph * $exchangeRate;
            } elseif($bankCurrencyId != $currencyId && $currencyId != $journalCurrencyId) {
                // IDR - USD - IDR
                $originalAmountConverted = $originalAmount / $exchangeRate;
                $amountConverted = $amount / $exchangeRate;
                $ppnConverted = $ppn / $exchangeRate;
                $pphConverted = $pph / $exchangeRate;
                $amountJournal = $originalAmount;
                $ppnJournal = $ppn;
                $pphJournal = $pph;
                $currencyId = $bankCurrencyId;
            } elseif($bankCurrencyId != $currencyId && $currencyId == $journalCurrencyId) {
                // USD - IDR - IDR
                $originalAmountConverted = $originalAmount * $exchangeRate;
                $amountConverted = $amount * $exchangeRate;
                $ppnConverted = $ppn * $exchangeRate;
                $pphConverted = $pph * $exchangeRate;
                $amountJournal = $originalAmount * $exchangeRate;
                $ppnJournal = $ppn * $exchangeRate;
                $pphJournal = $pph * $exchangeRate;
                $currencyId = $bankCurrencyId;
            } else {
                $originalAmountConverted = $originalAmount;
                $amountConverted = $amount;
                $ppnConverted = $ppn;
                $pphConverted = $pph;
                $amountJournal = $originalAmount;
                $ppnJournal = $ppn;
                $pphJournal = $pph;

               

            }
                

             
                
            $sql = "INSERT INTO payment (payment_no, payment_date, payment_type, payment_type2, payment_method, account_id, bank_id, invoice_sales_id,"
                    . "vendor_bank_id,  remarks, currency_id, "
                    . "exchange_rate, amount, amount_converted, original_amount, original_amount_converted, ppn_amount, ppn_amount_converted, "
                    . "pph_amount, pph_amount_converted, amount_journal, ppn_journal, pph_journal, payment_location, cheque_no, entry_by, entry_date, stockpile_location,remarks2, status) VALUES ("
                    . "'{$paymentNo}', STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), {$paymentType}, {$payment_type},{$paymentMethod}, {$accountId}, {$bankId}, "
                    . "{$invoiceSalesId},  {$vendorBank}, '{$remarks}', "
                    . "'{$currencyId}', {$exchangeRate}, "
                    . "'{$amount}', {$amountConverted}, {$originalAmount}, {$originalAmountConverted}, {$ppn}, {$ppnConverted}, "
                    . "{$pph}, {$pphConverted}, {$amountJournal}, {$ppnJournal}, {$pphJournal}, {$paymentLocation}, '{$chequeNo}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$stockpileLocation}, '{$remarks2}', 1)";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
       //       echo " SQL P ". $sql;
            if($result !== false) {
                $paymentId = $myDatabase->insert_id;


                if($boolUpdateTransaction) {
                   if($paymentFor == 1){
                        $sql = "SELECT transaction_id FROM `pengajuan_sales` WHERE inv_notim_id = {$invoiceSalesId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if($result !== false && $result->num_rows > 0) {
                        while($row = $result->fetch_object()) {
                        
                        $sqlU = "UPDATE `pengajuan_sales` SET payment_id = '{$paymentId}' WHERE transaction_id = {$row->transaction_id} AND inv_notim_id = {$invoiceSalesId}";
                        $resultU = $myDatabase->query($sqlU, MYSQLI_STORE_RESULT);
                       // echo " SQLU " .$sqlU;
                        
                        $sqlA = "UPDATE `transaction` SET payment_id = '{$paymentId}' WHERE transaction_id = {$row->transaction_id}";
                        $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                        
                        }
                    }
                }
                        
                    $sql = "SELECT transaction_id, sync_status FROM `transaction` WHERE transaction_id IN ($slipNos)";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($result !== false && $result->num_rows > 0) {
                        while($row = $result->fetch_object()) {
                            $syncStatus = 0;
                            if($row->sync_status == 1) {
                                $syncStatus = 2;
                            }

                            $sql2 = "UPDATE `transaction` SET sync_status = {$syncStatus} WHERE transaction_id = {$row->transaction_id}";
                            $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                        }
                    }
                    
                }
                
                //Update by yeni
                if($idPP != ''){
                    $sqlPP = "UPDATE pengajuan_payment_sales SET status = 3 WHERE idPP = {$idPP}"; //UPDATE status Pengajuan Payment
                    $resultPP = $myDatabase->query($sqlPP, MYSQLI_STORE_RESULT);
                    //echo $sqlPP;

                
                    //UPDATE LOGBOOK PKS
                    $sqlLog = "UPDATE logbook_new set payment_id = {$paymentId}, status1 = 3,  type_pengajuan = 1 where ppayment_id = {$idPP}";
                    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
                    
                    $sqlInvNotim = "UPDATE invoice_sales set payment_id = {$paymentId}, status_payment = 1 where idPP = {$idPP}";
                    $resultInvNotim = $myDatabase->query($sqlInvNotim, MYSQLI_STORE_RESULT);
                    
                }
              /*  if($boolUpdateShipment) {
                    $sql = "UPDATE `shipment` SET payment_id = {$paymentId} WHERE shipment_id IN ($shipmentNos)";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }

                if($tempStamp != '') {
                    $sql = "UPDATE payment_detail SET payment_id = {$paymentId} WHERE payment_id = {$tempStamp}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                if($paymentFor == 0) {
                    $sql = "SELECT con.contract_id, con.price_converted * con.quantity AS contract_amount, SUM(p.amount_converted) AS paid_amount, v.ppn, v.pph
                            FROM stockpile_contract sc
                            INNER JOIN `contract` con
                                ON con.contract_id = sc.contract_id
                            INNER JOIN `payment` p
                                ON p.stockpile_contract_id = sc.stockpile_contract_id
                            INNER JOIN vendor v
                                ON v.vendor_id = con.vendor_id
                            WHERE sc.stockpile_contract_id = {$stockpileContractId}
                            AND con.company_id = {$_SESSION['companyId']} AND p.payment_status = 0
                            GROUP BY sc.stockpile_contract_id";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($result->num_rows > 0) {
                        $row = $result->fetch_object();
                        $ppn = $row->ppn;
                        $pph = $row->pph;

                        $ppnAmount = ($ppn/100) * $row->contract_amount;
                        $pphAmount = ($pph/100) * $row->contract_amount;
                        $total  = $pphAmount + $ppnAmount + $row->contract_amount;


                        if($row->paid_amount >= $total)
                {
                            $sqlUpdate = "UPDATE `contract` SET payment_status = 1 WHERE contract_id = {$row->contract_id}";
                            $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                        }
                    }
                }

                if($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 8) {
                    if($paymentMethod == 1){
                            $sqlUpdate = "UPDATE `invoice` SET payment_status = 1 WHERE invoice_id = {$invoiceId}";
                            $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

                    }
                }

                    $sql = "SELECT b.* FROM bank b LEFT JOIN payment p ON p.`bank_id` = b.`bank_id` WHERE p.payment_id = {$paymentId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($result !== false && $result->num_rows > 0) {
                        while($row = $result->fetch_object()) {
                            $bankType = $row->bank_type;
                            $bankStockpile = $row->stockpile_id;

                        }
                    }


                if($paymentFor == 10){
                        $sqlUpdate = "UPDATE `payment_cash` SET payment_id = {$paymentId}, payment_cash_method = {$paymentMethod} WHERE payment_id IS NULL AND entry_by = {$_SESSION['userId']}";
                            $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

                        if($paymentMethod == 1){
                            $sqlUpdate = "UPDATE `payment_cash` SET payment_cash_status = 1 WHERE payment_id = {$paymentId}";
                            $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

                    }
                }*/
                
                insertGeneralLedger($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", "NULL", $paymentId);

                insertReportGL($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", "NULL", $paymentId);
            
                unset($_SESSION['payment']);
                
                $return_value = '|OK|Payment has inserted successfully.|'. $paymentId .'|';

            } else {
                $return_value = '|FAIL|Failed insert payment1.||' . $sql .' | '. $invoiceFreightText; //invoiceFreightText
                if($tempStamp != '') {
                    $sql = "DELETE FROM payment_detail WHERE payment_id = {$tempStamp}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
            }
        } else {
            $return_value = '|FAIL|Please insert correct amount.||' . $sql;
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|' . $sql .'|';
        echo $sql;

    }
    }else{
        $return_value = '|FAIL|Please Choose Different Bank.||';
    }
}

echo $return_value;
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_settle_detail') {
    // <editor-fold defaultstate="collapsed" desc="delete_user">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $settle_id = $myDatabase->real_escape_string($_POST['settle_id']);
    // </editor-fold>
    
    if($settle_id != '') {
		$sql = "DELETE FROM perdin_dp WHERE settle_id = {$settle_id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
		
        $sql = "DELETE FROM `perdin_settle_detail` WHERE settle_id = {$settle_id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|Data has successfully deleted.|';

        } else {
            $return_value = '|FAIL|Delete Data failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}	elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'perdin_departement_data') {
    // <editor-fold defaultstate="collapsed" desc="account_data">
    
    $return_value = '';
    $boolNew = false;
    $whereCondition = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $deptId = $myDatabase->real_escape_string($_POST['deptId']);
    $dept = $myDatabase->real_escape_string($_POST['dept']);
    
    // </editor-fold>
    
    if ($deptId == '') {
        $boolNew = true;
    }
    
    
    
    if($dept != '' ) {
        
            if($boolNew) {
               
                $sql = "INSERT INTO `perdin_departement` (dept, entry_by, entry_date) VALUES ("
                            . "'{$dept}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
               
            } else {
                $sql = "UPDATE `perdin_departement` SET "
                        . "dept = '{$dept}', "
                        . "edit_by = {$_SESSION['userId']}, "
                        . "edit_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE dept_id = {$deptId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $deptId = $myDatabase->insert_id;
                }

                $return_value = '|OK|departement has successfully inserted/updated.|'. $deptId .'|';
            } else {
                $return_value = '|FAIL|Insert/update departement failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_perdin_departement') {
    // <editor-fold defaultstate="collapsed" desc="delete_account">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $deptId = $myDatabase->real_escape_string($_POST['deptId']);
    // </editor-fold>
    
    if($deptId != '') {
       
            $sql = "DELETE FROM `perdin_departement` WHERE dept_id = {$deptId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Departement has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete Departement failed.|';
            }
       
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'perdin_divisi_data') {
    // <editor-fold defaultstate="collapsed" desc="account_data">
    
    $return_value = '';
    $boolNew = false;
    $whereCondition = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $divId = $myDatabase->real_escape_string($_POST['divId']);
	$deptId = $myDatabase->real_escape_string($_POST['deptId']);
    $divisi = $myDatabase->real_escape_string($_POST['divisi']);
    
    // </editor-fold>
    
    if ($divId == '') {
        $boolNew = true;
    }
    
    
    
    if($deptId != '' && $divisi != '' ) {
        
            if($boolNew) {
               
                $sql = "INSERT INTO `perdin_divisi` (divisi, dept_id, entry_by, entry_date) VALUES ("
                            . "'{$divisi}', '{$deptId}',{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
               
            } else {
                $sql = "UPDATE `perdin_divisi` SET "
                        . "dept_id = '{$deptId}', "
                        . "divisi = '{$divisi}', "
						. "edit_by = {$_SESSION['userId']}, "
                        . "edit_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE div_id = {$divId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $divId = $myDatabase->insert_id;
                }

                $return_value = '|OK|divisi has successfully inserted/updated.|'. $divId .'|';
            } else {
                $return_value = '|FAIL|Insert/update divisi failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_perdin_divisi') {
    // <editor-fold defaultstate="collapsed" desc="delete_account">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $divId = $myDatabase->real_escape_string($_POST['divId']);
    // </editor-fold>
    
    if($divId != '') {
       
            $sql = "DELETE FROM `perdin_divisi` WHERE div_id = {$divId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Divisi has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete Divisi failed.|';
            }
       
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_perdin_level') {
    // <editor-fold defaultstate="collapsed" desc="delete_account">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $levelId = $myDatabase->real_escape_string($_POST['levelId']);
    // </editor-fold>
    
    if($levelId != '') {
       
            $sql = "DELETE FROM `perdin_level` WHERE level_id = {$levelId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Level has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete Level failed.|';
            }
       
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'perdin_level_data') {
    // <editor-fold defaultstate="collapsed" desc="account_data">
    
    $return_value = '';
    $boolNew = false;
    $whereCondition = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $levelId = $myDatabase->real_escape_string($_POST['levelId']);
	$level = $myDatabase->real_escape_string($_POST['level']);
    
    
    // </editor-fold>
    
    if ($levelId == '') {
        $boolNew = true;
    }
    
    
    
    if($level != '' ) {
        
            if($boolNew) {
               
                $sql = "INSERT INTO `perdin_level` (level, entry_by, entry_date) VALUES ("
                            . "'{$level}',{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
               
            } else {
                $sql = "UPDATE `perdin_level` SET "
                        . "level = '{$level}', "
                        . "edit_by = {$_SESSION['userId']}, "
                        . "edit_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE level_id = {$levelId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $levelId = $myDatabase->insert_id;
                }

                $return_value = '|OK|level has successfully inserted/updated.|'. $levelId .'|';
            } else {
                $return_value = '|FAIL|Insert/update level failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_perdin_benefit') {
    // <editor-fold defaultstate="collapsed" desc="delete_account">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $benefitId = $myDatabase->real_escape_string($_POST['benefitId']);
    // </editor-fold>
    
    if($benefitId != '') {
       
            $sql = "DELETE FROM `perdin_benefit` WHERE benefit_id = {$benefitId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|benefit has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete benefit failed.|';
            }
       
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'perdin_benefit_data') {
    // <editor-fold defaultstate="collapsed" desc="account_data">
    
    $return_value = '';
    $boolNew = false;
    $whereCondition = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $levelId = $myDatabase->real_escape_string($_POST['levelId']);
	$benefitId = $myDatabase->real_escape_string($_POST['benefitId']);
	$jenisBenefit = $myDatabase->real_escape_string($_POST['jenisBenefit']);
	$amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
	$keterangan = $myDatabase->real_escape_string($_POST['keterangan']);
	$status = $myDatabase->real_escape_string($_POST['status']);
	$benefitType = $myDatabase->real_escape_string($_POST['benefitType']);
	$accountId = $myDatabase->real_escape_string($_POST['accountId']);
    
    
    // </editor-fold>
    
    if ($benefitId == '') {
        $boolNew = true;
    }
    
    
    
    if($jenisBenefit != '' && $amount != '' && $status != '' && $levelId != '' ) {
        
            if($boolNew) {
               
                $sql = "INSERT INTO `perdin_benefit` (jenis_benefit, level_id,amount_benefit,keterangan,status, type, account_id, entry_by, entry_date) VALUES ("
                            . "'{$jenisBenefit}','{$levelId}','{$amount}','{$keterangan}','{$status}','{$benefitType}','{$accountId}',{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
               
            } else {
                $sql = "UPDATE `perdin_benefit` SET "
                        . "jenis_benefit = '{$jenisBenefit}', "
						. "level_id = '{$levelId}', "
						. "amount_benefit = '{$amount}', "
						. "keterangan = '{$keterangan}', "
						. "status = '{$status}', "
						. "type = '{$benefitType}', "
						. "account_id = '{$accountId}', "
                        . "edit_by = {$_SESSION['userId']}, "
                        . "edit_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE benefit_id = {$benefitId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $benefitId = $myDatabase->insert_id;
                }

                $return_value = '|OK|benefit has successfully inserted/updated.|'. $benefitId .'|';
            } else {
                $return_value = '|FAIL|Insert/update benefit failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_level') {
    // <editor-fold defaultstate="collapsed" desc="account_data">
    
    $return_value = '';
    $boolNew = false;
    $whereCondition = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $levelId = $myDatabase->real_escape_string($_POST['levelId']);
    
    // </editor-fold>
    
    
    
    
    
    if($levelId != '' && $vendorId != '' ) {
        
           
                $sql = "UPDATE `general_vendor` SET "
                        . "level_pengajuan = '{$levelId}' "
                       
                        . "WHERE general_vendor_id = {$vendorId}";
            
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $deptId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Data has successfully inserted/updated.|'. $vendorId .'|';
            } else {
                $return_value = '|FAIL|Insert/update Data failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'general_vendor_data_employee') {
    // <editor-fold defaultstate="collapsed" desc="general_vendor_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
 
	$stockpile_id = $myDatabase->real_escape_string($_POST['stockpile_id']);
	$deptId = $myDatabase->real_escape_string($_POST['deptId']);
	$divId = $myDatabase->real_escape_string($_POST['divId']);
	//$levelId = $myDatabase->real_escape_string($_POST['levelId']);
    // </editor-fold>

    if ($vendorId == '') {
        $boolNew = true;
    }
	
	if ($stockpile_id == '' || $stockpile_id == 0) {
        $stockpile_id = 0;
    }
	if ($deptId == '' || $deptId == 0) {
        $deptId = 0;
    }
	if ($divId == '' || $divId == 0) {
        $divId = 0;
    }
	/*if ($levelId == '' || $levelId == 0) {
        $levelId = 0;
    }*/

    if ($stockpile_id != '' && $deptId != '' && $divId != '' ) {
        

        
                $sql = "UPDATE `general_vendor` SET "
                    
					. "stockpile_id = {$stockpile_id}, "
					. "dept_id = {$deptId}, "
					. "div_id = {$divId} "
					//. "level_id = {$levelId}, "
                    //. "active = {$active} "
                    . "WHERE general_vendor_id = {$vendorId}";
            
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $vendorId = $myDatabase->insert_id;
                }

                $return_value = '|OK|General Vendor has successfully inserted/updated.|' . $vendorId . '|';
            } else {
                $return_value = '|FAIL|Insert/update vendor failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'approve_level') {
    // <editor-fold defaultstate="collapsed" desc="account_data">
    
    $return_value = '';
    $boolNew = false;
    $whereCondition = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $levelId = $myDatabase->real_escape_string($_POST['levelId']);
    
    // </editor-fold>
    
    
    
    
    
    if($levelId != '' && $vendorId != '' ) {
        
           
                $sql = "UPDATE `general_vendor` SET "
                        . "level_pengajuan = '0', "
						. "level_id = '{$levelId}' "
                        . "WHERE general_vendor_id = {$vendorId}";
            
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $deptId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Data has successfully inserted/updated.|'. $vendorId .'|';
            } else {
                $return_value = '|FAIL|Insert/update Data failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'perdin_item_data') {
    // <editor-fold defaultstate="collapsed" desc="item_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $item_id = $myDatabase->real_escape_string($_POST['item_id']);
    $item = $myDatabase->real_escape_string($_POST['item']);
    $category = $myDatabase->real_escape_string($_POST['category']);
    $status = $myDatabase->real_escape_string($_POST['status']);
    //$uom = $myDatabase->real_escape_string($_POST['uomId']);

    // </editor-fold>

    if ($item_id == '') {
        $boolNew = true;
    }

    if ($item != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `perdin_item` WHERE item = '{$item}'";
        } else {
            $sql = "SELECT * FROM `perdin_item` WHERE item = '{$item}' AND item_id <> {$item_id}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `perdin_item` (item, category, status, entry_by, entry_date) VALUES ("
                    . "'{$item}','{$category}','{$status}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `perdin_item` SET "
                    //. "item = '{$item}', "
                    . "category = '{$category}', "
                    . "status = '{$status}'"
                    . "WHERE item_id = {$item_id}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $item_id = $myDatabase->insert_id;
                }

                $return_value = '|OK|Item has successfully inserted/updated.|' . $item_id . '|';
            } else {
                $return_value = '|FAIL|Insert/update Item failed.||';
            }
        } else {
            $return_value = '|FAIL|Item code already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'perdin_surat_data') {
    // <editor-fold defaultstate="collapsed" desc="invoice_detail">
echo 'a';
    $return_value = '';
    $boolShipment1 = false;
    $boolPO = false;
    $boolVendor = false;
	$accountId = '';
    //$grandTotal = 0;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	$sa_id = $myDatabase->real_escape_string($_POST['sa_id']);
    $id_user = $myDatabase->real_escape_string($_POST['id_user']);
    //$sa_method = $myDatabase->real_escape_string($_POST['sa_method']);
    //$sa_no = $myDatabase->real_escape_string($_POST['sa_no']);
    $date_from = $myDatabase->real_escape_string($_POST['date_from']);
    $date_to = $myDatabase->real_escape_string($_POST['date_to']);
    $origin = $myDatabase->real_escape_string($_POST['origin']);
	$destination = $myDatabase->real_escape_string($_POST['destination']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    //$shipment_id = $myDatabase->real_escape_string($_POST['shipment_id']);
	$tanggal = $myDatabase->real_escape_string($_POST['tanggal']);
	//$grandTotal = $myDatabase->real_escape_string($_POST['grandTotal']);
	//$hari = $myDatabase->real_escape_string($_POST['hari']);
	$stockpile_id = $myDatabase->real_escape_string($_POST['stockpile_id']);
	$paymentFrom = $myDatabase->real_escape_string($_POST['paymentFrom']);
	//$accountId = $myDatabase->real_escape_string($_POST['accountId']);
    //$slipNos = "";
    //$slipNos2 = "";
	//$slipNos3 = "";
   
   //if ($shipment_id == '') {
     //   $shipment_id = 0;
    //}
	
	if ($id_user != '' && $tanggal != '' && $date_from != '' && $date_to != '' && $origin != '' && $destination != '' && $paymentFrom != '') {
		if($sa_id == ''){
			
		$checkSaNo = 'JPJ/SPD-SA/'. $currentYearMonth;
   /* if($contractSeq != "") {
        $poNo = $checkInvoiceNo .'/'. $contractSeq;
    } else {*/
        $sql = "SELECT sa_no FROM perdin_surat WHERE company_id = {$_SESSION['companyId']} AND sa_no LIKE '{$checkSaNo}%' ORDER BY sa_id DESC LIMIT 1";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result->num_rows == 1) {
            $row = $result->fetch_object();
            $splitSaNo = explode('/', $row->sa_no);
            $lastExplode = count($splitSaNo) - 1;
            $nextSaNo = ((float) $splitSaNo[$lastExplode]) + 1;
            $sa_no = $checkSaNo .'/'. $nextSaNo;
        } else {
            $sa_no = $checkSaNo .'/1';
        
    }
			
			
		 $sql = "INSERT INTO `perdin_surat` (tanggal, id_user, sa_no, remarks, origin, destination, date_from, date_to, stockpile_id,  entry_by, entry_date, payment_from) VALUES ("
                    . "STR_TO_DATE('$tanggal', '%d/%m/%Y'),{$id_user}, '{$sa_no}', '{$remarks}', {$origin}, {$destination}, STR_TO_DATE('$date_from', '%d/%m/%Y'), STR_TO_DATE('$date_to', '%d/%m/%Y'), '{$stockpile_id}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$paymentFrom}')";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false) {
                    $sa_id = $myDatabase->insert_id;

                    $return_value = '|OK|Data has successfully inserted.|' .$sa_id. '|';
					
					/*$entryBy = $_SESSION['userId'];
					$date2 = new DateTime();
					$currentDate2 = $date2->format('Y-m-d H:i:s');
					
					if($sa_method == 2){
					if (isset($_POST['checkedSlips2'])) {
                        $checks2 = $_POST['checkedSlips2'];
						if (isset($_POST['checkedSlips3'])) {
							$checks3 = $_POST['checkedSlips3'];
							if (isset($_POST['checkedSlips'])) {
								$checks = $_POST['checkedSlips'];
							} else {
								$checks = '';
							}
						for ($i = 0; $i < sizeof($checks2); $i++) {
                            if ($checks[$i] != '') {
                                if ($slipNos2 == '') {
                                    $slipNos2 .= '(' . $sa_id . ',' . $checks[$i] . ',' . $checks2[$i] . ',' . "'" . $checks3[$i] . "'" . ',' . $hari . ',' . "'" . $entryBy . "'" . ',' . "'" . $currentDate2 . "'" .','. $benefitType . ','. $accountId .')';
                                } else {
                                    $slipNos2 .= ',' . '(' . $sa_id . ',' . $checks[$i] . ',' . $checks2[$i] . ',' . "'" . $checks3[$i] . "'" . ',' . $hari . ',' . "'" . $entryBy . "'" . ',' . "'" . $currentDate2 . "'" . ','. $benefitType . ','. $accountId .')';
                                }
                            }
                        }
						}
                    }
					echo $slipNos2;
                    $sql = "INSERT INTO perdin_adv_detail (sa_id, benefit_id ,amount,keterangan,hari,entry_by, entry_date, type, account_id) VALUES {$slipNos2}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($result === false) {
                        echo 'salah';
                    }
					
					}else{
					$sql = "UPDATE perdin_settle_detail SET sa_id = {$sa_id} WHERE sa_id IS NULL AND id_user = {$id_user} AND entry_by = {$_SESSION['userId']}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($result === false) {
                        echo 'salah';
                    }
						
					}
					
					$sqlLog = "INSERT INTO logbook_new (perdin_id, type_pengajuan, entry_date, status1) values ({$sa_id}, 4, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),0)";
                        $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
                        if ($resultLog !== false) {
                            $logbook_id = $myDatabase->insert_id;
                        }*/
					
				}else {
                    $return_value = '|FAIL|Insert Data failed.||';
                    echo $sql;
                }
		}else{
			//$reject_remarks = 'NULL';
			//$sync_by = 'NULL';
			//$sync_date = 'NULL';
			$sql = "UPDATE `perdin_surat` SET "
                        . "tanggal = STR_TO_DATE('$tanggal', '%d/%m/%Y'), "
						. "id_user = '{$id_user}', "
						. "remarks = '{$remarks}', "
						//. "shipment_id = '{$shipment_id}', "
						//. "join_date = STR_TO_DATE('$joinDate', '%d/%m/%Y'), "
						. "origin = '{$origin}', "
						//. "invoice_status = '0', "
						//. "approval_status = '0', "
						. "destination = '{$destination}', "
						. "date_from = STR_TO_DATE('$date_from', '%d/%m/%Y'), "
						. "date_to = STR_TO_DATE('$date_to', '%d/%m/%Y'), "
						. "stockpile_id = '{$stockpile_id}',"
						. "payment_from = {$paymentFrom} "
						//. "sync_by = {$sync_by}, "
						//. "sync_date = {$sync_date}, "
                        //. "total_amount = '{$grandTotal}' "
                        
                        . "WHERE sa_id = {$sa_id}";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			if ($result !== false) {
				
				$return_value = '|OK|Data has successfully updated.|' .$sa_id. '|' .$sa_method. '|';
				
				/*if($sa_method == 2){
					if (isset($_POST['checkedSlips2'])) {
                        $checks2 = $_POST['checkedSlips2'];
						if (isset($_POST['checkedSlips3'])) {
							$checks3 = $_POST['checkedSlips3'];
							if (isset($_POST['checkedSlips'])) {
								$checks = $_POST['checkedSlips'];
							} else {
								$checks = '';
							}
						for ($i = 0; $i < sizeof($checks2); $i++) {
                            if ($checks[$i] != '') {
                                if ($slipNos2 == '') {
                                    $slipNos2 .= '(' . $sa_id . ',' . $checks[$i] . ',' . $checks2[$i] . ',' . "'" . $checks3[$i] . "'" . ',' . $hari . ',' . "'" . $entryBy . "'" . ',' . "'" . $currentDate2 . "'" .','. $benefitType . ','. $accountId .')';
                                } else {
                                    $slipNos2 .= ',' . '(' . $sa_id . ',' . $checks[$i] . ',' . $checks2[$i] . ',' . "'" . $checks3[$i] . "'" . ',' . $hari . ',' . "'" . $entryBy . "'" . ',' . "'" . $currentDate2 . "'" . ','. $benefitType . ','. $accountId .')';
                                }
                            }
                        }
						}
                    }
					echo $slipNos2;
                    $sql = "INSERT INTO perdin_adv_detail (sa_id, benefit_id ,amount,keterangan,hari,entry_by, entry_date, type, account_id) VALUES {$slipNos2}";
					//$sql = "UPDATE perdin_adv_detail SET benefit_id = ,amount = ,keterangan = ,hari = , type = , account_id = ) VALUES {$slipNos2}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($result === false) {
                        echo 'salah';
                    }
					
					}*/
				
			}else {
                    $return_value = '|FAIL|Insert Data failed.||';
                    echo $sql;
                }
		}
            } else {
                $return_value = '|FAIL|Please fill the required fields.||';
            }
	
    
    echo $return_value;
		
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'cancel_perdin_surat') {
    // <editor-fold defaultstate="collapsed" desc="account_data">
    
    $return_value = '';
    $boolNew = false;
    $whereCondition = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $sa_id = $myDatabase->real_escape_string($_POST['sa_id']);
    //$levelId = $myDatabase->real_escape_string($_POST['levelId']);
    
    // </editor-fold>
    
    
    
    
    
    if($sa_id != ''  ) {
        
           
                $sql = "UPDATE `perdin_surat` SET "
                        . "status = '2' "
						//. "level_id = '{$levelId}' "
                        . "WHERE sa_id = {$sa_id}";
            
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    //$deptId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Data has successfully inserted/updated.|';
            } else {
                $return_value = '|FAIL|Insert/update Data failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'perdin_adv_settle_data') {
    // <editor-fold defaultstate="collapsed" desc="invoice_detail">
echo 'a';
    $return_value = '';
    $boolShipment1 = false;
    $boolPO = false;
    $boolVendor = false;
	$accountId = '';
    //$grandTotal = 0;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	$sa_id = $myDatabase->real_escape_string($_POST['sa_id']);
    $id_user = $myDatabase->real_escape_string($_POST['id_user']);
    $sa_method = $myDatabase->real_escape_string($_POST['sa_method']);
    //$sa_no = $myDatabase->real_escape_string($_POST['sa_no']);
    $date_from = $myDatabase->real_escape_string($_POST['date_from']);
    $date_to = $myDatabase->real_escape_string($_POST['date_to']);
    $origin = $myDatabase->real_escape_string($_POST['origin']);
	$destination = $myDatabase->real_escape_string($_POST['destination']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    //$shipment_id = $myDatabase->real_escape_string($_POST['shipment_id']);
	$tanggal = $myDatabase->real_escape_string($_POST['tanggal']);
	$grandTotal = $myDatabase->real_escape_string($_POST['grandTotal']);
	$hari = $myDatabase->real_escape_string($_POST['hari']);
	$stockpile_id = $myDatabase->real_escape_string($_POST['stockpile_id']);
	$benefitType = $myDatabase->real_escape_string($_POST['benefitType']);
	$accountId = $myDatabase->real_escape_string($_POST['accountId']);
	$sp_id = $myDatabase->real_escape_string($_POST['sp_id']);
	$userBank = $myDatabase->real_escape_string($_POST['userBank']);
	$paymentFrom = $myDatabase->real_escape_string($_POST['paymentFrom']);
    $slipNos = "";
    $slipNos2 = "";
	$slipNos3 = "";
   
   if ($shipment_id == '') {
        $shipment_id = 0;
    }
	
	if ($sp_id != '' && $id_user != '' && $tanggal != '' && $sa_method != ''  && $date_from != '' && $date_to != '' && $origin != '' && $destination != '' && $grandTotal != '' && $userBank != '' && $paymentFrom != '') {
		if($sa_id == ''){
			
			
			$checkSaNo = 'JPJ/P/SPD-SA/'. $currentYearMonth;
   /* if($contractSeq != "") {
        $poNo = $checkInvoiceNo .'/'. $contractSeq;
    } else {*/
        $sql = "SELECT sa_no FROM perdin_adv_settle WHERE company_id = {$_SESSION['companyId']} AND sa_no LIKE '{$checkSaNo}%' ORDER BY sa_id DESC LIMIT 1";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result->num_rows == 1) {
            $row = $result->fetch_object();
            $splitSaNo = explode('/', $row->sa_no);
            $lastExplode = count($splitSaNo) - 1;
            $nextSaNo = ((float) $splitSaNo[$lastExplode]) + 1;
            $sa_no = $checkSaNo .'/'. $nextSaNo;
        } else {
            $sa_no = $checkSaNo .'/1';
        
    }
	
		 $sql = "INSERT INTO `perdin_adv_settle` (sp_id, sa_method, tanggal, id_user, userBank, sa_no, remarks, origin, destination, date_from, date_to, stockpile_id, total_amount, entry_by, entry_date, payment_from) VALUES ("
		. "{$sp_id},{$sa_method}, STR_TO_DATE('$tanggal', '%d/%m/%Y'),{$id_user}, '{$userBank}', '{$sa_no}', '{$remarks}', {$origin}, {$destination}, STR_TO_DATE('$date_from', '%d/%m/%Y'), STR_TO_DATE('$date_to', '%d/%m/%Y'), '{$stockpile_id}', '{$grandTotal}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$paymentFrom}')";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false) {
                    $sa_id = $myDatabase->insert_id;

                    $return_value = '|OK|Data has successfully inserted.|' .$sa_id. '|' .$sa_method. '|';
					
					$entryBy = $_SESSION['userId'];
					$date2 = new DateTime();
					$currentDate2 = $date2->format('Y-m-d H:i:s');
					
					if($sa_method == 2){
					if (isset($_POST['checkedSlips2'])) {
                        $checks2 = $_POST['checkedSlips2'];
						if (isset($_POST['checkedSlips3'])) {
							$checks3 = $_POST['checkedSlips3'];
                            if (isset($_POST['checkedSlips4'])) {
                                $checks4 = $_POST['checkedSlips4'];
                                if (isset($_POST['checkedSlips5'])) {
                                    $checks5 = $_POST['checkedSlips5'];
                                    if (isset($_POST['checkedSlips6'])) {
                                        $checks6 = $_POST['checkedSlips6'];
							if (isset($_POST['checkedSlips'])) {
								$checks = $_POST['checkedSlips'];
							} else {
								$checks = '';
							}
						for ($i = 0; $i < sizeof($checks2); $i++) {
                            if ($checks[$i] != '') {
                                if ($slipNos2 == '') {
                                    $slipNos2 .= '(' . $sa_id . ',' . $checks[$i] . ',' . $checks2[$i] . ',' . "'" . $checks3[$i] . "'" . ',' . "'" . $checks5[$i] . "'" . ',' . "'" . $checks6[$i] . "'" . ',' . "'" . $checks4[$i] . "'" . ',' . "'" . $entryBy . "'" . ',' . "'" . $currentDate2 . "'" .','. $benefitType . ','. $accountId .')';
                                } else {
                                    $slipNos2 .= ',' . '(' . $sa_id . ',' . $checks[$i] . ',' . $checks2[$i] . ',' . "'" . $checks3[$i] . "'" . ',' . "'" . $checks5[$i] . "'" . ',' . "'" . $checks6[$i] . "'" . ',' . "'" . $checks4[$i] . "'" . ',' . "'" . $entryBy . "'" . ',' . "'" . $currentDate2 . "'" . ','. $benefitType . ','. $accountId .')';
                                }
                            }
                        }
						}
                        }
                    }
                    }
                 }
					echo $slipNos2;
                    $sql = "INSERT INTO perdin_adv_detail (sa_id, benefit_id ,amount,keterangan,qty,unit_price,uom,entry_by, entry_date, type, account_id) VALUES {$slipNos2}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($result === false) {
                        echo 'salah';
                    }
					
					}else{

                        
					$sql = "UPDATE perdin_settle_detail SET sa_id = {$sa_id} WHERE sa_id IS NULL AND id_user = {$id_user} AND entry_by = {$_SESSION['userId']}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($result === false) {
                        echo 'salah';
                    }

                    $sqla = "SELECT a.sa_id_adv, b.`amount` - (SELECT SUM(amount) FROM perdin_dp WHERE sa_id_adv = d.adv_detail_id) AS avail_amount, c.sp_id
                    FROM perdin_dp a
                    LEFT JOIN perdin_settle_detail b ON a.`settle_id` = b.`settle_id`
                    LEFT JOIN perdin_adv_detail d ON d.adv_detail_id = a.sa_id_adv
                    LEFT JOIN perdin_adv_settle c ON d.`sa_id` = c.`sa_id`
                            WHERE b.`sa_id` = {$sa_id}
                            GROUP BY c.sp_id";
					$resulta = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);
                     if ($resulta->num_rows > 0) {
                     while ($rowa = $resulta->fetch_object()) {
                         
                            if($rowa->avail_amount == 0){
					        $sql = "UPDATE perdin_surat SET status = 1 WHERE sa_id = {$rowa->sp_id}";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }

                        }
					}

                    $sqlb = "SELECT *
                            FROM perdin_settle_detail a
                            LEFT JOIN perdin_item b ON a.`item_id` = b.`item_id`
                            WHERE b.`category` = 0 AND a.`sa_id` = {$sa_id}";
					$resultb = $myDatabase->query($sqlb, MYSQLI_STORE_RESULT);
					if($resultb !== false && $resultb->num_rows == 0) {
					$rowb = $resultb->fetch_object();
					
						 $sql = "UPDATE perdin_adv_settle SET approval_status = 1 WHERE sa_id = {$sa_id}";
                         $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                        
					}

                    
						
					}
					
					$sqlLog = "INSERT INTO logbook_new (perdin_id, type_pengajuan, entry_date, status1) values ({$sa_id}, 4, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),0)";
                        $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
                        if ($resultLog !== false) {
                            $logbook_id = $myDatabase->insert_id;
                        }
					
				}else {
                    $return_value = '|FAIL|Insert Data failed.||';
                    echo $sql;
                }
		}else{
			$reject_remarks = 'NULL';
			$sync_by = 'NULL';
			$sync_date = 'NULL';

            $sqla = "SELECT * FROM `perdin_adv_settle` WHERE sa_id = {$sa_id}";
					$resulta = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);
					if($resulta !== false && $resulta->num_rows == 1) {
					$rowa = $resulta->fetch_object();
					
						if($rowa->approval_status == 2){

                            $sql = "UPDATE perdin_adv_settle SET approval_status = 0 WHERE sa_id = {$sa_id}";
                             $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                        }
					}
                    
                    
			$sql = "UPDATE `perdin_adv_settle` SET "
                        . "tanggal = STR_TO_DATE('$tanggal', '%d/%m/%Y'), "
						. "id_user = '{$id_user}', "
						. "userBank = '{$userBank}', "
						. "remarks = '{$remarks}', "
						//. "shipment_id = '{$shipment_id}', "
						//. "join_date = STR_TO_DATE('$joinDate', '%d/%m/%Y'), "
						. "origin = '{$origin}', "
						. "invoice_status = '0', "
						//. "approval_status = '0', "
						. "destination = '{$destination}', "
						. "date_from = STR_TO_DATE('$date_from', '%d/%m/%Y'), "
						. "date_to = STR_TO_DATE('$date_to', '%d/%m/%Y'), "
						. "stockpile_id = '{$stockpile_id}', "
						. "reject_remarks = {$reject_remarks}, "
						. "sync_by = {$sync_by}, "
						. "sync_date = {$sync_date}, "
						. "payment_from = {$paymentFrom}, "
                        . "total_amount = '{$grandTotal}' "
                        
                        . "WHERE sa_id = {$sa_id}";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			if ($result !== false) {
				
				$return_value = '|OK|Data has successfully updated.|' .$sa_id. '|' .$sa_method. '|';
				
				if($sa_method == 1){
				    

                    $sqla = "SELECT a.*, b.`category` FROM perdin_settle_detail a 
                    LEFT JOIN perdin_item b ON a.`item_id` = b.`item_id` WHERE a.sa_id = {$sa_id} AND b.`category` = 0 AND a.`approval_status` = 0 ";
					$resulta = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);
                     if ($resulta->num_rows > 0) {
                     while ($rowa = $resulta->fetch_object()) {
					
						$n = 'NULL';
			            $sqlb = "UPDATE perdin_adv_settle SET approval_status = 0, approval_by = {$n}, approval_date = {$n} WHERE sa_id = {$sa_id}";
                        $resultb = $myDatabase->query($sqlb, MYSQLI_STORE_RESULT);
                            echo $sqlb;
                        }
					}
				}

               
				/*if($sa_method == 2){
					if (isset($_POST['checkedSlips2'])) {
                        $checks2 = $_POST['checkedSlips2'];
						if (isset($_POST['checkedSlips3'])) {
							$checks3 = $_POST['checkedSlips3'];
							if (isset($_POST['checkedSlips'])) {
								$checks = $_POST['checkedSlips'];
							} else {
								$checks = '';
							}
						for ($i = 0; $i < sizeof($checks2); $i++) {
                            if ($checks[$i] != '') {
                                if ($slipNos2 == '') {
                                    $slipNos2 .= '(' . $sa_id . ',' . $checks[$i] . ',' . $checks2[$i] . ',' . "'" . $checks3[$i] . "'" . ',' . $hari . ',' . "'" . $entryBy . "'" . ',' . "'" . $currentDate2 . "'" .','. $benefitType . ','. $accountId .')';
                                } else {
                                    $slipNos2 .= ',' . '(' . $sa_id . ',' . $checks[$i] . ',' . $checks2[$i] . ',' . "'" . $checks3[$i] . "'" . ',' . $hari . ',' . "'" . $entryBy . "'" . ',' . "'" . $currentDate2 . "'" . ','. $benefitType . ','. $accountId .')';
                                }
                            }
                        }
						}
                    }
					echo $slipNos2;
                    $sql = "INSERT INTO perdin_adv_detail (sa_id, benefit_id ,amount,keterangan,hari,entry_by, entry_date, type, account_id) VALUES {$slipNos2}";
					//$sql = "UPDATE perdin_adv_detail SET benefit_id = ,amount = ,keterangan = ,hari = , type = , account_id = ) VALUES {$slipNos2}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($result === false) {
                        echo 'salah';
                    }
					
					}*/
				
			}else {
                    $return_value = '|FAIL|Insert Data failed.||';
                    echo $sql;
                }
		}
            } else {
                $return_value = '|FAIL|Please fill the required fields.||';
            }
	
    
    echo $return_value;
		
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'print_perdin') {
    // <editor-fold defaultstate="collapsed" desc="account_data">
    
    $return_value = '';
    $boolNew = false;
    $whereCondition = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $sa_id = $myDatabase->real_escape_string($_POST['sa_id']);
    //$levelId = $myDatabase->real_escape_string($_POST['levelId']);
    
    // </editor-fold>
    
    
    
    
    
    if($sa_id != ''  ) {
        
           
                $sql = "UPDATE `perdin_adv_settle` SET "
                        . "print_status = '1' "
						//. "level_id = '{$levelId}' "
                        . "WHERE sa_id = {$sa_id}";
            
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    //$deptId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Data has successfully inserted/updated.|';
            } else {
                $return_value = '|FAIL|Insert/update Data failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'upload_advance_perdin') {
    // <editor-fold defaultstate="collapsed" desc="account_data">
    
    $return_value = '';
    $boolNew = false;
    $whereCondition = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	$sa_id = $myDatabase->real_escape_string($_POST['sa_id']);
	
	
    //FILE    
        if (isset($_FILES['file']) && $_FILES['file']['size'] > 0) {
			echo "TESTING  EXTENSINON";
            $allowed = array('png', 'jpg', 'pdf', 'doc', 'docs', 'xls', 'xlsx');
            $fileName = $_FILES['file']['name'];
            $x = explode('.', $fileName);
            $ekstensi = strtolower(end($x));
            $ukuran = $_FILES['file']['size'];
            $file_tmp = $_FILES['file']['tmp_name'];
    
            if (in_array($ekstensi, $allowed) === true) {
    
                $attachmentPath = "./import/perdin";
                    if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
                        $temp = mkdir($attachmentPath, 0755, TRUE);
                    else
                        $temp = TRUE;
    
                    if ($temp === TRUE) {
                        $attachmentPath .= "/" . date("ymdHis") . "-" . basename($fileName);
                            if (!move_uploaded_file($file_tmp, $attachmentPath)) {
                                echo '|FAIL|Error while uploading file.|';
                                die();
                            }
                    } else {
                        echo '|FAIL|Error while creating directory.|';
                        die();
                    }
    
                
            } else {
                echo '|FAIL|EKSTENSI FILE YANG DI UPLOAD TIDAK DI PERBOLEHKAN.|';
                die();
            }
        }
    
    // </editor-fold>  
    
    if($sa_id != '' && $attachmentPath != '') {

        $sqla = "SELECT * FROM `perdin_adv_settle` WHERE sa_id = {$sa_id}";
        $resulta = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);
        if($resulta !== false && $resulta->num_rows == 1) {
        $rowa = $resulta->fetch_object();
        
            if($rowa->sp_id != ''){

              /*  $sql = "UPDATE perdin_surat SET status = 1 WHERE sa_id = {$rowa->sp_id }";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    echo $sql;*/
            }
        }

        
        
            
                $sql = "UPDATE `perdin_adv_settle` SET "
                        . "upload_status = 1, "
						. "docs = '{$attachmentPath}', "
						. "upload_by = {$_SESSION['userId']}, "
                        . "upload_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE sa_id = {$sa_id}";
            
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    //$saId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Documents has successfully uploaded.||';
            } else {
                $return_value = '|FAIL|Upload documents failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_perdin_adv') {
    // <editor-fold defaultstate="collapsed" desc="delete_account">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $sa_id = $myDatabase->real_escape_string($_POST['sa_id']);
    // </editor-fold>
    
    if($sa_id != '') {
        $sql = "SELECT * FROM `perdin_adv_settle` WHERE sa_id = {$sa_id}";
		$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		if($result !== false && $result->num_rows == 1) {
				 $row = $result->fetch_object();
				 
		if($row->sa_method == 1){

		$sql = "UPDATE perdin_surat SET status = 0  WHERE sa_id = {$row->sp_id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

		$sql = "DELETE FROM `perdin_settle_detail` WHERE sa_id = {$sa_id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
		$sql = "DELETE FROM `perdin_adv_settle` WHERE sa_id = {$sa_id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		}else{
		$sql = "DELETE FROM `perdin_adv_detail` WHERE sa_id = {$sa_id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
		$sql = "DELETE FROM `perdin_adv_settle` WHERE sa_id = {$sa_id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		}
		}
        
        //if($result !== false && $result->num_rows == 0) {
            //$sql = "DELETE FROM `account` WHERE account_id = {$accountId}";
            //$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Data has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete Data failed.|';
            }
        //} else {
          //  $return_value = '|FAIL|Account in use in payments.|';
        //}
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'pengajuan_general_data') {
    // <editor-fold defaultstate="collapsed" desc="CRUD PENGAJUAN GENERAL DATA">
	
    // <editor-fold defaultstate="collapsed" desc="POST VARIABLE">
    $return_value = '';
    $addMessage = '';
    $boolNew = false;
    $boolContinue = true;
    $boolUpdate = false;
    $boolUpdateInvoice = false;
    $boolUpdateInvoiceDetail = false;
    $boolInsertVendor = false;
    $boolVendorExists = false;
    $boolRecalculate = false;
    $boolPriceUp = false;
    $boolPriceDown = false;
    $boolQuantityUp = false;
    $boolQuantityDown = false;
	 

    //$invoiceMethod = 1;
    $generatedInvoiceNo = $myDatabase->real_escape_string($_POST['generatedInvoiceNo']);
	$generatedPerdinNo = $myDatabase->real_escape_string($_POST['generatedPerdinNo']);
    $invoiceNo2 = $myDatabase->real_escape_string($_POST['generatedInvoiceNo2']);
    $grandTotal = $myDatabase->real_escape_string($_POST['grandTotal']);
    $invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
    $inputDate = $myDatabase->real_escape_string($_POST['inputDate']);
    $requestDate = $myDatabase->real_escape_string($_POST['requestDate']);
    $taxDate = $myDatabase->real_escape_string($_POST['taxDate']);
    $invoiceTax = $myDatabase->real_escape_string($_POST['invoiceTax']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $transaksiMutasi = $myDatabase->real_escape_string($_POST['transaksiMutasi']);
   // $transaksiPO = $myDatabase->real_escape_string($_POST['transaksiPO']);
	$invoiceMethod = $myDatabase->real_escape_string($_POST['invoiceMethod']);
	$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
	$shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
	$gvBankId = $myDatabase->real_escape_string($_POST['gvBankId']);
    $amount = $grandTotal;
    $amountConverted = $grandTotal;
    $amount_ori = $grandTotal;
    $amount_ori_conv = $grandTotal;
    $rejectRemarks = $_POST['rejectRemarks'];
	//echo 'zz';
	if($shipmentId == ''){
		$shipmentId = 0;
	}

    // </editor-fold>

   /* if ($_POST['_method'] == 'DELETE') {
        // <editor-fold defaultstate="collapsed" desc="DELETE PENGAJUAN GENERAL">
        $pgId = $myDatabase->real_escape_string($_POST['pgId']);
        if ($pgId != '') {
            $sql = "DELETE FROM `pengajuan_general` WHERE pengajuan_general_id = {$pgId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Pengajuan General has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete Pengajuan General failed.|';
            }
        } else {
            $return_value = '|FAIL|Record not found.|';
        }
        echo $return_value;
        // </editor-fold>
    } else if ($_POST['_method'] == 'CANCEL') {
        // <editor-fold defaultstate="collapsed" desc="Cancel Pengajuan General">
        $pgId = $_POST['pgId'];
        $transaksiMutasi = '';
        //Update Status Pengajuan General
        $sqlUpdatePG = "UPDATE `pengajuan_general` SET invoice_no2 = '-', reject_remarks = '{$rejectRemarks}', status_pengajuan = 5, reject_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') WHERE pengajuan_general_id = {$pgId}";
        $updatePG = $myDatabase->query($sqlUpdatePG, MYSQLI_STORE_RESULT);

        //GET Transaction Type & PO ID
        $sqlPG = "SELECT * FROM pengajuan_general WHERE pengajuan_general_id = {$pgId}";
        $pg = $myDatabase->query($sqlPG, MYSQLI_STORE_RESULT);
        while ($rowPG = $pg->fetch_object()) {
            $transaksiMutasi = $rowPG->transaction_type;
            $po_id = $rowPG->po_id;
            $transactionPO = $rowPG->transaction_po;
        }
        if ($transactionPO == 2) {
            $sqlUpdateStatusPO = "UPDATE po_hdr SET status = 0 where idpo_hdr = {$po_id}";
            $resUpdateSTPO = $myDatabase->query($sqlUpdateStatusPO, MYSQLI_STORE_RESULT);
        }

        $updateLogbookQuery = "UPDATE logbook_new SET status1= 2 WHERE pinvoice_id = {$pgId}";
        $updateLogbook = $myDatabase->query($updateLogbookQuery, MYSQLI_STORE_RESULT);

        if ($transaksiMutasi == 2) {
            // $sqlPGD = "SELECT * FROM pengajuan_general_detail WHERE pg_id = {$pgId}";
            // $pgd = $myDatabase->query($sqlPGD, MYSQLI_STORE_RESULT);

            // while ($rowPGD = $pgd->fetch_object()) {
            //     $sqlMutasiQTY = "SELECT * FROM mutasi_qty_price WHERE pgd_id = {$rowPGD->pgd_id}";
            //     $mutasiQTY = $myDatabase->query($sqlMutasiQTY, MYSQLI_STORE_RESULT);

            //     while ($rowMutasiQTY = $mutasiQTY->fetch_object()) {
            //         $pphAmt = isset($rowMutasiQTY->pphAmt) ? $rowMutasiQTY->pphAmt : 0;
            //         $ppnAmt = isset($rowMutasiQTY->ppnAmt) ? $rowMutasiQTY->ppnAmt : 0;
            //         $invoiceDetailId = isset($rowMutasiQTY->invoice_detail_id) ? $rowMutasiQTY->invoice_detail_id : 0;
            //         $pphId = isset($rowMutasiQTY->pphId) ? $rowMutasiQTY->pphId : 0;
            //         $ppnId = isset($rowMutasiQTY->ppnId) ? $rowMutasiQTY->ppnId : 0;
            //         $qtyEstimasi = isset($rowMutasiQTY->qtyEstimasi) ? $rowMutasiQTY->qtyEstimasi : 0;

            //         $insertLog = "INSERT INTO mutasi_qty_price_log (pgd_id,mutasi_detail_id,termin,qtyInvoice,invoice_detail_id,ppnId,ppnAmt,pphAmt,pphId,qtyEstimasi,reject_by,reject_date) VALUES
            //                                    ({$rowMutasiQTY->pgd_id},{$rowMutasiQTY->mutasi_detail_id},{$rowMutasiQTY->termin},{$rowMutasiQTY->qtyInvoice},{$invoiceDetailId},
            //                                    {$ppnId},{$ppnAmt},{$pphAmt},{$pphId},{$qtyEstimasi},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            //         echo $insertLog;
            //         $log = $myDatabase->query($insertLog, MYSQLI_STORE_RESULT);

            //         if ($log == true) {
            //             $deleteQTY = "DELETE FROM mutasi_qty_price WHERE pgd_id = {$rowMutasiQTY->pgd_id}";
            //             $delQTY = $myDatabase->query($deleteQTY, MYSQLI_STORE_RESULT);

            //             if ($delQTY == true) {
            //                 $return_value = '|OK|. Cancel has successfully||';
            //             } else {
            //                 $return_value = '|Fail|. Cancel fail ||';
            //             }
            //         } else {
            //             $return_value = '|Fail|. Cancel fail2 ||';
            //         }
            //     }
            // }
            $return_value = '|OK|. Cancel has successfully||';
        } else {
            if ($updatePG == true) {
                $return_value = '|OK|. Cancel has successfully ||';
            } else {
                $return_value = '|Fail|. Cancel fail2 ||';
            }
        }
        echo $return_value;
        die();
        // </editor-fold>
    } else*/ if ($_POST['_method'] == 'REJECT') {
        // <editor-fold defaultstate="collapsed" desc="Reject Pengajuan General">
					$pgId = $_POST['pgId'];
					$docs = 'NULL';
	$sqlUpdatePG = "UPDATE `perdin_adv_settle` a LEFT JOIN perdin_surat b ON a.`sp_id` = b.`sa_id` 
SET a.invoice_status = 3, a.reject_remarks = '{$rejectRemarks}', a.sync_by = {$_SESSION['userId']}, a.sync_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),
 a.docs = {$docs}, a.upload_status = 0,a.print_status = 0, b.`status` = 0 WHERE a.sa_id = {$pgId}";
					$updatePG = $myDatabase->query($sqlUpdatePG, MYSQLI_STORE_RESULT);

					$updateLogbookQuery = "UPDATE logbook_new SET status1= 4 WHERE pinvoice_id = {$pgId}";
					//echo $updateLogbookQuery;
					$updateLogbook = $myDatabase->query($updateLogbookQuery, MYSQLI_STORE_RESULT);

					if ($updatePG == true /*&& $updateLogbook == true*/) {
						$return_value = '|OK|. Reject has successfully||';

					} else {
						$return_value = '|Fail|. Reject FAIL!|' . $sqlUpdatePG. '|';

					}
					echo $return_value;
					die();
					// </editor-fold>
				
        // </editor-fold>
    } else if ($_POST['_method'] == 'REUPLOAD') {
        // <editor-fold defaultstate="collapsed" desc="Reject Pengajuan General">
					$pgId = $_POST['pgId'];
					//$docs = 'NULL';
	                $sqlUpdatePG = "UPDATE `perdin_adv_settle` a SET a.upload_status = 3 WHERE a.sa_id = {$pgId}";
					$updatePG = $myDatabase->query($sqlUpdatePG, MYSQLI_STORE_RESULT);

					//$updateLogbookQuery = "UPDATE logbook_new SET status1= 4 WHERE pinvoice_id = {$pgId}";
					//echo $updateLogbookQuery;
					//$updateLogbook = $myDatabase->query($updateLogbookQuery, MYSQLI_STORE_RESULT);

					if ($updatePG == true/* && $updateLogbook == true*/) {
						$return_value = '|OK|. Request has successfully||';

					} else {
						$return_value = '|Fail|. Request FAIL!|' . $sqlUpdatePG. '|';

					}
					echo $return_value;
					die();
					// </editor-fold>
				
        // </editor-fold>
    }else {
        // <editor-fold defaultstate="collapsed" desc="INSERT Pengajuan General">
        if ($grandTotal != '' && $boolContinue) {
            //Get Stockpile Name
            $sql = "SELECT stockpile_name FROM stockpile WHERE stockpile_id = $stockpileId ";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileName = $rowStockpile->stockpile_name;
            }

            if ($grandTotal <= 0) {
                $boolContinue = true;
            }
            if ($boolContinue) {

                // <editor-fold defaultstate="collapsed" desc="Check Pengajuan No">

                /*if ($_POST['_method'] == 'UPDATE') {
                    $pgId = $_POST['pgId'];
                    $sqlPGNO = "SELECT pengajuan_no,stockpileId FROM pengajuan_general where pengajuan_general_id = {$pgId}";
                    echo $sqlPGNO;
                    $resPGNO = $myDatabase->query($sqlPGNO, MYSQLI_STORE_RESULT);

                    if ($resPGNO->num_rows == 1) {
                        $rowPG = $resPGNO->fetch_object();
                        $stockpileId = $rowPG->stockpileId;
                        $pengajuanNo = $rowPG->pengajuan_no;
                    }

                    $sqlStockpile = "SELECT stockpile_name FROM stockpile WHERE stockpile_id = $stockpileId ";
                    $resultStockpile = $myDatabase->query($sqlStockpile, MYSQLI_STORE_RESULT);

                    if ($resultStockpile->num_rows == 1) {
                        $rowStockpile = $resultStockpile->fetch_object();
                        $stockpileName = $rowStockpile->stockpile_name;
                    }

                } else {
                    $checkInvoiceNo = 'PGJ/JPJ/' . $currentYearMonth;
                    $sql = "SELECT pengajuan_no FROM pengajuan_general WHERE company_id = {$_SESSION['companyId']} AND pengajuan_no LIKE '{$checkInvoiceNo}%' ORDER BY pengajuan_general_id DESC LIMIT 1";
                    $resultInvoice = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultInvoice->num_rows == 1) {
                        $rowInvoice = $resultInvoice->fetch_object();
                        $splitInvoiceNo = explode('/', $rowInvoice->pengajuan_no);
                        $lastExplode = count($splitInvoiceNo) - 1;
                        $nextInvoiceNo = ((float)$splitInvoiceNo[$lastExplode]) + 1;
                        $pengajuanNo = $checkInvoiceNo . '/' . $nextInvoiceNo;
                    } else {
                        $pengajuanNo = $checkInvoiceNo . '/1';

                    }
                }
                // </editor-fold>

                // <editor-fold defaultstate="collapsed" desc="Upload File">
                if (isset($_FILES['file']) && $_FILES['file']['size'] > 0) {
                    $allowed = array('png', 'jpg', 'pdf', 'doc', 'docs', 'xls', 'xlsx');
                    $fileName = $_FILES['file']['name'];
                    $x = explode('.', $fileName);
                    $ekstensi = strtolower(end($x));
                    $ukuran = $_FILES['file']['size'];
                    $file_tmp = $_FILES['file']['tmp_name'];

                    if (in_array($ekstensi, $allowed) === true) {

                        $attachmentPath = "./import/pengajuan_general/" . $stockpileName . "/" . $todayDate . '/';
                        if ($ukuran < 115044070) {

                            if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
                                $temp = mkdir($attachmentPath, 0755, TRUE);
                            else
                                $temp = TRUE;

                            if ($temp === TRUE) {
                                $attachmentPath .= str_ireplace('/', '-', $pengajuanNo) . '.' . $ekstensi;
                                if (!move_uploaded_file($file_tmp, $attachmentPath)) {
                                    echo '|FAIL|Error while uploading file.|';
                                    die();
                                }
                            } else {
                                echo '|FAIL|Error while creating directory.|';
                                die();
                            }
                        } else {
                            echo '|FAIL|UKURAN FILE TERLALU BESAR.|';
                            die();
                        }
                    } else {
                        echo '|FAIL|EKSTENSI FILE YANG DI UPLOAD TIDAK DI PERBOLEHKAN.|';
                        die();
                    }
                } else {
                    $attachmentPath = 'NULL';
                }
                // </editor-fold>

                $result = false;
                $paymentType = isset($_POST['paymentType']) && $_POST['paymentType'] != '' ? $_POST['paymentType'] : 0;

                // if($paymentType == 2){
                //     $sqlPaymentDate = "CALL PlanPayDate('{$todayDate}')";
                //     $resultPlanPayDate = $myDatabase->query($sqlPaymentDate, MYSQLI_STORE_RESULT);
                //     while($rowPD = $resultPlanPayDate->fetch_object()){
                //         $date = date_create($rowPD->tglBayar);
                //         $newDate = date_format($date,"d/m/Y");
                //         $reqPaymentDate = "STR_TO_DATE('{$newDate}', '%d/%m/%Y')";
                //     } 
                // }else{
                //     $reqPaymentDate = isset($_POST['requestPaymentDate']) && $_POST['requestPaymentDate'] != '' ? "STR_TO_DATE('{$_POST['requestPaymentDate']}', '%d/%m/%Y')" : 'NULL';
                // }
                $reqPaymentDate = isset($_POST['requestPaymentDate']) && $_POST['requestPaymentDate'] != '' ? "STR_TO_DATE('{$_POST['requestPaymentDate']}', '%d/%m/%Y')" : 'NULL';

                // echo $reqPaymentDate;
                if ($_POST['_method'] == 'INSERT') {
                    $transaksiPO = $_POST['transaksiPO'];
                    $terminHeader = $_POST['termin'];

                    $sqlCheckInvoiceNo2 = "SELECT invoice_no2 FROM pengajuan_general WHERE invoice_no2 != '-' AND status_pengajuan != 5 AND invoice_no2 ='{$invoiceNo2}'";
                    echo $sqlCheckInvoiceNo2;
                    $checkInvoiceNo2 = $myDatabase->query($sqlCheckInvoiceNo2, MYSQLI_STORE_RESULT);

                    if ($checkInvoiceNo2->num_rows > 0) {
                        $invoiceNo2Check = false;
                    } else {
                        $invoiceNo2Check = true;
                    }

                    if ($invoiceNo2Check) {
                        //TransaksiPO = 2 True
                        if (isset($transaksiPO) && $transaksiPO == 2) {
                            $idPOHDR = $_POST['idPOHDR'];

                            // <editor-fold defaultstate="collapsed" desc="Query for GET PO HEADER">
                            $sql = "SELECT gv.general_vendor_name as vendor_name,p.*,DATE_FORMAT(p.tanggal,'%d/%m/%Y') as date,s.*FROM po_hdr p 
                            LEFT JOIN general_vendor gv ON gv.general_vendor_id = p.general_vendor_id
                            LEFT JOIN stockpile s ON p.stockpile_id = s.stockpile_id WHERE idpo_hdr = {$idPOHDR}";
                            echo 'SQL GET PO HDR = ' . $sql;
                            $resultData = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                            if ($resultData !== false && $resultData->num_rows > 0) {
                                $rowData = $resultData->fetch_object();
//                                $requestDate = $rowData->date;
                                $stockpile = $rowData->stockpile_name;
                                $stockpileId = $rowData->stockpile_id;
                                $noPO = $rowData->no_po;
                                $generalVendorId = $rowData->general_vendor_id;
                                $vendorName = $rowData->vendor_name;
                                $gvBankId = $rowData->bank_id;
                                $currencyId = $rowData->currency_id;
                                $rate = $rowData->exchangerate;
                            }
                            // </editor-fold>

                            // <editor-fold defaultstate="collapsed" desc="Query for INSERT Pengajuan General">

                            //SQL CHECK TERMIN
                            $sql = "SELECT pg.termin FROM pengajuan_general pg WHERE pg.po_id = {$idPOHDR} AND pg.status_pengajuan IN (0,1) ";
                            $resCheckTermin = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                            $termin = 0;
                            if ($resCheckTermin->num_rows > 0) {
                                while ($row = $resCheckTermin->fetch_object()) {
                                    $termin += $row->termin;
                                }
                            }
                            $termin = $termin + $terminHeader;
                            echo $sql;
                            echo 'termin = ' . $termin;

                            //Check Termin
                            $transaksiMutasi = 1;
                            if ($termin > 100) {
                                echo '|FAIL| Termin Lebih Dari 100%';
                                die();
                            } else {
                                $sql = "INSERT INTO `pengajuan_general` (transaction_po,termin,invoice_date,transaction_type,payment_type,request_payment_date,request_date, tax_date, invoice_method, stockpileId, pengajuan_no, invoice_no2, invoice_tax, remarks,po_id, file, company_id, entry_by, entry_date) VALUES ("
                                    . "{$transaksiPO},{$terminHeader},STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'),{$transaksiMutasi},{$paymentType},{$reqPaymentDate},STR_TO_DATE('{$requestDate}', '%d/%m/%Y'), STR_TO_DATE('{$taxDate}', '%d/%m/%Y'), {$invoiceMethod},  {$stockpileId}, '{$pengajuanNo}', '{$invoiceNo2}', '{$invoiceTax}', '{$remarks}',{$idPOHDR},"
                                    . "'{$attachmentPath}', {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                echo $sql;
                                $pgId = $myDatabase->insert_id;
                            }


                            //Update Status PO
                            if ($termin == 100) {
                                $sqlUpdateStatusPO = "UPDATE po_hdr SET status = 5 where idpo_hdr = {$idPOHDR}";
                                $resUpdateSTPO = $myDatabase->query($sqlUpdateStatusPO, MYSQLI_STORE_RESULT);
                            }
                            // </editor-fold>

                            // <editor-fold defaultstate="collapsed" desc="Query for INSERT Pengajuan General Detail">
                            $sqlPODetail = "SELECT a.account_id as accountId,a.account_type as accountType,pd.*, i.item_name, (case when pd.pphstatus = 1 then pd.pph else 0 end) as pph,
			                    (case when pd.ppnstatus = 1 then pd.ppn else 0 end) as ppn,
			                    (pd.amount+(case when pd.ppnstatus = 1 then pd.ppn else 0 end)-(case when pd.pphstatus = 1 then pd.pph else 0 end)) as grandtotal,
                                u.uom_type,s.`stockpile_name`, sh.`shipment_no`, pd.idpo_detail
                                from po_detail pd
                                left join master_item i on i.idmaster_item = pd.item_id
								LEFT JOIN master_groupitem mg ON mg.idmaster_groupitem = i.group_itemid
											LEFT JOIN ACCOUNT a ON a.account_id = mg.account_id
                                left join uom u on u.idUOM = i.uom_id
                                LEFT JOIN stockpile s ON s.`stockpile_id` = pd.`stockpile_id`
                                LEFT JOIN shipment sh ON sh.`shipment_id` = pd.`shipment_id`
                                WHERE no_po = '{$noPO}' ORDER BY idpo_detail ASC";

                            $resultPODetail = $myDatabase->query($sqlPODetail, MYSQLI_STORE_RESULT);

                            $tamount = 0;
                            $index = 0;
                            while ($row = $resultPODetail->fetch_object()) {
                                $invoiceMethodDetail = $row->method;
                                $invoiceType = isset($row->accountType) ? $row->accountType : 0;
                                $accountId = isset($row->accountId) ? $row->accountId : 0;
                                $poId = 0;
                                $poDetailId = $row->idpo_detail;
                                $shipmentId1 = isset($row->shipment_id) ? $row->shipment_id : 0;
                                $stockpileId2 = isset($row->stockpile_id) ? $row->stockpile_id : 0;
                                $qty = $row->qty;
                                $price = $row->harga;
                                $termin = $terminHeader;
                                $amount2 = $row->amount;
                                $amountConverted = $amount2;
                                if ($currencyId == 1) {
                                    $exchangeRate = 1;
                                } else {
                                    $exchangeRate = $rate;
                                }
                                $ppnID = $row->ppn_id;
                                $ppn2 = $row->ppn;
                                $ppnConverted = $ppn2;
                                $pphID = $row->pph_id;
                                $pph2 = $row->pph;
                                $pphConverted = $pph2;
                                $tamount = ($amount2 + $ppn2 - $pph2);
                                $tamount = $tamount * $termin / 100;
                                $tamountConverted = $tamount;
                                $dpAmount = 0;
                                $vendorType = 'General';

                                $notes = $row->notes;
                                $gvBankId = isset($gvBankId) ? $gvBankId : 0;

                                $sql = "INSERT INTO `pengajuan_general_detail` (po_detail_id,pg_id,invoice_method_detail, type, account_id, poId, vendor_type ,vendor_name,general_vendor_id, shipment_id, stockpile_remark, qty, price, termin, amount, amount_converted, currency_id, exchange_rate, ppnID, ppn, ppn_converted, pphID, pph, pph_converted, tamount, tamount_converted, dp_amount, notes,gv_bank_id, entry_by, entry_date) VALUES ("
                                    . "{$poDetailId},{$pgId},{$invoiceMethodDetail},{$invoiceType},{$accountId}, {$poId},'{$vendorType}','{$vendorName}', {$generalVendorId}, {$shipmentId1}, {$stockpileId2}, '{$qty}', '{$price}', '{$termin}', '{$amount2}', '{$amountConverted}', {$currencyId}, '{$exchangeRate}', {$ppnID} ,'{$ppn2}', '{$ppnConverted}', {$pphID}, '{$pph2}', '{$pphConverted}', '{$tamount}', '{$tamountConverted}', '{$dpAmount}', '{$notes}',{$gvBankId} ,{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                            // </editor-fold>

                        } else {
                            $transaksiMutasi = 1;
                            // <editor-fold defaultstate="collapsed" desc="Query for INSERT Pengajuan General">
                            $sql = "INSERT INTO `pengajuan_general` (transaction_po,invoice_date,transaction_type,payment_type,request_payment_date,request_date, tax_date, invoice_method, stockpileId, pengajuan_no, invoice_no2, invoice_tax, remarks,po_id, file, company_id, entry_by, entry_date) VALUES ("
                            . "{$transaksiPO},STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'),{$transaksiMutasi},{$paymentType},{$reqPaymentDate},STR_TO_DATE('{$requestDate}', '%d/%m/%Y'), STR_TO_DATE('{$taxDate}', '%d/%m/%Y'), {$invoiceMethod},  {$stockpileId}, '{$pengajuanNo}', '{$invoiceNo2}', '{$invoiceTax}','{$remarks}',NULL,"
                            . "'{$attachmentPath}', {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            $pgId = $myDatabase->insert_id;
                            
                            $sqlUpdatePGD = "UPDATE pengajuan_general_detail SET pg_id = $pgId WHERE pg_id IS NULL AND entry_by = {$_SESSION['userId']}";
                            $result = $myDatabase->query($sqlUpdatePGD, MYSQLI_STORE_RESULT);

                        }
                    } else {
                        echo '|FAIL| Original Invoice No Tidak Boleh Sama!';
                        die();
                    }

                    //add by yeni
                    $sqlLog = "INSERT INTO logbook_new (pinvoice_id, type_pengajuan, entry_date, status1) values ({$pgId}, 2, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),0)";
                    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
                    if ($resultLog !== false) {
                        $logbook_id = $myDatabase->insert_id;
                    }


                } elseif ($_POST['_method'] == 'UPDATE') {
                    // <editor-fold defaultstate="collapsed" desc="Update Pengajuan General">
                  
                    $pgId = $_POST['pgId'];
                    if (isset($_FILES['file']) && $_FILES['file']['size'] > 0) {
                        $sql = "UPDATE `pengajuan_general` SET "
                            . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                            . "tax_date = STR_TO_DATE('{$taxDate}', '%d/%m/%Y'), "
                            . "stockpileId = '{$stockpileId}', "
                            . "invoice_no2 = '{$invoiceNo2}', "
                            . "payment_type = '{$paymentType}', "
                            . "request_payment_date = {$reqPaymentDate}, "
                            . "request_date = STR_TO_DATE('{$requestDate}', '%d/%m/%Y'), "
                            . "invoice_tax = '{$invoiceTax}', "
                            . "file = '{$attachmentPath}', "
                            . "remarks = '{$remarks}', "
                            . "status_pengajuan = 0 "
                            . "WHERE pengajuan_general_id = {$pgId}";
                    } else {
                        $sql = "UPDATE `pengajuan_general` SET "
                            . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                            . "tax_date = STR_TO_DATE('{$taxDate}', '%d/%m/%Y'), "
                            . "stockpileId = '{$stockpileId}', "
                            . "invoice_no2 = '{$invoiceNo2}', "
                            . "invoice_tax = '{$invoiceTax}', "
                            . "payment_type = '{$paymentType}', "
                            . "request_date = STR_TO_DATE('{$requestDate}', '%d/%m/%Y'), "
                            . "request_payment_date = {$reqPaymentDate}, "
                            . "remarks = '{$remarks}', "
                            . "status_pengajuan = 0 "
                            . "WHERE pengajuan_general_id = {$pgId}";
                    }
                    if ($_POST['generalVendorId'] != '' || $_POST['gvBankId']) {
                        $sqlUpdatePGD = "UPDATE pengajuan_general_detail SET general_vendor_id = {$_POST['generalVendorId']}, gv_bank_id = {$_POST['gvBankId']} WHERE pg_id = {$pgId}";
                        $resultPGD = $myDatabase->query($sqlUpdatePGD, MYSQLI_STORE_RESULT);
                    }
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    // </editor-fold>
					
                } else */ 
				 if ($_POST['_method'] == 'APPROVE') {
                    // <editor-fold defaultstate="collapsed" desc="Approve Pengajuan General">
					$pgId = $_POST['pgId'];
                    /*$pgId = $_POST['pgId'];

                    $sqlUpdatePG = "UPDATE `pengajuan_general` SET input_date = STR_TO_DATE('{$inputDate}', '%d/%m/%Y'), status_pengajuan = 1,
                                    approved_by = {$_SESSION['userId']}, approved_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s')
                                    WHERE pengajuan_general_id = {$pgId}";
                    $updatePG = $myDatabase->query($sqlUpdatePG, MYSQLI_STORE_RESULT);*/
					if($invoiceMethod == 2){
						//$shipmentId = 'NULL';
						
						$sql = "select DATE_FORMAT(STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), '%y%m') AS slip_prefix from dual";
						$resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
						$rowSlip = $resultSlip->fetch_object();
						$invoiceYearMonth = $rowSlip->slip_prefix;

						$checkInvoiceNo = 'INV/JPJ/' . $currentYearMonth;

						$sql = "SELECT invoice_no FROM invoice WHERE company_id = {$_SESSION['companyId']} AND invoice_no LIKE '{$checkInvoiceNo}%' ORDER BY invoice_id DESC LIMIT 1";
						$resultInvoice = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
						if ($resultInvoice->num_rows == 1) {
							$rowInvoice = $resultInvoice->fetch_object();
							$splitInvoiceNo = explode('/', $rowInvoice->invoice_no);
							$lastExplode = count($splitInvoiceNo) - 1;
							$nextInvoiceNo = ((float)$splitInvoiceNo[$lastExplode]) + 1;
							$invoiceNo = $checkInvoiceNo . '/' . $nextInvoiceNo;
						} else {
							$invoiceNo = $checkInvoiceNo . '/1';
						}
						//alan
						
						//$sqlGetPengajuan = "SELECT * FROM pengajuan_general WHERE pengajuan_general_id = {$pgId}";
						//$pg = $myDatabase->query($sqlGetPengajuan, MYSQLI_STORE_RESULT);
	// //                    //Insert TO Invoice
						//while ($rowPG = $pg->fetch_object()) {
						  //  $poId = isset($rowPG->po_id) ? $rowPG->po_id : 'NULL';
						 // echo "PErdin No ". $generatedPerdinNo;
							$sqlInsertPg = "INSERT INTO `invoice` (invoice_date,input_date, request_date, invoice_method,
											stockpileId, invoice_no, invoice_no2, remarks, shipmentId, company_id, entry_by, entry_date,sa_id) VALUES ("
								. "STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y %H:%i:%s'),STR_TO_DATE('{$inputDate}', '%d/%m/%Y %H:%i:%s'),STR_TO_DATE('{$requestDate}', '%d/%m/%Y %H:%i:%s'),
								{$invoiceMethod},{$stockpileId}, '{$invoiceNo}', '{$generatedPerdinNo}', '{$remarks}', '{$shipmentId}',"
								. " {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$pgId})";
							$resPG = $myDatabase->query($sqlInsertPg, MYSQLI_STORE_RESULT);

							$invId = $myDatabase->insert_id;
							
							//echo " TEST " .$sqlInsertPg;
							
						//}

	// //                    //edit by yeni
	// //                    //Update status Logbook
	//                     $updateLog = "UPDATE `logbook_new` SET invoice_id = {$invId}, status1 = 1 WHERE pinvoice_id = {$pgId}";
	//                     $resultUL = $myDatabase->query($updateLog, MYSQLI_STORE_RESULT);
	// //                    //Update Status Invoice
	//                    $updatePG = "UPDATE `pengajuan_general` SET invoice_id = {$invId}, invoice_status = 1 WHERE pengajuan_general_id = {$pgId}";
	//                    $resultPG = $myDatabase->query($updatePG, MYSQLI_STORE_RESULT);
						
						$sqlGetPengajuanDetail = "SELECT a.*,b.type, b.account_id, b.adv_detail_id,
                        CASE WHEN b.type = 4 THEN 'Loading'
                        WHEN b.type = 5 THEN 'Umum'
                        WHEN b.type = 6 THEN 'HO' ELSE '' END AS `type2`, '' AS shipment_no, '' AS items, b.keterangan AS notes,
                        c.general_vendor_name, d.account_name, e.stockpile_name, b.unit_price, b.qty,b.amount AS total_amount, 0 AS advance , f.uom_type, b.uom
                        FROM perdin_adv_settle a
                        LEFT JOIN perdin_adv_detail b  ON a.sa_id = b.sa_id
                        LEFT JOIN general_vendor c ON c.general_vendor_id = a. id_user
                        LEFT JOIN account d ON d.account_id = b.account_id
                        LEFT JOIN stockpile e ON e.stockpile_id = a.stockpile_id
                        LEFT JOIN uom f ON f.idUOM = b.uom
                        WHERE a.`sa_id` = {$pgId} ORDER BY a.`sa_id` ASC ";
						$pgd = $myDatabase->query($sqlGetPengajuanDetail, MYSQLI_STORE_RESULT);
						
						//$result = false;
	// //                    //Insert Invoice Detail
						if ($pgd->num_rows > 0) {
							while ($rowPGD = $pgd->fetch_object()) {
		//                        $mutasiDetailId = isset($rowPGD->mutasi_detail_id) ? $rowPGD->mutasi_detail_id : 'NULL';

		//                        $pgdPOID = isset($rowPGD->poId) ? $rowPGD->poId : 0;
		//                        $pgdShipmentID = isset($rowPGD->shipment_id) ? $rowPGD->shipment_id : 0;
		//                        $gvBankId = isset($rowPGD->gv_bank_id) ? $rowPGD->gv_bank_id : 0;

								$sqlID = "INSERT INTO `invoice_detail` (invoice_id,invoice_method_detail, type, account_id, general_vendor_id, shipment_id,
											stockpile_remark, qty, price, termin, amount, amount_converted, currency_id, exchange_rate, ppnID, ppn, ppn_converted, pphID, pph,
											pph_converted, tamount, tamount_converted, dp_amount, notes,gv_bank_id, entry_by, entry_date,idUOM) VALUES ("
									. "{$invId},2, {$rowPGD->type}, '{$rowPGD->account_id}', '{$rowPGD->id_user}',
										 '{$shipmentId}', '{$rowPGD->stockpile_id}','{$rowPGD->qty}','{$rowPGD->unit_price}', 100, '{$rowPGD->total_amount}', '{$rowPGD->total_amount}',1,
										  1,0,0,0,0,0,0, '{$rowPGD->total_amount}', '{$rowPGD->total_amount}', 0, '{$rowPGD->notes}',{$gvBankId},{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),'{$rowPGD->uom}')";

								$resultID = $myDatabase->query($sqlID, MYSQLI_STORE_RESULT);

								$invoiceId = $myDatabase->insert_id;
								
								
								$sqlUpdatePG = "UPDATE `perdin_adv_detail` SET  invoice_dp_id = {$invoiceId}
										WHERE adv_detail_id = {$rowPGD->adv_detail_id}";
						        $updatePG = $myDatabase->query($sqlUpdatePG, MYSQLI_STORE_RESULT);

									insertGeneralLedger($myDatabase, 'INVOICE DETAIL', $invoiceId);
									insertReportGL($myDatabase, 'INVOICE DETAIL', $invoiceId);
									echo $sqlID;
							}
						}

						$result = true;
						$sqlUpdatePG1 = "UPDATE `perdin_adv_settle` SET invoice_status = 1
										WHERE sa_id = {$pgId}";
						$updatePG1 = $myDatabase->query($sqlUpdatePG1, MYSQLI_STORE_RESULT);
										
				}else{
					$sql = "select DATE_FORMAT(STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), '%y%m') AS slip_prefix from dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
					$rowSlip = $resultSlip->fetch_object();
                    $invoiceYearMonth = $rowSlip->slip_prefix;

                    $checkInvoiceNo = 'INV/JPJ/' . $currentYearMonth;

                    $sql = "SELECT invoice_no FROM invoice WHERE company_id = {$_SESSION['companyId']} AND invoice_no LIKE '{$checkInvoiceNo}%' ORDER BY invoice_id DESC LIMIT 1";
                    $resultInvoice = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultInvoice->num_rows == 1) {
                        $rowInvoice = $resultInvoice->fetch_object();
                        $splitInvoiceNo = explode('/', $rowInvoice->invoice_no);
                        $lastExplode = count($splitInvoiceNo) - 1;
                        $nextInvoiceNo = ((float)$splitInvoiceNo[$lastExplode]) + 1;
                        $invoiceNo = $checkInvoiceNo . '/' . $nextInvoiceNo;
                    } else {
                        $invoiceNo = $checkInvoiceNo . '/1';
                    }
					
					 $sqlInsertPg = "INSERT INTO `invoice` (invoice_date,input_date, request_date, invoice_method,
                                        stockpileId, invoice_no, invoice_no2, remarks, shipmentId, company_id, entry_by, entry_date,sa_id) VALUES ("
                            . "STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y %H:%i:%s'),STR_TO_DATE('{$inputDate}', '%d/%m/%Y %H:%i:%s'),STR_TO_DATE('{$requestDate}', '%d/%m/%Y %H:%i:%s'),
                            {$invoiceMethod},{$stockpileId}, '{$invoiceNo}', '{$generatedPerdinNo}', '{$remarks}', '{$shipmentId}',"
                            . " {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$pgId})";
                        $resPG = $myDatabase->query($sqlInsertPg, MYSQLI_STORE_RESULT);

                        $invId = $myDatabase->insert_id;
						
						
					$sqlGetPengajuanDetail = "SELECT a.*,b.settle_id, b.settlementType,b.accountId,b.items,
                    CASE WHEN b.settlementType = 4 THEN 'Loading'
                    WHEN b.settlementType = 5 THEN 'Umum'
                    WHEN b.settlementType = 6 THEN 'HO' ELSE '' END AS `type2`,
                    c.general_vendor_name, d.account_name, e.stockpile_name, b.qty, b.price AS unit_price, b.amount AS total_amount, b.shipment_id, b.uom, b.notes, IFNULL((SELECT SUM(amount) FROM perdin_dp WHERE settle_id = b.settle_id),0) AS advance
                    FROM perdin_adv_settle a
                    LEFT JOIN perdin_settle_detail b  ON a.sa_id = b.sa_id
                    LEFT JOIN general_vendor c ON c.general_vendor_id = a. id_user
                    LEFT JOIN account d ON d.account_id = b.accountId
                    LEFT JOIN stockpile e ON e.stockpile_id = a.stockpile_id
					
					WHERE a.`sa_id` = {$pgId} ORDER BY a.`sa_id` ASC";
                    $pgd = $myDatabase->query($sqlGetPengajuanDetail, MYSQLI_STORE_RESULT);
					if ($pgd->num_rows > 0) {
                    while ($rowPGD = $pgd->fetch_object()) {

                        if($rowPGD->shipment_id == ''){
                            $shipmentId2 = 0;
                        }else{
                            $shipmentId2 = $rowPGD->shipment_id;
                        }
						
					$sqlID = "INSERT INTO `invoice_detail` (invoice_id,invoice_method_detail, type, account_id, general_vendor_id, shipment_id,
                                    stockpile_remark, qty, price, termin, amount, amount_converted, currency_id, exchange_rate, ppnID, ppn, ppn_converted, pphID, pph,
                                    pph_converted, tamount, tamount_converted, dp_amount, notes,gv_bank_id, entry_by, entry_date,idUOM) VALUES ("
                            . "{$invId},1, {$rowPGD->settlementType}, {$rowPGD->accountId}, {$rowPGD->id_user},
                                 {$shipmentId2}, {$rowPGD->stockpile_id},{$rowPGD->qty},{$rowPGD->unit_price}, 100, {$rowPGD->total_amount}, {$rowPGD->total_amount},1,
                                  1,0,0,0,0,0,0, '{$rowPGD->total_amount}', '{$rowPGD->total_amount}', 0, '{$rowPGD->notes}',{$gvBankId},{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$rowPGD->uom})";

                        $resultID = $myDatabase->query($sqlID, MYSQLI_STORE_RESULT);

                        $invoiceId = $myDatabase->insert_id;
						
						if($rowPGD->advance <> 0){
							$sqlidp= "SELECT a.invoice_dp_id, b.amount FROM perdin_adv_detail a
									LEFT JOIN perdin_dp b ON a.adv_detail_id = b.sa_id_adv
									WHERE b.settle_id = {$rowPGD->settle_id}";
							$pgdp = $myDatabase->query($sqlidp, MYSQLI_STORE_RESULT);
							if ($pgdp->num_rows > 0) {
							while ($rowPGDP = $pgdp->fetch_object()) {
						
						$sqlAdvance = "INSERT INTO `invoice_dp` (invoice_detail_id,invoice_detail_dp,amount_payment, status) VALUES ({$invoiceId},{$rowPGDP->invoice_dp_id}, {$rowPGDP->amount},0)";
						$resultAdvance = $myDatabase->query($sqlAdvance, MYSQLI_STORE_RESULT);
						}
							}
						}
                        
						echo $sqlID;
                            insertGeneralLedger($myDatabase, 'INVOICE DETAIL', $invoiceId);
							insertReportGL($myDatabase, 'INVOICE DETAIL', $invoiceId);
                    }
					}

                    $result = true;
					$sqlUpdatePG = "UPDATE `perdin_adv_settle` SET invoice_status = 1
                                    WHERE sa_id = {$pgId}";
                    $updatePG = $myDatabase->query($sqlUpdatePG, MYSQLI_STORE_RESULT);
					
					
				}
				
				//UPDATE LOGBOOK PKS
                    $sqlLog = "UPDATE logbook_new set inv_general_id = {$invId}, status1 = 1 where perdin_id = {$pgId}";
                    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);

                   $return_value = '|OK|Pengajuan has successfully inserted/updated.|' .$sqlLog;

                }else{$return_value = '|FAIL|Insert/update invoice failed.||';}

            } else {
                $return_value = '|FAIL|Please insert correct amount.' . $addMessage . '||';
            }
        } else {
            $return_value = '|FAIL|Please fill the required fields ||';
        }
        // </editor-fold>
    }
    echo $return_value;
// </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'perdin_adv_detail') {
    // <editor-fold defaultstate="collapsed" desc="invoice_detail">
echo 'a';
    $return_value = '';
    //$boolShipment1 = false;
    //$boolPO = false;
    //$boolVendor = false;
	$updateProperty = '';
	
    //$grandTotal = 0;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	$saId = $myDatabase->real_escape_string($_POST['sa_id']);
	$adv_detail_id = $myDatabase->real_escape_string($_POST['adv_detail_id']);
	$notes = $myDatabase->real_escape_string($_POST['notes']);
    
   
	
	if ($saId != '' && $adv_detail_id != '' && $notes != '') {
		
		
		
		
				
					$sql = "UPDATE `perdin_adv_detail` SET "
                        . "keterangan = '{$notes}' "
                        . "WHERE adv_detail_id = {$adv_detail_id}";
				
				$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				if($result !== false) {
               
                $return_value = '|OK|Data has successfully updated.|'. $saId .'|';
            } else {
                $return_value = '|FAIL|update data failed.|'. $sql .'|';
            }
			

            } else {
                $return_value = '|FAIL|Please fill the required fields.|'. $sql .'|';
            }
	
    
    echo $return_value;
		
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'perdin_settle_detail') {
    // <editor-fold defaultstate="collapsed" desc="invoice_detail">
echo 'a';
    $return_value = '';
    $boolShipment1 = false;
    $boolPO = false;
    $boolVendor = false;
	$updateProperty = '';
	
    //$grandTotal = 0;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	$saId = $myDatabase->real_escape_string($_POST['sa_id']);
	$settleId = $myDatabase->real_escape_string($_POST['settleId']);
	$id_user = $myDatabase->real_escape_string($_POST['id_user']);
    $uom = $myDatabase->real_escape_string($_POST['uom']);
    $qty = $myDatabase->real_escape_string($_POST['qty']);
    $price = $myDatabase->real_escape_string($_POST['price']);
    $amount = $myDatabase->real_escape_string($_POST['amount']);
    $notes = $myDatabase->real_escape_string($_POST['notes']);
	$settlementType = $myDatabase->real_escape_string($_POST['settlementType']);
	$accountId = $myDatabase->real_escape_string($_POST['accountId']);
	$item_id = $myDatabase->real_escape_string($_POST['item_id']);
	$userTo = $myDatabase->real_escape_string($_POST['userTo']);
	$hrd = $myDatabase->real_escape_string($_POST['hrd']);
	$shipment_id = $myDatabase->real_escape_string($_POST['shipment_id']);
	$tanggal = $myDatabase->real_escape_string($_POST['tanggal']);
	$approveInvoice = $myDatabase->real_escape_string($_POST['approveInvoice']);
    $slipNos = "";
    $slipNos2 = "";
   
	$entryBy = $_SESSION['userId'];
	$date2 = new DateTime();
	$currentDate2 = $date2->format('Y-m-d H:i:s');
   
	
	if ($settlementType != '' && $tanggal != '' && $accountId != '' && $item_id != '' && $uom != '' && $qty != '' && $price != '' && $amount >= 0 && $notes != '') {
		
		if ($userTo == ''){
			$userTo = 0;
		}
		if ($saId == ''){
			$saId = 'NULL';
		}
		if ($shipment_id == ''){
			$shipment_id = 'NULL';
            $updateProperty = "shipment_id = {$shipment_id}, " ;
		}else{
			$updateProperty = "shipment_id = '{$shipment_id}', " ;	
		}
		
		$sql2 = "SELECT * FROM perdin_item WHERE item_id = {$item_id}";
        $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
        if ($result2 !== false && $result2->num_rows == 1) {
            $row1 = $result2->fetch_object();
			
			$items = $row1->item;
			$category = $row1->category;
			
		/*	if($category == 0 && $saId != '' && $approveInvoice != 1){
			$n = 'NULL';
			$sql = "UPDATE perdin_adv_settle SET approval_status = 0, approval_by = {$n}, approval_date = {$n} WHERE sa_id = {$saId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			}*/
			
		}
		
		
		if($settleId == ''){
		 $sql = "INSERT INTO `perdin_settle_detail` (sa_id,settlementType, accountId,item_id, items, uom, qty, price, amount, amount_user, notes, id_user, user_to, entry_by, entry_date, shipment_id,tanggal) VALUES ("
		. "{$saId}, {$settlementType}, {$accountId}, '{$item_id}', '{$items}', {$uom}, '{$qty}', '{$price}', '{$amount}', '{$amount}', '{$notes}', '{$id_user}', '{$userTo}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$shipment_id},STR_TO_DATE('$tanggal', '%d/%m/%Y'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false) {
                    $sa_id = $myDatabase->insert_id;

                    $return_value = '|OK|Data has successfully inserted.||';
					
					if (isset($_POST['checkedSlips2'])) {
                        $checks2 = $_POST['checkedSlips2'];
						$checks3 = $_POST['checkedSlips3'];
                        if (isset($_POST['checkedSlips'])) {
                            $checks = $_POST['checkedSlips'];
                        } else {
                            $checks = '';
                        }
						for ($i = 0; $i < sizeof($checks2); $i++) {
                            if ($checks[$i] != '') {
								
								if($checks2[$i] > $checks3[$i]){
									$amountTaken = $checks3[$i];
								}else{
									$amountTaken = $checks2[$i];
								}
								
								
                                if ($slipNos2 == '') {
                                    $slipNos2 .= '(' . $sa_id . ',' . $checks[$i] . ',' . $amountTaken . ',' . "'" . $entryBy . "'" . ',' . "'" . $currentDate2 . "'" . ')';
                                } else {
                                    $slipNos2 .= ',' . '(' . $sa_id . ',' . $checks[$i] . ',' . $amountTaken . ',' . "'" . $entryBy . "'" . ',' . "'" . $currentDate2 . "'". ')';
                                }
                            }
                        }
                    }
					echo $slipNos2;
                    $sql = "INSERT INTO perdin_dp (settle_id, sa_id_adv ,amount,entry_by,entry_date) VALUES {$slipNos2}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($result === false) {
                        echo 'salah';
                    }
					
				}else {
                    $return_value = '|FAIL|Insert Data failed.||';
                    echo $sql;
                }
				
			}else{
				if($hrd == 1 ){
				$sql = "UPDATE `perdin_settle_detail` SET "
                        . "settlementType = '{$settlementType}', "
                        . "accountId = '{$accountId}', "
                        . "items = '{$items}', "
						. "item_id = '{$item_id}', "
						. "qty = '{$qty}', "
						. "price = '{$price}', "
						. "amount = '{$amount}', "
						//. "amount_user = '{$amount}', "
						. "uom = '{$uom}', "
						. $updateProperty
						//. "shipment_id = '{$shipment_id}', "
						. "user_to = '{$userTo}', "
						. "tanggal = STR_TO_DATE('$tanggal', '%d/%m/%Y'), "
						. "notes = '{$notes}' "
                        . "WHERE settle_id = {$settleId}";
				}else{
					$sql = "UPDATE `perdin_settle_detail` SET "
                        . "settlementType = '{$settlementType}', "
                        . "accountId = '{$accountId}', "
                        . "items = '{$items}', "
						. "item_id = '{$item_id}', "
						. "qty = '{$qty}', "
						. "price = '{$price}', "
						. "amount = '{$amount}', "
						. "amount_user = '{$amount}', "
						. "uom = '{$uom}', "
						. "user_to = '{$userTo}', "
						. "tanggal = STR_TO_DATE('$tanggal', '%d/%m/%Y'), "
						//. "shipment_id = '{$shipment_id}', "
						. $updateProperty
						. "notes = '{$notes}' "
                        . "WHERE settle_id = {$settleId}";
				}
				$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				if($result !== false) {
               
                $return_value = '|OK|Data has successfully updated.|'. $settleId .'|';
            } else {
                $return_value = '|FAIL|update data failed.|'. $sql .'|';
            }
			}

            } else {
                $return_value = '|FAIL|Please fill the required fields.|'. $sql .'|';
            }
	
    
    echo $return_value;
		
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'approval_perdin') {
    // <editor-fold defaultstate="collapsed" desc="invoice_detail">
echo 'a';
    $return_value = '';
    $boolShipment1 = false;
    $boolPO = false;
    $boolVendor = false;
	
    //$grandTotal = 0;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	$sa_id = $myDatabase->real_escape_string($_POST['sa_id']);
	$rejectRemarks = $myDatabase->real_escape_string($_POST['rejectRemarks']);
	$grandTotal = $myDatabase->real_escape_string($_POST['grandTotal']);
	$date_from = $myDatabase->real_escape_string($_POST['date_from']);
    $date_to = $myDatabase->real_escape_string($_POST['date_to']);
	//$level_id = $myDatabase->real_escape_string($_POST['level_id']);
	$id_user = $myDatabase->real_escape_string($_POST['id_user']);
    /*$uom = $myDatabase->real_escape_string($_POST['uom']);
    $qty = $myDatabase->real_escape_string($_POST['qty']);
    $price = $myDatabase->real_escape_string($_POST['price']);
    $amount = $myDatabase->real_escape_string($_POST['amount']);
    $notes = $myDatabase->real_escape_string($_POST['notes']);
	$settlementType = $myDatabase->real_escape_string($_POST['settlementType']);
	$accountId = $myDatabase->real_escape_string($_POST['accountId']);
	$items = $myDatabase->real_escape_string($_POST['items']);
	$userTo = $myDatabase->real_escape_string($_POST['userTo']);*/
    $slipNos = "";
    $slipNos2 = "";
   
	$entryBy = $_SESSION['userId'];
	$date2 = new DateTime();
	$currentDate2 = $date2->format('Y-m-d H:i:s');
	
	
	if ($_POST['_method'] == 'REJECT') {
		
		if($sa_id != '' && $rejectRemarks != ''){
        // <editor-fold defaultstate="collapsed" desc="DELETE PENGAJUAN GENERAL">
        //$pgId = $myDatabase->real_escape_string($_POST['pgId']);

        //if ($pgId != '') {
			$docs = 'NULL';
		$sql = "UPDATE perdin_adv_settle a LEFT JOIN perdin_surat b ON a.`sp_id` = b.`sa_id`  
        SET a.print_status = 0, a.approval_status = 2, a.reject_remarks = '{$rejectRemarks}', a.docs = {$docs}, b.`status` = 0, a.upload_status = 0, a.sync_by = {$_SESSION['userId']}, a.sync_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') WHERE a.sa_id =  {$sa_id}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Data has successfully rejected.|';
            } else {
                $return_value = '|FAIL|Reject data failed.|';
            }
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
        echo $return_value;
        // </editor-fold>
    } else if ($_POST['_method'] == 'VERIFY') {
		
		if($sa_id != ''){
        // <editor-fold defaultstate="collapsed" desc="DELETE PENGAJUAN GENERAL">
        //$pgId = $myDatabase->real_escape_string($_POST['pgId']);
        //if ($pgId != '') {
          /*  $sql = "UPDATE perdin_settle_detail a LEFT JOIN perdin_item b ON a.`item_id` = b.`item_id` 
            SET a.`approval_status` = 3 WHERE a.sa_id = {$sa_id} AND b.`category` = 0";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/

			$sql = "UPDATE perdin_adv_settle SET approval_status = 3, total_amount = '{$grandTotal}', date_from = STR_TO_DATE('$date_from', '%d/%m/%Y'),date_to = STR_TO_DATE('$date_to', '%d/%m/%Y'), verify_by = '{$_SESSION['userId']}', verify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') WHERE sa_id =  {$sa_id}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Data has successfully verify.|';
            } else {
                $return_value = '|FAIL|Verify data failed.|';
            }
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
        echo $return_value;
        // </editor-fold>
    }else{
		
		if($sa_id != ''){
        // <editor-fold defaultstate="collapsed" desc="DELETE PENGAJUAN GENERAL">
        //$pgId = $myDatabase->real_escape_string($_POST['pgId']);
        //if ($pgId != '') { {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s')

            $sql = "UPDATE perdin_settle_detail a LEFT JOIN perdin_item b ON a.`item_id` = b.`item_id` 
            SET a.`approval_status` = 1 WHERE a.sa_id = {$sa_id} AND b.`category` = 0";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            $sql = "UPDATE perdin_adv_settle SET approval_status = 1, total_amount = '{$grandTotal}', date_from = STR_TO_DATE('$date_from', '%d/%m/%Y'),date_to = STR_TO_DATE('$date_to', '%d/%m/%Y'), approval_by = '{$_SESSION['userId']}', approval_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') WHERE sa_id =  {$sa_id}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			
			//$sql = "UPDATE general_vendor SET level_id = '{$level_id}' WHERE general_vendor_id =  {$id_user}";
           // $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Data has successfully Appproved.|';
            } else {
                $return_value = '|FAIL|Approve Data failed.|';
            }
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
        echo $return_value;
		
	}
		
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'stockpile_block_data') {
    // <editor-fold defaultstate="collapsed" desc="stockpile_freight_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileBlockId = $myDatabase->real_escape_string($_POST['stockpileBlockId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $spBlock = $myDatabase->real_escape_string($_POST['spBlock']);
    $ggl = $myDatabase->real_escape_string($_POST['ggl']);
    $rsb = $myDatabase->real_escape_string($_POST['rsb']);
    // </editor-fold>

    if ($stockpileBlockId == '') {
        $boolNew = true;
    }


    if ($stockpileId != '' && $spBlock != '') {

            if ($boolNew) {
                $sql = "INSERT INTO `MST_SP_Block` (stockpile_id, sp_block, GGL, RSB, entry_by, entry_date) VALUES ("
                    . "{$stockpileId},'{$spBlock}', {$ggl}, {$rsb},"
                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `MST_SP_Block` SET "
                    . "sp_block = '{$spBlock}', "
                    . "ggl = {$ggl}, "
                    . "rsb = {$rsb} "
                    . "WHERE sp_block_id = {$stockpileBlockId}";

            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Stockpile Block Data has successfully inserted/updated.|';
            } else {
                $return_value = '|FAIL|Insert/update Stockple Block failed.|';
                echo $sql;
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }
    echo $return_value;
    // </editor-fold>
}else if (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_pengajuan_payment') {
    // <editor-fold defaultstate="collapsed" desc="delete_pengajuan_payment">

    $return_value = '';
    $idPP = $myDatabase->real_escape_string($_POST['idPP']);

    if ($idPP != '') {
        $sql2 = "SELECT * FROM pengajuan_payment where idPP = {$idPP}";
        $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
        if ($result2 !== false && $result2->num_rows == 1) {
            $row1 = $result2->fetch_object();
            //KONTRAK
            if ($row1->payment_for == 0) {
                $updateProperty = " ppayment_id ";
                //CURAH
            } else if ($row1->payment_for == 1) {
                $updateProperty = " ppayment_id ";
            }//FREIGHT
            else if ($row1->payment_for == 2) {
                $updateProperty = " fc_ppayment_id ";
            } //HANDLING
            else if ($row1->payment_for == 9) {
                $updateProperty = " hc_ppayment_id ";
            } //UNLOADING
            else if ($row1->payment_for == 3) {
                $updateProperty = " uc_ppayment_id ";
            }


            $updtTrans = "UPDATE `TRANSACTION` SET {$updateProperty} = NULL WHERE  {$updateProperty} IN ({$idPP})";
            $resultTrans = $myDatabase->query($updtTrans, MYSQLI_STORE_RESULT);

            $sqlLog = "UPDATE logbook_new set status1 = 2    where ppayment_id = {$idPP}";
            $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);

            //DELETE PENGAJUAN_PAYMENT_SUPP IF fREIGHT
            if ($row1->payment_for == 2) {
                $sqlSupplier = "DELETE FROM pengajuan_payment_supplier WHERE idPP = {$idPP}";
                $resultSupplier = $myDatabase->query($sqlSupplier, MYSQLI_STORE_RESULT);
            }
        }

        //DELETE PENGAJUAN PAYMENT
        $sql = "DELETE FROM `pengajuan_payment` WHERE idPP = {$idPP}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Data Request has successfully deleted.|';

            //LOG HAPUS Pengajuan-OA
            $tempLog = '[DELETE][Pengajuan-OA]' . '[' . $idPP . ']';
            $log = "INSERT INTO log_pengajuan_OA(entry_by, entry_date, log) value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
            $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
            if ($result_log !== false) {
                $log_id = $myDatabase->insert_id;
            }

        } else {
            $return_value = '|FAIL|Delete data Request failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    echo $return_value;
    // </editor-fold defaultstate="collapsed" desc="delete_pengajuan_payment">
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'pengajuan_payment1') {
        $return_value = '';
        $boolContinue = false;
        $boolBank = false;
        $boolUpdateTransaction = false;
        $boolContinue2 = true;
        $boolContinue3 = true;
        $tempStamp = '';
        $periodPaymentFrom='';
        $periodPaymentTo='';
        $updateP = '';
        $swift = 'NULL';
        $uploadDocument = true;
        $fromTable = '';
        $fromTable2 = '';
        $dppShrinkPrice = 0;
        $slipNos = "";
        $tempLog = '';
        $tempFile = '';
        $statusDp = 0; // 1 = checked
        $wherePropertyDp = '';

        $idPP = $myDatabase->real_escape_string($_POST['idPP']);
        $paymentMethod = $myDatabase->real_escape_string($_POST['paymentMethod']);
        $paymentType = $myDatabase->real_escape_string($_POST['paymentType']);
        $stockpileLocation = $myDatabase->real_escape_string($_POST['stockpileLocationId']);
        $paymentFor = $myDatabase->real_escape_string($_POST['paymentFor']);
    
        $total_amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalAllPrice']));
        $total_ppn = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalPPn']));
        $total_pph = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalPPh']));
        $ppnStatus = $myDatabase->real_escape_string($_POST['ppnStatus']);
        $pphStatus = $myDatabase->real_escape_string($_POST['pphStatus']);
        $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
        $total_qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalQty']));
        $total_dpp = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalDpp'])); 
        $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));

        //Curah
        $paymentFromCur = $myDatabase->real_escape_string($_POST['paymentFromCur']);
        $paymentToCur = $myDatabase->real_escape_string($_POST['paymentToCur']);
        $stockpileIdCurah = $myDatabase->real_escape_string($_POST['stockpileIdCurah']);
        $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
        $curahBankId =  $myDatabase->real_escape_string($_POST['curahBankId']);  
        $totalDppDpCur =  $myDatabase->real_escape_string($_POST['totalDppDpCur']);  

        //Curah DP
        $stockpileIdCurahDp = $myDatabase->real_escape_string($_POST['stockpileIdCurahDp']);
        $vendorIdCurahDp = $myDatabase->real_escape_string($_POST['vendorIdCurahDp']);
        $contractCurahDp = $myDatabase->real_escape_string($_POST['contractCurahDp']);
        $curahBankDp = $myDatabase->real_escape_string($_POST['curahBankDp']);
        $cDp_ppnId =  $myDatabase->real_escape_string($_POST['taxidPpnC']); 
        $cDp_ppnVal =  $myDatabase->real_escape_string($_POST['ppnC']); 
        $cDp_ppnStatus =  $myDatabase->real_escape_string($_POST['ppnStatusC']); 
        $cDp_pphId =  $myDatabase->real_escape_string($_POST['taxidPphC']); 
        $cDp_pphVal =  $myDatabase->real_escape_string($_POST['pphC']); 
        $cDp_pphStatus =  $myDatabase->real_escape_string($_POST['pphStatusC']); 
        $qtyCurahDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyCurah']));
        $priceCurahDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceCurah']));
        $terminCurahDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminCurah']));

        //Freight Payment
        $freightId_1 = $myDatabase->real_escape_string($_POST['freightId_1']);
        $paymentFromFP = $myDatabase->real_escape_string($_POST['paymentFromFP']);
        $paymentToFP = $myDatabase->real_escape_string($_POST['paymentToFP']);
        $freightBankId_1 = $myDatabase->real_escape_string($_POST['freightBankId_1']);
        $contractIds = $myDatabase->real_escape_string($_POST['contractIds']); 
        $stockpileIdFreight =  $myDatabase->real_escape_string($_POST['stockpileIdFreight']); 
        $grandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal']));
        $totalShrink = $myDatabase->real_escape_string($_POST['totaldppShrink']);	
        $totalShrink2 = $myDatabase->real_escape_string($_POST['totaldppShrink2']);	


        //Freight Settle
        $DppGrandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['DppGrandTotal']));
        $totalDownPayment = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalDownPayment']));
        $totalDppDpFC = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalDppDpFC']));

        //Freight DP
        $stockpileIdFcDp = $myDatabase->real_escape_string($_POST['stockpileIdFcDp']);
        $freightIdFcDp = $myDatabase->real_escape_string($_POST['freightIdFcDp']);
        $freightBankDp = $myDatabase->real_escape_string($_POST['freightBankDp']);
        $supplierIdDp = $myDatabase->real_escape_string($_POST['supplierIdDp']);
        $contractNoDp = $myDatabase->real_escape_string($_POST['contractNoDp']); 
        $fDp_ppnId =  $myDatabase->real_escape_string($_POST['taxidPpn']); 
        $fDp_ppnVal =  $myDatabase->real_escape_string($_POST['ppn']); 
        $fDp_ppnStatus =  $myDatabase->real_escape_string($_POST['ppnStatus']); 
        $fDp_pphId =  $myDatabase->real_escape_string($_POST['taxidPph']); 
        $fDp_pphVal =  $myDatabase->real_escape_string($_POST['pph']); 
        $fDp_pphStatus =  $myDatabase->real_escape_string($_POST['pphStatus']); 
        $qtyFreightDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyFreight']));
        $priceFreightDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceFreight']));
        $terminFreightDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminFreight']));
        $originalAmountDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['originalAmountDp']));

        //Handling Payment
        $stockpileIdHandling = $myDatabase->real_escape_string($_POST['stockpileIdHandling']); 
        $vendorHandlingId =  $myDatabase->real_escape_string($_POST['vendorHandlingId']);
        $paymentFromHP =  $myDatabase->real_escape_string($_POST['paymentFromHP']);
        $paymentToHP =  $myDatabase->real_escape_string($_POST['paymentToHP']);
        $vendorHandlingBankId =  $myDatabase->real_escape_string($_POST['vendorHandlingBankId']);
        $totalDppDpHC = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalDppDpHC']));


        //Handling DP
        $stockpileVhDp = $myDatabase->real_escape_string($_POST['stockpileVhDp']);
        $vendorHandlingDp = $myDatabase->real_escape_string($_POST['vendorHandlingDp']);
        $vendorHandlingBankDp = $myDatabase->real_escape_string($_POST['vendorHandlingBankDp']);
        $contractHandlingDp = $myDatabase->real_escape_string($_POST['contractHandlingDp']); 
        $hDp_ppnId =  $myDatabase->real_escape_string($_POST['taxidPpnH']); 
        $hDp_ppnVal =  $myDatabase->real_escape_string($_POST['ppnH']); 
        $hDp_ppnStatus =  $myDatabase->real_escape_string($_POST['ppnStatusHC']); 
        $hDp_pphId =  $myDatabase->real_escape_string($_POST['taxidPphH']); 
        $hDp_pphVal =  $myDatabase->real_escape_string($_POST['pphH']); 
        $hDp_pphStatus =  $myDatabase->real_escape_string($_POST['pphStatusHC']); 
        $qtyHandlingDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyHandlingDP']));
        $priceHandlingDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceHandlingDP']));
        $terminHandlingDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminHandlingDP']));

        //Unloading Payment
        $paymentFromUP = $myDatabase->real_escape_string($_POST['paymentFromUP']); 
        $paymentToUP =  $myDatabase->real_escape_string($_POST['paymentToUP']);
        $stockpileOB =  $myDatabase->real_escape_string($_POST['stockpileOB']);
        $laborId =  $myDatabase->real_escape_string($_POST['laborId']);
        $laborBankId =  $myDatabase->real_escape_string($_POST['laborBankId']);
        $totalDppDpUC = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalDppDpUC']));


        //Unloading DP
        $stockpileLaborDp = $myDatabase->real_escape_string($_POST['stockpileLaborDp']);
        $laborDp = $myDatabase->real_escape_string($_POST['laborDp']);
        $laborBankDp = $myDatabase->real_escape_string($_POST['laborBankDp']);
        $lDp_ppnId =  $myDatabase->real_escape_string($_POST['taxidPpnOB']); 
        $lDp_ppnVal =  $myDatabase->real_escape_string($_POST['ppnOB']); 
        $lDp_ppnStatus =  $myDatabase->real_escape_string($_POST['ppnStatusOb']); 
        $lDp_pphId =  $myDatabase->real_escape_string($_POST['taxidPphOB']); 
        $lDp_pphVal =  $myDatabase->real_escape_string($_POST['pphOB']); 
        $lDp_pphStatus =  $myDatabase->real_escape_string($_POST['pphStatusOb']); 
        $qtyLaborDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyLabor']));
        $priceLaborDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceLabor']));
        $terminLaborDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminLabor']));

        $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
        $bank = $myDatabase->real_escape_string($_POST['bank']);
        $rek = $myDatabase->real_escape_string($_POST['rek']);
        $swift = $myDatabase->real_escape_string($_POST['swift']);
    
        $taxInvoice = $myDatabase->real_escape_string($_POST['taxInvoice']);
        $invoiceNo = $myDatabase->real_escape_string($_POST['invoiceNo']);
        $invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
        $remarks = $myDatabase->real_escape_string($_POST['remarks']);
        $urgent_payment_type = $myDatabase->real_escape_string($_POST['tipeBayar']);
        if($urgent_payment_type == 1){
            $urgent_payment_date = $myDatabase->real_escape_string($_POST['requestPaymentDate1']);
        }else{
            $urgent_payment_date = $myDatabase->real_escape_string($_POST['requestPaymentDate']);
        }
        $settle = $myDatabase->real_escape_string($_POST['settle']);
        if($paymentMethod == 3){
            if($settle == ''){
                $settle = 0;
            }else{
                $settle = $myDatabase->real_escape_string($_POST['settle']);
            }

        }
        $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);

        //FILE
        if (isset($_FILES['file']) && $_FILES['file']['size'] > 0) {
            $allowed = array('png', 'jpg', 'pdf', 'doc', 'docs', 'xls', 'xlsx');
            $fileName = $_FILES['file']['name'];
            $x = explode('.', $fileName);
            $ekstensi = strtolower(end($x));
            $ukuran = $_FILES['file']['size'];
            $file_tmp = $_FILES['file']['tmp_name'];
    
            if (in_array($ekstensi, $allowed) === true) {
    
                $attachmentPath = "./import/pengajuan-notim/.$currentYearMonth.";
                    if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
                        $temp = mkdir($attachmentPath, 0755, TRUE);
                    else
                        $temp = TRUE;
    
                    if ($temp === TRUE) {
                        $attachmentPath .= "/" . date("ymdHis") . "-" . basename($fileName);
                            if (!move_uploaded_file($file_tmp, $attachmentPath)) {
                                echo '|FAIL|Error while uploading file.|';
                                die();
                            }
                    } else {
                        echo '|FAIL|Error while creating directory.|';
                        die();
                    }
    
                
            } else {
                echo '|FAIL|EKSTENSI FILE YANG DI UPLOAD TIDAK DI PERBOLEHKAN.|';
                die();
            }
        } else {
            $attachmentPath = 'NULL';
            $uploadDocument = false;
        }

        //CURAH
        if($paymentFor == 1) {  
            $vendorHandlingId = 0;
            $freightId = 0;
            $laborId = 0;
            $totalShrink2 = 0;
            $totalShrink = 0;
			

            if($paymentMethod != 2 && $stockpileIdCurah != '' && $vendorId != '') 
            {
                $periodPaymentFrom=$paymentFromCur;
                $periodPaymentTo=$paymentToCur;
                $stockpileId = $stockpileIdCurah;
                $vendorBank = $curahBankId;
                $total_amount = $total_dpp;
                if($paymentMethod == 1){
                    $settle = 0;
                }
                $termin = 0;
                if($total_ppn > 0) {
                    if($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
                if($total_ppn == 0){
                    $ppnStatus = 0;
                }else{
                    $ppnStatus = 1;
                }
            
                if($total_pph == 0){
                    $pphStatus = 0;
                }else{
                    $pphStatus = 1;
                }
            } //DP
            else if($paymentMethod == 2 && $stockpileIdCurahDp != '' && $vendorIdCurahDp != '' && $contractCurahDp != '' && $amount != 0) 
            {
                $boolContinue = true;
                $stockpileId = $stockpileIdCurahDp;
                $vendorBank = $curahBankDp;
                $vendorId = $vendorIdCurahDp;
                $contractIds = $contractCurahDp;
                $total_qty = $qtyCurahDp;
                $totalPrice = $priceCurahDp;
                $termin = $terminCurahDp;
                $total_dpp = $originalAmountDp;
                $total_amount = $originalAmountDp;
                $ppnStatus = $cDp_ppnStatus;
                $pphStatus = $cDp_pphStatus;
                $settle = 0;

                if($ppnStatus == 0){
                    $total_ppn = 0;
                }else{
                    $total_ppn = $total_dpp * ($cDp_ppnVal/100);
                }
    
                if($pphStatus == 0){
                    $total_pph = 0;
                }else{
                    $total_pph = $total_dpp * ($cDp_pphVal/100);  
                }
            }
          }else if($paymentFor == 2) { //FREIGHT
            $vendorHandlingId = 0;
            $laborId = 0;
            //DP
            if($paymentMethod == 2 && $stockpileIdFcDp != '' && $freightIdFcDp != '' && $amount != 0 && $supplierIdDp != '' && $contractNoDp != '' && $freightBankDp != '') {
              
                $boolContinue = true;
                $vendorBank = $freightBankDp;
                $freightId = $freightIdFcDp;
                $total_qty = $qtyFreightDp;
                $totalPrice = $priceFreightDp;
                $total_dpp = $originalAmountDp;
                $totalShrink2 = 0;
                $totalShrink = 0;
                $termin = $terminFreightDp;
                $total_amount = $originalAmountDp;
                $ppnStatus = $fDp_ppnStatus;
                $pphStatus = $fDp_pphStatus;
                $settle = 0;
                $vendorId = $supplierIdDp;
                $contractIds = $contractNoDp;
                $stockpileId = $stockpileIdFcDp;
    
                if($ppnStatus == 0){
                    $total_ppn = 0;
                }else{
                    $total_ppn = $total_dpp * ($fDp_ppnVal/100);
                }
    
                if($pphStatus == 0){
                    $total_pph = 0;
                }else{
                    $total_pph = $total_dpp * ($fDp_pphVal/100);  
                }
           //     echo 'NILAI '.$pphStatus.' || '.$pph. '||' .$ppn. '|| ' .$ppnStatus;
            }else if($paymentMethod != 2 && $stockpileIdFreight != '' && $freightId_1 != '' && $grandTotal >= 0) {
                $periodPaymentFrom = $paymentFromFP;
                $periodPaymentTo = $paymentToFP;
                $vendorId = 0;
                if($total_ppn > 0) {
                    if($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
                $termin = 0;
                $vendorBank = $freightBankId_1;
                $freightId = $freightId_1;
                $vendorFreightId = $vendorFreightId_1;
                if($paymentMethod == 1){
                    $settle = 0;
                }
              
                $stockpileId = $stockpileIdFreight;
                $amount = $grandTotal;
              
                if($total_ppn == 0){
                    $ppnStatus = 0;
                }else{
                    $ppnStatus = 1;
                }
    
                if($total_pph == 0){
                    $pphStatus = 0;
                }else{
                    $pphStatus = 1;
                }
            }
        }else if($paymentFor == 9) { //Handling
            $freightId = 0;
            $vendorId = 0;
            $laborId = 0;
            $totalShrink2 = 0;
            $totalShrink = 0;
            
            // PAYMENT && SETTLE
            if($paymentMethod != 2 && $stockpileIdHandling != '' && $vendorHandlingId != '' && $grandTotal >= 0 ) {
                $periodPaymentFrom = $paymentFromHP;
                $periodPaymentTo = $paymentToHP;
                $stockpileId = $stockpileIdHandling;
                $termin = 0;

                if($total_ppn > 0) {
                    if($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
                $vendorBank = $vendorHandlingBankId;
                $total_amount = $total_dpp;
                if($paymentMethod == 1){
                    $settle = 0;
                }
                
                if($total_ppn == 0){
                    $ppnStatus = 0;
                }else{
                    $ppnStatus = 1;
                }
    
                if($total_pph == 0){
                    $pphStatus = 0;
                }else{
                    $pphStatus = 1;
                }
            } //HANDLING DP
            else if($paymentMethod == 2 && $stockpileVhDp != '' && $vendorHandlingDp != '' && $vendorHandlingBankDp != '' && $amount != 0) {
              
                $boolContinue = true;
                $stockpileId = $stockpileVhDp;
                $vendorHandlingId = $vendorHandlingDp;
                $vendorBank = $vendorHandlingBankDp;
                $total_qty = $qtyHandlingDp;
                $totalPrice = $priceHandlingDp;
                $total_dpp = $originalAmountDp;
                $termin = $terminHandlingDp;
                $total_amount = $originalAmountDp;
                $ppnStatus = $hDp_ppnStatus;
                $pphStatus = $hDp_pphStatus;
                $settle = 0;
                $contractIds = $contractHandlingDp;

                if($ppnStatus == 0){
                    $total_ppn = 0;
                }else{
                    $total_ppn = $total_amount * ($hDp_ppnVal/100);
                }
    
                if($pphStatus == 0){
                    $total_pph = 0;
                }else{
                    $total_pph = $total_amount * ($hDp_pphVal/100);  
                }
            }
        }else if($paymentFor == 3) {// UNLOADING 
            $freightId = 0;
            $vendorId = 0;
            $vendorHandlingId = 0;
            $totalShrink2 = 0;
            $totalShrink = 0;

            if(($paymentMethod == 1 || $paymentMethod == 3 )&& $stockpileOB != '' && $laborId != '' && $grandTotal >= 0 )  {
                $periodPaymentFrom=$paymentFromUP;
                $periodPaymentTo=$paymentToUP;
                $stockpileId = $stockpileOB;
                $totalPrice = $total_dpp;
                $total_amount = $total_dpp;
                $termin = 0;
                if($paymentMethod == 1){
                    $settle = 0;
                }
               
                $vendorBank = $laborBankId;
                $termin = 0;
               
                
                if($total_ppn > 0) {
                    if($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
             
                if($total_ppn == 0){
                    $ppnStatus = 0;
                }else{
                    $ppnStatus = 1;
                }
    
                if($total_pph == 0){
                    $pphStatus = 0;
                }else{
                    $pphStatus = 1;
                }
            }//DP
            else if($paymentMethod == 2 && $stockpileLaborDp != '' && $laborDp != '' && $amount != 0){
                $boolContinue = true;
               $stockpileId = $stockpileLaborDp;
               $vendorBank = $laborBankDp;
               $laborId = $laborDp;
               $total_qty = $qtyLaborDp;
               $totalPrice = $priceLaborDp;
               $total_dpp = $originalAmountDp;
               $termin = $terminLaborDp;
               $total_amount = $originalAmountDp;
               $ppnStatus = $lDp_ppnStatus;
                $pphStatus = $lDp_pphStatus;
                $settle = 0;
                if($ppnStatus == 0){
                    $total_ppn = 0;
                }else{
                    $total_ppn = $total_amount * ($lDp_ppnVal/100);
                }
    
                if($pphStatus == 0){
                    $total_pph = 0;
                }else{
                    $total_pph = $total_amount * ($lDp_pphVal/100);  
                }
            }
        }

        if ($_POST['_method'] == 'INSERT') {
            if($idPP == '' && $uploadDocument){
                if($paymentType != '' && $boolContinue && ($attachmentPath == 'NULL' || $attachmentPath != '')) {
                    //Transaction Id
                    if (isset($_POST['checkedSlips'])) {                                            
                        $checks = $_POST['checkedSlips'];
                        for ($i = 0; $i < sizeof($checks); $i++) {
                            if($slipNos == '') {
                                $slipNos .= $checks[$i];
                            } else {
                                $slipNos .= ','. $checks[$i];            
                            }
                        }
                    }

                    //Curah
                    if($paymentFor == 1) {
                        $paymentIds = '';
                        if (isset($_POST['checkedSlipsDP'])) {
                            $checksDP = $_POST['checkedSlipsDP'];
                            for ($i = 0; $i < sizeof($checksDP); $i++) {
                                if($paymentIds == '') {
                                    $paymentIds .= $checksDP[$i];
                                } else {
                                    $paymentIds .= ','. $checksDP[$i];         
                                }
                            }
                        }
                        
                        $wherePropertyDp = " AND p.vendor_id = {$vendorId} AND p.payment_id IN ({$paymentIds})";
                        $statusDp = $paymentIds;

                        $sqlPrice = "SELECT round(t.unit_price,2) as unitPrice FROM TRANSACTION t
                                        LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                                        LEFT JOIN contract con ON con.contract_id = sc.contract_id
                                        WHERE transaction_id IN ({$slipNos}) GROUP BY con.contract_id";
                          //  echo $sqlprice;
                            $resultPrice =  $myDatabase->query($sqlPrice, MYSQLI_STORE_RESULT);    
                            if($resultPrice !== false) {
                                $totalPrice = 0;
                                while($row = $resultPrice->fetch_object()){
                                    $totalPrice = $totalPrice + $row->unitPrice;
                                }
                            }

                            if($paymentMethod == 2){
                                $sqlA = "SELECT vendor_name FROM vendor WHERE vendor_id = {$vendorIdCurahDp}";
                                $resultA =  $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                                if($resultA !== false) {
                                    $rowA = $resultA->fetch_object();
                                    $vendorName = $rowA->freight_supplier;
                                }
                            }
                          
                    } 

                    //FREIGHT
                   else if($paymentFor == 2) {
                        if($paymentMethod != 2){
                            if (isset($_POST['checkedSlipsDP'])) {
                                $checksDP = $_POST['checkedSlipsDP'];
                                for ($i = 0; $i < sizeof($checksDP); $i++) {
                                    if($paymentIds == '') {
                                        $paymentIds .= $checksDP[$i];
                                    } else {
                                        $paymentIds .= ','. $checksDP[$i];
                                    }
                                }
                            }
                            $wherePropertyDp = "  AND p.freight_id = {$freightId_1} AND p.payment_id IN ({$paymentIds})";
                            $statusDp = $paymentIds;
                        

                            $sqlPrice = "SELECT t.freight_price FROM TRANSACTION t
                                        LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                                        LEFT JOIN contract con ON con.contract_id = sc.contract_id
                                        WHERE transaction_id IN ({$slipNos}) GROUP BY con.contract_id";
                            $resultPrice =  $myDatabase->query($sqlPrice, MYSQLI_STORE_RESULT);    
                            if($resultPrice !== false) {
                                $totalPrice = 0;
                                while($row = $resultPrice->fetch_object()){
                                    $totalPrice = $totalPrice + $row->freight_price;
                                }
                            }
                        }

                        if($paymentMethod == 2){
                            $sqlA = "SELECT freight_supplier FROM freight WHERE freight_id = {$freightIdFcDp}";
                            $resultA =  $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                            if($resultA !== false) {
                                $rowA = $resultA->fetch_object();
                                $vendorName = $rowA->freight_supplier;
                            }
                        }
                    }  //HANDLING
                    else if($paymentFor == 9) {
                        $paymentIds = '';
                        if($paymentMethod != 2){
                            if (isset($_POST['checkedSlipsDP'])) {
                                $checksDP = $_POST['checkedSlipsDP'];
                                for ($i = 0; $i < sizeof($checksDP); $i++) {
                                    if($paymentIds == '') {
                                        $paymentIds .= $checksDP[$i];
                                    } else {
                                        $paymentIds .= ','. $checksDP[$i];
                                    }
                                }
                            }
                            $wherePropertyDp = " AND p.vendor_handling_id = {$vendorHandlingId} AND p.payment_id IN ({$paymentIds})";
                            $statusDp = $paymentIds;
                        

                            $sqlPrice = "SELECT t.handling_price FROM TRANSACTION t
                                        LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                                        LEFT JOIN contract con ON con.contract_id = sc.contract_id
                                        LEFT JOIN vendor_handling_cost vhc ON vhc.`handling_cost_id` = t.`handling_cost_id`
                                        WHERE transaction_id IN ({$slipNos}) GROUP BY con.contract_id";
                            $resultPrice =  $myDatabase->query($sqlPrice, MYSQLI_STORE_RESULT);    
                            if($resultPrice !== false) {
                                $totalPrice = 0;
                                while($row = $resultPrice->fetch_object()){
                                    $totalPrice = $totalPrice + $row->handling_price;
                                }
                            }
                        }

                        if($paymentMethod == 2){
                            $sqlA = "SELECT vendor_handling_name FROM vendor_handling WHERE vendor_handling_id = {$vendorHandlingDp}";
                            $resultA =  $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                            if($resultA !== false) {
                                $rowA = $resultA->fetch_object();
                                $vendorName = $rowA->vendor_handling_name;
                            }
                        }

                    }   //UNLOADING
                    else if($paymentFor == 3) {
                        $paymentIds = '';
                        if($paymentMethod != 2){
                            if (isset($_POST['checkedSlipsDP'])) {
                                $checksDP = $_POST['checkedSlipsDP'];
                                for ($i = 0; $i < sizeof($checksDP); $i++) {
                                    if($paymentIds == '') {
                                        $paymentIds .= $checksDP[$i];
                                    } else {
                                        $paymentIds .= ','. $checksDP[$i];         
                                    }
                                }
                            }
                        
                            $wherePropertyDp = " AND p.labor_id = {$laborId} AND p.payment_id IN ({$paymentIds})";
                            $statusDp = $paymentIds;
                        }

                        if($paymentMethod == 2){
                            $sqlA = "SELECT labor_name FROM labor WHERE labor_id = {$laborDp}";
                            $resultA =  $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                            if($resultA !== false) {
                                $rowA = $resultA->fetch_object();
                                $vendorName = $rowA->labor_name;
                            }
                        }

                    } 

                    if(($paymentMethod == 3 && $statusDp != 0) || (($paymentMethod == 1 || $paymentMethod == 2))) {
                        
                        $sql = "INSERT INTO pengajuan_payment(payment_method, payment_type, stockpile_location, stockpile_id, payment_for, vendor_id, vendor_name, vendor_bank_id, 
                                freight_id, vendor_handling_id, labor_id, total_qty, price, total_dpp, total_shrink2, total_shrink, termin, total_amount, currency_id, total_ppn_amount,status_ppn, 
                                total_pph_amount, status_pph, grand_total, tax_invoice, invoice_no, invoice_date, file, remarks, beneficiary,  bank, rek, swift, periodeFrom, periodeTo, entry_date, status, settlement_status, user, urgent_payment_type, urgent_payment_date) 
                                values ({$paymentMethod}, {$paymentType}, {$stockpileLocation}, {$stockpileId}, {$paymentFor}, {$vendorId}, '{$vendorName}', {$vendorBank}, 
                                {$freightId}, {$vendorHandlingId}, {$laborId}, {$total_qty}, {$totalPrice}, {$total_dpp}, {$totalShrink2}, {$totalShrink}, {$termin}, {$total_amount}, 1, {$total_ppn}, {$ppnStatus}, {$total_pph}, {$pphStatus}, {$amount},
                                '{$taxInvoice}', '{$invoiceNo}', STR_TO_DATE('$invoiceDate', '%d/%m/%Y %H:%i:%s'), '{$attachmentPath}', '{$remarks}', '{$beneficiary}', '{$bank}', '{$rek}', '{$swift}', 
                                STR_TO_DATE('{$periodPaymentFrom}', '%d/%m/%Y'),STR_TO_DATE('{$periodPaymentTo}', '%d/%m/%Y'), STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), 0, {$settle}, {$_SESSION['userId']}, {$urgent_payment_type}, STR_TO_DATE('$urgent_payment_date', '%d/%m/%Y %H:%i:%s'))";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);    
                     //  echo " INPUT " . $sql;
                        if($result !== false) {
                            $idPP = $myDatabase->insert_id;
                            $return_value = '|OK|Pengajuan payment  has inserted successfully |';

                            $tempLog = '[INSERT][Pengajuan-OA]'. '['.$idPP.']';
                            $log = "INSERT INTO log_pengajuan_payment(entry_by, entry_date, log, request_payment_date) value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}', STR_TO_DATE('$urgent_payment_date', '%d/%m/%Y %H:%i:%s'))";
                            $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);

                            if($paymentFor == 2 || $paymentFor == 9 || $paymentFor == 1){ //Payment DAN SETTLE
                                $sqlContract ="SELECT contract_id FROM contract WHERE contract_id IN ({$contractIds})";
                                $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);
                              //  echo "Contract ". $sqlContract;
                                if($resultContract->num_rows > 0){
                                    while($rowCon = $resultContract->fetch_object()){
                                        $sql = "INSERT INTO pengajuan_pks_contract(idPP, contract_id) values ({$idPP}, {$rowCon->contract_id})";
                                        $result1 = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    
                                    }
                                }
                            }
                            
//-----------------------------------------------------------PAYMENT && SETTLEMENT--------------------------------------------------------------------------------------------------
                            if($paymentMethod != 2){ //PAYMENT
                                $totalAvailableAmount = 0;
                                $dppDpAvailable = 0;
                                $tempAvailableDp = 0;
                                
                                $sql22 = "SELECT SUM(amount_converted) AS notimDp FROM payment WHERE payment_id IN ({$paymentIds})  ";
                                    $result22 = $myDatabase->query($sql22, MYSQLI_STORE_RESULT);
                                    if($result22->num_rows == 1) {
                                        $row22 = $result22->fetch_object();
                                        $jumlahDP = $row22->notimDp;
                                        $tempAvailableDp = $jumlahDP;
                                    }

                                $sqlz = "SELECT  sc.stockpile_id, f.freight_rule, fc.freight_id, con.po_no, 
                                    ROUND(CASE WHEN ts.trx_shrink_tolerance_kg > 0 AND ((t.shrink * -1) - ts.trx_shrink_tolerance_kg) > 0 AND (SELECT transaction_id FROM transaction_shrink_weight WHERE transaction_id = t.transaction_id) IS NOT NULL AND t.slip_retur IS NOT NULL THEN ((t.shrink *-1) - ts.trx_shrink_tolerance_kg) *-1
                                            WHEN ts.trx_shrink_tolerance_kg > 0 AND (t.shrink - ts.trx_shrink_tolerance_kg) > 0 AND (SELECT transaction_id FROM transaction_shrink_weight WHERE transaction_id = t.transaction_id) IS NOT NULL THEN t.shrink - ts.trx_shrink_tolerance_kg
                                            WHEN ts.trx_shrink_tolerance_persen > 0 AND ((t.shrink/t.send_weight) * 100 > ts.trx_shrink_tolerance_persen) AND (SELECT transaction_id FROM transaction_shrink_weight WHERE transaction_id = t.transaction_id) IS NOT NULL AND t.slip_retur IS NOT NULL THEN ((t.shrink *-1) - (SELECT weight_persen FROM transaction_shrink_weight WHERE transaction_id = t.transaction_id))*-1
                                            WHEN ts.trx_shrink_tolerance_persen > 0 AND ((t.shrink/t.send_weight) * 100 > ts.trx_shrink_tolerance_persen) AND (SELECT transaction_id FROM transaction_shrink_weight WHERE transaction_id = t.transaction_id) IS NOT NULL THEN t.shrink - (SELECT weight_persen FROM transaction_shrink_weight WHERE transaction_id = t.transaction_id)
                                        ELSE 0 END,10) AS qtyClaim, COALESCE(hsw.amt_claim) as hsw_amt_claim, COALESCE(ts.amt_claim,0) AS amt_claim,
                                    ts.`trx_shrink_claim`,
                                    txpph.tax_id AS pph_tax_id, txpph.tax_value AS pph_tax_value,  txpph.tax_category AS pph_tax_category, 
                                    f.ppn_tax_id, txppn.tax_category AS ppn_tax_category, txppn.tax_value AS ppn_tax_value,
                                    v.vendor_code,v.vendor_name,

                                    -- HANDLING
                                    vhc.vendor_handling_id, v.vendor_code AS vendor_codeH, v.vendor_name AS vendor_nameH, vh.vendor_handling_rule, 
                                    vh.ppn_tax_id AS ppntxidH, txppnH.tax_value AS ppn_tax_valueH, txppnH.tax_category AS ppn_tax_categoryH,
                                    txpphH.tax_id AS pph_tax_idH, txpphH.tax_value AS pph_tax_valueH, txpphH.tax_category AS pph_tax_categoryH, 
                                    
                                    -- UNLOADING
                                    l.ppn_tax_id AS ppn_tx_idL, txppnL.tax_value AS ppn_tax_valueL, txppnL.tax_category AS ppn_tax_categoryL, 
                                    txpphL.tax_id AS pph_tax_idL, txpphL.tax_value AS pph_tax_valueL, txpphL.tax_category AS pph_tax_categoryL, 

                                    -- CURAH
                                    con.vendor_id,con.contract_no,con.po_no, vv.ppn_tax_id as tax_ppn_idC, txppnC.tax_value AS ppn_tax_valueC, txppnC.tax_category AS ppn_tax_categoryC,
                                    txpphC.tax_id AS pph_tax_idC, txpphC.tax_value AS pph_tax_valueC, txpphC.tax_category AS pph_tax_categoryC, 

                                    CASE WHEN t.fc_payment_status = 2 THEN (SELECT MAX(total_amount) FROM payment_oa WHERE transaction_id = t.transaction_id AND payment_method = 3 AND (STATUS != 2 || STATUS != 4)) ELSE 0 END AS split_oa,
                                    CASE WHEN t.fc_payment_status = 2 THEN  (SELECT max(qty) FROM payment_oa WHERE transaction_id = t.transaction_id and payment_method = 3 and status = 0) ELSE 0 END AS qty_oa,
                                    CASE WHEN t.fc_payment_status = 2 THEN (SELECT max(shrink) FROM payment_oa WHERE transaction_id = t.transaction_id and payment_method = 3 and status = 0) ELSE 0 END AS split_shrink,
                                    CASE WHEN t.fc_payment_status = 2 THEN (SELECT max(additional_shrink) FROM payment_oa WHERE transaction_id = t.transaction_id and payment_method = 3 and status = 0) ELSE 0 END AS split_shrink2,

                                    CASE WHEN t.uc_payment_status = 2 THEN (SELECT total_amount FROM payment_ob WHERE transaction_id = t.transaction_id AND payment_method = 3 AND STATUS = 0 ORDER BY payment_ob_id DESC LIMIT 1) ELSE 0 END AS split_ob,

                                    CASE WHEN t.hc_payment_status = 2 THEN (SELECT MAX(total_amount) FROM payment_handling WHERE transaction_id = t.transaction_id AND payment_method = 3 AND (STATUS != 2 || STATUS != 4)) ELSE 0 END AS split_hc,
                                    CASE WHEN t.hc_payment_status = 2 THEN  (SELECT max(qty) FROM payment_handling WHERE transaction_id = t.transaction_id and payment_method = 3 and status = 0) ELSE 0 END AS qty_hc,

                                    CASE WHEN t.curah_payment_status = 2 THEN (SELECT MAX(total_amount) FROM payment_curah WHERE transaction_id = t.transaction_id AND payment_method = 3 AND (STATUS != 2 || STATUS != 4)) ELSE 0 END AS split_curah,
                                    CASE WHEN t.curah_payment_status = 2 THEN  (SELECT max(qty) FROM payment_curah WHERE transaction_id = t.transaction_id and payment_method = 3 and status = 0) ELSE 0 END AS qty_curah,

                                    t.*
                                    FROM TRANSACTION t
                                    LEFT JOIN freight_cost fc ON fc.freight_cost_id = t.freight_cost_id
                                    LEFT JOIN freight f ON f.freight_id = fc.freight_id
                                    LEFT JOIN tax txppn ON txppn.tax_id = f.ppn_tax_id
                                    LEFT JOIN tax txpph ON txpph.tax_id = t.fc_tax_id
                                    LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                                    LEFT JOIN contract con ON con.contract_id = sc.contract_id
                                    LEFT JOIN stockpile s ON s.`stockpile_id` = sc.`stockpile_id`
                                    LEFT JOIN transaction_shrink_weight ts ON t.transaction_id = ts.transaction_id
                                    LEFT JOIN transaction_additional_shrink hsw ON t.transaction_id = hsw.transaction_id
                                    LEFT JOIN vendor_handling_cost vhc ON vhc.handling_cost_id = t.handling_cost_id
                                    LEFT JOIN vendor_handling vh ON vh.vendor_handling_id = vhc.vendor_handling_id
                                    LEFT JOIN tax txppnH ON txppnH.tax_id = vh.ppn_tax_id
                                    LEFT JOIN tax txpphH ON txpphH.tax_id = vh.pph_tax_id
                                    LEFT JOIN vendor v ON (fc.vendor_id = v.vendor_id OR vhc.vendor_id = v.vendor_id)
                                    LEFT JOIN labor l ON l.labor_id = t.labor_id
                                    LEFT JOIN tax txppnL ON txppnL.tax_id = l.ppn_tax_id
                                    LEFT JOIN tax txpphL ON txpphL.tax_id = t.uc_tax_id  
                                    LEFT JOIN vendor vv ON vv.vendor_id = con.vendor_id
                                    LEFT JOIN tax txppnC ON txppnC.tax_id = vv.ppn_tax_id
                                    LEFT JOIN tax txpphC ON txpphC.tax_id = t.curah_tax_id
                                    WHERE t.`transaction_id` IN ({$slipNos})";
                                $resultz = $myDatabase->query($sqlz, MYSQLI_STORE_RESULT);  

                               // echo " | SELECT Transaction | " . $sqlz;
                                if($resultz !== false && $resultz->num_rows > 0) {
                                    $totalPPN = 0;
                                    $totalPPh = 0;
                                    $totaldppShrink = 0;
                                    $totalDpp = 0;
                                    while($rowz = $resultz->fetch_object()) {  
                                        if($rowz->qtyClaim != ''){
                                            $qtyClaim = $rowz->qtyClaim;
                                        }else{
                                            $qtyClaim = 0;
                                        } 

                                        if($paymentFor == 2){ //FREIGHT
                                            $dppTotalPrice = 0;
                                            $dppShrinkPrice = 0;
                                            $divShrink = 0;
                                            $percentShrink = 0;
                                            $divShrink2 = 0;
                                            $percentShrink2 = 0;
                                            $divDpp = 0;
                                            $percentDpp = 0;
                                            $fp = 0;
                                            if ($rowz->freight_rule == 1) {
                                                $fq = $rowz->send_weight - $rowz->qty_oa;
                                                $fp = ($rowz->freight_price * $fq) ;
                                                // $fp = ($rowz->freight_price * $fq)- $rowz->split_oa;
                                                $tempOri =$fp;

                                                $originalAmount = $tempOri;
                                                // $fq = $rowz->send_weight;
                                            } else {
                                                $fq = ($rowz->freight_quantity - $rowz->qty_oa);
                                                $fp = ($rowz->freight_price * $fq);	 
                                                // $fp = ($rowz->freight_price * $rowz->quantity)- $rowz->split_oa; // fc.200 * t.7978.1
                                                $tempOri = $fp;
                                                $originalAmount = $tempOri;
                                                // $fq = $rowz->quantity; //7978,10
                                            }

                                            if ($rowz->transaction_date >= '2015-10-05' && $rowz->stockpile_id == 1 && ($rowz->pph_tax_id == 0 || $rowz->pph_tax_id == '')) { //khusus Jambi
                                                $dppTotalPrice = $fp;
                                                $dppShrinkPrice = ($rowz->qtyClaim * $rowz->trx_shrink_claim) - $rowz->split_shrink;
                                                $hswAmtClaim = $rowz->hsw_amt_claim - $rowz->split_shrink2; //susut Luar biasa

                                            } else {
                                                if ($rowz->pph_tax_id == 0 || $rowz->pph_tax_id == '') {
                                                    $dppTotalPrice = $fp;
                                                    $dppShrinkPrice = ($rowz->qtyClaim * $rowz->trx_shrink_claim)-$rowz->split_shrink;
                                                    $hswAmtClaim = $rowz->hsw_amt_claim - $rowz->split_shrink2; //susut Luar biasa

                                                } else {
                                                    if ($rowz->pph_tax_category == 1 && $rowz->transaction_date >= '2015-10-05' && $rowz->stockpile_id == 1) { // Jambi
                                                        $dppTotalPrice = ($fp) / ((100 - $rowz->pph_tax_value) / 100);
                                                        $originalAmount = ($tempOri) / ((100 - $rowz->pph_tax_value) / 100);
                                                        $dppShrinkPrice = (($rowz->qtyClaim * $rowz->trx_shrink_claim) - $rowz->split_shrink) / ((100 - $rowz->pph_tax_value) / 100);
                                                        $hswAmtClaim = $rowz->hsw_amt_claim - $rowz->split_shrink2; //susut Luar biasa

                                                    } else {
                                                        if ($rowz->pph_tax_category == 1) {
                                                            $dppTotalPrice = ($fp) / ((100 - $rowz->pph_tax_value) / 100);
                                                            $originalAmount = ($tempOri)/ ((100 - $rowz->pph_tax_value) / 100);
                                                            $dppShrinkPrice = (($rowz->qtyClaim * $rowz->trx_shrink_claim) - $rowz->split_shrink) / ((100 - $rowz->pph_tax_value) / 100);
                                                            $hswAmtClaim = $rowz->hsw_amt_claim - $rowz->split_shrink2; //susut Luar biasa

                                                        } else {
                                                            $dppTotalPrice = $fp;
                                                            $dppShrinkPrice = ($rowz->qtyClaim * $rowz->trx_shrink_claim) - $rowz->split_shrink;
                                                            $hswAmtClaim = $rowz->hsw_amt_claim - $rowz->split_shrink2; //susut Luar biasa

                                                        }
                                                    }
                                                }
                                            }

                                            $freightPrice = 0;
                                            if ($rowz->transaction_date >= '2015-10-05' && $rowz->stockpile_id == 1) { //jambi
                                                $freightPrice = $fp;
                                            } else {
                                                $freightPrice = $fp;
                                            }

                                            if($rowz->ppn_tax_id == 0){
                                                $ppnValue = 0;
                                            }else{
                                                $ppnValue = $rowz->ppn_tax_value;
                                            }
                                            if($rowz->pph_tax_id == 0 || $rowz->pph_tax_id == ''){
                                                $pphValue = 0;
                                                $pphId = 0;
                                            }else{
                                                $pphValue = $rowz->pph_tax_value;
                                                $pphId = $rowz->pph_tax_id;
                                            }

                                          //  $dppPrice_dppShrink = $dppTotalPrice - $dppShrinkPrice;
                                           
                                            $dppPrice_dppShrink = $dppTotalPrice - ($dppShrinkPrice + $hswAmtClaim);
                                            $totalOriginalAmount = $originalAmount - ($dppShrinkPrice + $hswAmtClaim);
                                            $divShrink = ($dppShrinkPrice/$dppPrice_dppShrink);
                                            $percentShrink = ($divShrink * 100);
                                            $divShrink2 = ($hswAmtClaim/$dppPrice_dppShrink); //susut luar biasa
                                            $percentShrink2 = ($divShrink2 * 100);
                                            $divDpp = ($dppTotalPrice/$dppPrice_dppShrink);
                                            $percentDpp = ($divDpp*100);

                                            if($settle == 0){
                                                $avaliableQty = 0;
                                                $avaliableQty = ($dppTotalPrice/$rowz->freight_price);
                                                $sqlPayment = "INSERT INTO payment_oa(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                               ." shrink, additional_shrink, total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, old_status, status) "
                                                               ." VALUES({$idPP}, {$rowz->transaction_id},{$paymentMethod}, {$rowz->freight_price}, {$avaliableQty}, {$dppTotalPrice}, "
                                                               ." {$dppShrinkPrice}, {$hswAmtClaim}, {$dppPrice_dppShrink}, {$totalOriginalAmount}, {$rowz->ppn_tax_id}, {$ppnValue}, "
                                                               ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$rowz->fc_payment_status}, 0)";
                                                $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT);  
                                           //     echo " OA || " .$sqlPayment; 
                                               $sql3 = "UPDATE `transaction` SET fc_payment_status = 1 WHERE transaction_id =  {$rowz->transaction_id}";
                                               $result3 = $myDatabase->query($sql3, MYSQLI_STORE_RESULT);
                                                                                      
                                            }else if($settle == 1){
                                                if($tempAvailableDp > 0){ //1250000
                                                    $avaliableQty = 0;
                                                    if ($tempAvailableDp > $dppPrice_dppShrink){ //1250000 > 4193800
                                                        $avaliableQty = ($dppTotalPrice/$rowz->freight_price);
                                                        $sqlPayment = "INSERT INTO payment_oa(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                                        ." shrink, additional_shrink, total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, old_status, status) "
                                                                        ." VALUES({$idPP}, {$rowz->transaction_id},{$paymentMethod}, {$rowz->freight_price}, {$avaliableQty}, {$dppTotalPrice}, "
                                                                        ." {$dppShrinkPrice}, {$hswAmtClaim}, {$dppPrice_dppShrink}, {$totalOriginalAmount}, {$rowz->ppn_tax_id}, {$ppnValue}, "
                                                                        ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),  {$rowz->fc_payment_status}, 0)";
                                                        $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT); 
                                                        $tempAvailableDp = ($tempAvailableDp - $dppPrice_dppShrink);   

                                                        $sql3 = "UPDATE `transaction` SET fc_payment_status = 1 WHERE transaction_id =  {$rowz->transaction_id}";
                                                        $result3 = $myDatabase->query($sql3, MYSQLI_STORE_RESULT);
                                                                        
                                                    }else{
                                                        $QtyTaken = 0;
                                                        $splitAmount = 0;
                                                        $tempDpp = 0;
                                                        $dppTaken = 0;
                                                        $dppShrinkTaken = 0;
                                                        $splitAmount = $tempAvailableDp;  //1250000                                                        
                                                        $dppShrinkTaken = (($percentShrink/100) * $tempAvailableDp);
                                                        $dppShrinkTaken2 = (($percentShrink2/100) * $tempAvailableDp);
                                                        $dppTaken = (($percentDpp/100) * $tempAvailableDp);
                                                        $QtyTaken = ($dppTaken/$rowz->freight_price);
                                                        $sqlPayment = "INSERT INTO payment_oa(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                                        ." shrink, additional_shrink, total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, old_status, status) "
                                                                        ." VALUES({$idPP}, {$rowz->transaction_id},{$paymentMethod}, {$rowz->freight_price}, {$QtyTaken}, {$dppTaken}, "
                                                                        ." {$dppShrinkTaken}, {$dppShrinkTaken2}, {$tempAvailableDp}, {$dppPrice_dppShrink}, {$rowz->ppn_tax_id}, {$ppnValue}, "
                                                                        ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),  {$rowz->fc_payment_status}, 0)";
                                                        $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT); 

                                                        $sql5 = "UPDATE `transaction` SET fc_payment_status = 2 WHERE transaction_id = {$rowz->transaction_id}";
                                                        $result5 = $myDatabase->query($sql5, MYSQLI_STORE_RESULT);
                                                    }
                                                    //$dppTotalPrice
                                                }
                                            }       
                                        } //HANDLING
                                        else if($paymentFor == 9){
                                            $hp = 0;
                                            $dppTotalPrice = 0;
                                            $divDpp = 0;
                                            $percentDpp = 0;
                                            // $hp = ($rowz->handling_price * $rowz->handling_quantity)-$rowz->split_hc;
                                            $hq = $rowz->handling_quantity-$rowz->qty_hc;
                                            $hp = ($rowz->handling_price * $hq);

                                            $tempOri = $hp;
                                            $originalAmount = $tempOri;
                                          
                                            if ($rowz->transaction_date >= '2015-10-05' && $rowz->stockpile_id == 1 && ($rowz->pph_tax_idH == 0 || $rowz->pph_tax_idH == '')) {
                                                $dppTotalPrice = $hp;
                                            } else {
                                                if ($rowz->pph_tax_idH == 0 || $rowz->pph_tax_idH == '') {
                                                    $dppTotalPrice = $hp;
                                                } else {
                                                    if ($rowz->pph_tax_categoryH == 1 && $rowz->transaction_date >= '2015-10-05' && $rowz->stockpile_id == 1) {
                                                        $dppTotalPrice = ($hp) / ((100 - $rowz->pph_tax_valueH) / 100);
                                                        $originalAmount = ($tempOri) / ((100 - $rowz->pph_tax_valueH) / 100);
                                                    } else {
                                                        if ($rowz->pph_tax_categoryH == 1) {
                                                            $dppTotalPrice = ($hp) / ((100 - $rowz->pph_tax_valueH) / 100);
                                                            $originalAmount = ($tempOri) / ((100 - $rowz->pph_tax_valueH) / 100);
                                                        } else {
                                                            $dppTotalPrice = $hp;
                                                        }
                                                    }
                                
                                                }
                                            }
                                            if($rowz->ppntxidH == 0){
                                                $ppnValue = 0;
                                            }else{
                                                $ppnValue = $rowz->ppn_tax_valueH;
                                            }
                                            if($rowz->pph_tax_idH == 0 || $rowz->pph_tax_idH == ''){
                                                $pphValue = 0;
                                                $pphId = 0;
                                            }else{
                                                $pphValue = $rowz->pph_tax_valueH;
                                                $pphId =  $rowz->pph_tax_idH;
                                            }
                                            
                                            $dppPrice_dppShrink = $dppTotalPrice;
                                            $totalOriginalAmount = $originalAmount;
                                            $divDpp = ($dppTotalPrice/$dppPrice_dppShrink);
                                            $percentDpp = ($divDpp*100);

                                            if($settle == 0){
                                                $avaliableQty = ($dppTotalPrice/$rowz->handling_price);
                                                $sqlPayment = "INSERT INTO payment_handling(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                               ."  total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, old_status, status) "
                                                               ." VALUES({$idPP}, {$rowz->transaction_id},{$paymentMethod}, {$rowz->handling_price}, {$avaliableQty}, {$dppTotalPrice}, "
                                                               ." {$dppPrice_dppShrink}, {$totalOriginalAmount}, {$rowz->ppntxidH}, {$ppnValue}, "
                                                               ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$rowz->hc_payment_status}, 0)";
                                                $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT);    
                                                //echo " PAY " .$avaliableQty;        
                                                $sql3 = "UPDATE `transaction` SET hc_payment_status = 1 WHERE transaction_id =  {$rowz->transaction_id}";
                                                $result3 = $myDatabase->query($sql3, MYSQLI_STORE_RESULT); 
                                                                                 
                                            }else if($settle == 1){
                                                if($tempAvailableDp > 0){ //1250000
                                                    $avaliableQty = 0;
                                                    if ($tempAvailableDp > $dppPrice_dppShrink){ //1250000 > 4193800
                                                        $avaliableQty = ($dppTotalPrice/$rowz->handling_price);
                                                        $sqlPayment = "INSERT INTO payment_handling(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                                    ."  total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, old_status, status) "
                                                                    ." VALUES({$idPP}, {$rowz->transaction_id},{$paymentMethod}, {$rowz->handling_price}, {$avaliableQty}, {$dppTotalPrice}, "
                                                                    ." {$dppPrice_dppShrink}, {$totalOriginalAmount}, {$rowz->ppntxidH}, {$ppnValue}, "
                                                                    ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$rowz->hc_payment_status}, 0)";
                                                        $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT); 
                                                        $tempAvailableDp = ($tempAvailableDp - $dppPrice_dppShrink);   

                                                        $sql3 = "UPDATE `transaction` SET hc_payment_status = 1 WHERE transaction_id =  {$rowz->transaction_id}";
                                                        $result3 = $myDatabase->query($sql3, MYSQLI_STORE_RESULT);
                                                                        
                                                    }else{
                                                        $QtyTaken = 0;
                                                        $splitAmount = 0;
                                                        $tempDpp = 0;
                                                        $dppTaken = 0;
                                                        $splitAmount = $tempAvailableDp;  //1250000                                                        
                                                        $dppTaken = (($percentDpp/100) * $tempAvailableDp);
                                                        $QtyTaken = ($dppTaken/$rowz->handling_price);
                                                        $sqlPayment = "INSERT INTO payment_handling(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                                    ."  total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, old_status, status) "
                                                                    ." VALUES({$idPP}, {$rowz->transaction_id},{$paymentMethod}, {$rowz->handling_price}, {$QtyTaken}, {$dppTaken}, "
                                                                    ." {$tempAvailableDp}, {$dppPrice_dppShrink}, {$rowz->ppntxidH}, {$ppnValue}, "
                                                                    ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$rowz->hc_payment_status}, 0)";
                                                        $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT); 

                                                        $sql5 = "UPDATE `transaction` SET hc_payment_status = 2 WHERE transaction_id = {$rowz->transaction_id}";
                                                        $result5 = $myDatabase->query($sql5, MYSQLI_STORE_RESULT);
                                                    }
                                                    //$dppTotalPrice
                                                }

                                            }       
                                        } //UNLOADING
                                        else if($paymentFor == 3){
                                            $dppTotalPrice = 0;
                                            $tempOri = 0;
                                            if ($rowz->pph_tax_idL == 0 || $rowz->pph_tax_idL == '') {
                                                $dppTotalPrice = $rowz->unloading_price - $rowz->split_ob;
                                                $tempOri = $dppTotalPrice;
                                            } else {
                                                if ($rowz->pph_tax_categoryL == 1) {
                                                    $dppTotalPrice = ($rowz->unloading_price - $rowz->split_ob) / ((100 - $rowz->pph_tax_valueL) / 100);
                                                    $originalAmount = $tempOri / ((100 - $rowz->pph_tax_valueL) / 100);
                                                } else {
                                                    $dppTotalPrice = $rowz->unloading_price - $rowz->split_ob;
                                                    $originalAmount =  $tempOri;
                                                }
                                            }

                                            if($rowz->ppn_tx_idL == 0){
                                                $ppnValue = 0;
                                            }else{
                                                $ppnValue = $rowz->ppn_tax_valueL;
                                            }
                                            if($rowz->pph_tax_idL == 0 || $rowz->pph_tax_idL == '' ){
                                                $pphValue = 0;
                                                $pphId = 0;
                                            }else{
                                                $pphValue = $rowz->pph_tax_valueL;
                                                $pphId = $rowz->pph_tax_idL;
                                            }
                                            
                                            $dppPrice_dppShrink = $dppTotalPrice;
                                            $totalOriginalAmount = $originalAmount;

                                            if($settle == 0){
                                                $avaliableQty = 0;
                                                $sqlPayment = "INSERT INTO payment_ob(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                               ."  total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, old_status, status) "
                                                               ." VALUES({$idPP}, {$rowz->transaction_id},{$paymentMethod}, {$rowz->unloading_price}, {$avaliableQty}, {$dppTotalPrice}, "
                                                               ." {$dppPrice_dppShrink}, {$dppPrice_dppShrink}, {$rowz->ppn_tx_idL}, {$ppnValue}, "
                                                               ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$rowz->uc_payment_status}, 0)";
                                                $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT);  

                                                $sql3 = "UPDATE `transaction` SET uc_payment_status = 1 WHERE transaction_id =  {$rowz->transaction_id}";
                                                $result3 = $myDatabase->query($sql3, MYSQLI_STORE_RESULT); 
 
                                                //echo " PAY " .$avaliableQty;                                               
                                            }else if($settle == 1){
                                                if($tempAvailableDp > 0){
                                                    $avaliableQty = 0;
                                                    if ($tempAvailableDp > $dppPrice_dppShrink){
                                                        $avaliableQty = 0;
                                                        $sqlPayment = "INSERT INTO payment_ob(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                            ."  total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, old_status, status) "
                                                            ." VALUES({$idPP}, {$rowz->transaction_id},{$paymentMethod}, {$rowz->unloading_price}, {$avaliableQty}, {$dppTotalPrice}, "
                                                            ." {$dppPrice_dppShrink}, {$dppPrice_dppShrink}, {$rowz->ppn_tx_idL}, {$ppnValue}, "
                                                            ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$rowz->uc_payment_status}, 0)";
                                                        $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT);  
                                                        $tempAvailableDp = ($tempAvailableDp - $dppPrice_dppShrink);   

                                                        $sql3 = "UPDATE `transaction` SET uc_payment_status = 1 WHERE transaction_id =  {$rowz->transaction_id}";
                                                        $result3 = $myDatabase->query($sql3, MYSQLI_STORE_RESULT);
                                                    }else{
                                                        $splitAmount = 0;
                                                        $splitAmount = $tempAvailableDp;  //1250000                                                        
                                                        $sqlPayment = "INSERT INTO payment_ob(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                                ."  total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, old_status, status) "
                                                                ." VALUES({$idPP}, {$rowz->transaction_id},{$paymentMethod}, {$splitAmount}, 0, {$splitAmount}, "
                                                                ." {$splitAmount}, {$dppPrice_dppShrink}, {$rowz->ppn_tx_idL}, {$ppnValue}, "
                                                                ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$rowz->uc_payment_status}, 0)";
                                                        $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT); 

                                                        $sql5 = "UPDATE `transaction` SET uc_payment_status = 2 WHERE transaction_id = {$rowz->transaction_id}";
                                                        $result5 = $myDatabase->query($sql5, MYSQLI_STORE_RESULT);

                                                    }
                                                
                                                }
                                            }
                                        }//CURAH
                                        else if($paymentFor == 1){
                                            $dppTotalPrice = 0;
                                            $unitPrice = 0;
                                            $divDpp = 0;
                                            $percentDpp = 0;
                                            $curahQty = 0;

                                            $curahQty = $rowz->quantity-$rowz->qty_curah;
                                            $unitPrice = round($rowz->unit_price,2);
                                            $cp = $unitPrice * $curahQty;

                                            $tempOri = $cp;
                                         
                                            // echo $unitPrice;
                                            if ($rowz->pph_tax_idC == 0) {
                                                $dppTotalPrice = round($cp);
                                                $originalAmount = $tempOri;
                                            } else {
                                                if ($rowz->pph_tax_categoryC == 1) {
                                                    $dppTotalPrice = ($cp) / ((100 - $rowz->pph_tax_valueC) / 100);
                                                    $originalAmount = ($tempOri) / ((100 - $rowz->pph_tax_valueC) / 100);
                                                } else {
                                                    $dppTotalPrice = ($cp);
                                                    $originalAmount = ($tempOri);

                                                }
                                            }

                                            if($rowz->tax_ppn_idC == 0){
                                                $ppnValue = 0;
                                                $ppnId = 0;
                                            }else{
                                                $ppnValue = $rowz->ppn_tax_valueC;
                                                $ppnId = $rowz->tax_ppn_idC ;
                                            }
                                            if($rowz->pph_tax_idC != 0 || $rowz->pph_tax_idC != ''){
                                                $pphValue = $rowz->pph_tax_valueC;
                                                $pphId = $rowz->pph_tax_idC;
                                            }else{
                                                $pphValue = 0;
                                                $pphId = 0;
                                            }
                                            
                                            $dppPrice_dppShrink = $dppTotalPrice;
                                            $totalOriginalAmount = $originalAmount;
                                            $divDpp = ($dppTotalPrice/$dppPrice_dppShrink);
                                            $percentDpp = ($divDpp*100);

                                            if($settle == 0){
                                                $avaliableQty = $dppTotalPrice/$unitPrice;
                                                $sqlPayment = "INSERT INTO payment_curah(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                               ."  total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, old_status, status) "
                                                               ." VALUES({$idPP}, {$rowz->transaction_id},{$paymentMethod}, {$unitPrice}, {$avaliableQty}, {$dppTotalPrice}, "
                                                               ." {$dppPrice_dppShrink}, {$totalOriginalAmount}, {$ppnId}, {$ppnValue}, "
                                                               ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$rowz->curah_payment_status}, 0)";
                                                $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT);  
                                                
                                                $sql3 = "UPDATE `transaction` SET curah_payment_status = 1 WHERE transaction_id =  {$rowz->transaction_id}";
                                                $result3 = $myDatabase->query($sql3, MYSQLI_STORE_RESULT);

                                           //     echo " PAY " .$sqlPayment;                                               
                                            }else if($settle == 1){
                                                if($tempAvailableDp > 0){ 
                                                    $avaliableQty = 0;
                                                    if ($tempAvailableDp > $dppPrice_dppShrink){ 
                                                        $avaliableQty = ($dppTotalPrice/$unitPrice);
                                                        $sqlPayment = "INSERT INTO payment_curah(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                                    ."  total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, old_status, status) "
                                                                    ." VALUES({$idPP}, {$rowz->transaction_id},{$paymentMethod}, {$unitPrice}, {$avaliableQty}, {$dppTotalPrice}, "
                                                                    ." {$dppPrice_dppShrink}, {$totalOriginalAmount}, {$ppnId}, {$ppnValue}, "
                                                                    ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$rowz->curah_payment_status}, 0)";
                                                        $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT); 
                                                        $tempAvailableDp = ($tempAvailableDp - $dppPrice_dppShrink);   
                                                   //     echo " | KE 1 |" . $sqlPayment;
                                                        $sql3 = "UPDATE `transaction` SET curah_payment_status = 1 WHERE transaction_id =  {$rowz->transaction_id}";
                                                        $result3 = $myDatabase->query($sql3, MYSQLI_STORE_RESULT);
                                                                        
                                                    }else{
                                                        $QtyTaken = 0;
                                                        $splitAmount = 0;
                                                        $tempDpp = 0;
                                                        $dppTaken = 0;
                                                        $splitAmount = $tempAvailableDp;  //1250000                                                        
                                                        $dppTaken = (($percentDpp/100) * $tempAvailableDp);
                                                        $QtyTaken = ($dppTaken/$unitPrice);
                                                        $sqlPayment = "INSERT INTO payment_curah(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                                    ."  total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, old_status, status) "
                                                                    ." VALUES({$idPP}, {$rowz->transaction_id},{$paymentMethod}, {$unitPrice}, {$QtyTaken}, {$dppTaken}, "
                                                                    ." {$tempAvailableDp}, {$dppPrice_dppShrink}, {$ppnId}, {$ppnValue}, "
                                                                    ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$rowz->curah_payment_status}, 0)";
                                                        $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT); 
                                                        //      echo " | KE 2 |" . $sqlPayment;
                                                        $sql5 = "UPDATE `transaction` SET curah_payment_status = 2 WHERE transaction_id = {$rowz->transaction_id}";
                                                        $result5 = $myDatabase->query($sql5, MYSQLI_STORE_RESULT);
                                                    }
                                                  // echo "SLIP " . $resultPay;
                                                }
                                            } 
                                        }
                                    }	
                                }
                            } 
//---------------------------------------------SETTLEMENT---------------------------------------------------------------------------------------------------------------------------------------------
                            //INSERT pengajuan_payment_dp, Update amount_convert, amount di payment jika settle
                            if($paymentMethod == 3 && $statusDp != 0){
                                if($grandTotal <= 0) {
                                    $sql01 = "SELECT p.*, f.pph AS fpph, f.ppn AS fppn, vh.`pph` AS vhpph , vh.ppn as vhppn, v.`ppn` AS vppn, 
                                                l.ppn as lppn, l.pph as lpph, c.`contract_no` AS contractNo, c.`po_no` AS poNo,
                                                (SELECT bank_code FROM bank WHERE bank_id = p.bank_id) AS bank_code, 
                                                (SELECT bank_type FROM bank WHERE bank_id = p.bank_id) AS bank_type,
                                                (SELECT currency_code FROM currency WHERE currency_id = p.currency_id) AS pcur_currency_code,
                                                CASE WHEN p.payment_location = 0 THEN 'HOF'
                                                        ELSE (SELECT stockpile_name FROM stockpile WHERE stockpile_id = p.payment_location) 
                                                    END AS payment_location
                                            FROM `payment` p 
                                            LEFT JOIN freight f ON f.`freight_id` = p.`freight_id` 
                                            LEFT JOIN vendor_handling vh ON vh.`vendor_handling_id` = p.`vendor_handling_id`
                                            LEFT JOIN vendor v ON v.`vendor_id` = p.`vendor_id`
                                            LEFT JOIN labor l on l.labor_id = p.labor_id
                                            LEFT JOIN contract c ON c.`contract_id` = p.`freightContract`
                                            WHERE p.payment_type = {$paymentType}
                                            AND p.payment_method = 2 AND p.payment_status = 0
                                            {$wherePropertyDp}
                                            AND p.amount_converted > 0
                                            AND p.company_id = {$_SESSION['companyId']}
                                            ORDER BY p.amount_converted ASC";
                                    $result = $myDatabase->query($sql01, MYSQLI_STORE_RESULT);
                                //    echo "Dpp Dp " . $sql01 ;
                                    if($result !== false && $result->num_rows > 0) {
                                        $availableDP1 = '';	
                                        while($row = $result->fetch_object()) {
                                        //  echo 'Yeni';
                                            $voucherCode = '';
                                            $concatVoucherCode = '';
                                            $ppn_percent = 0;
                                            $pph_percent = 0;
                                            $availableDP = $total_amount;  //412,190
                                            $voucherCode = $row->payment_location .'/'. $row->bank_code .'/'. $row->pcur_currency_code;
                                            if($row->bank_type == 1) {
                                                $voucherCode .= ' - B';
                                            } elseif($row->bank_type == 2) {
                                                $voucherCode .= ' - P';
                                            } elseif($row->bank_type == 3) {
                                                $voucherCode .= ' - CAS';
                                            }
                                            
                                            if($row->bank_type != 3) {
                                                if($row->payment_type == 1) {
                                                    $voucherCode .= 'RV';
                                                } else {
                                                    $voucherCode .= 'PV';
                                                }
                                            }
                                            $concatVoucherCode = $voucherCode .' # '. $row->payment_no;
                                            if($availableDP > 0) {
                                                $dppTotalTaken = 0;
                                                $totalTaken = 0;
                                                $sqltest = "SELECT SUM(p.amount_converted) AS total_taken, f.pph AS fpph, f.ppn AS fppn, vh.`pph` AS vhpph, 
                                                            v.`ppn` AS vppn, v.pph as vpph, l.ppn AS lppn, l.pph AS lpph
                                                        FROM payment p
                                                        LEFT JOIN freight f ON p.`freight_id` = f.`freight_id` 
                                                        LEFT JOIN vendor_handling vh ON vh.`vendor_handling_id` = p.`vendor_handling_id`
                                                        LEFT JOIN vendor v ON v.`vendor_id` = p.`vendor_id`
                                                        LEFT JOIN labor l ON l.labor_id = p.labor_id
                                                        WHERE payment_id = {$row->payment_id} ORDER BY p.amount_converted ASC";
                                                $resultTaken = $myDatabase->query($sqltest, MYSQLI_STORE_RESULT);
                                              // echo " A " . $sqltest;
                                                if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                                    $rowTaken = $resultTaken->fetch_object();
                                                    $dppTotalTaken = $rowTaken->total_taken;  //200,000
                                                    if($paymentFor == 2){
                                                        $takenPPN = $dppTotalTaken * ($row->fppn/100);
                                                        $takenPPh = $dppTotalTaken * ($row->fpph/100);
                                                        $totalTaken = ($dppTotalTaken + $takenPPN) - $takenPPh;
                                                    }else if($paymentFor == 9){
                                                        $takenPPN = $dppTotalTaken * ($row->vhppn/100);
                                                        $takenPPh = $dppTotalTaken * ($row->vhpph/100);
                                                        $totalTaken = ($dppTotalTaken + $takenPPN) - $takenPPh;
                                                    }else if($paymentFor == 3){
                                                        $takenPPN = $dppTotalTaken * ($row->lppn/100);
                                                        $takenPPh = $dppTotalTaken * ($row->lpph/100);
                                                        $totalTaken = ($dppTotalTaken + $takenPPN) - $takenPPh; 
                                                    }else if($paymentFor == 1){
                                                        $takenPPN = $dppTotalTaken * ($row->vppn/100);
                                                        $takenPPh = $dppTotalTaken * ($row->vpph/100);
                                                        $totalTaken = ($dppTotalTaken + $takenPPN) - $takenPPh; 
                                                    }
                                                    
                                                }
                                                //412,190, //200,000
                                                if($availableDP >= $dppTotalTaken && $availableDP1 == '') { 
                                                    $availableDP1 = $availableDP - $dppTotalTaken; 
                                                  // echo "AA " .$availableDP ." | " . $dppTotalTaken;

                                                    $quantityTaken = 0;
                                                } else if($availableDP >= $dppTotalTaken && $availableDP1 > $dppTotalTaken) {
                                                   
                                                    if($availableDP1 != ''){
                                                        $quantityTaken = $dppTotalTaken - $availableDP1;
                                                    }else{
                                                        $quantityTaken = $dppTotalTaken - $availableDP;	
                                                    }
                                                //    echo "AB " .$availableDP ." | " . $availableDP1 . " | " . $dppTotalTaken;
                                                    
                                                    $availableDP = 0;
                                                    
                                                }else if($availableDP1 < $dppTotalTaken ) {
                                                    if($availableDP1 != ''){
                                                        $quantityTaken = $dppTotalTaken - $availableDP1;
                                                    }else{
                                                        $quantityTaken = $dppTotalTaken - $availableDP;	
                                                    }
                                                    $availableDP = 0;
                                                   // echo " | QRY " . $quantityTaken;
                                                }
                                            }
                                            
                                            $sql2 = "UPDATE payment SET amount = ". $quantityTaken/$row->exchange_rate .", amount_converted = ". $quantityTaken ." 
                                            WHERE payment_id = {$row->payment_id}";
                                            $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                                        //    echo " B " . $sql2;
        
                                            //FOR APPROVE
                                            //  $originalAmount = $row->amount_converted;
                                            if($quantityTaken > 0){
                                                if($paymentFor == 2){
                                                    $dppDpAvailable = $quantityTaken;
                                                    $dppDpSettleValue = $dppTotalTaken - $dppDpAvailable; //13.000.000 - 8.673.900
                                                    $dpPPN = $quantityTaken * ($row->fppn/100);
                                                    $dpPPh = $quantityTaken * ($row->fpph/100);
                                                    $totalAvailableAmount = ($quantityTaken + $dpPPN) - $dpPPh ;
                                                    $settleDp = $totalTaken - $totalAvailableAmount;//(($quantityTaken + $dpPPN)-$dpPPh);
                                                }else if($paymentFor == 9){
                                                    $dppDpAvailable = $quantityTaken;
                                                    $dppDpSettleValue = $dppTotalTaken - $dppDpAvailable;
                                                    $dpPPN = $quantityTaken * ($row->vhppn/100);
                                                    $dpPPh = $quantityTaken * ($row->vhpph/100);
                                                    $totalAvailableAmount = ($quantityTaken + $dpPPN) - $dpPPh ;
                                                    $settleDp = $totalTaken - $totalAvailableAmount;//(($quantityTaken + $dpPPN)-$dpPPh);
                                                }else if($paymentFor == 3){
                                                    $dppDpAvailable = $quantityTaken;
                                                    $dppDpSettleValue = $dppTotalTaken - $dppDpAvailable;
                                                    $dpPPN = $quantityTaken * ($row->lppn/100);
                                                    $dpPPh = $quantityTaken * ($row->lpph/100);
                                                    $totalAvailableAmount = ($quantityTaken + $dpPPN) - $dpPPh ;
                                                    $settleDp = $totalTaken - $totalAvailableAmount;
                                                }else if($paymentFor == 1){
                                                    $dppDpAvailable = $quantityTaken;
                                                    $dppDpSettleValue = $dppTotalTaken - $dppDpAvailable;
                                                    $dpPPN = $quantityTaken * ($row->vppn/100);
                                                    $dpPPh = $quantityTaken * ($row->vpph/100);
                                                    $totalAvailableAmount = ($quantityTaken + $dpPPN) - $dpPPh ;
                                                    $settleDp = $totalTaken - $totalAvailableAmount;
                                                }
                                            }else{
                                                if($paymentFor == 2){
                                                    $dppDpAvailable = $row->amount_converted;
                                                    $dppDpSettleValue = $dppDpAvailable;
                                                    $dpPPN = $row->amount_converted * ($row->fppn/100);
                                                    $dpPPh = $row->amount_converted * ($row->fpph/100);
                                                    $totalAvailableAmount = ($row->amount_converted + $dpPPN) - $dpPPh ;
                                                    $settleDp = $totalAvailableAmount;
                                                }else if($paymentFor == 9){
                                                    $dppDpAvailable = $row->amount_converted;
                                                    $dppDpSettleValue = $dppDpAvailable;
                                                    $dpPPN = $row->amount_converted * ($row->vhppn/100);
                                                    $dpPPh = $row->amount_converted * ($row->vhpph/100);
                                                    $totalAvailableAmount = ($row->amount_converted + $dpPPN) - $dpPPh ;
                                                    $settleDp = $totalAvailableAmount;
                                                }else if($paymentFor == 3){
                                                    $dppDpAvailable = $row->amount_converted;
                                                    $dppDpSettleValue = $dppDpAvailable;
                                                    $dpPPN = $row->amount_converted * ($row->lppn/100);
                                                    $dpPPh = $row->amount_converted * ($row->lpph/100);
                                                    $totalAvailableAmount = ($row->amount_converted + $dpPPN) - $dpPPh ;
                                                    $settleDp = $totalAvailableAmount;
                                                }else if($paymentFor == 1){
                                                    $dppDpAvailable = $row->amount_converted;
                                                    $dppDpSettleValue = $dppDpAvailable;
                                                    $dpPPN = $row->amount_converted * ($row->vppn/100);
                                                    $dpPPh = $row->amount_converted * ($row->vpph/100);
                                                    $totalAvailableAmount = ($row->amount_converted + $dpPPN) - $dpPPh ;
                                                    $settleDp = $totalAvailableAmount;
                                                }
                                            }
        
                                            if($paymentMethod == 3 && $grandTotal <= 0 && $settle == 1){
                                                $totalAvailableAmount = 0;
                                                $dppDpAvailable = 0;
                                                $dpPPh = 0;
                                                $dpPPn = 0;
                                            }

                                            $sqlyn = "INSERT INTO pengajuan_payment_dp(idPP, payment_id, payment_no, voucher_code, po_no, contract_no, "
                                                    . " dpp_dp_settle, dpp_available_amount, dp_ppn_value, dp_pph_value, settle_amount, available_amount, status) "
                                                    . " VALUES ({$idPP}, {$row->payment_id}, '{$row->payment_no}', '{$concatVoucherCode}', '{$row->poNo}', '{$row->contractNo}', {$dppDpSettleValue}, {$dppDpAvailable}, "
                                                    . " {$dpPPN}, {$dpPPh}, {$settleDp}, {$totalAvailableAmount}, 0)";
                                            $resultyn = $myDatabase->query($sqlyn, MYSQLI_STORE_RESULT);
                                            if($resultyn !== false){
                                                $pp_dp_id = $myDatabase->insert_id;
                                            }
                                        }
                                    }
                                } else if($grandTotal > 0) {
                                    $sql0 = "SELECT p.*, f.pph AS fpph, f.ppn AS fppn, vh.`pph` AS vhpph , vh.ppn as vhppn, v.`ppn` AS vppn, 
                                            c.`contract_no` AS contractNo, c.`po_no` AS poNo,  l.ppn as lppn, l.pph as lpph,
                                            (SELECT bank_code FROM bank WHERE bank_id = p.bank_id) AS bank_code, 
                                            (SELECT bank_type FROM bank WHERE bank_id = p.bank_id) AS bank_type,
                                            (SELECT currency_code FROM currency WHERE currency_id = p.currency_id) AS pcur_currency_code,
                                            CASE WHEN p.payment_location = 0 THEN 'HOF'
                                                ELSE (SELECT stockpile_name FROM stockpile WHERE stockpile_id = p.payment_location) 
                                            END AS payment_location
                                            FROM `payment` p 
                                            LEFT JOIN freight f ON f.`freight_id` = p.`freight_id` 
                                            LEFT JOIN vendor_handling vh ON vh.`vendor_handling_id` = p.`vendor_handling_id`
                                            LEFT JOIN vendor v ON v.`vendor_id` = p.`vendor_id`
                                            LEFT JOIN labor l on l.labor_id = p.labor_id
                                            LEFT JOIN contract c ON c.`contract_id` = p.`freightContract`
                                            WHERE p.payment_type = {$paymentType}
                                            AND p.payment_method = 2
                                            {$wherePropertyDp}
                                            AND p.company_id = {$_SESSION['companyId']}
                                            ORDER BY p.amount_converted ASC";
                                    $result = $myDatabase->query($sql0, MYSQLI_STORE_RESULT);
                                      //echo "GET PAYMENT ". $sql0;
                                
                                    if($result !== false && $result->num_rows > 0) {
                                        while($row = $result->fetch_object()) {
                                            $voucherCode = '';
                                            $concatVoucherCode = '';

                                            $voucherCode = $row->payment_location .'/'. $row->bank_code .'/'. $row->pcur_currency_code;
                                            if($row->bank_type == 1) {
                                                $voucherCode .= ' - B';
                                            } elseif($row->bank_type == 2) {
                                                $voucherCode .= ' - P';
                                            } elseif($row->bank_type == 3) {
                                                $voucherCode .= ' - CAS';
                                            }
                                            
                                            if($row->bank_type != 3) {
                                                if($row->payment_type == 1) {
                                                    $voucherCode .= 'RV';
                                                } else {
                                                    $voucherCode .= 'PV';
                                                }
                                            }
                                            $concatVoucherCode = $voucherCode .' # '. $row->payment_no;

                                            if($paymentFor == 2){
                                                $dpPPn = $row->amount_converted * ($row->fppn/100);
                                                $dpPPh = $row->amount_converted * ($row->fpph/100);
                                                $settleDp = ($row->amount_converted + $dpPPn) - $dpPPh ;
                                            }else if($paymentFor == 9){
                                                $dpPPn = $row->amount_converted * ($row->vhppn/100);
                                                $dpPPh = $row->amount_converted * ($row->vhpph/100);
                                                $settleDp = ($row->amount_converted + $dpPPn) - $dpPPh ;
                                            }else if($paymentFor == 3){
                                                $dpPPn = $row->amount_converted * ($row->lppn/100);
                                                $dpPPh = $row->amount_converted * ($row->lpph/100);
                                                $settleDp = ($row->amount_converted + $dpPPn) - $dpPPh ;
                                            }else if($paymentFor == 1){
                                                $dpPPn = $row->amount_converted * ($row->vppn/100);
                                                $dpPPh = $row->amount_converted * ($row->vpph/100);
                                                $settleDp = ($row->amount_converted + $dpPPn) - $dpPPh ;
                                            }
                                            $dppDpSettleValue = $row->amount_converted;
                                            $sqlyn = "INSERT INTO pengajuan_payment_dp(idPP, payment_id, payment_no, voucher_code, po_no, contract_no, "
                                                    . " dpp_dp_settle, dpp_available_amount, dp_ppn_value, dp_pph_value, settle_amount, available_amount, status) "
                                                    ." VALUES ({$idPP}, {$row->payment_id}, '{$row->payment_no}', '{$concatVoucherCode}', '{$row->poNo}', '{$row->contractNo}', "
                                                    . " {$dppDpSettleValue}, 0, {$dpPPn}, {$dpPPh}, {$settleDp}, 0, 0)";
                                            $resultyn = $myDatabase->query($sqlyn, MYSQLI_STORE_RESULT);
                                         //echo "PENGAJUAN DP " . $sqlyn;
            
                                        }
                                    }
                                    $sql123 = "UPDATE `payment` p SET p.amount = 0, p.amount_converted = 0
                                            WHERE p.payment_type = {$paymentType}
                                            AND p.payment_method = 2
                                            {$wherePropertyDp}";
                                    $result = $myDatabase->query($sql123, MYSQLI_STORE_RESULT);
                                } 
                            }
                                    //log_pengajuan_oa
  //------------------------------------------INPUT LOGBOOK DATA-----------------------------------------------------------------------------------------------------------------------------------------
                          
                            if($paymentMethod == 3 && $grandTotal <= 0 ){
                                $sql = "UPDATE pengajuan_payment SET settlement_status = 1 where idpp = {$idPP}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }

                            // if($amount > 0){
                                $sqlLog = "INSERT INTO logbook_new (ppayment_id, type_pengajuan, entry_date, status1, urgent_payment_date) values ({$idPP}, 1, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),0, STR_TO_DATE('$urgent_payment_date', '%d/%m/%Y %H:%i:%s'))";
                                $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
                            // }
                            // echo " SL => " . $sqlLog;
                    } else {
                            $return_value = '|FAIL| Fail to insert data.| ' . $sql;
                        }  
                    }else{
                        $return_value = '|FAIL| Please check Down Payment.| ';
                    }     
                } else {
                    $return_value = '|FAIL| pengajuan payment type/boolContinue is null.| '.$boolContinue;
                }
            }else{
                $return_value = '|FAIL| Dokumen invoice belum di upload.| ';
            }
            echo $return_value;
    } else if($_POST['_method'] == 'UPDATE'){
        $updateDP = '';

        if($attachmentPath != 'NULL'){
            $tempFile = " file = '{$attachmentPath}', ";
        }

        if($paymentMethod == 2){
            $updateDP = "stockpile_id = {$stockpileId},
                        vendor_id = {$vendorId},
                        vendor_bank_id = {$vendorBank},
                        freight_id = {$freightId},
                        vendor_handling_id = {$vendorHandlingId},
                        labor_id = {$laborId},
                        total_qty = {$total_qty},
                        price = {$totalPrice},
                        termin = {$termin},
                        total_amount = {$total_amount},
                        total_ppn_amount = {$total_ppn},
                        status_ppn = {$ppnStatus},
                        total_pph_amount = {$total_pph},
                        status_pph = {$pphStatus},
                        grand_total = {$amount},
                        beneficiary = '{$beneficiary}',
                        bank = '{$bank}',
                        rek = '{$rek}', 
                        swift = '{$swift}', ";

            $sql1 = "UPDATE pengajuan_pks_contract SET contract_id = {$contractIds} WHERE idPP = {$idPP}";
            $result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
        }

        $sql = "UPDATE pengajuan_payment
            SET tax_invoice = '{$taxInvoice}',
                {$updateDP}
                invoice_no = '{$invoiceNo}',
                invoice_date = STR_TO_DATE('$invoiceDate', '%d/%m/%Y %H:%i:%s'),
                urgent_payment_type = {$urgent_payment_type},
                urgent_payment_date = STR_TO_DATE('$urgent_payment_date', '%d/%m/%Y %H:%i:%s'),
                status = 0, email_date = NULL, 
                {$tempFile}
                remarks = '{$remarks}'
            WHERE idPP = {$idPP}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
          

            if($result !== false) {
                $tempLog = '[UPDATE][Pengajuan-OA]'. '['.$idPP.']';
                $log = "INSERT INTO log_pengajuan_payment(entry_by, entry_date, log, request_payment_date) value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}', STR_TO_DATE('$urgent_payment_date', '%d/%m/%Y %H:%i:%s'))";
                $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);

                $LogbooUpdate = "UPDATE logbook_new SET status1 = 0, urgent_payment_date = STR_TO_DATE('$urgent_payment_date', '%d/%m/%Y %H:%i:%s') WHERE ppayment_id = {$idPP}";
                $resultLogbook = $myDatabase->query($LogbooUpdate, MYSQLI_STORE_RESULT);

                // echo " update logbook 1<br> " . $LogbooUpdate;
                $return_value = '|OK|Update successfully. ';
            }else {
                $return_value = '|FAIL| Fail to update data.| ' . $sql;
            }
    }elseif ($_POST['_method'] == 'CANCEL'){
               
        $reject_remarks = $_POST['reject_remarks'];
        $idPP = $_POST['idPP'];
        $paymentMethod = $_POST['paymentMethod'];
        $paymentFor = $_POST['paymentFor'];
        $tableProperty = '';
        $updateProperty = '';
        $logRemaks = '';

         $sql = "UPDATE pengajuan_payment SET reject_remarks = '{$reject_remarks}', reject_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') WHERE idPP = {$idPP}";
         $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
       
         if($result !== false) {
              $updateProperty = 2;
              $logRemaks = '[CANCEL][Pengajuan-OA]';
                $sqlPP = "UPDATE pengajuan_payment SET status = 2  WHERE idPP = {$idPP}"; //UPDATE status Pengajuan Payment
               $resultPP = $myDatabase->query($sqlPP, MYSQLI_STORE_RESULT);

            //IF SETTLE
            if($paymentMethod == 3){
                $sqlxx = "SELECT payment_id, settle_amount, available_amount, dpp_dp_settle, dpp_available_amount FROM pengajuan_payment_dp where idPP = {$idPP}";
                $resultxx = $myDatabase->query($sqlxx, MYSQLI_STORE_RESULT);
                if($resultxx !== false && $resultxx->num_rows > 0) {
                    while($rowxx = $resultxx->fetch_object()) {
                        $amountDp = $rowxx->dpp_dp_settle + $rowxx->dpp_available_amount;
                        $updt = "UPDATE payment SET amount_converted = {$amountDp}, amount = {$amountDp} WHERE payment_id = {$rowxx->payment_id}";
                        $result = $myDatabase->query($updt, MYSQLI_STORE_RESULT);
                    }
                }
                              
                $sqly = "UPDATE pengajuan_payment_dp SET status = {$updateProperty} WHERE idPP = {$idPP}";
                $resulty = $myDatabase->query($sqly, MYSQLI_STORE_RESULT);
            }

            //UPDATE fc_payment_status di table TRANSACTION
            $statusColumn = '';
            if($paymentFor == 2){
                $sqlxy = "SELECT transaction_id, old_status FROM payment_oa where idPP = {$idPP}";
                $tableProperty = "payment_oa";
                $statusColumn = "fc_payment_status";
            }else if($paymentFor == 9){
                $sqlxy = "SELECT transaction_id, old_status FROM payment_handling where idPP = {$idPP}";
                $tableProperty = "payment_handling";
                $statusColumn = "hc_payment_status";

            }else if($paymentFor == 3){
                $sqlxy = "SELECT transaction_id, old_status FROM payment_ob where idPP = {$idPP}";
                $tableProperty = "payment_ob";
                $statusColumn = "uc_payment_status";

            }else if($paymentFor == 1){
                $sqlxy = "SELECT transaction_id, old_status FROM payment_curah where idPP = {$idPP}";
                $tableProperty = "payment_curah";
                $statusColumn = "curah_payment_status";

            }
            $resultxy = $myDatabase->query($sqlxy, MYSQLI_STORE_RESULT);
            if($resultxy !== false && $resultxy->num_rows > 0) {
                while($rowxy = $resultxy->fetch_object()) {
                    $sqlxy1 = "UPDATE TRANSACTION SET {$statusColumn} = {$rowxy->old_status} WHERE transaction_id = {$rowxy->transaction_id}";
                    $resultxy1 = $myDatabase->query($sqlxy1, MYSQLI_STORE_RESULT);
                }
            }     
               
            //Update PENGAJUAN_PKS_CONTRACT IF FREIGHT || HANDLING
            if($paymentFor != 3){
                $sqlx = "UPDATE pengajuan_pks_contract SET status = {$updateProperty} WHERE idPP = {$idPP}";
                $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);
            }
                      
            // UPDATE payment_oa, payment_ob, payment_handling, payment_curah status  = 4 || 2
            $sqlz = "UPDATE {$tableProperty} SET status = {$updateProperty} WHERE idPP = {$idPP}";
            $resultz = $myDatabase->query($sqlz, MYSQLI_STORE_RESULT); 
                  
            $sql1 = "UPDATE `pengajuan_payment` SET status = {$updateProperty} WHERE idPP = {$idPP}";
            $result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
                  
            $sqlLog = "UPDATE logbook_new set status1 = 2 where ppayment_id = {$idPP}";
            $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);

            $tempLog = $logRemaks. '['.$idPP.']';
            $log = "INSERT INTO log_pengajuan_payment(entry_by, entry_date, log ) 
                    value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
            $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
            if($result_log !== false) {
                $log_id = $myDatabase->insert_id;
            }  

            // echo " I I " . $sql . ' || ' . $sqlxy . ' || ' . $sqlxy1 . '||' . $sqlz . '||' . $sqlx;    

            $return_value = '|OK|Returned/Canceled  No.'.$idPP.' has successfully.|' .$testing . '||' .$sql1. '||' .$sql2;
         }else {
             $return_value = '|FAIL|Returned/canceled '. $idPP.' failed.|';
         }
     } 
    echo $return_value;
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'pengajuan_payment') {
    // <editor-fold defaultstate="collapsed" desc="pengajuan_payment">

    $return_value = '';
    $boolContinue = false;
    $boolBank = false;
    $boolUpdateTransaction = false;
    $boolUpdateShipment = false;
    $boolContinue2 = true;
    $boolContinue3 = true;
    $tempStamp = '';
    $periodPaymentFrom = '';
    $periodPaymentTo = '';
    $updateP = '';
    $swift = 'NULL';
    $uploadDocument = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentMethod = $myDatabase->real_escape_string($_POST['paymentMethod']);
    $paymentType = $myDatabase->real_escape_string($_POST['paymentType']);
    $stockpileLocation = $myDatabase->real_escape_string($_POST['stockpileLocation']);
    $paymentFor = $myDatabase->real_escape_string($_POST['paymentFor']);

    $paymentFrom = $myDatabase->real_escape_string($_POST['paymentFrom']);
    $paymentFrom1 = $myDatabase->real_escape_string($_POST['paymentFrom1']);
    $paymentFromUP = $myDatabase->real_escape_string($_POST['paymentFromUP']);
    $paymentFromHP = $myDatabase->real_escape_string($_POST['paymentFromHP']);

    $paymentTo = $myDatabase->real_escape_string($_POST['paymentTo']);
    $paymentTo1 = $myDatabase->real_escape_string($_POST['paymentTo1']);
    $paymentToUP = $myDatabase->real_escape_string($_POST['paymentToUP']);
    $paymentToHP = $myDatabase->real_escape_string($_POST['paymentToHP']);

    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockpileId1 = $myDatabase->real_escape_string($_POST['stockpileId1']);
    $stockpileId2 = $myDatabase->real_escape_string($_POST['stockpileId2']);
    $stockpileId3 = $myDatabase->real_escape_string($_POST['stockpileId3']);
    $stockpileId4 = $myDatabase->real_escape_string($_POST['stockpileId4']);

    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $vendorId1 = $myDatabase->real_escape_string($_POST['vendorId1']);
    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $vendorHandlingId = $myDatabase->real_escape_string($_POST['vendorHandlingId']);
    $vendorFreightId = $myDatabase->real_escape_string($_POST['vFid']);
    $freightCostId1 = $myDatabase->real_escape_string($_POST['contractPKHOA']);

    $totalPrice = $myDatabase->real_escape_string($_POST['totalPrice']);
    $totalPrice1 = $myDatabase->real_escape_string($_POST['totalPrice1']);
    $downPayment = $myDatabase->real_escape_string($_POST['downPayment']);


    $vendorBankId = $myDatabase->real_escape_string($_POST['vendorBankId']);
    $freightBankId = $myDatabase->real_escape_string($_POST['freightBankId']);
    $laborBankId = $myDatabase->real_escape_string($_POST['laborBankId']);
    $curahBankId = $myDatabase->real_escape_string($_POST['curahBankId']);
    $vendorHandlingBankId = $myDatabase->real_escape_string($_POST['vendorHandlingBankId']);

    $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
    $originalAmount = $amount;
	$ppnCur = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppnCur']));
    $pphCur = str_replace(",", "", $myDatabase->real_escape_string($_POST['pphCur']));
    $ppnOA = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppnOA']));
    $pphOA = str_replace(",", "", $myDatabase->real_escape_string($_POST['pphOA']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
	$totalShrink2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalShrink2']));
    $totalAddShrink = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalAddShrink']));

    $qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty']));
    $dpp = str_replace(",", "", $myDatabase->real_escape_string($_POST['dpp']));
    $grandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal']));

    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $slipNos = "";

    //FreightDownPayment
    $qtyFreight = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyFreight']));
    $priceFreight = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceFreight']));
    $terminFreight = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminFreight']));
    $stockpileIdFcDp = $myDatabase->real_escape_string($_POST['stockpileIdFcDp']);
    $freightIdFcDp = $myDatabase->real_escape_string($_POST['freightIdFcDp']);
    $vendorFreightIdDp = $myDatabase->real_escape_string($_POST['vendorFreightIdDp']);
    $contractPKHOA1 = $myDatabase->real_escape_string($_POST['contractPKHOA1']);
    $freightBankDp = $myDatabase->real_escape_string($_POST['freightBankDp']); 
    $contractNoDp = $myDatabase->real_escape_string($_POST['contractNoDp']); 
    $ppnStatus = $myDatabase->real_escape_string($_POST['ppnStatus']);
    $pphStatus = $myDatabase->real_escape_string($_POST['pphStatus']);


    //Unloading DP
    $qtyLabor = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyLabor']));
    $priceLabor = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceLabor']));
    $terminLabor = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminLabor']));
    $stockpileLaborDp = $myDatabase->real_escape_string($_POST['stockpileLaborDp']);
    $laborDp = $myDatabase->real_escape_string($_POST['laborDp']);
    $laborBankDp = $myDatabase->real_escape_string($_POST['laborBankDp']);
    $ppnOB = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppnOB']));
    $pphOB = str_replace(",", "", $myDatabase->real_escape_string($_POST['pphOB']));
    $ppnStatusOb = $myDatabase->real_escape_string($_POST['ppnStatusOb']);
    $pphStatusOb = $myDatabase->real_escape_string($_POST['pphStatusOb']);

        // $UCcontractPKHOA = $myDatabase->real_escape_string($_POST['UCcontractPKHOA']);
    $laborBankDp = $myDatabase->real_escape_string($_POST['laborBankDp']);
	$originalAmountDp = $myDatabase->real_escape_string($_POST['originalAmount']);


     //HandlingDownPayment
    $qtyHandlingDP = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyHandlingDP']));
    $priceHandlingDP = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceHandlingDP']));
    $terminHandlingDP = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminHandlingDP']));
    $stockpileVhDp = $myDatabase->real_escape_string($_POST['stockpileVhDp']);
    $vendorHandlingDp = $myDatabase->real_escape_string($_POST['vendorHandlingDp']);
    $vendorHandlingBankDp = $myDatabase->real_escape_string($_POST['vendorHandlingBankDp']);
    $contractHandlingDp = $myDatabase->real_escape_string($_POST['contractHandlingDp']);
	$ppnH = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppnH']));
	$pphH = str_replace(",", "", $myDatabase->real_escape_string($_POST['pphH']));
	$ppnStatusHC = $myDatabase->real_escape_string($_POST['ppnStatusHC']);
	$pphStatusHC = $myDatabase->real_escape_string($_POST['pphStatusHC']);
    $amountDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));


    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $bank = $myDatabase->real_escape_string($_POST['bank']);
    $rek = $myDatabase->real_escape_string($_POST['rek']);
    $swift = $myDatabase->real_escape_string($_POST['swift']);

    $taxInvoice = $myDatabase->real_escape_string($_POST['taxInvoice']);
    $invoiceNo = $myDatabase->real_escape_string($_POST['invoiceNo']);
    $invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    $idPP = $myDatabase->real_escape_string($_POST['idPP']);
    $urgent_payment_type = $myDatabase->real_escape_string($_POST['tipeBayar']);
    $urgent_payment_date = $myDatabase->real_escape_string($_POST['tglBayarUrgent']);
    $dppTotal = $myDatabase->real_escape_string($_POST['dppTotal']);

    $freightId_1 = $myDatabase->real_escape_string($_POST['freightId_1']);
    $paymentFrom_1 = $myDatabase->real_escape_string($_POST['paymentFrom_1']);
    $paymentTo_1 = $myDatabase->real_escape_string($_POST['paymentTo_1']);
    $stockpileId2_1 = $myDatabase->real_escape_string($_POST['stockpileId2_1']);
    $freightBankId_1 = $myDatabase->real_escape_string($_POST['freightBankId_1']);
    $tempLog = '';
    $tempFile = '';
  if($totalAddShrink == ''){
        $totalAddShrink = 0;
    }
    if($totalShrink2 == ''){
        $totalShrink2 = 0;
    }
    //FILE
    if (isset($_FILES['file']) && $_FILES['file']['size'] > 0) {
        $allowed = array('png', 'jpg', 'pdf', 'doc', 'docs', 'xls', 'xlsx');
        $fileName = $_FILES['file']['name'];
        $x = explode('.', $fileName);
        $ekstensi = strtolower(end($x));
        $ukuran = $_FILES['file']['size'];
        $file_tmp = $_FILES['file']['tmp_name'];

        if (in_array($ekstensi, $allowed) === true) {

            $attachmentPath = "./import/pengajuan-stockpile-tipePengajuan-yyyymmdd/";
            if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
                $temp = mkdir($attachmentPath, 0755, TRUE);
            else
                $temp = TRUE;

            if ($temp === TRUE) {
                $attachmentPath .= "/" . date("ymdHis") . "-" . basename($fileName);
                if (!move_uploaded_file($file_tmp, $attachmentPath)) {
                    echo '|FAIL|Error while uploading file.|';
                    die();
                }
            } else {
                echo '|FAIL|Error while creating directory.|';
                die();
            }


        } else {
            echo '|FAIL|EKSTENSI FILE YANG DI UPLOAD TIDAK DI PERBOLEHKAN.|';
            die();
        }
    } else {
        $attachmentPath = 'NULL';
        $uploadDocument = false;
    }

    if ($vendorHandlingId == '') {
        $vendorHandlingId = 'NULL';
    }
    //$vendorBank = 'NULL';
    //$beneficiary = 'NULL';


    if ($urgent_payment_type == 1 && $urgent_payment_date == '') {
        $boolContinue3 = false;
    }
	//else if ($urgent_payment_type == 0 && $urgent_payment_date != '') {
    //    $urgent_payment_date = '';
    //}

    if ($paymentFor == 0) {
        // PKS Kontrak
        if ($stockpileId != '' && $vendorId != '' && $stockpileContractId != '' && $grandTotal != 0) {
            // if($paymentMethod == 1) {
            if ($ppn > 0) {
                if ($taxInvoice != '') { //ini wajib di isi atau nda?
                    $boolContinue = true;
                }
            } else {
                $boolContinue = true;
            }
            //}
            $freightId = 'NULL';
            $laborId = 'NULL';
            $vendorBank = $vendorBankId;
            //$vendorBank = NULL;
            $vendorId1 = $vendorId;
            $contractPKHOA1 = 'NULL';
            $termin = 'NULL';
            if($ppn == 0 || $ppn == 'NULL'){
                $ppnStatus = 0;
            }else{
                $ppnStatus = 1;
            }

            if($pph == 0 || $pph = 'NULL'){
                $pphStatus = 0;
            }else{
                $pphStatus = 1;
            }
        }
    } else if ($paymentFor == 1) {
        $periodPaymentFrom = $paymentFrom1;
        $periodPaymentTo = $paymentTo1;
		 $ppn = $ppnCur;
            $pph = $pphCur;
        
        if ($paymentType == 2) {
            // PKS Curah
            if ($stockpileId1 != '' && $vendorId1 != '' && $grandTotal != 0) {
                if ($ppn > 0) {
                    if ($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
                $stockpileContractId = 'NULL';
                $freightId = 'NULL';
                $laborId = 'NULL';
                $vendorBank = $curahBankId;
                //$vendorBank = NULL;
                $contractPKHOA1 = 'NULL';
                $termin = 'NULL';
                // $vendorId1 = $vendorid1;
            }
        }
        if($ppn == 0 || $ppn == 'NULL'){
            $ppnStatus = 0;
        }else{
            $ppnStatus = 1;
        }

        if($pph == 0 || $pph == 'NULL'){
            $pphStatus = 0;
        }else{
            $pphStatus = 1;
        }
    } else if ($paymentFor == 9) {
        // HandlingC payment
        $periodPaymentFrom = $paymentFromHP;
        $periodPaymentTo = $paymentToHP;
		$stockpileContractId = 'NULL';
        $laborId = 'NULL';
        $freightId = 'NULL';
        $vendorId1 = 'NULL';
        $generalVendorId = 'NULL';

        if ($paymentMethod == 1 && $stockpileId4 != '' && $vendorHandlingId != '' && $grandTotal >= 0) {
            if ($ppn > 0) {
                if ($taxInvoice != '') {
                    $boolContinue = true;
                }
            } else {
                $boolContinue = true;
            }
            $stockpileContractId = 'NULL';
            $laborId = 'NULL';
            $freightId = 'NULL';
            $vendorId1 = 'NULL';
            $vendorBank = $vendorHandlingBankId;
            //$vendorBank = NULL;
            $contractPKHOA1 = 'NULL';
            $termin = 'NULL';
            if($ppn == 0 || $ppn == 'NULL'){
                $ppnStatus = 0;
            }else{
                $ppnStatus = 1;
            }

            if($pph == 0 || $pph == 'NULL'){
                $pphStatus = 0;
            }else{
                $pphStatus = 1;
            }
			
			 $ppn = $ppnH;
            $pph = $pphH;
        } //HANDLING DP
        else if($paymentMethod == 2 && $stockpileVhDp != '' && $vendorHandlingDp != '' && $vendorHandlingBankDp != '' && $amount != 0) {
            $boolContinue = true;
            $qty = $qtyHandlingDP;
            $price = $priceHandlingDP;
            $termin = $terminHandlingDP;
            $vendorBank = $vendorHandlingBankDp;
            $vendorHandlingId = $vendorHandlingDp;
            $handlingContract = $contractHandlingDp;
            $dpp = $originalAmountDp;
            $dppShrinkPrice = 0;
            $amount = $amountDp;
            $contractPKHOA1 = 'NULL';
            $ppnStatus = $ppnStatusHC;
            $pphStatus = $pphStatusHC;
            //  $sql = "SELECT pph FROM vendor_handling WHERE vendor_handling_id = {$vendorHandlingDp}";
            //         $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            //         if($result->num_rows == 1) {
            //             $row = $result->fetch_object();

            // 			$pph = $amount * ($row->pph/100);
            //         } else{
            // 			$pph = 0;
            // 		}
            $ppn = $ppnH;
            $pph = $pphH;
            $settle = 'NULL';
            $contractId_settle = $contractHandlingDp;
            $totalPrice = $originalAmountDp;
            if($ppnStatusHC == 0){
                $ppn = 0;
            }else{
                $ppn = $originalAmountDp * ($ppnH/100);
            }

            if($pphStatusHC == 0){
                $pph = 0;
            }else{
                $pph = $originalAmountDp * ($pphH/100);  
            }

           
        } 
    } else if ($paymentFor == 2) { //FREIGHT
        // FC payment
        $periodPaymentFrom = $paymentFrom;
        $periodPaymentTo = $paymentTo;
        //DP
        if($paymentMethod == 2 && $stockpileIdFcDp != '' && $freightIdFcDp != '' && $amount != 0 && $vendorFreightIdDp != '' && $contractNoDp != '' && $freightBankDp != '') {
            $boolContinue = true;
            $vendorFreightId = $vendorFreightIdDp;
            $stockpileContractId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
            $vendorId = 'NULL';
            $qty = $qtyFreight;
            $price = $priceFreight;
            $dpp = $originalAmountDp;
            $termin = $terminFreight;
            $freightId = $freightIdFcDp;
            $vendorBank = $freightBankDp;
            $contractId_settle = $contractNoDp;
            $settle = 'NULL';
            $totalPrice = $originalAmountDp;
            $dppShrinkPrice = 0;
            $contractPKHOA1 = 'NULL';

            if($ppnStatus == 0){
                $ppn = 0;
            }else{
                $ppn = $originalAmountDp * ($ppn/100);
            }

            if($pphStatus == 0){
                $pph = 0;
            }else{
                $pph = $originalAmountDp * ($pph/100);  
            }
       //     echo 'NILAI '.$pphStatus.' || '.$pph. '||' .$ppn. '|| ' .$ppnStatus;
        } else if ($paymentMethod == 1 && $stockpileId2 == 10 && $freightId == 26) {
            $boolContinue = true;
            $ppn = 0;
            $pph = 0;
            $freightId = 26;
            $stockpileContractId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
            $vendorId = 'NULL';
            $qty = 'NULL';
            $price = 'NULL';
            $vendorBank = $freightBankId;
            //$vendorBank = NULL;
            $grandTotal = $originalAmount;
            $termin = 'NULL';
            if($ppn == 0 || $ppn == 'NULL'){
                $ppnStatus = 0;
            }else{
                $ppnStatus = 1;
            }

            if($pph == 0 || $pph = 'NULL'){
                $pphStatus = 0;
            }else{
                $pphStatus = 1;
            }
        } elseif ($paymentMethod == 1 && $stockpileId2 != '' && $freightId != '' && $grandTotal >= 0 && $freightCostId1 != '') {
            if ($ppn > 0) {
                if ($taxInvoice != '') {
                    $boolContinue = true;
                }
            } else {
                $boolContinue = true;
            }
            $stockpileContractId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
            $vendorId = 'NULL';
            $vendorBank = $freightBankId;
            //$vendorBank = NULL;
            $contractPKHOA1 = $freightCostId1;
            $termin = 'NULL';
            $dpp = $totalPrice1;
            if($ppnOA > 0){
                $ppnStatus = 1;
            }else{
                $ppnStatus = 0;
            }

            if($pphOA > 1){
                $pphStatus = 1;
            }else{
                $pphStatus = 0;
            }

            $ppn = $ppnOA;
            $pph = $pphOA;

        } elseif ($paymentMethod == 1 && $stockpileId2_1 != '' && $freightId_1 != '' && $grandTotal >= 0) {
            if ($ppn > 0) {
                if ($taxInvoice != '') {
                    $boolContinue = true;
                }
            } else {
                $boolContinue = true;
            }
            $stockpileContractId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
            $vendorId = 'NULL';
            $vendorBank = $freightBankId;
            //$vendorBank = NULL;
            $contractPKHOA1 = $freightCostId1;
            $termin = 'NULL';
            $dpp = $totalPrice1;
            if ($contractPKHOA1 == '') {
                $contractPKHOA1 = 'NULL';
                $periodPaymentFrom = $paymentFrom_1;
                $periodPaymentTo = $paymentTo_1;
                $stockpileContractId = $stockpileId2_1;
                $vendorBank = $freightBankId_1;
                //	$vendorBank = NULL;
                $freightId = $freightId_1;
            } else {
                $contractPKHOA1 = $freightCostId1;
            }
			
			echo 'zzzz';
            $ppn = $ppnOA;
            $pph = $pphOA; 

            if($ppn > 1){
                $ppnStatus = 1;
            }else{
                $ppnStatus = 0;
            }

            if($pph > 0){
                $pphStatus = 1;
            }else{
                $pphStatus = 0;
            }

        }
    } else if ($paymentFor == 3) {
        // UNLOADING C payment
        $periodPaymentFrom = $paymentFromUP;
        $periodPaymentTo = $paymentToUP;
        $stockpileContractId = 'NULL';
        $freightId = 'NULL';
        $vendorId1 = 'NULL';
        $contractId = 'NULL';

        if ($laborBankId == '') {
            $laborBankId = 'NULL';
        }

        if ($paymentMethod == 1 && $stockpileId3 != '' && $laborId != '' && $grandTotal >= 0) {
            if ($ppn > 0) {
                if ($taxInvoice != '') {
                    $boolContinue = true;
                }
            } else {
                $boolContinue = true;
            }
            $stockpileContractId = 'NULL';
            $freightId = 'NULL';
            $vendorId1 = 'NULL';
            $vendorBank = $laborBankId;
            //$vendorBank = NULL;
            $contractPKHOA1 = 'NULL';
            $termin = 'NULL';
            $dpp = $amount;
            $price = $priceLabor;
            $ppn = $ppnOB;
            $pph = $pphOB;

            if($ppn == 0 || $ppn == 'NULL'){
                $ppnStatus = 0;
            }else{
                $ppnStatus = 1;
            }

            if($pph == 0 || $pph == 'NULL'){
                $pphStatus = 0;
            }else{
                $pphStatus = 1;
            }
        } else if($paymentMethod == 2 && $stockpileLaborDp != '' && $laborDp != '' && $amount != 0){
            $boolContinue = true;
            $vendorBank = $laborBankDp;
            $laborId = $laborDp;
            $qty = $qtyLabor;
            $price = $priceLabor;
            $termin = $terminLabor;
            $ppn = $ppnOB;
            $pph = $pphOB;
            $dpp = $originalAmountDp;
            $totalPrice = $originalAmountDp;
            $settle = 'NULL';
            $ppnStatus = $ppnStatusOb;
            $pphStatus = $pphStatusOb;
            $contractPKHOA1 = 'NULL';
            $dppShrinkPrice = 0;
            if($ppnStatus == 0){
                $ppn = 0;
            }else{
                $ppn = $originalAmountDp * ($ppn/100);
            }

            if($pphStatus == 0){
                $pph = 0;
            }else{
                $pph = $originalAmountDp * ($pph/100);  
            }
        }
    }

    if ($_POST['_method'] == 'INSERT') {
        if ($idPP == '' && $uploadDocument) {
            if ($paymentType != '' && $boolContinue && ($attachmentPath == 'NULL' || $attachmentPath != '') && $boolContinue3) {
                if ($paymentType == 2 && ($paymentFor == 0 || $paymentFor == 1 || $paymentFor == 2 || $paymentFor == 3 || $paymentFor == 9)) { //OUT
                    // <editor-fold defaultstate="collapsed" desc="PAYMENT - OUT - PKS Curah/FC/UC - UPDATE TRANSACTION">
                    if ($amount < $grandTotal || ($amount != 0 && $amount > $grandTotal)) {
                        $boolContinue2 = false;
                    } else {
                        $boolUpdateTransaction = true;

                        //KONTRAK
                        if ($paymentFor == 0) {
                            $whereProperty = " stockpile_contract_id = {$stockpileContractId} ";
                            $updateProperty = " ppayment_id ";

                            $sql = "SELECT GROUP_CONCAT(transaction_id) AS transaction_ids "
                                . "FROM `transaction` "
                                . "WHERE stockpile_contract_id = {$stockpileContractId} ";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $slipNos = $row->transaction_ids;
                            }
                            //CURAH
                        } else if ($paymentFor == 1) {
                            $whereProperty = "  vendor_id = {$vendorId1} ";
                            $updateProperty = " ppayment_id ";
                        }//FREIGHT
                        else if ($paymentFor == 2) {
                            $whereProperty = "  p.freight_id = {$freightId} ";
                            $updateProperty = " fc_ppayment_id ";
                        } //HANDLING
                        else if ($paymentFor == 9) {
                            $whereProperty = "  p.vendor_handling_id = {$vendorHandlingId} ";
                            $updateProperty = " hc_ppayment_id ";
                        } //UNLOADING
                        else if ($paymentFor == 3) {
                            $whereProperty = "  labor_id = {$laborId} ";
                            $updateProperty = " uc_ppayment_id ";
                        }

                        if (isset($_POST['checkedSlips'])) {
                            $checks = $_POST['checkedSlips'];
                            for ($i = 0; $i < sizeof($checks); $i++) {
                                if ($slipNos == '') {
                                    $slipNos .= $checks[$i];
                                } else {
                                    $slipNos .= ',' . $checks[$i];

                                }
                            }
                        }

                    }
                    // </editor-fold>
                }
                //transaction_id = checklist/$slipNos

                $sql = "INSERT INTO pengajuan_payment(payment_method, payment_type, stockpile_id, payment_for, vendor_id, vendor_bank_id, stockpile_contract_id, 
                        freight_id, vendor_handling_id, labor_id, qty, price, shrink, add_shrink, dpp, termin, amount, currency_id, ppn_amount, status_ppn,
                        pph_amount, status_pph, tax_invoice, invoice_no, invoice_date, file, remarks, beneficiary,  bank, rek, swift, periodeFrom, periodeTo, entry_date, dp_status, settlement_status, user, urgent_payment_type, urgent_payment_date) 
                        values ({$paymentMethod}, {$paymentType}, {$stockpileLocation}, {$paymentFor}, {$vendorId1}, {$vendorBank}, {$stockpileContractId}, 
                        {$freightId}, {$vendorHandlingId}, {$laborId}, {$qty}, {$price}, {$totalShrink2}, {$totalAddShrink}, {$dpp}, {$termin}, {$amount}, 1, {$ppn}, {$ppnStatus}, {$pph}, {$pphStatus},
                        '{$taxInvoice}', '{$invoiceNo}', STR_TO_DATE('$invoiceDate', '%d/%m/%Y %H:%i:%s'), '{$attachmentPath}', '{$remarks}', '{$beneficiary}', '{$bank}', '{$rek}', '{$swift}', 
                        STR_TO_DATE('{$periodPaymentFrom}', '%d/%m/%Y'),STR_TO_DATE('{$periodPaymentTo}', '%d/%m/%Y'), STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), 0, 0, {$_SESSION['userId']}, {$urgent_payment_type}, STR_TO_DATE('$urgent_payment_date', '%d/%m/%Y'))";


                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if ($result !== false) {
                    $idPP = $myDatabase->insert_id;

                    //Log INSERT Pengajuan OA
                    $tempLog = '[INSERT][Pengajuan-OA]' . '[' . $idPP . ']';
                    $log = "INSERT INTO log_pengajuan_OA(entry_by, entry_date, log) value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
                    $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
                    if ($result_log !== false) {
                        $log_id = $myDatabase->insert_id;
                    }

                    $dpUpdate = "UPDATE pengajuan_payment SET dp_status = 1 where freight_cost_id = {$contractPKHOA1} and payment_method = 2 and dp_status = 0 and idPP != {$idPP} ";
                    $resultDp = $myDatabase->query($dpUpdate, MYSQLI_STORE_RESULT);


                    if ($paymentFor == 2) {
                        //detail supplier
                        $sqlSupplier = "SELECT vendor_id FROM vendor WHERE vendor_id IN ({$vendorFreightId})";
                        $resultSupplier = $myDatabase->query($sqlSupplier, MYSQLI_STORE_RESULT);

                        if ($resultSupplier->num_rows > 0) {
                            while ($rowSup = $resultSupplier->fetch_object()) {
                                $sql = "INSERT INTO pengajuan_payment_supplier(idPP, vendor_id, entry_by, entry_date) values ({$idPP}, {$rowSup->vendor_id}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result1 = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                            if ($result1 !== false) {
                                $pp_supplier = $myDatabase->insert_id;
                            }
                        }

                    }
					
					if($paymentMethod != 1){
                        // $sqlyy = "UPDATE `pengajuan_payment_dp` SET idpp = {$idPP} WHERE payment_id IN ({$paymentIds}) AND STATUS = 0";
                        // $result = $myDatabase->query($sqlyy, MYSQLI_STORE_RESULT);

                        if($paymentFor == 2 || $paymentFor == 9 || $paymentFor == 1){
                            $sqlContract_settle ="SELECT contract_id FROM contract WHERE contract_id IN ({$contractId_settle})";
                            $resultContract = $myDatabase->query($sqlContract_settle, MYSQLI_STORE_RESULT);
                            if($resultContract->num_rows > 0){
                                while($rowCon = $resultContract->fetch_object()){
                                    $sql = "INSERT INTO pengajuan_pks_contract(idPP, contract_id) values ({$idPP}, {$rowCon->contract_id})";
                                    $result1 = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                }
                                if($result1 !== false){
                                    $pks_contract_id = $myDatabase->insert_id;
                                }
                            }
                        }
                    }

                    if ($boolUpdateTransaction) {
                        $sql = "UPDATE `transaction` SET {$updateProperty} = {$idPP} WHERE transaction_id IN ($slipNos)";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                        if ($paymentFor == 0) {
                            $sql2 = "UPDATE stockpile_contract SET ppayment_id = {$idPP} WHERE stockpile_contract_id = ($stockpileContractId)";
                            $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                        }
                    }

                    // //INSERT Logbook
                    $sqlLog = "INSERT INTO logbook_new (ppayment_id, type_pengajuan, entry_date, status1) values ({$idPP}, 1, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),0)";
                    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
                    if ($resultLog !== false) {
                        $logbook_id = $myDatabase->insert_id;
                    }

                    //NILAI DP
                    //Koment by Yeni
                    /*if($paymentMethod == 1 && $paymentFor == 2){
                        if($contractPKHOA1 > 0 || $contractPKHOA1 != 0){
                            $sqlDp = "SELECT (downPayment - amount_payment) AS sisaDp FROM pengajuan_dp
                                    WHERE freight_cost_id = {$contractPKHOA1} AND STATUS = 3  ORDER BY pengajuan_dp_id DESC LIMIT 1";
                            $resultDp = $myDatabase->query($sqlDp, MYSQLI_STORE_RESULT);
                            if($resultDp !== false && $resultDp->num_rows == 1) {
                                $rowDp = $resultDp->fetch_object();
                                if($rowDp->sisaDp == 0 || $rowDp->sisaDp < 0){
                                    $downPayment = 0;
                                }
                                if($downPayment > 0){
                                $sqlDp = "INSERT INTO pengajuan_dp (idpp, freight_cost_id, labor_id, handling_id, amount_payment, downPayment, dpp_amount, entry_date, entry_by, status) values ({$idPP}, {$contractPKHOA1}, {$laborId}, {$vendorHandlingId}, {$totalPrice}, {$downPayment}, {$totalPrice1}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$_SESSION['userId']}, 0)";
                                    $resultDp = $myDatabase->query($sqlDp, MYSQLI_STORE_RESULT);
                                    if($resultDp !== false) {
                                        $pengajuan_dp_id = $myDatabase->insert_id;
                                    }
                                }
                            }else {
                                $sqlDp = "INSERT INTO pengajuan_dp (idpp, freight_cost_id, labor_id, handling_id, amount_payment, downPayment, dpp_amount, entry_date, entry_by, status) values ({$idPP}, {$contractPKHOA1}, {$laborId}, {$vendorHandlingId}, {$totalPrice}, {$downPayment}, {$totalPrice1}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$_SESSION['userId']}, 0)";
                                $resultDp = $myDatabase->query($sqlDp, MYSQLI_STORE_RESULT);
                                if($resultDp !== false) {
                                    $pengajuan_dp_id = $myDatabase->insert_id;
                                }
                            }
                        }
                    }*/


                    $return_value = '|OK|Pengajuan payment ' . $idPP . ' has inserted successfully. ';
                } else {
                    $return_value = '|FAIL| Fail to insert data.| ' . $sql;
                }
            } else {
                $return_value = '|FAIL| pengajuan payment type/boolContinue is null.| ';
            }
        } else {
            $return_value = '|FAIL| Dokumen invoice belum di upload.| ';
        }
    } else {
        //UPDATE, CANCEL, REJECT
        if (isset($idPP) && $idPP != '') {
            if ($_POST['_method'] == 'REJECT') {

                $reject_remarks = $_POST['reject_remarks'];

                $sql = "INSERT INTO reject_ppayment (idPP, entry_date, entry_by, remarks, status) values ({$idPP}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']}, '{$reject_remarks}', 5)";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


                if ($result != false) {
                    $reject_id = $myDatabase->insert_id;

                    $sqlUpdate = "UPDATE `pengajuan_payment` SET  dp_status = 5, email_date = NULL WHERE idPP = {$idPP}";
                    $resultsUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

                    $updateLogbookQuery = "UPDATE logbook SET status1 = 4 WHERE ppayment_id = {$idPP}";
                    $updateLogbook = $myDatabase->query($updateLogbookQuery, MYSQLI_STORE_RESULT);

                    $tempLog = '[REJECT][Pengajuan-OA]' . '[' . $idPP . ']';
                    $log = "INSERT INTO log_pengajuan_OA(entry_by, entry_date, log) value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
                    $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
                    if ($result_log !== false) {
                        $log_id = $myDatabase->insert_id;
                    }
                    $return_value = '|OK|. Reject  ' . $reject_id . ' has successfully||';
                } else {
                    $return_value = '|Fail|. Reject  FAIL!|| ' . $sql;

                }
                echo $return_value;
                die();
                // </editor-fold>
            } elseif ($_POST['_method'] == 'CANCEL') {
                $reject_remarks = $_POST['reject_remarks'];

                $sql = "INSERT INTO reject_ppayment (idPP, entry_date, entry_by, remarks, status) values ({$idPP}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']}, '{$reject_remarks}', 2)";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if ($result !== false) {
                    $reject_id = $myDatabase->insert_id;

                    $sql1 = "UPDATE `pengajuan_payment` SET "
                        . "dp_status = 2 "
                        . "WHERE idPP = {$idPP}";
                    $result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);

                    $sql2 = "SELECT * FROM pengajuan_payment where idPP = {$idPP}";
                    $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                    if ($result2 !== false && $result2->num_rows == 1) {
                        $row1 = $result2->fetch_object();
                        //KONTRAK
                        if ($row1->payment_for == 0) {
                            $updateProperty = " ppayment_id ";
                            //CURAH
                        } else if ($row1->payment_for == 1) {
                            $updateProperty = " ppayment_id ";
                        }//FREIGHT
                        else if ($row1->payment_for == 2) {
                            $updateProperty = "fc_ppayment_id";
                        } //HANDLING
                        else if ($row1->payment_for == 9) {
                            $updateProperty = " hc_ppayment_id ";
                        } //UNLOADING
                        else if ($row1->payment_for == 3) {
                            $updateProperty = " uc_ppayment_id ";
                        }


                        //$updtTrans = "UPDATE `TRANSACTION` SET {$updateProperty} = NULL WHERE  {$updateProperty} IN ({$idPP})";
                        $updtTrans = "UPDATE `TRANSACTION` SET {$updateProperty} = NULL WHERE FIND_IN_SET ({$updateProperty}, {$idPP})";
                        $resultTrans = $myDatabase->query($updtTrans, MYSQLI_STORE_RESULT);

                        $sqlLog = "UPDATE logbook set status1 = 2    where ppayment_id = {$idPP}";
                        $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);

                        //13/01/2021
                        /* $sql = "DELETE FROM pengajuan_dp where idPP = {$idPP} and status = 0";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/

                        //DELETE PENGAJUAN_PAYMENT_SUPP IF fREIGHT
                        if ($row1->payment_for == 2) {
                            $sqlSupplier = "DELETE FROM pengajuan_payment_supplier WHERE idPP = {$idPP}";
                            $resultSupplier = $myDatabase->query($sqlSupplier, MYSQLI_STORE_RESULT);

                            $sqlPKHOA = "DELETE FROM ppayment_kontrakPKHOA WHERE idPP = {$idPP}";
                            $resultPKHOA = $myDatabase->query($sqlPKHOA, MYSQLI_STORE_RESULT);
                        }
                    }

                    $tempLog = '[CANCEL][Pengajuan-OA]' . '[' . $idPP . ']';
                    $log = "INSERT INTO log_pengajuan_OA(entry_by, entry_date, log) value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
                    $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
                    if ($result_log !== false) {
                        $log_id = $myDatabase->insert_id;
                    }

                    $return_value = '|OK|Returned/Canceled ' . $idPP . ' has successfully.|';
                } else {
                    $return_value = '|FAIL|Returned/canceled ' . $idPP . ' failed.|';
                }
            } elseif ($_POST['_method'] == 'UPDATE') {
                $whereStatus = '';
                $sqlReject = "SELECT * FROM reject_ppayment WHERE idPP = {$idPP}";
                $resultReject = $myDatabase->query($sqlReject, MYSQLI_STORE_RESULT);
                if ($resultReject !== false && $resultReject->num_rows == 1) {
                    $sqlDelete = "DELETE FROM reject_ppayment where idPP = {$idPP}";
                    $resultDelete = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

                    $whereStatus = " dp_status = 0, email_date = NULL, re_pengajuan = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') , re_pengajuan_user = {$_SESSION['userId']}, ";

                    $LogbooUpdate = "UPDATE logbook SET status1 = 0 WHERE ppayment_id = {$idPP}";
                    $resultLogbook = $myDatabase->query($LogbooUpdate, MYSQLI_STORE_RESULT);

                }

                if ($attachmentPath != 'NULL') {
                    $tempFile = " file = '{$attachmentPath}', ";
                }
                $sql = "UPDATE pengajuan_payment
                        SET tax_invoice = '{$taxInvoice}',
                        invoice_no = '{$invoiceNo}',
                        invoice_date = STR_TO_DATE('$invoiceDate', '%d/%m/%Y %H:%i:%s'),
                        urgent_payment_type = {$urgent_payment_type},
                        urgent_payment_date = STR_TO_DATE('$urgent_payment_date', '%d/%m/%Y'),
                        {$whereStatus}
                        {$tempFile}
                        remarks = '{$remarks}'
                        WHERE idPP = {$idPP}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if ($result !== false) {
                    $tempLog = '[UPDATE][Pengajuan-OA]' . '[' . $idPP . ']';
                    $log = "INSERT INTO log_pengajuan_OA(entry_by, entry_date, log) value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
                    $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
                    if ($result_log !== false) {
                        $log_id = $myDatabase->insert_id;
                    }

                    $return_value = '|OK|Update successfully. ' . $sqlReject;
                } else {
                    $return_value = '|FAIL| Fail to update data.| ' . $sql;
                }
            }
        } else {
            $return_value = '|FAIL|Record not found.|';
        }
    }
//$return_value = $test;


    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'approve_invoice_notim') {
        // <editor-fold defaultstate="collapsed" desc="return_payment">
        $return_value = '';
        $vendorAll = '';
        $exchangeRate = 1;
        $uploadDocument = true;
        $whereproperty = '';
        $vendorBankId = '';
    
        $duedate = $myDatabase->real_escape_string($_POST['duedate']);
        $paymentMethod = $myDatabase->real_escape_string($_POST['paymentMethod']);
        $idPP = $myDatabase->real_escape_string($_POST['idPP']);
        $paymentFor = $myDatabase->real_escape_string($_POST['paymentForId']);
        $generatedInvoiceNo = $myDatabase->real_escape_string($_POST['generatedInvoiceNo']);
        $vendorId1 = $myDatabase->real_escape_string($_POST['vendorId']);
        $freightId = $myDatabase->real_escape_string($_POST['freightId_1']);
        $laborId = $myDatabase->real_escape_string($_POST['laborId']);
      //  echo " B " .$laborId;
        $vendorHandlingId = $myDatabase->real_escape_string($_POST['vendorHandlingId']);
        $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
        $dpp = str_replace(",", "", $myDatabase->real_escape_string($_POST['dppamount']));
        $ppn = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalppn']));
        $pph = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalpph']));
        $totalPrice = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalprice']));
        $remarks = str_replace(",", "", $myDatabase->real_escape_string($_POST['remarks'])); 
        $taxInvoice = str_replace(",", "", $myDatabase->real_escape_string($_POST['taxInvoice'])); 
    
        //FreightDownPayment
        $freightIdFcDp = $myDatabase->real_escape_string($_POST['freightIdFcDp']); //currency kosong
        $vendorHandlingDp = $myDatabase->real_escape_string($_POST['vendorHandlingDp']); //currency kosong
        $laborDp = $myDatabase->real_escape_string($_POST['laborDp']);
        $invId = $myDatabase->real_escape_string($_POST['invId']);

        $curahBankId = $myDatabase->real_escape_string($_POST['curahBankId']);
        $curahBankDp = $myDatabase->real_escape_string($_POST['curahBankDp']);
        $freightBankId_1 = $myDatabase->real_escape_string($_POST['freightBankId_1']);
        $freightBankDp = $myDatabase->real_escape_string($_POST['freightBankDp']);
        $laborBankId = $myDatabase->real_escape_string($_POST['laborBankId']);
        $laborBankDp = $myDatabase->real_escape_string($_POST['laborBankDp']);
        $handlingBankId = $myDatabase->real_escape_string($_POST['vendorHandlingBankId']);
        $handlingBankIdDp = $myDatabase->real_escape_string($_POST['vendorHandlingBankDp']);

        $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
        $bankText = $myDatabase->real_escape_string($_POST['bank']);
        $Norek = $myDatabase->real_escape_string($_POST['rek']);
        $swift = $myDatabase->real_escape_string($_POST['swift']);




        //FILE
        if (isset($_FILES['file2']) && $_FILES['file2']['size'] > 0) {
            $allowed = array('png', 'jpg', 'pdf', 'doc', 'docs', 'xls', 'xlsx');
            $fileName = $_FILES['file2']['name'];
            $x = explode('.', $fileName);
            $ekstensi = strtolower(end($x));
            $ukuran = $_FILES['file2']['size'];
            $file_tmp = $_FILES['file2']['tmp_name'];
    
            if (in_array($ekstensi, $allowed) === true) {
    
                $attachmentPath = "./import/pengajuan-bukti-email/";
                    if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
                        $temp = mkdir($attachmentPath, 0755, TRUE);
                    else
                        $temp = TRUE;
    
                    if ($temp === TRUE) {
                        $attachmentPath .= "/" . date("ymdHis") . "-" . basename($fileName);
                        if (!move_uploaded_file($file_tmp, $attachmentPath)) {
                            echo '|FAIL|Error while uploading file.|';
                            die();
                        }
                    } else {
                        echo '|FAIL|Error while creating directory.|';
                        die();
                    }
    
                
            } else {
                echo '|FAIL|EKSTENSI FILE YANG DI UPLOAD TIDAK DI PERBOLEHKAN.|';
                die();
            }
        } else {
            $attachmentPath = 'NULL';
            $uploadDocument = false;
        }
		if($ppn == '' ){
			$ppn = 0;
		}
		if($pph == ''){
			$pph = 0;
		}
        if ($paymentFor == 1) {
            //CURAH
            $freightId = 0;
            $laborId = 0;
            $vendorHandlingId = 0;
            $vendorBankId = $curahBankId;
            if($paymentMethod == 2){
                $vendorBankId = $curahBankDp;
            }
			$pph = 0;
        } else if ($paymentFor == 9) {
            // HandlingC payment
            $laborId = 0;
            $freightId = 0;
            $vendorId1 = 0;
            $vendorBankId = $handlingBankId;
            if($paymentMethod == 2){
                $vendorHandlingId = $vendorHandlingId;
                $vendorBankId = $handlingBankIdDp;
            }
        } else if ($paymentFor == 2) { //FREIGHT
            $laborId = 0;
            $vendorId1 = 0;
            $vendorHandlingId = 0;
            $vendorBankId = $freightBankId_1;
            if ($paymentMethod == 2) {
                //DP
                $freightId = $freightIdFcDp;
                $vendorBankId = $freightBankDp;
             } 
            
        } else if ($paymentFor == 3) {
            // UNLOADING C payment
            $vendorBankId = $laborBankId;
            $freightId = 0;
            $vendorId1 = 0;
            $vendorHandlingId = 0;
            if ($paymentMethod == 2) {
                $vendorBankId = $laborBankDp;
            }
        }
    
        $amountConvert = 0;
        $amountConvert = $amount * $exchangeRate;
        if ($_POST['_method'] == 'INSERT') {
            if ($idPP != '' ) {// && $uploadDocument
                // if($amount > 0){
                //     $statusPayment = 0;
                // }else if($amount <= 0){
                //     $statusPayment = 1;
                // }
                $statusPayment = 0;

                if($invId != ''){
                    $sql = "UPDATE invoice_notim SET idPP = NULL WHERE inv_notim_id = {$invId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);      
                    // echo " A " . $sql;  
                }
            
                $sql = "INSERT INTO invoice_notim (idPP, type_transaction_id, inv_notim_no, vendor_id, freightId, laborId,
                                    vendorHandlingId, dpp, total_ppn, total_pph, amount, amount_converted, file1, entry_date, entry_by, due_date_inv, status_payment, invoice_status )
                            values ({$idPP}, {$paymentFor}, '{$generatedInvoiceNo}', {$vendorId1}, {$freightId}, {$laborId}, {$vendorHandlingId}, {$dpp}, {$ppn}, {$pph}, {$amount},
                                    {$amount}, '{$attachmentPath}', STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']}, 
                                    STR_TO_DATE('{$duedate}', '%d/%m/%Y %H:%i:%s'), {$statusPayment}, 1)";
          
              $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
              
                if($result !== false) {
                    $inv_notim_id = $myDatabase->insert_id;
                    $invoiceId = $inv_notim_id;			
                    
                    // if($amount <= 0){
                    //     $sqlPP = "UPDATE pengajuan_payment SET status = 3, remarks = '{$remarks}', tax_invoice = '{$taxInvoice}'
                    //             WHERE idPP = {$idPP}"; //UPDATE status Pengajuan Payment
                    //     $resultPP = $myDatabase->query($sqlPP, MYSQLI_STORE_RESULT);
                    // }
                    // else if($amount > 0){
                    //     $sqlPP = "UPDATE pengajuan_payment SET status = 1, remarks = '{$remarks}', tax_invoice = '{$taxInvoice}'  WHERE idPP = {$idPP}"; //UPDATE status Pengajuan Payment
                    //     $resultPP = $myDatabase->query($sqlPP, MYSQLI_STORE_RESULT);
                    // }
                    $sqlx = "UPDATE pengajuan_payment SET status = 1, remarks = '{$remarks}', tax_invoice = '{$taxInvoice}',
                             vendor_bank_id = {$vendorBankId}, beneficiary = '{$beneficiary}', bank = '{$bankText}',
                            rek = '{$Norek}', swift = '{$swift}' WHERE idPP = {$idPP}"; 
                    $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);
                // echo $sqlx;
    
                    //SETTLE 50%
                    if($paymentMethod == 3){
                        $sql = "UPDATE pengajuan_payment_dp SET status = 1, inv_notim_id = {$inv_notim_id} WHERE idpp = {$idPP}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }
    
                    if($paymentFor == 2 && $paymentMethod != 2 ){
                        $sqlx = "UPDATE payment_oa SET inv_notim_id = {$inv_notim_id} WHERE idpp = {$idPP}";
                        $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);

                    }else if($paymentFor == 9 && $paymentMethod != 2){
                        $sqlx = "UPDATE payment_handling SET inv_notim_id = {$inv_notim_id} WHERE idpp = {$idPP}";
                        $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);
                    }else if($paymentFor == 3 && $paymentMethod != 2){
                        $sqlx = "UPDATE payment_ob SET inv_notim_id = {$inv_notim_id} WHERE idpp = {$idPP}";
                        $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);
    
                    }else if($paymentFor == 1){
                        $sqlx = "UPDATE payment_curah SET inv_notim_id = {$inv_notim_id} WHERE idpp = {$idPP}";
                        $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);
                    }
    
                    //UPDATE LOGBOOK PKS
        
                    $sqlLog = "UPDATE logbook_new set inv_notim_id = {$inv_notim_id}, status1 = 1 where ppayment_id = {$idPP}";
                    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
    
                    $tempLog = '[INSERT][APPROVE-INVOICE-NOTIM]'. '['.$inv_notim_id.']';
                    $log = "INSERT INTO log_invoice_notim(entry_by, entry_date, log) value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
                    $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
                    if($result_log !== false) {
                        $log_id = $myDatabase->insert_id;
                    }
    
                 //   insertGeneralLedger($myDatabase, 'INVOICE NOTIM', "NULL", $inv_notim_id);
                 //    insertReportGL($myDatabase, 'INVOICE NOTIM', "NULL", $inv_notim_id);
    
                    $return_value = '|OK|Approve Pengajuan Invoice Berhasil|'.$sql;
                }else {
                    $return_value = '|FAIL|Approve Pengajuan Invoice failed.|'.$sql;
                }
            }else {
                $return_value = '|OK|GAGAL, Dokumen belum di upload.|'; 
            }
        }else if ($_POST['_method'] == 'UPDATE') {

            if($attachmentPath != 'NULL'){
                $tempFile = " file1 = '{$attachmentPath}', ";
            }

            $sql1 = "UPDATE invoice_notim
                    SET {$tempFile} due_date_inv = STR_TO_DATE('$duedate', '%d/%m/%Y %H:%i:%s'), invoice_status = 1
                    WHERE idPP = {$idPP}";
            $result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
            if($result1 !== false) {
                $sqlPP = "UPDATE pengajuan_payment SET remarks = '{$remarks}', tax_invoice = '{$taxInvoice}'  WHERE idPP = {$idPP}"; //UPDATE status Pengajuan Payment
                $resultPP = $myDatabase->query($sqlPP, MYSQLI_STORE_RESULT);

                $return_value = '|OK|Update Success|'.$sql;
            }else{
                $return_value = '|OK|Update Fail|'.$sql;
            }
        }elseif ($_POST['_method'] == 'RETURNED') {
            $reject_remarks = $_POST['reject_remarks'];
            $invId = $_POST['invId'];
            $idPP = $_POST['idPP'];
            $paymentMethod = $_POST['method'];
            $paymentFor = $_POST['paymentFor'];

            $sql = "UPDATE invoice_notim SET payment_id = NULL, invoice_status = 2, return_remarks = '{$reject_remarks}', return_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') WHERE inv_notim_id = {$invId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($result !== false) {
                if($paymentFor == 2 && $paymentMethod != 2 ){
                    $sqlx = "UPDATE payment_oa SET inv_notim_id = NULL, old_inv_id = {$invId} WHERE idpp = {$idPP}";
                    $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);

                }else if($paymentFor == 9 && $paymentMethod != 2){
                    $sqlx = "UPDATE payment_handling SET inv_notim_id = NULL, old_inv_id = {$invId}  WHERE idpp = {$idPP}";
                    $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);
                }else if($paymentFor == 3 && $paymentMethod != 2){
                    $sqlx = "UPDATE payment_ob SET inv_notim_id = NULL, old_inv_id = {$invId}  WHERE idpp = {$idPP}";
                    $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);

                }else if($paymentFor == 1){
                    $sqlx = "UPDATE payment_curah SET inv_notim_id = NULL, old_inv_id = {$invId}  WHERE idpp = {$idPP}";
                    $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);
                }

                $sqlLog = "UPDATE logbook_new set inv_notim_id = NULL, status1 = 0 where ppayment_id = {$idPP}";
                $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
                
                // echo " RETRURN " . $sqlx. ' || ' . $sql . ' || ' . $sqlLog;

                $tempLog = '[INSERT][RETURNED-INVOICE-NOTIM]'. '['.$inv_notim_id.']';
                $log = "INSERT INTO log_approve_invoice_notim(entry_by, entry_date, log) value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
                $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
                if($result_log !== false) {
                    $log_id = $myDatabase->insert_id;
                }

                // insertGeneralLedger($myDatabase, 'RETURN INVOICE NOTIM', "NULL", $invId);
                //  insertReportGL($myDatabase, 'RETURN INVOICE NOTIM', "NULL", $invId);	

                $return_value = '|OK|Return Invoice Berhasil|'.$idPP;
            }else{
                $return_value = '|FAIL|Return Invoice failed.|'.$invId;

            }
        }else if ($_POST['_method'] == 'REJECT') {
    
            $reject_remarks = $_POST['reject_remarks'];
            $idPP = $_POST['idPP'];
            $invId = $_POST['invId'];
    
            $sqlUpdate = "UPDATE `pengajuan_payment` SET  status = 4, reject_remarks = '{$reject_remarks}', reject_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),
                             email_date = NULL WHERE idPP = {$idPP}";
            $resultsUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
            //echo $sqlUpdate;
            if($resultsUpdate !== false) {
                $return_value = '|OK|.No.Reject  ' . $reject_id.' has successfully||' .$sqlUpdate;
        
                $sql = "UPDATE invoice_notim SET idPP = NULL WHERE inv_notim_id = {$invId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                // echo "BB" .$sql;
    
                $tempLog = '[REJECT][Pengajuan-OA]'. '['.$idPP.']';
                $log = "INSERT INTO log_pengajuan_payment(entry_by, entry_date, log) 
                        value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
                $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
            }else{
                $return_value = '|FAIL|Reject FAIL ||' .$sqlUpdate;
            }   
       }
        echo $return_value;
        
    }elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnalInvNotim') {
        // <editor-fold defaultstate="collapsed" desc="return_payment">
        
        $return_value = '';
        
        $sqlNotim = "SELECT * FROM `invoice_notim` WHERE inv_notim_id IN (78)";
        $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
    //  echo $sqlNotim;
        if($resultNotim !== false && $resultNotim->num_rows > 0) {
            while($rowNotim = $resultNotim->fetch_object()) {
                $invoiceId = $rowNotim->inv_notim_id;
                if($invoiceId != '') {

                   insertGeneralLedger($myDatabase, 'INVOICE NOTIM', "NULL", $invoiceId);
                   insertReportGL($myDatabase, 'INVOICE NOTIM', "NULL", $invoiceId);
                    // insertGeneralLedger($myDatabase, 'RETURN INVOICE NOTIM', $invoiceId);
                    // insertReportGL($myDatabase, 'RETURN INVOICE NOTIM', $invoiceId);

                        $return_value = '|OK|Inv has successfully.|' .$rowNotim->idPP;
                    
                } else {
                    $return_value = '|FAIL|Record not found.|';
                }
            }
        }
        echo $return_value;
        // </editor-fold>
    }  
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'approve_invoice_pks') {
    // <editor-fold defaultstate="collapsed" desc="return_payment">
    $return_value = '';
    $vendorAll = '';
    $exchangeRate = 1;

    $duedate = $myDatabase->real_escape_string($_POST['duedate']);
    $paymentMethod = $myDatabase->real_escape_string($_POST['paymentMethod']);
    $idPP = $myDatabase->real_escape_string($_POST['idPP']);
    $paymentFor = $myDatabase->real_escape_string($_POST['paymentFor']);
    $generatedInvoiceNo = $myDatabase->real_escape_string($_POST['generatedInvoiceNo']);
    $vendorId1 = $myDatabase->real_escape_string($_POST['vendorId1']);
    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $vendorHandlingId = $myDatabase->real_escape_string($_POST['vendorHandlingId']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = $myDatabase->real_escape_string($_POST['exchangeRate']);
    $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
    $bankId = $myDatabase->real_escape_string($_POST['bankId']);

    //FreightDownPayment
    $freightIdFcDp = $myDatabase->real_escape_string($_POST['freightIdFcDp']); //currency kosong

    //FILE
    if (isset($_FILES['file2']) && $_FILES['file2']['size'] > 0) {
        $allowed = array('png', 'jpg', 'pdf', 'doc', 'docs', 'xls', 'xlsx');
        $fileName = $_FILES['file2']['name'];
        $x = explode('.', $fileName);
        $ekstensi = strtolower(end($x));
        $ukuran = $_FILES['file2']['size'];
        $file_tmp = $_FILES['file2']['tmp_name'];

        if (in_array($ekstensi, $allowed) === true) {

            $attachmentPath = "./import/pengajuan-bukti-email/";
            if ($ukuran < 1044070) {
                if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
                    $temp = mkdir($attachmentPath, 0755, TRUE);
                else
                    $temp = TRUE;

                if ($temp === TRUE) {
                    $attachmentPath .= "/" . date("ymdHis") . "-" . basename($fileName);
                    if (!move_uploaded_file($file_tmp, $attachmentPath)) {
                        echo '|FAIL|Error while uploading file.|';
                        die();
                    }
                } else {
                    echo '|FAIL|Error while creating directory.|';
                    die();
                }

            } else {
                echo '|FAIL|UKURAN FILE TERLALU BESAR.|';
                die();
            }
        } else {
            echo '|FAIL|EKSTENSI FILE YANG DI UPLOAD TIDAK DI PERBOLEHKAN.|';
            die();
        }
    } else {
        $attachmentPath = 'NULL';
    }


    if ($paymentFor == 1) {
        //CURAH
        $freightId = 'NULL';
        $laborId = 'NULL';
        $vendorHandlingId = 'NULL';
    } else if ($paymentFor == 9) {
        // HandlingC payment
        $laborId = 'NULL';
        $freightId = 'NULL';
        $vendorId1 = 'NULL';

    } else if ($paymentFor == 2) { //FREIGHT
        $testing = '';
        if ($paymentMethod == 2) {
            //DP
            $testing = "test";
            $freightId = $freightIdFcDp;
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
            $vendorHandlingId = 'NULL';
        } else {
            //payment
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
            $vendorHandlingId = 'NULL';
        }
    } else if ($paymentFor == 3) {
        // UNLOADING C payment
        $freightId = 'NULL';
        $vendorId1 = 'NULL';
        $vendorHandlingId = 'NULL';
    }

    $amountConvert = 0;
    $amountConvert = $amount * $exchangeRate;


    if ($idPP != '') {
        /*$sql = "INSERT INTO invoice_notim (idPP, type_transaction_id, inv_notim_no, vendor_id, freightId, laborId,
                            vendorHandlingId, bankId, currency, kurs, amount, amount_converted, file1, entry_date, entry_by, due_date_inv)
                    values ({$idPP}, {$paymentFor}, '{$generatedInvoiceNo}', {$vendorId1}, {$freightId}, {$laborId}, {$vendorHandlingId}, {$bankId}, {$currencyId},
                     {$exchangeRate}, {$amount}, {$amountConvert}, '{$attachmentPath}', STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']}, STR_TO_DATE('{$duedate}', '%d/%m/%Y %H:%i:%s'))";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $inv_notim_id = $myDatabase->insert_id;
			$invoiceId = $inv_notim_id;

            $sqlPP = "UPDATE pengajuan_payment SET payment_status = 1, inv_notim_id = {$inv_notim_id} WHERE idPP = {$idPP}"; //UPDATE status Pengajuan Payment
            $resultPP = $myDatabase->query($sqlPP, MYSQLI_STORE_RESULT);
            //echo $sqlPP;

            //UPDATE LOGBOOK PKS
            $sqlLog = "UPDATE logbook set inv_notim_id = {$inv_notim_id}, status1 = 1 where ppayment_id = {$idPP}";
            $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);

            $tempLog = '[INSERT][APPROVE-INVOICE-PKS]'. '['.$inv_notim_id.']';
            $log = "INSERT INTO log_approve_invoice_notim(entry_by, entry_date, log) value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
            $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
            if($result_log !== false) {
                $log_id = $myDatabase->insert_id;
            }

			insertGeneralLedger($myDatabase, 'INVOICE NOTIM', $invoiceId);

            $return_value = '|OK|Approve Pengajuan Invoice Berhasil|'.$sql;
        }else {
            $return_value = '|FAIL|Approve Pengajuan Invoice failed.|'.$sql;
        }*/
        $sqlPP = "UPDATE pengajuan_payment SET dp_status = 1 WHERE idPP = {$idPP}"; //UPDATE status Pengajuan Payment
        $resultPP = $myDatabase->query($sqlPP, MYSQLI_STORE_RESULT);
        //echo $sqlPP;

        //UPDATE LOGBOOK PKS
        $sqlLog = "UPDATE logbook_new set status1 = 1 where ppayment_id = {$idPP}";
        $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);

        $return_value = '|OK|Receive pengajuan payment Berhasil|';


    }
    echo $return_value;
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'return_sales') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $sales_Id = $myDatabase->real_escape_string($_POST['sales_Id']);
    // </editor-fold>

    if ($sales_Id != '') {
        $sql = "UPDATE `sales` SET return_status = 1 WHERE sales_id = {$sales_Id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Sales has successfully Returned.|';
        } else {
            $return_value = '|FAIL|Returned Sales failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'internalTF_data') {
        $return_value = '';
        $vendorAll = '';
        $exchangeRate = 1;
        $uploadDocument = true;
        $whereproperty = '';
    
        $paymentMethod = $myDatabase->real_escape_string($_POST['paymentMethod']);
        $paymentFor = $myDatabase->real_escape_string($_POST['paymentFor']);
        $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
        $exchangeRate = $myDatabase->real_escape_string($_POST['exchangeRate']);
        $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
        $stockpile =  $myDatabase->real_escape_string($_POST['stockpile']);
        $stockpileLocation = $myDatabase->real_escape_string($_POST['stockpileLocation']);
        $paymentType = $myDatabase->real_escape_string($_POST['paymentType']);
        $periodeFrom = $myDatabase->real_escape_string($_POST['periodeFrom']);
        $periodeTo = $myDatabase->real_escape_string($_POST['periodeTo']);
        $remarks = $myDatabase->real_escape_string($_POST['remarks']);
        $internalTF_id = $myDatabase->real_escape_string($_POST['internalTF_id']);
        $bankId = $myDatabase->real_escape_string($_POST['bankId']);
        $requestpaymentType = $myDatabase->real_escape_string($_POST['requestpaymentType']);
        if($requestpaymentType == 1){
            $requestPaymentDate = $myDatabase->real_escape_string($_POST['requestPaymentDate1']);
        }else{
            $requestPaymentDate = $myDatabase->real_escape_string($_POST['requestPaymentDate']);
        }
    
        $tempFile = '';
        $reject_remarks = '';
    
        //FILE    
        if (isset($_FILES['file']) && $_FILES['file']['size'] > 0) {
            echo $_FILES['file']['size'] ;
            $allowed = array('png', 'jpg', 'pdf', 'doc', 'docs', 'xls', 'xlsx');
            $fileName = $_FILES['file']['name'];
            $x = explode('.', $fileName);
            $ekstensi = strtolower(end($x));
            $ukuran = $_FILES['file']['size'];
            $file_tmp = $_FILES['file']['tmp_name'];
    
            if (in_array($ekstensi, $allowed) === true) {
    
                $attachmentPath = "./import/dokument-internal-transfer/";
                    if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
                        $temp = mkdir($attachmentPath, 0755, TRUE);
                    else
                        $temp = TRUE;
    
                    if ($temp === TRUE) {
                        $attachmentPath .= "/" . date("ymdHis") . "-" . basename($fileName);
                            if (!move_uploaded_file($file_tmp, $attachmentPath)) {
                                echo '|FAIL|Error while uploading file.|';
                                die();
                            }
                    } else {
                        echo '|FAIL|Error while creating directory.|';
                        die();
                    }
    
                
            } else {
                echo '|FAIL|EKSTENSI FILE YANG DI UPLOAD TIDAK DI PERBOLEHKAN.|';
                die();
            }
        } 
    
        if ($_POST['_method'] == 'INSERT' && $internalTF_id == '') {
                if($amount > 0){
                    $statusPayment = 0;
                }else if($amount <= 0){
                    $statusPayment = 1;
                }
                $sql = "INSERT INTO pengajuan_internalTF (stockpile, payment_method, payment_type, payment_for, periode_from,
                                    periode_to, amount, remarks, file, entry_date, entry_by, bank_id, request_payment_type, request_payment_date)
                            values ({$stockpileLocation}, {$paymentMethod}, {$paymentType}, {$paymentFor}, STR_TO_DATE('$periodeFrom', '%d/%m/%Y %H:%i:%s'), STR_TO_DATE('$periodeTo', '%d/%m/%Y %H:%i:%s'), 
                                    {$amount}, '{$remarks}', '{$attachmentPath}', STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$_SESSION['userId']}, {$bankId}, {$requestpaymentType}, STR_TO_DATE('$requestPaymentDate', '%d/%m/%Y'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                echo $sql;
    
                if($result !== false) {
                    $internalTF_id = $myDatabase->insert_id;
    
                    $return_value = '|OK|Data internal transfer berhasil di input|'.$sql;
                }else {
                    $return_value = '|FAIL|Data internal transfer gagal di input|'.$sql;
                }
        }
        else if ($_POST['_method'] == 'UPDATE' && $internalTF_id != '') {
            $whereStatus = '';
            if($attachmentPath != ''){
                $tempFile = " file = '{$attachmentPath}', ";
            }
            $sql = "UPDATE pengajuan_internalTF
                    SET {$tempFile}
                    periode_from = STR_TO_DATE('$periodeFrom', '%d/%m/%Y %H:%i:%s'),
                    periode_to = STR_TO_DATE('$periodeTo', '%d/%m/%Y %H:%i:%s'),
                    amount = {$amount},
                    stockpile = {$stockpileLocation},
                    remarks = '{$remarks}',
                    bank_id = {$bankId},
                    request_payment_type = {$requestpaymentType},
                    request_payment_date = STR_TO_DATE('$requestPaymentDate', '%d/%m/%Y')
                    WHERE pengajuan_interalTF_id = {$internalTF_id}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
           // echo $attachmentPath;
            if($result !== false) {
            // $tempLog = '[UPDATE][Pengajuan-OA]'. '['.$idPP.']';
            // $log = "INSERT INTO log_pengajuan_OA(entry_by, entry_date, log) value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
            //         $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
            // if($result_log !== false) {
            //     $log_id = $myDatabase->insert_id;
            // }
    
            $return_value = '|OK|Update successfully. ';
            }else {
                 $return_value = '|FAIL| Fail to update data.| ' . $sql;
             }
        }
       else if ($_POST['_method'] == 'APPROVED'){
       
            $sql = "UPDATE pengajuan_internalTF
                    SET status = 1, remarks = '{$remarks}', user_HO = {$_SESSION['userId']}, remaks_reject = ''
                    WHERE pengajuan_interalTF_id = {$internalTF_id}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    
            if ($result != false) {
    
                // $tempLog = '[REJECT][Pengajuan-OA]'. '['.$idPP.']';
                // $log = "INSERT INTO log_pengajuan_OA(entry_by, entry_date, log) value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
                // $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
                // if($result_log !== false) {
                //     $log_id = $myDatabase->insert_id;
                // }
                $return_value = '|OK|Approved  has successfully||' .$sqlUpdate;
            } else {
                $return_value = '|Fail|. Approved  FAIL!|| '.$sql;
    
            }
    
        } 
        else if ($_POST['_method'] == 'REJECT'){
            $reject_remarks = $_POST['reject_remarks'];
       
            $sql = "UPDATE pengajuan_internalTF
                    SET status = 2, remaks_reject = '{$reject_remarks}', user_HO = {$_SESSION['userId']}
                    WHERE pengajuan_interalTF_id = {$internalTF_id}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    
            if ($result != false) {
    
                // $tempLog = '[REJECT][Pengajuan-OA]'. '['.$idPP.']';
                // $log = "INSERT INTO log_pengajuan_OA(entry_by, entry_date, log) value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
                // $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
                // if($result_log !== false) {
                //     $log_id = $myDatabase->insert_id;
                // }
                $return_value = '|OK|Reject  has successfully||' .$sqlUpdate;
            } else {
                $return_value = '|Fail|. Reject  FAIL!|| '.$sql;
    
            }
    
        }
        echo $return_value;
        die();
    } elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'freight_login_data') {
    // <editor-fold defaultstate="collapsed" desc="freight_login_data">

    $return_value = '';
    $boolNew = false;

    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    if ($_POST['masterGroupId'] == 0) {
        $masterGroupId = 'null';
    } else {
        $masterGroupId = $myDatabase->real_escape_string($_POST['masterGroupId']);
    }
    $username = $myDatabase->real_escape_string($_POST['freightUsername']);
    $password = $myDatabase->real_escape_string($_POST['freightPassword']);

    if ($freightLoginId == '') {
        $boolNew = true;
    }

    if ($freightId != '' && $masterGroupId != '' && $username != '' && $password != '') {
        if ($boolNew) {
            $bcrypt = new Bcrypt(10);
            $hashedPW = $bcrypt->hash($password);
            $sql = "INSERT INTO freight_login (freight_id, group_id, freight_username, password, updated_at, created_at, entry_by)
                            VALUES ({$freightId}, {$masterGroupId}, '{$username}', '{$hashedPW}', STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$_SESSION['userId']})";
        } elseif ($password != '') {
            $hashedPW = hash('sha256', $password);
            $sql = "UPDATE `freight_login` SET "
                . "group_id = '{$masterGroupId}',"
                . "freight_username = '{$username}', "
                . "password = '{$hashedPW}' "
                . "WHERE freight_login_id = {$freightLoginId}";

        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Freight User has successfully inserted/updated.|';
        } else {
            $return_value = '|FAIL|Insert/update freight user failed.|';
            echo $sql;
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
        echo $sql;
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_POST['action']) && $_POST['action'] == 'edit_freight_login') {
    // <editor-fold defaultstate="collapsed" desc="edit_freight_login">
    $return_value = '';
    $boolContinue = true;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightLoginId = $myDatabase->real_escape_string($_POST['freightLoginId']);
    if ($_POST['freightGroup'] == 0) {
        $freightGroup = 'null';
    } else {
        $freightGroup = $myDatabase->real_escape_string($_POST['freightGroup']);
    }
    $freightUsername = $myDatabase->real_escape_string($_POST['freightUsername']);
    $password = $myDatabase->real_escape_string($_POST['freightPassword']);
    // </editor-fold>
    $bcrypt = new Bcrypt(10);
    $hashedPW = $bcrypt->hash($password);

    $sql = "UPDATE freight_login 
            SET freight_login_id = $freightLoginId, group_id =  $freightGroup, freight_username = '$freightUsername', password = '$hashedPW' WHERE freight_login_id = $freightLoginId";
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    if ($result !== false) {

        $return_value = '|OK|Success';
    } else {
        echo $sql;
        $return_value = '|FAIL|Please fill required fields.|';
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_freight_login') {
    // <editor-fold defaultstate="collapsed" desc="delete_vendor_login">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightLoginId = $myDatabase->real_escape_string($_POST['freightLoginId']);
    // </editor-fold>

    if ($freightLoginId != '') {
        $sql = "DELETE FROM `freight_login` WHERE freight_login_id = {$freightLoginId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Freigh User has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete Freight User failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'freight_group_data') {
    // <editor-fold defaultstate="collapsed" desc="freight_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightGroupId = $myDatabase->real_escape_string($_POST['freightGroupId']);
    $freightGroupName = $myDatabase->real_escape_string($_POST['freightGroupName']);
    // </editor-fold>

    if ($freightGroupId == '') {
        $boolNew = true;
    }

    if ($freightGroupName != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `master_group` WHERE UPPER(group_name) = UPPER('{$freightGroupName}')";
        } else {
            $sql = "SELECT * FROM `master_group` WHERE UPPER(group_name) = UPPER('{$freightGroupName}') AND master_group_id <> {$freightGroupId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `master_group` (group_name, entry_by, entry_date) VALUES ("
                    . "'{$freightGroupName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `master_group` SET "
                    . "group_name = '{$freightGroupName}' "
                    . "WHERE master_group_id = {$freightGroupId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $freightGroupId = $myDatabase->insert_id;
                }
                $return_value = '|OK|Group has successfully inserted/updated.|' . $freightGroupId . '|';
            } else {
                $return_value = '|FAIL|Insert/update Group failed.||';
            }
        } else {
            $return_value = '|FAIL|Group already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    echo $return_value;
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_freight_group') {
    // <editor-fold defaultstate="collapsed" desc="delete_freight">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightGroupId = $myDatabase->real_escape_string($_POST['freightGroupId']);
    // </editor-fold>

    if ($freightGroupId != '') {
        $sql = "SELECT * FROM `freight_login` WHERE group_id = {$freightGroupId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `master_group` WHERE master_group_id = {$freightGroupId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Group has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete Group failed.|';
            }
        } else {
            $return_value = '|FAIL|Group use in Freight Login.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'SaldoAkun') {

    $return_value = '';

    $amount = $myDatabase->real_escape_string($_POST['amount']);
    $sa_id = $myDatabase->real_escape_string($_POST['sa_id']);

    $sql = "UPDATE saldo_awal SET amount = '{$amount}' WHERE sa_id = {$sa_id}";


    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($result !== false) {

        $return_value = '|OK|Data has successfully Updated.||';


    } else {
        $return_value = '|FAIL|Insert Data failed.||';
    }
    echo $return_value;
    /*
			$return_value=$POID;
			echo $return_value;
			*/
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'PO_data') {
    // <editor-fold defaultstate="collapsed" desc="PO_data">

    $return_value = '';
    $addMessage = '';
    $boolNew = false;
    $boolContinue = true;
    $boolUpdate = false;
    $boolUpdateInvoice = false;
    $boolUpdateInvoiceDetail = false;
    $boolInsertVendor = false;
    $boolVendorExists = false;
    $boolRecalculate = false;
    $boolPriceUp = false;
    $boolPriceDown = false;
    $boolQuantityUp = false;
    $boolQuantityDown = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $id = $myDatabase->real_escape_string($_POST['POId']);
    $POId = $myDatabase->real_escape_string($_POST['generatedPONo']);
    //$invoiceType = $myDatabase->real_escape_string($_POST['invoiceType']);
    //$accountId = $myDatabase->real_escape_string($_POST['accountId']);
    //$invoiceMethod = $myDatabase->real_escape_string($_POST['invoiceMethod']);
    //$invoiceDP = $myDatabase->real_escape_string($_POST['invoice_dp']);
    //$generatedPONo = $myDatabase->real_escape_string($_POST['generatedInvoiceNo']);
    ///$invoiceNo = $generatedInvoiceNo;
    //$invoiceNo2 = $myDatabase->real_escape_string($_POST['generatedInvoiceNo2']);
    $grandTotal = $myDatabase->real_escape_string($_POST['grandTotal']);
    $generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId']);
    //$stockpileContractId3 = $myDatabase->real_escape_string($_POST['stockpileContractId3']);
    //$shipmentId1 = $myDatabase->real_escape_string($_POST['shipmentId1']);
    //$invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
    //$inputDate = $myDatabase->real_escape_string($_POST['inputDate']);
    $tanggalpo = $myDatabase->real_escape_string($_POST['requestDate']);
    //$taxDate = $myDatabase->real_escape_string($_POST['taxDate']);
    //$invoiceTax = $myDatabase->real_escape_string($_POST['invoiceTax']);
    //$ppnID = $myDatabase->real_escape_string($_POST['ppnID']);
    //$ppn1 = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn1']));
    $nopenawaran = str_replace(",", "", $myDatabase->real_escape_string($_POST['inputnopenawaran']));
    //$ppn2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn2']));
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    //$ppnConverted = $ppn;
    //$pphID = $myDatabase->real_escape_string($_POST['pphID']);
    //$pph1 = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph1']));
    //$pph2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph2']));
    //$dppPrice = $myDatabase->real_escape_string($_POST['dppPrice']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    //$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $totalppn = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalppn']));
    $totalpph = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalpph']));
    $totalall = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalall']));
    $toc = $myDatabase->real_escape_string($_POST['toc']);
    $signId = $myDatabase->real_escape_string($_POST['signId']);
    $bankId = $myDatabase->real_escape_string($_POST['gvBankId']);
    //$quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    //$amount = $grandTotal;
    //$amountConverted = $grandTotal;
    //$amount_ori = $grandTotal;
    //$amount_ori_conv = $grandTotal;

    // </editor-fold>

    if ($currencyId == 1) {
        $exchangeRate = 0;

    }

    $sql2 = "SELECT stockpile_id FROM USER WHERE USER_ID = {$_SESSION['userId']}";
    $resultsql2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
    if ($resultsql2->num_rows == 1) {
        $rowsql2 = $resultsql2->fetch_object();
        $stockpileId = $rowsql2->stockpile_id;
    }
    $sql3 = "SELECT * FROM po_hdr WHERE no_po = '{$POId}'";
    $resultsql3 = $myDatabase->query($sql3, MYSQLI_STORE_RESULT);
    if ($resultsql3->num_rows == 0) {
        $sql = "INSERT INTO `po_hdr`
					(`no_po`,`general_vendor_id`,`no_penawaran`,`tanggal`,`memo`,`entry_by`,`entry_date`,`currency_id`,`exchangerate`,`grandtotal`,`stockpile_id`,`toc`,`sign_id`,
					`totalppn`,`totalpph`,`totalall`,bank_id)
				VALUES
					('{$POId}',{$generalVendorId},'{$nopenawaran}',STR_TO_DATE('{$tanggalpo}','%d/%m/%Y'),'{$remarks}',{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$currencyId},{$exchangeRate},{$grandTotal},{$stockpileId},'{$toc}',{$signId},{$totalppn},{$totalpph},{$totalall},{$bankId});";


        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result !== false) {
            $id = $myDatabase->insert_id;
            $return_value = '|OK|PO has successfully inserted/updated.' . $addMessage . '|' . $id . '|' . $POId . '|';
            unset($_SESSION['PO']);
        } else {
            $return_value = '|FAIL|Insert/update PO failed.' . $addMessage . '||';
            echo $sql;
        }
    } else {
        $sql = "update `po_hdr` set `general_vendor_id` = {$generalVendorId},`no_penawaran` = '{$nopenawaran}',`tanggal` = STR_TO_DATE('{$tanggalpo}','%d/%m/%Y') ,
			`memo` = '{$remarks}' ,`entry_by` = {$_SESSION['userId']} ,`entry_date` = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),`currency_id` = {$currencyId},
			`exchangerate` = '{$exchangeRate}',`grandtotal` = {$grandTotal},`stockpile_id` = {$stockpileId},`toc` = '{$toc}',`sign_id` = {$signId},
			`totalppn` = {$totalppn},`totalpph` = {$totalpph},`totalall` = {$totalall},`bank_id` = {$bankId} where `no_po` = '{$POId}'";


        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result !== false) {
            $id = $myDatabase->insert_id;
            $return_value = '|OK|PO has successfully inserted/updated.' . $addMessage . '|' . $id . '|';
            unset($_SESSION['PO']);
        } else {
            $return_value = '|FAIL|Insert/update PO failed.' . $addMessage . '||';
            echo $sql;
        }

    }


    echo $return_value;
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'PO_detail') {
    //echo 'test';
    // <editor-fold defaultstate="collapsed" desc="transaction_customer_data">

    $return_value = '';
    //$boolShipment1 = false;
    //$grandTotal = 0;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    //$POMethod = 2;
    //echo '<br>';
    //$POType = $myDatabase->real_escape_string($_POST['POType']);
    //echo '<br>';
    //$accountId = $myDatabase->real_escape_string($_POST['accountId']);
    //echo '<br>';
    $generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId']);
    //echo '<br>';
    //$shipmentId1 = $myDatabase->real_escape_string($_POST['shipmentId1']);
    //$stockpileId2 = $myDatabase->real_escape_string($_POST['stockpileId2']);
    $qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty']));
    //echo '<br>';
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    //echo '<br>';
    //$termin = str_replace(",", "", $myDatabase->real_escape_string($_POST['termin']));
    $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
    //$currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    //$exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    //echo '<br>';
    $ppnpo = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppnPO1']));
    //echo '<br>';
    //$pphpo = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph1']));
    //echo '<br>';
    // $pphpoID = $myDatabase->real_escape_string($_POST['pphID']);
    //echo '<br>';
    $ppnpoID = $myDatabase->real_escape_string($_POST['ppnPOID']);
    $pphpoID = $myDatabase->real_escape_string($_POST['pphTaxId']);
    //$pphDP2 = $myDatabase->real_escape_string($_POST['pphDP2']);
    //$ppnDP2 = $myDatabase->real_escape_string($_POST['ppnDP2']);
    //$grandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal']));
    //$DP = $grandTotal;
    //$dp_total = str_replace(",", "", $myDatabase->real_escape_string($_POST['dp_total']));
    //$DP = $dp_total;
    //echo '<br>';
    //$keterangan = $myDatabase->real_escape_string($_POST['keterangan']);
    //$notes = $myDatabase->real_escape_string($_POST['notes']);
    //$invoiceMethodDetail = $myDatabase->real_escape_string($_POST['invoiceMethodDetail']);
    //echo '<br>';
    $POID = $myDatabase->real_escape_string($_POST['generatedPONo']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    //$pphstatus = $myDatabase->real_escape_string($_POST['pphstatus']);
    $ppnpostatus = $myDatabase->real_escape_string($_POST['ppnpostatus']);
    $itemId = $myDatabase->real_escape_string($_POST['itemId']);
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
    $requestDate = $myDatabase->real_escape_string($_POST['requestDate']);

    if ($pphpoID == 0) {
        $pphstatus = 0;
        $pphpo = 0;
    } else {
        $pphstatus = 1;
        $sqlTax = "SELECT tax_value FROM tax WHERE tax_id = {$pphpoID}";
        $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
        if ($resultTax->num_rows == 1) {
            $sqlTax = $resultTax->fetch_object();
            $tax_value = $sqlTax->tax_value;

            $pphpo = ($tax_value / 100) * $amount;
        }
    }


    $date = explode('/', $requestDate);
    $month = (int)$date[1];
    $day = $date[0];
    $year = $date[2];

    if ($shipmentId == '') {
        $shipmentId = 0;
    }
    //$slipNos = "";
    //$slipNos2 = "";
    // </editor-fold>
    //echo

    $sql = "SELECT * FROM `po_hdr` ph
          left join po_detail pd on ph.no_po = pd.no_po
		  left join general_vendor gv on gv.general_vendor_id = ph.general_vendor_id
          WHERE ph.general_vendor_id = {$generalVendorId} and year(ph.tanggal)=$year and month(ph.tanggal)=$month and pd.stockpile_id=$stockpileId and gv.monthly_pay=1 AND ph.status = 0 AND ph.no_po != {$POID}";
    echo $sql;
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($result->num_rows == 0) {
        $sql =
            "INSERT INTO `po_detail`
       (`no_po`,`qty`,`harga`,`amount`,`ppn`,`pph`,`ppn_id`,`pph_id`,`entry_by`,`entry_date`,`pphstatus`,`stockpile_id`,`item_id`,`shipment_id`, `ppnstatus`)
       VALUES
       ('{$POID}',{$qty},{$price},{$amount},{$ppnpo},{$pphpo},
       {$ppnpoID},{$pphpoID},{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$pphstatus},{$stockpileId},{$itemId},{$shipmentId},{$ppnpostatus});";


        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {

            $return_value = '|OK|Data has successfully inserted.||';


        } else {
            $return_value = '|FAIL|Insert Data failed.||';
        }
    } else {
        $return_value = '|FAIL|Same PO for vendor already created.||';
    }


    //$return_value=$sql;
    echo $return_value;

    // </editor-fold>
} //-------------------------------------------------------------------------------------------------------------------------------------------
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'PO_reject') {
    // <editor-fold defaultstate="collapsed" desc="transaction_customer_data">

    $return_value = '';
    $POID = $myDatabase->real_escape_string($_POST['poId']);
    // </editor-fold>

    $sql =
        "update `po_hdr` set status = 3 where idpo_hdr={$POID};";


    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($result !== false) {

        $return_value = '|OK|Data has successfully inserted.||';


    } else {
        $return_value = '|FAIL|Insert Data failed.||';
    }
    echo $return_value;

    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'PO_cancel') {
    // <editor-fold defaultstate="collapsed" desc="PO_cancel">

    $return_value = '';
    $POID = $myDatabase->real_escape_string($_POST['poId']);
    $sql = "update `po_hdr` set status = 4 where idpo_hdr={$POID};";
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($result !== false) {

        $return_value = '|OK|Data has successfully inserted.||';

    } else {
        $return_value = '|FAIL|Insert Data failed.||';
    }
    echo $return_value;

    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_po_detail') {
    // <editor-fold defaultstate="collapsed" desc="delete_po_detail">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $poDetailId = $myDatabase->real_escape_string($_POST['poDetailId']);
    // </editor-fold>

    if ($poDetailId != '') {

        $sql = "DELETE FROM `po_detail` WHERE idpo_detail = {$poDetailId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Detail has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete detail failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_item') {
    // <editor-fold defaultstate="collapsed" desc="delete_item">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $itemId = $myDatabase->real_escape_string($_POST['itemId']);
    // </editor-fold>

    if ($itemId != '') {
        $sql = "SELECT * FROM `po_detail` WHERE item_id = {$itemId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `master_item` WHERE idmaster_item = {$itemId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Item has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete item failed.|';
            }
        } else {
            $return_value = '|FAIL|Item in use in PO.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_groupitem') {
    // <editor-fold defaultstate="collapsed" desc="delete_groupitem">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $groupitemId = $myDatabase->real_escape_string($_POST['groupitemId']);
    // </editor-fold>

    if ($groupitemId != '') {
        $sql = "SELECT * FROM `master_item` WHERE group_itemid = {$groupitemId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `master_groupitem` WHERE idmaster_groupitem = {$groupitemId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Item has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete item failed.|';
            }
        } else {
            $return_value = '|FAIL|Item in use in item.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_sign') {
    // <editor-fold defaultstate="collapsed" desc="delete_sign">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $signId = $myDatabase->real_escape_string($_POST['signId']);
    // </editor-fold>

    if ($signId != '') {
        $sql = "SELECT * FROM `po_hdr` WHERE sign_id = {$signId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `master_sign` WHERE idmaster_sign = {$signId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Sign has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete sign failed.|';
            }
        } else {
            $return_value = '|FAIL|Sign in use in PO.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'reject_contract') {
    // <editor-fold defaultstate="collapsed" desc="reject_contract">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $purchasingId = $myDatabase->real_escape_string($_POST['modalPurchasingId']);
    $rejectNote = $myDatabase->real_escape_string($_POST['rejectNote']);
    // </editor-fold>

    if ($purchasingId != '') {
        $sql = "CALL `reject_contract` ({$purchasingId},'$rejectNote')";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


        if ($result !== false) {
            $return_value = '|OK|Data has successfully Rejected.|';
        } else {
            $return_value = '|FAIL|Rejected data failed.|';
        }

    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'approve_contract') {
    // <editor-fold defaultstate="collapsed" desc="approve_contract">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $purchasingId = $myDatabase->real_escape_string($_POST['modalPurchasingId']);

    $contractNo = $myDatabase->real_escape_string($_POST['contractNo']);
    // </editor-fold>

    if ($purchasingId != '') {
        $sql = "update po_pks set final_status=1, contract_no='$contractNo' where purchasing_id = {$purchasingId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "update contract c
                left join po_contract pc on pc.contract_id=c.contract_id
                left join po_pks pp on pp.po_pks_id=pc.po_pks_id
                set c.contract_no='$contractNo' where pp.purchasing_id = {$purchasingId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


        if ($result !== false) {
            $return_value = '|OK|Data has successfully Approved.|';
        } else {
            $return_value = '|FAIL|Approve data failed.|';
        }

    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_uom') {
    // <editor-fold defaultstate="collapsed" desc="delete_uom">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $uomId = $myDatabase->real_escape_string($_POST['uomId']);
    // </editor-fold>

    if ($uomId != '') {
        $sql = "SELECT * FROM `master_item` WHERE uom_id = {$uomId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `uom` WHERE idUOM = {$uomId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|UOM has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete UOM failed.|';
            }
        } else {
            $return_value = '|FAIL|UOM in use in Master Item.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'item_data') {
    // <editor-fold defaultstate="collapsed" desc="item_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $itemId = $myDatabase->real_escape_string($_POST['itemId']);
    $itemName = $myDatabase->real_escape_string($_POST['itemName']);
    $itemCode = $myDatabase->real_escape_string($_POST['itemCode']);
    $groupitemId = $myDatabase->real_escape_string($_POST['groupitemId']);
    $uom = $myDatabase->real_escape_string($_POST['uomId']);

    // </editor-fold>

    if ($itemId == '') {
        $boolNew = true;
    }

    if ($itemName != '' && $itemCode != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `master_item` WHERE item_code = '{$itemCode}'";
        } else {
            $sql = "SELECT * FROM `master_item` WHERE item_code = '{$itemCode}' AND idmaster_item <> {$itemId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `master_item` (item_name, item_code, uom_id, group_itemid, entry_by, entry_date) VALUES ("
                    . "'{$itemName}','{$itemCode}','{$uom}',{$groupitemId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `master_item` SET "
                    . "item_name = '{$itemName}', "
                    . "uom_id = '{$uom}', "
                    . "group_itemid = '{$groupitemId}'"
                    . "WHERE idmaster_item = {$itemId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $itemId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Item has successfully inserted/updated.|' . $itemId . '|';
            } else {
                $return_value = '|FAIL|Insert/update Item failed.||';
            }
        } else {
            $return_value = '|FAIL|Item code already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'sign_data') {
    // <editor-fold defaultstate="collapsed" desc="sign_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $signId = $myDatabase->real_escape_string($_POST['signId']);
    $signName = $myDatabase->real_escape_string($_POST['signName']);
    $signJabatan = $myDatabase->real_escape_string($_POST['signJabatan']);
    // </editor-fold>

    if ($signId == '') {
        $boolNew = true;
    }

    if ($signName != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `master_sign` WHERE name = '{$signName}'";
        } else {
            $sql = "SELECT * FROM `master_sign` WHERE name = '{$signName}' AND idmaster_sign <> {$signId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `master_sign` (`name`, `jabatan` , entry_by, entry_date) VALUES ("
                    . "'{$signName}','{$signJabatan}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `master_sign` SET "
                    . "name = '{$signName}', jabatan = '{$signJabatan}' "
                    . "WHERE idmaster_sign = {$signId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $signId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Sign has successfully inserted/updated.|' . $signId . '|';
            } else {
                $return_value = '|FAIL|Insert/update sign failed.||';
            }
        } else {
            $return_value = '|FAIL|Sign already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'uom_data') {
    // <editor-fold defaultstate="collapsed" desc="uom_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $uomId = $myDatabase->real_escape_string($_POST['uomId']);
    $uomName = $myDatabase->real_escape_string($_POST['uomName']);
    // </editor-fold>

    if ($uomId == '') {
        $boolNew = true;
    }

    if ($uomName != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `uom` WHERE uom_type = '{$uomName}'";
        } else {
            $sql = "SELECT * FROM `uom` WHERE uom_type = '{$uomName}' AND iduom <> {$uomId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `uom` (`uom_type`, `entry_by`, `entry_date`) VALUES ("
                    . "'{$uomName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `uom` SET "
                    . "uom_type = '{$uomName}' "
                    . "WHERE iduom = {$uomId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $uomId = $myDatabase->insert_id;
                }

                $return_value = '|OK|UOM has successfully inserted/updated.|' . $uomId . '|';
            } else {
                $return_value = '|FAIL|Insert/update UOM failed.||';
            }
        } else {
            $return_value = '|FAIL|UOM already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'groupitem_data') {
    // <editor-fold defaultstate="collapsed" desc="groupitem_data">

    $return_value = '';
    $boolNew = false;


    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $groupId = $myDatabase->real_escape_string($_POST['groupitemId']);
    $groupName = $myDatabase->real_escape_string($_POST['groupName']);
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    //echo $groupId.$groupName.$accountId;
    // </editor-fold>

    if ($groupId == '') {
        $boolNew = true;
    }

    if ($groupName != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `master_groupitem` WHERE UPPER(group_name) = UPPER('{$groupName}')";
        } else {
            $sql = "SELECT * FROM `master_groupitem` WHERE UPPER(group_name) = UPPER('{$groupName}') AND idmaster_groupitem <> {$groupId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `master_groupitem` (group_name, account_id , entry_by, entry_date) VALUES ("
                    . "'{$groupName}',{$accountId} , {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `master_groupitem` SET "
                    . "group_name = '{$groupName}' , account_id = {$accountId} "
                    . "WHERE idmaster_groupitem = {$groupId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $groupId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Group has successfully inserted/updated.|' . $groupId . '|';
            } else {
                $return_value = '|FAIL|Insert/update failed.|' . $sql . '|';
            }
        } else {
            $return_value = '|FAIL|Group already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'stockpile_handling_data') {
    // <editor-fold defaultstate="collapsed" desc="stockpile_handling_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $handlingCostId = $myDatabase->real_escape_string($_POST['handlingCostId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $vendorHandlingId = $myDatabase->real_escape_string($_POST['vendorHandlingId']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $paymentNotes = $myDatabase->real_escape_string($_POST['paymentNotes']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    // </editor-fold>

    if ($handlingCostId == '') {
        $boolNew = true;
    }

    if ($vendorHandlingId != '' && $currencyId != '' && $price != '' && $vendorId != '') {
        if ($exchangeRate == '') {
            $exchangeRate = 1;
        }
        $priceConverted = $price * $exchangeRate;

        if ($boolNew) {
            $sql = "INSERT INTO `vendor_handling_cost` (vendor_handling_id, stockpile_id, vendor_id, currency_id, exchange_rate, price, "
                . "price_converted, payment_notes, remarks, company_id, entry_by, entry_date) VALUES ("
                . "{$vendorHandlingId}, {$stockpileId}, {$vendorId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, "
                . "'{$paymentNotes}', '{$remarks}', {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        } else {
            $sql = "UPDATE `vendor_handling_cost` SET "
                . "vendor_handling_id = {$vendorHandlingId}, "
                . "currency_id = {$currencyId}, "
                . "exchange_rate = {$exchangeRate}, "
                . "vendor_id = {$vendorId}, "
                . "price = {$price}, "
                . "price_converted = {$priceConverted}, "
                . "payment_notes = '{$paymentNotes}', "
                . "remarks = '{$remarks}', "
                . "modify_by = {$_SESSION['userId']}, "
                . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                . "WHERE handling_cost_id = {$handlingCostId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Handling cost has successfully inserted/updated.|';
        } else {
            $return_value = '|FAIL|Insert/update Handling cost failed.|';
            echo $sql;
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_stockpile_handling') {
    // <editor-fold defaultstate="collapsed" desc="delete_stockpile_handling">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $handlingCostId = $myDatabase->real_escape_string($_POST['handlingCostId']);
    // </editor-fold>

    if ($handlingCostId != '') {
        $sql = "SELECT * FROM `transaction` WHERE handling_cost_id = {$handlingCostId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `vendor_handling_cost` WHERE handling_cost_id = {$handlingCostId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Handling cost has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete handling cost failed.|';
            }
        } else {
            $return_value = '|FAIL|Handling cost in use in condition.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_vendor_handling') {
    // <editor-fold defaultstate="collapsed" desc="delete_vendor_handling">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorHandlingId = $myDatabase->real_escape_string($_POST['vendorHandlingId']);
    // </editor-fold>

    if ($vendorHandlingId != '') {
        $sql = "SELECT * FROM `vendor_handling_cost` WHERE vendor_handling_id = {$vendorHandlingId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `vendor_handling` WHERE vendor_handling_id = {$vendorHandlingId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            $sql = "DELETE FROM `vendor_handling_bank` WHERE vendor_handling_id = {$vendorHandlingId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


            if ($result !== false) {
                $return_value = '|OK|User has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete user failed.|';
            }


            if ($result !== false) {
                $return_value = '|OK|Vendor Handling has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete Vendor Handling failed.|';
            }
        } else {
            $return_value = '|FAIL|Vendor Handling in use in stockpile handling cost.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'vendor_handling_data') {
    // <editor-fold defaultstate="collapsed" desc="vendor_handling_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorHandlingId = $myDatabase->real_escape_string($_POST['vendorHandlingId']);
    $vendorHandlingCode = $myDatabase->real_escape_string($_POST['vendorHandlingCode']);
    $vendorHandlingName = $myDatabase->real_escape_string($_POST['vendorHandlingName']);
    $vendorHandlingAddress = $myDatabase->real_escape_string($_POST['vendorHandlingAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $bankName = '-';
    $branch = '-';
    $accountNo = '-';
    $beneficiary = '-';
    $swiftCode = '-';
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $active = $myDatabase->real_escape_string($_POST['active']);
    $nik = $myDatabase->real_escape_string($_POST['nik']);
    $vendorHandlingRule = $myDatabase->real_escape_string($_POST['vendorHandlingRule']);
    $vendorEmail = $myDatabase->real_escape_string($_POST['email']);
    // </editor-fold>

    if ($vendorHandlingId == '') {
        $boolNew = true;
    }

    if ($vendorHandlingCode != '' && $vendorHandlingName != '' && $vendorHandlingAddress != '' && $npwp != '' && $npwp_name != '' && $ppn != '' && $pph != '' && $active != '' && $vendorHandlingRule != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `vendor_handling` WHERE UPPER(vendor_handling_name) = UPPER('{$vendorHandlingName}') AND UPPER(vendor_handling_code) = UPPER('{$vendorHandlingCode}')";
        } else {
            $sql = "SELECT * FROM `vendor_handling` WHERE UPPER(vendor_handling_name) = UPPER('{$vendorHandlingName}') AND UPPER(vendor_handling_code) = UPPER('{$vendorHandlingCode}') AND vendor_handling_id <> {$vendorHandlingId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;

            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }

            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }

            if ($boolNew) {
                $sql = "INSERT INTO `vendor_handling` (vendor_handling_code, vendor_handling_name, vendor_handling_address, nik, npwp, npwp_name, bank_name, branch, account_no, beneficiary, "
                    . "swift_code, ppn_tax_id, pph_tax_id, ppn, pph, active, vendor_handling_rule, entry_by, entry_date, vendor_handling_email) VALUES ("
                    . "UPPER('{$vendorHandlingCode}'), '{$vendorHandlingName}', '{$vendorHandlingAddress}', '{$nik}','{$npwp}', '{$npwp_name}', '{$bankName}', '{$branch}', '{$accountNo}', "
                    . "'{$beneficiary}', '{$swiftCode}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$active}, {$vendorHandlingRule}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$vendorEmail}')";
            } else {
				
				   $sqlA = "SELECT entry_by, entry_date, ppn FROM vendor_handling WHERE vendor_handling_id = {$vendorHandlingId}";
                $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                if ($resultA !== false) {
                    $rowA = $resultA->fetch_object();
                    $entryby = $rowA->entry_by;
                    $entrydate = $rowA->entry_date;
                    $oldPPn = str_replace(",", "", $myDatabase->real_escape_string($rowA->ppn));

                    $sqlLog = "INSERT INTO log_mst_allvendor (action, action_by, action_date, handling_id, entry_by, entry_date, ppn, old_ppn) 
                                 VALUES ('UPDATE', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), $vendorHandlingId, $entryby, STR_TO_DATE('$entrydate', '%Y-%m-%d %H:%i:%s'), {$ppnValue}, {$oldPPn})";
                    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
                  
                }
                $sql = "UPDATE `vendor_handling` SET "
                    . "vendor_handling_code = UPPER('{$vendorHandlingCode}'), "
                    . "vendor_handling_name = '{$vendorHandlingName}', "
                    . "vendor_handling_address = '{$vendorHandlingAddress}', "
                    . "nik = '{$nik}', "
                    . "npwp = '{$npwp}', "
                    . "npwp_name = '{$npwp_name}', "
                    . "bank_name = '{$bankName}', "
                    . "branch = '{$branch}', "
                    . "account_no = '{$accountNo}', "
                    . "beneficiary = '{$beneficiary}', "
                    . "swift_code = '{$swiftCode}', "
                    . "ppn_tax_id = {$ppn}, "
                    . "pph_tax_id = {$pph}, "
                    . "ppn = {$ppnValue}, "
                    . "pph = {$pphValue}, "
                    . "active = {$active}, "
                    . "vendor_handling_rule = {$vendorHandlingRule}, "
                    . "vendor_handling_email = '{$vendorEmail}' "
                    . "WHERE vendor_handling_id = {$vendorHandlingId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $vendorHandlingId = $myDatabase->insert_id;
					                    $sqlLog = "INSERT INTO log_mst_allvendor (action, handling_id, entry_by, entry_date, ppn, old_ppn) 
                    VALUES ('INSERT',  $vendorHandlingId, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$ppnValue}, 0)";


                }

                $return_value = '|OK|Vendor Handling has successfully inserted/updated.|' . $vendorHandlingId . '|';
            } else {
                $return_value = '|FAIL|Insert/update Vendor Handling failed.||';
            }
        } else {
            $return_value = '|FAIL|Vendor Handling already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'dailyPks_data') {
    // <editor-fold defaultstate="collapsed" desc="dailyPks_data">

    $return_value = '';
    //$boolShipment1 = false;

    $sales_id = $myDatabase->real_escape_string($_POST['sales_id']);
    $stockpile_id = $myDatabase->real_escape_string($_POST['stockpile_id']);
    $screenedStock = str_replace(",", "", $myDatabase->real_escape_string($_POST['screenedStock']));
    $sprayedStock = str_replace(",", "", $myDatabase->real_escape_string($_POST['sprayedStock']));
    $unscreenedStock = str_replace(",", "", $myDatabase->real_escape_string($_POST['unscreenedStock']));
    $less_shipment = str_replace(",", "", $myDatabase->real_escape_string($_POST['less_shipment']));
    $less_local = str_replace(",", "", $myDatabase->real_escape_string($_POST['less_local']));
    $less_susut = str_replace(",", "", $myDatabase->real_escape_string($_POST['less_susut']));
    $notes = $myDatabase->real_escape_string($_POST['notes']);

    if ($screenedStock == '') {
        $screenedStock = 0;
    }
    if ($sprayedStock == '') {
        $sprayedStock = 0;
    }
    if ($unscreenedStock == '') {
        $unscreenedStock = 0;
    }
    if ($less_shipment == '') {
        $less_shipment = 0;
    }
    if ($less_local == '') {
        $less_local = 0;
    }
    if ($less_susut == '') {
        $less_susut = 0;
    }

    if ($sales_id != '') {


        $sql = "INSERT INTO `sales_add` (sales_id, stockpile_id, screened_stock, sprayed_stock, unscreened_stock, less_shipment, less_local, less_susut, notes, entry_by, entry_date) VALUES ({$sales_id},  {$stockpile_id}, {$screenedStock}, {$sprayedStock}, {$unscreenedStock}, {$less_shipment}, {$less_local}, {$less_susut}, '{$notes}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $jurnalId = $myDatabase->insert_id;

            $return_value = '|OK|Data has successfully inserted.||';


        } else {
            $return_value = '|FAIL|Insert Data failed.||';

        }

    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_dailyPks') {
    // <editor-fold defaultstate="collapsed" desc="delete_dailyPks">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $sales_add_id = $myDatabase->real_escape_string($_POST['sales_add_id']);
    // </editor-fold>

    if ($sales_add_id != '') {


        $sql = "DELETE FROM `sales_add` WHERE sales_add_id = {$sales_add_id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|User has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_payment_detail') {
    // <editor-fold defaultstate="collapsed" desc="delete_payment_detail">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $payment_cash_id = $myDatabase->real_escape_string($_POST['payment_cash_id']);
    // </editor-fold>

    if ($payment_cash_id != '') {

        $sql = "SELECT GROUP_CONCAT(payment_cash_dp) AS pc_dp FROM payment_cash_dp WHERE payment_cash_id = {$payment_cash_id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            $pcDp = $row->pc_dp;
        }

        $sql = "UPDATE payment_cash SET payment_cash_dp = NULL, payment_cash_status = 0 WHERE payment_cash_id = {$pcDp}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "DELETE FROM `payment_cash` WHERE payment_cash_id = {$payment_cash_id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Data has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete data failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_payment_cash') {
    // <editor-fold defaultstate="collapsed" desc="delete_payment_cash">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentId = $myDatabase->real_escape_string($_POST['paymentId']);
    // </editor-fold>

    if ($paymentId != '') {

        $sql = "DELETE FROM `payment` WHERE payment_id = {$paymentId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Data has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete data failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'payment_cash') {
    // <editor-fold defaultstate="collapsed" desc="payment_cash">

    $return_value = '';
    $boolShipment1 = false;
    //$grandTotal = 0;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $pcMethod = $myDatabase->real_escape_string($_POST['pcMethod']);
    $paymentCashType = $myDatabase->real_escape_string($_POST['paymentCashType']);
    $accountId11 = $myDatabase->real_escape_string($_POST['accountId11']);
    $generalVendorId11 = $myDatabase->real_escape_string($_POST['generalVendorId11']);
    $shipmentId11 = $myDatabase->real_escape_string($_POST['shipmentId11']);
    $transaction_id = $myDatabase->real_escape_string($_POST['transaction_id']);
    $stockpileId11 = $myDatabase->real_escape_string($_POST['stockpileId11']);
    $qty11 = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty11']));
    $price11 = str_replace(",", "", $myDatabase->real_escape_string($_POST['price11']));
    $termin11 = str_replace(",", "", $myDatabase->real_escape_string($_POST['termin11']));
    $amount11 = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount11']));
    $currencyId11 = $myDatabase->real_escape_string($_POST['currencyId11']);
    $exchangeRate11 = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate11']));
    $ppn11 = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn11']));
    //$pph11 = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph11']));
    $pph12 = $myDatabase->real_escape_string($_POST['pph12']);
    $ppn12 = $myDatabase->real_escape_string($_POST['ppn12']);
    $pphID11 = $myDatabase->real_escape_string($_POST['pphTaxId']);
    $ppnID11 = $myDatabase->real_escape_string($_POST['ppnID11']);
    $grandTotal11 = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal11']));
    $DP = $grandTotal11;
    $notes11 = $myDatabase->real_escape_string($_POST['notes11']);
    $paymentCashMethod = $myDatabase->real_escape_string($_POST['payment_cash_method']);
    $uom = $myDatabase->real_escape_string($_POST['uom']);
    $slipNos = "";
    $slipNos2 = "";
    // </editor-fold>
    if ($shipmentId11 == '') {
        $shipmentId11 = 'NULL';
    } else {
        $sqlSales = "SELECT sales_id FROM sales WHERE shipment_id = {$shipmentId1}";
        $resultSales = $myDatabase->query($sqlSales, MYSQLI_STORE_RESULT);
        if ($resultSales !== false && $resultSales->num_rows > 0) {
            $rowSales = $resultSales->fetch_object();
            $salesId = $rowSales->sales_id;

            $sqlStatus = "UPDATE sales SET "
                . "used_status = 1 "
                . " WHERE sales_id = {$salesId}";
            $resultStatus = $myDatabase->query($sqlStatus, MYSQLI_STORE_RESULT);
        }

    }

    if ($stockpileId11 == '') {
        $stockpileId11 = 'NULL';
    }

    if ($transaction_id == '') {
        $transaction_id = 'NULL';
    }

    if ($exchangeRate11 == '') {
        $exchangeRate11 = 1;
    }

    if ($pph12 != 0) {
        $sqlPPH = "SELECT tax_value FROM tax WHERE tax_id = {$pphID11}";
        $resultPPH = $myDatabase->query($sqlPPH, MYSQLI_STORE_RESULT);
        if ($resultPPH !== false && $resultPPH->num_rows > 0) {
            $rowPPH = $resultPPH->fetch_object();
            $pph1 = $rowPPH->tax_value;
            $dp_pph = $DP * ($pph1 / 100);
        }
    } else {
        $dp_pph = 0;
    }

    if ($ppn12 != 0) {
        $sqlPPN = "SELECT tax_value FROM tax WHERE tax_id = {$ppnID11}";
        $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
        if ($resultPPN !== false && $resultPPN->num_rows > 0) {
            $rowPPN = $resultPPN->fetch_object();
            $ppn1 = $rowPPN->tax_value;
            $dp_ppn = $DP * ($ppn1 / 100);
        }
    } else {
        $dp_ppn = 0;
    }

    $dp_total = ($DP + $dp_ppn) - $dp_pph;


    $pph11 = 0;
    if ($pphID11 != 0) {
        $sqlP = "SELECT tax_value FROM tax WHERE tax_id = {$pphID11}";
        $resultP = $myDatabase->query($sqlP, MYSQLI_STORE_RESULT);
        if ($resultP !== false && $resultP->num_rows > 0) {
            $rowP = $resultP->fetch_object();
            $pphTax = $rowP->tax_value;

            $pph11 = $amount11 * ($pphTax / 100);
        }
    }

    if ($pcMethod == 1) {
        $amount12 = $amount11 * -1;
        $ppn12 = $ppn11 * -1;
        $pph12 = $pph11 * -1;
    } else {
        $amount12 = $amount11;
        $ppn12 = $ppn11;
        $pph12 = $pph11;
    }

    $sqlShipment = "SELECT account_no, account_type FROM account WHERE account_id = {$accountId11}";
    $resultShipment = $myDatabase->query($sqlShipment, MYSQLI_STORE_RESULT);
    if ($resultShipment !== false && $resultShipment->num_rows > 0) {
        $rowShipment = $resultShipment->fetch_object();
        $acc = $rowShipment->account_no;
        $acc_type = $rowShipment->account_type;
        $sub_acc = substr($acc, 0, 2);
    }

    if (($sub_acc == 51 || $acc == 520501) && $shipmentId11 == 'NULL' && $acc_type == 4) {
        $boolShipment1 = false;
        //echo $sub_acc;
    } else {
        $boolShipment1 = true;
        //echo 'SALAH';
    }


    if ($paymentCashType != '' && $accountId11 != '' && $qty11 != '' && $price11 != '' && $termin11 != '' && $amount11 != '' && $currencyId11 != '' && $boolShipment1) {
        $t_amount = $amount12 + $ppn12 - $pph12;
        $tamount = $t_amount - $DP;
        $amountConverted = $exchangeRate11 * $amount12;
        $ppnConverted = $exchangeRate11 * $ppn12;
        $pphConverted = $exchangeRate11 * $pph12;
        $tamountConverted = $exchangeRate11 * $tamount;

        if ($paymentCashMethod == 2) {
            $dpAmount = $tamountConverted;
        } else {
            $dpAmount = 0;
        }

        if (isset($_POST['checkedSlips'])) {
            $checks = $_POST['checkedSlips'];
            for ($i = 0; $i < sizeof($checks); $i++) {
                if ($slipNos == '') {
                    $slipNos .= $checks[$i];
                } else {
                    $slipNos .= ',' . $checks[$i];
                }
            }
        }


        $sql = "INSERT INTO `payment_cash` (type, account_id, general_vendor_id, transaction_id, shipment_id, stockpile_remark, qty, price, termin, amount, amount_converted, currency_id, exchange_rate, ppnID, ppn, ppn_converted, pphID, pph, pph_converted, tamount, tamount_converted, notes, entry_by, entry_date, idUOM) VALUES ("
            . " {$paymentCashType}, {$accountId11}, {$generalVendorId11}, {$transaction_id}, {$shipmentId11}, {$stockpileId11}, '{$qty11}', '{$price11}', '{$termin11}', '{$amount12}', '{$amountConverted}', {$currencyId11}, '{$exchangeRate11}', {$ppnID11} ,'{$ppn12}', '{$ppnConverted}', {$pphID11}, '{$pph12}', '{$pphConverted}', '{$tamount}', '{$tamountConverted}', '{$notes11}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$uom})";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $paymentCashId = $myDatabase->insert_id;

            $return_value = '|OK|Data has successfully inserted.||';

            /*$sql = "UPDATE `payment_cash` SET payment_cash_dp = {$paymentCashId} WHERE payment_cash_id IN ($slipNos)";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/

            //$sql = "UPDATE `payment_cash` SET payment_cash_status = 1 WHERE payment_cash_id IN ($slipNos)";
            //$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if (isset($_POST['checkedSlips2'])) {
                $checks2 = $_POST['checkedSlips2'];
                if (isset($_POST['checkedSlips'])) {
                    $checks = $_POST['checkedSlips'];
                } else {
                    $checks = '';
                }

                for ($i = 0; $i < sizeof($checks2); $i++) {
                    if ($checks[$i] != '') {
                        if ($slipNos2 == '') {
                            $slipNos2 .= '(' . $paymentCashId . ',' . $checks[$i] . ',' . $checks2[$i] . ')';
                        } else {
                            $slipNos2 .= ',' . '(' . $paymentCashId . ',' . $checks[$i] . ',' . $checks2[$i] . ')';
                        }
                    }
                }
            }
            echo $slipNos2;
            $sql = "INSERT INTO payment_cash_dp (payment_cash_id, payment_cash_dp, amount_payment) VALUES {$slipNos2}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result === false) {
                echo 'salah';
            }


            //insertGeneralLedger($myDatabase, 'INVOICE DETAIL', $invoiceId);

        } else {
            $return_value = '|FAIL|Insert Data failed.|'.$sql.'|';
        }

    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_user') {
    // <editor-fold defaultstate="collapsed" desc="delete_user">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $userId = $myDatabase->real_escape_string($_POST['userId']);
    // </editor-fold>

    if ($userId != '') {
        $sql = "DELETE FROM `user_module` WHERE user_id = {$userId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "DELETE FROM `user_stockpile` WHERE user_id = {$userId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "DELETE FROM `user` WHERE user_id = {$userId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|User has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'user_data') {
    // <editor-fold defaultstate="collapsed" desc="user_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $userId = $myDatabase->real_escape_string($_POST['userId']);
    $userEmail = $myDatabase->real_escape_string($_POST['userEmail']);
    $userPassword = $myDatabase->real_escape_string($_POST['userPassword']);
    $confirmPassword = $myDatabase->real_escape_string($_POST['confirmPassword']);
    $userName = $myDatabase->real_escape_string($_POST['userName']);
    $userPhone = $myDatabase->real_escape_string($_POST['userPhone']);
    $active = $myDatabase->real_escape_string($_POST['active']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    // </editor-fold>

    if ($userId == '') {
        $boolNew = true;
    }

    if ($userPassword == $confirmPassword) {
        if ($userEmail != '' && $userPassword != '' && $userName != '' && $active != '' && $stockpileId != '') {
            if ($boolNew) {
                $sql = "SELECT * FROM `user` WHERE UPPER(user_email) = UPPER('{$userEmail}')";
            } else {
                $sql = "SELECT * FROM `user` WHERE UPPER(user_email) = UPPER('{$userEmail}') AND user_id <> {$userId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false && $result->num_rows == 0) {
                $salt = bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM));
                $saltedPW = trim($userPassword) . $salt;
                $hashedPW = hash('sha256', $saltedPW);

                if ($boolNew) {
                    $sql = "INSERT INTO `user` (user_email, user_password, user_name, user_phone, active, user_salt, stockpile_id, entry_by, entry_date) VALUES ("
                        . "LOWER('{$userEmail}'), '{$hashedPW}', '{$userName}', '{$userPhone}', {$active}, '{$salt}', {$stockpileId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                } else {
                    $sql = "UPDATE `user` SET "
                        . "user_email = LOWER('{$userEmail}'), "
                        . "user_password = '{$hashedPW}', "
                        . "user_name = '{$userName}', "
                        . "user_phone = '{$userPhone}', "
                        . "active = {$active},"
                        . "user_salt = '{$salt}', "
                        . "stockpile_id = '{$stockpileId}' "
                        . "WHERE user_id = {$userId}";
                }
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false) {
                    if ($boolNew) {
                        $userId = $myDatabase->insert_id;
                    }

                    $return_value = '|OK|User has successfully inserted/updated.|' . $userId . '|';
                } else {
                    $return_value = '|FAIL|Insert/update user failed.||';
                }
            } else {
                $return_value = '|FAIL|Email already exists.||';
            }
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    } else {
        $return_value = '|FAIL|Confirm password is not valid.||';
    }

    echo $return_value;
    // </editor-fold>
}
if (isset($_REQUEST['action']) && $_REQUEST['action'] == 'changePass') {
    // <editor-fold defaultstate="collapsed" desc="Login">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $userPassword = $myDatabase->real_escape_string($_POST['userPassword']);
    // </editor-fold>

    if ($userPassword != '') {
        $salt = bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM));
        $saltedPW = trim($userPassword) . $salt;
        $hashedPW = hash('sha256', $saltedPW);

        $sql = "UPDATE `user` SET "
            . "user_password = '{$hashedPW}', "
            . "change_password = 0, "
            . "user_salt = '{$salt}' "
            . "WHERE user_id = {$_SESSION['userId']}";

        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            if ($boolNew) {
                $userId = $myDatabase->insert_id;
            }

            $return_value = '|OK|Password has successfully updated.|' . $userId . '|';
        } else {
            $return_value = '|FAIL|Update password failed.||';
        }
    } else {
        $return_value = '|FAIL|Password can not be empty.|';
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_modul_baru') {
    // <editor-fold defaultstate="collapsed" desc="delete_module">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $moduleSupportId = $myDatabase->real_escape_string($_POST['moduleSupportId']);
    // </editor-fold>

    if ($moduleSupportId != '') {
        $sql = "DELETE FROM `modulesupport` WHERE modulesupport_id = {$moduleSupportId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Module has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'modul_baru') {
    // <editor-fold defaultstate="collapsed" desc="module_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $moduleSupportId = $myDatabase->real_escape_string($_POST['moduleSupportId']);
    $moduleSupportName = $myDatabase->real_escape_string($_POST['moduleSupportName']);
    //$moduleDescription = $myDatabase->real_escape_string($_POST['moduleDescription']);
    //$active = $myDatabase->real_escape_string($_POST['active']);
    // </editor-fold>

    if ($moduleSupportId == '') {
        $boolNew = true;
    }

    if ($moduleSupportName != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `modulesupport` WHERE UPPER(modulesupport_name) = UPPER('{$moduleSupportName}')";
        } else {
            $sql = "SELECT * FROM `modulesupport` WHERE UPPER(modulesupport_name) = UPPER('{$moduleSupportName}') AND modulesupport_id <> {$moduleSupportId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `modulesupport` (modulesupport_name, entry_by, entry_date) VALUES ("
                    . "'{$moduleSupportName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `modulesupport` SET "
                    . "modulesupport_name = '{$moduleSupportName}', "
                    . "edit_by = '{$_SESSION['userId']}', "
                    . "edit_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s')"
                    //. "module_description = '{$moduleDescription}', "
                    //. "active = {$active} "
                    . "WHERE modulesupport_id = {$moduleSupportId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $moduleSupportId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Module has successfully inserted/updated.|' . $moduleSupportId . '|';
            } else {
                $return_value = '|FAIL|Insert/update module failed.|'. $sql .'|';
            }
        } else {
            $return_value = '|FAIL|Module already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_ticket') {
    // <editor-fold defaultstate="collapsed" desc="delete_module">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $ticketId = $myDatabase->real_escape_string($_POST['ticketId']);
    // </editor-fold>

    if ($ticketId != '') {
        //$sql = "DELETE FROM `ticket_it_support` WHERE ticket_id = '{$ticketId}'";
        $sql = "UPDATE `ticket_it_support` SET "
                    . "status = '3', "
                    . "cancel_by = '{$_SESSION['userId']}', "
                    . "cancel_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s')"
                    . "WHERE ticket_id = {$ticketId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            //$return_value = '|OK|Module has successfully deleted.|';
            $return_value = '|OK|Module has successfully canceled.|';
        } else {
            //$return_value = '|FAIL|Delete user failed.|';
            $return_value = '|FAIL|Cancel ticket failed.|';
            echo $sql;
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'reopen_ticket') {
    $return_value = '';
    $boolNew = false;
    $ticketId = $myDatabase->real_escape_string($_POST['ticketId']);
    //$status = $myDatabase->real_escape_string($_POST['status']);

    //if($status==2){
        $sql = "UPDATE `ticket_it_support` SET "
                    . "reopen_by = '{$_SESSION['userId']}', "
                    . "reopen_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),"
                    . "status = 1 "
                    . "WHERE ticket_id = {$ticketId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result !== false) {
            if ($boolNew) {
                $moduleSupportId = $myDatabase->insert_id;
            }
            $return_value = '|OK|Ticket has successfully reopen.|' . $sql;
        } else {
            $return_value = '|FAIL|Reopen ticket failed.|'. $sql .'|';
        }
    //} else {
    //    $return_value = '|FAIL|Please Check.||';
    //}

    echo $return_value;


} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'ticket') {
    // <editor-fold defaultstate="collapsed" desc="module_data">

    $return_value = '';
    $boolNew = false;
    $uploadDocument = true;

    $vendorAll = '';
    $exchangeRate = 1;
    $whereproperty = '';

    $tempFile = '';
    $reject_remarks = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $status = $myDatabase->real_escape_string($_POST['status']);
    $ticketId = $myDatabase->real_escape_string($_POST['ticketId']);
    if($status!=2){
        $generatedTicketId = $myDatabase->real_escape_string($_POST['generatedTicketId']);
        $modulesupport_id = $myDatabase->real_escape_string($_POST['modulesupport_id']);
        $division = $myDatabase->real_escape_string($_POST['division_id']);
        $notes = $myDatabase->real_escape_string($_POST['notes']);
        $urgent = $myDatabase->real_escape_string($_POST['urgent']);
        $expectedDate = $myDatabase->real_escape_string($_POST['expectedDate']);
    }
    // </editor-fold>

    //FILE
    if (isset($_FILES['file']) && $_FILES['file']['size'] > 0) {
        $allowed = array('png', 'jpg', 'jpeg','pdf', 'doc', 'docs', 'xls', 'xlsx');
        $fileName = $_FILES['file']['name'];
        $x = explode('.', $fileName);
        $ekstensi = strtolower(end($x));
        $ukuran = $_FILES['file']['size'];
        $file_tmp = $_FILES['file']['tmp_name'];

        if (in_array($ekstensi, $allowed) === true) {

            $attachmentPath = "./import/ticket";
            if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
                $temp = mkdir($attachmentPath, 0755, TRUE);
            else
                $temp = TRUE;

            if ($temp === TRUE) {
                $attachmentPath .= "/" . date("ymdHis") . "-" . basename($fileName);
                if (!move_uploaded_file($file_tmp, $attachmentPath)) {
                    echo '|FAIL|Error while uploading file.|';
                    die();
                }
            } else {
                echo '|FAIL|Error while creating directory.|';
                die();
            }


        } else {
            echo '|FAIL|EKSTENSI FILE YANG DI UPLOAD TIDAK DI PERBOLEHKAN.|';
            die();
        }
    } else {
        $sqlss = "SELECT ss_user from  `ticket_it_support` WHERE ticket_id = {$ticketId}";
        $resultss = $myDatabase->query($sqlss, MYSQLI_STORE_RESULT);
        if ($resultss !== false && $resultss->num_rows > 0) {
            $rowData = $resultss->fetch_object();
            $ss = $rowData->ss_user;
        }
        if($ss!=null){
            $attachmentPath = $ss;
        }else{
            $attachmentPath = 'NULL';
            $uploadDocument = false;
        }
    }

    if ($ticketId == '') {
        $boolNew = true;
    }

    
    if($status==2){
        $sql = "UPDATE `ticket_it_support` SET "
                    . "close_by = '{$_SESSION['userId']}', "
                    . "close_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),"
                    . "status = 4 "
                    . "WHERE ticket_id = {$ticketId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result !== false) {
            if ($boolNew) {
                $moduleSupportId = $myDatabase->insert_id;
            }
            $return_value = '|OK|Ticket has successfully closed.|' . $sql;
        } else {
            $return_value = '|FAIL|Close ticket failed.|'. $sql .'|';
        }
    }else if($status==4){
        $sql = "UPDATE `ticket_it_support` SET "
                    . "reopen_by = '{$_SESSION['userId']}', "
                    . "reopen_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),"
                    . "status = 1 "
                    . "WHERE ticket_id = {$ticketId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result !== false) {
            if ($boolNew) {
                $moduleSupportId = $myDatabase->insert_id;
            }
            $return_value = '|OK|Ticket has successfully reopen.|' . $sql;
        } else {
            $return_value = '|FAIL|Reopen ticket failed.|'. $sql .'|';
        }
    }else if ($modulesupport_id != '') {
        if ($boolNew) {
        //    $sql = "SELECT * FROM `ticket_it_support` WHERE UPPER(division) = UPPER('{$division}')";
        } else {
        //    $sql = "SELECT * FROM `ticket_it_support` WHERE UPPER(division) = UPPER('{$division}') AND ticket_no <> {$ticketId}";
        }
        //$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        //if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `ticket_it_support` (ticket_no, modulesupport_id, division, notes, urgent, expected_date, ss_user, entry_by, entry_date) VALUES ("
                    . "'{$generatedTicketId}','{$modulesupport_id}','{$division}','{$notes}','{$urgent}',STR_TO_DATE('$expectedDate', '%d/%m/%Y'),'{$attachmentPath}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `ticket_it_support` SET "
                    . "ticket_no = '{$generatedTicketId}', "
                    . "modulesupport_id = '{$modulesupport_id}', "
                    . "division = '{$division}', "
                    . "notes = '{$notes}', "
                    . "urgent = '{$urgent}', "
                    . "expected_date = STR_TO_DATE('$expectedDate', '%d/%m/%Y'), "
                    . "edit_by = '{$_SESSION['userId']}', "
                    . "ss_user ='{$attachmentPath}', "
                    . "edit_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s')"
                    //. "module_description = '{$moduleDescription}', "
                    //. "active = {$active} "
                    . "WHERE ticket_id = {$ticketId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $moduleSupportId = $myDatabase->insert_id;
                }
               // $return_value = '|OK|Data internal transfer berhasil di input|' . $sql;
                $return_value = '|OK|Ticket has successfully submitted/updated.|' . $sql;
            } else {
                $return_value = '|FAIL|Submit/update ticket failed.|'. $sql .'|';
            }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'ticket-approve') {
    // <editor-fold defaultstate="collapsed" desc="module_data">

    $return_value = '';
    $boolNew = false;
    $uploadDocument = true;

    $vendorAll = '';
    $exchangeRate = 1;
    $whereproperty = '';

    $tempFile = '';
    $reject_remarks = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $ticketId = $myDatabase->real_escape_string($_POST['ticketId']);
    //$generatedTicketId = $myDatabase->real_escape_string($_POST['generatedTicketId']);
    //$modulesupport_id = $myDatabase->real_escape_string($_POST['modulesupport_id']);
    //$division = $myDatabase->real_escape_string($_POST['division_id']);
    //$notes = $myDatabase->real_escape_string($_POST['notes']);
    //$urgent = $myDatabase->real_escape_string($_POST['urgent']);
    //$expectedDate = $myDatabase->real_escape_string($_POST['expectedDate']);
    $pic = $myDatabase->real_escape_string($_POST['user_id']);
    $type = $myDatabase->real_escape_string($_POST['type_id']);
    $assignNotes = $myDatabase->real_escape_string($_POST['assignNotes']);
    // </editor-fold>

    //FILE
    if (isset($_FILES['file']) && $_FILES['file']['size'] > 0) {
        $allowed = array('png', 'jpg', 'jpeg','pdf', 'doc', 'docs', 'xls', 'xlsx');
        $fileName = $_FILES['file']['name'];
        $x = explode('.', $fileName);
        $ekstensi = strtolower(end($x));
        $ukuran = $_FILES['file']['size'];
        $file_tmp = $_FILES['file']['tmp_name'];

        if (in_array($ekstensi, $allowed) === true) {

            $attachmentPath = "./import/ticket";
            if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
                $temp = mkdir($attachmentPath, 0755, TRUE);
            else
                $temp = TRUE;

            if ($temp === TRUE) {
                $attachmentPath .= "/" . date("ymdHis") . "-" . basename($fileName);
                if (!move_uploaded_file($file_tmp, $attachmentPath)) {
                    echo '|FAIL|Error while uploading file.|';
                    die();
                }
            } else {
                echo '|FAIL|Error while creating directory.|';
                die();
            }


        } else {
            echo '|FAIL|EKSTENSI FILE YANG DI UPLOAD TIDAK DI PERBOLEHKAN.|';
            die();
        }
    } else {
        $attachmentPath = 'NULL';
        $uploadDocument = false;
    }

    if ($ticketId == '') {
        $boolNew = true;
    }

    if ($pic != '' && $type !='') {
        if ($boolNew) {
        //    $sql = "SELECT * FROM `ticket_it_support` WHERE UPPER(division) = UPPER('{$division}')";
        } else {
        //    $sql = "SELECT * FROM `ticket_it_support` WHERE UPPER(division) = UPPER('{$division}') AND ticket_no <> {$ticketId}";
        }
        //$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        //if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `ticket_it_support` (ticket_no, modulesupport_id, division, notes, urgent, expected_date, ss_user, entry_by, entry_date) VALUES ("
                    . "'{$generatedTicketId}','{$modulesupport_id}','{$division}','{$notes}','{$urgent}',STR_TO_DATE('$expectedDate', '%d/%m/%Y'),'{$attachmentPath}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sqlpic = "SELECT pic_id from  `ticket_it_support` WHERE ticket_id = {$ticketId}";
                $resultpic = $myDatabase->query($sqlpic, MYSQLI_STORE_RESULT);
                if ($resultpic !== false && $resultpic->num_rows > 0) {
                    $rowData = $resultpic->fetch_object();
                    $pic_old = $rowData->pic_id;
                }

                if($pic_old!=null && $pic_old!=$pic){
                    $sqlhistory = "INSERT INTO `history_ticket_pic` (ticket_id, pic_id_old, entry_date) VALUES ("
                    . "'{$ticketId}','{$pic_old}', STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                    $resulthistory = $myDatabase->query($sqlhistory, MYSQLI_STORE_RESULT);
                }

                $sql = "UPDATE `ticket_it_support` SET "
                    //. "modulesupport_id = '{$modulesupport_id}', "
                    //. "division = '{$division}', "
                    //. "notes = '{$notes}', "
                    //. "urgent = '{$urgent}', "
                    //. "expected_date = STR_TO_DATE('$expectedDate', '%d/%m/%Y'), "
                    //. "edit_by = '{$_SESSION['userId']}', "
                    //. "edit_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s')"
                    . "approve_by = '{$_SESSION['userId']}', "
                    . "approve_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),"
                    . "status = 1,"
                    . "pic_id = {$pic}, "
                    . "assignNotes = '{$assignNotes}', "
                    . "type_id = {$type} "
                    . "WHERE ticket_id = {$ticketId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $moduleSupportId = $myDatabase->insert_id;
                }
               // $return_value = '|OK|Data internal transfer berhasil di input|' . $sql;
                $return_value = '|OK|Ticket has successfully submitted/updated.|' . $sql;
            } else {
                $return_value = '|FAIL|Submit/update ticket failed.|'. $sql .'|';
            }
        //} else {
        //    $return_value = '|FAIL|Ticket already exists.||';
        //}
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'ticket-assign') {
    // <editor-fold defaultstate="collapsed" desc="module_data">

    $return_value = '';
    $boolNew = false;
    $uploadDocument = true;

    $vendorAll = '';
    $exchangeRate = 1;
    $whereproperty = '';

    $tempFile = '';
    $reject_remarks = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $ticketId = $myDatabase->real_escape_string($_POST['ticketId']);
    $targetDate = $myDatabase->real_escape_string($_POST['targetDate']);
    $startDate = $myDatabase->real_escape_string($_POST['startDate']);
    $finish_note = $myDatabase->real_escape_string($_POST['finish_note']);
    //$target_date_no = $myDatabase->real_escape_string($_POST['target_date_no']);
    // </editor-fold>

    //FILE
    if (isset($_FILES['file_result']) && $_FILES['file_result']['size'] > 0) {
        $allowed = array('png', 'jpg', 'jpeg','pdf', 'doc', 'docs', 'xls', 'xlsx');
        $fileName = $_FILES['file_result']['name'];
        $x = explode('.', $fileName);
        $ekstensi = strtolower(end($x));
        $ukuran = $_FILES['file_result']['size'];
        $file_tmp = $_FILES['file_result']['tmp_name'];

        if (in_array($ekstensi, $allowed) === true) {

            $attachmentPath = "./import/ticket";
            if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
                $temp = mkdir($attachmentPath, 0755, TRUE);
            else
                $temp = TRUE;

            if ($temp === TRUE) {
                $attachmentPath .= "/" . date("ymdHis") . "-" . basename($fileName);
                if (!move_uploaded_file($file_tmp, $attachmentPath)) {
                    echo '|FAIL|Error while uploading file.|';
                    die();
                }
            } else {
                echo '|FAIL|Error while creating directory.|';
                die();
            }


        } else {
            echo '|FAIL|EKSTENSI FILE YANG DI UPLOAD TIDAK DI PERBOLEHKAN.|';
            die();
        }
    } else {
        $sqlss = "SELECT ss_done from  `ticket_it_support` WHERE ticket_id = {$ticketId}";
        $resultss = $myDatabase->query($sqlss, MYSQLI_STORE_RESULT);
        if ($resultss !== false && $resultss->num_rows > 0) {
            $rowData = $resultss->fetch_object();
            $ss = $rowData->ss_done;
        }
        if($ss!=null){
            $attachmentPath = $ss;
        }else{
            $attachmentPath = 'NULL';
            $uploadDocument = false;
        }
    }

    if ($ticketId == '') {
        $boolNew = true;
    }

    $targetdate_old ='';
    $date=date_create_from_format("d/m/Y",$targetDate);
    $td = date_format($date,"Y-m-d");
    $sqltd = "SELECT target_date, start_date, target_date_no from  `ticket_it_support` WHERE ticket_id = {$ticketId}";
            $resulttd = $myDatabase->query($sqltd, MYSQLI_STORE_RESULT);
    if ($resulttd !== false && $resulttd->num_rows > 0) {
        $rowData = $resulttd->fetch_object();
        $targetdate_old = $rowData->target_date;
        $sd = $rowData->start_date;
        $td_no = $rowData->target_date_no;
    }
    $td_new = $td_no;
    if($targetdate_old != '' && $targetdate_old != $td){
        $sqlhistory = "INSERT INTO `history_ticket_td` (ticket_id, change_no, target_date_old, entry_date) VALUES ("
        . "'{$ticketId}','{$td_no}',STR_TO_DATE('$targetdate_old', '%Y-%m-%d'), STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $resulthistory = $myDatabase->query($sqlhistory, MYSQLI_STORE_RESULT);

        $td_new =  $td_no + 1;
    }else if($td_no == null){
        $td_new = 1;
    }

    if ($attachmentPath != '' && $finish_note !='') {
        if ($boolNew) {
            $sql = "INSERT INTO `ticket_it_support` (ticket_no, modulesupport_id, division, notes, urgent, expected_date, ss_user, entry_by, entry_date) VALUES ("
                . "'{$generatedTicketId}','{$modulesupport_id}','{$division}','{$notes}','{$urgent}',STR_TO_DATE('$expectedDate', '%d/%m/%Y'),'{$attachmentPath}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        } else {
            $sql = "UPDATE `ticket_it_support` SET "
                . "finish_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),"
                . "status = 2,"
                //. "start_date = STR_TO_DATE('$startDate', '%d/%m/%Y'), "
                . "target_date = STR_TO_DATE('$targetDate', '%d/%m/%Y'), "
                . "target_date_no = '{$td_new}',"
                . "ss_done = '{$attachmentPath}', "
                . "finish_note = '{$finish_note}'"
                . "WHERE ticket_id = {$ticketId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            if ($boolNew) {
                $moduleSupportId = $myDatabase->insert_id;
            }
            $return_value = '|OK|Ticket has successfully submitted/updated.|' . $sql;
        } else {
            $return_value = '|FAIL|Submit/update ticket failed.|'. $sql .'|';
        }
    } else if ($targetDate != '' && $startDate != '' && $finish_note =='') {
        if($sd==null){
            $sql = "UPDATE `ticket_it_support` SET "
                    . "ss_done = '{$attachmentPath}', "
                    . "start_date = STR_TO_DATE('$startDate', '%d/%m/%Y'), "
                    . "target_date_no = '{$td_new}',"
                    . "target_date = STR_TO_DATE('$targetDate', '%d/%m/%Y') "
                    . "WHERE ticket_id = {$ticketId}";
        }else if($sd!=null){
            $sql = "UPDATE `ticket_it_support` SET "
                . "ss_done = '{$attachmentPath}', "
                . "target_date_no = '{$td_new}',"
                . "target_date = STR_TO_DATE('$targetDate', '%d/%m/%Y') "
                . "WHERE ticket_id = {$ticketId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            if ($boolNew) {
                $moduleSupportId = $myDatabase->insert_id;
            }
            $return_value = '|OK|Ticket has successfully submitted/updated.|' . $sql .'|'.$targetdate_old. '|'. $td;
        } else {
            $return_value = '|FAIL|Submit/update ticket failed.|'. $sql .'|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'user_module_data') {
    // <editor-fold defaultstate="collapsed" desc="user_module_data">

    $return_value = '';
    $selectedCheck = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $userId = $myDatabase->real_escape_string($_POST['userId']);
    // </editor-fold>

    if (isset($_POST['checks'])) {
        $checks = $_POST['checks'];
        for ($i = 0; $i < sizeof($checks); $i++) {
            $moduleId = $checks[$i];

            $sql = "SELECT * FROM user_module
                    WHERE user_id = {$userId}
                    AND module_id = {$moduleId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false && $result->num_rows == 0) {
                $sql = "INSERT INTO user_module (user_id, module_id) VALUES (
                        {$userId}, $moduleId)";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
            }
		
            if ($selectedCheck == '') {
                $selectedCheck .= $moduleId;
            } else {
                $selectedCheck .= ', ' . $moduleId;
            }
        }

        if ($selectedCheck != '') {
            $sql2 = "DELETE FROM user_module
                    WHERE user_id = {$userId}
                    AND module_id NOT IN ({$selectedCheck})";
            $result = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
        }
        $return_value = '|OK|User privilege(s) updated successfully.|' .    $sql;
		;
    } else {
        $return_value = '|FAIL|Please choose at least 1 privilege.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_user_stockpile') {
    // <editor-fold defaultstate="collapsed" desc="delete_user_stockpile">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $userStockpileId = $myDatabase->real_escape_string($_POST['userStockpileId']);
    // </editor-fold>

    if ($userStockpileId != '') {
        $sql = "DELETE FROM user_stockpile WHERE user_stockpile_id = {$userStockpileId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Stockpile deleted successfully.|';
        } else {
            $return_value = '|FAIL|Failed deleting stockpiles.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'user_stockpile_data') {
    // <editor-fold defaultstate="collapsed" desc="user_stockpile_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $userId = $myDatabase->real_escape_string($_POST['modalUserId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    // </editor-fold>

    if ($userId != '' && $stockpileId != '') {
        $sql = "INSERT INTO user_stockpile (user_id, stockpile_id) VALUES ({$userId}, {$stockpileId})";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Stockpile added successfully.|';
        } else {
            $return_value = '|FAIL|Failed adding stockpiles.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_vh_bank') {
    // <editor-fold defaultstate="collapsed" desc="delete_user_stockpile">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vhBankId = $myDatabase->real_escape_string($_POST['vhBankId']);
    // </editor-fold>

    if ($vhBankId != '') {
        $sql = "DELETE FROM vendor_handling_bank WHERE vh_bank_id = {$vhBankId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Bank deleted successfully.|';
        } else {
            $return_value = '|FAIL|Failed deleting Bank.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
}   elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'general_vendor_bank_data') {
    // <editor-fold defaultstate="collapsed" desc="user_stockpile_data">

    $return_value = '';
	$customerType = 0;
	$customerResiden = 0;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $generalVendorId = $myDatabase->real_escape_string($_POST['modalGeneralVendorId']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
    $branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $masterBankId = $myDatabase->real_escape_string($_POST['masterBank']);
    $gvBankId = $myDatabase->real_escape_string($_POST['gvBankId']);
    $active = $myDatabase->real_escape_string($_POST['active']);
	$customerType = $myDatabase->real_escape_string($_POST['customerType']);
	$customerResiden = $myDatabase->real_escape_string($_POST['customerResiden']);
	$customerType = $myDatabase->real_escape_string($_POST['customerType']);
$customerResiden = $myDatabase->real_escape_string($_POST['customerResiden']);

    // </editor-fold>
    if ($gvBankId == '') {
        $boolNew = true;
    }
	
	if ($customerType == '') {
        $customerType = 0;
    }
	
	if ($customerResiden == '') {
        $customerResiden = 0;
    }

    if ($generalVendorId != '' && $bankName != '' && $branch != '' && $accountNo != '' && $beneficiary != '') {
        if ($boolNew) {
            $sql = "INSERT INTO general_vendor_bank (general_vendor_id, bank_name, branch, account_no, beneficiary, swift_code,master_bank_id,active, "
			. "customer_type, customer_residen) "
             . "VALUES ({$generalVendorId}, '{$bankName}', '{$branch}', '{$accountNo}', '{$beneficiary}', '{$swiftCode}', "
			 . "{$masterBankId},{$active}, '{$customerType}', '{$customerResiden}')";
        } else {
            $sql = "UPDATE `general_vendor_bank` SET "
                . "bank_name = '{$bankName}', "
                . "branch = '{$branch}', "
                . "account_no = '{$accountNo}', "
                . "beneficiary = '{$beneficiary}', "
                . "swift_code = '{$swiftCode}', "
                . "active = '{$active}', "
                . "master_bank_id = {$masterBankId}, "
				. "customer_type = {$customerType}, "
				. "customer_residen = {$customerResiden} "
                . "WHERE gv_bank_id = {$gvBankId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Bank added successfully.|';
        } else {
            $return_value = '|FAIL|Failed adding Bank.|';
			echo $sql;
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'labor_bank_data') {
    // <editor-fold defaultstate="collapsed" desc="user_stockpile_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $laborId = $myDatabase->real_escape_string($_POST['modalLaborId']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
    $branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $masterBankId = $myDatabase->real_escape_string($_POST['masterBank']);
    $lBankId = $myDatabase->real_escape_string($_POST['lBankId']);
    $active = $myDatabase->real_escape_string($_POST['active']);
	$customerType = $myDatabase->real_escape_string($_POST['customerType']);
$customerResiden = $myDatabase->real_escape_string($_POST['customerResiden']);


    // </editor-fold>

    if ($lBankId == '') {
        $boolNew = true;
    }

    if ($laborId != '' && $bankName != '' && $branch != '' && $accountNo != '' && $beneficiary != '') {
        if ($boolNew) {
            $sql = "INSERT INTO labor_bank (labor_id, bank_name, branch, account_no, beneficiary, swift_code,master_bank_id,active, customer_type, customer_residen)
        VALUES ({$laborId}, '{$bankName}', '{$branch}', '{$accountNo}', '{$beneficiary}', '{$swiftCode}',{$masterBankId},{$active}, {$customerType}, {$customerResiden})";
        } else {
            $sql = "UPDATE `labor_bank` SET "
                . "bank_name = '{$bankName}', "
                . "branch = '{$branch}', "
                . "account_no = '{$accountNo}', "
                . "beneficiary = '{$beneficiary}', "
                . "swift_code = '{$swiftCode}', "
                . "active = '{$active}', "
                . "master_bank_id = {$masterBankId}, "
				. "customer_type = {$customerType}, "
				. "customer_residen = {$customerResiden} "
                . "WHERE l_bank_id = {$lBankId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Bank added successfully.|';
        } else {
            $return_value = '|FAIL|Failed adding Bank.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'vh_bank_data') {
    // <editor-fold defaultstate="collapsed" desc="user_stockpile_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vhBankId = $myDatabase->real_escape_string($_POST['vhBankId']);
    $vendorHandlingId = $myDatabase->real_escape_string($_POST['modalVendorHandlingId']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
    $branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $masterBankId = $myDatabase->real_escape_string($_POST['masterBank']);
    $active = $myDatabase->real_escape_string($_POST['active']);
	$customerType = $myDatabase->real_escape_string($_POST['customerType']);
$customerResiden = $myDatabase->real_escape_string($_POST['customerResiden']);
    // </editor-fold>

    if ($vhBankId == '') {
        $boolNew = true;
    }

    if ($vendorHandlingId != '' && $bankName != '' && $branch != '' && $accountNo != '' && $beneficiary != '' && $masterBankId != '') {
        if ($boolNew) {
            $sql = "INSERT INTO vendor_handling_bank (vendor_handling_id, bank_name, branch, account_no, beneficiary, swift_code,master_bank_id,active, customer_type, customer_residen)
                VALUES ({$vendorHandlingId}, '{$bankName}', '{$branch}', '{$accountNo}', '{$beneficiary}', '{$swiftCode}',{$masterBankId},{$active}, '{$customerType}', '{$customerResiden}' )";
        } else {
            $sql = "UPDATE `vendor_handling_bank` SET "
                . "bank_name = '{$bankName}', "
                . "branch = '{$branch}', "
                . "account_no = '{$accountNo}', "
                . "beneficiary = '{$beneficiary}', "
                . "swift_code = '{$swiftCode}', "
                . "active = '{$active}', "
                . "master_bank_id = {$masterBankId} ,"
				. "customer_type = {$customerType}, "
				. "customer_residen = {$customerResiden} "
                . "WHERE vh_bank_id = {$vhBankId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Bank added successfully.|';
        } else {
            $return_value = '|FAIL|Failed adding Bank.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
}   elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'v_bank_data') {
    // <editor-fold defaultstate="collapsed" desc="user_stockpile_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['modalVendorId']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
    $branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $masterBankId = $myDatabase->real_escape_string($_POST['masterBank']);
    $vBankId = $myDatabase->real_escape_string($_POST['vBankId']);
    $active = $myDatabase->real_escape_string($_POST['active']);
	$customerType = $myDatabase->real_escape_string($_POST['customerType']);
	$customerResiden = $myDatabase->real_escape_string($_POST['customerResiden']);

    // </editor-fold>

    if ($vBankId == '') {
        $boolNew = true;
    }

    if ($vendorId != '' && $bankName != '' && $branch != '' && $accountNo != '' && $beneficiary != '') {
        if ($boolNew) {
            $sql = "INSERT INTO vendor_bank (vendor_id, bank_name, branch, account_no, beneficiary, swift_code,master_bank_id, active, customer_type, customer_residen)
            VALUES ({$vendorId}, '{$bankName}', '{$branch}', '{$accountNo}', '{$beneficiary}', '{$swiftCode}',{$masterBankId},{$active}, {$customerType}, {$customerResiden} )";

        } else {
            $sql = "UPDATE `vendor_bank` SET "
                . "bank_name = '{$bankName}', "
                . "branch = '{$branch}', "
                . "account_no = '{$accountNo}', "
                . "beneficiary = '{$beneficiary}', "
                . "swift_code = '{$swiftCode}', "
                . "active = '{$active}', "
                . "master_bank_id = {$masterBankId} ,"
				. "customer_type = {$customerType}, "
				. "customer_residen = {$customerResiden} "
                . "WHERE v_bank_id = {$vBankId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Bank added successfully.|';
        } else {
            $return_value = '|FAIL|Failed adding Bank.|';
			echo $sql;
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'freight_bank_data') {
    // <editor-fold defaultstate="collapsed" desc="user_stockpile_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightId = $myDatabase->real_escape_string($_POST['modalFreightId']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
    $branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $masterBankId = $myDatabase->real_escape_string($_POST['masterBank']);
    $fBankId = $myDatabase->real_escape_string($_POST['fBankId']);
    $active = $myDatabase->real_escape_string($_POST['active']);
	$customerType = $myDatabase->real_escape_string($_POST['customerType']);
	$customerResiden = $myDatabase->real_escape_string($_POST['customerResiden']);


    // </editor-fold>

    if ($fBankId == '') {
        $boolNew = true;
    }

    if ($freightId != '' && $bankName != '' && $branch != '' && $accountNo != '' && $beneficiary != '') {

        if ($boolNew) {
            $sql = "INSERT INTO freight_bank (freight_id, bank_name, branch, account_no, "
			. "beneficiary, swift_code,master_bank_id,active, customer_type, customer_residen) "
        . "VALUES ({$freightId}, '{$bankName}', '{$branch}', '{$accountNo}', "
		. "'{$beneficiary}', '{$swiftCode}',{$masterBankId},{$active}, {$customerType}, {$customerResiden})";
        } else {
            $sql = "UPDATE `freight_bank` SET "
                . "bank_name = '{$bankName}', "
                . "branch = '{$branch}', "
                . "account_no = '{$accountNo}', "
                . "beneficiary = '{$beneficiary}', "
                . "swift_code = '{$swiftCode}', "
                . "active = '{$active}', "
                . "master_bank_id = {$masterBankId}, "
				. "customer_type = {$customerType}, "
				. "customer_residen = {$customerResiden} "
                . "WHERE f_bank_id = {$fBankId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		echo $sql;
        if ($result !== false) {
            $return_value = '|OK|Bank added successfully.|';
        } else {
            $return_value = '|FAIL|Failed adding Bank.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
}  elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_vendor_invoice') {
    // <editor-fold defaultstate="collapsed" desc="delete_module">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $InvoiceDetailId = $myDatabase->real_escape_string($_POST['InvoiceDetailId']);
    // </editor-fold>

    if ($InvoiceDetailId != '') {
        $sql = "DELETE FROM `invoice_detail` WHERE invoice_detail_id = {$InvoiceDetailId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);



        if ($result !== false) {
            $return_value = '|OK|Data has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete Data failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_module') {
    // <editor-fold defaultstate="collapsed" desc="delete_module">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $moduleId = $myDatabase->real_escape_string($_POST['moduleId']);
    // </editor-fold>

    if ($moduleId != '') {
        $sql = "DELETE FROM `user_module` WHERE module_id = {$moduleId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "DELETE FROM `module` WHERE module_id = {$moduleId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Module has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'module_data') {
    // <editor-fold defaultstate="collapsed" desc="module_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $moduleId = $myDatabase->real_escape_string($_POST['moduleId']);
    $moduleName = $myDatabase->real_escape_string($_POST['moduleName']);
    $moduleDescription = $myDatabase->real_escape_string($_POST['moduleDescription']);
    $active = $myDatabase->real_escape_string($_POST['active']);
    // </editor-fold>

    if ($moduleId == '') {
        $boolNew = true;
    }

    if ($moduleName != '' && $active != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `module` WHERE UPPER(module_name) = UPPER('{$moduleName}')";
        } else {
            $sql = "SELECT * FROM `module` WHERE UPPER(module_name) = UPPER('{$moduleName}') AND module_id <> {$moduleId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `module` (module_name, module_description, active, entry_by, entry_date) VALUES ("
                    . "'{$moduleName}', '{$moduleDescription}', {$active}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `module` SET "
                    . "module_name = '{$moduleName}', "
                    . "module_description = '{$moduleDescription}', "
                    . "active = {$active} "
                    . "WHERE module_id = {$moduleId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $moduleId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Module has successfully inserted/updated.|' . $moduleId . '|';
            } else {
                $return_value = '|FAIL|Insert/update module failed.||';
            }
        } else {
            $return_value = '|FAIL|Module already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_invoice_data') {
    // <editor-fold defaultstate="collapsed" desc="module_data">

    $return_value = '';
    //$boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $invoiceId = $myDatabase->real_escape_string($_POST['invoiceId']);
    $invoiceNo = $myDatabase->real_escape_string($_POST['invoiceNo']);
    // $invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
    $originalInvoiceNo = $myDatabase->real_escape_string($_POST['originalInvoiceNo']);
    $taxInvoiceNo = $myDatabase->real_escape_string($_POST['taxInvoiceNo']);
    $taxInvoiceDate = $myDatabase->real_escape_string($_POST['taxInvoiceDate']);
    $invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
    //$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    $originalInvoiceNo2 = $myDatabase->real_escape_string($_POST['originalInvoiceNo2']);
    $taxInvoiceNo2 = $myDatabase->real_escape_string($_POST['taxInvoiceNo2']);
    $taxInvoiceDate2 = $myDatabase->real_escape_string($_POST['taxInvoiceDate2']);
    $invoiceDate2 = $myDatabase->real_escape_string($_POST['invoiceDate2']);
    $remarks2 = $myDatabase->real_escape_string($_POST['remarks2']);
	 $pengajuanNo = $myDatabase->real_escape_string($_POST['pengajuanNo']);
    $oldPengajuan_id = $myDatabase->real_escape_string($_POST['oldPengajuan_id']);
    // </editor-fold>

    //if ($moduleId == '') {
    //    $boolNew = true;
    //}

    if ($originalInvoiceNo2 == '') {
        $originalInvoiceNo2 = '-';
    }
    if ($taxInvoiceNo2 == '') {
        $taxInvoiceNo2 = '-';
    }
    if ($taxInvoiceDate2 == '') {
        $taxInvoiceDate2 = 'NULL';
    }
    if ($invoiceDate2 == '') {
        $invoiceDate2 = 'NULL';
    }
    if ($remarks2 == '') {
        $remarks2 = '-';
    }
	if ($oldPengajuan_id == '') {
        $oldPengajuan_id = NULL;
    }
	
	//Closing Date
    $newInvoiceDate = implode("-", array_reverse(explode("/", $invoiceDate)));
    $checkClosingDate = explode('-', closingDate($newInvoiceDate, 'Update Data - Update Invoice'));
    $boolClosing = $checkClosingDate[0];
    $closingDate = $checkClosingDate[1];
    if ($invoiceId != '') {
       // if ($boolClosing) {
            $sqla = "INSERT INTO `invoice_update` (invoiceId, oldPengajuan_id, newPengajuan_id, originalInvoiceNo2, taxInvoiceNo2, taxInvoiceDate2, invoiceDate2,remarks2, edit_by, edit_date) VALUES ("
                . "'{$invoiceId}', {$oldPengajuan_id}, {$pengajuanNo}, '{$originalInvoiceNo2}', '{$taxInvoiceNo2}', '{$taxInvoiceDate2}', '{$invoiceDate2}', '{$remarks2}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);


            $sql = "UPDATE invoice SET "
                // . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                . "invoice_no2 = '{$originalInvoiceNo}', "
                . "invoice_tax = '{$taxInvoiceNo}', "
                //. "stockpileId = '{$stockpileId}', "
                . "remarks = '{$remarks}', "
                . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                . "tax_date = STR_TO_DATE('{$taxInvoiceDate}', '%d/%m/%Y') "
                . "WHERE invoice_id = {$invoiceId}";

            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            /*$sql = "UPDATE gl_report SET "
                       // . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                        . "invoice_no_2 = '{$originalInvoiceNo}', "
                        . "tax_invoice = '{$taxInvoiceNo}', "
                        //. "stockpileId = '{$stockpileId}', "
                        //. "remarks = '{$remarks}', "
                        . "gl_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y') "
                        //. "tax_date = STR_TO_DATE('{$taxInvoiceDate}', '%d/%m/%Y') "
                        . "WHERE jurnal_no = '{$invoiceNo}'";

            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/

            if ($result !== false) {


                $return_value = '|OK|Successfully Updated.|' . $invoiceId . '|';
				
				//add by yeni
				if($oldPengajuan_id != $pengajuanNo){
					$sqlOld = "UPDATE pengajuan_general set invoice_id = NULL WHERE pengajuan_general_id = {$oldPengajuan_id}";
					$resultOld = $myDatabase->query($sqlOld, MYSQLI_STORE_RESULT);
					if ($resultOld !== false) {
						$sql = "UPDATE `logbook_new` SET inv_general_id = NULL WHERE pgeneral_id = {$oldPengajuan_id}";
						$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
					}
					
					$sqlNew = "UPDATE pengajuan_general set invoice_id = {$invoiceId} WHERE pengajuan_general_id = {$pengajuanNo}";
					$resultNew = $myDatabase->query($sqlNew, MYSQLI_STORE_RESULT);
					if ($resultNew !== false) {
						$sql = "UPDATE `logbook_new` SET inv_general_id = {$invoiceId} WHERE pgeneral_id = {$pengajuanNo}";
						$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
					}
				}

                $sqlA = "SELECT invoice_detail_id FROM invoice_detail
                                WHERE invoice_id = {$invoiceId}";
                $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                if ($resultA !== false && $resultA->num_rows >= 1) {
                    while ($rowA = $resultA->fetch_object()) {

                        $invoiceId = $rowA->invoice_detail_id;

                        insertGeneralLedger($myDatabase, 'INVOICE DETAIL', $invoiceId);
                        insertReportGL($myDatabase, 'INVOICE DETAIL', $invoiceId);

                    }
                }
            } else {
                $return_value = '|FAIL|Update Failed.||';
            }
       /* } else {
            echo $closingDate;
            die();
        }*/

    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_invoice_detail') {
    // <editor-fold defaultstate="collapsed" desc="module_data">

    $return_value = '';
    //$boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $invoiceId = $myDatabase->real_escape_string($_POST['invoiceId']);
    $invoiceDetailId = $myDatabase->real_escape_string($_POST['invoiceDetailId']);
    $invoiceType = $myDatabase->real_escape_string($_POST['invoiceType']);
    $invoiceTypeOld = $myDatabase->real_escape_string($_POST['invoiceTypeOld']);
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $accountIdOld = $myDatabase->real_escape_string($_POST['accountIdOld']);
    $stockpileId2 = $myDatabase->real_escape_string($_POST['stockpileId2']);
    $stockpileId2Old = $myDatabase->real_escape_string($_POST['stockpileId2Old']);
    $shipmentId1 = $myDatabase->real_escape_string($_POST['shipmentId1']);
    $shipmentId1Old = $myDatabase->real_escape_string($_POST['shipmentId1Old']);
    $uom = $myDatabase->real_escape_string($_POST['uom']);
    $uomOld = $myDatabase->real_escape_string($_POST['uomOld']);
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $notesOld = $myDatabase->real_escape_string($_POST['notesOld']);
    // </editor-fold>

    //if ($moduleId == '') {
    //    $boolNew = true;
    //}
    if ($invoiceTypeOld == '') {
        $invoiceTypeOld = 0;
    }
    if ($accountIdOld == '') {
        $accountIdOld = 0;
    }
    if ($stockpileId2Old == '') {
        $stockpileId2Old = 0;
    }
    if ($shipmentId1Old == '') {
        $shipmentId1Old = 0;
    }
    if ($uomOld == '') {
        $uomOld = 0;
    }
    if ($uom == '') {
        $uom = 0;
    }
    if ($notesOld == '') {
        $notesOld = '-';
    }
    if ($shipmentId1 == '') {
        $shipmentId1 = 0;
    }

	$sqlInvoice = "SELECT DATE_FORMAT(invoice_date, '%Y-%m-%d') AS invoice_date FROM invoice WHERE invoice_id = {$invoiceId}";
    $resultInvoice = $myDatabase->query($sqlInvoice, MYSQLI_STORE_RESULT);
    if($resultInvoice !== false && $resultInvoice->num_rows == 1) {
        $row = $resultInvoice->fetch_object();
        $invoiceDate = $row->invoice_date;
        }
    
    //Closing Date
    $checkClosingDate = explode('-', closingDate($invoiceDate, 'Update Data - Update Invoice'));
    $boolClosing = $checkClosingDate[0];
    $closingDate = $checkClosingDate[1];    
    if ($invoiceDetailId != '') {
        if ($boolClosing) {

        $sqla = "INSERT INTO `invoice_detail_update` (invoiceDetailId, invoiceType, accountId, stockpileId2, shipmentId1,uom,notes, edit_by, edit_date) VALUES ("
            . "'{$invoiceDetailId}', '{$invoiceTypeOld}', '{$accountIdOld}', '{$stockpileId2Old}', '{$shipmentId1Old}', '{$uomOld}', '{$notesOld}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $result = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);

        $sql = "UPDATE invoice_detail SET "
            // . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
            . "type = '{$invoiceType}', "
            . "account_id = '{$accountId}', "
            . "stockpile_remark = '{$stockpileId2}', "
            . "shipment_id = '{$shipmentId1}', "
            . "idUOM = '{$uom}', "
            . "notes = '{$notes}' "

            . "WHERE invoice_detail_id = {$invoiceDetailId}";

        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        /*$sql = "UPDATE general_ledger SET "
                   // . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                    . "account_id = '{$accountId}' "

                    //. "tax_date = STR_TO_DATE('{$taxInvoiceDate}', '%d/%m/%Y') "
                    . "WHERE invoice_id = '{$invoiceDetailId}' AND account_id = '{$accountIdOld}'";

        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "SELECT * FROM account WHERE account_id = {$accountId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result !== false && $result->num_rows == 1) {
        $row = $result->fetch_object();
        $accountNo = $row->account_no;
        $accountName = $row->account_name;
        }

        $sql = "SELECT * FROM account WHERE account_id = {$accountIdOld}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result !== false && $result->num_rows == 1) {
        $row = $result->fetch_object();
        $accountNoOld = $row->account_no;
        //$accountName = $row->account_name;
        }

        $sql = "SELECT * FROM stockpile WHERE stockpile_id = {$stockpileId2}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result !== false && $result->num_rows == 1) {
        $row = $result->fetch_object();
        $stockpileName = $row->stockpile_name;
        //$accountName = $row->account_name;
        }

        $sql = "SELECT * FROM shipment WHERE shipment_id = {$shipmentId1}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result !== false && $result->num_rows == 1) {
        $row = $result->fetch_object();
        $shipmentNo = $row->shipment_no;
        //$accountName = $row->account_name;
        }

        $sql = "UPDATE gl_report SET "
                   // . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                    . "account_no = '{$accountNo}', "
                    . "account_name = '{$accountName}', "
                    . "stockpile = '{$stockpileName}', "
                    . "shipment_code = '{$shipmentNo}', "
                    . "remarks = '{$notes}' "
                    //. "gl_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y') "
                    //. "tax_date = STR_TO_DATE('{$taxInvoiceDate}', '%d/%m/%Y') "
                    . "WHERE invoice_id = '{$invoiceDetailId}' AND account_no = '{$accountNoOld}'";

        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/

			if ($result !== false) {


				$return_value = '|OK|Successfully Updated.|' . $sqla . '|';

				$sqlA = "SELECT invoice_detail_id FROM invoice_detail
									WHERE invoice_id = {$invoiceId}";
				$resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
				if ($resultA !== false && $resultA->num_rows >= 1) {
					while ($rowA = $resultA->fetch_object()) {

						$invoiceId = $rowA->invoice_detail_id;

						insertGeneralLedger($myDatabase, 'INVOICE DETAIL', $invoiceId);
						insertReportGL($myDatabase, 'INVOICE DETAIL', $invoiceId);

					}
				}
			} else {
				$return_value = '|FAIL|Update Failed.|' . $sql . '|';
			}
		} else {
			echo $closingDate;
			die();
		}
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_cash_payment_data') {
    // <editor-fold defaultstate="collapsed" desc="module_data">

    $return_value = '';
    //$boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentId = $myDatabase->real_escape_string($_POST['paymentId']);
    $paymentNo = $myDatabase->real_escape_string($_POST['paymentNo']);
    $paymentDate = $myDatabase->real_escape_string($_POST['paymentDate']);
    $invoiceNo = $myDatabase->real_escape_string($_POST['invoiceNo']);
    $invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
    $taxInvoiceNo = $myDatabase->real_escape_string($_POST['taxInvoiceNo']);
    $taxInvoiceDate = $myDatabase->real_escape_string($_POST['taxInvoiceDate']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    // </editor-fold>

    //if ($moduleId == '') {
    //    $boolNew = true;
    //}
	//Closing Date
    $newPaymentDate = implode("-", array_reverse(explode("/", $paymentDate)));
    $checkClosingDate = explode('-', closingDate($newPaymentDate, 'Update Data - Update Invoice'));
    $boolClosing = $checkClosingDate[0];
    $closingDate = $checkClosingDate[1];
    if ($paymentId != '') {
        if ($boolClosing) {
        $sql = "UPDATE payment SET "
            . "payment_date = STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), "
            . "invoice_no = '{$invoiceNo}', "
            . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
            . "tax_invoice = '{$taxInvoiceNo}', "
            . "remarks = '{$remarks}', "
            . "tax_invoice_date = STR_TO_DATE('{$taxInvoiceDate}', '%d/%m/%Y') "
            . "WHERE payment_id = {$paymentId}";

        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        /*$sql = "UPDATE gl_report SET "
                       // . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                        . "gl_date = STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), "
                        . "tax_invoice = '{$taxInvoiceNo}', "
                        . "invoice_no = '{$invoiceNo}', "
                        . "invoice_no_2 = '{$invoiceNo}', "
                        . "remarks = '{$remarks}' "
                        //. "gl_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y') "
                        //. "tax_date = STR_TO_DATE('{$taxInvoiceDate}', '%d/%m/%Y') "
                        . "WHERE payment_id = '{$paymentId}'";
            
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/

        $sql = "SELECT * FROM payment a LEFT JOIN bank b ON a.bank_id = b.bank_id WHERE a.payment_id = {$paymentId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            $payment_cash_id = $row->payment_cash_id;
            $bankType = $row->bank_type;
        }

        if ($result !== false) {


            $return_value = '|OK|Successfully Updated.|' . $paymentId . '|';


            if ($payment_cash_id == 10 && $bankType == 2) {
                insertGeneralLedger($myDatabase, 'PETTY CASH', "NULL", "NULL", "NULL", "NULL", $paymentId);
                insertReportGL($myDatabase, 'PETTY CASH', "NULL", "NULL", "NULL", "NULL", $paymentId);
            } else {
                insertGeneralLedger($myDatabase, 'PAYMENT ADMIN', "NULL", "NULL", "NULL", "NULL", $paymentId);
                insertReportGL($myDatabase, 'PAYMENT ADMIN', "NULL", "NULL", "NULL", "NULL", $paymentId);
            }

            } else {
            $return_value = '|FAIL|Update Failed.||';
            }
        } else {
            echo $closingDate;
            die();
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_cash_payment_detail') {
    // <editor-fold defaultstate="collapsed" desc="module_data">

    $return_value = '';
    //$boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentId = $myDatabase->real_escape_string($_POST['paymentId']);
    $paymentCashId = $myDatabase->real_escape_string($_POST['paymentCashId']);
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $accountIdOld = $myDatabase->real_escape_string($_POST['accountIdOld']);
    $notesOld = $myDatabase->real_escape_string($_POST['notesOld']);
    $notes = $myDatabase->real_escape_string($_POST['notes']);
	$stockpileId2 = $myDatabase->real_escape_string($_POST['stockpileId2']);
    $stockpileId2Old = $myDatabase->real_escape_string($_POST['stockpileId2Old']);
    $shipmentId1 = $myDatabase->real_escape_string($_POST['shipmentId1']);
    $shipmentId1Old = $myDatabase->real_escape_string($_POST['shipmentId1Old']);
    $uom = $myDatabase->real_escape_string($_POST['uom']);
    $uomOld = $myDatabase->real_escape_string($_POST['uomOld']);
    // </editor-fold>

    //if ($moduleId == '') {
    //    $boolNew = true;
    //}

	 if ($stockpileId2Old == '') {
        $stockpileId2Old = 0;
    }
    if ($shipmentId1Old == '') {
        $shipmentId1Old = 0;
    }
    if ($uomOld == '') {
        $uomOld = 0;
    }
    if ($uom == '') {
        $uom = 0;
    }
    if ($notesOld == '') {
        $notesOld = '-';
    }
    if ($shipmentId1 == '') {
        $shipmentId1 = 0;
    }
	
	$sqlPayment = "SELECT DATE_FORMAT(payment_date, '%Y-%m-%d') AS payment_date FROM payment WHERE payment_id = {$paymentId}";
    $resultPayment = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT);
    if($resultPayment !== false && $resultPayment->num_rows == 1) {
        $row = $resultPayment->fetch_object();
        $paymentDate = $row->payment_date;
        }
    
    //Closing Date
    $checkClosingDate = explode('-', closingDate($paymentDate, 'Update Data - Update Data Cash Payment'));
    $boolClosing = $checkClosingDate[0];
    $closingDate = $checkClosingDate[1];

    if ($paymentCashId != '') {
        if ($boolClosing) {
			
			$sqla = "INSERT INTO payment_cash_update (SELECT *, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']} FROM payment_cash WHERE payment_cash_id = {$paymentCashId})";
                $result = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);

        $sql = "UPDATE payment_cash SET "
            // . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
            . "account_id = '{$accountId}', "
			. "stockpile_remark = '{$stockpileId2}', "
            . "shipment_id = '{$shipmentId1}', "
            . "idUOM = '{$uom}', "
            . "notes = '{$notes}' "
            . "WHERE payment_cash_id = {$paymentCashId}";

        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        /*$sql = "UPDATE general_ledger SET "
                   // . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                    . "account_id = '{$accountId}' "

                    //. "tax_date = STR_TO_DATE('{$taxInvoiceDate}', '%d/%m/%Y') "
                    . "WHERE cash_id = '{$paymentCashId}' AND account_id = '{$accountIdOld}'";

        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "SELECT * FROM account WHERE account_id = {$accountId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result !== false && $result->num_rows == 1) {
        $row = $result->fetch_object();
        $accountNo = $row->account_no;
        $accountName = $row->account_name;
        }

        $sql = "SELECT * FROM account WHERE account_id = {$accountIdOld}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result !== false && $result->num_rows == 1) {
        $row = $result->fetch_object();
        $accountNoOld = $row->account_no;
        //$accountName = $row->account_name;
        }

        $sql = "UPDATE gl_report SET "
                   // . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                    . "account_no = '{$accountNo}', "
                    . "account_name = '{$accountName}', "
                    //. "stockpileId = '{$stockpileId}', "
                    . "remarks = '{$notes}' "
                    //. "gl_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y') "
                    //. "tax_date = STR_TO_DATE('{$taxInvoiceDate}', '%d/%m/%Y') "
                    . "WHERE payment_id = '{$paymentId}' AND account_no = '{$accountNoOld}' AND remarks = '{$notesOld}'";

        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/

        $sql = "SELECT * FROM payment a LEFT JOIN bank b ON a.bank_id = b.bank_id WHERE a.payment_id = {$paymentId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            $payment_cash_id = $row->payment_cash_id;
            $bankType = $row->bank_type;
        }

			if ($result !== false) {
				$return_value = '|OK|Successfully Updated.||';

				if ($payment_cash_id == 10 && $bankType == 2) {
					insertGeneralLedger($myDatabase, 'PETTY CASH', "NULL", "NULL", "NULL", "NULL", $paymentId);
					insertReportGL($myDatabase, 'PETTY CASH', "NULL", "NULL", "NULL", "NULL", $paymentId);
				} else {
					insertGeneralLedger($myDatabase, 'PAYMENT ADMIN', "NULL", "NULL", "NULL", "NULL", $paymentId);
					insertReportGL($myDatabase, 'PAYMENT ADMIN', "NULL", "NULL", "NULL", "NULL", $paymentId);
				}
			} else {
				$return_value = '|FAIL|Update Failed.||';
			}
		} else {
            echo $closingDate;
            die();
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_payment_data') {
    // <editor-fold defaultstate="collapsed" desc="module_data">

    $return_value = '';
    //$boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentId = $myDatabase->real_escape_string($_POST['paymentId']);
    $paymentNo = $myDatabase->real_escape_string($_POST['paymentNo']);
    $paymentDate = $myDatabase->real_escape_string($_POST['paymentDate']);
    $invoiceNo = $myDatabase->real_escape_string($_POST['invoiceNo']);
    $invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
    $taxInvoiceNo = $myDatabase->real_escape_string($_POST['taxInvoiceNo']);
    $taxInvoiceDate = $myDatabase->real_escape_string($_POST['taxInvoiceDate']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    $remarks2 = $myDatabase->real_escape_string($_POST['remarks2']);
    $chequeNo = $myDatabase->real_escape_string($_POST['chequeNo']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $paymentDate2 = $myDatabase->real_escape_string($_POST['paymentDate2']);
    $invoiceNo2 = $myDatabase->real_escape_string($_POST['invoiceNo2']);
    $invoiceDate2 = $myDatabase->real_escape_string($_POST['invoiceDate2']);
    $taxInvoiceNo2 = $myDatabase->real_escape_string($_POST['taxInvoiceNo2']);
    $taxInvoiceDate2 = $myDatabase->real_escape_string($_POST['taxInvoiceDate2']);
    $remarks3 = $myDatabase->real_escape_string($_POST['remarks3']);
    $remarks4 = $myDatabase->real_escape_string($_POST['remarks4']);
    $chequeNo2 = $myDatabase->real_escape_string($_POST['chequeNo2']);
    $stockpileI2 = $myDatabase->real_escape_string($_POST['stockpileId2']);
    // </editor-fold>

    //if ($moduleId == '') {
    //    $boolNew = true;
    //}

    if ($invoiceNo2 == '') {
        $invoiceNo2 = 'NULL';
    }
    if ($invoiceDate2 == '') {
        $invoiceDate2 = '0000-00-00';
    }
    if ($taxInvoiceNo2 == '') {
        $taxInvoiceNo2 = 'NULL';
    }
    if ($taxInvoiceDate2 == '') {
        $taxInvoiceDate2 = '0000-00-00';
    }
    if ($chequeNo2 == '') {
        $chequeNo2 = 'NULL';
    }
	//Closing Date
    $newPaymentDate = implode("-", array_reverse(explode("/", $paymentDate)));
    $checkClosingDate = explode('-', closingDate($newPaymentDate, 'Update Data - Update Payment'));
    $boolClosing = $checkClosingDate[0];
    $closingDate = $checkClosingDate[1];
    if ($paymentId != '') {
        $sqla = "INSERT INTO payment_update (SELECT *, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']} FROM payment WHERE payment_id = {$paymentId})";
                $result = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);


            $sql = "UPDATE payment SET "
                . "payment_date = STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), "
                . "invoice_no = '{$invoiceNo}', "
                . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                . "tax_invoice = '{$taxInvoiceNo}', "
                . "remarks = '{$remarks}', "
                . "remarks2 = '{$remarks2}', "
                . "cheque_no = '{$chequeNo}', "
                . "stockpile_location = '{$stockpileId}', "
                . "tax_invoice_date = STR_TO_DATE('{$taxInvoiceDate}', '%d/%m/%Y') "
                . "WHERE payment_id = {$paymentId}";

            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            /*$sql = "UPDATE gl_report SET "
                           // . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                            . "gl_date = STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), "
                            . "tax_invoice = '{$taxInvoiceNo}', "
                            . "invoice_no = '{$invoiceNo}', "
                            . "invoice_no_2 = '{$invoiceNo}', "
                            . "remarks = '{$remarks}' "
                            //. "gl_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y') "
                            //. "tax_date = STR_TO_DATE('{$taxInvoiceDate}', '%d/%m/%Y') "
                            . "WHERE payment_id = '{$paymentId}'";

                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/

            if ($result !== false) {


                $return_value = '|OK|Successfully Updated.|' . $paymentId . '|' . $sqla . '|';
				
				//ADD BY YENI
				$sqlGetPaymentId = "SELECT pp.idPP, pur.purchasing_id, p.invoice_id FROM payment p
									LEFT JOIN pengajuan_payment pp ON pp.payment_id = p.payment_id
									LEFT JOIN purchasing pur ON pur.payment_id = p.payment_id 
									LEFT JOIN invoice inv ON inv.invoice_id = p.invoice_id
									WHERE p.payment_id = {$paymentId}";
				$resultGetData = $myDatabase->query($sqlGetPaymentId, MYSQLI_STORE_RESULT);
				if($resultGetData !== false){
					while($row = $resultGetData->fetch_object()) {
						if($row->idPP != '' || $row->idPP != 0){
							$sqlUpdate = "UPDATE pengajuan_payment SET urgent_payment_date = STR_TO_DATE('{$paymentDate}', '%d/%m/%Y') WHERE idpp = {$row->idPP}";
						}else if($row->purchasing_id != '' || $row->purchasing_id != 0){
							$sqlUpdate = "UPDATE purchasing SET plan_payment_date = STR_TO_DATE('{$paymentDate}', '%d/%m/%Y') WHERE purchasing_id = {$row->purchasing_id}";
						}else if($row->invoice_id != '' || $row->invoice_id != 0){
							$sqlUpdate = "UPDATE pengajuan_general SET request_payment_date = STR_TO_DATE('{$paymentDate}', '%d/%m/%Y') WHERE invoice_id = {$row->invoice_id}";
						}
						$resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
					}
				}
				
				$sqlLogPayment = "INSERT INTO log_payment(payment_id, entry_by, entry_date, payment_date, log) VALUES "
								."({$paymentId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), 'Update')";
				$resultLogPayment = $myDatabase->query($sqlLogPayment, MYSQLI_STORE_RESULT);

                insertGeneralLedger($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", "NULL", $paymentId);
                insertReportGL($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", "NULL", $paymentId);
            } else {
                $return_value = '|FAIL|Update Failed.||';
            }
       /* } else {
            echo $closingDate;
            die();
        }*/
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_freight') {
    // <editor-fold defaultstate="collapsed" desc="delete_freight">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    // </editor-fold>

    if ($freightId != '') {
        $sql = "SELECT * FROM `freight_cost` WHERE freight_id = {$freightId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `freight` WHERE freight_id = {$freightId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Freight has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete freight failed.|';
            }
        } else {
            $return_value = '|FAIL|Freight in use in stockpile freight cost.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'freight_data') {
    // <editor-fold defaultstate="collapsed" desc="freight_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    $freightCode = $myDatabase->real_escape_string($_POST['freightCode']);
    $freightSupplier = $myDatabase->real_escape_string($_POST['freightSupplier']);
    $freightAddress = $myDatabase->real_escape_string($_POST['freightAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
    $branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $active = $myDatabase->real_escape_string($_POST['active']);
    $freightRule = $myDatabase->real_escape_string($_POST['freightRule']);
    $nik = $myDatabase->real_escape_string($_POST['nik']);
    $freightEmail = $myDatabase->real_escape_string($_POST['email']);
    // </editor-fold>

    if ($freightId == '') {
        $boolNew = true;
    }

    if ($freightCode != '' && $freightSupplier != '' && $freightAddress != '' && $npwp != '' && $npwp_name != '' && $ppn != '' && $pph != '' && $active != '' && $freightRule != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `freight` WHERE UPPER(freight_supplier) = UPPER('{$freightSupplier}') AND UPPER(freight_code) = UPPER('{$freightCode}')";
        } else {
            $sql = "SELECT * FROM `freight` WHERE UPPER(freight_supplier) = UPPER('{$freightSupplier}') AND UPPER(freight_code) = UPPER('{$freightCode}') AND freight_id <> {$freightId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;

            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }

            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }

            if ($boolNew) {
				$freightCode = 'FR-' . $freightCode;
                $sql = "INSERT INTO `freight` (freight_code, freight_supplier, freight_address, nik, npwp, npwp_name, bank_name, branch, account_no, beneficiary, "
                    . "swift_code, ppn_tax_id, pph_tax_id, ppn, pph, active, freight_rule, entry_by, entry_date, freight_email) VALUES ("
                    . "UPPER('{$freightCode}'), '{$freightSupplier}', '{$freightAddress}', '{$nik}', '{$npwp}', '{$npwp_name}', '{$bankName}', '{$branch}', '{$accountNo}', "
                    . "'{$beneficiary}', '{$swiftCode}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$active}, {$freightRule}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$freightEmail}')";
            } else {

                $sqlA = "SELECT entry_by, entry_date, ppn FROM freight WHERE freight_id = {$freightId}";
                $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                if ($resultA !== false) {
                    $rowA = $resultA->fetch_object();
                    $entryby = $rowA->entry_by;
                    $entrydate = $rowA->entry_date;
                    $oldPPn = str_replace(",", "", $myDatabase->real_escape_string($rowA->ppn));

                    $sqlLog = "INSERT INTO log_mst_allvendor (action, action_by, action_date, vendor_id, entry_by, entry_date, ppn, old_ppn) 
                                 VALUES ('UPDATE', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), $freightId, $entryby, STR_TO_DATE('$entrydate', '%Y-%m-%d %H:%i:%s'), {$ppnValue}, {$oldPPn})";
                    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
    
                }

                $sql = "UPDATE `freight` SET "
                    . "freight_code = UPPER('{$freightCode}'), "
                    . "freight_supplier = '{$freightSupplier}', "
                    . "freight_address = '{$freightAddress}', "
                    . "nik = '{$nik}', "
                    . "npwp = '{$npwp}', "
                    . "npwp_name = '{$npwp_name}', "
                    . "bank_name = '{$bankName}', "
                    . "branch = '{$branch}', "
                    . "account_no = '{$accountNo}', "
                    . "beneficiary = '{$beneficiary}', "
                    . "swift_code = '{$swiftCode}', "
                    . "ppn_tax_id = {$ppn}, "
                    . "pph_tax_id = {$pph}, "
                    . "ppn = {$ppnValue}, "
                    . "pph = {$pphValue}, "
                    . "active = {$active}, "
                    . "freight_rule = {$freightRule}, "
                    . "freight_email = '{$freightEmail}' "
                    . "WHERE freight_id = {$freightId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $freightId = $myDatabase->insert_id;

                    $sqlLog = "INSERT INTO log_mst_allvendor (action, freight_id, entry_by, entry_date, ppn, old_ppn) 
                    VALUES ('INSERT',  $freightId, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$ppnValue}, 0)";

                }

                $return_value = '|OK|Freight has successfully inserted/updated.|' . $freightId . '|';
            } else {
                $return_value = '|FAIL|Insert/update freight failed.||';
            }
        } else {
            $return_value = '|FAIL|Freight supplier and vendor already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_vendor') {
    // <editor-fold defaultstate="collapsed" desc="delete_vendor">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    // </editor-fold>

    if ($vendorId != '') {
        $contractCount = 0;
        $freightCount = 0;

        $sql = "SELECT * FROM `contract` WHERE vendor_id = {$vendorId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $contractCount = $result->num_rows;

        $sql = "SELECT * FROM `freight` WHERE vendor_id = {$vendorId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $freightCount = $result->num_rows;

        if ($contractCount == 0 && $freightCount == 0) {
            $sql = "DELETE FROM `vendor` WHERE vendor_id = {$vendorId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Vendor has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete vendor failed.|';
            }
        } else {
            $return_value = '|FAIL|Vendor in use in freight and contract.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'vendor_data') {
    // <editor-fold defaultstate="collapsed" desc="vendor_data">

    $return_value = '';
    $boolNew = false;
    $action = '';
    $entryby = '';
    $entrydate = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    $vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $bankName = '-';
    $branch = '-';
    $accountNo = '-';
    $beneficiary = '-';
    $swiftCode = '-';
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $active = $myDatabase->real_escape_string($_POST['active']);
    $nik = $myDatabase->real_escape_string($_POST['nik']);
    $vendorGroupId = $myDatabase->real_escape_string($_POST['vendorGroupId']);
    $ggl = $myDatabase->real_escape_string($_POST['ggl']);
    $rsb = $myDatabase->real_escape_string($_POST['rsb']);
    $vendorEmail = $myDatabase->real_escape_string($_POST['email']);



    // </editor-fold>
    if ($vendorCode != '' && $vendorName != '' && $vendorAddress != '' && $npwp != '' && $npwp_name != '' && $ppn != '' && $pph != '') {
        if ($vendorId == 0) {
            $sqlCekCodeFreight = "select vendor_code from vendor where vendor_code = '{$vendorCode}'";
                $resultCekCode = $myDatabase->query($sqlCekCodeFreight, MYSQLI_STORE_RESULT);
                if ($resultCekCode !== false && $resultCekCode->num_rows == 1) {
                    $rowCekCode = $resultCekCode->fetch_object();
                    $freightCode = $rowCekCode->vendor_code;
                }
                $ppnValue = 0;
                $pphValue = 0;

                $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
                $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
                if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                    $rowPPN = $resultPPN->fetch_object();
                    $ppnValue = $rowPPN->tax_value;
                }

                $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
                $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                    $rowPPh = $resultPPh->fetch_object();
                    $pphValue = $rowPPh->tax_value;
                }
                
                if(!isset($freightCode)){
                    $sql = "INSERT INTO `vendor` (vendor_code,vendor_group_id, vendor_name, vendor_address, nik, npwp, npwp_name, bank_name, branch, account_no, beneficiary, "
                        . "swift_code, ppn_tax_id, pph_tax_id, ppn, pph, active, entry_by, entry_date, ggl, rsb, vendor_email) VALUES ("
                        . "UPPER('{$vendorCode}'),'{$vendorGroupId}' ,'{$vendorName}', '{$vendorAddress}', '{$nik}', '{$npwp}', '{$npwp_name}', '{$bankName}', '{$branch}', '{$accountNo}', "
                        . "'{$beneficiary}', '{$swiftCode}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$active}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$ggl}, {$rsb}, '{$vendorEmail}')";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($result !== false) {
                            $vendorId = $myDatabase->insert_id;
                            $return_value = '|OK|Vendor has successfully inserted/updated.|' . $vendorId . '|';

                            $sqlLog = "INSERT INTO log_mst_allvendor (action, vendor_id, entry_by, entry_date, ppn, old_ppn) 
                            VALUES ('INSERT',  $vendorId, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$ppnValue}, 0)";
                        $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);

                        } else {
                            $return_value = '|FAIL|Insert/update vendor failed.|' . $sql . '|';
                        }
                        
                } else {
                    $return_value = '|FAIL|Vendor code have been used or already exist.|' . $sql . '|';
                }                
        } else {
            $sqlCekCodeFreight = "select freight_code from freight where freight_code = '{$vendorCode}'";
            $resultCekCode = $myDatabase->query($sqlCekCodeFreight, MYSQLI_STORE_RESULT);
            if ($resultCekCode !== false && $resultCekCode->num_rows == 1) {
                $rowCekCode = $resultCekCode->fetch_object();
                $freightCode = $rowCekCode->freight_code;
            }
            $ppnValue = 0;
                $pphValue = 0;

                $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
                $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
                if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                    $rowPPN = $resultPPN->fetch_object();
                    $ppnValue = $rowPPN->tax_value;
                }

                $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
                $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                    $rowPPh = $resultPPh->fetch_object();
                    $pphValue = $rowPPh->tax_value;
                }

                if(!isset($freightCode)){

                    $sqlA = "SELECT entry_by, entry_date, ppn FROM vendor WHERE vendor_id = {$vendorId}";
                    $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                    if ($resultA !== false) {
                        $rowA = $resultA->fetch_object();
                        $entryby = $rowA->entry_by;
                        $entrydate = $rowA->entry_date;
                        $oldPPn = str_replace(",", "", $myDatabase->real_escape_string($rowA->ppn));

                        $sqlLog = "INSERT INTO log_mst_allvendor (action, action_by, action_date, vendor_id, entry_by, entry_date, ppn, old_ppn) 
                                     VALUES ('UPDATE', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), $vendorId, $entryby, STR_TO_DATE('$entrydate', '%Y-%m-%d %H:%i:%s'), {$ppnValue}, {$oldPPn})";
                        $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
                        echo $sqlLog;

        
                    }

                $sql = "UPDATE `vendor` SET "
                        . "vendor_code = UPPER('{$vendorCode}'), "
                        . "vendor_name = '{$vendorName}', "
                        . "vendor_group_id = '{$vendorGroupId}', "
                        . "vendor_address = '{$vendorAddress}', "
                        . "nik = '{$nik}', "
                        . "npwp = '{$npwp}', "
                        . "npwp_name = '{$npwp_name}', "
                        . "bank_name = '{$bankName}', "
                        . "branch = '{$branch}', "
                        . "account_no = '{$accountNo}', "
                        . "beneficiary = '{$beneficiary}', "
                        . "swift_code = '{$swiftCode}', "
                        . "ppn_tax_id = {$ppn}, "
                        . "pph_tax_id = {$pph}, "
                        . "ppn = {$ppnValue}, "
                        . "pph = {$pphValue}, "
                        . "active = {$active}, "
                        . "ggl = {$ggl}, "
                        . "rsb = {$rsb}, "
						. "sync_by = {$_SESSION['userId']}, "
                        . "vendor_email = '{$vendorEmail}', "
                        . "sync_date= STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE vendor_id = {$vendorId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($result !== false) {
                            $return_value = '|OK|Vendor has successfully inserted/updated.|' . $vendorId . '|';

                        } else {
                            $return_value = '|FAIL|Insert/update vendor failed.|' . $sql . '|';
                        }
                    } else {
                        $return_value = '|FAIL|Vendor code have been used or already exist.|' . $sql . '|';
                    } 
                }
    } else {
    $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'vendor_curah_data') {
    // <editor-fold defaultstate="collapsed" desc="vendor_curah_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorCurahId = $myDatabase->real_escape_string($_POST['vendorCurahId']);
    $vendorCurahCode = $myDatabase->real_escape_string($_POST['vendorCurahCode']);
    $vendorCurahName = $myDatabase->real_escape_string($_POST['vendorCurahName']);
    $vendorCurahAddress = $myDatabase->real_escape_string($_POST['vendorCurahAddress']);
    //$vendorCurahEmail = $myDatabase->real_escape_string($_POST['email']);

    // </editor-fold>

    if ($vendorCurahId == '') {
        $boolNew = true;
    }

    if ($vendorCurahName != '') {
        if ($boolNew) {
            $sql = "INSERT INTO `vendor_curah` (vendor_curah_code,vendor_curah_name, vendor_curah_address, entry_by, entry_date) VALUES ("
                . "'{$vendorCurahCode}','{$vendorCurahName}', '{$vendorCurahAddress}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        } else {
            $sql = "UPDATE `vendor_curah` SET "
                . "vendor_curah_code = '{$vendorCurahCode}', "
                . "vendor_curah_name = '{$vendorCurahName}', "
                . "vendor_curah_address = '{$vendorCurahAddress}'"
                . "WHERE vendor_curah_id = {$vendorCurahId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            if ($boolNew) {
                $vendorId = $myDatabase->insert_id;
            }
            $return_value = '|OK|Vendor Curah has successfully inserted/updated.|' . $vendorCurahId . '|';
        } else {
            $return_value = '|FAIL|Insert/update Vendor Curah failed or Vendor Curah Name has been used||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    echo $sql;
    echo $return_value;
    // </editor-fold>
}   elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'no_email_account_data') { //Update Adit
    // <editor-fold defaultstate="collapsed" desc="no_email_account_data">
    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    // </editor-fold>

    if($accountNo != '' && $beneficiary != '') {
        if($accountId == '') {
            $sqlCheck = "SELECT * FROM no_email_account WHERE account_no LIKE '{$accountNo}' AND beneficiary LIKE '{$beneficiary}'";
            $resultCheck = $myDatabase->query($sqlCheck, MYSQLI_STORE_RESULT);
            if($resultCheck->num_rows != 1) {
                $sql = "INSERT INTO no_email_account (account_no, beneficiary, entry_by, entry_date) VALUES ('{$accountNo}', '{$beneficiary}', '{$_SESSION['userId']}', STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if ($result !== false) {
                    $accountId = $myDatabase->insert_id;
                    $return_value = '|OK|Account has successfully inserted.|' . $accountId . '|';
                } else {
                    $return_value = '|FAIL|Account Failed to Insert data.|' . $accountId . '|';
                }
            } else {
                $return_value = '|FAIL|Account Already registered||';
            }
        } else {
            $sql = "UPDATE no_email_account SET "
            . "account_no = '{$accountNo}', "
            . "beneficiary = '{$beneficiary}' "
            . "WHERE account_id = '{$accountId}'";
            echo $sql;
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result !== false) {
                $return_value = '|OK|Account has successfully updated.|' . $accountId . '|';
            } else {
                $return_value = '|FAIL|Account Failed to update data.|' . $accountId . '|';
            }
        }
    } else {
        '|FAIL|Please fill the required field|';
    }

    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_vendor_curah') {
    // <editor-fold defaultstate="collapsed" desc="delete_vendor_curah">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorCurahId = $myDatabase->real_escape_string($_POST['vendorCurahId']);
    // </editor-fold>

    if ($vendorCurahId != '') {
        $sql = "DELETE FROM `vendor_curah` WHERE vendor_curah_id = {$vendorCurahId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Vendor Curah has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Vendor Curah failed to deleted.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'revisi_timbangan_data') {
    // <editor-fold defaultstate="collapsed" desc="revisi_timbangan_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $revisiTimbanganId = $myDatabase->real_escape_string($_POST['revisiTimbanganId']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $slip = $myDatabase->real_escape_string($_POST['slip']);
    $vehicleNo = $myDatabase->real_escape_string($_POST['vehicleNo']);
    $driver = $myDatabase->real_escape_string($_POST['driver']);
    $sendWeight = $myDatabase->real_escape_string($_POST['sendWeight']);
    $brutoWeight = $myDatabase->real_escape_string($_POST['brutoWeight']);
    $tarraWeight = $myDatabase->real_escape_string($_POST['tarraWeight']);
    $nettoWeight = $myDatabase->real_escape_string($_POST['nettoWeight']);
    $note = $myDatabase->real_escape_string($_POST['note']);
    $pecahSlip = $myDatabase->real_escape_string($_POST['pecahSlip']);

    // </editor-fold>

    $sqlIdTimbangan = "Select transaction_id, transaction_date from transaction_timbangan where slip = {$slip}";
    $result1 = $myDatabase->query($sqlIdTimbangan, MYSQLI_STORE_RESULT);
    $row1 = $result1->fetch_object();
    $idTimbangan = $row1->transaction_id;
    $transactionDate = $row1->transaction_date;


    $sqlTransaction = "Select transaction_id, slip_no, t_timbangan from `transaction` where t_timbangan = {$idTimbangan}";
    $result2 = $myDatabase->query($sqlTransaction, MYSQLI_STORE_RESULT);
    $row2 = $result2->fetch_object();
    $tTimbangan = $row2->t_timbangan;
    $slipNo = $row2->slip_no;

    $sqlSlipReturn = "Select slip_retur from `transaction` where slip_retur like '%{$slipNo}%'";
    $resultSlip = $myDatabase->query($sqlSlipReturn, MYSQLI_STORE_RESULT);
    $rowSlip = $resultSlip->fetch_object();
    $slipRetur = $rowSlip->slip_retur;

    //Check Closing Date
    $transactionDate = $transactionDate;
    $checkClosingDate = explode('-', closingDate($transactionDate, 'Nota Timbang - Revisi'));

    $boolClosing = $checkClosingDate[0];
    $closingDate = $checkClosingDate[1];

    if ($boolClosing) {
        if (!isset($tTimbangan)) {
            if ($vendorId != '' && $stockpileContractId != '') {
                $sql = "UPDATE `transaction_timbangan` SET "
                    . "send_weight = {$sendWeight},"
                    . "bruto_weight = {$brutoWeight},"
                    . "tarra_weight = {$tarraWeight},"
                    . "netto_weight = {$nettoWeight},"
                    . "vehicle_no = '{$vehicleNo}',"
                    . "driver = '{$driver}',"
                    . "vendor_id = '{$vendorId}',"
                    . "stockpile_contract_id = '{$stockpileContractId}',"
                    . "pecah_slip = {$pecahSlip},"
                    . "notes = '{$note}' "
                    . "WHERE transaction_id = {$idTimbangan};";
                $sql .= "update transaction_timbangan_rev set status = 1 where transaction_rev_id= {$revisiTimbanganId}";
                $result = $myDatabase->multi_query($sql);
            } else {
				$vendorId = 0;
				$stockpileContractId = 0;
                $sql = "UPDATE `transaction_timbangan` SET "
                    . "send_weight = {$sendWeight},"
                    . "bruto_weight = {$brutoWeight},"
                    . "tarra_weight = {$tarraWeight},"
                    . "netto_weight = {$nettoWeight},"
                    . "vehicle_no = '{$vehicleNo}',"
                    . "driver = '{$driver}',"
					. "vendor_id = '{$vendorId}',"
                    . "stockpile_contract_id = '{$stockpileContractId}',"
                    . "pecah_slip = {$pecahSlip},"
                    . "notes = '{$note}' "
                    . "WHERE transaction_id = {$idTimbangan};";
                $sql .= "update transaction_timbangan_rev set status = 1 where transaction_rev_id= {$revisiTimbanganId}";
                $result = $myDatabase->multi_query($sql);
            }

            if ($result !== false) {
                $return_value = '|OK|Revisi Timbangan has successfully Approved.|' . $revisiTimbanganId . '|' . $sql;
            } else {
                $return_value = '|FAIL|Revisi Timbangan failed to be approved.|' . $sql;
            }
        } elseif (isset($slipRetur)) {
            if ($vendorId != '' && $stockpileContractId != '') {
                $sql = "UPDATE `transaction_timbangan` SET "
                    . "send_weight = {$sendWeight},"
                    . "bruto_weight = {$brutoWeight},"
                    . "tarra_weight = {$tarraWeight},"
                    . "netto_weight = {$nettoWeight},"
                    . "driver = '{$driver}',"
                    . "vendor_id = {$vendorId},"
                    . "stockpile_contract_id = {$stockpileContractId},"
                    . "pecah_slip = {$pecahSlip},"
                    . "notes = '{$note}' "
                    . "WHERE transaction_id = {$idTimbangan};";
                $sql .= "update transaction_timbangan_rev set status = 1 where transaction_rev_id= {$revisiTimbanganId}";
                $result = $myDatabase->multi_query($sql);
            } else {
                $sql = "UPDATE `transaction_timbangan` SET "
                    . "send_weight = {$sendWeight},"
                    . "bruto_weight = {$brutoWeight},"
                    . "tarra_weight = {$tarraWeight},"
                    . "netto_weight = {$nettoWeight},"
                    . "driver = '{$driver}',"
                    . "pecah_slip = {$pecahSlip},"
                    . "notes = '{$note}' "
                    . "WHERE transaction_id = {$idTimbangan};";
                $sql .= "update transaction_timbangan_rev set status = 1 where transaction_rev_id= {$revisiTimbanganId}";
                $result = $myDatabase->multi_query($sql);
            }

            if ($result !== false) {
                $return_value = '|OK|Revisi Timbangan has successfully Approved.|' . $revisiTimbanganId . '|' . $sql;
            } else {
                $return_value = '|FAIL|Revisi Timbangan failed to be approved.|' . $sql;
            }
        } else {
            $return_value = '|FAIL|Slip has been used in NOTIM.|';
        }
    } else {
        echo $closingDate;
        die();
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'general_vendor_pph') {
    // <editor-fold defaultstate="collapsed" desc="general_vendor_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $gv_pph_id = $myDatabase->real_escape_string($_POST['gv_pph_id']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $taxId = $myDatabase->real_escape_string($_POST['taxId']);
    $status = $myDatabase->real_escape_string($_POST['status']);

    // </editor-fold>
    if ($gv_pph_id == '') {
        $boolNew = true;
    }


    if ($vendorId != '' && $taxId != '') {


        if ($boolNew) {
            $sql = "INSERT INTO `general_vendor_pph` (general_vendor_id, pph_tax_id, `status`, entry_by,entry_date) VALUES ({$vendorId},{$taxId},{$status},{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        } else {
            $sql = "UPDATE `general_vendor_pph` SET "
                . "status = {$status} "
                . "WHERE gv_pph_id = {$gv_pph_id}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            if ($boolNew) {
                $vendorId = $myDatabase->insert_id;
            }

            $return_value = '|OK|PPh General Vendor has successfully inserted.|' . $vendorId . '|';
        } else {
            $return_value = '|FAIL|Insert/update vendor failed.||';
            echo $sql;
        }

    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_general_vendor') {
    // <editor-fold defaultstate="collapsed" desc="delete_general_vendor">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    // </editor-fold>

    if ($vendorId != '') {
        $paymentCount = 0;

        $sql = "SELECT * FROM `payment` WHERE general_vendor_id = {$vendorId} AND payment_status = 0";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $contractCount = $result->num_rows;

        if ($paymentCount == 0) {
            $sql = "DELETE FROM `general_vendor` WHERE general_vendor_id = {$vendorId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|General Vendor has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete vendor failed.|';
            }
        } else {
            $return_value = '|FAIL|General Vendor in use in payment.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
}  elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'general_vendor_data') {
    // <editor-fold defaultstate="collapsed" desc="general_vendor_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    $vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
    $branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    //$pph = $myDatabase->real_escape_string($_POST['pph']);
    $active = $myDatabase->real_escape_string($_POST['active']);
    $nik = $myDatabase->real_escape_string($_POST['nik']);
    $vendorEmail = $myDatabase->real_escape_string($_POST['email']);

    // </editor-fold>

    if ($vendorId == '') {
        $boolNew = true;
    }

    if ($vendorName != '' && $vendorAddress != '' && $npwp != '' && $npwp_name != '' && $ppn != '' /*&& $pph != ''*/) {
        if ($boolNew) {
            $sql = "SELECT * FROM `general_vendor` WHERE UPPER(general_vendor_name) = UPPER('{$vendorName}')";
        } else {
            $sql = "SELECT * FROM `general_vendor` WHERE UPPER(general_vendor_name) = UPPER('{$vendorName}') AND general_vendor_id <> {$vendorId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;
            $pph = 0;

            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }

            /*$sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }*/

            if ($boolNew) {
                $sql = "select max(general_vendor_code) as maxCode from general_vendor";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                $row = $result->fetch_array();
                $generalVendorCode = $row['maxCode'];
                $noUrut = (int)substr($generalVendorCode, 3, 5);
                $noUrut++;
                $char = "GV-";
                $generalVendorCode = $char . sprintf("%05s", $noUrut);
                $sql = "INSERT INTO `general_vendor` ( general_vendor_code,general_vendor_name, general_vendor_address, nik, npwp, npwp_name, bank_name, branch, account_no, beneficiary, "
                    . "swift_code, ppn_tax_id, pph_tax_id, ppn, pph, active, entry_by, entry_date, general_vendor_email) VALUES ("
                    . "'{$generalVendorCode}','{$vendorName}', '{$vendorAddress}', '{$nik}', '{$npwp}', '{$npwp_name}', '{$bankName}', '{$branch}', '{$accountNo}', "
                    . "'{$beneficiary}', '{$swiftCode}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$active}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$vendorEmail}')";
            } else {
				  $sqlA = "SELECT entry_by, entry_date, ppn FROM general_vendor WHERE general_vendor_id = {$vendorId}";
                $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                if ($resultA !== false) {
                    $rowA = $resultA->fetch_object();
                    $entryby = $rowA->entry_by;
                    $entrydate = $rowA->entry_date;
                    $oldPPn = str_replace(",", "", $myDatabase->real_escape_string($rowA->ppn));

                    $sqlLog = "INSERT INTO log_mst_allvendor (action, action_by, action_date, general_vendor_id, entry_by, entry_date, ppn, old_ppn) 
                                 VALUES ('UPDATE', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), $vendorId, $entryby, STR_TO_DATE('$entrydate', '%Y-%m-%d %H:%i:%s'), {$ppnValue}, {$oldPPn})";
                    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);

    
                }
                $sql = "UPDATE `general_vendor` SET "
                    . "general_vendor_name = '{$vendorName}', "
                    . "general_vendor_address = '{$vendorAddress}', "
                    . "nik = '{$nik}', "
                    . "npwp = '{$npwp}', "
                    . "npwp_name = '{$npwp_name}', "
                    . "bank_name = '{$bankName}', "
                    . "branch = '{$branch}', "
                    . "account_no = '{$accountNo}', "
                    . "beneficiary = '{$beneficiary}', "
                    . "swift_code = '{$swiftCode}', "
                    . "ppn_tax_id = {$ppn}, "
                    . "pph_tax_id = {$pph}, "
                    . "ppn = {$ppnValue}, "
                    . "pph = {$pphValue}, "
                    . "active = {$active},"
                    . "general_vendor_email = '{$vendorEmail}' "
                    . "WHERE general_vendor_id = {$vendorId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $vendorId = $myDatabase->insert_id;
					  $sqlLog = "INSERT INTO log_mst_allvendor (action, general_vendor_id, entry_by, entry_date, ppn, old_ppn) 
                    VALUES ('INSERT',  $vendorId, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$ppnValue}, 0)";
                }

                $return_value = '|OK|General Vendor has successfully inserted/updated.|' . $vendorId . '|';
            } else {
                $return_value = '|FAIL|Insert/update vendor failed.||';
            }
        } else {
            $return_value = '|FAIL|General Vendor already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_account') {
    // <editor-fold defaultstate="collapsed" desc="delete_account">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    // </editor-fold>

    if ($accountId != '') {
        $sql = "SELECT * FROM `payment` WHERE account_id = {$accountId} AND payment_status = 0";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `account` WHERE account_id = {$accountId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Account has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete account failed.|';
            }
        } else {
            $return_value = '|FAIL|Account in use in payments.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'account_data') {
    // <editor-fold defaultstate="collapsed" desc="account_data">

    $return_value = '';
    $boolNew = false;
    $whereCondition = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $accountType = $myDatabase->real_escape_string($_POST['accountType']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $accountName = $myDatabase->real_escape_string($_POST['accountName']);
    $description = $myDatabase->real_escape_string($_POST['description']);
    $status = $myDatabase->real_escape_string($_POST['status']);
    // </editor-fold>

    if ($accountId == '') {
        $boolNew = true;
    }

    if ($accountType == 1) {
        $whereCondition = " account_type in (0,1) ";
    } else {
        $whereCondition = " account_type = {$accountType} ";
    }

    if ($accountType != '' && $accountNo != '' && $accountName != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `account` WHERE {$whereCondition} AND account_no = '{$accountNo}'";
        } else {
            $sql = "SELECT * FROM `account` WHERE {$whereCondition} AND account_no = '{$accountNo}' AND account_id <> {$accountId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                if ($accountType == 1) {
                    $sql = "INSERT INTO `account` (account_type, account_no, account_name, description,status, entry_by, entry_date) VALUES ("
                        . "{$accountType}, '{$accountNo}', '{$accountName}', '{$description}', '{$status}',{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";

                } else {
                    $sql = "INSERT INTO `account` (account_type, account_no, account_name, description, status,entry_by, entry_date) VALUES ("
                        . "{$accountType}, '{$accountNo}', '{$accountName}', '{$description}', '{$status}',{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                }
            } else {
                $sql = "UPDATE `account` SET "
                    . "account_type = '{$accountType}', "
                    . "account_no = '{$accountNo}', "
                    . "account_name = '{$accountName}', "
                    . "description = '{$description}', "
                    . "status = '{$status}' "
                    . "WHERE account_id = {$accountId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $accountId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Account has successfully inserted/updated.|' . $accountId . '|';
            } else {
                $return_value = '|FAIL|Insert/update account failed.||';
            }
        } else {
            $return_value = '|FAIL|Account already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_bank') {
    // <editor-fold defaultstate="collapsed" desc="delete_bank">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $bankId = $myDatabase->real_escape_string($_POST['bankId']);
    // </editor-fold>

    if ($bankId != '') {
        $sql = "SELECT * FROM `payment` WHERE bank_id = {$bankId} AND payment_status = 0";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `bank` WHERE bank_id = {$bankId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Bank has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete bank failed.|';
            }
        } else {
            $return_value = '|FAIL|Bank in use in payments.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_tax') {
    // <editor-fold defaultstate="collapsed" desc="delete_vendor">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $taxId = $myDatabase->real_escape_string($_POST['taxId']);
    // </editor-fold>

    if ($taxId != '') {
        $vendor = 0;
        $labor = 0;
        $generalVendor = 0;
        $freight = 0;
        $customer = 0;

        $sql = "SELECT * FROM `vendor` WHERE ppn_tax_id = {$taxId} OR pph_tax_id = {$taxId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $vendor = $result->num_rows;

        $sql = "SELECT * FROM `labor` WHERE ppn_tax_id = {$taxId} OR pph_tax_id = {$taxId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $labor = $result->num_rows;

        $sql = "SELECT * FROM `general_vendor` WHERE ppn_tax_id = {$taxId} OR pph_tax_id = {$taxId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $generalVendor = $result->num_rows;

        $sql = "SELECT * FROM `freight` WHERE ppn_tax_id = {$taxId} OR pph_tax_id = {$taxId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $freight = $result->num_rows;

        $sql = "SELECT * FROM `customer` WHERE ppn_tax_id = {$taxId} OR pph_tax_id = {$taxId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $customer = $result->num_rows;

        if ($vendor == 0 && $labor == 0 && $generalVendor == 0 && $freight == 0 && $customer == 0) {
            $sql = "DELETE FROM `tax` WHERE tax_id = {$taxId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Tax has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete Tax failed.|';
            }
        } else {
            $return_value = '|FAIL|Tax in use in VENDOR, LABOR, GENERAL VENDOR, FREIGHT, CUSTOMER.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'tax_data') {
    // <editor-fold defaultstate="collapsed" desc="bank_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $taxId = $myDatabase->real_escape_string($_POST['taxId']);
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $taxType = $myDatabase->real_escape_string($_POST['taxType']);
    $taxCategory = $myDatabase->real_escape_string($_POST['taxCategory']);
    $taxName = $myDatabase->real_escape_string($_POST['taxName']);
    //$openingBalance = str_replace(",", "", $myDatabase->real_escape_string($_POST['openingBalance']));
    $taxValue = $myDatabase->real_escape_string($_POST['taxValue']);
    $active = $myDatabase->real_escape_string($_POST['active']);
    //$bankCode = $myDatabase->real_escape_string($_POST['bankCode']);
    // </editor-fold>

    if ($taxId == '') {
        $boolNew = true;
    }

    if ($accountId != '' && $taxType != '' && $taxCategory != '' && $taxName != '' && $taxValue != '' && $active != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `tax` WHERE tax_name = '{$taxName}' AND tax_value = '{$taxValue}'";
        } else {
            $sql = "SELECT * FROM `tax` WHERE tax_name = '{$taxName}' AND tax_value = {$taxValue} AND tax_id <> {$taxId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `tax` (account_id, tax_type, tax_category, tax_name, tax_value, active, entry_by, entry_date) VALUES ("
                    . "{$accountId}, {$taxType}, {$taxCategory}, '{$taxName}', '{$taxValue}', {$active}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `tax` SET "
                    . "account_id = {$accountId}, "
                    . "tax_type = {$taxType}, "
                    . "tax_category = {$taxCategory}, "
                    . "tax_name = '{$taxName}', "
                    . "tax_value = '{$taxValue}', "
                    . "active = {$active} "
                    . "WHERE tax_id = {$taxId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $taxId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Tax has successfully inserted/updated.|' . $taxId . '|';
            } else {
                $return_value = '|FAIL|Insert/update tax failed.||';
            }
        } else {
            $return_value = '|FAIL|Tax already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'bank_data') {
    // <editor-fold defaultstate="collapsed" desc="bank_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $bankId = $myDatabase->real_escape_string($_POST['bankId']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
    $bankAccountNo = $myDatabase->real_escape_string($_POST['bankAccountNo']);
    $bankAccountName = $myDatabase->real_escape_string($_POST['bankAccountName']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $openingBalance = str_replace(",", "", $myDatabase->real_escape_string($_POST['openingBalance']));
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $bankType = $myDatabase->real_escape_string($_POST['bankType']);
    $bankCode = $myDatabase->real_escape_string($_POST['bankCode']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $branch = $myDatabase->real_escape_string($_POST['branch']);
    $masterBank = $myDatabase->real_escape_string($_POST['masterBank']);
    // </editor-fold>

    if ($bankId == '') {
        $boolNew = true;
    }

    if ($bankName != '' && $bankAccountNo != '' && $bankAccountName != '' && $currencyId != '' && $accountId != '' && $openingBalance != '' &&
        $bankType != '' && $bankCode != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `bank` WHERE UPPER(bank_name) = UPPER('{$bankName}') AND bank_account_no = '{$bankAccountNo}'";
        } else {
            $sql = "SELECT * FROM `bank` WHERE UPPER(bank_name) = UPPER('{$bankName}') AND bank_account_no = '{$bankAccountNo}' AND bank_id <> {$bankId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `bank` (bank_name, bank_type, stockpile_id, bank_code, bank_account_no, bank_account_name, currency_id, opening_balance, account_id, entry_by, entry_date, branch, master_bank) VALUES ("
                    . "'{$bankName}', {$bankType}, {$stockpileId}, '{$bankCode}', '{$bankAccountNo}', '{$bankAccountName}', {$currencyId}, {$openingBalance}, {$accountId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$branch}', {$masterBank})";
            } else {
                $sql = "UPDATE `bank` SET "
                    . "bank_name = '{$bankName}', "
                    . "bank_type = {$bankType}, "
                    . "stockpile_id = {$stockpileId}, "
                    . "bank_code = '{$bankCode}', "
                    . "bank_account_no = '{$bankAccountNo}', "
                    . "bank_account_name = '{$bankAccountName}', "
                    . "currency_id = {$currencyId}, "
                    . "opening_balance = {$openingBalance}, "
                    . "branch = '{$branch}', "
                    . "master_bank = {$masterBank}, "
                    . "account_id = {$accountId} "
                    . "WHERE bank_id = {$bankId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $bankId = $myDatabase->insert_id;
                }

                $sqlPPN = "SELECT a.account_no, a.account_name, c.bank_name, b.branch, b.bank_account_no, b.bank_account_name, d.stockpile_name, b.master_bank FROM bank b 
					LEFT JOIN account a ON a.account_id = b.account_id 
					LEFT JOIN master_bank c ON c.master_bank_id = b.master_bank
					LEFT JOIN stockpile d ON d.stockpile_id = b.stockpile_id
					WHERE bank_id = {$bankId}";
                $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
                if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                    $rowPPN = $resultPPN->fetch_object();
                    $accountNo = $rowPPN->account_no;
                    $vendorName = $rowPPN->account_name;
                    $bank = $rowPPN->bank_name;
                    $branch = $rowPPN->branch;
                    $no_rek = $rowPPN->bank_account_no;
                    $beneficiary = $rowPPN->bank_account_name;
                    $stockpile = $rowPPN->stockpile_name;
                    $master_bank_id = $rowPPN->master_bank;


                    if ($boolNew) {

                        $sql = "INSERT INTO vendor_pettycash (account_no, vendor_name, bank, branch, no_rek, beneficiary, stockpile, master_bank_id) VALUES ("
                            . "'{$accountNo}', '{$vendorName}', '{$bank}', '{$branch}', '{$no_rek}', '{$beneficiary}', '{$stockpile}', '{$master_bank_id}')";

                    } else {

                        $sql = "UPDATE `vendor_pettycash` SET "
                            . "account_no = '{$bankName}', "
                            . "vendor_name = '{$vendorName}', "
                            . "bank = '{$bank}', "
                            . "branch = '{$branch}', "
                            . "no_rek = '{$no_rek}', "
                            . "beneficiary = '{$beneficiary}', "
                            . "master_bank_id = {$master_bank_id} "
                            . "WHERE account_no = '{$accountNo}'";

                    }
                }
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                $return_value = '|OK|Bank has successfully inserted/updated.|' . $bankId . '|';
            } else {
                $return_value = '|FAIL|Insert/update bank failed.||';
            }
        } else {
            $return_value = '|FAIL|Bank already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_category') {
    // <editor-fold defaultstate="collapsed" desc="delete_category">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $categoryId = $myDatabase->real_escape_string($_POST['categoryId']);
    // </editor-fold>

    if ($categoryId != '') {
        $sql = "SELECT * FROM `condition` WHERE category_id = {$categoryId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `category` WHERE category_id = {$categoryId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Category has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete category failed.|';
            }
        } else {
            $return_value = '|FAIL|Category in use in condition.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'category_data') {
    // <editor-fold defaultstate="collapsed" desc="category_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $categoryId = $myDatabase->real_escape_string($_POST['categoryId']);
    $categoryName = $myDatabase->real_escape_string($_POST['categoryName']);
    // </editor-fold>

    if ($categoryId == '') {
        $boolNew = true;
    }

    if ($categoryName != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `category` WHERE UPPER(category_name) = UPPER('{$categoryName}')";
        } else {
            $sql = "SELECT * FROM `category` WHERE UPPER(category_name) = UPPER('{$categoryName}') AND category_id <> {$categoryId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `category` (category_name, entry_by, entry_date) VALUES ("
                    . "'{$categoryName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `category` SET "
                    . "category_name = '{$categoryName}' "
                    . "WHERE category_id = {$categoryId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $categoryId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Category has successfully inserted/updated.|' . $categoryId . '|';
            } else {
                $return_value = '|FAIL|Insert/update category failed.||';
            }
        } else {
            $return_value = '|FAIL|Category already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_vehicle') {
    // <editor-fold defaultstate="collapsed" desc="delete_vehicle">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vehicleId = $myDatabase->real_escape_string($_POST['vehicleId']);
    // </editor-fold>

    if ($vehicleId != '') {
        $sql = "SELECT * FROM `unloading_cost` WHERE vehicle_id = {$vehicleId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `vehicle` WHERE vehicle_id = {$vehicleId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Vehicle has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete vehicle failed.|';
            }
        } else {
            $return_value = '|FAIL|Vehicle in use in stockpile unloading cost.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} 
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'vehicle_data') {
    // <editor-fold defaultstate="collapsed" desc="vehicle_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vehicleId = $myDatabase->real_escape_string($_POST['vehicleId']);
    $vehicleName = $myDatabase->real_escape_string($_POST['vehicleName']);
    $vehicleSize = $myDatabase->real_escape_string($_POST['vehicleSize']);
    // </editor-fold>
    //echo " test " . $vehicleName;
    if ($vehicleId == '') {
        $boolNew = true;
    }
    
    if($vehicleName != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `vehicle` WHERE UPPER(vehicle_name) = UPPER('{$vehicleName}')";
        } else {
            $sql = "SELECT * FROM `vehicle` WHERE UPPER(vehicle_name) = UPPER('{$vehicleName}') AND vehicle_id <> {$vehicleId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `vehicle` (vehicle_name, entry_by, entry_date, vehicle_size) VALUES ("
                        . "'{$vehicleName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$vehicleSize}')";
            } else {
                $sql = "UPDATE `vehicle` SET "
                        . "vehicle_name = '{$vehicleName}', "
                        . "vehicle_size = '{$vehicleSize}' "
                        . "WHERE vehicle_id = {$vehicleId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
           
            if($result !== false) {
                if($boolNew) {
                    $vehicleId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Vehicle has successfully inserted/updated.|'. $vehicleId .'|';
            } else {
                $return_value = '|FAIL|Insert/update vehicle failed.||';
                echo " SQL <br> " . $sql;
            }
        } else {
            $return_value = '|FAIL|Vehicle already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

 elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_customer') {
    // <editor-fold defaultstate="collapsed" desc="delete_customer">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    // </editor-fold>

    if ($customerId != '') {
        $sql = "SELECT * FROM `sales` WHERE customer_id = {$customerId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `customer` WHERE customer_id = {$customerId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Customer has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete customer failed.|';
            }
        } else {
            $return_value = '|FAIL|Customer in use in sales agreement.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'customer_data') {
    // <editor-fold defaultstate="collapsed" desc="customer_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    $customerName = $myDatabase->real_escape_string($_POST['customerName']);
    $customerAddress = $myDatabase->real_escape_string($_POST['customerAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
    $branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>

    if ($customerId == '') {
        $boolNew = true;
    }

    if ($customerName != '' && $customerAddress != '' && $npwp != '' && $npwp_name != '' && $ppn != '' && $pph != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$customerName}')";
        } else {
            $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$customerName}') AND customer_id <> {$customerId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;

            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }

            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }

            if ($boolNew) {
                $sql = "select max(customer_code) as maxCode from customer";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                $row = $result->fetch_array();
                $customerCode = $row['maxCode'];
                $noUrut = (int)substr($customerCode, 4, 5);
                $noUrut++;
                $char = "CUS-";
                $customerCode = $char . sprintf("%05s", $noUrut);
                $sql = "INSERT INTO `customer` (customer_code,customer_name, customer_address, npwp, npwp_name, bank_name, branch, account_no, beneficiary, "
                    . "swift_code, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                    . "'{$customerCode}','{$customerName}', '{$customerAddress}', '{$npwp}', '{$npwp_name}', '{$bankName}', '{$branch}', '{$accountNo}', "
                    . "'{$beneficiary}', '{$swiftCode}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `customer` SET "
                    . "customer_name = '{$customerName}', "
                    . "customer_address = '{$customerAddress}', "
                    . "npwp = '{$npwp}', "
                    . "npwp_name = '{$npwp_name}', "
                    . "bank_name = '{$bankName}', "
                    . "branch = '{$branch}', "
                    . "account_no = '{$accountNo}', "
                    . "beneficiary = '{$beneficiary}', "
                    . "swift_code = '{$swiftCode}', "
                    . "ppn_tax_id = {$ppn}, "
                    . "pph_tax_id = {$pph}, "
                    . "ppn = {$ppnValue}, "
                    . "pph = {$pphValue} "
                    . "WHERE customer_id = {$customerId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $customerId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Customer has successfully inserted/updated.|' . $customerId . '|';
            } else {
                $return_value = '|FAIL|Insert/update customer failed.||';
            }
        } else {
            $return_value = '|FAIL|Customer already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_labor') {
    // <editor-fold defaultstate="collapsed" desc="delete_labor">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    // </editor-fold>

    if ($laborId != '') {
        $sql = "SELECT * FROM `transaction` WHERE labor_id = {$laborId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `labor` WHERE labor_id = {$laborId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Labor worker has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete labor worker failed.|';
            }
        } else {
            $return_value = '|FAIL|Labor worker in use in transaction.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'labor_data') {
    // <editor-fold defaultstate="collapsed" desc="labor_datass">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $laborName = $myDatabase->real_escape_string($_POST['laborName']);
    $laborAddress = $myDatabase->real_escape_string($_POST['laborAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
    $branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $active = $myDatabase->real_escape_string($_POST['active']);
    $nik = $myDatabase->real_escape_string($_POST['nik']);
    $laborRules = $myDatabase->real_escape_string($_POST['laborRules']);
    $laborEmail = $myDatabase->real_escape_string($_POST['email']);

    // </editor-fold>

    if ($laborId == '') {
        $boolNew = true;
    }

    if ($laborName != '' && $laborAddress != '' && $npwp != '' && $ppn != '' && $pph != '' && $laborRules != 0) {
        if ($boolNew) {
            $sql = "SELECT * FROM `labor` WHERE UPPER(labor_name) = UPPER('{$laborName}')";
        } else {
            $sql = "SELECT * FROM `labor` WHERE UPPER(labor_name) = UPPER('{$laborName}') AND labor_id <> {$laborId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;

            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }

            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }

            if ($boolNew) {
                $sql1 = "select max(labor_code) as maxCode from labor";
                $result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
                $row = $result1->fetch_array();
                $laborCode = $row['maxCode'];
                $noUrut = (int)substr($laborCode, 3, 5);
                $noUrut++;
                $char = "LB-";
                $laborCode = $char . sprintf("%05s", $noUrut);
                $sql = "INSERT INTO `labor` (labor_code,labor_name, labor_address, nik, npwp, npwp_name, bank_name, branch, account_no, beneficiary, "
                    . "swift_code, ppn_tax_id, pph_tax_id, ppn, pph, active, entry_by, entry_date, laborRules, labor_email) VALUES ("
                    . "'{$laborCode}','{$laborName}', '{$laborAddress}', '{$nik}', '{$npwp}', '{$npwp_name}', '{$bankName}', '{$branch}', '{$accountNo}', "
                    . "'{$beneficiary}', '{$swiftCode}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$active}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$laborRules}, '{$laborEmail}')";
            } else {
				 $sqlA = "SELECT entry_by, entry_date, ppn FROM labor WHERE labor_id = {$laborId}";
                $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                if ($resultA !== false) {
                    $rowA = $resultA->fetch_object();
                    $entryby = $rowA->entry_by;
                    $entrydate = $rowA->entry_date;
                    $oldPPn = str_replace(",", "", $myDatabase->real_escape_string($rowA->ppn));

                    $sqlLog = "INSERT INTO log_mst_allvendor (action, action_by, action_date, labor_id, entry_by, entry_date, ppn, old_ppn) 
                                 VALUES ('UPDATE', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), $laborId, $entryby, STR_TO_DATE('$entrydate', '%Y-%m-%d %H:%i:%s'), {$ppnValue}, {$oldPPn})";
                    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);

    
                }
					
                $sql = "UPDATE `labor` SET "
                    . "labor_name = '{$laborName}', "
                    . "labor_address = '{$laborAddress}', "
                    . "nik = '{$nik}', "
                    . "npwp = '{$npwp}', "
                    . "npwp_name = '{$npwp_name}', "
                    . "bank_name = '{$bankName}', "
                    . "branch = '{$branch}', "
                    . "account_no = '{$accountNo}', "
                    . "beneficiary = '{$beneficiary}', "
                    . "swift_code = '{$swiftCode}', "
                    . "ppn_tax_id = {$ppn}, "
                    . "pph_tax_id = {$pph}, "
                    . "ppn = {$ppnValue}, "
                    . "pph = {$pphValue}, "
                    . "laborRules = {$laborRules}, "
                    . "active = {$active},"
                    . "labor_email = '{$laborEmail}' "
                    . "WHERE labor_id = {$laborId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $laborId = $myDatabase->insert_id;
					$sqlLog = "INSERT INTO log_mst_allvendor (action, labor_id, entry_by, entry_date, ppn, old_ppn) 
                    VALUES ('INSERT',  $laborId, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$ppnValue}, 0)";

                }

                $return_value = '|OK|Labor worker has successfully inserted/updated.|' . $laborId . '|';
            } else {
                $return_value = '|FAIL|Insert/update labor worker failed.||';
            }
        } else {
            $return_value = '|FAIL|Labor worker already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'currency_data') {
    // <editor-fold defaultstate="collapsed" desc="currency_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $currencyCode = $myDatabase->real_escape_string($_POST['currencyCode']);
    $currencyName = $myDatabase->real_escape_string($_POST['currencyName']);
    $isCountryCurrency = $myDatabase->real_escape_string($_POST['isCountryCurrency']);
    $isPurchaseCurrency = $myDatabase->real_escape_string($_POST['isPurchaseCurrency']);
    $isSalesCurrency = $myDatabase->real_escape_string($_POST['isSalesCurrency']);
    $isReportCurrency = $myDatabase->real_escape_string($_POST['isReportCurrency']);
    // </editor-fold>

    if ($currencyId == '') {
        $boolNew = true;
    }

    if ($currencyCode != '' && $currencyName != '' && $isCountryCurrency != '' && $isPurchaseCurrency != '' &&
        $isSalesCurrency != '' && $isReportCurrency != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `currency` WHERE UPPER(currency_code) = UPPER('{$currencyCode}')";
        } else {
            $sql = "SELECT * FROM `currency` WHERE UPPER(currency_code) = UPPER('{$currencyCode}') AND currency_id <> {$currencyId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `currency` (currency_code, currency_name, is_country_currency, is_purchase_currency, is_sales_currency, is_report_currency, entry_by, entry_date) VALUES ("
                    . "UPPER('{$currencyCode}'), '{$currencyName}', {$isCountryCurrency}, {$isPurchaseCurrency}, {$isSalesCurrency}, {$isReportCurrency}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `currency` SET "
                    . "currency_code = UPPER('{$currencyCode}'),"
                    . "currency_name = '{$currencyName}', "
                    . "is_country_currency = {$isCountryCurrency}, "
                    . "is_purchase_currency = {$isPurchaseCurrency}, "
                    . "is_sales_currency = {$isSalesCurrency}, "
                    . "is_report_currency = {$isReportCurrency} "
                    . "WHERE currency_id = {$currencyId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $currencyId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Currency has successfully inserted/updated.|' . $currencyId . '|';
            } else {
                $return_value = '|FAIL|Insert/update currency failed.||';
            }
        } else {
            $return_value = '|FAIL|Currency already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'stockpile_data') {
    // <editor-fold defaultstate="collapsed" desc="stockpile_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockpileCode = $myDatabase->real_escape_string($_POST['stockpileCode']);
    $stockpileName = $myDatabase->real_escape_string($_POST['stockpileName']);
    $stockpileAddress = $myDatabase->real_escape_string($_POST['stockpileAddress']);
    $active = $myDatabase->real_escape_string($_POST['active']);
    $freightWeightRule = $myDatabase->real_escape_string($_POST['freightWeightRule']);
    $curahWeightRule = $myDatabase->real_escape_string($_POST['curahWeightRule']);
    $vendorPortal = $myDatabase->real_escape_string($_POST['vendorPortal']);
    $email = $myDatabase->real_escape_string($_POST['email']);

    // </editor-fold>

    if ($stockpileId == '') {
        $boolNew = true;
    }

    if ($stockpileCode != '' && $stockpileName != '' && $active != '' && $freightWeightRule != '' && $curahWeightRule != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `stockpile` WHERE UPPER(stockpile_code) = UPPER('{$stockpileCode}') AND UPPER(stockpile_name) = UPPER('{$stockpileName}')";
        } else {
            $sql = "SELECT * FROM `stockpile` WHERE UPPER(stockpile_code) = UPPER('{$stockpileCode}') AND UPPER(stockpile_name) = UPPER('{$stockpileName}') AND stockpile_id <> {$stockpileId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `stockpile` (stockpile_code, stockpile_name, stockpile_address, active, vendor_portal,freight_weight_rule, curah_weight_rule, entry_by, entry_date, stockpile_email) VALUES ("
                    . "UPPER('{$stockpileCode}'), '{$stockpileName}', '{$stockpileAddress}', {$active}, {$vendorPortal},{$freightWeightRule}, {$curahWeightRule}, {$_SESSION['userId']}, "
                    . "STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$email}')";
            } else {
                $sql = "UPDATE `stockpile` SET "
                    . "stockpile_code = UPPER('{$stockpileCode}'), "
                    . "stockpile_name = '{$stockpileName}',"
                    . "stockpile_address = '{$stockpileAddress}', "
                    . "freight_weight_rule = {$freightWeightRule}, "
                    . "curah_weight_rule = {$curahWeightRule}, "
                    . "active = {$active},"
                    . "vendor_portal = {$vendorPortal}, "
                    . "stockpile_email = '{$email}' "
                    . "WHERE stockpile_id = {$stockpileId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $stockpileId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Stockpile has successfully inserted/updated.|' . $stockpileId . '|';
            } else {
                $return_value = '|FAIL|Insert/update stockpile failed.||';
            }
        } else {
            $return_value = '|FAIL|Stockpile already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_stockpile_freight') {
    // <editor-fold defaultstate="collapsed" desc="delete_stockpile_freight">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightCostId = $myDatabase->real_escape_string($_POST['freightCostId']);
    // </editor-fold>

    if ($freightCostId != '') {
        $sql = "SELECT * FROM `transaction` WHERE freight_cost_id = {$freightCostId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `freight_cost` WHERE freight_cost_id = {$freightCostId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Freight cost has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete freight cost failed.|';
            }
        } else {
            $return_value = '|FAIL|Freight cost in use in condition.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'stockpile_freight_data') {
    // <editor-fold defaultstate="collapsed" desc="stockpile_freight_data">

    $return_value = '';
    $boolNew = false;
    $boolShrink = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightCostId = $myDatabase->real_escape_string($_POST['freightCostId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $paymentNotes = $myDatabase->real_escape_string($_POST['paymentNotes']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    $contractPKHOA = $myDatabase->real_escape_string($_POST['contractPKHOA']);
    $shrink_tolerance_kg = $myDatabase->real_escape_string($_POST['shrink_tolerance_kg']);
    $shrink_tolerance_persen = $myDatabase->real_escape_string($_POST['shrink_tolerance_persen']);
    $shrink_claim = $myDatabase->real_escape_string($_POST['shrink_claim']);
    $active_from = $myDatabase->real_escape_string($_POST['active_from']);
    // </editor-fold>

    if ($freightCostId == '') {
        $boolNew = true;
    }

    if ($freightId != '' && $currencyId != '' && $price != '' && $vendorId != '') {
//        if($boolNew) {
//            $sql = "SELECT * FROM `freight_cost` WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId}";
//        } else {
//            $sql = "SELECT * FROM `freight_cost` WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId} AND freight_cost_id <> {$freightCostId}";
//        }
//        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//        if($result !== false && $result->num_rows == 0) {

        if ($shrink_tolerance_kg > 0 && $shrink_tolerance_persen > 0) {
            $boolShrink = false;
        }

        if ($exchangeRate == '') {
            $exchangeRate = 1;
        }

        $priceConverted = $price * $exchangeRate;

        if ($boolNew) {
            $sql = "INSERT INTO `freight_cost` (freight_id, stockpile_id, vendor_id, currency_id, exchange_rate, price, "
                . "price_converted, payment_notes, remarks, company_id, entry_by, entry_date,contract_pkhoa,shrink_tolerance_kg,shrink_tolerance_persen,shrink_claim,active_from) VALUES ("
                . "{$freightId}, {$stockpileId}, {$vendorId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, "
                . "'{$paymentNotes}', '{$remarks}', {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),'{$contractPKHOA}','{$shrink_tolerance_kg}','{$shrink_tolerance_persen}','{$shrink_claim}','{$active_from}')";
        } else {
            $sql = "UPDATE `freight_cost` SET "
                . "freight_id = {$freightId}, "
                . "currency_id = {$currencyId}, "
                . "exchange_rate = {$exchangeRate}, "
                . "vendor_id = {$vendorId}, "
                . "price = {$price}, "
                . "price_converted = {$priceConverted}, "
                . "payment_notes = '{$paymentNotes}', "
                . "contract_pkhoa = '{$contractPKHOA}', "
                . "remarks = '{$remarks}', "
                . "shrink_tolerance_kg = '{$shrink_tolerance_kg}', "
                . "shrink_tolerance_persen = '{$shrink_tolerance_persen}', "
                . "shrink_claim = '{$shrink_claim}', "
                . "active_from = '{$active_from}', "
                . "modify_by = {$_SESSION['userId']}, "
                . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                . "WHERE freight_cost_id = {$freightCostId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Freight cost has successfully inserted/updated.|';
        } else {
            $return_value = '|FAIL|Insert/update freight cost failed.|';
            echo $sql;
        }
//        } else {
//            $return_value = '|FAIL|Freight cost already exists.|';
//        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'stockpile_unloading_data') {
    // <editor-fold defaultstate="collapsed" desc="stockpile_unloading_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $unloadingCostId = $myDatabase->real_escape_string($_POST['unloadingCostId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $vehicleId = $myDatabase->real_escape_string($_POST['vehicleId']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $status = $myDatabase->real_escape_string($_POST['status']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    // </editor-fold>

    if ($unloadingCostId == '') {
        $boolNew = true;
    }

    if ($vehicleId != '' && $currencyId != '' && $price != '') {
//        if($boolNew) {
//            $sql = "SELECT * FROM `freight_cost` WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId}";
//        } else {
//            $sql = "SELECT * FROM `freight_cost` WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId} AND freight_cost_id <> {$freightCostId}";
//        }
//        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//        if($result !== false && $result->num_rows == 0) {

        if ($exchangeRate == '') {
            $exchangeRate = 1;
        }

        $priceConverted = $price * $exchangeRate;

        if ($boolNew) {
            $sql = "INSERT INTO `unloading_cost` (vehicle_id, stockpile_id, currency_id, exchange_rate, price, "
                . "price_converted, company_id, entry_by, entry_date, status) VALUES ("
                . "{$vehicleId}, {$stockpileId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, "
                . "{$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$status})";
        } else {
            $sql = "UPDATE `unloading_cost` SET "
                . "vehicle_id = {$vehicleId}, "
                . "currency_id = {$currencyId}, "
                . "exchange_rate = {$exchangeRate}, "
                . "price = {$price}, "
                . "price_converted = {$priceConverted}, "
                . "modify_by = {$_SESSION['userId']}, "
                . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), "
                . "status = {$status} "
                . "WHERE unloading_cost_id = {$unloadingCostId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Unloading cost has successfully inserted/updated.|';
        } else {
            $return_value = '|FAIL|Insert/update unloading cost failed.|';
        }
//        } else {
//            $return_value = '|FAIL|Freight cost already exists.|';
//        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'stockpile_labor_data') {
    // <editor-fold defaultstate="collapsed" desc="stockpile_labor_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $ls_id = $myDatabase->real_escape_string($_POST['ls_id']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $status = $myDatabase->real_escape_string($_POST['status']);

    // </editor-fold>

    if ($ls_id == '') {
        $boolNew = true;
    }

    if ($laborId != '') {


        if ($boolNew) {
            $sql = "INSERT INTO `labor_stockpile` (labor_id, stockpile_id, entry_by, entry_date, status) VALUES ("
                . "{$laborId}, {$stockpileId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$status})";
        } else {
            $sql = "UPDATE `labor_stockpile` SET "
                . "labor_id = {$laborId}, "
                . "update_by = {$_SESSION['userId']}, "
                . "update_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), "
                . "status = {$status} "
                . "WHERE ls_id = {$ls_id}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Labor has successfully inserted/updated.|';
        } else {
            $return_value = '|FAIL|Insert/update Labor failed.|';
            echo $sql;
        }
//        } else {
//            $return_value = '|FAIL|Freight cost already exists.|';
//        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_data') {
    // <editor-fold defaultstate="collapsed" desc="jurnal_data">

    $return_value = '';
    //$boolShipment1 = false;

    $transaction_id = $myDatabase->real_escape_string($_POST['transaction_id']);
    $gl_add_date = $myDatabase->real_escape_string($_POST['gl_add_date']);
    //$gl_add_no = $myDatabase->real_escape_string($_POST['gl_add_no']);
    $stockpile_id = $myDatabase->real_escape_string($_POST['stockpile_id']);
    $general_vendor_id = $myDatabase->real_escape_string($_POST['general_vendor_id']);
    $vendor_id = $myDatabase->real_escape_string($_POST['vendor_id']);
    $contract_id = $myDatabase->real_escape_string($_POST['contract_id']);

    $shipment_id = $myDatabase->real_escape_string($_POST['shipment_id']);
    $invoice_id = $myDatabase->real_escape_string($_POST['invoice_id']);
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));


    if ($contract_id == '') {
        $contract_id = 'NULL';
    }
    if ($transaction_id == '') {
        $transaction_id = 'NULL';
    }
    if ($shipment_id == '') {
        $shipment_id = 'NULL';
    }
    if ($invoice_id == '') {
        $invoice_id = 'NULL';
    }
    if ($notes == '') {
        $notes = 'NULL';
    }
    if ($price == '') {
        $price = 0;
    }
    if ($quantity == '') {
        $quantity = 0;
    }
    if ($general_vendor_id == '') {
        $general_vendor_id = 'NULL';
    }
    if ($vendor_id == '') {
        $vendor_id = 'NULL';
    }


    $str = $_POST['gl_add_date'];
    $date = DateTime::createFromFormat('d/m/Y', $str);
    $jurnalYearMonth = $date->format('ym');


    if ($stockpile_id != '') {

        $checkJurnalNo = 'JM/JPJ/' . $jurnalYearMonth;

        $sql = "SELECT gl_add_no FROM gl_add WHERE gl_add_no LIKE '{$checkJurnalNo}%' ORDER BY gl_add_id DESC LIMIT 1";
        $resultJurnal = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($resultJurnal->num_rows == 1) {
            $rowJurnal = $resultJurnal->fetch_object();
            $splitJurnalNo = explode('/', $rowJurnal->gl_add_no);
            $lastExplode = count($splitJurnalNo) - 1;
            $nextJurnalNo = ((float)$splitJurnalNo[$lastExplode]) + 1;
            $jurnalNo = $checkJurnalNo . '/' . $nextJurnalNo;
        } else {
            $jurnalNo = $checkJurnalNo . '/1';

        }

        $sql = "INSERT INTO `gl_add` (gl_add_date, gl_add_no, stockpile_id, general_vendor_id, vendor_id , contract_id, transaction_id, shipment_id, invoice_id, notes, quantity, price, input_by, input_date) VALUES (STR_TO_DATE('{$gl_add_date}', '%d/%m/%Y'), '{$jurnalNo}', {$stockpile_id}, {$general_vendor_id}, {$vendor_id}, {$contract_id}, {$transaction_id}, {$shipment_id}, {$invoice_id}, '{$notes}', '{$quantity}', '{$price}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $jurnalId = $myDatabase->insert_id;

            $return_value = '|OK|Data has successfully inserted.||';

            $sql = "UPDATE `gl_detail` SET gl_add_id = {$jurnalId} WHERE gl_add_id IS NULL AND entry_by = {$_SESSION['userId']}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


        } else {
            $return_value = '|FAIL|Insert Data failed.||';

        }

    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_jurnal_data') {
    // <editor-fold defaultstate="collapsed" desc="delete_jurnal_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $jurnalId = $myDatabase->real_escape_string($_POST['jurnalId']);
    // </editor-fold>

    if ($jurnalId != '') {


        $sql = "DELETE FROM `gl_add` WHERE gl_add_id = {$jurnalId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|User has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_detail') {
    // <editor-fold defaultstate="collapsed" desc="jurnal_detail">

    $return_value = '';
    $boolShipment1 = false;
    //$exchangeRate = '';
    //$grandTotal = 0;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $jurnalType = $myDatabase->real_escape_string($_POST['jurnalType']);
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $stockpileId2 = $myDatabase->real_escape_string($_POST['stockpileId2']);
    $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $notes = $myDatabase->real_escape_string($_POST['notes']);

    // </editor-fold>

    if ($stockpileId2 == '') {
        $stockpileId2 = 'NULL';
    }

    if ($exchangeRate == '') {
        $exchangeRate = 1;
    }


    if ($jurnalType != '' && $accountId != '' && $amount != '' && $currencyId != '') {

        $amountConverted = $exchangeRate * $amount;


        $sql = "INSERT INTO `gl_detail` (gl_type, stockpile_id, account_id, currency_id, exchange_rate, amount, amount_converted, notes, entry_by, entry_date) VALUES ("
            . "{$jurnalType}, {$stockpileId2}, {$accountId}, {$currencyId}, {$exchangeRate}, '{$amount}', '{$amountConverted}', '{$notes}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $jurnalId = $myDatabase->insert_id;

            $return_value = '|OK|Data has successfully inserted.||';


            insertGeneralLedger($myDatabase, 'JURNAL MEMORIAL', "NULL", "NULL", "NULL", "NULL", "NULL", $jurnalId);
            insertReportGL($myDatabase, 'JURNAL MEMORIAL', "NULL", "NULL", "NULL", "NULL", "NULL", $jurnalId);

        } else {
            $return_value = '|FAIL|Insert Data failed.||';
        }

    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_jurnal_detail') {
    // <editor-fold defaultstate="collapsed" desc="delete_jurnal_detail">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $jurnalDetailId = $myDatabase->real_escape_string($_POST['jurnalDetailId']);
    // </editor-fold>

    if ($jurnalDetailId != '') {

        $sql = "DELETE FROM `gl_detail` WHERE gl_detail_id = {$jurnalDetailId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|User has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_journal_memorial') {
    // <editor-fold defaultstate="collapsed" desc="delete_journal_memorial">

    $return_value = '';
    $boolNew = false;
	$actionType = $myDatabase->real_escape_string($_POST['actionType']);
    $journalNo = $myDatabase->real_escape_string($_POST['journalNo']);

    // </editor-fold>
   if ($actionType == 'DELETE') {
       $sqlLogs = "SELECT *
                        FROM `gl_report` glr
                        WHERE glr.jurnal_no = '{$journalNo}'
                        group by jurnal_no";
            $resultCekLogs = $myDatabase->query($sqlLogs, MYSQLI_STORE_RESULT);
        if ($resultCekLogs !== false && $resultCekLogs->num_rows > 0) {
             while ($rowLogs = $resultCekLogs->fetch_object()) {
                $stockpile = $rowLogs->stockpile;
                $jurnalNo = $rowLogs->jurnal_no;
                $glDate = $rowLogs->gl_date;
                $supplierCode = $rowLogs->supplier_code;
                $supplierName = $rowLogs->supplier_name;
                $remarks = $rowLogs->remarks;
                $entryDate = $rowLogs->entry_date;
                $entryBy = $rowLogs->entry_by;
                $sqlInsertLogs ="INSERT INTO log_jurnal_memorial (`action`, action_by, action_date, stockpile, jurnal_no, gl_date, supplier_code, supplier_name, 
                                    remarks, entry_date, entry_by) 
                                VALUES ('{$actionType}',{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$stockpile}','{$jurnalNo}', '{$glDate}', '{$supplierCode}',
                    '{$supplierName}','{$remarks}', '{$entryDate}', {$entryBy})";
                $resultLogStockTransit = $myDatabase->query($sqlInsertLogs, MYSQLI_STORE_RESULT);
             }
        }
        $sql = "DELETE FROM `rpt_upload` WHERE payment_no = '{$journalNo}';";
        $sql .= "DELETE FROM `gl_report` WHERE jurnal_no = '{$journalNo}';";
    }
    $result = $myDatabase->multi_query($sql);
	if ($result !== false) {
        if ($actionType == 'DELETE') {
            $return_value = '|OK|Jurnal Memorial has successfully deleted';
        }

    }else {
	    $return_value = '|FAIL|Jurnal Memorial failed to deleted.||';
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'invoice_detail') {
    // <editor-fold defaultstate="collapsed" desc="invoice_detail">

    $return_value = '';
    $boolShipment1 = false;
    $boolPO = false;
    $boolVendor = false;
    //$grandTotal = 0;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $invMethod = $myDatabase->real_escape_string($_POST['invMethod']);
    $invoiceType = $myDatabase->real_escape_string($_POST['invoiceType']);
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId']);
    $shipmentId1 = $myDatabase->real_escape_string($_POST['shipmentId1']);
    $stockpileId2 = $myDatabase->real_escape_string($_POST['stockpileId2']);
    $qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $termin = str_replace(",", "", $myDatabase->real_escape_string($_POST['termin']));
    $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $ppn = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn1']));
    //$pph = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph1']));
    $pphID = $myDatabase->real_escape_string($_POST['pphTaxId']);
    $ppnID = $myDatabase->real_escape_string($_POST['ppnID']);
    $pphDP2 = $myDatabase->real_escape_string($_POST['pphDP2']);
    $ppnDP2 = $myDatabase->real_escape_string($_POST['ppnDP2']);
    //$grandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal']));
    //$DP = $grandTotal;
    $dp_total = str_replace(",", "", $myDatabase->real_escape_string($_POST['dp_total']));
    $DP = $dp_total;
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $invoiceMethodDetail = $myDatabase->real_escape_string($_POST['invoiceMethodDetail']);
    $poId = $myDatabase->real_escape_string($_POST['poId']);
    $slipNos = "";
    $slipNos2 = "";
    $transaksiMutasi = $myDatabase->real_escape_string($_POST['transaksiMutasi']);
    $uom = $myDatabase->real_escape_string($_POST['uom']);
    $mutasiValue = "";
    $mutasiChecked = "";
	
	$invoiceDetailId = $myDatabase->real_escape_string($_POST['invoiceDetailId']);
    // </editor-fold>
    if ($shipmentId1 == '') {
        $shipmentId1 = 'NULL';
    } else {
        $sqlSales = "SELECT sales_id FROM sales WHERE shipment_id = {$shipmentId1}";
        $resultSales = $myDatabase->query($sqlSales, MYSQLI_STORE_RESULT);
        if ($resultSales !== false && $resultSales->num_rows > 0) {
            $rowSales = $resultSales->fetch_object();
            $salesId = $rowSales->sales_id;

            $sqlStatus = "UPDATE sales SET "
                . "used_status = 1 "
                . " WHERE sales_id = {$salesId}";
            $resultStatus = $myDatabase->query($sqlStatus, MYSQLI_STORE_RESULT);
        }

    }
    if ($poId == '') {
        $poId = 'NULL';
    }
    if ($stockpileId2 == '') {
        $stockpileId2 = 'NULL';
    }

    if ($exchangeRate == '') {
        $exchangeRate = 1;
    }
	
	 if ($invoiceDetailId == '' || $invoiceDetailId == 0 || $invoiceDetailId == 'NULL') {
        $boolNew = true;
      
    }
    
	if($pphDP2 != 0 ){
		$sqlPPH = "SELECT tax_value FROM tax WHERE tax_id = {$pphID}";
			$resultPPH = $myDatabase->query($sqlPPH, MYSQLI_STORE_RESULT);
			if($resultPPH !== false && $resultPPH->num_rows > 0) {
       			 $rowPPH = $resultPPH->fetch_object();
       				$pph1 = $rowPPH->tax_value;
					$dp_pph = $DP * ($pph1/100);
			}
		}else{
			$dp_pph = 0;
		}
		if($ppnDP2 != 0 ){
		$sqlPPN = "SELECT tax_value FROM tax WHERE tax_id = {$ppnID}";
			$resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
			if($resultPPN !== false && $resultPPN->num_rows > 0) {
       			 $rowPPN = $resultPPN->fetch_object();
       				$ppn1 = $rowPPN->tax_value;
					$dp_ppn = $DP * ($ppn1/100);
			}
		}else{
			$dp_ppn = 0;
		}

			$dp_total = ($DP + $dp_ppn) - $dp_pph;

    $pph = 0;
    if ($pphID != 0) {
        $sqlP = "SELECT tax_value FROM tax WHERE tax_id = {$pphID}";
        $resultP = $myDatabase->query($sqlP, MYSQLI_STORE_RESULT);
        if ($resultP !== false && $resultP->num_rows > 0) {
            $rowP = $resultP->fetch_object();
            $pphTax = $rowP->tax_value;

            $pph = $amount * ($pphTax / 100);
        }
    }

    if ($invMethod == 1) {
        $amount2 = $amount * -1;
        $ppn2 = $ppn * -1;
        $pph2 = $pph * -1;
    } else {
        $amount2 = $amount;
        $ppn2 = $ppn;
        $pph2 = $pph;
    }

    $sqlShipment = "SELECT account_no FROM account WHERE account_id = {$accountId}";
    $resultShipment = $myDatabase->query($sqlShipment, MYSQLI_STORE_RESULT);
    if ($resultShipment !== false && $resultShipment->num_rows > 0) {
        $rowShipment = $resultShipment->fetch_object();
        $acc = $rowShipment->account_no;
        $sub_acc = substr($acc, 0, 2);
    }

    if ($sub_acc == 51 && $shipmentId1 == 'NULL') {
        $boolShipment1 = false;
        //echo $sub_acc;
    } else {
        $boolShipment1 = true;
        //echo 'SALAH';
    }
    if (($acc == 520900 || $acc == 521000) && ($poId == 'NULL' && $shipmentId1 == 'NULL')) {
        $boolPO = false;
    } elseif (($acc == 520900 || $acc == 521000) && ($poId != 'NULL' || $shipmentId1 != 'NULL')) {
        $boolPO = true;
    } else {
        $boolPO = true;
    }


    //echo $sql;

    //cek vendor
    $gvId = '';
    $sqlv = "SELECT general_vendor_id FROM invoice_detail WHERE invoice_id IS NULL AND entry_by = {$_SESSION['userId']} GROUP BY general_vendor_id";
    $resultv = $myDatabase->query($sqlv, MYSQLI_STORE_RESULT);
    if ($resultv !== false && $resultv->num_rows == 1) {
        $rowv = $resultv->fetch_object();
        $gvId = $rowv->general_vendor_id;
        if ($gvId == $generalVendorId) {
            $boolVendor = true;
        }
    }
    if ($gvId == '') {
        $boolVendor = true;
    }

    if ($transaksiMutasi == 1) {

        //$mutasi4 = 0;
        if (isset($_POST['checkedMutasi1'])) {
            $mutasi1 = $_POST['checkedMutasi1'];
            if (isset($_POST['checkedMutasi'])) {
                $mutasi = $_POST['checkedMutasi'];
                if (isset($_POST['checkedMutasi3'])) {
                    $mutasi3 = $_POST['checkedMutasi3'];
                } else {
                    $mutasi3 = '';
                }
                if (isset($_POST['checkedMutasi4'])) {
                    $mutasi4 = $_POST['checkedMutasi4'];
                } else {
                    $mutasi4 = '';
                }
                if (isset($_POST['checkedMutasi5'])) {
                    $mutasi5 = $_POST['checkedMutasi5'];
                } else {
                    $mutasi5 = '';
                }
                if (isset($_POST['checkedMutasi6'])) {
                    $mutasi6 = $_POST['checkedMutasi6'];
                } else {
                    $mutasi6 = '';
                }
            } else {
                $mutasi = '';
            }


            /*if(isset($_POST['checkedMutasi1'])){
					 $mutasi1 = $_POST['checkedMutasi1'];
					if (isset($_POST['checkedMutasi'])) {
						$mutasi = $_POST['checkedMutasi'];
					if (isset($_POST['checkedMutasi2'])) {
						$mutasi2 = $_POST['checkedMutasi2'];
					if (isset($_POST['checkedMutasi3'])) {
						$mutasi3 = $_POST['checkedMutasi3'];
						}else{
						$mutasi3 = '';
						}
					}
					}else{
						$mutasi = '';
					}*/

            for ($i = 0; $i < sizeof($mutasi1); $i++) {
                if ($mutasi[$i] != '') {
                    if ($mutasiChecked == '') {
                        $mutasiChecked .= $mutasi[$i];
                        if ($mutasi4[$i] == '') {
                            $mutasi4[$i] = 0;
                            $ppnAmt = 0;
                        } else {
                            //$gvId = '';
                            $sqlPrice = "SELECT a.price,a.ppn,
											IFNULL((SELECT SUM(ppnAmt) FROM mutasi_qty_price  WHERE mutasi_detail_id = a.mutasi_detail_id),0) AS sumppn,
											IFNULL((SELECT SUM(qtyInvoice) FROM mutasi_qty_price  WHERE mutasi_detail_id = a.mutasi_detail_id),0) AS sumqty FROM mutasi_detail a WHERE a.mutasi_detail_id = " . $mutasi[$i];
                            $resultPrice = $myDatabase->query($sqlPrice, MYSQLI_STORE_RESULT);
                            if ($resultPrice !== false && $resultPrice->num_rows == 1) {
                                $rowPrice = $resultPrice->fetch_object();
                                $total_per_termin = $rowPrice->total_per_termin;
                                $ppn = $rowPrice->ppn;
                                $sumppn = $rowPrice->sumppn;
                                $price = $rowPrice->price;
                                $sumqty = $rowPrice->sumqty;
                                $ppnPlus = $price * $mutasi3[$i];

                                $ppnAmt1 = (($sumqty * $price) + $ppnPlus) * ($ppn / 100);
                                $ppnAmt = $ppnAmt1 - $sumppn;
                            }

                        }
                        if ($mutasi5[$i] == '') {
                            $mutasi5[$i] = 0;
                            $pphAmt = 0;
                        } else {

                            $sqlPrice1 = "SELECT a.price,a.pph,
											IFNULL((SELECT SUM(pphAmt) FROM mutasi_qty_price  WHERE mutasi_detail_id = a.mutasi_detail_id),0) AS sumpph,
											IFNULL((SELECT SUM(qtyInvoice) FROM mutasi_qty_price  WHERE mutasi_detail_id = a.mutasi_detail_id),0) AS sumqty FROM mutasi_detail a WHERE a.mutasi_detail_id = " . $mutasi[$i];
                            $resultPrice1 = $myDatabase->query($sqlPrice1, MYSQLI_STORE_RESULT);
                            if ($resultPrice1 !== false && $resultPrice1->num_rows == 1) {
                                $rowPrice1 = $resultPrice1->fetch_object();
                                $total_per_termin = $rowPrice1->total_per_termin;
                                $pph = $rowPrice1->pph;
                                $sumpph = $rowPrice1->sumpph;
                                $price = $rowPrice1->price;
                                $sumqty = $rowPrice1->sumqty;
                                $pphPlus = $price * $mutasi3[$i];
                                $pphAmt1 = (($sumqty * $price) + $pphPlus) * ($pph / 100);
                                $pphAmt = $pphAmt1 - $sumpph;

                            }
                        }
                        if ($mutasi6[$i] == '') {
                            $mutasi6[$i] = 0;
                        } else {
                            $mutasi6[$i] = 1;
                        }


                        $dataCek = $mutasi[$i];
                        $mutasiValue .= '(' . $mutasi[$i] . ',' . $mutasi1[$i] . ',' . $mutasi3[$i] . ',' . $mutasi4[$i] . ',' . $mutasi5[$i] . ',' . $ppnAmt . ',' . $pphAmt . ',' . $mutasi6[$i] . ')';
                        $terminCek .= $mutasi1[$i];
                        $query .= 'SELECT IFNULL((IFNULL(SUM(termin),0)+' . $mutasi1[$i] . '),0) AS totalTermin FROM mutasi_qty_price WHERE mutasi_detail_id = ' . $mutasi[$i];
                        /*$sqlTermin = "SELECT (SUM(termin)) AS totalTermin FROM mutasi_qty_price WHERE mutasi_detail_id = {$mutasiChecked}";
							$resultTermin = $myDatabase->query($sqlTermin, MYSQLI_STORE_RESULT);
							if($resultTermin->num_rows == 1) {
							$rowT = $resultTermin->fetch_object();

							//$totalTermin = $rowT->totalTermin + $terminCek;

							}*/

                    } else {
                        $mutasiChecked .= ',' . $mutasi[$i];
                        if ($mutasi4[$i] == '') {
                            $mutasi4[$i] = 0;
                            $ppnAmt = 0;
                        } else {
                            //$gvId = '';
                            $sqlPrice = "SELECT a.price,a.ppn,
											IFNULL((SELECT SUM(ppnAmt) FROM mutasi_qty_price  WHERE mutasi_detail_id = a.mutasi_detail_id),0) AS sumppn,
											IFNULL((SELECT SUM(qtyInvoice) FROM mutasi_qty_price  WHERE mutasi_detail_id = a.mutasi_detail_id),0) AS sumqty FROM mutasi_detail a WHERE a.mutasi_detail_id = " . $mutasi[$i];
                            $resultPrice = $myDatabase->query($sqlPrice, MYSQLI_STORE_RESULT);
                            if ($resultPrice !== false && $resultPrice->num_rows == 1) {
                                $rowPrice = $resultPrice->fetch_object();
                                $total_per_termin = $rowPrice->total_per_termin;
                                $ppn = $rowPrice->ppn;
                                $sumppn = $rowPrice->sumppn;
                                $price = $rowPrice->price;
                                $sumqty = $rowPrice->sumqty;
                                $ppnPlus = $price * $mutasi3[$i];


                                $ppnAmt1 = (($sumqty * $price) + $ppnPlus) * ($ppn / 100);
                                $ppnAmt = $ppnAmt1 - $sumppn;

                            }

                        }
                        if ($mutasi5[$i] == '') {
                            $mutasi5[$i] = 0;
                            $pphAmt = 0;
                        } else {

                            $sqlPrice1 = "SELECT a.price,a.pph,
											IFNULL((SELECT SUM(pphAmt) FROM mutasi_qty_price  WHERE mutasi_detail_id = a.mutasi_detail_id),0) AS sumpph,
											IFNULL((SELECT SUM(qtyInvoice) FROM mutasi_qty_price  WHERE mutasi_detail_id = a.mutasi_detail_id),0) AS sumqty FROM mutasi_detail a WHERE a.mutasi_detail_id = " . $mutasi[$i];
                            $resultPrice1 = $myDatabase->query($sqlPrice1, MYSQLI_STORE_RESULT);
                            if ($resultPrice1 !== false && $resultPrice1->num_rows == 1) {
                                $rowPrice1 = $resultPrice1->fetch_object();
                                $total_per_termin = $rowPrice1->total_per_termin;
                                $pph = $rowPrice1->pph;
                                $sumpph = $rowPrice1->sumpph;
                                $price = $rowPrice1->price;
                                $sumqty = $rowPrice1->sumqty;
                                $pphPlus = $price * $mutasi3[$i];
                                $pphAmt1 = (($sumqty * $price) + $pphPlus) * ($pph / 100);
                                $pphAmt = $pphAmt1 - $sumpph;

                            }
                        }

                        if ($mutasi6[$i] == '') {
                            $mutasi6[$i] = 0;
                        } else {
                            $mutasi6[$i] = 1;
                        }
                        $dataCek = $mutasi[$i];
                        $mutasiValue .= '(' . $mutasi[$i] . ',' . $mutasi1[$i] . ',' . $mutasi3[$i] . ',' . $mutasi4[$i] . ',' . $mutasi5[$i] . ',' . $ppnAmt . ',' . $pphAmt . ',' . $mutasi6[$i] . ')';
                        $terminCek .= $mutasi1[$i];
                        $query .= ' UNION SELECT IFNULL((IFNULL(SUM(termin),0)+' . $mutasi1[$i] . '),0) AS totalTermin FROM mutasi_qty_price WHERE mutasi_detail_id = ' . $mutasi[$i];


                    }
                }


            }

            /*for ($i = 0; $i < sizeof($mutasi2); $i++) {
					if($mutasi1[$i] != ''){
							if($mutasiValue == '') {
                            //$mutasiChecked .= $mutasi[$i];
							$mutasiValue .= '('. $mutasi[$i] .','. $mutasi1[$i] .','. $mutasi2[$i] .','. $mutasi3[$i] .')';
                    } else {
                            //$mutasiChecked .= ','. $mutasi[$i];
							$mutasiValue .= ','. '('. $mutasi[$i] .','. $mutasi1[$i] .','. $mutasi2[$i] .','. $mutasi3[$i] .')';
                        }
					}
				}*/


        }
        $boolTermin = true;
        $sqlTermin = "{$query}";
        $resultTermin = $myDatabase->query($sqlTermin, MYSQLI_STORE_RESULT);
        if ($resultTermin !== false && $resultTermin->num_rows > 0) {
            while ($rowT = $resultTermin->fetch_object()) {

                $totalTermin = $rowT->totalTermin;
                if ($totalTermin > 100) {
                    $boolTermin = true;
                    break;
                } else {
                    $boolTermin = true;
                }

            }
        }
        //echo $mutasiChecked;
        echo $mutasiValue;
        echo 'AA';
        //echo $sqlPrice;
        echo $ppnPlus;
        //echo $totalTermin;
        //cek termin
        /*$sqlTermin = "SELECT (SUM(termin)+{$terminCek}) AS totalTermin FROM mutasi_qty_price WHERE mutasi_detail_id IN ({$mutasiChecked}) GROUP BY mutasi_detail_id";
			$resultTermin = $myDatabase->query($sqlTermin, MYSQLI_STORE_RESULT);
			if($resultTermin !== false && $resultTermin->num_rows > 0) {
       			  while($rowT = $resultTermin->fetch_object()) {
			echo $sqlTermin;*/
        if ($boolTermin) {


            $sqlQP = "INSERT INTO `mutasi_qty_price` (mutasi_detail_id, termin, qtyInvoice,ppnId,pphId,ppnAmt,pphAmt,qtyEstimasi) VALUES {$mutasiValue}";
            $resultQP = $myDatabase->query($sqlQP, MYSQLI_STORE_RESULT);
            if ($resultQP !== false) {

                $mutasiPrice = $myDatabase->insert_id;

                $boolTax = false;

                $sqlCek = "SELECT * FROM mutasi_qty_price WHERE mutasi_detail_id = {$dataCek}";
                $resultCek = $myDatabase->query($sqlCek, MYSQLI_STORE_RESULT);
                if ($resultCek !== false && $resultCek->num_rows > 0) {
                    while ($rowCek = $resultCek->fetch_object()) {

                        $boolTax = true;

                    }
                }

                if ($boolTax) {
                    $whereProperty = "AND aa.id != {$mutasiPrice}";
                } else {
                    $whereProperty = "";
                }
            }
            //echo $sqlQP ;

                $_SESSION['mutasiDetail'] = $mutasiChecked;

            $sql1 = "SELECT a.*, c.termin, c.qtyInvoice, c.id, c.ppnId AS ppnIdInvoice, c.pphId AS pphIdInvoice, IFNULL(d.tax_value,0) AS pphinvoice, IFNULL(e.tax_value,0) AS ppninvoice, (a.price * c.qtyInvoice) AS amount1234, (a.price * c.qtyInvoice) AS amount2,
(IFNULL((SELECT SUM(a.price * aa.qtyInvoice) FROM mutasi_qty_price aa WHERE aa.mutasi_detail_id = a.mutasi_detail_id ),0)) AS amount,
 (((a.total_per_termin + a.ppn_converted) - a.pph_converted) - 
 ((IFNULL((SELECT SUM(a.price * aa.qtyInvoice) FROM mutasi_qty_price aa WHERE aa.mutasi_detail_id = a.mutasi_detail_id ),0)) + 
 (IFNULL((SELECT SUM(aa.ppnAmt) FROM mutasi_qty_price aa WHERE aa.mutasi_detail_id = a.mutasi_detail_id ),0)))+ 
 (IFNULL((SELECT SUM(aa.pphAmt) FROM mutasi_qty_price aa WHERE aa.mutasi_detail_id = a.mutasi_detail_id ),0))) AS availableAmount, 
(SELECT SUM(termin) FROM mutasi_qty_price WHERE  mutasi_detail_id = a.mutasi_detail_id) AS terminTotal,
(IFNULL((SELECT SUM(aa.ppnAmt) FROM mutasi_qty_price aa WHERE aa.mutasi_detail_id = a.mutasi_detail_id {$whereProperty}),0)) AS ppnAmount,
(IFNULL((SELECT SUM(aa.pphAmt) FROM mutasi_qty_price aa WHERE aa.mutasi_detail_id = a.mutasi_detail_id {$whereProperty}),0)) AS pphAmount,
(IFNULL((SELECT SUM(aa.ppnAmt) FROM mutasi_qty_price aa WHERE aa.mutasi_detail_id = a.mutasi_detail_id),0)) AS ppnAmount2,
(IFNULL((SELECT SUM(aa.pphAmt) FROM mutasi_qty_price aa WHERE aa.mutasi_detail_id = a.mutasi_detail_id),0)) AS pphAmount2,
(SELECT stockpile_from FROM mutasi_header WHERE mutasi_header_id = a.mutasi_header_id GROUP BY a.mutasi_header_id) AS stockpileId2,
(a.price * (IFNULL((SELECT SUM(aa.qtyInvoice) FROM mutasi_qty_price aa WHERE aa.mutasi_detail_id = a.mutasi_detail_id ),0))) AS updateTotal, c.qtyEstimasi
FROM mutasi_detail a
				LEFT JOIN termin_detail b ON a.termin_detail_id = b.id 
				LEFT JOIN mutasi_qty_price c ON c.mutasi_detail_id = a.mutasi_detail_id
				LEFT JOIN tax d ON c.`pphId` = d.`tax_id`
				LEFT JOIN tax e ON c.`ppnId` = e.`tax_id`
				WHERE a.mutasi_detail_id IN ({$mutasiChecked}) AND c.invoice_detail_id IS NULL";
            $result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
            if ($result1 !== false && $result1->num_rows > 0) {
                while ($row1 = $result1->fetch_object()) {

                    $id = $row1->id;
                    $mutasiDetailId = $row1->mutasi_detail_id;
                    $availableAmount = $row1->availableAmount;
                    $qty = $row1->qtyInvoice;
					$uom = $row1->uom;
                    $price = $row1->price;
                    $termin = $row1->termin;
                    $terminTotal = $row1->terminTotal;
                    $amount = $row1->amount;
                    $amount2 = $row1->amount2;
                    $generalVendorId = $row1->general_vendor_id;
                    $ppnID = $row1->ppnIdInvoice;
                    $pphID = $row1->pphIdInvoice;
                    $ppn2 = $row1->ppnAmount2 - $row1->ppnAmount;
                    $pph2 = $row1->pphAmount2 - $row1->pphAmount;
                    $stockpileId2 = $row1->stockpileId2;
                    $updateTotal = $row1->updateTotal;
                    $qtyEstimasi = $row1->qtyEstimasi;

                    //$notes = $row1->biaya;
                    $dp_total = 0;
                    $dpAmount = 0;
                    $invoiceType = 4;
                    $accountId = $row1->account_id;
                    $invoiceMethodDetail = 1;
                    $mutasiHeaderId = $row1->mutasi_header_id;


                    $t_amount = $amount2 + $ppn2 - $pph2;
                    $tamount = $t_amount - $dp_total;
                    $amountConverted = $exchangeRate * $amount2;
                    $ppnConverted = $exchangeRate * $ppn2;
                    $pphConverted = $exchangeRate * $pph2;
                    $tamountConverted = $exchangeRate * $tamount;


                    if ($termin == 100 && $qtyEstimasi == 0 /*|| $availableAmount == 0*/) {
                        $sqlM = "UPDATE mutasi_detail SET status = 1 WHERE mutasi_detail_id = {$mutasiDetailId}";
                        $resultM = $myDatabase->query($sqlM, MYSQLI_STORE_RESULT);

                        $sqlMA = "SELECT * FROM mutasi_detail WHERE status = 0 AND mutasi_detail_id = {$mutasiDetailId}";
                        $resultMA = $myDatabase->query($sqlMA, MYSQLI_STORE_RESULT);
                        if ($resultMA->num_rows == 0) {
                            $rowMA = $resultMA->fetch_object();

                            //$poId = $row->poId;

                            $sqldp = "UPDATE mutasi_detail SET "
                                . "total_per_termin = {$updateTotal} "
                                . " WHERE mutasi_detail_id = {$mutasiDetailId}";
                            $resultdp = $myDatabase->query($sqldp, MYSQLI_STORE_RESULT);

                            $sqlCC = "SELECT SUM(total_per_termin) AS total FROM mutasi_detail WHERE mutasi_header_id = {$mutasiHeaderId}";
                            $resultCC = $myDatabase->query($sqlCC, MYSQLI_STORE_RESULT);
                            if ($resultCC->num_rows == 1) {
                                $rowCC = $resultCC->fetch_object();

                                $total = $rowCC->total;

                                $sqldd = "UPDATE mutasi_header SET "
                                    . "total = {$total} "
                                    . " WHERE mutasi_header_id = {$mutasiHeaderId}";
                                $resultdd = $myDatabase->query($sqldd, MYSQLI_STORE_RESULT);

                            }


                        }

                    }

                    echo $sql1;


                    $sql = "INSERT INTO `invoice_detail` (invoice_method_detail, type, account_id, poId, general_vendor_id, shipment_id, stockpile_remark, qty, price, termin, amount, amount_converted, currency_id, exchange_rate, ppnID, ppn, ppn_converted, pphID, pph, pph_converted, tamount, tamount_converted, dp_amount, notes, entry_by, entry_date, mutasi_detail_id,idUOM) VALUES ("
                        . "{$invoiceMethodDetail}, {$invoiceType}, {$accountId}, {$poId}, {$generalVendorId}, {$shipmentId1}, {$stockpileId2}, '{$qty}', '{$price}', '{$termin}', '{$amount2}', '{$amountConverted}', {$currencyId}, '{$exchangeRate}', {$ppnID} ,'{$ppn2}', '{$ppnConverted}', {$pphID}, '{$pph2}', '{$pphConverted}', '{$tamount}', '{$tamountConverted}', '{$dpAmount}', '{$notes}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$mutasiDetailId},{$uom})";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    //echo $sql;
                    if ($result !== false) {
                        $invoiceId = $myDatabase->insert_id;

                        $sqlN = "UPDATE mutasi_qty_price SET invoice_detail_id = {$invoiceId} WHERE id = {$id}";
                        $resultN = $myDatabase->query($sqlN, MYSQLI_STORE_RESULT);

                        $return_value = '|OK|Data has successfully inserted.|' . $invMethod; //$invMethod jgn dihapus.
                        //echo $sqlN;
                        insertGeneralLedger($myDatabase, 'INVOICE DETAIL', $invoiceId);

                    } else {
                        echo $sql;
                    }

                }

            }
        } else {
            $return_value = '|FAIL|Termin lebih dari 100%||';
            //break;
        }
        //}
        //}
    } else {

        if ($boolVendor) {
			
			if($currencyId == 1){
                $exchangeRate = 1;
            }

            if ($invoiceType != '' && $accountId != '' && $qty != '' && $price != '' && $termin != '' && $amount != '' && $currencyId != '' && $boolShipment1 && $boolPO) {
                $t_amount = $amount2 + $ppn2 - $pph2;
                $tamount = $t_amount - $dp_total;
                $amountConverted = $exchangeRate * $amount2;
                $ppnConverted = $exchangeRate * $ppn2;
                $pphConverted = $exchangeRate * $pph2;
                $tamountConverted = $exchangeRate * $tamount;

                if ($invoiceMethodDetail == 2) {
                    $dpAmount = $tamountConverted;
                } else {
                    $dpAmount = 0;
                }

                /*if (isset($_POST['checkedSlips'])) {
                    $checks = $_POST['checkedSlips'];
                    for ($i = 0; $i < sizeof($checks); $i++) {
                        if($slipNos == '') {
                            $slipNos .= $checks[$i];
                        } else {
                            $slipNos .= ','. $checks[$i];
                        }
                    }
                }*/
				if($boolNew){
					
                $sql = "INSERT INTO `invoice_detail` (invoice_method_detail, type, account_id, poId, general_vendor_id, shipment_id, stockpile_remark, qty, price, termin, amount, amount_converted, currency_id, exchange_rate, ppnID, ppn, ppn_converted, pphID, pph, pph_converted, tamount, tamount_converted, dp_amount, notes, entry_by, entry_date,idUOM) VALUES ("
                    . "{$invoiceMethodDetail}, {$invoiceType}, {$accountId}, {$poId}, {$generalVendorId}, {$shipmentId1}, {$stockpileId2}, '{$qty}', '{$price}', '{$termin}', '{$amount2}', '{$amountConverted}', {$currencyId}, '{$exchangeRate}', {$ppnID} ,'{$ppn2}', '{$ppnConverted}', {$pphID}, '{$pph2}', '{$pphConverted}', '{$tamount}', '{$tamountConverted}', '{$dpAmount}', '{$notes}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$uom})";
					
				}else{
                    
                    $bool1 = true;
                    $sqlA = "SELECT poId AS po_id FROM invoice_detail WHERE invoice_detail_id = {$invoiceDetailId}";
                    $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                    //echo $sqlA;
                    if ($resultA !== false && $resultA->num_rows >= 1) {
                        while ($rowA = $resultA->fetch_object()) {
                            $po_id = $rowA->po_id ;
                            
                           if ($po_id == $poId) {
                            $bool1 = false;
                           } 
                        }
                    } 
                    
                    

                    $sql = "UPDATE `invoice_detail` SET "
                        . "invoice_method_detail = {$invoiceMethodDetail}, "
                        . "type = {$invoiceType}, "
                        . "account_id = {$accountId}, "
                        . "poId = {$poId}, "
                        . "general_vendor_id = '{$generalVendorId}', "
                        . "shipment_id = {$shipmentId1}, "
                        . "stockpile_remark = {$stockpileId2}, "
                        . "qty = '{$qty}', "
                        . "price = '{$price}', "
                        . "termin = '{$termin}', "
                        . "amount = '{$amount2}', "
                        . "amount_converted = '{$amountConverted}', "
                        . "currency_id = '{$currencyId}', "
                        . "exchange_rate = '{$exchangeRate}', "
                        . "ppnID = '{$ppnID}', "
                        . "ppn = '{$ppn2}', "
                        . "ppn_converted = '{$ppnConverted}', "
                        . "pphID = '{$pphID}', "
                        . "pph = '{$pph2}', "
                        . "pph_converted = '{$pphConverted}', "
                        . "tamount = '{$tamount}', "
                        . "tamount_converted = '{$tamountConverted}', "
                        . "dp_amount = '{$dpAmount}', "
                        . "notes = '{$notes}', "
                        . "entry_by = {$_SESSION['userId']}, "
                        . "entry_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), "
                        . "idUOM = '{$uom}' "
                        . "WHERE invoice_detail_id = {$invoiceDetailId}";
                }
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false) {
                    
					 if($boolNew){
                        $invoiceId = $myDatabase->insert_id;
                    }else{
                        $invoiceId = $invoiceDetailId;
                    }

                    $return_value = '|OK|Data has successfully inserted.|' .$invMethod; //$invMethod jangan dihapus
                    //$checks2 = 0;
                    if ($poId != 'NULL' && $bool1) {
                           
                    $sql = "UPDATE `contract` SET open_po = (open_po - 1) WHERE contract_id = {$poId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                               
                    }

                    /*if (isset($_POST['checkedSlips']) && isset($_POST['checkedSlips'])) {
                    $checks2 = $_POST['checkedSlips2'];
					$checks = $_POST['checkedSlips'];*/

                    if (isset($_POST['checkedSlips2'])) {
                        $checks2 = $_POST['checkedSlips2'];
                        if (isset($_POST['checkedSlips3'])) {
                            $checks3 = $_POST['checkedSlips3'];
                    
                        if (isset($_POST['checkedSlips'])) {
                            $checks = $_POST['checkedSlips'];
                        } else {
                            $checks = '';
                        }
                    
		
					
                        for ($i = 0; $i < sizeof($checks2); $i++) {
                            if ($checks[$i] != '') {
                                if ($slipNos2 == '') {
                                    $slipNos2 .= '(' . $invoiceId . ',' . $checks[$i] . ',' . $checks2[$i] . ')';
                                } else {
                                    $slipNos2 .= ',' . '(' . $invoiceId . ',' . $checks[$i] . ',' . $checks2[$i] . ')';
                                }

                                if ($slipNos3 == '') {
                                    $slipNos3 .= $checks3[$i];
                                } else {
                                    $slipNos3 .= ',' .$checks3[$i];	
                                }


                            }
                        }
                        }
                }
					
					 $sql = "UPDATE invoice_dp SET `status` = 1 WHERE invoice_dp IN ($slipNos3)";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
					
                    echo $slipNos2;
                    $sql = "INSERT INTO invoice_dp (invoice_detail_id, invoice_detail_dp, amount_payment) VALUES {$slipNos2}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($result === false) {
                        echo 'salah';
                    }

                    insertGeneralLedger($myDatabase, 'INVOICE DETAIL', $invoiceId);

                } else {
                    $return_value = '|FAIL|Insert Data failed.||';
                    //echo $sql;
                }

            } else {
                $return_value = '|FAIL|Please fill the required fields.||';
            }
        } else {
            $return_value = '|FAIL|Please Choose Same Vendor.||';
        }
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_invoice_detail') {
    // <editor-fold defaultstate="collapsed" desc="delete_invoice_detail">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $invoiceDetailId = $myDatabase->real_escape_string($_POST['invoiceDetailId']);
    // </editor-fold>

    if ($invoiceDetailId != '') {
        $sql = "UPDATE invoice_detail SET invoice_detail_dp = NULL, invoice_detail_status = 0 WHERE invoice_detail_dp = {$invoiceDetailId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "SELECT poId FROM invoice_detail WHERE invoice_detail_id = {$invoiceDetailId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result->num_rows == 1) {
            $row = $result->fetch_object();
            $poId = $row->poId;

            $sqldp = "UPDATE `contract` SET open_po = (open_po + 1) WHERE contract_id = {$poId}";
            $resultdp = $myDatabase->query($sqldp, MYSQLI_STORE_RESULT);
        }

        $sqla = "SELECT mutasi_detail_id FROM invoice_detail WHERE invoice_detail_id = {$invoiceDetailId}";
        $resulta = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);
        if ($resulta->num_rows == 1) {
            $rowa = $resulta->fetch_object();
            $mutasi_detail_id = $rowa->mutasi_detail_id;

            $sqlM = "UPDATE mutasi_detail SET status = 0 WHERE mutasi_detail_id = {$mutasi_detail_id}";
            $resultM = $myDatabase->query($sqlM, MYSQLI_STORE_RESULT);

            $sqlb = "DELETE FROM `mutasi_qty_price` WHERE mutasi_detail_id = {$mutasi_detail_id} AND invoice_detail_id = {$invoiceDetailId}";
            $resultb = $myDatabase->query($sqlb, MYSQLI_STORE_RESULT);
        }
        echo $sqla;
        echo $sqlb;
        echo 'a';
        echo $invoiceDetailId;

        $sql = "DELETE FROM `invoice_detail` WHERE invoice_detail_id = {$invoiceDetailId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|User has successfully deleted.|';
            echo 'a';
            echo $invoiceDetailId;
            echo $sqla;
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'invoice_data') {
    // <editor-fold defaultstate="collapsed" desc="invoice_data">

    $return_value = '';
    $addMessage = '';
    $boolNew = false;
    $boolContinue = true;
    $boolUpdate = false;
    $boolUpdateInvoice = false;
    $boolUpdateInvoiceDetail = false;
    $boolInsertVendor = false;
    $boolVendorExists = false;
    $boolRecalculate = false;
    $boolPriceUp = false;
    $boolPriceDown = false;
    $boolQuantityUp = false;
    $boolQuantityDown = false;
	$boolIinvoiceVendor = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $invoiceId = $myDatabase->real_escape_string($_POST['invoiceId']);
    $invoiceType = $myDatabase->real_escape_string($_POST['invoiceType']);
    //$accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $invoiceMethod = $myDatabase->real_escape_string($_POST['invoiceMethod']);
    $invoiceDP = $myDatabase->real_escape_string($_POST['invoice_dp']);
    $generatedInvoiceNo = $myDatabase->real_escape_string($_POST['generatedInvoiceNo']);
    ///$invoiceNo = $generatedInvoiceNo;
    $invoiceNo2 = $myDatabase->real_escape_string($_POST['generatedInvoiceNo2']);
    $grandTotal = $myDatabase->real_escape_string($_POST['grandTotal']);
    //$generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId']);
    $stockpileContractId3 = $myDatabase->real_escape_string($_POST['stockpileContractId3']);
    //$shipmentId1 = $myDatabase->real_escape_string($_POST['shipmentId1']);
    $invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
    $inputDate = $myDatabase->real_escape_string($_POST['inputDate']);
    $requestDate = $myDatabase->real_escape_string($_POST['requestDate']);
    $taxDate = $myDatabase->real_escape_string($_POST['taxDate']);
    $invoiceTax = $myDatabase->real_escape_string($_POST['invoiceTax']);
    //$ppnID = $myDatabase->real_escape_string($_POST['ppnID']);
    //$ppn1 = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn1']));
    //$ppn2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn2']));
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    //$ppnConverted = $ppn;
    //$pphID = $myDatabase->real_escape_string($_POST['pphID']);
    //$pph1 = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph1']));
    //$pph2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph2']));
    //$dppPrice = $myDatabase->real_escape_string($_POST['dppPrice']);
    //$currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
		$pengajuanNo = $myDatabase->real_escape_string($_POST['pengajuanNo']);

    //$exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    //$price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    //$quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    $amount = $grandTotal;
    $amountConverted = $grandTotal;
    $amount_ori = $grandTotal;
    $amount_ori_conv = $grandTotal;

    // </editor-fold>
    if ($stockpileContractId3 == '') {
        $stockpileContractId3 = 'NULL';
    }
    if ($invoiceDP == 0) {
        $invoiceDP = 'NULL';
    }
    if ($shipmentId1 == '') {
        $shipmentId1 = 'NULL';
    }
    if ($price == '') {
        $price = 'NULL';
    }
    if ($quantity == '') {
        $quantity = 'NULL';
    }


    if ($invoiceId == '' || $invoiceId == 0 || $invoiceId == 'NULL') {
        $boolNew = true;
        // if($stockpileId == '') {
        //   $boolContinue = false;
        //}
    }

    $sql = "SELECT invoice_detail_id FROM invoice_detail WHERE invoice_id IS NULL AND entry_by = {$_SESSION['userId']} LIMIT 1";
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($result !== false && $result->num_rows == 1) {
        $row = $result->fetch_object();

        $invoice_detail_id = $row->invoice_detail_id;
		
    }
	
$sql = "SELECT invoice_no2 FROM invoice WHERE payment_status != 2 invoice_no2 = '{$invoiceNo2}' LIMIT 1";
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($result !== false && $result->num_rows == 1) {
        $row = $result->fetch_object();

        if($invoiceNo2 == $row->invoice_no2 && $row->invoice_no2 != '-' && $row->invoice_no2 != ''){
			$boolIinvoiceVendor = false;
		}
    }
	
	
    if ($invoice_detail_id != '' && $boolContinue) {
	if($boolIinvoiceVendor){
        if ($exchangeRate == '') {
            $exchangeRate = 1;
        }

        if ($grandTotal <= 0) {
            $boolContinue = true;

        }

        if ($boolContinue) {
            //closingDate
            $newInvoiceDate = implode("-", array_reverse(explode("/", $invoiceDate)));
            $checkClosingDate = explode('-', closingDate($newInvoiceDate, 'Invoice - Invoice'));
            $boolClosing = $checkClosingDate[0];
            $closingDate = $checkClosingDate[1];

            if (!$boolClosing) {
                $return_value = $closingDate;
                echo $return_value;
            } else {

                if ($boolNew) {
                    $sql = "select DATE_FORMAT(STR_TO_DATE('{$inputDate}', '%d/%m/%Y'), '%y%m') AS slip_prefix from dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $rowSlip = $resultSlip->fetch_object();
                    $invoiceYearMonth = $rowSlip->slip_prefix;


                    $checkInvoiceNo = 'INV/JPJ/' . $invoiceYearMonth;

                    $sql = "SELECT invoice_no FROM invoice WHERE company_id = {$_SESSION['companyId']} AND invoice_no LIKE '{$checkInvoiceNo}%' ORDER BY invoice_id DESC LIMIT 1";
                    $resultInvoice = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultInvoice->num_rows == 1) {
                        $rowInvoice = $resultInvoice->fetch_object();
                        $splitInvoiceNo = explode('/', $rowInvoice->invoice_no);
                        $lastExplode = count($splitInvoiceNo) - 1;
                        $nextInvoiceNo = ((float)$splitInvoiceNo[$lastExplode]) + 1;
                        $invoiceNo = $checkInvoiceNo . '/' . $nextInvoiceNo;
                    } else {
                        $invoiceNo = $checkInvoiceNo . '/1';

                    }

                    if ($grandTotal > 0) {
                        $boolUpdateInvoice = true;

                        //$pph = $pph1;
                        //$ppn = $ppn1;
                    }
					if($_SESSION['mutasiDetail'] != ''){
                            //cek register date mutasi detail
                        $sqlCek = "SELECT * From mutasi_detail where mutasi_detail_id in ({$_SESSION['mutasiDetail']})";
                        $resultCek = $myDatabase->query($sqlCek, MYSQLI_STORE_RESULT);
                        echo $sqlCek;
//                        if ($resultCek !== false && $resultCek->num_rows > 0) {
                            while ($rowCek = $resultCek->fetch_object()) {
                                $registerDate = $rowCek->register_date;
                                if ($newInvoiceDate >= $registerDate) {
                                    $sql = "INSERT INTO `invoice` (invoice_date, input_date, request_date, tax_date, invoice_method, stockpileId, invoice_no, invoice_no2, invoice_tax, remarks,"
                                        . "po_id, company_id, entry_by, entry_date) VALUES ("
                                        . "STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), STR_TO_DATE('{$inputDate}', '%d/%m/%Y'), STR_TO_DATE('{$requestDate}', '%d/%m/%Y'), STR_TO_DATE('{$taxDate}', '%d/%m/%Y'), {$invoiceMethod},  {$stockpileId}, '{$invoiceNo}', '{$invoiceNo2}', '{$invoiceTax}', '{$remarks}',"
                                        . "{$stockpileContractId3}, {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                    unset($_SESSION['mutasiDetail']);
                                } else {
                                    unset($_SESSION['mutasiDetail']);
                                    $return_value = '|FAIL|Invoice date is older than the register mutation date.|';
                                    echo $return_value;
                                    die();
                                }
//                            }
                        }
                            } else {
                                $sql = "INSERT INTO `invoice` (invoice_date, input_date, request_date, tax_date, invoice_method, stockpileId, invoice_no, invoice_no2, invoice_tax, remarks,"
                                    . "po_id, company_id, entry_by, entry_date) VALUES ("
                                    . "STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), STR_TO_DATE('{$inputDate}', '%d/%m/%Y'), STR_TO_DATE('{$requestDate}', '%d/%m/%Y'), STR_TO_DATE('{$taxDate}', '%d/%m/%Y'), {$invoiceMethod},  {$stockpileId}, '{$invoiceNo}', '{$invoiceNo2}', '{$invoiceTax}', '{$remarks}',"
                                    . "{$stockpileContractId3}, {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            }
                    } else {


                    if ($grandTotal > 0) {
                        $boolUpdateInvoice = true;
                        //$pph = $pph1 ;
                        //$ppn = $ppn1;
                    }

                    $sql = "UPDATE `invoice` SET "
                        . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                        . "invoice_method = {$invoiceMethod}, "
                        . "invoice_dp = {$invoiceDP}, "
                        . "stockpileId = '{$stockpileId}', "
                        . "invoice_no = '{$invoiceNo}', "
                        . "invoice_no2 = '{$invoiceNo2}', "
                        . "invoice_tax = '{$invoiceTax}', "
                        . "general_vendor_id = {$generalVendorId}, "
                        . "po_id = {$stockpileContractId3}, "
                        . "shipmentId = {$shipmentId1}, "
                        . "price = {$price}, "
                        . "remarks = '{$remarks}' "
                        . "WHERE invoice_id = {$invoiceId}";
                }
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false) {
                    if ($boolNew) {
                        $invoiceId = $myDatabase->insert_id;
						
						//ADD BY YENI
						$sql = "UPDATE `pengajuan_general` SET invoice_id = {$invoiceId}, status_pengajuan = 1 WHERE pengajuan_general_id = {$pengajuanNo}";
						$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
						
						
						$sql = "UPDATE `logbook_new` SET inv_general_id = {$invoiceId} WHERE pgeneral_id = {$pengajuanNo}";
						$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }


                    $return_value = '|OK|Invoice has successfully inserted/updated.' . $addMessage . '|' . $invoiceId . '|';

                    $sql = "UPDATE `invoice_detail` SET invoice_id = {$invoiceId} WHERE invoice_id IS NULL AND entry_by = {$_SESSION['userId']}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


                    $sqlA = "SELECT invoice_detail_id FROM invoice_detail
                                WHERE invoice_id = {$invoiceId}";
                    $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                    if ($resultA !== false && $resultA->num_rows >= 1) {
                        while ($rowA = $resultA->fetch_object()) {

                            $invoiceId = $rowA->invoice_detail_id;

                            insertReportGL($myDatabase, 'INVOICE DETAIL', $invoiceId);

                        }
                    }
                    /*
			if($boolUpdateInvoice){
				$sql = "UPDATE `invoice` SET invoice_dp = {$invoiceId} WHERE invoice_id IN ($slipNos)";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

				$sql = "UPDATE `invoice` SET invoice_status = 1 WHERE invoice_id IN ($slipNos)";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			}*/

                    //  insertGeneralLedger($myDatabase, 'INVOICE', $invoiceId);

                    unset($_SESSION['invoice']);
                } else {
                    $return_value = '|FAIL|Insert/update invoice failed.' . $sql . '||';

                }
            }
        } else {
            $return_value = '|FAIL|Please insert correct amount.' . $addMessage . '||';
        }
    } else {
        $return_value = '|FAIL|Invoice Vendor No. Already Exists.' . $addMessage . '||';
    }
	} else {
        $return_value = '|FAIL|Please fill the required fields.' . $addMessage . '||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_invoice') {
    // <editor-fold defaultstate="collapsed" desc="delete_invoice">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $invoiceId = $myDatabase->real_escape_string($_POST['invoiceId']);
    // </editor-fold>

    if ($invoiceId != '') {

        $sql = "UPDATE `invoice` SET invoice_status = 0 WHERE invoice_dp = {$invoiceId} AND invoice_method = 2";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $sql = "UPDATE `invoice_detail` SET invoice_detail_status = 0 WHERE invoice_id = {$invoiceId} AND invoice_method_detail = 2";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "DELETE FROM `invoice` WHERE invoice_id = {$invoiceId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


        if ($result !== false) {
            $return_value = '|OK|Invoice has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete invoice failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'return_invoice') { //
    // <editor-fold defaultstate="collapsed" desc="return_invoice">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $invoice_Id = $myDatabase->real_escape_string($_POST['invoiceId']);
    $returnInvoiceDate = $myDatabase->real_escape_string($_POST['returnInvoiceDate']);

    $dateTrans = str_replace("/", "-", $myDatabase->real_escape_string($_POST['returnInvoiceDate']));
    $dt = date('Y-m-d', strtotime($dateTrans));
    $date2 = new DateTime($dt);
    $newDate = $date2->format('Y-m-d');
    // </editor-fold>

    $sql = "SELECT stockpileId FROM invoice WHERE invoice_id = {$invoice_Id}";
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($result !== false && $result->num_rows == 1) {
        $row = $result->fetch_object();
        $stockpileId = $row->stockpileId;
    }

    //closingDate

    $checkClosingDate = explode('-', closingDate($newDate, 'Invoice - Return Invoice'));
    $boolClosing = $checkClosingDate[0];
    $closingDate = $checkClosingDate[1];
	
    if ($invoice_Id != '') {

        $sql = "SELECT DATE_FORMAT(invoice_date,'%Y-%m-%d') AS invoiceDate FROM invoice WHERE invoice_id = {$invoice_Id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();

            $invoiceDate = $row->invoiceDate;

        }

        if (!$boolClosing) {
            $return_value = $closingDate;
            echo $return_value;
        } else {
            if ($invoiceDate <= $newDate) {

                $sql = "UPDATE invoice SET "
                    . "payment_status = 2, "
                    . "invoice_status = 1, "
                    . "sync_by = {$_SESSION['userId']}, "
                    . "sync_date = STR_TO_DATE('$returnInvoiceDate', '%d/%m/%Y %H:%i:%s'), "
                    . "exec_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                    . " WHERE invoice_id = {$invoice_Id}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


                if ($result !== false) {
                    $return_value = '|OK|Invoice has successfully returned.|' . $invoice_Id . '|';

                    $sqlC = "SELECT invoice_detail_id, mutasi_detail_id FROM invoice_detail
                                WHERE invoice_id = {$invoice_Id}";
                    $resultC = $myDatabase->query($sqlC, MYSQLI_STORE_RESULT);
                    if ($resultC !== false && $resultC->num_rows >= 1) {
                        while ($rowC = $resultC->fetch_object()) {
                            $invoice_detail_id = $rowC->invoice_detail_id;
                            $mutasi_detail_id = $rowC->mutasi_detail_id;
							$invoiceId = $rowC->invoice_detail_id;

                            $sql = "UPDATE `mutasi_detail` SET status = 0 WHERE mutasi_detail_id = {$mutasi_detail_id}";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                            $sql = "DELETE FROM mutasi_qty_price WHERE invoice_detail_id = {$invoice_detail_id}";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                            $sql = "UPDATE `contract` SET invoice_status = 0 WHERE contract_id = {$poId}";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
							
							insertGeneralLedger($myDatabase, 'RETURN INVOICE', $invoiceId);
							insertReportGL($myDatabase, 'RETURN INVOICE', $invoiceId);

//add by yeni
					$sqlU = "UPDATE pengajuan_general set invoice_id = NULL where invoice_id = {$invoice_Id}";
					$resultU = $myDatabase->query($sqlU, MYSQLI_STORE_RESULT);


                        }
                    }

                    $sql = "SELECT GROUP_CONCAT(a.invoice_detail_id) AS invoice_detail_id , b.sa_id, b.sa_id_non FROM invoice_detail a
                    LEFT JOIN invoice b ON a.`invoice_id` = b.`invoice_id` WHERE a.invoice_id = {$invoice_Id}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($result->num_rows == 1) {
                        $row = $result->fetch_object();
                        $invoiceId = $row->invoice_detail_id;

                        $sqldp = "UPDATE invoice_dp SET "
                            . "status = 1 "
                            . " WHERE invoice_detail_id IN ({$invoiceId})";
                        $resultdp = $myDatabase->query($sqldp, MYSQLI_STORE_RESULT);
						
						 if($row->sa_id != ''){

                            $sqlp = "UPDATE perdin_adv_settle SET "
                            . "invoice_status = 0 "
                            . " WHERE sa_id = {$row->sa_id}";
                        $resultp = $myDatabase->query($sqlp, MYSQLI_STORE_RESULT);

                        }elseif($row->sa_id_non != ''){
                             $sqlp = "UPDATE non_adv_settle SET "
                            . "invoice_status = 0 "
                            . " WHERE sa_id = {$row->sa_id_non}";
                        $resultp = $myDatabase->query($sqlp, MYSQLI_STORE_RESULT);
                        }
                    }

                    //insertGeneralLedger($myDatabase, 'RETURN INVOICE', $invoiceId);
                    //insertReportGL($myDatabase, 'RETURN INVOICE', $invoiceId);
					
					
                } else {
                    $return_value = '|FAIL|Returned invoice failed.|';
                }
            } else {
                $return_value = '|FAIL|Tanggal retur harus sama/melebihi tanggal transaksi.|';
            }
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    } 

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'reject_po_pks') {
    // <editor-fold defaultstate="collapsed" desc="delete_po_pks">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $po_pks_id = $myDatabase->real_escape_string($_POST['po_pks_id']);
    // </editor-fold>

    if ($po_pks_id != '') {
        $sql = "UPDATE po_pks SET contract_no = CONCAT(contract_no,'-REJECTED'),
		spb_no = CONCAT(spb_no,'-REJECTED'),reject_status = 1  WHERE po_pks_id = {$po_pks_id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Contract has successfully rejected.|';
        } else {
            $return_value = '|FAIL|reject contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_po_pks') {
    // <editor-fold defaultstate="collapsed" desc="delete_po_pks">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $po_pks_id = $myDatabase->real_escape_string($_POST['po_pks_id']);
    // </editor-fold>

    if ($po_pks_id != '') {
        $sql = "DELETE FROM `po_pks` WHERE po_pks_id = {$po_pks_id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Contract has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'po_pks_data') {
    // <editor-fold defaultstate="collapsed" desc="po_pks_data">

    $return_value = '';
    $addMessage = '';
    $boolNew = false;
    $boolContinue = true;
    $boolUpdate = false;
    $boolInsertVendor = false;
    $boolVendorExists = false;
    //$boolContractExists = false;
    $boolRecalculate = false;
    $boolPriceUp = false;
    $boolPriceDown = false;
    $boolQuantityUp = false;
    $boolQuantityDown = false;
	$temp_price = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $po_pks_id = $myDatabase->real_escape_string($_POST['po_pks_id']);
    //$contractType = $myDatabase->real_escape_string($_POST['contractType']);
    $contractNo = $myDatabase->real_escape_string($_POST['contractNo']);
    $spbNo = $myDatabase->real_escape_string($_POST['spbNo']);
    //$contractSeq = $myDatabase->real_escape_string($_POST['contractSeq']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    //$vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    //$vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    //$vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    //$npwp = $myDatabase->real_escape_string($_POST['npwp']);
    //$ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $contract = $myDatabase->real_escape_string($_POST['contract']);
    $spb = $myDatabase->real_escape_string($_POST['spb']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $notes2 =  $myDatabase->real_escape_string($_POST['notes2']);

    $finalStatus = $myDatabase->real_escape_string($_POST['finalStatus']);
    $status_ho = $myDatabase->real_escape_string($_POST['ho']);

    // </editor-fold>

    /*if($vendorId == 'INSERT') {
        if($vendorCode != '' && $vendorName != '' && $vendorAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$vendorCode}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($result !== false && $result->num_rows > 0) {
                $boolVendorExists = true;
                $addMessage = ' Vendor already exists.';
            } elseif($result !== false && $result->num_rows == 0) {
                $ppnValue = 0;
                $pphValue = 0;

                $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
                $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
                if($resultPPN !== false && $resultPPN->num_rows == 1) {
                    $rowPPN = $resultPPN->fetch_object();
                    $ppnValue = $rowPPN->tax_value;
                }

                $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
                $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                if($resultPPh !== false && $resultPPh->num_rows == 1) {
                    $rowPPh = $resultPPh->fetch_object();
                    $pphValue = $rowPPh->tax_value;
                }

                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                        . "UPPER('{$vendorCode}'), '{$vendorName}', '{$vendorAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $vendorId = $myDatabase->insert_id;
                    $boolInsertVendor = true;
                }
            }
        } else {
            $boolInsertVendor = false;
        }
    } else {
        $boolInsertVendor = true;
    }
    */
    if ($po_pks_id == '') {
        $boolNew = true;

    }

    if ($contract != '' && $spb != '') {
        $purchasingId = $contract;
    } elseif ($contract != '' && $spb == '') {
        $purchasingId = $contract;
    } elseif ($contract == '' && $spb != '') {
        $purchasingId = $spb;
    }

    if ($vendorId != '' && $currencyId != '' && $price != '' && $quantity != '' && $stockpileId != '' && $contractNo != '' && $spbNo != '' && $purchasingId != '') {

        if ($exchangeRate == '') {
            $exchangeRate = 1;
        }

        $priceConverted = $price * $exchangeRate;

        if ($boolNew) {
            $sql = "SELECT * FROM `po_pks` WHERE UPPER(contract_no) = UPPER('{$contractNo}')";
        } else {
            $sql = "SELECT * FROM `po_pks` WHERE UPPER(contract_no) = UPPER('{$contractNo}') AND po_pks_id <> {$po_pks_id}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {

            if ($boolNew) {

                $sql = "INSERT INTO `po_pks` (contract_no, spb_no, stockpile_id, vendor_id, currency_id, exchange_rate, price, price_converted, "
                    . "quantity, notes, company_id, entry_by, entry_date, purchasing_id,final_status, notes2) VALUES ("
                    . "'{$contractNo}', '{$spbNo}', {$stockpileId}, {$vendorId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, "
                    . "{$quantity}, '{$notes}', {$_SESSION['companyId']}, {$_SESSION['userId']},
                     STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),  {$purchasingId},{$finalStatus},  '{$notes2}')";

            } else {

                $boolUpdate = true;
                $sqlp2 = "SELECT * FROM po_pks WHERE po_pks_id = {$po_pks_id}";
                $resultp2 = $myDatabase->query($sqlp2, MYSQLI_STORE_RESULT);
                if ($resultp2->num_rows == 1) {
                    while ($rowp2 = $resultp2->fetch_object()) {
                        $p2 = $rowp2->purchasing_id;

                        $sqlp3 = "UPDATE purchasing SET admin_input = NULL WHERE purchasing_id = {$p2}";
                        $resultp3 = $myDatabase->query($sqlp3, MYSQLI_STORE_RESULT);

                    }
                }

                $sql = "UPDATE `po_pks` SET "
                    . "contract_no = '{$contractNo}', "
                    . "spb_no = '{$spbNo}', "
                    . "vendor_id = {$vendorId}, "
                    . "currency_id = {$currencyId}, "
                    . "exchange_rate = {$exchangeRate}, "
                    . "price = {$price}, "
                    . "price_converted = {$priceConverted}, "
                    . "quantity = {$quantity}, "
                    . "purchasing_id = {$purchasingId}, "
                    . "notes = '{$notes}', "
					. "notes2 = '{$notes2}', "
                    . "final_status = {$finalStatus} "
                    . "WHERE po_pks_id = {$po_pks_id}";
            }

            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                /*  if($boolNew) {
                $contractId = $myDatabase->insert_id;

                $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                        . "{$stockpileId}, {$contractId}, {$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            } else {*/


                if ($boolUpdate) {

                    $sqlC = "SELECT contract_id FROM po_contract
                                WHERE po_pks_id = {$po_pks_id}";
                    $resultC = $myDatabase->query($sqlC, MYSQLI_STORE_RESULT);
                    if ($resultC !== false && $resultC->num_rows >= 1) {
                        while ($rowC = $resultC->fetch_object()) {
                            $contractId = $rowC->contract_id;

                            $sqla = "UPDATE contract SET "
                                . "vendor_id = {$vendorId}, "
                                . "price = {$price}, "
                                . "price_converted = {$priceConverted} "
                                . "WHERE contract_id = {$contractId}";
                            $resulta = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);

                            insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);
                            insertReportGL($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);

                            $sqlNotim = "SELECT t.`transaction_id`, t.`slip_no`, c.price_converted FROM `transaction` t
							LEFT JOIN stockpile_contract sc ON sc.`stockpile_contract_id` = t.`stockpile_contract_id`
							LEFT JOIN contract c ON sc.contract_id = c.contract_id
							WHERE sc.`contract_id` = {$contractId}";
                            $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
                            if ($resultNotim->num_rows >= 1) {
                                while ($rowNotim = $resultNotim->fetch_object()) {
                                    $tId = $rowNotim->transaction_id;
                                    $unit_price = $rowNotim->price_converted;

                                    $sqlb = "UPDATE transaction SET "
                                        . "unit_price = {$unit_price}"
                                        . "WHERE transaction_id = {$tId}";
                                    $resultb = $myDatabase->query($sqlb, MYSQLI_STORE_RESULT);

                                    insertGeneralLedger($myDatabase, 'NOTA TIMBANG2', "NULL", "NULL", "NULL", $tId);

                                }
                            }
                        }
                    }
                }

				if($status_ho == 1){
                    $temp_price = " price = {$price}, ";
                }

                $sqlp = "UPDATE purchasing SET "
                    . "admin_input = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),"
                    . "open_add = 0,  {$temp_price} "
					. "vendor_id = {$vendorId} "
                    . "WHERE purchasing_id = {$purchasingId}";
                $resultp = $myDatabase->query($sqlp, MYSQLI_STORE_RESULT);
				
				$sqlLB = "SELECT link AS purId FROM purchasing WHERE purchasing_id = {$purchasingId}";
                $resulLB = $myDatabase->query($sqlLB, MYSQLI_STORE_RESULT);
                if ($resulLB->num_rows == 1) {
                    while ($rowLB = $resulLB->fetch_object()) {

                        if($rowLB->purId != 0){
                            $sqlLB1 = "UPDATE purchasing SET logbook_status = 1 WHERE purchasing_id = {$rowLB->purId}";
                            $resultLB1 = $myDatabase->query($sqlLB1, MYSQLI_STORE_RESULT);

                            $sqlLB2 = "UPDATE purchasing SET price = {$price} WHERE purchasing_id = {$purchasingId}";
                            $resultLB2 = $myDatabase->query($sqlLB2, MYSQLI_STORE_RESULT);
                        }


                    }
                }
				

                $sqlu = "call update_purchasing ( {$purchasingId})";
                $resultp = $myDatabase->query($sqlu, MYSQLI_STORE_RESULT);
                if ($resultp->num_rows == 1) {
                    while ($rowp2 = $resultp->fetch_object()) {
                        if ($rowp2->ho == "1") {
                            if (isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
                                $filename = $_FILES['imagefile']['name'];
                                $ext = pathinfo($filename, PATHINFO_EXTENSION);
                                $allowed = array('pdf', 'jpg', 'jpeg', 'png', 'bmp');
                                $attachmentPath = "./import/1/stockpile-" . $stockpileId . "/1/" . $vendorId;
                                $attachmentPath2 = "http://10.15.14.56/purchasing/import/1/stockpile-" . $stockpileId . "/1/" . $vendorId;
                                echo $attachmentPath . " / " . $attachmentPath2;
                                if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
                                    $temp = mkdir($attachmentPath, 0755, TRUE);
                                else
                                    $temp = TRUE;

                                if ($temp === TRUE) {
                                    $attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
                                    $attachmentPath2 .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);

                                    $sqlp = "UPDATE purchasing SET "
                                        . "upload_file = '$attachmentPath2'"
                                        . "WHERE purchasing_id = {$purchasingId}";
                                    $resultp = $myDatabase->query($sqlp, MYSQLI_STORE_RESULT);

                                    if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                                        $boolContinue = FALSE;
                                        $return_value = '|FAIL|Error while uploading file.|';
                                    }
                                } else {
                                    $boolContinue = FALSE;
                                    $return_value = '|FAIL|Error while creating directory.|';
                                }
                            }

                        }
                    }
                }

                $return_value = '|OK|Contract has successfully inserted/updated.' . $addMessage . '|' . $sql . '|';

                //  insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", "NULL", $po_pks_id);

                unset($_SESSION['contract']);
            } else {
                $return_value = '|FAIL|Insert/update contract failed.' . $addMessage . '||';
            }
        } else {
            $return_value = '|FAIL|Contract No. already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.' . $addMessage . '||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'po_pks_mutasi_data') {
    // <editor-fold defaultstate="collapsed" desc="po_pks_mutasi_data">

    $return_value = '';
    $addMessage = '';
    $boolNew = false;
    $boolContinue = true;
    $boolUpdate = false;
    $boolInsertVendor = false;
    $boolVendorExists = false;
    //$boolContractExists = false;
    $boolRecalculate = false;
    $boolPriceUp = false;
    $boolPriceDown = false;
    $boolQuantityUp = false;
    $boolQuantityDown = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $po_pks_id = $myDatabase->real_escape_string($_POST['po_pks_id']);
    //$contractType = $myDatabase->real_escape_string($_POST['contractType']);
    $contractNo = $myDatabase->real_escape_string($_POST['contractNo']);
    $spbNo = $myDatabase->real_escape_string($_POST['spbNo']);
    //$contractSeq = $myDatabase->real_escape_string($_POST['contractSeq']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    //$vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    //$vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    //$vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    //$npwp = $myDatabase->real_escape_string($_POST['npwp']);
    //$ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    // </editor-fold>

    /*if($vendorId == 'INSERT') {
            if($vendorCode != '' && $vendorName != '' && $vendorAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
                $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$vendorCode}')";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($result !== false && $result->num_rows > 0) {
                    $boolVendorExists = true;
                    $addMessage = ' Vendor already exists.';
                } elseif($result !== false && $result->num_rows == 0) {
                    $ppnValue = 0;
                    $pphValue = 0;

                    $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
                    $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
                    if($resultPPN !== false && $resultPPN->num_rows == 1) {
                        $rowPPN = $resultPPN->fetch_object();
                        $ppnValue = $rowPPN->tax_value;
                    }

                    $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
                    $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                    if($resultPPh !== false && $resultPPh->num_rows == 1) {
                        $rowPPh = $resultPPh->fetch_object();
                        $pphValue = $rowPPh->tax_value;
                    }

                    $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                            . "UPPER('{$vendorCode}'), '{$vendorName}', '{$vendorAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    if($result !== false) {
                        $vendorId = $myDatabase->insert_id;
                        $boolInsertVendor = true;
                    }
                }
            } else {
                $boolInsertVendor = false;
            }
        } else {
            $boolInsertVendor = true;
        }
        */
    if ($po_pks_id == '') {
        $boolNew = true;

    }


    if ($vendorId != '' && $currencyId != '' && $price != '' && $quantity != '' && $stockpileId != '' && $contractNo != '' && $spbNo != '') {

        if ($exchangeRate == '') {
            $exchangeRate = 1;
        }

        $priceConverted = $price * $exchangeRate;

        if ($boolNew) {
            $sql = "SELECT * FROM `po_pks` WHERE UPPER(contract_no) = UPPER('{$contractNo}')";
        } else {
            $sql = "SELECT * FROM `po_pks` WHERE UPPER(contract_no) = UPPER('{$contractNo}') AND po_pks_id <> {$po_pks_id}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {

            if ($boolNew) {
                /* $sql = "SELECT * FROM vendor WHERE vendor_id = {$vendorId}";
                $resultVendor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultVendor !== false && $resultVendor->num_rows == 1) {
                    $rowVendor = $resultVendor->fetch_object();
                    $vendorCode = $rowVendor->vendor_code;
                }

                $checkPoNo = $contractType .'-'. $vendorCode .'-'. $currentYearMonth;
                if($contractSeq != "") {
                    $poNo = $checkPoNo .'-'. $contractSeq;
                } else {
    //            $sql = "SELECT RIGHT(po_no, 1) + 1 AS next_po FROM contract WHERE po_no LIKE '{$checkPoNo}%' ORDER BY entry_date DESC LIMIT 1";
    //            $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    //            $rowPo = $resultPo->fetch_object();
    //            $nextPoNo = $rowPo->next_po;
    //            $poNo = $checkPoNo .'-'. $nextPoNo;
                    $sql = "SELECT po_no FROM contract WHERE company_id = {$_SESSION['companyId']} AND po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
                    $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultPo->num_rows == 1) {
                        $rowPo = $resultPo->fetch_object();
                        $splitPoNo = explode('-', $rowPo->po_no);
                        $lastExplode = count($splitPoNo) - 1;
                		$nextPoNo = ((float) $splitPoNo[$lastExplode]) + 1;
                        $poNo = $checkPoNo .'-'. $nextPoNo;
                    } else {
                        $poNo = $checkPoNo .'-1';
                    }
                }*/


                $sql = "INSERT INTO `po_pks` (contract_no, spb_no, stockpile_id, vendor_id, currency_id, exchange_rate, price, price_converted, "
                    . "quantity, notes, company_id, entry_by, entry_date, final_status) VALUES ("
                    . "'{$contractNo}', '{$spbNo}', {$stockpileId}, {$vendorId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, "
                    . "{$quantity}, '{$notes}', {$_SESSION['companyId']}, {$_SESSION['userId']},
                         STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),1)";
            } else {

                $boolUpdate = true;
                /*$sql = "SELECT * FROM po_pks WHERE contract_id = {$po_pks_id}";
                $resultContract = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                $rowContract = $resultContract->fetch_object();

                $sql = "SELECT * FROM vendor WHERE vendor_id = {$vendorId}";
                $resultVendor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultVendor !== false && $resultVendor->num_rows == 1) {
                    $rowVendor = $resultVendor->fetch_object();
                    $vendorCode = $rowVendor->vendor_code;
                }

                if($vendorId != $rowContract->vendor_id) {
                    $checkPoNo = $contractType .'-'. $vendorCode .'-'. $currentYearMonth;
        //            $sql = "SELECT RIGHT(po_no, 1) + 1 AS next_po FROM contract WHERE po_no LIKE '{$checkPoNo}%' ORDER BY entry_date DESC LIMIT 1";
        //            $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        //            $rowPo = $resultPo->fetch_object();
        //            $nextPoNo = $rowPo->next_po;
        //            $poNo = $checkPoNo .'-'. $nextPoNo;
                    $sql = "SELECT po_no FROM contract WHERE company_id = {$_SESSION['companyId']} AND po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
                    $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultPo->num_rows == 1) {
                        $rowPo = $resultPo->fetch_object();
                        $splitPoNo = explode('-', $rowPo->po_no);
                        $lastExplode = count($splitPoNo) - 1;
                		$nextPoNo = ((float) $splitPoNo[$lastExplode]) + 1;
                        $poNo = $checkPoNo .'-'. $nextPoNo;
                    } else {
                        $poNo = $checkPoNo .'-1';
                    }
                } else {
                    $poNo = $rowContract->po_no;
                }

                if($quantity != $rowContract->quantity) {
                    $sql = "SELECT * FROM stockpile_contract WHERE contract_id = {$contractId}";
                    $resultSC = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultSC->num_rows == 1) {
                        $boolUpdate = true;
                    } else {
                        $sql = "DELETE FROM stockpile_contract WHERE contract_id = {$contractId}";
                        $resultDel = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        $addMessage = ' Please add stockpile in stockpile tab.';
                    }

                    $boolRecalculate = true;

                    if((float) $quantity > (float) $rowContract->quantity) {
                        $boolQuantityUp = true;
                    } else {
                        $boolQuantityDown = true;
                    }
                }

                if($price != $rowContract->price) {
                    $boolRecalculate = true;

                    if((float) $price > (float) $rowContract->price) {
                        $boolPriceUp = true;
                    } else {
                        $boolPriceDown = true;
                    }
                }*/


                $sql = "UPDATE `po_pks` SET "
                    . "contract_no = '{$contractNo}', "
                    . "spb_no = '{$spbNo}', "
                    . "vendor_id = {$vendorId}, "
                    . "currency_id = {$currencyId}, "
                    . "exchange_rate = {$exchangeRate}, "
                    . "price = {$price}, "
                    . "price_converted = {$priceConverted}, "
                    . "quantity = {$quantity}, "
                    . "purchasing_id = {$purchasingId}, "
                    . "notes = '{$notes}', "
                    . "final_status = {$finalStatus} "
                    . "WHERE po_pks_id = {$po_pks_id}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                /*  if($boolNew) {
                    $contractId = $myDatabase->insert_id;

                    $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                            . "{$stockpileId}, {$contractId}, {$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                } else {*/
                if ($boolUpdate) {


                    //echo $sql;
                    $sqlC = "SELECT contract_id FROM po_contract
                                    WHERE po_pks_id = {$po_pks_id}";
                    $resultC = $myDatabase->query($sqlC, MYSQLI_STORE_RESULT);
                    if ($resultC !== false && $resultC->num_rows >= 1) {
                        while ($rowC = $resultC->fetch_object()) {
                            $contractId = $rowC->contract_id;


                            $sqla = "UPDATE contract SET "
                                . "vendor_id = {$vendorId}, "
                                . "price = {$price}, "
                                . "price_converted = {$priceConverted} "
                                . "WHERE contract_id = {$contractId}";
                            $resulta = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);

                            insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);
                            insertReportGL($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);

                            $sqlNotim = "SELECT t.`transaction_id`, t.`slip_no`, c.price_converted FROM `transaction` t
    							LEFT JOIN stockpile_contract sc ON sc.`stockpile_contract_id` = t.`stockpile_contract_id`
    							LEFT JOIN contract c ON sc.contract_id = c.contract_id
    							WHERE sc.`contract_id` = {$contractId}";
                            $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
                            if ($resultNotim->num_rows >= 1) {
                                while ($rowNotim = $resultNotim->fetch_object()) {
                                    $tId = $rowNotim->transaction_id;
                                    $unit_price = $rowNotim->price_converted;

                                    $sqlb = "UPDATE transaction SET "
                                        . "unit_price = {$unit_price}"
                                        . "WHERE transaction_id = {$tId}";
                                    $resultb = $myDatabase->query($sqlb, MYSQLI_STORE_RESULT);

                                    insertGeneralLedger($myDatabase, 'NOTA TIMBANG2', "NULL", "NULL", "NULL", $tId);

                                }

                            }
                        }
                    }


                }

                $return_value = '|OK|Contract has successfully inserted/updated.' . $addMessage . '|' . $sql . '|';

                //  insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", "NULL", $po_pks_id);

                unset($_SESSION['contract']);
            } else {
                $return_value = '|FAIL|Insert/update contract failed.' . $addMessage . '||';
            }
        } else {
            $return_value = '|FAIL|Contract No. already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.' . $addMessage . '||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_contract') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    // </editor-fold>

    if ($contractId != '') {
        $sql = "UPDATE `po_pks` po LEFT JOIN po_contract poc ON po.po_pks_id = poc.po_pks_id
				SET po_status = 0 WHERE po.po_status = 1 AND poc.contract_id = {$contractId}";
        $result1 = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "UPDATE `po_pks` po LEFT JOIN po_contract poc ON po.po_pks_id = poc.po_pks_id
				SET po.lock_contract = 0 WHERE po.lock_contract = 1 AND poc.contract_id = {$contractId}";
        $result1 = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "DELETE FROM `contract` WHERE contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "DELETE FROM `po_contract` WHERE contract_id = {$contractId}";
        $result1 = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Contract has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'lock_contract') {
    // <editor-fold defaultstate="collapsed" desc="lock_contract">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    // </editor-fold>

    if ($contractId != '') {
        $sql = "UPDATE `contract` SET contract_status = 1 WHERE contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Contract has successfully locked.|';
        } else {
            $return_value = '|FAIL|locked contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'akses_invoice') {
    // <editor-fold defaultstate="collapsed" desc="akses_invoice">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    // </editor-fold>

    if ($contractId != '') {
        $sql = "UPDATE `contract` SET invoice_status = 0 WHERE contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Contract has successfully Opened.|';
        } else {
            $return_value = '|FAIL|Opened contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'cancel_sales') {
    // <editor-fold defaultstate="collapsed" desc="cancel_sales">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $sales_Id = $myDatabase->real_escape_string($_POST['sales_Id']);
    // </editor-fold>

    if ($sales_Id != '') {
        $sql = "UPDATE `sales` SET sales_status = 4 WHERE sales_id = {$sales_Id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Sales has successfully Canceled.|';
        } else {
            $return_value = '|FAIL|Canceled Sales failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'close_invoice') {
    // <editor-fold defaultstate="collapsed" desc="close_invoice">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    // </editor-fold>

    if ($contractId != '') {
        $sql = "UPDATE `contract` SET invoice_status = 1 WHERE contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Contract has successfully closed.|';
        } else {
            $return_value = '|FAIL|Closed contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'unlock_contract') {
    // <editor-fold defaultstate="collapsed" desc="unlock_contract">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    // </editor-fold>

    if ($contractId != '') {
        $sql = "UPDATE `contract` SET contract_status = 0 WHERE contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Contract has successfully locked.|';
        } else {
            $return_value = '|FAIL|locked contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'adjustment_data') {
    // <editor-fold defaultstate="collapsed" desc="adjustment_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $adj_id = $myDatabase->real_escape_string($_POST['adj_id']);
    $adjustment = $myDatabase->real_escape_string($_POST['adjustment']);
    $adjustmentAcc = $myDatabase->real_escape_string($_POST['adjustmentAcc']);
    $adjustmentNotes = $myDatabase->real_escape_string($_POST['adjustmentNotes']);
    $adjustmentDate = $myDatabase->real_escape_string($_POST['adjustmentDate']);
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);

    $dateTrans = str_replace("/", "-", $myDatabase->real_escape_string($_POST['adjustmentDate']));
    $dt = date('Y-m-d', strtotime($dateTrans));
    $date2 = new DateTime($dt);
    $newDate = $date2->format('Y-m-d');

    // </editor-fold>


    if ($contractId != '' && $adjustment != '' && $adjustmentAcc != '' && $adjustmentNotes != '' && $adjustmentDate != '' && $ppn != '') {

        //closingDate
        $newAdjustmentDate = implode("-", array_reverse(explode("/", $adjustmentDate)));
        $checkClosingDate = explode('-', closingDate($newAdjustmentDate, 'Contract - Contract'));
        $boolClosing = $checkClosingDate[0];
        $closingDate = $checkClosingDate[1];

        if (!$boolClosing) {
            $return_value = $closingDate;
            echo $return_value;
        } else {
            $sql = "SELECT DATE_FORMAT(entry_date,'%Y-%m-%d') AS contractDate, po_no FROM contract WHERE contract_id = {$contractId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false && $result->num_rows == 1) {
                $row = $result->fetch_object();

                $contractDate = $row->contractDate;
				 $po_no = $row->po_no;

            }
            if ($contractDate <= $newDate) {

                if ($adj_id == '') {
					
					$checkAdjNo = $po_no. '-ADJ';

                    $sql = "SELECT adj_no FROM contract_adjustment WHERE adj_no LIKE '{$checkAdjNo}%' ORDER BY adj_id DESC LIMIT 1";
                    $resultAdj = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultAdj->num_rows == 1) {
                        $rowAdj = $resultAdj->fetch_object();
                        $splitAdjNo = explode('-', $rowAdj->adj_no);
                        $lastExplode = count($splitAdjNo) - 1;
                        $nextAdjNo = ((float)$splitAdjNo[$lastExplode]) + 1;
                        $adj_no = $checkAdjNo . '-' . $nextAdjNo;
                    } else {
                        $adj_no = $checkAdjNo . '-1';

                    }
					
					
                    $sql = "INSERT INTO `contract_adjustment` (contract_id, adj_no, adjustment, adjustment_acc, adjustment_notes, adjustment_ppn, adjustment_date, adjustment_by, adjustment_input) VALUES ('{$contractId}','{$adj_no}', '{$adjustment}', '{$adjustmentAcc}', '{$adjustmentNotes}', '{$ppn}', STR_TO_DATE('{$adjustmentDate}', '%d/%m/%Y'), '{$_SESSION['userId']}',STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";

                } else {
                    $sql = "UPDATE `contract_adjustment` SET "
                        . "contract_id = {$contractId}, "
                        . "adjustment = {$adjustment}, "
                        . "adjustment_acc = {$adjustmentAcc}, "
                        . "adjustment_notes = '{$adjustmentNotes}', "
                        . "adjustment_ppn = {$ppn}, "
                        . "adjustment_date = STR_TO_DATE('{$adjustmentDate}', '%d/%m/%Y'),"
                        . "edit_by = {$_SESSION['userId']},"
                        . "edit_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s')"
                        . "WHERE adj_id = {$adj_id}";
                }
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false) {
                    if ($adj_id == '') {
                        $adjId = $myDatabase->insert_id;
                        $contractId = $adjId;
                    } else {
                        $contractId = $adj_id;
                    }

                    $return_value = '|OK|adjustment has successfully inserted/updated.||';

                    insertGeneralLedger($myDatabase, 'CONTRACT ADJUSTMENT', "NULL", "NULL", $contractId);
                    insertReportGL($myDatabase, 'CONTRACT ADJUSTMENT', "NULL", "NULL", $contractId);

                } else {
                    $return_value = '|FAIL|Insert/update adjustment failed.||';
                    echo $sql;
                }

            } else {
                $return_value = '|FAIL|Tanggal adjustment harus sama/melebihi tanggal kontrak.|';
            }
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }


    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'contract_data') {
    // <editor-fold defaultstate="collapsed" desc="contract_data">

    $return_value = '';
    $addMessage = '';
    $boolNew = false;
    $boolContinue = true;
    $boolUpdate = false;
    $boolInsertVendor = false;
    $boolVendorExists = false;
    //$boolContractExists = false;
    $boolRecalculate = false;
    $boolPriceUp = false;
    $boolPriceDown = false;
    $boolQuantityUp = false;
    $boolQuantityDown = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    $po_pks_id = $myDatabase->real_escape_string($_POST['po_pks_id']);
    $contractType = $myDatabase->real_escape_string($_POST['contractType']);
    $contractNo = $myDatabase->real_escape_string($_POST['generatedContractNo']);
    $contractSeq = $myDatabase->real_escape_string($_POST['contractSeq']);
    $contractNo2 = $myDatabase->real_escape_string($_POST['contractNo2']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    //$spbNo = $myDatabase->real_escape_string($_POST['spbNo']);
    //$vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    //$vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    //$vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    //$npwp = $myDatabase->real_escape_string($_POST['npwp']);
    //$ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $poNo = $myDatabase->real_escape_string($_POST['generatedPoNo']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpile_id']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty']));
    $adjustment = str_replace(",", "", $myDatabase->real_escape_string($_POST['adjustment']));
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $balance = $myDatabase->real_escape_string($_POST['balance']);
    $qty_rule = $myDatabase->real_escape_string($_POST['qty_rule']);
	if($quantity_rule == ''){
        $quantity_rule = 0;
    } else {
        $quantity_rule = $myDatabase->real_escape_string($_POST['quantity_rule']);
    } 
    $returnShipment = $myDatabase->real_escape_string($_POST['returnShipment']);
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
    $mutasiType = $myDatabase->real_escape_string($_POST['mutasiType']);
    $contractDate = $myDatabase->real_escape_string($_POST['contractDate']);
    // </editor-fold>

    if ($contractId == '') {
        $boolNew = true;
        if ($stockpileId == '') {
            $boolContinue = false;
        }
    }

    if ($currencyId == '') {

        $currencyId = 1;

    }

    if ($returnShipment == '') {
        $returnShipment = 'NULL';
    }
    if ($shipmentId == '') {
        $shipmentId = 'NULL';
    }


    if ($balance >= $qty || $balance == 0) {

        if ($contractType != '' && $vendorId != '' && $currencyId != '' && $price != '' && $qty != '' && $boolContinue) {

            if ($exchangeRate == '') {
                $exchangeRate = 1;
            }

            //closingDate
            $newContractDate = implode("-", array_reverse(explode("/", $contractDate)));
            $checkClosingDate = explode('-', closingDate($newContractDate, 'Contract - PO PKS'));
            $boolClosing = $checkClosingDate[0];
            $closingDate = $checkClosingDate[1];

            $priceConverted = $price * $exchangeRate;
			
			$sql = "SELECT * FROM vendor WHERE vendor_id = {$vendorId}";
			$resultVendor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			if ($resultVendor !== false && $resultVendor->num_rows == 1) {
				$rowVendor = $resultVendor->fetch_object();
				$vendorCode = $rowVendor->vendor_code;
			}

			$checkPoNo = $contractType . '-' . $vendorCode . '-' . $currentYearMonth;
			if ($contractSeq != "") {
				$poNo2 = $checkPoNo . '-' . $contractSeq;
			} else {
				$sql = "SELECT po_no FROM contract WHERE company_id = {$_SESSION['companyId']} AND po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
				$resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				if ($resultPo->num_rows == 1) {
					$rowPo = $resultPo->fetch_object();
					$splitPoNo = explode('-', $rowPo->po_no);
					$lastExplode = count($splitPoNo) - 1;
					$nextPoNo = ((float)$splitPoNo[$lastExplode]) + 1;
					$poNo2 = $checkPoNo . '-' . $nextPoNo;
				} else {
					$poNo2 = $checkPoNo . '-1';
				}
			}

            if (!$boolClosing) {
                $return_value = $closingDate;
            } else {
                if ($boolNew) {
                    $sql = "INSERT INTO `contract` (contract_type, po_no, contract_no, vendor_id, currency_id, exchange_rate, price, price_converted, "
                        . "quantity, notes, company_id, entry_by, entry_date, entry_date2, qty_rule, quantity_rule,return_shipment, return_shipment_id,mutasi_type,open_po) VALUES ("
                        . "'{$contractType}', '{$poNo2}', '{$contractNo}', {$vendorId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, "
                        . "{$qty}, '{$notes}', {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$contractDate', '%d/%m/%Y %H:%i:%s'),STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$qty_rule}, {$quantity_rule},{$returnShipment}, {$shipmentId},{$mutasiType},1)";
                } else {
                    $sql = "SELECT * FROM contract WHERE contract_id = {$contractId}";
                    $resultContract = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $rowContract = $resultContract->fetch_object();

                    $contractNo3 = substr($rowContract->contract_no, 0, -2);

                    if ($quantity != $rowContract->quantity) {
                        $sql = "SELECT * FROM stockpile_contract WHERE contract_id = {$contractId}";
                        $resultSC = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($resultSC->num_rows == 1) {
                            $boolUpdate = true;
                        } else {
                            $sql = "DELETE FROM stockpile_contract WHERE contract_id = {$contractId}";
                            $resultDel = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            $addMessage = ' Please add stockpile in stockpile tab.';
                        }
                        $boolRecalculate = true;
                        if ((float)$quantity > (float)$rowContract->quantity) {
                            $boolQuantityUp = true;
                        } else {
                            $boolQuantityDown = true;
                        }
                    }
                    if ($price != $rowContract->price) {
                        $boolRecalculate = true;
                        if ((float)$price > (float)$rowContract->price) {
                            $boolPriceUp = true;
                        } else {
                            $boolPriceDown = true;
                        }
                    }

                    $sql = "UPDATE contract SET contract_no = REPLACE(contract_no, '{$contractNo3}', '{$contractNo2}') WHERE contract_id = {$contractId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $sql = "UPDATE po_pks pop LEFT JOIN po_contract poc ON poc.po_pks_id = pop.po_pks_id SET pop.contract_no = '{$contractNo2}' WHERE poc.contract_id = {$contractId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    $sql = "UPDATE `contract` SET "
                        . "quantity = {$qty}, "
                        . "adjustment = '{$adjustment}', "
                        . "notes = '{$notes}', "
                        . "mutasi_type = '{$mutasiType}', "
                        . "entry_date = STR_TO_DATE('$contractDate', '%d/%m/%Y %H:%i:%s'), "
                        . "qty_rule = '{$qty_rule}', "
						. "quantity_rule = '{$quantity_rule}' "
                        . "WHERE contract_id = {$contractId}";
                }
				echo $sql;
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
                if ($result !== false) {
                    if ($boolNew) {
                        $contractId = $myDatabase->insert_id;

                        $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                            . "{$stockpileId}, {$contractId}, {$qty}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        $stockpileContractId = $myDatabase->insert_id;

                        if ($boolNew && $result !== false) {
                            $id = $myDatabase->insert_id;
                            $sqlsp = "CALL surattugas_generate2({$id})";
                            $resultsp = $myDatabase->query($sqlsp, MYSQLI_STORE_RESULT);
                            if ($resultsp->num_rows == 1) {
                                $rowsp = $resultsp->fetch_object();
                                //$stockpileContractIds = $rowSC->stockpile_contract_ids;
                            }
                        }

                        $sql = "INSERT INTO po_contract (po_pks_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                            . "{$po_pks_id}, {$contractId}, {$qty}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                        $sql = "UPDATE po_pks SET lock_contract = 1 WHERE po_pks_id = {$po_pks_id}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                        if ($qty == $balance) {
                            $sql = "UPDATE po_pks SET po_status = 1 WHERE po_pks_id = {$po_pks_id}";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        }
                        //Update Assign Contract
                        $sqlPurchasing = "SELECT  p.freight,p.quantity,pp.po_pks_id,pp.purchasing_id FROM po_pks pp
                        RIGHT JOIN purchasing p ON p.purchasing_id = pp.purchasing_id
                        WHERE pp.po_pks_id = {$po_pks_id}";
                        $resultPurchasing = $myDatabase->query($sqlPurchasing, MYSQLI_STORE_RESULT);

                        while ($row = $resultPurchasing->fetch_object()) {
                            $freightStatus = $row->freight;
                            $quantity = $row->quantity;
                            // $freightCostId = $row->freight_cost_id;
                            $purchasingId = $row->purchasing_id;
                        }

                        if ($freightStatus == 2) {
                            $sqlGetFC = "SELECT * FROM purchasing_freight_cost WHERE purchasing_id = {$purchasingId}";
                            $resultFC = $myDatabase->query($sqlGetFC, MYSQLI_STORE_RESULT);

                            while ($row = $resultFC->fetch_object()) {
                                $freightCostId = $row->freight_cost_id;
                                $qty = $quantity / $resultFC->num_rows;

                                $sql = "INSERT INTO vendor_contract (freight_cost_id, po_pks_id, stockpile_contract_id,quantity, entry_by, entry_date) VALUES ("
                                . "{$freightCostId}, {$po_pks_id},{$stockpileContractId} ,{$qty}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                            
                        }

                    } else {
                        if ($boolUpdate) {
                            $sql = "UPDATE stockpile_contract SET quantity = {$qty} WHERE contract_id = {$contractId}";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            $sql = "UPDATE po_contract SET quantity = {$qty} WHERE contract_id = {$contractId}";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        }

                        if ($boolRecalculate) {
                            $stockpileContractIds = "";

                            // get stockpile_contract_id to update payment, transaction
                            $sql = "SELECT group_concat(stockpile_contract_id) AS stockpile_contract_ids FROM stockpile_contract
                                WHERE contract_id = {$contractId}";
                            $resultSC = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($resultSC->num_rows == 1) {
                                $rowSC = $resultSC->fetch_object();
                                $stockpileContractIds = $rowSC->stockpile_contract_ids;
                            }

                            if ($stockpileContractIds != "") {
                                if ($boolPriceUp || $boolQuantityUp) {
                                    // change all payment_status in contract = 0
                                    // change all payment_method to 2 in payment
                                    // change unit_price & inventory_value in transaction => if price up only
                                    // change inventory_value in delivery => if price up only
                                    // change cogs_amount in shipment & inventory_value in transaction for shipment => if price up only
                                    // change payment if payment_id in shipment is not null
                                } elseif ($boolPriceDown || $boolQuantityDown) {

                                }
                            }
                        }
                    }
                    $return_value = '|OK|Contract has successfully inserted/updated.' . $addMessage . '|' . $contractId . '|';
                   
					
					insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);
					insertReportGL($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);
					
                    unset($_SESSION['contract']);
                } else {
                    $return_value = '|FAIL|Insert/update contract failed.' . $addMessage . '||';
                }
            }
        } else {
            $return_value = '|FAIL|Please fill the required fields.' . $addMessage . '||';
        }
    } else {
        $return_value = '|FAIL|The quantity exceed the balance of the contract.|';
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'contract_stockpile_data') {
    // <editor-fold defaultstate="collapsed" desc="contract_stockpile_data">

    $return_value = '';
    $boolNew = false;
    $boolExceedQuantity = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    // </editor-fold>

    if ($stockpileContractId == '') {
        $boolNew = true;
    }

    if ($stockpileId != '' && $quantity != '') {
        $sql = "SELECT * FROM contract WHERE contract_id = {$contractId}";
        $resultContract = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($resultContract !== false && $resultContract->num_rows == 1) {
            $rowContract = $resultContract->fetch_object();
            $totalQuantity = $rowContract->quantity;
        }

        $currentQuantity = 0;

        if ($boolNew) {
            $sql = "SELECT * FROM `stockpile_contract` WHERE stockpile_id = {$stockpileId} AND contract_id = {$contractId}";
            $sqlQuantity = "SELECT COALESCE(SUM(quantity), 0) AS current_quantity FROM stockpile_contract WHERE stockpile_id = {$stockpileId} AND contract_id = {$contractId}";
        } else {
            $sql = "SELECT * FROM `stockpile_contract` WHERE stockpile_id = {$stockpileId} AND contract_id = {$contractId} AND stockpile_contract_id <> {$stockpileContractId}";
            $sqlQuantity = "SELECT COALESCE(SUM(quantity), 0) AS current_quantity FROM stockpile_contract WHERE stockpile_id = {$stockpileId} AND contract_id = {$contractId} AND stockpile_contract_id NOT IN ({$stockpileContractId})";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $resultQuantity = $myDatabase->query($sqlQuantity, MYSQLI_STORE_RESULT);
        if ($resultQuantity !== false && $resultQuantity->num_rows == 1) {
            $rowQuantity = $resultQuantity->fetch_object();
            $currentQuantity = $rowQuantity->current_quantity;
        }

        $maxQuantity = $totalQuantity - $currentQuantity;
        if ($quantity > $maxQuantity) {
            $boolExceedQuantity = true;
        }

        if ($result !== false && $result->num_rows == 0 && !$boolExceedQuantity) {
            if ($boolNew) {
                $sql = "INSERT INTO `stockpile_contract` (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                    . "{$stockpileId}, {$contractId}, {$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `stockpile_contract` SET "
                    . "quantity = {$quantity}, "
                    . "stockpile_id = {$stockpileId} "
                    . "WHERE stockpile_contract_id = {$stockpileContractId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($boolNew && $result !== false) {
                $id = $myDatabase->insert_id;
                $sqlsp = "CALL surattugas_generate2({$id})";
                $resultsp = $myDatabase->query($sqlsp, MYSQLI_STORE_RESULT);
                if ($resultsp->num_rows == 1) {
                    $rowsp = $resultsp->fetch_object();
                    //$stockpileContractIds = $rowSC->stockpile_contract_ids;
                }
            }

            if ($result !== false) {
                $return_value = '|OK|Stockpile has successfully inserted/updated.|';
            } else {
                $return_value = '|FAIL|Insert/update stockpile failed.|';
            }
        } else {
            if ($boolExceedQuantity) {
                $return_value = '|FAIL|Quantity exceed total quantity.|';
            } else {
                $return_value = '|FAIL|Stockpile already exists.|';
            }
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'contract_condition_data') {
    // <editor-fold defaultstate="collapsed" desc="contract_condition_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $conditionId = $myDatabase->real_escape_string($_POST['conditionId']);
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    $categoryId = $myDatabase->real_escape_string($_POST['categoryId']);
    $rule = $myDatabase->real_escape_string($_POST['rule']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    // </editor-fold>

    if ($conditionId == '') {
        $boolNew = true;
    }

    if ($categoryId != '' && $rule != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `condition` WHERE category_id = {$categoryId} AND contract_id = {$contractId}";
        } else {
            $sql = "SELECT * FROM `condition` WHERE category_id = {$categoryId} AND contract_id = {$contractId} AND condition_id <> {$conditionId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `condition` (category_id, contract_id, rule, remarks, entry_by, entry_date) VALUES ("
                    . "{$categoryId}, {$contractId}, '{$rule}', '{$remarks}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `condition` SET "
                    . "category_id = {$categoryId}, "
                    . "rule = '{$rule}', "
                    . "remarks = '{$remarks}' "
                    . "WHERE condition_id = {$conditionId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Condition has successfully inserted/updated.|';
            } else {
                $return_value = '|FAIL|Insert/update condition failed.|';
            }
        } else {
            $return_value = '|FAIL|Category already exists.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_transaction') {
    // <editor-fold defaultstate="collapsed" desc="delete_transaction">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $transactionId = $myDatabase->real_escape_string($_POST['transactionId']);
    // </editor-fold>

    if ($transactionId != '') {
        $sql = "DELETE FROM `transaction` WHERE transaction_id = {$transactionId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Transaction has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete transaction failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_contract_stockpile') {
    // <editor-fold defaultstate="collapsed" desc="delete_transaction">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    // </editor-fold>

    if ($stockpileContractId != '') {
        $sql = "DELETE FROM `stockpile_contract` WHERE stockpile_contract_id = {$stockpileContractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Data has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete data failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_adjustment_audit') {
    // <editor-fold defaultstate="collapsed" desc="delete_adjustment_audit">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $auditId = $myDatabase->real_escape_string($_POST['auditId']);
    // </editor-fold>

    if ($auditId != '') {


        $sql = "DELETE FROM `adjustment_audit` WHERE audit_id = {$auditId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Account has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete account failed.|';
        }

    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'adjustment_audit') {
    // <editor-fold defaultstate="collapsed" desc="adjustment_audit">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST DATA">
    $auditId = $myDatabase->real_escape_string($_POST['auditId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
    $adjustmentDate = $myDatabase->real_escape_string($_POST['adjustmentDate']);
    $quantity = $myDatabase->real_escape_string($_POST['quantity']);
    $cogsPKS = $myDatabase->real_escape_string($_POST['cogsPKS']);
    $cogsOA = $myDatabase->real_escape_string($_POST['cogsOA']);
    $cogsOB = $myDatabase->real_escape_string($_POST['cogsOB']);
    $cogsHandling = $myDatabase->real_escape_string($_POST['cogsHandling']);
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $t_date = str_replace('/', '-', $adjustmentDate);
    $currentYear2 = date('y', strtotime($t_date));
	//update by idris
	$rsb = $myDatabase->real_escape_string($_POST['rsb']);
    $ggl = $myDatabase->real_escape_string($_POST['ggl']);
    $uncertified = $myDatabase->real_escape_string($_POST['uncertified']);
    if ($rsb == 1 && $ggl ==1){
        $rsb = 0;
        $ggl = 0;
        $rsbGgl = 1;
    } else {
        $rsbGgl = 0;
    } 
    if ($rsb == ''){
        $rsb = 0;
    }
    if ($ggl == ''){
        $ggl = 0;
    } 
    if ($uncertified == ''){
        $uncertified = 0;
    }

    // </editor-fold>

    //closingDate
    $newAdjustmentDate = implode("-", array_reverse(explode("/", $adjustmentDate)));
    $checkClosingDate = explode('-', closingDate($newAdjustmentDate, 'Sales - Adjustment Audit'));
    $boolClosing = $checkClosingDate[0];
    $closingDate = $checkClosingDate[1];

    if ($auditId == '') {
        $boolNew = true;
    }

    if ($stockpileId != '' && $shipmentId != '' && $adjustmentDate != '' && $quantity != '' && $cogsPKS != '' && $cogsOA != '' && $cogsOB != '' && $cogsHandling != '') {
        if (!$boolClosing) {
            $return_value = $closingDate;
            echo $return_value;
        } else {
            if ($boolNew) {
                $sql = "INSERT INTO `adjustment_audit`(`shipment_id`,`stockpile_id`,quantity,cogs_pks,cogs_oa,cogs_ob,cogs_handling,adjustment_date,notes,entry_by,entry_date)
						VALUES
						('{$shipmentId}','{$stockpileId}','{$quantity}','{$cogsPKS}','{$cogsOA}','{$cogsOB}','{$cogsHandling}',STR_TO_DATE('{$adjustmentDate}', '%d/%m/%Y'),'{$notes}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `adjustment_audit` SET "
                    . "shipment_id = '{$shipmentId}', "
                    . "stockpile_id = '{$stockpileId}', "
                    . "quantity = '{$quantity}', "
                    . "cogs_pks = '{$cogsPKS}', "
                    . "cogs_oa = '{$cogsOA}', "
                    . "cogs_ob = '{$cogsOB}', "
                    . "cogs_handling = '{$cogsHandling}', "
                    . "notes = '{$notes}', "
                    . "adjustment_date = STR_TO_DATE('{$adjustmentDate}', '%d/%m/%Y')"
                    . "WHERE audit_id = {$auditId}";
            }


            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {

                $return_value = '|OK|adjustment has successfully inserted/updated.||';

                if ($auditId == '') {
                    $auditId = $myDatabase->insert_id;
                }

                $sql1 = "UPDATE adjustment_audit_qty SET audit_id = {$auditId} WHERE shipment_id = {$shipmentId} AND audit_id IS NULL";
                $result = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
                //echo $sql1;

                $sql = "SELECT a.*, SUBSTR(b.`shipment_no`,-2) AS susut FROM adjustment_audit a LEFT JOIN shipment b ON a.shipment_id = b.shipment_id WHERE a.shipment_id = {$shipmentId} ORDER BY audit_id DESC LIMIT 1";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if ($result !== false && $result->num_rows == 1) {
                    $row = $result->fetch_object();

                    if ($row->susut == '-S') {

                        $adjustmentId = $row->audit_id;
                        $quantity = $row->quantity * -1;
                        $cogs_pks = $row->cogs_pks;
                        $cogs_oa = $row->cogs_oa;
                        $cogs_ob = $row->cogs_ob;
                        $cogs_handling = $row->cogs_handling;
                        $adjustment_date = $row->adjustment_date;
                        $notes = $row->notes;

                    } else {

                        $adjustmentId = $row->audit_id;
                        $quantity = $row->quantity;
                        $cogs_pks = $row->cogs_pks;
                        $cogs_oa = $row->cogs_oa;
                        $cogs_ob = $row->cogs_ob;
                        $cogs_handling = $row->cogs_handling;
                        $adjustment_date = $row->adjustment_date;
                        $notes = $row->notes;
                    }
                }
                if ($boolNew) {
                    $sql = "SELECT * FROM stockpile WHERE stockpile_id = {$stockpileId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($result !== false && $result->num_rows == 1) {
                        $row = $result->fetch_object();
                        $stockpileCode = $row->stockpile_code;
                    }
                    //	insertGeneralLedger($myDatabase, 'CONTRACT ADJUSTMENT', "NULL", "NULL", $contractId);
                    $checkSlipNo = $stockpileCode . '-' . $currentYear2;
//                $sql = "SELECT LPAD(COUNT(1) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ";
//                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultSlip->num_rows == 0) {
                        $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                        $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }
                    $rowSlipNo = $resultSlip->fetch_object();
                    $nextSlipNo = $rowSlipNo->next_id;
                    $slipNo = $checkSlipNo . '-' . $nextSlipNo;

					//update//update by idris
                    $sql = "INSERT INTO TRANSACTION (slip_no, transaction_date,unloading_date,send_weight,netto_weight,handling_quantity,freight_quantity,quantity,freight_price,handling_price,unloading_price,unit_price,posting_status,entry_by,entry_date,adjustmentAudit_id,notes,rsb,ggl,rsb_ggl,uncertified) 
                    VALUES ('{$slipNo}', '{$adjustment_date}', '{$adjustment_date}', '{$quantity}', '{$quantity}', '{$quantity}', '{$quantity}', '{$quantity}', '{$cogs_oa}', '{$cogs_handling}', '{$cogs_ob}', '{$cogs_pks}',2,{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$adjustmentId},'{$notes}','{$rsb}','{$ggl}','{$rsbGgl}','{$uncertified}')";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    if ($result !== false) {
                        if ($transactionId == '') {
                            $transactionId = $myDatabase->insert_id;
                        }
                    }
                } else {

                    $sql = "UPDATE `transaction` SET "
                        . "transaction_date = '{$adjustment_date}', "
                        . "unloading_date = '{$adjustment_date}', "
                        . "send_weight = '{$quantity}', "
                        . "netto_weight = '{$quantity}', "
                        . "handling_quantity = '{$quantity}', "
                        . "freight_quantity = '{$quantity}', "
                        . "quantity = '{$quantity}', "
                        . "freight_price = '{$cogs_oa}', "
                        . "handling_price = '{$cogs_handling}', "
                        . "unloading_price = '{$cogs_ob}', "
                        . "unit_price = '{$cogs_pks}', "
                        . "notes = '{$notes}' "
                        . "WHERE adjustmentAudit_id = {$adjustmentId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    $sql = "SELECT * FROM transaction WHERE adjustmentAudit_id = {$adjustmentId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($result !== false && $result->num_rows == 1) {
                        $row = $result->fetch_object();
                        $transactionId = $row->transaction_id;
                    }
                }
                echo $transactionId;
                insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                insertReportGL($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

            } else {
                $return_value = '|FAIL|Insert/update adjustment failed.||';
                echo $sql;
            }
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'set_unit_cost') {
    // <editor-fold defaultstate="collapsed" desc="set_unit_cost">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
    $quantity = $myDatabase->real_escape_string($_POST['quantity']);

    // </editor-fold>

    if ($shipmentId != '' && $quantity != '') {

        $sql = "DELETE FROM adjustment_audit_qty WHERE shipment_id = {$shipmentId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


        $sql = "SELECT d.*,
            t.quantity AS quantity_notim,
            t.send_weight, t.netto_weight, 
			CASE WHEN t.mutasi_id IS NOT NULL AND t.mutasi_id <> 0 THEN t.unit_cost
			WHEN t.adjustmentAudit_id IS NOT NULL THEN t.unit_price
			ELSE con.price_converted END AS contract_price,
            CASE WHEN t.mutasi_id IS NOT NULL AND t.mutasi_id <> 0 THEN d.quantity * t.unit_cost
			WHEN t.adjustmentAudit_id IS NOT NULL THEN d.quantity * t.unit_price
			ELSE d.quantity * con.price_converted END AS cogs_amount,
            t.freight_quantity, t.freight_price, 
			CASE WHEN t.delivery_status = 2 THEN (d.percent_taken / 100) * (t.quantity * t.freight_price)
			ELSE (d.percent_taken / 100) * (t.freight_quantity * t.freight_price) END AS freight_total,
			CASE WHEN t.delivery_status = 2 AND t.freight_cost_id IS NOT NULL THEN (d.quantity/t.freight_quantity) * COALESCE((SELECT amt_claim FROM transaction_shrink_weight WHERE transaction_id = d.transaction_id),0)
	    WHEN t.freight_cost_id IS NOT NULL THEN COALESCE((SELECT amt_claim FROM transaction_shrink_weight WHERE transaction_id = d.transaction_id),0) ELSE 0 END AS freight_shrink,
            t.unloading_price, (d.percent_taken / 100) * t.unloading_price AS unloading_total,
			vhc.price AS vh_price, t.handling_quantity,
			CASE WHEN t.delivery_status = 2 THEN (d.percent_taken / 100) * (t.handling_quantity * vhc.price)
			ELSE (d.percent_taken / 100) * (t.handling_quantity * vhc.price) END AS handling_total,
			vh1.pph_tax_id AS vh_pph_tax_id, vh1.pph AS vh_pph, vhtx.tax_category AS vh_pph_tax_category,
            f.ppn_tax_id AS fc_ppn_tax_id, f.ppn AS fc_ppn, fctxppn.tax_category AS fc_ppn_tax_category,
            t.fc_tax_id AS fc_pph_tax_id, fctxpph.tax_value AS fc_pph, fctxpph.tax_category AS fc_pph_tax_category,
            l.ppn_tax_id AS uc_ppn_tax_id, l.ppn AS uc_ppn, uctxppn.tax_category AS uc_ppn_tax_category,
            l.pph_tax_id AS uc_pph_tax_id, l.pph AS uc_pph, uctxpph.tax_category AS uc_pph_tax_category,
			ac.amt_claim
			
                     FROM delivery d
        LEFT JOIN `transaction` t
        	ON t.transaction_id = d.transaction_id
        LEFT JOIN stockpile_contract sc
            ON sc.stockpile_contract_id = t.stockpile_contract_id
		
        LEFT JOIN contract con
            ON con.contract_id = sc.contract_id
        LEFT JOIN vendor v1
            ON v1.vendor_id = con.vendor_id
        LEFT JOIN unloading_cost uc
            ON uc.unloading_cost_id = t.unloading_cost_id
        LEFT JOIN transaction_shrink_weight ac
			ON ac.transaction_id = d.transaction_id
        LEFT JOIN freight_cost fc
            ON fc.freight_cost_id = t.freight_cost_id
        LEFT JOIN freight f
            ON f.freight_id = fc.freight_id
        LEFT JOIN vendor v2
            ON v2.vendor_id = fc.vendor_id
        LEFT JOIN vendor v3
            ON v3.vendor_id = t.vendor_id
        LEFT JOIN shipment sh
            ON sh.shipment_id = d.shipment_id
        LEFT JOIN sales sl
            ON sl.sales_id = sh.sales_id
        LEFT JOIN stockpile s2
            ON s2.stockpile_id = sl.stockpile_id
        LEFT JOIN customer cust
            ON cust.customer_id = sl.customer_id
        LEFT JOIN tax fctxpph
	        ON fctxpph.tax_id = t.fc_tax_id
        LEFT JOIN tax fctxppn
	        ON fctxppn.tax_id = f.ppn_tax_id
	    LEFT JOIN labor l
            ON l.labor_id = t.labor_id
	    LEFT JOIN tax uctxpph
	        ON uctxpph.tax_id = l.pph_tax_id
        LEFT JOIN tax uctxppn
	        ON uctxppn.tax_id = l.ppn_tax_id	
		LEFT JOIN vendor_handling_cost vhc
			ON vhc.handling_cost_id = t.handling_cost_id
		LEFT JOIN vendor_handling vh1
			ON vh1.vendor_handling_id = vhc.vendor_handling_id
		LEFT JOIN tax vhtx
			ON vh1.pph_tax_id = vhtx.tax_id WHERE d.shipment_id = {$shipmentId} ORDER BY d.delivery_id DESC";
        $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $totalInventoryValue = 0;
        if ($resultDelivery !== false && $resultDelivery->num_rows > 0) {
            $balanceLeft = $quantity;
            while ($rowDelivery = $resultDelivery->fetch_object()) {


                if ($balanceLeft > 0) {

                    if ($balanceLeft >= $rowDelivery->quantity) {
                        $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                        $quantityTaken = $rowDelivery->quantity;
                        $percentTaken = 1;
                        //$deliveryStatus = 1;
                    } elseif ($balanceLeft < $rowDelivery->quantity) {
                        $quantityTaken = $balanceLeft;
                        $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                        $balanceLeft = 0;
                        //$deliveryStatus = 2;
                    }


                    $percentTaken = $percentTaken * 100;

                    if ($quantityTaken < $rowDelivery->quantity_notim) {
                        $amountHandling = ($quantityTaken * $rowDelivery->vh_price);

                    } else {
                        $amountHandling = $quantityTaken * $rowDelivery->vh_price;

                    }
                    //$amountHandling = $quantityTaken * $rowDelivery->vh_price;

                    if ($rowDelivery->vh_pph_tax_category == 1 && $rowDelivery->vh_pph_tax_id != '') {
                        $pphvh2 = ($amountHandling / ((100 - $rowDelivery->vh_pph) / 100)) - $amountHandling;

                    } elseif ($rowDelivery->vh_pph_tax_category == 0 && $rowDelivery->vh_pph_tax_id != '') {
                        $pphvh2 = 0;
                        //$pphfc =  $row->freight_total - ($row->freight_total * ((100 - $fc_pph) / 100));
                    } else {
                        $pphvh2 = 0;
                    }

                    $handlingTotal2 = $amountHandling - $pphvh2;


                    if ($quantityTaken < $rowDelivery->quantity_notim) {
                        $amountFreight = ($quantityTaken * $rowDelivery->freight_price);
                        $amountShrink = ($quantityTaken / $rowDelivery->freight_quantity) * $rowDelivery->amt_claim;
                    } else {
                        $amountFreight = $rowDelivery->freight_quantity * $rowDelivery->freight_price;
                        $amountShrink = $rowDelivery->amt_claim;
                    }
                    //$amountFreight = $quantityTaken * $rowDelivery->freight_price;
                    //$amountShrink = ($quantityTaken/$rowDelivery->freight_quantity)*$rowDelivery->amt_claim;


                    if ($rowDelivery->fc_pph_tax_category == 1 && $rowDelivery->fc_pph_tax_id != '') {
                        $pphfc2 = ($amountFreight / ((100 - $rowDelivery->fc_pph) / 100)) - $amountFreight;
                        $pphfcShrink = ($amountShrink / ((100 - $rowDelivery->fc_pph) / 100)) - $amountShrink;


                    } elseif ($rowDelivery->fc_pph_tax_category == 0 && $rowDelivery->fc_pph_tax_id != '') {
                        $pphfc2 = 0;
                        $pphfcShrink = 0;
                        //$pphfc =  $row->freight_total - ($row->freight_total * ((100 - $fc_pph) / 100));
                    } else {
                        $pphfc2 = 0;
                        $pphfcShrink = 0;
                    }
                    /*
				 if($row->fc_ppn_tax_id != ''){
					 $ppnfc = ($row->freight_total * ((100 + $row->fc_ppn) / 100)) - $row->freight_total;
				 }else{
				     $ppnfc = 0;
			     }*/

                    $freightTotal2 = ($amountFreight + $pphfc2) - ($amountShrink + $pphfcShrink);


                    if ($rowDelivery->uc_pph_tax_category == 1 && $rowDelivery->uc_pph_tax_id != '') {
                        $pphuc2 = (($percentTaken / 100) * $rowDelivery->unloading_price / ((100 - $rowDelivery->uc_pph) / 100)) - ($percentTaken / 100) * $rowDelivery->unloading_price;

                    } elseif ($rowDelivery->uc_pph_tax_category == 0 && $rowDelivery->uc_pph_tax_id != '') {
                        $pphuc2 = 0;
                        //$pphuc =  $row->unloading_total - ($row->unloading_total * ((100 - $row->uc_pph) / 100));
                    } else {
                        $pphuc2 = 0;
                    }


                    $unloadingTotal2 = (($percentTaken / 100) * $rowDelivery->unloading_price) + $pphuc2;

                    $inventoryValue = $quantityTaken * $rowDelivery->contract_price;
                    $totalAmount = $inventoryValue + $unloadingTotal2 + $handlingTotal2 + $freightTotal2;


                    //$deliveryValue = $quantityTaken * $salesUnitPrice;
                    //$inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                    //$totalInventoryValue = $totalInventoryValue + $inventoryValue;
                    //$totalAmount = 0;


                    $sql = "INSERT INTO `adjustment_audit_qty` (shipment_id, transaction_id, percent_taken, qty, cogs_pks,cogs_oa,cogs_handling,cogs_ob,total_amount) VALUES ("
                        . "{$shipmentId}, {$rowDelivery->transaction_id}, {$percentTaken}, "
                        . "{$quantityTaken}, {$inventoryValue}, {$freightTotal2}, {$handlingTotal2}, {$unloadingTotal2}, {$totalAmount})";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


                }
            }
        }


        if ($result !== false) {
            $return_value = '|OK|Data has successfully created.|';
        } else {
            $return_value = '|FAIL|Rejected data failed.|';
        }

    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'contract_pks_detail_data') {
    // <editor-fold defaultstate="collapsed" desc="contract_pks_detail_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractPksDetailId = $myDatabase->real_escape_string($_POST['contractPksDetailId']);
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    $vendorCurahId = $myDatabase->real_escape_string($_POST['vendorCurahId']);
    // </editor-fold>

    if ($contractId != '' && $vendorCurahId != '') {
        $sql = "INSERT INTO `contract_pks_detail` (contract_id, vendor_curah_id, entry_by, entry_date) VALUES ("
            . "{$contractId}, {$vendorCurahId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    } else {
        $sql = "UPDATE `contract_pks_detail` SET "
            . "vendor_curah_id = {$vendorCurahId}, "
            . "WHERE contract_pks_detail_id = {$contractPksDetailId}";
    }
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($result !== false) {
        $return_value = '|OK|Vendor Detail has successfully inserted/updated.|' . $contractPksDetailId . '|';
    } else {
        $return_value = '|FAIL|Insert/update Vendor Detail failed.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_contract_pks_detail') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract_pks_detail">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractPksDetailId = $myDatabase->real_escape_string($_POST['contractPksDetailId']);
    // </editor-fold>

    if ($contractPksDetailId != '') {
        $sql = "DELETE FROM `contract_pks_detail` WHERE contract_pks_detail_id = {$contractPksDetailId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Vendor Detail has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Vendor Detail Group failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_data">

    $return_value = '';
    $boolQuantity = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $contractPksDetailId = $myDatabase->real_escape_string($_POST['contractPksDetailId']);
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
    $transactionDate = $myDatabase->real_escape_string($_POST['transactionDate']);
    $loadingDate = $myDatabase->real_escape_string($_POST['loadingDate']);
    $transactionDate2 = $myDatabase->real_escape_string($_POST['transactionDate2']);
    $vehicleNo = $myDatabase->real_escape_string($_POST['vehicleNo']);
    $vehicleNo2 = $myDatabase->real_escape_string($_POST['vehicleNo2']);
    $unloadingCostId = $myDatabase->real_escape_string($_POST['unloadingCostId']);
    $unloadingDate = $myDatabase->real_escape_string($_POST['unloadingDate']);
    $freightCostId = $myDatabase->real_escape_string($_POST['freightCostId']);
    $handlingCostId = $myDatabase->real_escape_string($_POST['handlingCostId']);
    $permitNo = $myDatabase->real_escape_string($_POST['permitNo']);
    $transactionType = $myDatabase->real_escape_string($_POST['transactionType']);
    $sendWeightRule = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight']));
    $sendWeight2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight2']));
    $blWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['blWeight']));
    $brutoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['brutoWeight']));
    $tarraWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['tarraWeight']));
    $nettoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['nettoWeight']));
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $notes2 = $myDatabase->real_escape_string($_POST['notes2']);
    $driver = $myDatabase->real_escape_string($_POST['driver']);
    $block = $myDatabase->real_escape_string($_POST['block']);
    $tempRSB = $myDatabase->real_escape_string($_POST['rsb']);
    $tempGGL = $myDatabase->real_escape_string($_POST['ggl']);
    $tempRG = $myDatabase->real_escape_string($_POST['rg']);
    $tempUncertified = $myDatabase->real_escape_string($_POST['un']);

    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $supplierId = $myDatabase->real_escape_string($_POST['supplierId']);
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $isTaxable = $myDatabase->real_escape_string($_POST['isTaxable']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $stockpileCode = '';
    $unitPrice = 0;
    $balanceQuantity = 0;
    $contractId = 0;
    $custTaxId = 'NULL';
    $curahTaxId = 'NULL';
    $ucTaxId = 0;
    $fcTaxId = 0;
    $t_date = str_replace('/', '-', $unloadingDate);
    $t_date2 = str_replace('/', '-', $transactionDate2);
    $currentYear2 = date('y', strtotime($t_date));
    $currentYear3 = date('y', strtotime($t_date2));
	
    $slipUpload = $myDatabase->real_escape_string($_POST['idSuratTugas']);
	
    $persenPecahSlip = $myDatabase->real_escape_string($_POST['persenPecahSlip']);
    $tempTransactionId = $myDatabase->real_escape_string($_POST['tempTransactionId']);
	//== Start Add by Eva
    $newAmountClaim = $myDatabase->real_escape_string($_POST['newAmountClaim']);
	$qtyAddShrink = $myDatabase->real_escape_string($_POST['qtyAddShrink']);
	$priceAddShrink = $myDatabase->real_escape_string($_POST['priceAddShrink']);
    //== End Add by Eva
	// update by idris
	$photoDocument = $_POST['photoDocument'];
    // Base64 Decode
    $img = $photoDocument;
    $img = str_replace('data:image/jpeg;base64,', '', $img);
    $img = str_replace(' ', '+', $img);
    $file = base64_decode($img);
    $photoDocument = addslashes($file);
    //photoTicket
    $photoTicket = $_POST['photoTicket'];
    $img = $photoTicket;
    $img = str_replace('data:image/jpeg;base64,', '', $img);
    $img = str_replace(' ', '+', $img);
    $file = base64_decode($img);
    $photoTicket = addslashes($file);
	
	$freightCostSalesId = $myDatabase->real_escape_string($_POST['freightCostSalesId']);
	$vehicleNoSales = $myDatabase->real_escape_string($_POST['vehicleNoSales']);
	$sim = $myDatabase->real_escape_string($_POST['sim']);
	$driverSales = $myDatabase->real_escape_string($_POST['driverSales']);
	$doSales = $myDatabase->real_escape_string($_POST['doSales']);
	
	
    // </editor-fold>


    $allowInsert = false;
    $allowInsert2 = false;
    $date = new DateTime();
    $todayDate = $date->format('Y-m-d');
    $date1 = new DateTime($todayDate);

    $dateTrans = str_replace("/", "-", $myDatabase->real_escape_string($_POST['unloadingDate']));
    $dt = date('Y-m-d', strtotime($dateTrans));
    $date2 = new DateTime($dt);
    $a = $date1->format('Y-m-d');
    $b = $date2->format('Y-m-d');
    $diff = date_diff(date_create($a), date_create($b));
    $interval = $diff->days;

    $dateTrans2 = str_replace("/", "-", $myDatabase->real_escape_string($_POST['transactionDate2']));
    $dt2 = date('Y-m-d', strtotime($dateTrans2));
    $date22 = new DateTime($dt2);
    $a2 = $date1->format('Y-m-d');
    $b2 = $date22->format('Y-m-d');
    $diff2 = date_diff(date_create($a2), date_create($b2));
    $interval2 = $diff2->days;

    if ($interval < 5) {
        $allowInsert = true;
    }

    if ($interval2 < 5) {
        $allowInsert2 = true;
    }

    $sql = "SELECT * FROM user_module WHERE user_id = {$_SESSION['userId']} and module_id = 30";
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_object()) {
            if ($row->module_id == 30) {
                $allowInsert = true;
                $allowInsert2 = true;
            }
        }
    }

    if ($isTaxable == '') {
        $isTaxable = 0;
    }

    if ($ppn == '') {
        $ppn = 0;
    }

    if ($pph == '') {
        $pph = 0;
    }

    if ($contractPksDetailId == '') {
        $contractPksDetailId = 0;
    }


    if ($transactionType == 1) {
        if ($allowInsert) {
            // <editor-fold defaultstate="collapsed" desc="IN">
            if ($stockpileId != '' && $stockpileContractId != '' && $loadingDate != '' && $vehicleNo != '' && $unloadingCostId != '' &&
                $unloadingDate != '' && $freightCostId != '' && $handlingCostId != '' && $transactionType != '' && $sendWeightRule >= 0 &&
                $brutoWeight >= 0 && $tarraWeight >= 0 && $nettoWeight >= 0 && $driver != '' && $vendorId != '' && $laborId != '') {

                if ($supplierId == '') {
                    $supplierId = "NULL";
                }
                if ($slipUpload == '') {
                    $slipUpload = 0;
                }
                // check balance contract & get unit price
                $sql = "SELECT s.stockpile_code, con.price_converted, sc.contract_id, con.contract_type, con.qty_rule, con.quantity_rule,
			DATE_FORMAT(con.entry_date,'%Y-%m-%d') AS contractDate,
                        ((SELECT COALESCE(SUM(quantity), 0) FROM stockpile_contract WHERE contract_id = sc.contract_id
                        ) - (SELECT COALESCE(SUM(adjustment), 0) FROM contract_adjustment WHERE contract_id = sc.contract_id
                        )) - (
                            SELECT CASE WHEN c.contract_type = 'C' THEN COALESCE(SUM(t.quantity), 0)
                ELSE COALESCE(SUM(t.send_weight), 0) END 
                FROM TRANSACTION t LEFT JOIN stockpile_contract sc ON t.stockpile_contract_id = sc.`stockpile_contract_id`
                LEFT JOIN contract c ON c.contract_id = sc.contract_id
                WHERE sc.contract_id =  con.contract_id
                        ) AS balance, s.freight_weight_rule, s.curah_weight_rule, v.pph_tax_id
                    FROM stockpile_contract sc
                    INNER JOIN stockpile s
                        ON s.stockpile_id = sc.stockpile_id
                    INNER JOIN contract con
                        ON con.contract_id = sc.contract_id
                    INNER JOIN vendor v
                        ON v.vendor_id = con.vendor_id
                    WHERE stockpile_contract_id = {$stockpileContractId}";
                $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if ($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                    $rowStockpile = $resultStockpile->fetch_object();
                    $stockpileCode = $rowStockpile->stockpile_code;
                    $contractId = $rowStockpile->contract_id;
                    $unitPrice = $rowStockpile->price_converted;
                    $contractType = $rowStockpile->contract_type;
                    $freightWeightRule = $rowStockpile->freight_weight_rule;
                    $curahWeightRule = $rowStockpile->curah_weight_rule;
					$quantityRule = $rowStockpile->quantity_rule;
                    $contractDate = $rowStockpile->contractDate;
                    if ($contractType == 'P') {
                        $balanceQuantity = $rowStockpile->balance;
                    } elseif ($contractType == 'C') {
                        $balanceQuantity = $rowStockpile->balance;
                        if ($rowStockpile->pph_tax_id != 0 && $rowStockpile->pph_tax_id != '') {
                            $curahTaxId = $rowStockpile->pph_tax_id;
                        }
                    }
                    $qty_rule = $rowStockpile->qty_rule;
                    if ($qty_rule == 0) {
                        $sendWeight = $sendWeightRule;
                    } else if ($qty_rule == 1) {
                        $sendWeight = $nettoWeight;
                    } else {
                        if ($sendWeightRule < $nettoWeight) {
                            $sendWeight = $sendWeightRule;
                        } elseif ($nettoWeight < $sendWeightRule) {
                            $sendWeight = $nettoWeight;
                        } else {
                            $sendWeight = $sendWeightRule;
                        }

                    }
                }

                // get netto weight
                //$nettoWeight = $brutoWeight - $tarraWeight;

                // get freight weight
                $freightRule = '';
                $freightQuantity = 0;
                $sqlfc = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                $resultFreight = $myDatabase->query($sqlfc, MYSQLI_STORE_RESULT);
                if ($resultFreight !== false && $resultFreight->num_rows == 1) {
                    $rowFreight = $resultFreight->fetch_object();
                    $freightRule = $rowFreight->freight_rule;


                }

                if ($freightRule == 0 && $nettoWeight < $sendWeight) {
                    $freightQuantity = $nettoWeight;
                } else if ($freightRule == 0 && $nettoWeight > $sendWeight) {
                    $freightQuantity = $sendWeight;
                } else if ($freightRule == 2) {
                    $freightQuantity = $nettoWeight;
                } else if ($freightRule == 1) {
                    $freightQuantity = $sendWeight;
                } else if ($nettoWeight == $sendWeight) {
                    $freightQuantity = $sendWeight;
                } else {
                    $freightQuantity = $sendWeight;
                }

                /*if($freightRule == 1) {
				$freightQuantity = $sendWeight;
            }else if($freightRule == 0) {
                if($nettoWeight < $sendWeight) {
                    $freightQuantity = $nettoWeight;
                } else if($nettoWeight > $sendWeight) {
                    $freightQuantity = $sendWeight;
                } else {
                    $freightQuantity = $sendWeight;
                }
            }*/ /*elseif($freightWeightRule == 1) {
                $freightQuantity = $sendWeight;
            } elseif($freightWeightRule == 2) {
                $freightQuantity = $nettoWeight;
            } else {
                $freightQuantity = $sendWeight;
            }*/

                // get shrink condition
//            $quantity = $nettoWeight;
//            $sql = "SELECT * FROM `condition` WHERE category_id = 1 AND contract_id = {$contractId}";
//            $resultCondition = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//            if($resultCondition !== false && $resultCondition->num_rows == 1) {
//                $rowCondition = $resultCondition->fetch_object();
//                $quantity = ${$rowCondition->rule};
//            }
                if ($contractDate <= $b) {
                    if ($sendWeight <= $balanceQuantity || ($contractType == 'C' && $balanceQuantity >= 0)) {
                        // get shrink
                        $shrink = 0;
                        if ($contractType == 'P') {
                            if ($nettoWeight < $sendWeight) {
                                $quantity = $nettoWeight;
                                $shrink = $sendWeight - $nettoWeight;
                            } elseif ($nettoWeight > $sendWeight) {
                                $quantity = $sendWeight;
                                $shrink = 0;
                            } else {
                                $quantity = $sendWeight;
                            }
                        } elseif ($contractType == 'C') {
                            if ($quantityRule == 0) {
                                if ($nettoWeight < $sendWeight) {
                                    $quantity = $nettoWeight;
                                    $shrink = $sendWeight - $nettoWeight;
                                } elseif ($nettoWeight > $sendWeight) {
                                    $quantity = $sendWeight;
                                    $shrink = 0;
                                } else {
                                    $quantity = $sendWeight;
                                }
                            } elseif ($quantityRule == 1) {
								$quantity = $sendWeight;
                                if ($nettoWeight > $sendWeight) {
                                    $shrink = 0;
                                } elseif ($nettoWeight < $sendWeight){
									$shrink = $sendWeight - $nettoWeight;
								}
                            } elseif ($quantityRule == 2) {
                                $quantity = $nettoWeight;
                                $shrink = $sendWeight - $nettoWeight;
                            } else {
                                $quantity = $sendWeight;
                            }
                        }

                        // get next slip no
                        // $checkSlipNo = $stockpileCode /*.'-'. $currentYear*/;

                        $checkSlipNo = $stockpileCode . '-' . $currentYear2;

//                $sql = "SELECT LPAD(COUNT(1) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ";
//                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                        $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($resultSlip->num_rows == 0) {
                            $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        }
                        $rowSlipNo = $resultSlip->fetch_object();
                        $nextSlipNo = $rowSlipNo->next_id;
                        $slipNo = $checkSlipNo . '-' . $nextSlipNo;

                        // get freight cost
                        if ($freightCostId == 'NONE') {
                            $freightCostId = 'NULL';
                            $freightPrice = 0;
                            //$freightQuantity2111 = 0;
                        } else {
                            $sqlF = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                            $resultF = $myDatabase->query($sqlF, MYSQLI_STORE_RESULT);
                            if ($resultF !== false && $resultF->num_rows == 1) {
                                $rowF = $resultF->fetch_object();
                                $freightPrice = $rowF->price_converted;
                                if ($rowF->freight_rule == 1) {
                                    //$freightQuantity2111 = $sendWeight;
                                } else {
                                    //$freightQuantity2111 = $freightQuantity;
                                }
                                if ($rowF->pph_tax_id != 0 && $rowF->pph_tax_id != '') {
                                    $fcTaxId = $rowF->pph_tax_id;
                                } else {
                                    $fcTaxId = 0;
                                }
                            }
                        }

                        // get handling cost
                        if ($handlingCostId == 'NONE') {
                            $handlingCostId = 'NULL';
                            $handlingQuantity = 0;
                            $handlingPrice = 0;
                        } else {
                            $sql = "SELECT vhc.vendor_handling_id, vhc.price_converted, vh.pph_tax_id, vh.vendor_handling_rule
                            FROM `vendor_handling_cost` vhc 
                            INNER JOIN vendor_handling vh
                                ON vh.vendor_handling_id = vhc.vendor_handling_id
                            WHERE vhc.handling_cost_id = {$handlingCostId}";
                            $resultHandling = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($resultHandling !== false && $resultHandling->num_rows == 1) {
                                $rowHandling = $resultHandling->fetch_object();
                                $handlingPrice = $rowHandling->price_converted;
                                if ($rowHandling->vendor_handling_rule == 1) {
                                    $handlingQuantity = $sendWeight;
                                } else {
                                    $handlingQuantity = $nettoWeight;
                                }

                            }
                        }

                        // get unloading cost
                        if ($unloadingCostId == 'NONE') {
                            $unloadingCostId = 'NULL';
                            $unloadingPrice = 0;
                        } else {
                            $sql = "SELECT uc.price_converted 
                            FROM `unloading_cost` uc 
                            WHERE uc.unloading_cost_id = {$unloadingCostId}";
							//echo " YE " . $sql;
                            $resultUnloading = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($resultUnloading !== false && $resultUnloading->num_rows == 1) {
                                $rowUnloading = $resultUnloading->fetch_object();

                                $unloadingPrice2 = $rowUnloading->price_converted;


                                $sql2 = "SELECT l.laborRules FROM `labor` l WHERE l.labor_id = {$laborId}";
                                $resultLabor2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                                if ($resultLabor2 !== false && $resultLabor2->num_rows == 1) {
                                    $rowLabor2 = $resultLabor2->fetch_object();
                                    if ($rowLabor2->laborRules == 1) {
                                        $unloadingPrice = $unloadingPrice2;
                                    } elseif ($rowLabor2->laborRules == 2) {

                                        if ($nettoWeight < $sendWeight) {
                                            $unloadingPrice = $unloadingPrice2 * $nettoWeight;
                                        } elseif ($nettoWeight > $sendWeight) {
                                            $unloadingPrice = $unloadingPrice2 * $sendWeight;
                                        } else {
                                            $unloadingPrice = $unloadingPrice2 * $nettoWeight;
                                        }

                                    } elseif ($rowLabor2->laborRules == 3) {
                                        $unloadingPrice = $unloadingPrice2 * $nettoWeight;
                                    } elseif ($rowLabor2->laborRules == 4) {
                                        $unloadingPrice = $unloadingPrice2 * $sendWeight;
                                    } else {
                                        $unloadingPrice = $unloadingPrice2;
                                    }
                                } else {
                                    $unloadingPrice = $unloadingPrice2;
                                }
                            }
                        }
						
						$boolLabor = true;
						if($unloadingPrice > 0 && $laborId == 'NONE') {
							$boolLabor = false;
						}


                        if ($laborId == 'NONE') {
                            $laborId = 'NULL';
                        } else {
                            $sql = "SELECT l.pph_tax_id
                            FROM `labor` l
                            WHERE l.labor_id = {$laborId}";
                            $resultLabor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($resultLabor !== false && $resultLabor->num_rows == 1) {
                                $rowLabor = $resultLabor->fetch_object();
                                if ($rowLabor->pph_tax_id != 0 && $rowLabor->pph_tax_id != '') {
                                    $ucTaxId = $rowLabor->pph_tax_id;
                                } else {
                                    $ucTaxId = 0;
                                }
                            }
                        }

                        // get inventory value
                        $inventoryValue = ($freightQuantity * $freightPrice) + $unloadingPrice + ($quantity * $unitPrice);

                        //check double input
                        $sqlTiket2 = "SELECT pecah_slip FROM transaction_timbangan WHERE transaction_id = '{$slipUpload}'";
                        $resultTiket2 = $myDatabase->query($sqlTiket2, MYSQLI_STORE_RESULT);
                        if ($resultTiket2 !== false && $resultTiket2->num_rows == 1) {
                            $rowTiket2 = $resultTiket2->fetch_object();
                            $pecah_slip = $rowTiket2->pecah_slip;
                            //$boolTiket = false;


                        }

                        $boolTiket = true;
                        if ($slipUpload != '' && $slipUpload != 'NULL' && $slipUpload != 0 && $pecah_slip == 0) {

                            $sqlTiket = "SELECT COUNT(*) as tiket,COALESCE(SUM(persen_pecah_slip),0) AS persen FROM transaction WHERE notim_status = 0 AND t_timbangan = '{$slipUpload}'";
                            $resultTiket = $myDatabase->query($sqlTiket, MYSQLI_STORE_RESULT);
                            if ($resultTiket !== false && $resultTiket->num_rows == 1) {
                                $rowTiket = $resultTiket->fetch_object();


                                if ($rowTiket->tiket >= 1) {
                                    $boolTiket = false;

                                }
                            }
                        }

                        if ($pecah_slip == 1) {
                            $sqlTiket1 = "SELECT COALESCE(SUM(persen_pecah_slip),0) AS persen FROM transaction WHERE notim_status = 0 AND t_timbangan = '{$slipUpload}'";
                            $resultTiket1 = $myDatabase->query($sqlTiket1, MYSQLI_STORE_RESULT);
                            if ($resultTiket1 !== false && $resultTiket1->num_rows == 1) {
                                $rowTiket1 = $resultTiket1->fetch_object();

                                if ($rowTiket1->persen > 0) {
                                    $persenPecahSlip = 1 - $rowTiket1->persen;
                                }

                            }
                        } else {
                            $persenPecahSlip = 0;
                        }

                        //Check Closing Date
                        $newTransactionDate = implode("-", array_reverse(explode("/", $unloadingDate)));
                        $checkClosingDate = explode('-', closingDate($newTransactionDate, 'Nota Timbang - Input'));
                        $boolClosing = $checkClosingDate[0];
                        $closingDate = $checkClosingDate[1];


                        $sqlChckSlip = "SELECT slip_no FROM TRANSACTION WHERE slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                        $resultChckSlip = $myDatabase->query($sqlChckSlip, MYSQLI_STORE_RESULT);
                        if ($resultChckSlip !== false && $resultChckSlip->num_rows == 1) {
                            $rowChckSlip = $resultChckSlip->fetch_object();

                            $lastChckSlip = $rowChckSlip->slip_no;

                        }
                        if ($lastChckSlip != $slipNo) {
							
							if($boolLabor){
                            if ($boolTiket) {
                                // insert into transaction
                                if ($boolClosing) {
                                    $sql = "INSERT INTO `transaction` (photo_document,photo_ticket,slip_no, t_timbangan, stockpile_contract_id, transaction_date, loading_date, vehicle_no, labor_id, unloading_cost_id, "
                                        . "unloading_date, freight_cost_id, handling_cost_id, permit_no, transaction_type, vendor_id, send_weight, bruto_weight, tarra_weight, "
                                        . "netto_weight, notes, driver, freight_quantity, handling_quantity, quantity, shrink, freight_price, handling_price, unloading_price, unit_price, "
                                        . "inventory_value, block, curah_tax_id, uc_tax_id, fc_tax_id, entry_by, entry_date, contract_pks_detail_id, persen_pecah_slip, rsb, ggl, rsb_ggl, uncertified) "
                                        . "VALUES ('{$photoDocument}','{$photoTicket}','{$slipNo}', '{$slipUpload}', {$stockpileContractId}, STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), STR_TO_DATE('{$loadingDate}', '%d/%m/%Y'), "
                                        . "'{$vehicleNo}', {$laborId}, {$unloadingCostId}, STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), {$freightCostId}, {$handlingCostId}, '{$permitNo}', "
                                        . "{$transactionType}, {$supplierId}, {$sendWeight}, {$brutoWeight}, {$tarraWeight}, {$nettoWeight}, '{$notes}', "
                                        . "'{$driver}', {$freightQuantity}, {$handlingQuantity}, {$quantity}, {$shrink}, {$freightPrice}, {$handlingPrice}, {$unloadingPrice}, {$unitPrice}, {$inventoryValue}, '{$block}', "
                                        . "{$curahTaxId}, {$ucTaxId}, {$fcTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$contractPksDetailId}','{$persenPecahSlip}', {$tempRSB}, {$tempGGL}, {$tempRG}, {$tempUncertified})";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                    if ($result !== false) {
                                        $return_value = '|OK|Transaction has inserted successfully.|';

                                        $transactionId = $myDatabase->insert_id;

                                        // if curah update contract and stockpile_contract quantity
                                    if ($contractType == 'C') {
                                            /*$sql = "UPDATE contract SET quantity = {$quantity} WHERE contract_id = {$contractId}";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                    $sql = "UPDATE stockpile_contract SET quantity = {$quantity} WHERE stockpile_contract_id = {$stockpileContractId}";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/
                                        }

                                        $sql1 = "SELECT tt.send_weight,COALESCE(SUM(t.send_weight),0) AS totalSend, tt.`pecah_slip`
										 FROM transaction_timbangan tt 
										 LEFT JOIN TRANSACTION t ON t.t_timbangan = tt.transaction_id 
										 WHERE tt.transaction_id = '{$slipUpload}'";
                                        $result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
                                        if ($result1 !== false && $result1->num_rows == 1) {
                                            $row1 = $result1->fetch_object();
                                            $totalSend = $row1->totalSend;
                                            if ($row1->totalSend == $row1->send_weight && $row1->pecah_slip == 1) {

                                                $sql = "UPDATE transaction_timbangan SET notim_status = 1 WHERE transaction_id = '{$slipUpload}'";
                                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                            } else if ($row1->pecah_slip == 0) {
                                                $sql = "UPDATE transaction_timbangan SET notim_status = 1 WHERE transaction_id = '{$slipUpload}'";
                                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                            }

                                        }


                                        $sql = "CALL sp_shrink_weight({$transactionId})";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
										
										//== Start Add by Eva
                                        $sql_shrink = "SELECT * FROM transaction_shrink_weight 
                                                        WHERE transaction_id = '{$transactionId}'";
                                        $result_shrink = $myDatabase->query($sql_shrink, MYSQLI_STORE_RESULT);
                                        
                                        if($result_shrink !== false && $result_shrink->num_rows == 1){
                                            $rowData = $result_shrink->fetch_object();
                                            $shrink_id = $rowData->shrink_id;
                                            $transaction_id = $rowData->transaction_id;
                                            $stockpile_name = $rowData->stockpile_name;
                                            $send_weight = $rowData->send_weight;
                                            $netto_weight = $rowData->netto_weight;
                                            $susut = $rowData->susut;
                                            $shrink_tolerance_kg = $rowData->shrink_tolerance_kg;
                                            $persen = $rowData->persen;
                                            $weight_persen = $rowData->weight_persen;
                                            $amt_claim = $rowData->amt_claim;
                                            $trx_shrink_tolerance_kg = $rowData->trx_shrink_tolerance_kg;
                                            $trx_shrink_tolerance_persen = $rowData->trx_shrink_tolerance_persen;
                                            $trx_shrink_claim = $rowData->trx_shrink_claim;
											
											
										}else{
											$shrink_id = 0;
                                            $transaction_id = $transactionId;
                                            $stockpile_name = '-';
                                            $send_weight = $sendWeight;
                                            $netto_weight = $nettoWeight;
                                            $susut = $shrink;
                                            $shrink_tolerance_kg = 0;
                                            $persen = 0;
                                            $weight_persen = 0;
                                            $amt_claim = $newAmountClaim;
                                            $trx_shrink_tolerance_kg = 0;
                                            $trx_shrink_tolerance_persen = 0;
                                            $trx_shrink_claim = 0;
										}
                                            //if($newAmountClaim > 0 && $newAmountClaim !=''){
											if($newAmountClaim !='' || $newAmountClaim != null){
												$sqlslb = "INSERT INTO `transaction_additional_shrink` (shrink_id,
																transaction_id, stockpile_name, send_weight,
                                                                netto_weight, susut, shrink_tolerance_kg, persen, weight_persen, price_add_shrink, qty_add_shrink, amt_claim, 
                                                                trx_shrink_tolerance_kg, trx_shrink_tolerance_persen, trx_shrink_claim, update_by, 
                                                                update_date) VALUES ("
                                                                . "'{$shrink_id}','{$transaction_id}','{$stockpile_name}','{$send_weight}',
                                                                '{$netto_weight}','{$susut}','{$shrink_tolerance_kg}','{$persen}','{$weight_persen}','{$priceAddShrink}','{$qtyAddShrink}',
                                                                '{$newAmountClaim}','{$trx_shrink_tolerance_kg}','{$trx_shrink_tolerance_persen}',
                                                                '{$trx_shrink_claim}','{$_SESSION['userId']}', STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                                $resultslb = $myDatabase->query($sqlslb, MYSQLI_STORE_RESULT);
												
                                                //$sqlhistory = "INSERT INTO `history_shrink_weight` (shrink_id, transaction_id, //stockpile_name, send_weight,
                                                //                netto_weight, susut, shrink_tolerance_kg, persen, weight_persen, amt_claim, 
                                                //                trx_shrink_tolerance_kg, trx_shrink_tolerance_persen, trx_shrink_claim, update_by, 
                                                //                update_date) VALUES ("
                                                 //               . "'{$shrink_id}','{$transaction_id}','{$stockpile_name}','{$send_weight}',
                                                //                '{$netto_weight}','{$susut}','{$shrink_tolerance_kg}','{$persen}','{$weight_persen}',
                                                //                '{$amt_claim}','{$trx_shrink_tolerance_kg}','{$trx_shrink_tolerance_persen}',
                                                //                '{$trx_shrink_claim}','{$_SESSION['userId']}', STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                                //$resulthistory = $myDatabase->query($sqlhistory, MYSQLI_STORE_RESULT);

                                                //if ($resulthistory !== false) {
                                                //    $sql = "UPDATE `transaction_shrink_weight` SET "
                                                //    . "amt_claim = '{$newAmountClaim}'"
                                                //   . "WHERE transaction_id = {$transactionId}";
                                                //}
                                                //$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                            }
                                        //}
                                        //== End Add by Eva
										
                                        if ($qty_rule !== 0) {
                                            $sql = "INSERT INTO contract_netto (transaction_id, send_weight) VALUES ({$transactionId},{$sendWeightRule})";
                                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        }

                                        insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
										
										insertReportGL($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                                        unset($_SESSION['transaction']);
                                    } else {
                                        $return_value = '|FAIL|Failed insert transaction.| ' . $sql . '';
                                    }
                                } else {
                                    echo $closingDate;
                                    die();
                                } //tutup else closingDate
                            } else {
                                $return_value = '|FAIL|Tiket timbang sudah diinput.|';
                            }
							}else{
							$return_value = '|FAIL|Unloading Org tidak boleh NONE.|';
					
							}

                        } else {
                            $return_value = '|FAIL|No Slip Sudah Ada.|';
                        }

                    } else {
                        $return_value = '|FAIL|The quantity exceed the balance of the contract.|';
                    }

                } else {
                    $return_value = '|FAIL|Tanggal transaksi harus melebihi tanggal kontrak.|' . $contractDate . '|' . $unloadingDate . '|';
                }
            } else {
                $return_value = '|FAIL|Please fill the required fields.|' . $sql . '';
            }

        } else {
            $return_value = '|FAIL|Tanggal transaksi sudah lebih dari 5 hari.|';
        }
        // </editor-fold>
    } elseif ($transactionType == 2 && $_POST['_method'] == 'INSERT_PREVIEW') {
        // <editor-fold defaultstate="collapsed" desc="OUT">
        $rsb = $myDatabase->real_escape_string($_POST['rsb1']);
        $ggl = $myDatabase->real_escape_string($_POST['ggl1']);
        $rsb_ggl = $myDatabase->real_escape_string($_POST['rsb_ggl']);
        $uncertified1 = $myDatabase->real_escape_string($_POST['uncertified']);

        $msgError_R = $myDatabase->real_escape_string($_POST['qtyRSB_error1']);
        $msgError_G = $myDatabase->real_escape_string($_POST['qtyGGL_error1']);
        $msgError_RG = $myDatabase->real_escape_string($_POST['qtyRG_error1']);
        $msgError_UN = $myDatabase->real_escape_string($_POST['qtyUN_error1']);

        $whereProperty = '';
        $boolean1 = true;

        $qtyRSB = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty_rsb']));
        $qtyGGL = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty_ggl']));
        $qty_RG = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty_RG']));
        $qty_uncertified = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty_uncertified']));
		
		$transactionDate =  $myDatabase->real_escape_string($_POST['transactionDate2']);
        $newtransactionDate2 = implode("-", array_reverse(explode("/", $transactionDate)));
		
		
		
        if($freightCostSalesId != '' && $freightCostSalesId != 'NONE' && $freightCostSalesId != 0){

            $sqlsf = "SELECT a.`freight_rule`, a.`pph_tax_id`, b.price_converted FROM freight_local_sales a
            LEFT JOIN freight_cost_local_sales b ON a.`freight_id` = b.`freight_id`
            WHERE b.`freight_cost_id` = {$freightCostSalesId}";
            $resultSalesf = $myDatabase->query($sqlsf, MYSQLI_STORE_RESULT);
            if ($resultSalesf !== false && $resultSalesf->num_rows == 1) {
                $rowSalesf = $resultSalesf->fetch_object();

                $fcSalesTaxId = $rowSalesf->pph_tax_id;
                $freightSalesPrice = $rowSalesf->price_converted;

                if($rowSalesf->freight_rule == 2){
                        if($sendWeight2 < $blWeight){
                            $freightSalesQty = $sendWeight2;
                        }else if ($sendWeight2 > $blWeight){
                            $freightSalesQty = $blWeight;
                        }else{
                            $freightSalesQty = $blWeight;
                        }
    
                    }else if($rowSalesf->freight_rule == 0){
                        $freightSalesQty = $sendWeight2;
                    }else{
                        $freightSalesQty = $blWeight;
                    }
            }

        }else{
		$freightSalesQty = 0;
		$fcSalesTaxId = 0;
		$freightSalesPrice = 0;
		$freightCostSalesId = 0;
		}


        //JIKA yg dipilih hanya 1 jeni Sertifikat
        if($rsb == 1 && $ggl == 0 && $rsb_ggl == 0 && $uncertified1 == 0){  //RSB
            $whereProperty = "AND t.rsb = 1";
        } else if($ggl == 1 && $rsb == 0 && $rsb_ggl == 0 && $uncertified1 == 0 ){ //GGL
            $whereProperty = "AND t.ggl = 1";
        }else if($rsb_ggl == 1 && $ggl == 0 && $rsb == 0 && $uncertified1 == 0){ //rsb + ggl
            $whereProperty = "AND t.rsb_ggl = 1";
        }else if($uncertified1 == 1 && $ggl == 0 && $rsb_ggl == 0 && $rsb == 0){  //uncertified
            $whereProperty = "AND t.uncertified = 1";
        }
        
        //JIKA yg dipilih hanya 2 jeni Sertifikat
        else if($rsb == 1 && $ggl == 1  && $rsb_ggl == 0  && $uncertified1 == 0){ //rsb, ggl
            $whereProperty = "AND (t.rsb = 1 OR t.ggl = 1)";
        }else if($rsb == 1 && $rsb_ggl == 1  && $ggl == 0  && $uncertified1 == 0){ //rsb. (rsb+ggl)
            $whereProperty = "AND (t.rsb = 1 OR t.rsb_ggl = 1 )";
        }else if($rsb == 1 && $uncertified1 == 1 && $ggl == 0  && $rsb_ggl == 0){  //rsb, uncertified
            $whereProperty = "AND (t.rsb = 1 OR t.uncertified = 1)";
        }else if($ggl == 1 && $rsb_ggl == 1 && $rsb == 0  && $uncertified1 == 0){ // ggl, (rsb+ggl)
            $whereProperty = "AND (t.ggl = 1 OR t.rsb_ggl = 1)";
        }else if($ggl == 1 && $uncertified1 == 1 && $rsb == 0  && $rsb_ggl == 0){ // ggl, uncertified
            $whereProperty = "AND (t.ggl = 1 OR t.uncertified = 1)";
        }else if($rsb_ggl == 1 && $uncertified1 == 1 && $rsb == 0  && $ggl == 0){  // (rsb+ggl), uncertified
            $whereProperty = "AND (t.rsb_ggl = 1 OR t.uncertified = 1)";
        }
        
        //JIKA yg dipilih hanya 3 jeni Sertifikat
        else if($rsb == 1 && $ggl == 1 && $rsb_ggl == 1 && $uncertified1 == 0){  //rsb, ggl, (rsb+ggl)
            $whereProperty = "AND (t.rsb = 1 OR t.ggl = 1 OR t.rsb_ggl = 1)";
        }else if($rsb == 1 && $ggl == 1 &&  $uncertified1 == 1 && $rsb_ggl == 0){ //rsb, ggl, uncertified 
            $whereProperty = "AND (t.rsb = 1 OR t.ggl = 1 OR t.uncertified = 1)";
        }else if($rsb == 1 && $rsb_ggl == 1 && $uncertified1 == 1 && $ggl == 0){  //rsb, (rsb+ggl), uncertified
            $whereProperty = "AND (t.rsb = 1 OR t.rsb_ggl = 1 OR t.uncertified = 1)";
        }else if($ggl == 1 && $rsb_ggl == 1 && $uncertified1 == 1 && $rsb == 0){ //ggl, (rsb+ggl), uncerti
            $whereProperty = "AND ( t.ggl = 1 OR t.rsb_ggl = 1 OR t.uncertified = 1)";
        }
        
        //JIKA yg dipilih hanya semua jeni Sertifikat
        else if($rsb == 1 && $ggl == 1 && $rsb_ggl == 1 && $uncertified1 == 1){  //all
            $whereProperty = "AND (t.rsb = 1 OR t.ggl = 1 OR t.rsb_ggl = 1 OR t.uncertified = 1)";
        }


        //VALIDASI JIKA ADA NOTIM YG BELUM DI APPROVE DI PREVIEW
        $sqlValidasi = "SELECT sl.sales_id, sl.`sales_no`, sh.`shipment_code`, sl.stockpile_id FROM temp_transaction tt
            LEFT JOIN SHIPMENT sh ON sh.shipment_id = tt.`shipment_id`
            LEFT JOIN sales sl ON sl.`sales_id` = sh.`sales_id`
            WHERE tt.`status` = 0 AND sl.`stockpile_id` = {$stockpileId} AND tt.status <> 2";
        $resultValidasi = $myDatabase->query($sqlValidasi, MYSQLI_STORE_RESULT);
        $validasiCount = $resultValidasi->num_rows;

	//VALIDATION QTY INPUTAN < QTY AVAILABLE => UNCERTIFIED ------------------------------------------------------------------------
        $sqlSP = "SELECT stockpile_code FROM stockpile  WHERE stockpile_id = {$stockpileId}";
        $resultSP = $myDatabase->query($sqlSP, MYSQLI_STORE_RESULT);
        $rowSP = $resultSP->fetch_object();
        $stockpileCode = $rowSP->stockpile_code;

        $sql = "SELECT ROUND(SUM( CASE WHEN t.transaction_type = 1 AND (t.uncertified = 1 OR t.uncertified = 0 OR t.uncertified IS NULL) THEN t.quantity 
                WHEN t.transaction_type = 2 AND (t.uncertified = 1 OR t.uncertified = 0 OR t.uncertified IS NULL) THEN -1 * t.quantity ELSE 0 END) -
                SUM(CASE WHEN t.transaction_type = 2  AND (t.uncertified = 1 OR t.uncertified = 0 OR t.uncertified IS NULL) THEN t.shrink ELSE 0 END))
                AS qty_availableUN,
                ROUND(SUM(CASE WHEN t.transaction_type = 2 THEN t.shrink ELSE 0 END),2 ) AS shrink
            FROM `transaction` t
            LEFT JOIN (
                    SELECT d.transaction_id, d.quantity 
                        FROM delivery d 
                        LEFT JOIN TRANSACTION t ON t.transaction_id = d.`transaction_id` 
                        WHERE t.`delivery_status` = 2 
            )
            d ON d.transaction_id = t.`transaction_id`
            WHERE SUBSTRING(t.slip_no,1,3) = '{$stockpileCode}' AND t.transaction_date <=  '{$newtransactionDate2}' 
            ORDER BY t.transaction_date ASC";
            // echo $sql;
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($result !== false && $result->num_rows == 1) {
                $row = $result->fetch_object();	
                $beginingUN = $row->qty_availableUN;
            }
        //END VALIDATION UNCERTIFIED---------------------------------------------------------------------------------------------------

        if($validasiCount == 0){
             if($beginingUN >= $qty_uncertified ){
                if ($allowInsert2) {
                    if ($stockpileId != '' && $salesId != '' && $shipmentId != '' && $transactionDate2 != '' && $vehicleNo2 != '' && $sendWeight2 != '' && $blWeight != '') {
                             // check stockpile detail & transaction balance
                        $sql = "SELECT s.stockpile_code, s.stockpile_name, 
                        (
                            SELECT COALESCE(SUM(t.quantity), 0) FROM `transaction` t
                            INNER JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                            WHERE sc.stockpile_id = s.stockpile_id
                            AND t.transaction_type = 1 {$whereProperty} 
                        ) AS available_balance,
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction` 
                            WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                            AND transaction_type = 2 
                        ) AS delivered_balance
                    FROM stockpile s
                    WHERE s.stockpile_id = {$stockpileId}";
                // echo $sql;
                    //die();
                    $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                        $rowStockpile = $resultStockpile->fetch_object();
                        $stockpileCode = $rowStockpile->stockpile_code;
                        $stockpileName = $rowStockpile->stockpile_name;
                        $availableBalance = $rowStockpile->available_balance;
                        $deliveredBalance = $rowStockpile->delivered_balance;
                    }

                        // get sales detail
                        $sql = "SELECT sl.quantity, sl.price_converted, sl.currency_id, sl.exchange_rate, sl.price, cust.pph_tax_id,
                        sl.stockpileContractId, sl.sales_type,sl.stockpileLangsir, sl.vendorLangsir, sl.sales_no, DATE_FORMAT(sales_date,'%Y-%m-%d') AS salesDate
                            FROM sales sl 
                            INNER JOIN customer cust
                                ON cust.customer_id = sl.customer_id
                            WHERE sl.sales_id = {$salesId}";
                        $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($resultSales !== false && $resultSales->num_rows == 1) {
                            $rowSales = $resultSales->fetch_object();
                            $salesBalance = $rowSales->quantity;
                            $salesUnitPrice = $rowSales->price_converted;
                            $salesCurrencyId = $rowSales->currency_id;
                            $salesExchangeRate = $rowSales->exchange_rate;
                            $salesOriginalUnitPrice = $rowSales->price;
                            $custTaxId = $rowSales->pph_tax_id;
                            $stockpileContractIdShipment = $rowSales->stockpileContractId;
                            $salesType = $rowSales->sales_type;
                            $vendorLangsir = $rowSales->vendorLangsir;
                            $salesNo = $rowSales->sales_no;
                            $stockpileLangsir = $rowSales->stockpileLangsir;
                            $salesDate = $rowSales->salesDate;
                        }

                        // get next slip no

                        $checkSlipNo = $stockpileCode . '-' . $currentYear3;

                        //$checkSlipNo = $stockpileCode /*.'-'. $currentYear*/;
        //            $sql = "SELECT LPAD(COUNT(1) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ";
        //            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                        $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($resultSlip->num_rows == 0) {
                            $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        }
                        $rowSlipNo = $resultSlip->fetch_object();
                        $nextSlipNo = $rowSlipNo->next_id;
                        $slipNo = $checkSlipNo . '-' . $nextSlipNo;

                        if ($salesDate <= $b2) {
        //            if($sendWeight2 <= $availableBalance && $blWeight <= ($salesBalance - $deliveredBalance)) {
                            if ($sendWeight2 <= $availableBalance) {
                                $shrink = $sendWeight2 - $blWeight;
                                //closingDate
                                $newTransactionDate = implode("-", array_reverse(explode("/", $transactionDate2)));
                                $stockpileCD = $stockpileId;
                                $checkClosingDate = explode('-', closingDate($newTransactionDate, 'Nota Timbang - Input'));
                                $boolClosing = $checkClosingDate[0];
                                $closingDate = $checkClosingDate[1];

                                // insert into transaction

                                if ($boolClosing) {
                                    $sql = "INSERT INTO `temp_transaction` (slip_no, shipment_id, transaction_date,unloading_date, vehicle_no, transaction_type, "
                                    . "send_weight, notes, quantity, shrink, cust_tax_id, entry_by, entry_date, ggl, rsb, rsb_ggl, uncertified, freight_cost_id, freight_price, freight_quantity,fc_tax_id,permit_no,driver,sim) "
                                    . "VALUES ('{$slipNo}', {$shipmentId}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), '{$vehicleNo2}', "
                                    . "{$transactionType}, {$sendWeight2}, '{$notes2}', {$blWeight}, {$shrink}, {$custTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$ggl}, {$rsb}, {$rsb_ggl}, {$uncertified1},{$freightCostSalesId},{$freightSalesPrice},{$freightSalesQty},{$fcSalesTaxId},'{$doSales}','{$driverSales}','{$sim}')";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    echo $sql;
                                    if ($result !== false) {
                                        $tempTransactionId = $myDatabase->insert_id;

                                        $return_value = '|OK|Transaction has inserted successfully.|';

                                        // insert into tempdelivery

                                        if ($stockpileContractIdShipment == 0 || $stockpileContractIdShipment == 'NULL' || $stockpileContractIdShipment == '') {

                                            //SELECT semua data yg berhubungan dengan sertifikat yg di pilih saat input notim OUT
                                            $sqlTest = "SELECT t.* 
                                            FROM transaction t 
                                            WHERE SUBSTR(t.slip_no,1,3) IN (SELECT stockpile_code FROM stockpile WHERE stockpile_id = {$stockpileId}) 
                                                AND t.transaction_type = 1 AND t.delivery_status <> 1 {$whereProperty} AND transaction_date <= '{$newTransactionDate}'
                                            ORDER BY t.unloading_date ASC, t.slip_no ASC";
                                            $resultDelivery = $myDatabase->query($sqlTest, MYSQLI_STORE_RESULT);
                                           
                                            if ($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                                                $balanceLeftUN = $qty_uncertified;
                                                $balanceLeftR = $qtyRSB; //2jt
                                                $balanceLeftG = $qtyGGL; 
                                                $balanceLeftRG = $qty_RG; //1jt
                                                $tempNo = 1;
                                                $totalInventoryValue = 0;
                                                while ($rowDelivery = $resultDelivery->fetch_object()) {
                                                    $syncStatus = 0;
                                                    $tempQtyR = 0;
                                                    $tempQtyG = 0;
                                                    $tempQtyRG = 0;
                                                    $tempQtyUN = 0;
                                                    $quantityTaken = 0;
                                                    $percentTaken = 0;
                                                    $deliveryStatus = 0;
                                                   
                                                    if ($rowDelivery->sync_status == 1) {
                                                        $syncStatus = 2;
                                                    }
                                                     
    
                                                    if ($rowDelivery->delivery_status == 0) { //JIKA NOTIM BELUM DI PAKE
                                                        if($rowDelivery->rsb == 1 && $balanceLeftR > 0) { //RSB
                                                            if ($balanceLeftR >= $rowDelivery->quantity) {
                                                                $balanceLeftR = $balanceLeftR - $rowDelivery->quantity;
                                                                $quantityTaken = $rowDelivery->quantity;
                                                                $percentTaken = 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyR = $quantityTaken;
                                                                
                                                            } elseif ($balanceLeftR < $rowDelivery->quantity) {
                                                                $quantityTaken = $balanceLeftR;
                                                                $tempQtyR = $quantityTaken;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftR = 0;
                                                                $deliveryStatus = 2;
                                                            }
                                                        }else if($rowDelivery->ggl == 1 && $balanceLeftG > 0) { //GLL
                                                            if ($balanceLeftG >= $rowDelivery->quantity) {
                                                                $balanceLeftG = $balanceLeftG - $rowDelivery->quantity;
                                                                $quantityTaken = $rowDelivery->quantity;
                                                                $percentTaken = 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyG = $quantityTaken;
                                                            } elseif ($balanceLeftG < $rowDelivery->quantity) {
                                                                $quantityTaken = $balanceLeftG;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftG = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyG = $quantityTaken;
                                                            }
                                                        }else if($rowDelivery->rsb_ggl == 1 && $balanceLeftRG > 0) { //GLL-RSB
                                                            if ($balanceLeftRG >= $rowDelivery->quantity) {
                                                                $balanceLeftRG = $balanceLeftRG - $rowDelivery->quantity;
                                                                $quantityTaken = $rowDelivery->quantity;
                                                                $percentTaken = 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyRG = $quantityTaken;
                                                            } elseif ($balanceLeftRG < $rowDelivery->quantity) {
                                                                $quantityTaken = $balanceLeftRG;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftRG = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyRG = $quantityTaken;
                                                            }
                                                        } else if($rowDelivery->uncertified == 1 && $balanceLeftUN > 0) { //un-certified 
                                                            if ($balanceLeftUN >= $rowDelivery->quantity) { //272.080
                                                                $balanceLeftUN = $balanceLeftUN - $rowDelivery->quantity;
                                                                $quantityTaken = $rowDelivery->quantity;
                                                                $percentTaken = 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyUN = $quantityTaken;
                                                            } elseif ($balanceLeftUN < $rowDelivery->quantity) {  // 10 < 7820
                                                                $quantityTaken = $balanceLeftUN;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftUN = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyUN = $quantityTaken;
                                                            }
                                                        }  
                                                    } elseif ($rowDelivery->delivery_status == 2) { //JIKA NOTIM SUDAH DI PAKE TAPI ADA SISA
                                                        $totalTaken = 0;
                                                        $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                                        $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                                        if ($resultTaken !== false && $resultTaken->num_rows == 1) {
                                                            $rowTaken = $resultTaken->fetch_object();
                                                            $totalTaken = $rowTaken->total_taken;
                                                        }
                                                        if($rowDelivery->rsb == 1 && $balanceLeftR > 0){ //RSB
                                                            if ($balanceLeftR >= ($rowDelivery->quantity - $totalTaken)) {
                                                                $balanceLeftR = $balanceLeftR - ($rowDelivery->quantity - $totalTaken);
                                                                $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyR = $quantityTaken;
                                                               // echo " QTY TAKEN " . $quantityTaken;
                                                            } elseif ($balanceLeftR < ($rowDelivery->quantity - $totalTaken)) {
                                                                $quantityTaken = $balanceLeftR;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftR = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyR = $quantityTaken;
                                                            }
                                                        } else if($rowDelivery->ggl == 1 && $balanceLeftG > 0){ //GGL
                                                            if ($balanceLeftG >= ($rowDelivery->quantity - $totalTaken)) {
                                                                $balanceLeftG = $balanceLeftG - ($rowDelivery->quantity - $totalTaken);
                                                                $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyG = $quantityTaken;
                                                            } elseif ($balanceLeftG < ($rowDelivery->quantity - $totalTaken)) {
                                                                $quantityTaken = $balanceLeftG;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftG = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyG = $quantityTaken;
                                                            }
                                                        }else if($rowDelivery->rsb_ggl == 1 && $balanceLeftRG > 0){ //GGL-RSB
                                                            if ($balanceLeftRG >= ($rowDelivery->quantity - $totalTaken)) {
                                                                $balanceLeftRG = $balanceLeftRG - ($rowDelivery->quantity - $totalTaken);
                                                                $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyRG = $quantityTaken;
                                                            } elseif ($balanceLeftRG < ($rowDelivery->quantity - $totalTaken)) {
                                                                $quantityTaken = $balanceLeftRG;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftRG = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyRG = $quantityTaken;
                                                            }
                                                        }else if($rowDelivery->uncertified == 1 && $balanceLeftUN > 0){ //un-certified
                                                            if ($balanceLeftUN >= ($rowDelivery->quantity - $totalTaken)) {
                                                                $balanceLeftUN = $balanceLeftUN - ($rowDelivery->quantity - $totalTaken);
                                                                $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyUN = $quantityTaken;
                                                            } elseif ($balanceLeftUN < ($rowDelivery->quantity - $totalTaken)) {
                                                                $quantityTaken = $balanceLeftUN;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftUN = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyUN = $quantityTaken;
                                                            }
                                                        } 
                                                    }
    
                                                    $deliveryValue = $quantityTaken * $salesUnitPrice;
                                                    $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                                    $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                                    $percentTaken = $percentTaken * 100;
                                                    if($quantityTaken <> 0){
                                                        $sqlTest3 = "INSERT INTO `temp_delivery` (temp_transaction_id, shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, 
                                                                            delivery_value, entry_by, entry_date, qty_rsb, qty_ggl, qty_rsb_ggl, qty_uncertified, delivery_status, sync_status) VALUES ("
                                                                . "{$tempTransactionId}, {$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                                                . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$tempQtyR}, {$tempQtyG}, {$tempQtyRG}, {$tempQtyUN}, {$deliveryStatus}, {$syncStatus})";
                                                        $result = $myDatabase->query($sqlTest3, MYSQLI_STORE_RESULT);
                                                  }
                                               //     echo "INSERT DELIVERY" . $tempNo . " => " . $balanceLeftUN . " | " . $quantityTaken .  " <> ";
                                                    // $tempNo++;
                                                } 
                                            }
                                        } else {
                                            $sql = "SELECT t.* 
                                                FROM transaction t 
                                                WHERE SUBSTR(t.slip_no,1,3) IN (SELECT stockpile_code FROM stockpile WHERE stockpile_id = {$stockpileId}) 
                                                        AND t.transaction_type = 1 AND t.delivery_status <> 1 {$whereProperty}
                                                ORDER BY t.unloading_date ASC, t.slip_no ASC";
                                            $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                            $totalInventoryValue = 0;
                                            if ($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                                                $balanceLeftUN = $qty_uncertified;
                                                $balanceLeftR = $qtyRSB;
                                                $balanceLeftG = $qtyGGL;
                                                $balanceLeftRG = $qty_RG;
                                                while ($rowDelivery = $resultDelivery->fetch_object()) {
                                                    $syncStatus = 0;
                                                    $tempQtyR = 0;
                                                    $tempQtyG = 0;
                                                    $tempQtyRG = 0;
                                                    $tempQtyUN = 0;
                                                    $quantityTaken = 0;
                                                    $percentTaken = 0;
                                                    $deliveryStatus = 0;
                                                    if ($rowDelivery->sync_status == 1) {
                                                        $syncStatus = 2;
                                                    }
    
                                                    if ($rowDelivery->delivery_status == 0) {
                                                        if($rowDelivery->rsb == 1 && $balanceLeft > 0) { //RSB
                                                            if ($balanceLeftR >= $rowDelivery->quantity) {
                                                                $balanceLeftR = $balanceLeftR - $rowDelivery->quantity;
                                                                $quantityTaken = $rowDelivery->quantity;
                                                                $percentTaken = 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyR = $quantityTaken;
                                                            } elseif ($balanceLeftR < $rowDelivery->quantity) {
                                                                $quantityTaken = $balanceLeftR;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftR = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyR = $quantityTaken;
                                                            }
                                                        }else if($rowDelivery->ggl == 1 && $balanceLeftG > 0) { //GGL
                                                            if ($balanceLeftG >= $rowDelivery->quantity) {
                                                                $balanceLeftG = $balanceLeftG - $rowDelivery->quantity;
                                                                $quantityTaken = $rowDelivery->quantity;
                                                                $percentTaken = 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyG = $quantityTaken;
                                                            } elseif ($balanceLeftG < $rowDelivery->quantity) {
                                                                $quantityTaken = $balanceLeftG;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftG = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyG = $quantityTaken;
                                                            }
                                                        }else if($rowDelivery->rsb_ggl == 1 && $balanceLeftRG > 0) { //GGL-RSB
                                                            if ($balanceLeftRG >= $rowDelivery->quantity) {
                                                                $balanceLeftRG = $balanceLeftRG - $rowDelivery->quantity;
                                                                $quantityTaken = $rowDelivery->quantity;
                                                                $percentTaken = 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyRG = $quantityTaken;
                                                            } elseif ($balanceLeftRG < $rowDelivery->quantity) {
                                                                $quantityTaken = $balanceLeftRG;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftRG = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyRG = $quantityTaken;
                                                            }
                                                        }else if($rowDelivery->uncertified == 0 && $balanceLeftUN > 0) { //un-certified
                                                            if ($balanceLeftUN >= $rowDelivery->quantity) {
                                                                $balanceLeftUN = $balanceLeftUN - $rowDelivery->quantity;
                                                                $quantityTaken = $rowDelivery->quantity;
                                                                $percentTaken = 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyUN = $quantityTaken;
                                                            } elseif ($balanceLeftUN < $rowDelivery->quantity) {
                                                                $quantityTaken = $balanceLeftUN;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftUN = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyUN = $quantityTaken;
                                                            }
                                                        }
                                                    } elseif ($rowDelivery->delivery_status == 2) {
                                                        $totalTaken = 0;
                                                        $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                                        $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                                        if ($resultTaken !== false && $resultTaken->num_rows == 1) {
                                                            $rowTaken = $resultTaken->fetch_object();
                                                            $totalTaken = $rowTaken->total_taken;
                                                        }
                                                        if($rowDelivery->rsb == 1 && $balanceLeft > 0){ //RSB
                                                            if ($balanceLeftR >= ($rowDelivery->quantity - $totalTaken)) {
                                                                $balanceLeftR = $balanceLeftR - ($rowDelivery->quantity - $totalTaken);
                                                                $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyR = $quantityTaken;
                                                            } elseif ($balanceLeftR < ($rowDelivery->quantity - $totalTaken)) {
                                                                $quantityTaken = $balanceLeftR;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftR = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyR = $quantityTaken;
                                                            }
                                                        }else if($rowDelivery->ggl == 1 &&  $balanceLeftG > 0){ //GGL
                                                            if ($balanceLeftG >= ($rowDelivery->quantity - $totalTaken)) {
                                                                $balanceLeftG = $balanceLeftG - ($rowDelivery->quantity - $totalTaken);
                                                                $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyG = $quantityTaken;
                                                            } elseif ($balanceLeftG < ($rowDelivery->quantity - $totalTaken)) {
                                                                $quantityTaken = $balanceLeftG;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftG = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyG = $quantityTaken;
                                                            }
                                                        }else if($rowDelivery->rsb_ggl == 1 && $balanceLeftRG > 0 ){ //GGL-RSB
                                                            if ($balanceLeftRG >= ($rowDelivery->quantity - $totalTaken)) {
                                                                $balanceLeftRG = $balanceLeftRG - ($rowDelivery->quantity - $totalTaken);
                                                                $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyRG = $quantityTaken;
                                                            } elseif ($balanceLeftRG < ($rowDelivery->quantity - $totalTaken)) {
                                                                $quantityTaken = $balanceLeftRG;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftRG = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyRG = $quantityTaken;
                                                            }
                                                        }else if($rowDelivery->uncertified == 1 && $balanceLeftUN > 0){ //un-certified
                                                            if ($balanceLeftUN >= ($rowDelivery->quantity - $totalTaken)) {
                                                                $balanceLeftUN = $balanceLeftUN - ($rowDelivery->quantity - $totalTaken);
                                                                $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyUN = $quantityTaken;
                                                            } elseif ($balanceLeftUN < ($rowDelivery->quantity - $totalTaken)) {
                                                                $quantityTaken = $balanceLeftUN;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftUN = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyUN = $quantityTaken;
                                                            }
                                                        }
                                                    }
    
                                                    $deliveryValue = $quantityTaken * $salesUnitPrice;
                                                    $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                                    $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                                    $percentTaken = $percentTaken * 100;
    
                                                   if($quantityTaken <> 0){
                                                        $sqlTest3 = "INSERT INTO `temp_delivery` (temp_transaction_id, shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, 
                                                                        delivery_value, entry_by, entry_date, qty_rsb, qty_ggl, qty_rsb_ggl, qty_uncertified, delivery_status, sync_status) VALUES ("
                                                                    . "{$tempTransactionId}, {$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                                                    . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$tempQtyR}, {$tempQtyG}, {$tempQtyRG}, {$tempQtyUN}, {$deliveryStatus}, {$syncStatus})";
                                                        $result = $myDatabase->query($sqlTest3, MYSQLI_STORE_RESULT);
                                                    
                                                  }
                                                }
                                            }
                                        }

                                        //$updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                                        $sql = "UPDATE temp_transaction SET inventory_value = {$totalInventoryValue}, unit_price = ({$totalInventoryValue}/send_weight) WHERE temp_transaction_id = {$tempTransactionId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
      
                                        // update shipment
                                        $cogsAmount = $totalInventoryValue;
                                        if ($salesCurrencyId != 1) {
                                            $cogsAmount = $totalInventoryValue / $salesExchangeRate;
                                        }
                                        $invoiceAmount = $blWeight * $salesOriginalUnitPrice;
                                        $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                                            . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$blWeight}, shipment_status = 1 "
                                            . "WHERE shipment_id = {$shipmentId}";
                                     //   echo " dua " . $sql;
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    
                                        // update sales
                                        $boolUpdateSales = false;
                                        if ($blWeight == ($salesBalance - $deliveredBalance)) {
                                            $salesStatus = 1;
                                            $boolUpdateSales = true;
                                        } elseif ($blWeight < ($salesBalance - $deliveredBalance)) {
                                            $salesStatus = 2;
                                            $boolUpdateSales = true;
                                        }

                                        if ($boolUpdateSales) {
                                            $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    
                                            $sql = "UPDATE sales SET used_status = 1 WHERE sales_id = {$salesId}";
                                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        }

                               
                                        // insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                                        // insertReportGL($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                                        $return_value = '|OK|Transaction has inserted successfully.|';
                                        unset($_SESSION['transaction']);
                                    } else {
                                        $return_value = '|FAIL|Failed insert transaction.|';
                                    }
                                } else {
                                    echo $closingDate;
                                    die();
                                } //tutup else closing_date
                            } else {
                                if ($sendWeight2 > $availableBalance) {
                                    $return_value = '|FAIL|Available quantity in ' . $stockpileName . ' is ' . number_format($availableBalance, 4, '.', ',') . ' Kg.|';
                                } elseif ($sendWeight2 > ($salesBalance - $deliveredBalance)) {
                                    $return_value = '|FAIL|Sales agreement balance is ' . ($salesBalance - $deliveredBalance) . ' Kg.|';
                                }
                            }

                        } else {
                            $return_value = '|FAIL|Tanggal transaksi harus melebihi tanggal sales.|' . $salesDate . '|' . $transactionDate2 . '|';
                        }

                    } else {
                        $return_value = '|FAIL|Please fill the required fields.|';
                    }

                } else {
                    $return_value = '|FAIL|Tanggal transaksi sudah lebih dari 5 hari.|';
                }// </editor-fold>
            }else{
                $return_value = '|FAIL|Nilai Inputan RSB/GGL/RSB+GGL/Uncertified Salah.|';
            }
        }else{
            $return_value = '|FAIL|Notim OUT sebelumnya belum di Approve.|';
        }
    }elseif ($transactionType == 2 && $_POST['_method'] == 'INSERT') {

        $tempTransactionId = $myDatabase->real_escape_string($_POST['tempTransactionId']);

     

        $sql = "SELECT SUBSTRING(tt.slip_no, 1, 3) AS spCode, tt.* FROM temp_transaction tt where temp_transaction_id = {$tempTransactionId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result !== false && $result->num_rows > 0) {
            $rowData = $result->fetch_object();
            $spCode = $rowData->spCode;
            $rsb_ggl = $rowData->rsb_ggl;
            $rsb = $rowData->rsb;
            $ggl = $rowData->ggl;
            $uncertified = $rowData->uncertified;
            if($rowData->unit_price == ''){
                $unit_price = 'NULL';
            }else{
                $unit_price = $rowData->unit_price;
            }

            $checkSlipNo = $spCode . '-' . $currentYear3;
            $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            // echo "YY".$sql;
            if ($resultSlip->num_rows == 0) {
                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }
            $rowSlipNo = $resultSlip->fetch_object();
            $nextSlipNo = $rowSlipNo->next_id;
            $slipNo = $checkSlipNo . '-' . $nextSlipNo;

            $transactionDate2 = $rowData->transaction_date;
            $freightCostSalesId = $rowData->freight_cost_id;
			
			if($freightCostSalesId != '' && $freightCostSalesId != 'NONE' && $freightCostSalesId != 0){

            $sqlsf = "SELECT a.`freight_rule`, a.`pph_tax_id`, b.price_converted FROM freight_local_sales a
            LEFT JOIN freight_cost_local_sales b ON a.`freight_id` = b.`freight_id`
            WHERE b.`freight_cost_id` = {$freightCostSalesId}";
            $resultSalesf = $myDatabase->query($sqlsf, MYSQLI_STORE_RESULT);
            if ($resultSalesf !== false && $resultSalesf->num_rows == 1) {
                $rowSalesf = $resultSalesf->fetch_object();

                $fcSalesTaxId = $rowSalesf->pph_tax_id;
                $freightSalesPrice = $rowSalesf->price_converted;

                if($rowSalesf->freight_rule == 2){
                        if($sendWeight2 < $blWeight){
                            $freightSalesQty = $sendWeight2;
                        }else if ($sendWeight2 > $blWeight){
                            $freightSalesQty = $blWeight;
                        }else{
                            $freightSalesQty = $blWeight;
                        }
    
                    }else if($rowSalesf->freight_rule == 0){
                        $freightSalesQty = $sendWeight2;
                    }else{
                        $freightSalesQty = $blWeight;
                    }
            }

        }else{
		$freightSalesQty = 0;
		$fcSalesTaxId = 0;
		$freightSalesPrice = 0;
		$freightCostSalesId = 'NULL';
		}		

            $sqlT = "INSERT INTO `transaction` (slip_no, shipment_id, transaction_date,unloading_date, vehicle_no, transaction_type, "
                    . "send_weight, notes, quantity, shrink, cust_tax_id, entry_by, inventory_value, entry_date, rsb, ggl, rsb_ggl, uncertified, freight_cost_id, freight_price, freight_quantity,fc_tax_id,permit_no,driver,sim,unit_price) "
                    . "VALUES ('{$slipNo}', {$rowData->shipment_id}, '{$rowData->transaction_date}', '{$rowData->transaction_date}', '{$rowData->vehicle_no}', "
                    . "{$rowData->transaction_type}, {$rowData->send_weight}, '{$rowData->notes}', {$rowData->quantity}, {$rowData->shrink}, {$rowData->cust_tax_id}, {$_SESSION['userId']},{$rowData->inventory_value} ,STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), "
                    . "{$rsb}, {$ggl}, {$rsb_ggl}, {$uncertified},{$freightCostSalesId},{$freightSalesPrice},{$freightSalesQty},{$fcSalesTaxId},'{$doSales}','{$driverSales}','{$sim}','{$unit_price}')";
                $resultT = $myDatabase->query($sqlT, MYSQLI_STORE_RESULT);
                 echo ' TRANSACTION-1 ' . $sqlT;
                
                if ($resultT !== false) {
                    $transactionId = $myDatabase->insert_id;
                
                    $return_value = '|OK|Transaction has inserted successfully.|';

                    $sql = "UPDATE temp_transaction SET transaction_id = {$transactionId}, slip_no = '{$slipNo}', status = 1 WHERE temp_transaction_id = {$tempTransactionId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    $sqlTD = "SELECT * FROM temp_delivery WHERE temp_transaction_id = {$tempTransactionId}";
                    $resultTD = $myDatabase->query($sqlTD, MYSQLI_STORE_RESULT);
                    if ($resultTD !== false && $resultTD->num_rows > 0) {
                        while ($rowTD = $resultTD->fetch_object()) {
                            $deliveryId1 = $rowTD->temp_delivery_id;

                            $sql = "UPDATE transaction SET delivery_status = {$rowTD->delivery_status}, sync_status = {$rowTD->sync_status} WHERE transaction_id = {$rowTD->transaction_id}";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                            $sqlDelivery = "INSERT INTO `delivery` (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date, "
                                    . "qty_rsb, qty_ggl, qty_rsb_ggl, qty_uncertified) VALUES ("
                                    . "{$rowTD->shipment_id}, {$rowTD->transaction_id}, '{$transactionDate2}', {$rowTD->percent_taken}, "
                                    . "{$rowTD->quantity}, {$rowTD->inventory_value}, {$rowTD->delivery_value}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$rowTD->qty_rsb}, "
                                    . "{$rowTD->qty_ggl}, {$rowTD->qty_rsb_ggl}, {$rowTD->qty_uncertified})";
                            $resultDelivery = $myDatabase->query($sqlDelivery, MYSQLI_STORE_RESULT);
                             echo ' DELIVERY-1 ' . $sqlDelivery;

                            if ($resultDelivery !== false) {
                                $deliveryId_copy = $myDatabase->insert_id;

                                $sql_td = "UPDATE temp_delivery SET delivery_id = {$deliveryId_copy}, status = 1 WHERE temp_delivery_id = {$deliveryId1}";
                                $result = $myDatabase->query($sql_td, MYSQLI_STORE_RESULT);
                            }
                        }
                    }
					
					$sql = "SELECT sl.quantity, sl.price_converted, sl.currency_id, sl.exchange_rate, sl.price, cust.pph_tax_id,
                        sl.stockpileContractId, sl.sales_type,sl.stockpileLangsir, sl.vendorLangsir, sl.sales_no, DATE_FORMAT(sales_date,'%Y-%m-%d') AS salesDate
                            FROM sales sl 
                            INNER JOIN customer cust
                                ON cust.customer_id = sl.customer_id
                            WHERE sl.sales_id = {$salesId}";
                        $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($resultSales !== false && $resultSales->num_rows == 1) {
                            $rowSales = $resultSales->fetch_object();
                            $salesBalance = $rowSales->quantity;
                            $salesUnitPrice = $rowSales->price_converted;
                            $salesCurrencyId = $rowSales->currency_id;
                            $salesExchangeRate = $rowSales->exchange_rate;
                            $salesOriginalUnitPrice = $rowSales->price;
                            $custTaxId = $rowSales->pph_tax_id;
                            $stockpileContractIdShipment = $rowSales->stockpileContractId;
                            $salesType = $rowSales->sales_type;
                            $vendorLangsir = $rowSales->vendorLangsir;
                            $salesNo = $rowSales->sales_no;
                            $stockpileLangsir = $rowSales->stockpileLangsir;
                            $salesDate = $rowSales->salesDate;
                        }
						
						if ($salesType == 3) {

                                    $sql2 = "SELECT d.*,
            CASE WHEN t.transaction_type = 1 THEN s.stockpile_name ELSE s2.stockpile_name END AS stockpile_name,  
            DATE_FORMAT(t.unloading_date, '%d %b %Y') AS transaction_date2,
            t.slip_no, 
            CASE WHEN con.contract_type = 'P' THEN 'PKS' ELSE 'Curah' END AS contract_type2,
            con.po_no, 
            CONCAT(f.freight_code, '-', v2.vendor_code) AS freight_code,
            v3.vendor_name AS supplier,
            v1.vendor_name, 
            sh.shipment_code,
            t.send_weight, t.netto_weight, d.quantity,
			CASE WHEN t.mutasi_id IS NOT NULL AND t.mutasi_id <> 0 THEN t.unit_cost
			WHEN t.adjustmentAudit_id IS NOT NULL AND t.adjustmentAudit_id <> 0 THEN t.unit_price
			ELSE con.price_converted END AS price_converted,
            CASE WHEN t.mutasi_id IS NOT NULL AND t.mutasi_id <> 0 THEN d.quantity * t.unit_cost
			WHEN t.adjustmentAudit_id IS NOT NULL AND t.adjustmentAudit_id <> 0 THEN d.quantity * t.unit_price
			ELSE d.quantity * con.price_converted END AS cogs_amount,
            t.freight_quantity, t.freight_price, 
			CASE WHEN t.delivery_status = 2 THEN (d.percent_taken / 100) * (t.quantity * t.freight_price)
			ELSE (d.percent_taken / 100) * (t.freight_quantity * t.freight_price) END AS freight_total,
			CASE WHEN t.delivery_status = 2 AND t.freight_cost_id IS NOT NULL THEN (d.quantity/t.freight_quantity) * COALESCE((SELECT amt_claim FROM transaction_shrink_weight WHERE transaction_id = d.transaction_id),0)
	    WHEN t.freight_cost_id IS NOT NULL THEN (d.percent_taken / 100) * COALESCE((SELECT amt_claim FROM transaction_shrink_weight WHERE transaction_id = d.transaction_id),0) ELSE 0 END AS freight_shrink,
            t.unloading_price, (d.percent_taken / 100) * t.unloading_price AS unloading_total,
			vhc.price AS vh_price, t.handling_quantity,
			CASE WHEN t.delivery_status = 2 THEN (d.percent_taken / 100) * (t.handling_quantity * vhc.price)
			ELSE (d.percent_taken / 100) * (t.handling_quantity * vhc.price) END AS handling_total,
			vh1.pph_tax_id AS vh_pph_tax_id, vh1.pph AS vh_pph, vhtx.tax_category AS vh_pph_tax_category,
            f.ppn_tax_id AS fc_ppn_tax_id, f.ppn AS fc_ppn, fctxppn.tax_category AS fc_ppn_tax_category,
            t.fc_tax_id AS fc_pph_tax_id, fctxpph.tax_value AS fc_pph, fctxpph.tax_category AS fc_pph_tax_category,
            l.ppn_tax_id AS uc_ppn_tax_id, l.ppn AS uc_ppn, uctxppn.tax_category AS uc_ppn_tax_category,
            l.pph_tax_id AS uc_pph_tax_id, l.pph AS uc_pph, uctxpph.tax_category AS uc_pph_tax_category,
			l.labor_id,t.freight_cost_id, f.freight_id,
			(SELECT slip_no FROM TRANSACTION WHERE notim_status != 1 AND slip_retur IS NULL AND shipment_id = (SELECT shipment_id FROM shipment WHERE sales_id = sl.sales_id ORDER BY shipment_id ASC LIMIT 1)LIMIT 1) AS slipOut,
			(SELECT transaction_date FROM TRANSACTION WHERE notim_status != 1 AND slip_retur IS NULL AND shipment_id = (SELECT shipment_id FROM shipment WHERE sales_id = sl.sales_id ORDER BY shipment_id ASC LIMIT 1)LIMIT 1) AS transactionDate,
			(SELECT SUBSTRING(slip_no,1,3) FROM TRANSACTION WHERE notim_status != 1 AND slip_retur IS NULL AND shipment_id = (SELECT shipment_id FROM shipment WHERE sales_id = sl.sales_id ORDER BY shipment_id ASC LIMIT 1)LIMIT 1) AS slipOutCode,
			(SELECT vehicle_no FROM TRANSACTION WHERE notim_status != 1 AND slip_retur IS NULL AND shipment_id = (SELECT shipment_id FROM shipment WHERE sales_id = sl.sales_id ORDER BY shipment_id ASC LIMIT 1)LIMIT 1) AS vessel_name, sh.shipment_no
                     FROM delivery d
        LEFT JOIN `transaction` t
        	ON t.transaction_id = d.transaction_id
        LEFT JOIN stockpile_contract sc
            ON sc.stockpile_contract_id = t.stockpile_contract_id
        LEFT JOIN stockpile s
            ON s.stockpile_id = sc.stockpile_id
        LEFT JOIN contract con
            ON con.contract_id = sc.contract_id
        LEFT JOIN vendor v1
            ON v1.vendor_id = con.vendor_id
        LEFT JOIN unloading_cost uc
            ON uc.unloading_cost_id = t.unloading_cost_id
        LEFT JOIN vehicle vh
            ON vh.vehicle_id = uc.vehicle_id
        LEFT JOIN freight_cost fc
            ON fc.freight_cost_id = t.freight_cost_id
        LEFT JOIN freight f
            ON f.freight_id = fc.freight_id
        LEFT JOIN vendor v2
            ON v2.vendor_id = fc.vendor_id
        LEFT JOIN vendor v3
            ON v3.vendor_id = t.vendor_id
        LEFT JOIN shipment sh
            ON sh.shipment_id = d.shipment_id
        LEFT JOIN sales sl
            ON sl.sales_id = sh.sales_id
        LEFT JOIN stockpile s2
            ON s2.stockpile_id = sl.stockpile_id
        LEFT JOIN customer cust
            ON cust.customer_id = sl.customer_id
        LEFT JOIN tax fctxpph
	        ON fctxpph.tax_id = t.fc_tax_id
        LEFT JOIN tax fctxppn
	        ON fctxppn.tax_id = f.ppn_tax_id
	    LEFT JOIN labor l
            ON l.labor_id = t.labor_id
	    LEFT JOIN tax uctxpph
	        ON uctxpph.tax_id = l.pph_tax_id
        LEFT JOIN tax uctxppn
	        ON uctxppn.tax_id = l.ppn_tax_id	
		lEFT JOIN vendor_handling_cost vhc
			ON vhc.handling_cost_id = t.handling_cost_id
		LEFT JOIN vendor_handling vh1
			ON vh1.vendor_handling_id = vhc.vendor_handling_id
		LEFT JOIN tax vhtx
			ON vh1.pph_tax_id = vhtx.tax_id
						WHERE 1=1
						AND d.shipment_id = {$shipmentId}";
                                    $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                                    if ($result2->num_rows > 0) {

                                        while ($row2 = $result2->fetch_object()) {
                                            $value = '';
                                            $no1 = 1;

                                            $slipOut = $row2->slipOut;
                                            $slipOutCode = $row2->slipOutCode;

                                            if ($row2->slip_no >= 'SAM-0000000001' && $row2->slip_no <= 'SAM-0000001925') {
                                                $fc_pph2 = 4;
                                            } else {
                                                $fc_pph2 = $row2->fc_pph;
                                            }

                                            if ($row2->slip_no >= 'MAR-0000000001' && $row2->slip_no <= 'MAR-0000007138') {
                                                $fc_pph2 = 4;
                                            } else {
                                                $fc_pph2 = $row2->fc_pph;
                                            }

                                            if ($row2->vh_pph_tax_category == 1 && $row2->vh_pph_tax_id != '') {
                                                $pphvh2 = ($row2->handling_total / ((100 - $row2->vh_pph) / 100)) - $row2->handling_total;

                                            } elseif ($row2->vh_pph_tax_category == 0 && $row2->vh_pph_tax_id != '') {
                                                $pphvh2 = 0;
                                                //$pphfc =  $row->freight_total - ($row->freight_total * ((100 - $fc_pph) / 100));
                                            } else {
                                                $pphvh2 = 0;
                                            }

                                            $handlingTotal2 = $row2->handling_total - $pphvh2;

                                            if ($row2->fc_pph_tax_category == 1 && $row2->fc_pph_tax_id != '') {
                                                $pphfc2 = ($row2->freight_total / ((100 - $fc_pph2) / 100)) - $row2->freight_total;
                                                $pphfcShrink2 = ($row2->freight_shrink / ((100 - $fc_pph2) / 100)) - $row2->freight_shrink;

                                            } elseif ($row2->fc_pph_tax_category == 0 && $row2->fc_pph_tax_id != '') {
                                                $pphfc2 = 0;
                                                $pphfcShrink2 = 0;
                                                //$pphfc =  $row->freight_total - ($row->freight_total * ((100 - $fc_pph) / 100));
                                            } else {
                                                $pphfc2 = 0;
                                                $pphfcShrink2 = 0;
                                            }
                                            /*
									 if($row->fc_ppn_tax_id != ''){
										 $ppnfc = ($row->freight_total * ((100 + $row->fc_ppn) / 100)) - $row->freight_total;
									 }else{
										 $ppnfc = 0;
									 }*/

                                            $freightTotal2 = ($row2->freight_total + $ppnfc2 + $pphfc2) - ($row2->freight_shrink + $pphfcShrink2);


                                            if ($row2->uc_pph_tax_category == 1 && $row2->uc_pph_tax_id != '') {
                                                $pphuc2 = ($row2->unloading_total / ((100 - $row2->uc_pph) / 100)) - $row2->unloading_total;

                                            } elseif ($row2->uc_pph_tax_category == 0 && $row2->uc_pph_tax_id != '') {
                                                $pphuc2 = 0;
                                                //$pphuc =  $row->unloading_total - ($row->unloading_total * ((100 - $row->uc_pph) / 100));
                                            } else {
                                                $pphuc2 = 0;
                                            }


                                            $unloadingTotal2 = $row2->unloading_total + $ppnuc2 + $pphuc2;

                                            $totalCogs2 = $row2->cogs_amount + $freightTotal2 + $unloadingTotal2 + $handlingTotal2;

                                            $quantity_total = $row2->quantity;
                                            $total_quantity = $quantity_total + $total_quantity;

                                            $pks_total = $row2->cogs_amount;
                                            $total_pks = $pks_total + $total_pks;

                                            $fc_total = $freightTotal2;
                                            $total_fc = $fc_total + $total_fc;

                                            $vh_total = $handlingTotal2;
                                            $total_vh = $vh_total + $total_vh;

                                            $uc_total = $unloadingTotal2;
                                            $total_uc = $uc_total + $total_uc;

                                            $cogs_total = $totalCogs2;
                                            $total_cogs = $cogs_total + $total_cogs;

                                            $unitPrice = $total_cogs / $total_quantity;

                                            $no1++;

                                        }
                                    }


                                    $sql = "SELECT * FROM vendor WHERE vendor_id = {$vendorLangsir}";
                                    $resultVendor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if ($resultVendor !== false && $resultVendor->num_rows == 1) {
                                        $rowVendor = $resultVendor->fetch_object();
                                        $vendorCode = $rowVendor->vendor_code;
                                    }

                                    $checkPoNo = 'P-' . $vendorCode . '-' . $currentYearMonth;
                                    $sql = "SELECT po_no FROM contract WHERE company_id = {$_SESSION['companyId']} AND po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
                                    $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if ($resultPo->num_rows == 1) {
                                        $rowPo = $resultPo->fetch_object();
                                        $splitPoNo = explode('-', $rowPo->po_no);
                                        $lastExplode = count($splitPoNo) - 1;
                                        $nextPoNo = ((float)$splitPoNo[$lastExplode]) + 1;
                                        $poNo = $checkPoNo . '-' . $nextPoNo;
                                    } else {
                                        $poNo = $checkPoNo . '-1';
                                    }

                                    $unitPriceConverted = $unitPrice * $salesExchangeRate;

                                    $sqlKontrak = "INSERT INTO contract (contract_type, po_no, contract_no, vendor_id, currency_id, exchange_rate, price, price_converted, quantity, payment_status, notes, entry_by, entry_date,langsir,langsir_shipment_id) VALUES ('P','{$poNo}','{$salesNo}',{$vendorLangsir},{$salesCurrencyId},{$salesExchangeRate},{$unitPrice},{$unitPriceConverted}, {$total_quantity}, 1, '-',{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),1,{$shipmentId})";
                                    $result = $myDatabase->query($sqlKontrak, MYSQLI_STORE_RESULT);
                                    if ($result !== false) {
                                        $contractId = $myDatabase->insert_id;

                                        $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                                            . "{$stockpileLangsir}, {$contractId}, {$total_quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        //insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);
                                        //insertReportGL($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);
                                    }

                                }
                    
                   insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                    insertReportGL($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                }else{
                    $return_value = '|FAIL|Failed insert transaction.| '. $sqlTest3;
                }
        }

    }else if ($_POST['_method'] == 'CANCEL') {
        $cancelRemarks = $myDatabase->real_escape_string($_POST['reject_remarks']);

        $sql_tt = "UPDATE temp_transaction SET status = 2, cancel_remarks = '{$cancelRemarks}' WHERE temp_transaction_id = {$tempTransactionId}";
        $result = $myDatabase->query($sql_tt, MYSQLI_STORE_RESULT);

     

        if ($result != false) {

                $sql = "UPDATE temp_delivery SET status = 2 WHERE temp_transaction_id = {$tempTransactionId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                $sqlSh = "SELECT sales_id From shipment where shipment_id = {$shipmentId}";
                $resultSh = $myDatabase->query($sqlSh, MYSQLI_STORE_RESULT);
                $rowSh = $resultSh->fetch_object();
                $salesId = $rowSh->sales_id;

                $sql_shipment = "UPDATE shipment SET shipment_status = 0,
                                    shipment_date = NULL, cogs_amount = 0, invoice_amount = 0, quantity = 0 WHERE shipment_id = {$shipmentId}";
                $result = $myDatabase->query($sql_shipment, MYSQLI_STORE_RESULT);

                $sql_tt = "UPDATE sales SET sales_status = 0, used_status = 0 WHERE sales_id = {$salesId}";
                $result = $myDatabase->query($sql_tt, MYSQLI_STORE_RESULT);

                $return_value = '|OK|Reject  has successfully.|';
        } else {
            $return_value = '|FAIL|Reject  FAIL!|.'.$sql_tt;

        }
    
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'return_notim_out') {
    // <editor-fold defaultstate="collapsed" desc="delete_sales">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $transactionId2 = $myDatabase->real_escape_string($_POST['transactionId2']);
    $returnOutDate = $myDatabase->real_escape_string($_POST['returnOutDate']);
    $t_date = str_replace('/', '-', $returnOutDate);
    $currentYear2 = date('y', strtotime($t_date));

    $dateTrans = str_replace("/", "-", $myDatabase->real_escape_string($_POST['returnOutDate']));
    $dt = date('Y-m-d', strtotime($dateTrans));
    $date2 = new DateTime($dt);
    $newDate = $date2->format('Y-m-d');

    // </editor-fold>
    

    if ($transactionId2 != '') {
        $sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode,DATE_FORMAT(t.transaction_date,'%Y-%m-%d') AS t_date FROM `transaction` t WHERE t.transaction_id = {$transactionId2}";
        $resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
        if ($resultR !== false && $resultR->num_rows == 1) {
            $rowR = $resultR->fetch_object();
            //$R = "R";
            //$U = "-U";
            //$sql = "UPDATE `transaction` SET shipment_id = NULL WHERE transaction_id = {$transactionId}";
            //$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            //$slipU = $rowR->slip_no .''. $U;
            //$currentYear2 =
            $t_date2 = $rowR->t_date;

            $checkSlipNo = $rowR->stockpileCode . '-' . $currentYear2;
            $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($resultSlip->num_rows == 0) {
                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }
            $rowSlipNo = $resultSlip->fetch_object();
            $nextSlipNo = $rowSlipNo->next_id;
            $slipNo = $checkSlipNo . '-' . $nextSlipNo;
            $slipR = $rowR->slip_no . '-R';
            $slipU = $rowR->slip_no . '-U';
            $dateR = $date->format('Y-m-d');
            $sendW = $rowR->send_weight * -1;
            $quantityW = $rowR->quantity * -1;
            $shrinkW = $rowR->shrink * -1;
            $shipmentId = $rowR->shipment_id;
            if ($rowR->notes == '')
                $notes = 'NULL';
        }

        //closingDate
        $newReturnOutDate = implode("-", array_reverse(explode("/", $returnOutDate)));
        $stockpileCD = 1;

        $checkClosingDate = explode('-', closingDate($newReturnOutDate, 'Nota Timbang - Return'));
        $boolClosing = $checkClosingDate[0];
        $closingDate = $checkClosingDate[1];

        if ($boolClosing) {
            if ($t_date2 <= $newDate) {

                $sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},NULL,{$shipmentId},'{$rowR->transaction_date}',NULL,'{$rowR->vehicle_no}',NULL,NULL,STR_TO_DATE('{$returnOutDate}', '%d/%m/%Y'),NULL,NULL,NULL,{$rowR->transaction_type},NULL,'{$sendW}',0,0,0,'{$notes}',NULL,0,0,'{$quantityW}','{$shrinkW}',0,0,0,0,0,NULL,NULL,NULL,0,NULL,NULL,NULL,NULL,NULL,{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
                if ($resultLog !== false) {
                    //echo $sqlLog;
                    $transactionId = $myDatabase->insert_id;
					
					$sql = "UPDATE `transaction` SET notim_status = 1 WHERE transaction_id = {$transactionId2}";
					$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                    insertReportGL($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                    // delete from delivery and update delivery_status in transaction
                    $sql = "SELECT d.*, t.sync_status 
                            FROM delivery d
                            INNER JOIN `transaction` t
                                ON t.transaction_id = d.transaction_id
                            WHERE d.shipment_id = {$shipmentId}";
                    $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultShipment !== false && $resultShipment->num_rows > 0) {
                        while ($rowShipment = $resultShipment->fetch_object()) {
                            $syncStatus = 0;
                            if ($rowShipment->sync_status == 1) {
                                $syncStatus = 2;
                            }

                            if ($rowShipment->percent_taken == 100) {
                                $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } else {
                                $sqlOther = "SELECT * FROM delivery WHERE shipment_id <> {$shipmentId} AND transaction_id = {$rowShipment->transaction_id}";
                                $resultOther = $myDatabase->query($sqlOther, MYSQLI_STORE_RESULT);

                                if ($resultOther->num_rows > 0) {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 2, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                } else {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                }
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            }
                        }

                        $sqlDelete = "DELETE FROM delivery WHERE shipment_id = {$shipmentId}";
                        $resultDelete = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

                    }
                    $ca = 'NULL';
                    $ia = 'NULL';
                    $q = 'NULL';
                    $sd = 'NULL';
                    $sqlU = "UPDATE sales sl
							LEFT JOIN shipment sh ON sh.sales_id = sl.sales_id SET sl.sales_status = 0, sh.shipment_status = 0, sh.shipment_date = {$sd}, sh.cogs_amount = {$ca}, sh.invoice_amount = {$ia}, sh.quantity = {$q} WHERE sh.shipment_id = {$shipmentId}";
                    $result = $myDatabase->query($sqlU, MYSQLI_STORE_RESULT);

                    $return_value = '|OK|Nota Timbang has successfully Returned.|' . $transactionId2 . '|';
                } else {
                    $return_value = '|FAIL|Returned Nota Timbang failed.|' . $sqlLog . '';
                }
            } else {
                $return_value = '|FAIL|Tanggal retur harus sama/melebihi tanggal transaksi.|';
            }
        } else {
            echo $closingDate;
            die();
        } //tutup else closingDate
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'return_notim_in') {
    // <editor-fold defaultstate="collapsed" desc="delete_sales">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $transactionId2 = $myDatabase->real_escape_string($_POST['transactionId']);
    $returnInDate = $myDatabase->real_escape_string($_POST['returnInDate']);
    $t_date = str_replace('/', '-', $returnInDate);
    $currentYear2 = date('y', strtotime($t_date));

    $dateTrans = str_replace("/", "-", $myDatabase->real_escape_string($_POST['returnInDate']));
    $dt = date('Y-m-d', strtotime($dateTrans));
    $date2 = new DateTime($dt);
    $newDate = $date2->format('Y-m-d');

    $t_date2 = '';
    // </editor-fold>


    if ($transactionId2 != '') {
        $sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode, DATE_FORMAT(transaction_date,'%Y-%m-%d') AS t_date  FROM `transaction` t WHERE t.transaction_id = {$transactionId2}";
        $resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
        if ($resultR !== false && $resultR->num_rows == 1) {
            $rowR = $resultR->fetch_object();
            //$R = "R";
            //$U = "-U";

            $t_date2 = $rowR->t_date;

            //$slipU = $rowR->slip_no .''. $U;
            $checkSlipNo = $rowR->stockpileCode . '-' . $currentYear2;
            $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($resultSlip->num_rows == 0) {
                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }
            $rowSlipNo = $resultSlip->fetch_object();
            $nextSlipNo = $rowSlipNo->next_id;
            $slipNo = $checkSlipNo . '-' . $nextSlipNo;
            $slipR = $rowR->slip_no . '-R';
            $slipU = $rowR->slip_no . '-U';
            $dateR = $date->format('Y-m-d');
            $sendW = $rowR->send_weight * -1;
            $brutoW = $rowR->bruto_weight * -1;
            $tarraW = $rowR->tarra_weight * -1;
            $nettoW = $rowR->netto_weight * -1;
            $handlingW = $rowR->handling_quantity * -1;
            $freightW = $rowR->freight_quantity * -1;
            $quantityW = $rowR->quantity * -1;
            $shrinkW = $rowR->shrink * -1;
            $unloadingP = $rowR->unloading_price * -1;

            if ($rowR->shipment_id == '') {
                $shipment_id = 'NULL';
            } else {
                $shipment_id = $rowR->shipment_id;
            }
            if ($rowR->labor_id == '') {
                $labor_id = 'NULL';
            } else {
                $labor_id = $rowR->labor_id;
            }
            if ($rowR->unloading_cost_id == '') {
                $unloading_cost_id = 'NULL';
            } else {
                $unloading_cost_id = $rowR->unloading_cost_id;
            }
            if ($rowR->handling_cost_id == '') {
                $handling_cost_id = 'NULL';
            } else {
                $handling_cost_id = $rowR->handling_cost_id;
            }
            if ($rowR->freight_cost_id == '') {
                $freight_cost_id = 'NULL';
            } else {
                $freight_cost_id = $rowR->freight_cost_id;
            }
            if ($rowR->permit_no == '') {
                $permit_no = 'NULL';
            } else {
                $permit_no = $rowR->permit_no;
            }
            if ($rowR->vendor_id == '') {
                $vendor_id = 'NULL';
            } else {
                $vendor_id = $rowR->vendor_id;
            }
            if ($rowR->cust_tax_id == '') {
                $cust_tax_id = 'NULL';
            } else {
                $cust_tax_id = $rowR->cust_tax_id;
            }
            if ($rowR->curah_tax_id == '') {
                $curah_tax_id = 'NULL';
            } else {
                $curah_tax_id = $rowR->curah_tax_id;
            }
            if ($rowR->uc_tax_id == '') {
                $uc_tax_id = 'NULL';
            } else {
                $uc_tax_id = $rowR->uc_tax_id;
            }
            if ($rowR->fc_tax_id == '') {
                $fc_tax_id = 'NULL';
            } else {
                $fc_tax_id = $rowR->fc_tax_id;
            }
            if ($rowR->block == '') {
                $block = 'NULL';
            } else {
                $block = $rowR->block;
            }
			if ($rowR->freight_price == '') {
                $freight_price = 0;
            } else {
                $freight_price = $rowR->freight_price;
            }
            //if($rowR->payment_id == ''){
            $payment_id = 'NULL';
            //}else{
            //$payment_id = $rowR->payment_id;
            //}
            //if($rowR->fc_payment_id == ''){
            $fc_payment_id = 'NULL';
            //}else{
            //$fc_payment_id = $rowR->fc_payment_id;
            //}
            //if($rowR->hc_payment_id == ''){
            $hc_payment_id = 'NULL';
            //}else{
            //$hc_payment_id = $rowR->hc_payment_id;
            //}
            //if($rowR->uc_payment_id == ''){
            $uc_payment_id = 'NULL';
            //}else{
            //$uc_payment_id = $rowR->uc_payment_id;
            //}
            if ($rowR->notes == '') {
                $notes = 'NULL';
            } else {
                $notes = $rowR->notes;
            }

            if ($rowR->posting_status == '') {
                $posting_status = 0;
            } else {
                $posting_status = $rowR->posting_status;
            }

            if ($rowR->stock_transit_id == '') {
                $stock_transit_id = 0;
            } else {
                $stock_transit_id = $rowR->stock_transit_id;
            }

            if ($rowR->mutasi_id == '') {
                $mutasi_id = 0;
            } else {
                $mutasi_id = $rowR->mutasi_id;
            }

            if ($rowR->mutasi_amount == '' || $rowR->mutasi_amount == 'NULL') {
                $mutasi_amount = 0;
            } else {
                $mutasi_amount = $rowR->mutasi_amount;
            }

            if ($rowR->shrink_amount == '' || $rowR->shrink_amount == 'NULL') {
                $shrink_amount = 0;
            } else {
                $shrink_amount = $rowR->shrink_amount;
            }

            if ($rowR->shrink_price == '' || $rowR->shrink_price == 'NULL') {
                $shrink_price = 0;
            } else {
                $shrink_price = $rowR->shrink_price;
            }

            if ($rowR->unit_cost == '' || $rowR->unit_cost == 'NULL') {
                $unit_cost = 0;
            } else {
                $unit_cost = $rowR->unit_cost;
            }

            if ($rowR->adjustmentAudit_id == '' || $rowR->adjustmentAudit_id == 'NULL') {
                $adjustmentAudit_id = 0;
            } else {
                $adjustmentAudit_id = $rowR->adjustmentAudit_id;
            }

            if ($rowR->contract_pks_detail_id == '') {
                $contract_pks_detail_id = 'NULL';
            } else {
                $contract_pks_detail_id = $rowR->contract_pks_detail_id;
            }

			if ($rowR->stockpile_contract_id == '') {
                $stockpile_contract_id = 'NULL';
            } else {
                $stockpile_contract_id = $rowR->stockpile_contract_id;
            }

			if ($rowR->inventory_value == '') {
                $inventory_value = 0;
            } else {
                $inventory_value = $rowR->inventory_value;
            }


            $delivery_status = 0;
        }

        //closingDate
        $newReturnInDate = implode("-", array_reverse(explode("/", $returnInDate)));
        $checkClosingDate = explode('-', closingDate($newReturnInDate, 'Nota Timbang - Return'));
        $boolClosing = $checkClosingDate[0];
        $closingDate = $checkClosingDate[1];

        if ($boolClosing) {
            if ($t_date2 <= $newDate) {

                $sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,handling_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date, posting_status, stock_transit_id,mutasi_id,mutasi_amount,shrink_amount, shrink_price, unit_cost, adjustmentAudit_id, contract_pks_detail_id)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},{$stockpile_contract_id},{$shipment_id},STR_TO_DATE('{$returnInDate}', '%d/%m/%Y'),STR_TO_DATE('{$returnInDate}', '%d/%m/%Y'),'{$rowR->vehicle_no}',{$labor_id},{$unloading_cost_id},STR_TO_DATE('{$returnInDate}', '%d/%m/%Y'),{$handling_cost_id},{$freight_cost_id},'{$permit_no}',{$rowR->transaction_type},{$vendor_id},'{$sendW}','{$brutoW}','{$tarraW}','{$nettoW}','{$notes}','{$rowR->driver}','{$handlingW}','{$freightW}','{$quantityW}','{$shrinkW}','{$freight_price}','{$rowR->handling_price}','{$unloadingP}','{$rowR->unit_price}','{$inventory_value}',{$cust_tax_id},{$curah_tax_id},{$uc_tax_id},{$fc_tax_id},{$delivery_status},'{$block}',{$payment_id},{$fc_payment_id},{$hc_payment_id},{$uc_payment_id},{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$posting_status}', '{$stock_transit_id}','{$mutasi_id}','{$mutasi_amount}','{$shrink_amount}', '{$shrink_price}', '{$unit_cost}', '{$adjustmentAudit_id}', '{$contract_pks_detail_id}')";
                $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
                if ($resultLog !== false) {
                    //echo $sqlLog;
                    $transactionId = $myDatabase->insert_id;

                    $sql = "UPDATE transaction_timbangan SET notim_status = 0 WHERE transaction_id = '{$rowR->t_timbangan}'";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    $sql = "UPDATE `transaction` SET notim_status = 1 WHERE transaction_id = {$transactionId2}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    $sql = "CALL sp_shrink_weight_retur({$transactionId},{$transactionId2})";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                    insertReportGL($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);


                    $return_value = '|OK|Nota Timbang has successfully Returned.|' . $transactionId2 . '|';
                } else {
                    $return_value = '|FAIL|Returned Nota Timbang failed.|' . $sqlLog . '';
                }
            } else {
                $return_value = '|FAIL|Tanggal retur harus sama/melebihi tanggal transaksi.|';
            }
        } else {
            echo $closingDate;
            die();
        } //tutup else closingDate
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'fixedAsset_data') {
    // <editor-fold defaultstate="collapsed" desc="vehicle_data">

    $return_value = '';
    $boolNew = false;


    $fixedAssetId = $myDatabase->real_escape_string($_POST['fixedAssetId']);;
    $dateofAcquisition = $myDatabase->real_escape_string($_POST['dateofAcquisition']);;
    $nopol = $myDatabase->real_escape_string($_POST['nopol']);;
    $assetName = $myDatabase->real_escape_string($_POST['assetName']);;
    $merk = $myDatabase->real_escape_string($_POST['merk']);;
    $type = $myDatabase->real_escape_string($_POST['type']);;
    $rangka = $myDatabase->real_escape_string($_POST['rangka']);;
    $mesin = $myDatabase->real_escape_string($_POST['mesin']);;
    $unit = $myDatabase->real_escape_string($_POST['unit']);;
    $acquisitionCost = $myDatabase->real_escape_string($_POST['acquisitionCost']);;
    $usageYear = $myDatabase->real_escape_string($_POST['usageYear']);;
    $usageMonth = $myDatabase->real_escape_string($_POST['usageMonth']);;
    $depresitionType = $myDatabase->real_escape_string($_POST['depresitionId']);;
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);;
    $masterAssettypeId = $myDatabase->real_escape_string($_POST['masterAssettypeId']);;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    // </editor-fold>

    if ($fixedAssetId == '') {
        $boolNew = true;
    }

    if ($dateofAcquisition != '' && $assetName != '' && $unit != '' && $acquisitionCost != '' && $usageYear != '' && $usageMonth != '' && $depresitionType != '') {
        $date = new DateTime();
        $currentmonth = $date->format('m');
        $currentyear = $date->format('Y');
        $checkAssetCode = 'AST/' . $currentmonth . '/' . $currentyear;
        $sql = "SELECT assetcode FROM fixed_asset WHERE assetcode LIKE '%{$checkAssetCode}' ORDER BY fixed_asset_id DESC LIMIT 1";
        $resultFA = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($resultFA->num_rows == 1) {
            $rowFA = $resultFA->fetch_object();
            $splitFACode = explode('/', $rowFA->assetcode);
            $lastExplode = count($splitFACode) - 4;
            $nextFACode = ((float)$splitFACode[$lastExplode]) + 1;
            $FACode = str_pad($nextFACode, 4, '0', STR_PAD_LEFT);
            $Asset_Code = $FACode . '/' . $checkAssetCode;
        } else {
            $Asset_Code = '0001/' . $checkAssetCode;
        }

        if ($boolNew) {
            $sql = "INSERT INTO `fixed_asset`(`AssetCode`,`DateofAcquisition`,
						`NoPol`,`AssetName`,`Merk`,`Type`,`Rangka`,`Mesin`,`Unit`,`AcquisitionCost`,`UsageYear`,`UsageMonth`,`DepresitionType`,
						`entry_by`,`entry_date`,`stockpile_id`,`master_assettype_id`)
						VALUES
						('$Asset_Code',STR_TO_DATE('{$dateofAcquisition}', '%d/%m/%Y'),'$nopol','$assetName','$merk',
						'$type','$rangka','$mesin',$unit,$acquisitionCost,$usageYear,$usageMonth,'$depresitionType',
						{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),$stockpileId,$masterAssettypeId)";
        } else {
            $sql = "UPDATE `fixed_asset`
						SET
						`DateofAcquisition` = STR_TO_DATE('{$dateofAcquisition}', '%d/%m/%Y'),
						`NoPol` = '$nopol',
						`AssetName` = '$assetName',
						`Merk` = '$merk',
						`Type` = '$type',
						`Rangka` = '$rangka',
						`Mesin` = '$mesin',
						`Unit` = $unit,
						`AcquisitionCost` = $acquisitionCost,
						`UsageYear` = $usageYear,
						`UsageMonth` = $usageMonth,
						`DepresitionType` = '$depresitionType',
						`entry_by` = {$_SESSION['userId']},
						`entry_date` = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),
						`stockpile_id` = $stockpileId,
						`master_assettype_id` = $masterAssettypeId
						WHERE `fixed_asset_id` = $fixedAssetId;
						";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            if ($boolNew) {
                $itemId = $myDatabase->insert_id;
            }

            $return_value = '|OK|Fixed Asset has successfully inserted/updated.|' . $itemId . '|';
        } else {
            $return_value = '|FAIL|Insert/update Fixed Asset failed.||';
        }

    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    echo $sql;
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_contract_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_contract_data">

    $return_value = '';
    $boolInsertVendor = false;
    $boolVendorExists = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $contractType = $myDatabase->real_escape_string($_POST['contractType']);
    $contractNo = $myDatabase->real_escape_string($_POST['contractNo']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    $vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    // </editor-fold>

    if ($vendorId == 'INSERT') {
        if ($vendorCode != '' && $vendorName != '') {
            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$vendorCode}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result !== false && $result->num_rows > 0) {
                $boolVendorExists = true;
            } elseif ($result !== false && $result->num_rows == 0) {
                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, entry_by, entry_date) VALUES ("
                    . "UPPER('{$vendorCode}'), '{$vendorName}', '{$vendorAddress}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false) {
                    $vendorId = $myDatabase->insert_id;
                    $boolInsertVendor = true;
                }
            }
        } else {
            $boolInsertVendor = false;
        }
    } else {
        $boolInsertVendor = true;
    }

    if ($contractType != '' && $vendorId != '' && $currencyId != '' && $price != '' &&
        $boolInsertVendor && !$boolVendorExists) {

        if ($quantity == '') {
            $quantity = 'NULL';
        }

        if ($exchangeRate == '') {
            $exchangeRate = 1;
        }

        $priceConverted = $price * $exchangeRate;

        $sql = "SELECT * FROM vendor WHERE vendor_id = {$vendorId}";
        $resultVendor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($resultVendor !== false && $resultVendor->num_rows == 1) {
            $rowVendor = $resultVendor->fetch_object();
            $vendorCode = $rowVendor->vendor_code;
        }

        $checkPoNo = $contractType . '-' . $vendorCode . '-' . $currentYearMonth;
        $sql = "SELECT * FROM contract WHERE company_id = {$_SESSION['companyId']} AND po_no LIKE '{$checkPoNo}%'";
        $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $nextPoNo = $resultPo->num_rows + 1;
        $poNo = $checkPoNo . '-' . $nextPoNo;

        $sql = "INSERT INTO `contract` (contract_type, po_no, contract_no, vendor_id, currency_id, exchange_rate, price, price_converted, quantity, entry_by, entry_date) VALUES ("
            . "'{$contractType}', '{$poNo}', '{$contractNo}', {$vendorId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, {$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $contractId = $myDatabase->insert_id;

            $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                . "{$stockpileId}, {$contractId}, {$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $stockpileContractId = $myDatabase->insert_id;
                $return_value = '|OK|Contract has successfully inserted.|CONTRACT~' . $stockpileContractId . '|';
            } else {
                $sql = "DELETE FROM `contract` WHERE contract_id = {$contractId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                $return_value = '|FAIL|Insert contract failed.||';
            }
        } else {
            $return_value = '|FAIL|Insert contract failed.||';
        }
    } else {
        if ($boolVendorExists) {
            $return_value = '|FAIL|Vendor already exists.||';
        } elseif (!$boolInsertVendor) {
            $return_value = '|FAIL|Insert vendor failed.||';
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_unloading_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_unloading_data">

    $return_value = '';
    $boolInsertVehicle = false;
    $boolVehicleExists = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $vehicleId = $myDatabase->real_escape_string($_POST['vehicleId']);
    $vehicleName = $myDatabase->real_escape_string($_POST['vehicleName']);
    // </editor-fold>

    if ($vehicleId == 'INSERT') {
        if ($vehicleName != '') {
            $sql = "SELECT * FROM `vehicle` WHERE UPPER(vehicle_name) = UPPER('{$vehicleName}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result !== false && $result->num_rows > 0) {
                $boolVehicleExists = true;
            } elseif ($result !== false && $result->num_rows == 0) {
                $sql = "INSERT INTO `vehicle` (vehicle_name, entry_by, entry_date) VALUES ("
                    . "'{$vehicleName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false) {
                    $vehicleId = $myDatabase->insert_id;
                    $boolInsertVehicle = true;
                }
            }
        } else {
            $boolInsertVehicle = false;
        }
    } else {
        $boolInsertVehicle = true;
    }

    if ($vehicleId != '' && $currencyId != '' && $price != '' &&
        $boolInsertVehicle && !$boolVehicleExists) {

        if ($exchangeRate == '') {
            $exchangeRate = 1;
        }

        $priceConverted = $price * $exchangeRate;

        $sql = "INSERT INTO `unloading_cost` (vehicle_id, stockpile_id, currency_id, exchange_rate, price, price_converted, entry_by, entry_date) VALUES ("
            . "{$vehicleId}, {$stockpileId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $unloadingCostId = $myDatabase->insert_id;

            $return_value = '|OK|Vehicle has successfully inserted.|UNLOADING~' . $unloadingCostId . '|';
        } else {
            $return_value = '|FAIL|Insert vehicle failed.||';
        }
    } else {
        if ($boolVehicleExists) {
            $return_value = '|FAIL|Vehicle already exists.||';
        } elseif (!$boolInsertVehicle) {
            $return_value = '|FAIL|Insert vehicle failed.||';
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_freight_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_freight_data">

    $return_value = '';
    $boolInsertFreight = false;
    $boolFreightExists = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $paymentNotes = $myDatabase->real_escape_string($_POST['paymentNotes']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    $freightCode = $myDatabase->real_escape_string($_POST['freightCode']);
    $freightSupplier = $myDatabase->real_escape_string($_POST['freightSupplier']);
    $freightAddress = $myDatabase->real_escape_string($_POST['freightAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>

//    $sql = "SELECT con.vendor_id FROM `contract` con
//            WHERE con.contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = {$stockpileContractId})";
//    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//    if($result !== false && $result->num_rows == 1) {
//        $row = $result->fetch_object();
//        $vendorId = $row->vendor_id;
//    }

    if ($freightId == 'INSERT') {
        if ($freightCode != '' && $freightSupplier != '' && $vendorId != '' && $freightAddress != '' && $npwp != '' &&
            $ppn != '' && $pph != '') {
            $sql = "SELECT * FROM `freight` WHERE UPPER(freight_supplier) = UPPER('{$freightSupplier}') AND UPPER(freight_code) = UPPER('{$freightCode}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result !== false && $result->num_rows > 0) {
                $boolFreightExists = true;
            } elseif ($result !== false && $result->num_rows == 0) {
                $ppnValue = 0;
                $pphValue = 0;

                $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
                $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
                if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                    $rowPPN = $resultPPN->fetch_object();
                    $ppnValue = $rowPPN->tax_value;
                }

                $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
                $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                    $rowPPh = $resultPPh->fetch_object();
                    $pphValue = $rowPPh->tax_value;
                }

                $sql = "INSERT INTO `freight` (freight_code, freight_supplier, freight_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                    . "UPPER('{$freightCode}'), '{$freightSupplier}', '{$freightAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false) {
                    $freightId = $myDatabase->insert_id;
                    $boolInsertFreight = true;
                }
            }
        } else {
            $boolInsertFreight = false;
        }
    } else {
        $boolInsertFreight = true;
    }

    if ($freightId != '' && $currencyId != '' && $price != '' && $vendorId != '' &&
        $boolInsertFreight && !$boolFreightExists) {

        if ($exchangeRate == '') {
            $exchangeRate = 1;
        }

        $priceConverted = $price * $exchangeRate;

        $sql = "INSERT INTO `freight_cost` (freight_id, stockpile_id, vendor_id, currency_id, exchange_rate, price, price_converted, payment_notes, remarks, entry_by, entry_date) VALUES ("
            . "{$freightId}, {$stockpileId}, {$vendorId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, '{$paymentNotes}', '{$remarks}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $freightCostId = $myDatabase->insert_id;

            $return_value = '|OK|Freight Supplier has successfully inserted.|FREIGHT~' . $freightCostId . '|';
        } else {
            $return_value = '|FAIL|Insert freight supplier failed.||';
        }
    } else {
        if ($boolFreightExists) {
            $return_value = '|FAIL|Freight supplier already exists.||';
        } elseif (!$boolInsertFreight) {
            $return_value = '|FAIL|Insert freight supplier failed.||';
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_vendor_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_vendor_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId0']);
    $vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    $vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>

    if ($vendorId == 'INSERT') {
        if ($vendorCode != '' && $vendorName != '' && $vendorAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$vendorCode}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result !== false && $result->num_rows == 0) {
                $ppnValue = 0;
                $pphValue = 0;

                $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
                $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
                if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                    $rowPPN = $resultPPN->fetch_object();
                    $ppnValue = $rowPPN->tax_value;
                }

                $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
                $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                    $rowPPh = $resultPPh->fetch_object();
                    $pphValue = $rowPPh->tax_value;
                }

                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                    . "UPPER('{$vendorCode}'), '{$vendorName}', '{$vendorAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false) {
                    $vendorId = $myDatabase->insert_id;

                    $return_value = '|OK|Vendor has successfully inserted.|VENDOR~' . $vendorId . '|';
                } else {
                    $return_value = '|FAIL|Insert vendor failed.||';
                }
            } else {
                $return_value = '|FAIL|Vendor already exists.||';
            }
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    } elseif ($vendorId != '') {
        $return_value = '|OK|Vendor has successfully inserted.|VENDOR~' . $vendorId . '|';
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_sales_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_sales_data">

    $return_value = '';
//    $boolInsertCustomer = false;
//    $boolCustomerExists = false;
    $boolExists = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    $customerName = $myDatabase->real_escape_string($_POST['customerName']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    $loading = $myDatabase->real_escape_string($_POST['portLoading']);
    $destination = $myDatabase->real_escape_string($_POST['destination']);
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $salesNo = $myDatabase->real_escape_string($_POST['salesNo']);
    $totalShipment = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalShipment']));
    // </editor-fold>

    $sql = "SELECT * FROM `sales` WHERE company_id = {$_SESSION['companyId']} AND sales_no = '{$salesNo}'";
    $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    if ($resultSales->num_rows > 0) {
        $boolExists = true;
    }

    if ($customerId != '' && $currencyId != '' && $price != '' && $salesNo != '' && $quantity != '' && $totalShipment != '' &&
        !$boolExists) {

        if ($exchangeRate == '') {
            $exchangeRate = 1;
        }

        $priceConverted = $price * $exchangeRate;

        // get next slip no
//        $checkShipmentNo = $shipmentCode .'-'. $currentYear;
//        $sql = "SELECT LPAD(COUNT(1) + 1, 3, '0') AS next_id FROM shipment WHERE shipment_no LIKE '{$checkShipmentNo}%'";
//        $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//        $rowShipmentNo = $resultShipment->fetch_object();
//        $nextShipmentNo = $rowShipmentNo->next_id;
//        $shipmentNo = $checkShipmentNo .'-'. $nextShipmentNo;

        $sql = "INSERT INTO `sales` (sales_no, sales_date, sales_type, customer_id, stockpile_id, destination, notes, "
            . "currency_id, exchange_rate, price, price_converted, quantity, total_shipment, entry_by, entry_date) VALUES ("
            . "'{$salesNo}', STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), 2, {$customerId}, {$loading}, '{$destination}', "
            . "'{$notes}', {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, {$quantity}, {$totalShipment}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $salesId = $myDatabase->insert_id;

            for ($i = 1; $i <= $totalShipment; $i++) {
                $shipmentCode = $salesNo . '-' . $i;

                $sql = "INSERT INTO `shipment` (shipment_code, sales_id, entry_by, entry_date) VALUES ("
                    . "'{$shipmentCode}', {$salesId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }

            $return_value = '|OK|Sales Agreement has successfully inserted.|SALES~' . $salesId . '|';
        } else {
            $return_value = '|FAIL|Insert sales failed.||';
        }
    } else {
        if ($boolExists) {
            $return_value = '|FAIL|Sales No. already exists.||';
//        } elseif(!$boolInsertCustomer) {
//            $return_value = '|FAIL|Insert customer failed.||';
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_customer_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_customer_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $customerName = $myDatabase->real_escape_string($_POST['customerName']);
    $customerAddress = $myDatabase->real_escape_string($_POST['customerAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>

    if ($customerName != '' && $customerAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
        $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$customerName}')";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;

            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }

            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }

            $sql = "INSERT INTO `customer` (customer_name, customer_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                . "'{$customerName}', '{$customerAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $customerId = $myDatabase->insert_id;

                $return_value = '|OK|Buyer has successfully inserted.|CUSTOMER~' . $customerId . '|';
            } else {
                $return_value = '|FAIL|Insert buyer failed.||';
            }
        } else {
            $return_value = '|FAIL|Buyer already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_labor_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_labor_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $laborName = $myDatabase->real_escape_string($_POST['laborName']);
    $laborAddress = $myDatabase->real_escape_string($_POST['laborAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>

    if ($laborName != '' && $laborAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
        $sql = "SELECT * FROM `labor` WHERE UPPER(labor_name) = UPPER('{$laborName}')";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;

            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }

            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }

            $sql = "INSERT INTO `labor` (labor_name, labor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                . "'{$laborName}', '{$laborAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $laborId = $myDatabase->insert_id;

                $return_value = '|OK|Labor Workers has successfully inserted.|LABOR~' . $laborId . '|';
            } else {
                $return_value = '|FAIL|Insert labor workers failed.||';
            }
        } else {
            $return_value = '|FAIL|Labor Workers already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_supplier_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_supplier_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    $vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>

    if ($vendorCode != '' && $vendorName != '' && $vendorAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
        $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$vendorCode}')";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;

            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }

            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }

            $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                . "UPPER('{$vendorCode}'), '{$vendorName}', '{$vendorAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $vendorId = $myDatabase->insert_id;

                $return_value = '|OK|Supplier has successfully inserted.|SUPPLIER~' . $vendorId . '|';
            } else {
                $return_value = '|FAIL|Insert vendor failed.||';
            }
        } else {
            $return_value = '|FAIL|Supplier already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_transaction_data') {
    // <editor-fold defaultstate="collapsed" desc="update_transaction_data">

    $return_value = '';
    $boolQuantity = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $transactionId = $myDatabase->real_escape_string($_POST['transactionId']);
    $transactionId2 = $transactionId;
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
    $transactionDate = $myDatabase->real_escape_string($_POST['transactionDate']);
    $loadingDate = $myDatabase->real_escape_string($_POST['loadingDate']);
    $transactionDate2 = $myDatabase->real_escape_string($_POST['transactionDate2']);
    $vehicleNo = $myDatabase->real_escape_string($_POST['vehicleNo']);
    $vehicleNo2 = $myDatabase->real_escape_string($_POST['vehicleNo2']);
    $unloadingCostId = $myDatabase->real_escape_string($_POST['unloadingCostId']);
    $unloadingDate = $myDatabase->real_escape_string($_POST['unloadingDate']);
    $freightCostId = $myDatabase->real_escape_string($_POST['freightCostId']);
    $handlingCostId = $myDatabase->real_escape_string($_POST['handlingCostId']);
    $permitNo = $myDatabase->real_escape_string($_POST['permitNo']);
    $transactionType = $myDatabase->real_escape_string($_POST['transactionType']);
    $sendWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight']));
    $sendWeight2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight2']));
    $blWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['blWeight']));
    $brutoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['brutoWeight']));
    $tarraWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['tarraWeight']));
    $nettoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['nettoWeight']));
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $notes2 = $myDatabase->real_escape_string($_POST['notes2']);
    $driver = $myDatabase->real_escape_string($_POST['driver']);
    $block = $myDatabase->real_escape_string($_POST['block']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $supplierId = $myDatabase->real_escape_string($_POST['supplierId']);
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $isTaxable = $myDatabase->real_escape_string($_POST['isTaxable']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $stockpileCode = '';
    $unitPrice = 0;
    $balanceQuantity = 0;
    $contractId = 0;
    $custTaxId = 'NULL';
    $curahTaxId = 'NULL';
    $ucTaxId = 0;
    $fcTaxId = 0;
	//== Start Add by Eva
    $newAmountClaim = $myDatabase->real_escape_string($_POST['newAmountClaim']);
	$qtyAddShrink = $myDatabase->real_escape_string($_POST['qtyAddShrink']);
	$priceAddShrink = $myDatabase->real_escape_string($_POST['priceAddShrink']);
    //== End Add by Eva
    // </editor-fold>

    //insert to log table
    /*if($transactionId == 257942){
	$sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode FROM `transaction` t WHERE t.transaction_id = {$transactionId}";
	$resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
            if($resultR !== false && $resultR->num_rows == 1) {
                $rowR = $resultR->fetch_object();
				//$R = "R";
				//$U = "-U";

				//$slipU = $rowR->slip_no .''. $U;
				$checkSlipNo = $rowR->stockpileCode .'-'. $currentYear;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				$slipR = $rowR->slip_no .'-R';
				$slipU = $rowR->slip_no .'-U';
				$dateR = $date->format('Y-m-d');
				$sendW = $rowR->send_weight * -1;
				$brutoW = $rowR->bruto_weight * -1;
				$tarraW = $rowR->tarra_weight * -1;
				$nettoW = $rowR->netto_weight * -1;
				$handlingW = $rowR->handling_quantity * -1;
				$freightW = $rowR->freight_quantity * -1;
				$quantityW = $rowR->quantity * -1;
				$shrinkW = $rowR->shrink * -1;
				$unloadingP = $rowR->unloading_price * -1;

				if($rowR->shipment_id == ''){
					$shipment_id = 'NULL';
				}else{
					$shipment_id = $rowR->shipment_id;
				}
				if($rowR->labor_id == ''){
					$labor_id = 'NULL';
				}else{
					$labor_id = $rowR->labor_id;
				}
				if($rowR->unloading_cost_id == ''){
					$unloading_cost_id = 'NULL';
				}else{
					$unloading_cost_id = $rowR->unloading_cost_id;
				}
				if($rowR->handling_cost_id == ''){
					$handling_cost_id = 'NULL';
				}else{
					$handling_cost_id = $rowR->handling_cost_id;
				}
				if($rowR->freight_cost_id == ''){
					$freight_cost_id = 'NULL';
				}else{
					$freight_cost_id = $rowR->freight_cost_id;
				}
				if($rowR->permit_no == ''){
					$permit_no = 'NULL';
				}else{
					$permit_no = $rowR->permit_no;
				}
				if($rowR->vendor_id == ''){
					$vendor_id = 'NULL';
				}else{
					$vendor_id = $rowR->vendor_id;
				}
				if($rowR->cust_tax_id == ''){
					$cust_tax_id = 'NULL';
				}else{
					$cust_tax_id = $rowR->cust_tax_id;
				}
				if($rowR->curah_tax_id == ''){
					$curah_tax_id = 'NULL';
				}else{
					$curah_tax_id = $rowR->curah_tax_id;
				}
				if($rowR->uc_tax_id == ''){
					$uc_tax_id = 'NULL';
				}else{
					$uc_tax_id = $rowR->uc_tax_id;
				}
				if($rowR->fc_tax_id == ''){
					$fc_tax_id = 'NULL';
				}else{
					$fc_tax_id = $rowR->fc_tax_id;
				}
				if($rowR->block == ''){
					$block = 'NULL';
				}else{
					$block = $rowR->block;
				}
				//if($rowR->payment_id == ''){
					$payment_id = 'NULL';
				//}else{
					//$payment_id = $rowR->payment_id;
				//}
				//if($rowR->fc_payment_id == ''){
					$fc_payment_id = 'NULL';
				//}else{
					//$fc_payment_id = $rowR->fc_payment_id;
				//}
				//if($rowR->hc_payment_id == ''){
					$hc_payment_id = 'NULL';
				//}else{
					//$hc_payment_id = $rowR->hc_payment_id;
				//}
				//if($rowR->uc_payment_id == ''){
					$uc_payment_id = 'NULL';
				//}else{
					//$uc_payment_id = $rowR->uc_payment_id;
				//}
				if($rowR->notes == ''){
					$notes = 'NULL';
				}else{
					$notes = $rowR->notes;
				}
				$delivery_status = 0;
			}

	$sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},{$rowR->stockpile_contract_id},{$shipment_id},'{$dateR}','{$dateR}','{$rowR->vehicle_no}',{$labor_id},{$unloading_cost_id},'{$dateR}',{$handling_cost_id},{$freight_cost_id},'{$permit_no}',{$rowR->transaction_type},{$vendor_id},'{$sendW}','{$brutoW}','{$tarraW}','{$nettoW}','{$notes}','{$rowR->driver}','{$handlingW}','{$freightW}','{$quantityW}','{$shrinkW}','{$rowR->freight_price}','{$unloadingP}','{$rowR->unit_price}','{$rowR->inventory_value}',{$cust_tax_id},{$curah_tax_id},{$uc_tax_id},{$fc_tax_id},{$delivery_status},'{$block}',{$payment_id},{$fc_payment_id},{$hc_payment_id},{$uc_payment_id},{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
       if($resultLog !== false) {
    //echo $sqlLog;
	$transactionId = $myDatabase->insert_id;

	insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
	   }

	}*/

    if ($isTaxable == '') {
        $isTaxable = 0;
    }

    if ($ppn == '') {
        $ppn = 0;
    }

    if ($pph == '') {
        $pph = 0;
    }

    if ($transactionType == 1) {
        //echo 'test2';
        //$transactionId2 = 0;
        // <editor-fold defaultstate="collapsed" desc="IN">
        if ($stockpileId != '' && $stockpileContractId != '' && $loadingDate != '' && $vehicleNo != '' && $unloadingCostId != '' &&
            $unloadingDate != '' && $freightCostId != '' && $handlingCostId != '' && $permitNo != '' && $transactionType != '' && $sendWeight != '' &&
            $brutoWeight != '' && $tarraWeight != '' && $driver != '' && $vendorId != '' && $laborId != '') {

            if ($supplierId == '') {
                $supplierId = "NULL";
            }

            // check balance contract & get unit price
            $sql = "SELECT s.stockpile_code, con.price_converted, sc.contract_id, con.contract_type, 
                        ((SELECT COALESCE(SUM(quantity), 0) FROM stockpile_contract WHERE contract_id = sc.contract_id
                        ) - con.adjustment) - (
                            SELECT COALESCE(SUM(t.send_weight), 0) FROM `transaction` t LEFT JOIN stockpile_contract sc ON t.stockpile_contract_id = sc.stockpile_contract_id
                            WHERE sc.contract_id =  con.contract_id
                        ) AS balance, s.freight_weight_rule, s.curah_weight_rule, v.pph_tax_id
                    FROM stockpile_contract sc
                    INNER JOIN stockpile s
                        ON s.stockpile_id = sc.stockpile_id
                    INNER JOIN contract con
                        ON con.contract_id = sc.contract_id
                    INNER JOIN vendor v
                        ON v.vendor_id = con.vendor_id
                    WHERE stockpile_contract_id = {$stockpileContractId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $contractId = $rowStockpile->contract_id;
                $unitPrice = $rowStockpile->price_converted;
                $contractType = $rowStockpile->contract_type;
                $freightWeightRule = $rowStockpile->freight_weight_rule;
                $curahWeightRule = $rowStockpile->curah_weight_rule;
                if ($contractType == 'P') {
                    $balanceQuantity = $rowStockpile->balance;
                } elseif ($contractType == 'C') {
                    $balanceQuantity = $sendWeight;
                    if ($rowStockpile->pph_tax_id != 0 && $rowStockpile->pph_tax_id != '') {
                        $curahTaxId = $rowStockpile->pph_tax_id;
                    }
                }
            }

            // get netto weight
            //$nettoWeight = $brutoWeight - $tarraWeight;

            // get freight weight
            $sqlfc = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
            $resultFreight = $myDatabase->query($sqlfc, MYSQLI_STORE_RESULT);
            if ($resultFreight !== false && $resultFreight->num_rows == 1) {
                $rowFreight = $resultFreight->fetch_object();
                $freightRule = $rowFreight->freight_rule;


            }

            // get freight weight
            if ($freightRule == 1) {
                $freightQuantity = $sendWeight;
            } else if ($freightRule == 0) {
                if ($nettoWeight < $sendWeight) {
                    $freightQuantity = $nettoWeight;
                } else if ($nettoWeight > $sendWeight) {
                    $freightQuantity = $sendWeight;
                } else {
                    $freightQuantity = $sendWeight;
                }
            } /*elseif($freightWeightRule == 1) {
                $freightQuantity = $sendWeight;
            } elseif($freightWeightRule == 2) {
                $freightQuantity = $nettoWeight;
            } else {
                $freightQuantity = $sendWeight;
            }*/

            // get shrink condition
//            $quantity = $nettoWeight;
//            $sql = "SELECT * FROM `condition` WHERE category_id = 1 AND contract_id = {$contractId}";
//            $resultCondition = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//            if($resultCondition !== false && $resultCondition->num_rows == 1) {
//                $rowCondition = $resultCondition->fetch_object();
//                $quantity = ${$rowCondition->rule};
//            }
            if ($sendWeight > $balanceQuantity && $balanceQuantity > 0) {
                $balanceQuantity = $sendWeight;

            }

            if ($sendWeight <= $balanceQuantity || $balanceQuantity == 0) {
                // get shrink
                $shrink = 0;
                if ($contractType == 'P') {
                    if ($nettoWeight < $sendWeight) {
                        $quantity = $nettoWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } elseif ($nettoWeight > $sendWeight) {
                        $quantity = $sendWeight;
                        $shrink = 0;
                    } else {
                        $quantity = $sendWeight;
                    }
                } elseif ($contractType == 'C') {
                    if ($curahWeightRule == 0) {
                        if ($nettoWeight < $sendWeight) {
                            $quantity = $nettoWeight;
                            $shrink = $sendWeight - $nettoWeight;
                        } elseif ($nettoWeight > $sendWeight) {
                            $quantity = $sendWeight;
                            $shrink = $sendWeight - $nettoWeight;
                        } else {
                            $quantity = $sendWeight;
                        }
                    } elseif ($curahWeightRule == 1) {
                        $quantity = $sendWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } elseif ($curahWeightRule == 2) {
                        $quantity = $nettoWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } else {
                        $quantity = $sendWeight;
                    }
                }
                /*if($transactionId2 == 257942){
                $checkSlipNo = $rowR->stockpileCode .'-'. $currentYear;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				}*/
                // get freight cost
                if ($freightCostId == 'NONE') {
                    $freightCostId = 'NULL';
                    $freightPrice = 0;
                    //$freightQuantity2 = 0;
                } else {
                    $sqlF = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                    $resultF = $myDatabase->query($sqlF, MYSQLI_STORE_RESULT);
                    if ($resultF !== false && $resultF->num_rows == 1) {
                        $rowF = $resultF->fetch_object();
                        $freightPrice = $rowF->price_converted;
                        if ($rowF->freight_rule == 1) {
                            //$freightQuantity2 = $sendWeight;
                        } else {
                            //$freightQuantity2 = $nettoWeight;
                        }
                        if ($rowF->pph_tax_id != 0 && $rowF->pph_tax_id != '') {
                            $fcTaxId = $rowF->pph_tax_id;
                        } else {
                            $fcTaxId = 0;
                        }
                    }
                }

                // get handling cost
                if ($handlingCostId == 'NONE') {
                    $handlingCostId = 'NULL';
                    $handlingQuantity = 0;
                    $handlingPrice = 0;
                } else {
                    $sql = "SELECT vhc.vendor_handling_id, vhc.price_converted, vh.pph_tax_id, vh.vendor_handling_rule
                            FROM `vendor_handling_cost` vhc 
                            INNER JOIN vendor_handling vh
                                ON vh.vendor_handling_id = vhc.vendor_handling_id
                            WHERE vhc.handling_cost_id = {$handlingCostId}";
                    $resultHandling = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultHandling !== false && $resultHandling->num_rows == 1) {
                        $rowHandling = $resultHandling->fetch_object();
                        $handlingPrice = $rowHandling->price_converted;
                        if ($rowHandling->vendor_handling_rule == 1) {
                            $handlingQuantity = $sendWeight;
                        } else {
                            $handlingQuantity = $nettoWeight;
                        }

                    }
                }

                // get unloading cost
                if ($unloadingCostId == 'NONE') {
                    $unloadingCostId = 'NULL';
                    $unloadingPrice = 0;
                } else {
                    $sql = "SELECT uc.price_converted 
                            FROM `unloading_cost` uc 
                            WHERE uc.unloading_cost_id = {$unloadingCostId}";
                    $resultUnloading = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultUnloading !== false && $resultUnloading->num_rows == 1) {
                        $rowUnloading = $resultUnloading->fetch_object();
                        $unloadingPrice = $rowUnloading->price_converted;
                    }
                }

                if ($laborId == 'NONE') {
                    $laborId = 'NULL';
                } else {
                    $sql = "SELECT l.pph_tax_id
                            FROM `labor` l
                            WHERE l.labor_id = {$laborId}";
                    $resultLabor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultLabor !== false && $resultLabor->num_rows == 1) {
                        $rowLabor = $resultLabor->fetch_object();
                        if ($rowLabor->pph_tax_id != 0 && $rowLabor->pph_tax_id != '') {
                            $ucTaxId = $rowLabor->pph_tax_id;
                        }
                    }
                }

                $syncStatus = 0;
                $sql = "SELECT sync_status FROM `transaction` WHERE transaction_id = {$transactionId}";
                $resultTrans = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if ($resultTrans !== false && $resultTrans->num_rows == 1) {
                    $rowTrans = $resultTrans->fetch_object();
                    if ($rowTrans->sync_status == 1) {
                        $syncStatus = 2;
                    }
                }

                // get inventory value
                $inventoryValue = ($freightQuantity * $freightPrice) + $unloadingPrice + ($quantity * $unitPrice) + ($handlingQuantity * $handlingPrice);

                /*if($transactionId2 == 257942){
                // insert into transaction
				$sql = "INSERT INTO `transaction` (slip_no, slip_retur, stockpile_contract_id, transaction_date, loading_date, vehicle_no, labor_id, unloading_cost_id, "
                        . "unloading_date, freight_cost_id, handling_cost_id, permit_no, transaction_type, vendor_id, send_weight, bruto_weight, tarra_weight, "
                        . "netto_weight, notes, driver, freight_quantity, handling_quantity, quantity, shrink, freight_price, unloading_price, unit_price, "
                        . "inventory_value, block, curah_tax_id, uc_tax_id, fc_tax_id, entry_by, entry_date, modify_by, modify_date) "
                        . "VALUES ('{$slipNo}', '{$slipU}',{$stockpileContractId}, '{$dateR}', '{$dateR}', "
                        . "'{$vehicleNo}', {$laborId}, {$unloadingCostId}, '{$dateR}', {$freightCostId}, {$handlingCostId}, '{$permitNo}', "
                        . "{$transactionType}, {$supplierId}, {$sendWeight}, {$brutoWeight}, {$tarraWeight}, {$nettoWeight}, '{$notes}', "
                        . "'{$driver}', {$freightQuantity}, {$handlingQuantity}, {$quantity}, {$shrink}, {$freightPrice}, {$unloadingPrice}, {$unitPrice}, {$inventoryValue}, '{$block}', "
                        . "{$curahTaxId}, {$ucTaxId}, {$fcTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				}else{*/
                $sql = "UPDATE `transaction` SET "
                    . "stockpile_contract_id = {$stockpileContractId}, "
                    . "loading_date = STR_TO_DATE('{$loadingDate}', '%d/%m/%Y'), "
                    . "vehicle_no = '{$vehicleNo}', "
                    . "labor_id = {$laborId}, "
                    . "unloading_cost_id = {$unloadingCostId}, "
                    . "transaction_date = STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), "
                    . "unloading_date = STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), "
                    . "freight_cost_id = {$freightCostId}, "
                    . "handling_cost_id = {$handlingCostId}, "
                    . "permit_no = '{$permitNo}', "
                    . "vendor_id = {$supplierId}, "
                    . "send_weight = {$sendWeight}, "
                    . "bruto_weight = {$brutoWeight}, "
                    . "tarra_weight = {$tarraWeight}, "
                    . "netto_weight = {$nettoWeight}, "
                    . "notes = '{$notes}', "
                    . "driver = '{$driver}', "
                    . "freight_quantity = {$freightQuantity}, "
                    . "handling_quantity = {$handlingQuantity}, "
                    . "quantity = {$quantity}, "
                    . "shrink = {$shrink}, "
                    //. "susut_qty = {$qtySusut}, "
                    //. "susut_price = {$hargaSusut}, "
                    . "freight_price = {$freightPrice}, "
                    . "handling_price = {$handlingPrice}, "
                    . "unloading_price = {$unloadingPrice}, "
                    . "unit_price = {$unitPrice}, "
                    . "inventory_value = {$inventoryValue}, "
                    . "fc_tax_id = {$fcTaxId}, "
                    . "uc_tax_id = {$ucTaxId}, "
                    . "block = '{$block}', "
                    . "sync_status = {$syncStatus}, "
                    . "modify_by = {$_SESSION['userId']}, "
                    . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                    . "WHERE transaction_id = {$transactionId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                //}
                if ($result !== false) {
                    $return_value = '|OK|Transaction has updated successfully.|';

                    // if curah update contract and stockpile_contract quantity
                    if ($contractType == 'C') {
                        /* $sql = "UPDATE contract SET quantity = {$quantity} WHERE contract_id = {$contractId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                        $sql = "UPDATE stockpile_contract SET quantity = {$quantity} WHERE stockpile_contract_id = {$stockpileContractId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/
                    }

                    $sql = "CALL sp_shrink_weight({$transactionId})";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                    insertReportGL($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.' . $sql . '|';
                }
            } else {
                $return_value = '|FAIL|The quantity exceed the balance of the contract.|';
            }
        } else {
            $return_value = '|FAIL|Please fill the required fields.|';
        }
        // </editor-fold>

    } elseif ($transactionType == 2) {
        // <editor-fold defaultstate="collapsed" desc="OUT">
        if ($stockpileId != '' && $salesId != '' && $shipmentId != '' && $transactionDate2 != '' && $vehicleNo2 != '' && $sendWeight2 != '' && $blWeight != '') {

            $sql = "UPDATE `transaction` SET "
                . "vehicle_no = '{$vehicleNo2}', "
                . "transaction_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                . "unloading_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                . "notes = '{$notes2}', "
                . "modify_by = {$_SESSION['userId']}, "
                . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                . "WHERE transaction_id = {$transactionId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result !== false) {

                $return_value = '|OK|Transaction has updated successfully.|';

                insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                insertReportGL($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
            } else {
                $return_value = '|FAIL|Failed insert transaction.' . $sql . '|';
            }
            // check stockpile detail & transaction balance
            /*$sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode FROM `transaction` t WHERE t.transaction_id = {$transactionId}";
	$resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
            if($resultR !== false && $resultR->num_rows == 1) {
                $rowR = $resultR->fetch_object();
				//$R = "R";
				//$U = "-U";
                //$sql = "UPDATE `transaction` SET shipment_id = NULL WHERE transaction_id = {$transactionId}";
                //$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				//$slipU = $rowR->slip_no .''. $U;
				$checkSlipNo = $rowR->stockpileCode .'-'. $currentYear2;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				$slipR = $rowR->slip_no .'-R';
				$slipU = $rowR->slip_no .'-U';
				$dateR = $date->format('Y-m-d');
				$sendW = $rowR->send_weight * -1;
				$quantityW = $rowR->quantity * -1;
				$shrinkW = $rowR->shrink * -1;
				//$unloadingP = $rowR->unloading_price * -1;
				if($rowR->notes == '')
				$notes = 'NULL';
			}

	$sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},NULL,{$shipmentId},'{$rowR->transaction_date}',NULL,'{$rowR->vehicle_no}',NULL,NULL,'{$rowR->transaction_date}',NULL,NULL,NULL,{$rowR->transaction_type},NULL,'{$sendW}',0,0,0,'{$notes}',NULL,0,0,'{$quantityW}','{$shrinkW}',0,0,0,0,0,NULL,NULL,NULL,0,NULL,NULL,NULL,NULL,NULL,{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
       if($resultLog !== false) {
    //echo $sqlLog;
	$transactionId = $myDatabase->insert_id;

	insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

	// delete from delivery and update delivery_status in transaction
                    $sql = "SELECT d.*, t.sync_status
                            FROM delivery d
                            INNER JOIN `transaction` t
                                ON t.transaction_id = d.transaction_id
                            WHERE d.shipment_id = {$shipmentId}";
                    $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultShipment !== false && $resultShipment->num_rows > 0) {
                        while($rowShipment = $resultShipment->fetch_object()) {
                            $syncStatus = 0;
                            if($rowShipment->sync_status == 1) {
                                $syncStatus = 2;
                            }

                            if($rowShipment->percent_taken == 100) {
                                $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } else {
                                $sqlOther = "SELECT * FROM delivery WHERE shipment_id <> {$shipmentId} AND transaction_id = {$rowShipment->transaction_id}";
                                $resultOther = $myDatabase->query($sqlOther, MYSQLI_STORE_RESULT);

                                if($resultOther->num_rows > 0) {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 2, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                } else {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                }
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            }
                        }

                        $sqlDelete = "DELETE FROM delivery WHERE shipment_id = {$shipmentId}";
                        $resultDelete = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

                    }
					//$sql = "UPDATE `transaction` SET shipment_id = NULL WHERE transaction_id = {$transactionId}";
						//$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
	   }*/

            // echo $sqlLog;
            //insert new delivery
            /*$sql = "SELECT s.stockpile_code, s.stockpile_name,
                        (
                            SELECT COALESCE(SUM(t.quantity), 0) FROM `transaction` t
                            INNER JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                            WHERE sc.stockpile_id = s.stockpile_id
                            AND t.transaction_type = 1
                        ) AS available_balance,
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction`
                            WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                            AND transaction_type = 2
                        ) AS delivered_balance
                    FROM stockpile s
                    WHERE s.stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $stockpileName = $rowStockpile->stockpile_name;
                $availableBalance = $rowStockpile->available_balance;
                $deliveredBalance = $rowStockpile->delivered_balance;
            }

            // get sales detail
            $sql = "SELECT sl.quantity, sl.price_converted, sl.currency_id, sl.exchange_rate, sl.price, cust.pph_tax_id
                    FROM sales sl
                    INNER JOIN customer cust
                        ON cust.customer_id = sl.customer_id
                    WHERE sl.sales_id = {$salesId}";
            $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSales !== false && $resultSales->num_rows == 1) {
                $rowSales = $resultSales->fetch_object();
                $salesBalance = $rowSales->quantity;
                $salesUnitPrice = $rowSales->price_converted;
                $salesCurrencyId = $rowSales->currency_id;
                $salesExchangeRate = $rowSales->exchange_rate;
                $salesOriginalUnitPrice = $rowSales->price;
                $custTaxId = $rowSales->pph_tax_id;
            }

            // get next slip no

					$checkSlipNo = $stockpileCode .'-'. $currentYear3;

            //$checkSlipNo = $stockpileCode /*.'-'. $currentYear*///;
//            $sql = "SELECT LPAD(COUNT(1) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ";
//            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            /*$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSlip->num_rows == 0) {
                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }
            $rowSlipNo = $resultSlip->fetch_object();
            $nextSlipNo = $rowSlipNo->next_id;
            $slipNo = $checkSlipNo .'-'. $nextSlipNo;


//            if($sendWeight2 <= $availableBalance && $blWeight <= ($salesBalance - $deliveredBalance)) {
            if($sendWeight2 <= $availableBalance) {
                $shrink = $sendWeight2 - $blWeight;

                // insert into transaction
                $sql = "INSERT INTO `transaction` (slip_no, slip_retur, shipment_id, transaction_date,unloading_date, vehicle_no, transaction_type, "
                        . "send_weight, notes, quantity, shrink, cust_tax_id, entry_by, entry_date) "
                        . "VALUES ('{$slipNo}', '{$slipU}', {$shipmentId}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), '{$vehicleNo2}', "
                        . "{$transactionType}, {$sendWeight2}, '{$notes2}', {$blWeight}, {$shrink}, {$custTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $transactionId = $myDatabase->insert_id;

                    $return_value = '|OK|Transaction has inserted successfully.|';

                    // insert into delivery
                    $sql = "SELECT t.*
                            FROM transaction t
                            WHERE t.stockpile_contract_id IN (
                                SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                            ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                              ORDER BY t.unloading_date ASC, t.slip_no ASC";
                    $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $totalInventoryValue = 0;
                    if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                        $balanceLeft = $sendWeight2;
                        while($rowDelivery = $resultDelivery->fetch_object()) {
                            $syncStatus = 0;
                            if($rowDelivery->sync_status == 1) {
                                $syncStatus = 2;
                            }

                            if($balanceLeft > 0) {
                                if($rowDelivery->delivery_status == 0) {
                                    if($balanceLeft >= $rowDelivery->quantity) {
                                        $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                        $quantityTaken = $rowDelivery->quantity;
                                        $percentTaken = 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < $rowDelivery->quantity) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } elseif($rowDelivery->delivery_status == 2) {
                                    $totalTaken = 0;
                                    $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                    $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                        $rowTaken = $resultTaken->fetch_object();
                                        $totalTaken = $rowTaken->total_taken;
                                    }

                                    if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                        $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                        $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                }

                                $deliveryValue = $quantityTaken * $salesUnitPrice;
                                $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                $percentTaken = $percentTaken * 100;

                                $sql = "INSERT INTO `delivery` (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                        . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                        . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus}, sync_status = {$syncStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    }

                    //$updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                    $updateInventoryValue = $totalInventoryValue;

                    $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    // update shipment
                    $cogsAmount = $updateInventoryValue;
                    if($salesCurrencyId != 1) {
                        $cogsAmount = $updateInventoryValue / $salesExchangeRate;
                    }
                    $invoiceAmount = $blWeight * $salesOriginalUnitPrice;
                    $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                            . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$blWeight}, shipment_status = 1 "
                            . "WHERE shipment_id = {$shipmentId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    // update sales
                    $boolUpdateSales = false;
                    if($blWeight == ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 1;
                        $boolUpdateSales = true;
                    } elseif($blWeight < ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 2;
                        $boolUpdateSales = true;
                    }

                    if($boolUpdateSales) {
                        $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }

                     insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                    unset($_SESSION['transaction']);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.|';
                }
            } else {
                if($sendWeight2 > $availableBalance) {
                    $return_value = '|FAIL|Available quantity in '. $stockpileName .' is '. number_format($availableBalance, 4, '.', ',') .' Kg.|';
                } elseif($sendWeight2 > ($salesBalance - $deliveredBalance)) {
                    $return_value = '|FAIL|Sales agreement balance is '. ($salesBalance - $deliveredBalance) .' Kg.|';
                }
            }*/
            /*  $sql = "SELECT s.stockpile_code, s.stockpile_name,
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction`
                            WHERE stockpile_id = s.stockpile_id
                            AND transaction_type = 1
                        ) AS available_balance,
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction`
                            WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                            AND transaction_type = 2
                        ) AS delivered_balance
                    FROM stockpile s
                    WHERE s.stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $stockpileName = $rowStockpile->stockpile_name;
                $availableBalance = $rowStockpile->available_balance;
                $deliveredBalance = $rowStockpile->delivered_balance;
            }

            // get sales detail
            $sql = "SELECT quantity, price_converted, currency_id, exchange_rate, price FROM sales WHERE sales_id = {$salesId}";
            $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSales !== false && $resultSales->num_rows == 1) {
                $rowSales = $resultSales->fetch_object();
                $salesBalance = $rowSales->quantity;
                $salesUnitPrice = $rowSales->price_converted;
                $salesCurrencyId = $rowSales->currency_id;
                $salesExchangeRate = $rowSales->exchange_rate;
                $salesOriginalUnitPrice = $rowSales->price;
            }

            if($sendWeight2 != 0 && $blWeight != 0) {

                $shrink = $sendWeight2 - $blWeight;

                $syncStatus = 0;
                $sql = "SELECT sync_status FROM `transaction` WHERE transaction_id = {$transactionId}";
                $resultTrans = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultTrans !== false && $resultTrans->num_rows == 1) {
                    $rowTrans = $resultTrans->fetch_object();
                    if($rowTrans->sync_status == 1) {
                        $syncStatus = 2;
                    }
                }

                // insert into transaction
                $sql = "UPDATE `transaction` SET "
                        . "shipment_id = {$shipmentId}, "
                        . "vehicle_no = '{$vehicleNo2}', "
                        . "send_weight = {$sendWeight2}, "
						. "notes = '{$notes2}', "
                        . "quantity = {$blWeight}, "
                        . "shrink = {$shrink}, "
                        . "sync_status = {$syncStatus}, "
                        . "modify_by = {$_SESSION['userId']}, "
                        . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE transaction_id = {$transactionId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $transactionId = $myDatabase->insert_id;

                    $return_value = '|OK|Transaction has updated successfully.|';

                    // delete from delivery and update delivery_status in transaction
                    $sql = "SELECT d.*, t.sync_status
                            FROM delivery d
                            INNER JOIN `transaction` t
                                ON t.transaction_id = d.transaction_id
                            WHERE d.shipment_id = {$shipmentId}";
                    $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultShipment !== false && $resultShipment->num_rows > 0) {
                        while($rowShipment = $resultShipment->fetch_object()) {
                            $syncStatus = 0;
                            if($rowShipment->sync_status == 1) {
                                $syncStatus = 2;
                            }

                            if($rowShipment->percent_taken == 100) {
                                $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } else {
                                $sqlOther = "SELECT * FROM delivery WHERE shipment_id <> {$shipmentId} AND transaction_id = {$rowShipment->transaction_id}";
                                $resultOther = $myDatabase->query($sqlOther, MYSQLI_STORE_RESULT);

                                if($resultOther->num_rows > 0) {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 2, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                } else {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                }
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            }
                        }

                        $sqlDelete = "DELETE FROM delivery WHERE shipment_id = {$shipmentId}";
                        $resultDelete = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);
                    }


                    // insert into delivery
						$sql = "SELECT t.*
                            FROM transaction t
                            WHERE t.stockpile_contract_id IN (
                                SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                            ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                            ORDER BY  t.unloading_date ASC, t.slip_no ASC";
                    $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $totalInventoryValue = 0;
                    if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                        $balanceLeft = $sendWeight2;
                        while($rowDelivery = $resultDelivery->fetch_object()) {
                            $syncStatus = 0;
                            if($rowDelivery->sync_status == 1) {
                                $syncStatus = 2;
                            }

                            if($balanceLeft > 0) {
                                if($rowDelivery->delivery_status == 0) {
                                    if($balanceLeft >= $rowDelivery->quantity) {
                                        $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                        $quantityTaken = $rowDelivery->quantity;
                                        $percentTaken = 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < $rowDelivery->quantity) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } elseif($rowDelivery->delivery_status == 2) {
                                    $totalTaken = 0;
                                    $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                    $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                        $rowTaken = $resultTaken->fetch_object();
                                        $totalTaken = $rowTaken->total_taken;
                                    }

                                    if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                        $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                        $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                }

                                $deliveryValue = $quantityTaken * $salesUnitPrice;
                                $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                $percentTaken = $percentTaken * 100;

                                $sql = "INSERT INTO delivery (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                        . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                        . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus}, sync_status = {$syncStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    }

                    $updateInventoryValue = $totalInventoryValue;
//                    $updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;

                    $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    // update shipment
                    $cogsAmount = $updateInventoryValue;
                    if($salesCurrencyId != 1) {
                        $cogsAmount = $updateInventoryValue / $salesExchangeRate;
                    }
                    $invoiceAmount = $blWeight * $salesOriginalUnitPrice;
                    $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                            . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$blWeight}, shipment_status = 1 "
                            . "WHERE shipment_id = {$shipmentId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    // update sales
                    $boolUpdateSales = false;
                    if($sendWeight2 == ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 1;
                        $boolUpdateSales = true;
                    } elseif($sendWeight2 < ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 2;
                        $boolUpdateSales = true;
                    }

                    if($boolUpdateSales) {
                        $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }

					insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                    unset($_SESSION['transaction']);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.|';
					echo $sql;
                }
            } else {
                if($sendWeight2 > $availableBalance) {
                    $return_value = '|FAIL|Available quantity in '. $stockpileName .' is '. number_format($availableBalance, 4, '.', ',') .' Kg.|';
                } elseif($sendWeight2 > ($salesBalance - $deliveredBalance)) {
                    $return_value = '|FAIL|Sales agreement balance is '. ($salesBalance - $deliveredBalance) .' Kg.|';
                }
            }*/
        } else {
            $return_value = '|FAIL|Please fill the required fields.|';
        }
        // </editor-fold>
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_transaction_data_new') {
    // <editor-fold defaultstate="collapsed" desc="update_transaction_data">

    $return_value = '';
    $boolQuantity = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $transactionId = $myDatabase->real_escape_string($_POST['transactionId']);
    $transactionId2 = $transactionId;
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
    $transactionDate = $myDatabase->real_escape_string($_POST['transactionDate']);
    $loadingDate = $myDatabase->real_escape_string($_POST['loadingDate']);
    $transactionDate2 = $myDatabase->real_escape_string($_POST['transactionDate2']);
    $vehicleNo = $myDatabase->real_escape_string($_POST['vehicleNo']);
    $vehicleNo2 = $myDatabase->real_escape_string($_POST['vehicleNo2']);
    $unloadingCostId = $myDatabase->real_escape_string($_POST['unloadingCostId']);
    $unloadingDate = $myDatabase->real_escape_string($_POST['unloadingDate']);
    $freightCostId = $myDatabase->real_escape_string($_POST['freightCostId']);
    $handlingCostId = $myDatabase->real_escape_string($_POST['handlingCostId']);
    $permitNo2 = $myDatabase->real_escape_string($_POST['permitNo2']);
    $transactionType = $myDatabase->real_escape_string($_POST['transactionType']);
    $sendWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight']));
    $sendWeight2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight2']));
    $blWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['blWeight']));
    $brutoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['brutoWeight']));
    $tarraWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['tarraWeight']));
    $nettoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['nettoWeight']));
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $notes2 = $myDatabase->real_escape_string($_POST['notes2']);
    $driver = $myDatabase->real_escape_string($_POST['driver']);
    $block = $myDatabase->real_escape_string($_POST['block']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $supplierId = $vendorId;
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $isTaxable = $myDatabase->real_escape_string($_POST['isTaxable']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $stockpileCode = '';
    $unitPrice = 0;
    $balanceQuantity = 0;
    $contractId = 0;
    $custTaxId = 'NULL';
    $curahTaxId = 'NULL';
    $ucTaxId = 0;
    $fcTaxId = 0;
    $slipUpload = $myDatabase->real_escape_string($_POST['idSuratTugas']);
    $persenPecahSlip = $myDatabase->real_escape_string($_POST['persenPecahSlip']);
    // </editor-fold>

    //insert to log table
    /*if($transactionId == 257942){
	$sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode FROM `transaction` t WHERE t.transaction_id = {$transactionId}";
	$resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
            if($resultR !== false && $resultR->num_rows == 1) {
                $rowR = $resultR->fetch_object();
				//$R = "R";
				//$U = "-U";

				//$slipU = $rowR->slip_no .''. $U;
				$checkSlipNo = $rowR->stockpileCode .'-'. $currentYear;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				$slipR = $rowR->slip_no .'-R';
				$slipU = $rowR->slip_no .'-U';
				$dateR = $date->format('Y-m-d');
				$sendW = $rowR->send_weight * -1;
				$brutoW = $rowR->bruto_weight * -1;
				$tarraW = $rowR->tarra_weight * -1;
				$nettoW = $rowR->netto_weight * -1;
				$handlingW = $rowR->handling_quantity * -1;
				$freightW = $rowR->freight_quantity * -1;
				$quantityW = $rowR->quantity * -1;
				$shrinkW = $rowR->shrink * -1;
				$unloadingP = $rowR->unloading_price * -1;

				if($rowR->shipment_id == ''){
					$shipment_id = 'NULL';
				}else{
					$shipment_id = $rowR->shipment_id;
				}
				if($rowR->labor_id == ''){
					$labor_id = 'NULL';
				}else{
					$labor_id = $rowR->labor_id;
				}
				if($rowR->unloading_cost_id == ''){
					$unloading_cost_id = 'NULL';
				}else{
					$unloading_cost_id = $rowR->unloading_cost_id;
				}
				if($rowR->handling_cost_id == ''){
					$handling_cost_id = 'NULL';
				}else{
					$handling_cost_id = $rowR->handling_cost_id;
				}
				if($rowR->freight_cost_id == ''){
					$freight_cost_id = 'NULL';
				}else{
					$freight_cost_id = $rowR->freight_cost_id;
				}
				if($rowR->permit_no == ''){
					$permit_no = 'NULL';
				}else{
					$permit_no = $rowR->permit_no;
				}
				if($rowR->vendor_id == ''){
					$vendor_id = 'NULL';
				}else{
					$vendor_id = $rowR->vendor_id;
				}
				if($rowR->cust_tax_id == ''){
					$cust_tax_id = 'NULL';
				}else{
					$cust_tax_id = $rowR->cust_tax_id;
				}
				if($rowR->curah_tax_id == ''){
					$curah_tax_id = 'NULL';
				}else{
					$curah_tax_id = $rowR->curah_tax_id;
				}
				if($rowR->uc_tax_id == ''){
					$uc_tax_id = 'NULL';
				}else{
					$uc_tax_id = $rowR->uc_tax_id;
				}
				if($rowR->fc_tax_id == ''){
					$fc_tax_id = 'NULL';
				}else{
					$fc_tax_id = $rowR->fc_tax_id;
				}
				if($rowR->block == ''){
					$block = 'NULL';
				}else{
					$block = $rowR->block;
				}
				//if($rowR->payment_id == ''){
					$payment_id = 'NULL';
				//}else{
					//$payment_id = $rowR->payment_id;
				//}
				//if($rowR->fc_payment_id == ''){
					$fc_payment_id = 'NULL';
				//}else{
					//$fc_payment_id = $rowR->fc_payment_id;
				//}
				//if($rowR->hc_payment_id == ''){
					$hc_payment_id = 'NULL';
				//}else{
					//$hc_payment_id = $rowR->hc_payment_id;
				//}
				//if($rowR->uc_payment_id == ''){
					$uc_payment_id = 'NULL';
				//}else{
					//$uc_payment_id = $rowR->uc_payment_id;
				//}
				if($rowR->notes == ''){
					$notes = 'NULL';
				}else{
					$notes = $rowR->notes;
				}
				$delivery_status = 0;
			}

	$sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},{$rowR->stockpile_contract_id},{$shipment_id},'{$dateR}','{$dateR}','{$rowR->vehicle_no}',{$labor_id},{$unloading_cost_id},'{$dateR}',{$handling_cost_id},{$freight_cost_id},'{$permit_no}',{$rowR->transaction_type},{$vendor_id},'{$sendW}','{$brutoW}','{$tarraW}','{$nettoW}','{$notes}','{$rowR->driver}','{$handlingW}','{$freightW}','{$quantityW}','{$shrinkW}','{$rowR->freight_price}','{$unloadingP}','{$rowR->unit_price}','{$rowR->inventory_value}',{$cust_tax_id},{$curah_tax_id},{$uc_tax_id},{$fc_tax_id},{$delivery_status},'{$block}',{$payment_id},{$fc_payment_id},{$hc_payment_id},{$uc_payment_id},{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
       if($resultLog !== false) {
    //echo $sqlLog;
	$transactionId = $myDatabase->insert_id;

	insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
	   }

	}*/

    if ($isTaxable == '') {
        $isTaxable = 0;
    }

    if ($ppn == '') {
        $ppn = 0;
    }

    if ($pph == '') {
        $pph = 0;
    }

    if ($transactionType == 1) {
        //echo 'test2';
        //$transactionId2 = 0;
        // <editor-fold defaultstate="collapsed" desc="IN">
        if ($stockpileId != '' && $stockpileContractId != '' && $loadingDate != '' && $vehicleNo != '' && $unloadingCostId != '' &&
            $unloadingDate != '' && $freightCostId != '' && $handlingCostId != '' && $permitNo2 != '' && $transactionType != '' && $sendWeight != '' &&
            $brutoWeight != '' && $tarraWeight != '' && $driver != '' && $vendorId != '' && $laborId != '') {

            if ($supplierId == '') {
                $supplierId = "NULL";
            }

            // check balance contract & get unit price
            $sql = "SELECT s.stockpile_code, con.price_converted, sc.contract_id, con.contract_type, 
                        ((SELECT COALESCE(SUM(quantity), 0) FROM stockpile_contract WHERE contract_id = sc.contract_id
                        ) - con.adjustment) - (
                            SELECT COALESCE(SUM(t.send_weight), 0) FROM `transaction` t LEFT JOIN stockpile_contract sc ON t.stockpile_contract_id = sc.stockpile_contract_id
                            WHERE sc.contract_id =  con.contract_id
                        ) AS balance, s.freight_weight_rule, s.curah_weight_rule, v.pph_tax_id
                    FROM stockpile_contract sc
                    INNER JOIN stockpile s
                        ON s.stockpile_id = sc.stockpile_id
                    INNER JOIN contract con
                        ON con.contract_id = sc.contract_id
                    INNER JOIN vendor v
                        ON v.vendor_id = con.vendor_id
                    WHERE stockpile_contract_id = {$stockpileContractId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $contractId = $rowStockpile->contract_id;
                $unitPrice = $rowStockpile->price_converted;
                $contractType = $rowStockpile->contract_type;
                $freightWeightRule = $rowStockpile->freight_weight_rule;
                $curahWeightRule = $rowStockpile->curah_weight_rule;
                if ($contractType == 'P') {
                    $balanceQuantity = $rowStockpile->balance;
                } elseif ($contractType == 'C') {
                    $balanceQuantity = $sendWeight;
                    if ($rowStockpile->pph_tax_id != 0 && $rowStockpile->pph_tax_id != '') {
                        $curahTaxId = $rowStockpile->pph_tax_id;
                    }
                }
            }

            // get netto weight
            //$nettoWeight = $brutoWeight - $tarraWeight;

            // get freight weight
            $sqlfc = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
            $resultFreight = $myDatabase->query($sqlfc, MYSQLI_STORE_RESULT);
            if ($resultFreight !== false && $resultFreight->num_rows == 1) {
                $rowFreight = $resultFreight->fetch_object();
                $freightRule = $rowFreight->freight_rule;


            }

            // get freight weight
            if ($freightRule == 1) {
                $freightQuantity = $sendWeight;
            } else if ($freightRule == 0) {
                if ($nettoWeight < $sendWeight) {
                    $freightQuantity = $nettoWeight;
                } else if ($nettoWeight > $sendWeight) {
                    $freightQuantity = $sendWeight;
                } else {
                    $freightQuantity = $sendWeight;
                }
            } /*elseif($freightWeightRule == 1) {
                $freightQuantity = $sendWeight;
            } elseif($freightWeightRule == 2) {
                $freightQuantity = $nettoWeight;
            } else {
                $freightQuantity = $sendWeight;
            }*/

            // get shrink condition
//            $quantity = $nettoWeight;
//            $sql = "SELECT * FROM `condition` WHERE category_id = 1 AND contract_id = {$contractId}";
//            $resultCondition = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//            if($resultCondition !== false && $resultCondition->num_rows == 1) {
//                $rowCondition = $resultCondition->fetch_object();
//                $quantity = ${$rowCondition->rule};
//            }
            if ($sendWeight > $balanceQuantity && $balanceQuantity > 0) {
                $balanceQuantity = $sendWeight;

            }

            if ($sendWeight <= $balanceQuantity || $balanceQuantity == 0) {
                // get shrink
                $shrink = 0;
                if ($contractType == 'P') {
                    if ($nettoWeight < $sendWeight) {
                        $quantity = $nettoWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } elseif ($nettoWeight > $sendWeight) {
                        $quantity = $sendWeight;
                        $shrink = 0;
                    } else {
                        $quantity = $sendWeight;
                    }
                } elseif ($contractType == 'C') {
                    if ($curahWeightRule == 0) {
                        if ($nettoWeight < $sendWeight) {
                            $quantity = $nettoWeight;
                            $shrink = $sendWeight - $nettoWeight;
                        } elseif ($nettoWeight > $sendWeight) {
                            $quantity = $sendWeight;
                            $shrink = $sendWeight - $nettoWeight;
                        } else {
                            $quantity = $sendWeight;
                        }
                    } elseif ($curahWeightRule == 1) {
                        $quantity = $sendWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } elseif ($curahWeightRule == 2) {
                        $quantity = $nettoWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } else {
                        $quantity = $sendWeight;
                    }
                }
                /*if($transactionId2 == 257942){
                $checkSlipNo = $rowR->stockpileCode .'-'. $currentYear;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				}*/
                // get freight cost
                if ($freightCostId == 'NONE') {
                    $freightCostId = 'NULL';
                    $freightPrice = 0;
                    //$freightQuantity2 = 0;
                } else {
                    $sqlF = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                    $resultF = $myDatabase->query($sqlF, MYSQLI_STORE_RESULT);
                    if ($resultF !== false && $resultF->num_rows == 1) {
                        $rowF = $resultF->fetch_object();
                        $freightPrice = $rowF->price_converted;
                        if ($rowF->freight_rule == 1) {
                            //$freightQuantity2 = $sendWeight;
                        } else {
                            //$freightQuantity2 = $nettoWeight;
                        }
                        if ($rowF->pph_tax_id != 0 && $rowF->pph_tax_id != '') {
                            $fcTaxId = $rowF->pph_tax_id;
                        } else {
                            $fcTaxId = 0;
                        }
                    }
                }

                // get handling cost
                if ($handlingCostId == 'NONE') {
                    $handlingCostId = 'NULL';
                    $handlingQuantity = 0;
                    $handlingPrice = 0;
                } else {
                    $sql = "SELECT vhc.vendor_handling_id, vhc.price_converted, vh.pph_tax_id, vh.vendor_handling_rule
                            FROM `vendor_handling_cost` vhc 
                            INNER JOIN vendor_handling vh
                                ON vh.vendor_handling_id = vhc.vendor_handling_id
                            WHERE vhc.handling_cost_id = {$handlingCostId}";
                    $resultHandling = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultHandling !== false && $resultHandling->num_rows == 1) {
                        $rowHandling = $resultHandling->fetch_object();
                        $handlingPrice = $rowHandling->price_converted;
                        if ($rowHandling->vendor_handling_rule == 1) {
                            $handlingQuantity = $sendWeight;
                        } else {
                            $handlingQuantity = $nettoWeight;
                        }

                    }
                }

                // get unloading cost
                if ($unloadingCostId == 'NONE') {
                    $unloadingCostId = 'NULL';
                    $unloadingPrice = 0;
                } else {
                    $sql = "SELECT uc.price_converted 
                            FROM `unloading_cost` uc 
                            WHERE uc.unloading_cost_id = {$unloadingCostId}";
                    $resultUnloading = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultUnloading !== false && $resultUnloading->num_rows == 1) {
                        $rowUnloading = $resultUnloading->fetch_object();
                        $unloadingPrice = $rowUnloading->price_converted;
                    }
                }

                if ($laborId == 'NONE') {
                    $laborId = 'NULL';
                } else {
                    $sql = "SELECT l.pph_tax_id
                            FROM `labor` l
                            WHERE l.labor_id = {$laborId}";
                    $resultLabor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultLabor !== false && $resultLabor->num_rows == 1) {
                        $rowLabor = $resultLabor->fetch_object();
                        if ($rowLabor->pph_tax_id != 0 && $rowLabor->pph_tax_id != '') {
                            $ucTaxId = $rowLabor->pph_tax_id;
                        }
                    }
                }

                $syncStatus = 0;
                $sql = "SELECT sync_status FROM `transaction` WHERE transaction_id = {$transactionId}";
                $resultTrans = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if ($resultTrans !== false && $resultTrans->num_rows == 1) {
                    $rowTrans = $resultTrans->fetch_object();
                    if ($rowTrans->sync_status == 1) {
                        $syncStatus = 2;
                    }
                }

                $sqlTiket2 = "SELECT pecah_slip FROM transaction_timbangan WHERE transaction_id = '{$slipUpload}'";
                $resultTiket2 = $myDatabase->query($sqlTiket2, MYSQLI_STORE_RESULT);
                if ($resultTiket2 !== false && $resultTiket2->num_rows == 1) {
                    $rowTiket2 = $resultTiket2->fetch_object();
                    $pecah_slip = $rowTiket2->pecah_slip;
                    //$boolTiket = false;


                }

                $boolTiket = true;
                if ($slipUpload != '' && $slipUpload != 'NULL' && $slipUpload != 0 && $pecah_slip == 0) {

                    $sqlTiket = "SELECT COUNT(*) as tiket,COALESCE(SUM(persen_pecah_slip),0) AS persen FROM transaction WHERE notim_status = 0 AND t_timbangan = '{$slipUpload}'";
                    $resultTiket = $myDatabase->query($sqlTiket, MYSQLI_STORE_RESULT);
                    if ($resultTiket !== false && $resultTiket->num_rows == 1) {
                        $rowTiket = $resultTiket->fetch_object();


                        if ($rowTiket->tiket >= 1) {
                            $boolTiket = false;

                        }
                    }
                }

                if ($pecah_slip == 1) {
                    $sqlTiket1 = "SELECT COALESCE(SUM(persen_pecah_slip),0) AS persen FROM transaction WHERE notim_status = 0 AND t_timbangan = '{$slipUpload}'";
                    $resultTiket1 = $myDatabase->query($sqlTiket1, MYSQLI_STORE_RESULT);
                    if ($resultTiket1 !== false && $resultTiket1->num_rows == 1) {
                        $rowTiket1 = $resultTiket1->fetch_object();

                        if ($rowTiket1->persen > 0) {
                            $persenPecahSlip = 1 - $rowTiket1->persen;
                        }

                    }
                } else {
                    $persenPecahSlip = 0;
                }

                // get inventory value
                $inventoryValue = ($freightQuantity * $freightPrice) + $unloadingPrice + ($quantity * $unitPrice) + ($handlingQuantity * $handlingPrice);

                /*if($transactionId2 == 257942){
                // insert into transaction
				$sql = "INSERT INTO `transaction` (slip_no, slip_retur, stockpile_contract_id, transaction_date, loading_date, vehicle_no, labor_id, unloading_cost_id, "
                        . "unloading_date, freight_cost_id, handling_cost_id, permit_no, transaction_type, vendor_id, send_weight, bruto_weight, tarra_weight, "
                        . "netto_weight, notes, driver, freight_quantity, handling_quantity, quantity, shrink, freight_price, unloading_price, unit_price, "
                        . "inventory_value, block, curah_tax_id, uc_tax_id, fc_tax_id, entry_by, entry_date, modify_by, modify_date) "
                        . "VALUES ('{$slipNo}', '{$slipU}',{$stockpileContractId}, '{$dateR}', '{$dateR}', "
                        . "'{$vehicleNo}', {$laborId}, {$unloadingCostId}, '{$dateR}', {$freightCostId}, {$handlingCostId}, '{$permitNo}', "
                        . "{$transactionType}, {$supplierId}, {$sendWeight}, {$brutoWeight}, {$tarraWeight}, {$nettoWeight}, '{$notes}', "
                        . "'{$driver}', {$freightQuantity}, {$handlingQuantity}, {$quantity}, {$shrink}, {$freightPrice}, {$unloadingPrice}, {$unitPrice}, {$inventoryValue}, '{$block}', "
                        . "{$curahTaxId}, {$ucTaxId}, {$fcTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				}else{*/
                $sql = "UPDATE `transaction` SET "
                    . "stockpile_contract_id = {$stockpileContractId}, "
                    . "loading_date = STR_TO_DATE('{$loadingDate}', '%d/%m/%Y'), "
                    . "vehicle_no = '{$vehicleNo}', "
                    . "labor_id = {$laborId}, "
                    . "unloading_cost_id = {$unloadingCostId}, "
                    . "transaction_date = STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), "
                    . "unloading_date = STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), "
                    . "freight_cost_id = {$freightCostId}, "
                    . "handling_cost_id = {$handlingCostId}, "
                    . "do_no = '{$permitNo2}', "
                    . "vendor_id = {$supplierId}, "
                    . "send_weight = {$sendWeight}, "
                    . "bruto_weight = {$brutoWeight}, "
                    . "tarra_weight = {$tarraWeight}, "
                    . "netto_weight = {$nettoWeight}, "
                    . "notes = '{$notes}', "
                    . "driver = '{$driver}', "
                    . "freight_quantity = {$freightQuantity}, "
                    . "handling_quantity = {$handlingQuantity}, "
                    . "quantity = {$quantity}, "
                    . "shrink = {$shrink}, "
                    //. "susut_qty = {$qtySusut}, "
                    //. "susut_price = {$hargaSusut}, "
                    . "freight_price = {$freightPrice}, "
                    . "handling_price = {$handlingPrice}, "
                    . "unloading_price = {$unloadingPrice}, "
                    . "unit_price = {$unitPrice}, "
                    . "inventory_value = {$inventoryValue}, "
                    . "fc_tax_id = {$fcTaxId}, "
                    . "uc_tax_id = {$ucTaxId}, "
                    . "block = '{$block}', "
                    . "sync_status = {$syncStatus}, "
                    . "persen_pecah_slip = {$persenPecahSlip}, "
                    . "modify_by = {$_SESSION['userId']}, "
                    . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                    . "WHERE transaction_id = {$transactionId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                //}
                if ($result !== false) {
                    $return_value = '|OK|Transaction has updated successfully.|';

                    // if curah update contract and stockpile_contract quantity
                    if ($contractType == 'C') {
                        /*  $sql = "UPDATE contract SET quantity = {$quantity} WHERE contract_id = {$contractId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                        $sql = "UPDATE stockpile_contract SET quantity = {$quantity} WHERE stockpile_contract_id = {$stockpileContractId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/
                    }

                    $sql = "CALL sp_shrink_weight({$transactionId})";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                    insertReportGL($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.' . $sql . '|';
                }
            } else {
                $return_value = '|FAIL|The quantity exceed the balance of the contract.|';
            }
        } else {
            $return_value = '|FAIL|Please fill the required fields.|';
        }
        // </editor-fold>

    } elseif ($transactionType == 2) {
        // <editor-fold defaultstate="collapsed" desc="OUT">
        if ($stockpileId != '' && $salesId != '' && $shipmentId != '' && $transactionDate2 != '' && $vehicleNo2 != '' && $sendWeight2 != '' && $blWeight != '') {

            $sql = "UPDATE `transaction` SET "
                . "vehicle_no = '{$vehicleNo2}', "
                . "transaction_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                . "unloading_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                . "notes = '{$notes2}', "
                . "modify_by = {$_SESSION['userId']}, "
                . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                . "WHERE transaction_id = {$transactionId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result !== false) {

                $return_value = '|OK|Transaction has updated successfully.|';

                insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                insertReportGL($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
            } else {
                $return_value = '|FAIL|Failed insert transaction.' . $sql . '|';
            }
            // check stockpile detail & transaction balance
            /*$sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode FROM `transaction` t WHERE t.transaction_id = {$transactionId}";
	$resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
            if($resultR !== false && $resultR->num_rows == 1) {
                $rowR = $resultR->fetch_object();
				//$R = "R";
				//$U = "-U";
                //$sql = "UPDATE `transaction` SET shipment_id = NULL WHERE transaction_id = {$transactionId}";
                //$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				//$slipU = $rowR->slip_no .''. $U;
				$checkSlipNo = $rowR->stockpileCode .'-'. $currentYear2;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				$slipR = $rowR->slip_no .'-R';
				$slipU = $rowR->slip_no .'-U';
				$dateR = $date->format('Y-m-d');
				$sendW = $rowR->send_weight * -1;
				$quantityW = $rowR->quantity * -1;
				$shrinkW = $rowR->shrink * -1;
				//$unloadingP = $rowR->unloading_price * -1;
				if($rowR->notes == '')
				$notes = 'NULL';
			}

	$sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},NULL,{$shipmentId},'{$rowR->transaction_date}',NULL,'{$rowR->vehicle_no}',NULL,NULL,'{$rowR->transaction_date}',NULL,NULL,NULL,{$rowR->transaction_type},NULL,'{$sendW}',0,0,0,'{$notes}',NULL,0,0,'{$quantityW}','{$shrinkW}',0,0,0,0,0,NULL,NULL,NULL,0,NULL,NULL,NULL,NULL,NULL,{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
       if($resultLog !== false) {
    //echo $sqlLog;
	$transactionId = $myDatabase->insert_id;

	insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

	// delete from delivery and update delivery_status in transaction
                    $sql = "SELECT d.*, t.sync_status
                            FROM delivery d
                            INNER JOIN `transaction` t
                                ON t.transaction_id = d.transaction_id
                            WHERE d.shipment_id = {$shipmentId}";
                    $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultShipment !== false && $resultShipment->num_rows > 0) {
                        while($rowShipment = $resultShipment->fetch_object()) {
                            $syncStatus = 0;
                            if($rowShipment->sync_status == 1) {
                                $syncStatus = 2;
                            }

                            if($rowShipment->percent_taken == 100) {
                                $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } else {
                                $sqlOther = "SELECT * FROM delivery WHERE shipment_id <> {$shipmentId} AND transaction_id = {$rowShipment->transaction_id}";
                                $resultOther = $myDatabase->query($sqlOther, MYSQLI_STORE_RESULT);

                                if($resultOther->num_rows > 0) {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 2, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                } else {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                }
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            }
                        }

                        $sqlDelete = "DELETE FROM delivery WHERE shipment_id = {$shipmentId}";
                        $resultDelete = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

                    }
					//$sql = "UPDATE `transaction` SET shipment_id = NULL WHERE transaction_id = {$transactionId}";
						//$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
	   }*/

            // echo $sqlLog;
            //insert new delivery
            /*$sql = "SELECT s.stockpile_code, s.stockpile_name,
                        (
                            SELECT COALESCE(SUM(t.quantity), 0) FROM `transaction` t
                            INNER JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                            WHERE sc.stockpile_id = s.stockpile_id
                            AND t.transaction_type = 1
                        ) AS available_balance,
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction`
                            WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                            AND transaction_type = 2
                        ) AS delivered_balance
                    FROM stockpile s
                    WHERE s.stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $stockpileName = $rowStockpile->stockpile_name;
                $availableBalance = $rowStockpile->available_balance;
                $deliveredBalance = $rowStockpile->delivered_balance;
            }

            // get sales detail
            $sql = "SELECT sl.quantity, sl.price_converted, sl.currency_id, sl.exchange_rate, sl.price, cust.pph_tax_id
                    FROM sales sl
                    INNER JOIN customer cust
                        ON cust.customer_id = sl.customer_id
                    WHERE sl.sales_id = {$salesId}";
            $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSales !== false && $resultSales->num_rows == 1) {
                $rowSales = $resultSales->fetch_object();
                $salesBalance = $rowSales->quantity;
                $salesUnitPrice = $rowSales->price_converted;
                $salesCurrencyId = $rowSales->currency_id;
                $salesExchangeRate = $rowSales->exchange_rate;
                $salesOriginalUnitPrice = $rowSales->price;
                $custTaxId = $rowSales->pph_tax_id;
            }

            // get next slip no

					$checkSlipNo = $stockpileCode .'-'. $currentYear3;

            //$checkSlipNo = $stockpileCode /*.'-'. $currentYear*///;
//            $sql = "SELECT LPAD(COUNT(1) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ";
//            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            /*$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSlip->num_rows == 0) {
                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }
            $rowSlipNo = $resultSlip->fetch_object();
            $nextSlipNo = $rowSlipNo->next_id;
            $slipNo = $checkSlipNo .'-'. $nextSlipNo;


//            if($sendWeight2 <= $availableBalance && $blWeight <= ($salesBalance - $deliveredBalance)) {
            if($sendWeight2 <= $availableBalance) {
                $shrink = $sendWeight2 - $blWeight;

                // insert into transaction
                $sql = "INSERT INTO `transaction` (slip_no, slip_retur, shipment_id, transaction_date,unloading_date, vehicle_no, transaction_type, "
                        . "send_weight, notes, quantity, shrink, cust_tax_id, entry_by, entry_date) "
                        . "VALUES ('{$slipNo}', '{$slipU}', {$shipmentId}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), '{$vehicleNo2}', "
                        . "{$transactionType}, {$sendWeight2}, '{$notes2}', {$blWeight}, {$shrink}, {$custTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $transactionId = $myDatabase->insert_id;

                    $return_value = '|OK|Transaction has inserted successfully.|';

                    // insert into delivery
                    $sql = "SELECT t.*
                            FROM transaction t
                            WHERE t.stockpile_contract_id IN (
                                SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                            ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                              ORDER BY t.unloading_date ASC, t.slip_no ASC";
                    $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $totalInventoryValue = 0;
                    if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                        $balanceLeft = $sendWeight2;
                        while($rowDelivery = $resultDelivery->fetch_object()) {
                            $syncStatus = 0;
                            if($rowDelivery->sync_status == 1) {
                                $syncStatus = 2;
                            }

                            if($balanceLeft > 0) {
                                if($rowDelivery->delivery_status == 0) {
                                    if($balanceLeft >= $rowDelivery->quantity) {
                                        $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                        $quantityTaken = $rowDelivery->quantity;
                                        $percentTaken = 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < $rowDelivery->quantity) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } elseif($rowDelivery->delivery_status == 2) {
                                    $totalTaken = 0;
                                    $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                    $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                        $rowTaken = $resultTaken->fetch_object();
                                        $totalTaken = $rowTaken->total_taken;
                                    }

                                    if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                        $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                        $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                }

                                $deliveryValue = $quantityTaken * $salesUnitPrice;
                                $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                $percentTaken = $percentTaken * 100;

                                $sql = "INSERT INTO `delivery` (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                        . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                        . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus}, sync_status = {$syncStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    }

                    //$updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                    $updateInventoryValue = $totalInventoryValue;

                    $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    // update shipment
                    $cogsAmount = $updateInventoryValue;
                    if($salesCurrencyId != 1) {
                        $cogsAmount = $updateInventoryValue / $salesExchangeRate;
                    }
                    $invoiceAmount = $blWeight * $salesOriginalUnitPrice;
                    $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                            . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$blWeight}, shipment_status = 1 "
                            . "WHERE shipment_id = {$shipmentId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    // update sales
                    $boolUpdateSales = false;
                    if($blWeight == ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 1;
                        $boolUpdateSales = true;
                    } elseif($blWeight < ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 2;
                        $boolUpdateSales = true;
                    }

                    if($boolUpdateSales) {
                        $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }

                     insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                    unset($_SESSION['transaction']);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.|';
                }
            } else {
                if($sendWeight2 > $availableBalance) {
                    $return_value = '|FAIL|Available quantity in '. $stockpileName .' is '. number_format($availableBalance, 4, '.', ',') .' Kg.|';
                } elseif($sendWeight2 > ($salesBalance - $deliveredBalance)) {
                    $return_value = '|FAIL|Sales agreement balance is '. ($salesBalance - $deliveredBalance) .' Kg.|';
                }
            }*/
            /*  $sql = "SELECT s.stockpile_code, s.stockpile_name,
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction`
                            WHERE stockpile_id = s.stockpile_id
                            AND transaction_type = 1
                        ) AS available_balance,
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction`
                            WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                            AND transaction_type = 2
                        ) AS delivered_balance
                    FROM stockpile s
                    WHERE s.stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $stockpileName = $rowStockpile->stockpile_name;
                $availableBalance = $rowStockpile->available_balance;
                $deliveredBalance = $rowStockpile->delivered_balance;
            }

            // get sales detail
            $sql = "SELECT quantity, price_converted, currency_id, exchange_rate, price FROM sales WHERE sales_id = {$salesId}";
            $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSales !== false && $resultSales->num_rows == 1) {
                $rowSales = $resultSales->fetch_object();
                $salesBalance = $rowSales->quantity;
                $salesUnitPrice = $rowSales->price_converted;
                $salesCurrencyId = $rowSales->currency_id;
                $salesExchangeRate = $rowSales->exchange_rate;
                $salesOriginalUnitPrice = $rowSales->price;
            }

            if($sendWeight2 != 0 && $blWeight != 0) {

                $shrink = $sendWeight2 - $blWeight;

                $syncStatus = 0;
                $sql = "SELECT sync_status FROM `transaction` WHERE transaction_id = {$transactionId}";
                $resultTrans = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultTrans !== false && $resultTrans->num_rows == 1) {
                    $rowTrans = $resultTrans->fetch_object();
                    if($rowTrans->sync_status == 1) {
                        $syncStatus = 2;
                    }
                }

                // insert into transaction
                $sql = "UPDATE `transaction` SET "
                        . "shipment_id = {$shipmentId}, "
                        . "vehicle_no = '{$vehicleNo2}', "
                        . "send_weight = {$sendWeight2}, "
						. "notes = '{$notes2}', "
                        . "quantity = {$blWeight}, "
                        . "shrink = {$shrink}, "
                        . "sync_status = {$syncStatus}, "
                        . "modify_by = {$_SESSION['userId']}, "
                        . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE transaction_id = {$transactionId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $transactionId = $myDatabase->insert_id;

                    $return_value = '|OK|Transaction has updated successfully.|';

                    // delete from delivery and update delivery_status in transaction
                    $sql = "SELECT d.*, t.sync_status
                            FROM delivery d
                            INNER JOIN `transaction` t
                                ON t.transaction_id = d.transaction_id
                            WHERE d.shipment_id = {$shipmentId}";
                    $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultShipment !== false && $resultShipment->num_rows > 0) {
                        while($rowShipment = $resultShipment->fetch_object()) {
                            $syncStatus = 0;
                            if($rowShipment->sync_status == 1) {
                                $syncStatus = 2;
                            }

                            if($rowShipment->percent_taken == 100) {
                                $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } else {
                                $sqlOther = "SELECT * FROM delivery WHERE shipment_id <> {$shipmentId} AND transaction_id = {$rowShipment->transaction_id}";
                                $resultOther = $myDatabase->query($sqlOther, MYSQLI_STORE_RESULT);

                                if($resultOther->num_rows > 0) {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 2, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                } else {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                }
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            }
                        }

                        $sqlDelete = "DELETE FROM delivery WHERE shipment_id = {$shipmentId}";
                        $resultDelete = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);
                    }


                    // insert into delivery
						$sql = "SELECT t.*
                            FROM transaction t
                            WHERE t.stockpile_contract_id IN (
                                SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                            ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                            ORDER BY  t.unloading_date ASC, t.slip_no ASC";
                    $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $totalInventoryValue = 0;
                    if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                        $balanceLeft = $sendWeight2;
                        while($rowDelivery = $resultDelivery->fetch_object()) {
                            $syncStatus = 0;
                            if($rowDelivery->sync_status == 1) {
                                $syncStatus = 2;
                            }

                            if($balanceLeft > 0) {
                                if($rowDelivery->delivery_status == 0) {
                                    if($balanceLeft >= $rowDelivery->quantity) {
                                        $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                        $quantityTaken = $rowDelivery->quantity;
                                        $percentTaken = 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < $rowDelivery->quantity) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } elseif($rowDelivery->delivery_status == 2) {
                                    $totalTaken = 0;
                                    $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                    $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                        $rowTaken = $resultTaken->fetch_object();
                                        $totalTaken = $rowTaken->total_taken;
                                    }

                                    if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                        $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                        $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                }

                                $deliveryValue = $quantityTaken * $salesUnitPrice;
                                $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                $percentTaken = $percentTaken * 100;

                                $sql = "INSERT INTO delivery (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                        . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                        . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus}, sync_status = {$syncStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    }

                    $updateInventoryValue = $totalInventoryValue;
//                    $updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;

                    $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    // update shipment
                    $cogsAmount = $updateInventoryValue;
                    if($salesCurrencyId != 1) {
                        $cogsAmount = $updateInventoryValue / $salesExchangeRate;
                    }
                    $invoiceAmount = $blWeight * $salesOriginalUnitPrice;
                    $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                            . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$blWeight}, shipment_status = 1 "
                            . "WHERE shipment_id = {$shipmentId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    // update sales
                    $boolUpdateSales = false;
                    if($sendWeight2 == ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 1;
                        $boolUpdateSales = true;
                    } elseif($sendWeight2 < ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 2;
                        $boolUpdateSales = true;
                    }

                    if($boolUpdateSales) {
                        $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }

					insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                    unset($_SESSION['transaction']);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.|';
					echo $sql;
                }
            } else {
                if($sendWeight2 > $availableBalance) {
                    $return_value = '|FAIL|Available quantity in '. $stockpileName .' is '. number_format($availableBalance, 4, '.', ',') .' Kg.|';
                } elseif($sendWeight2 > ($salesBalance - $deliveredBalance)) {
                    $return_value = '|FAIL|Sales agreement balance is '. ($salesBalance - $deliveredBalance) .' Kg.|';
                }
            }*/
        } else {
            $return_value = '|FAIL|Please fill the required fields.|';
        }
        // </editor-fold>
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_POST['action']) && $_POST['action'] == 'import_transaction') {
    // <editor-fold defaultstate="collapsed" desc="import_transaction">

    $return_value = '';
    $boolContinue = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">

    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);

    // </editor-fold>

    if ($stockpileId != '' && isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import/stockpile-" . $stockpileId;

        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if ($boolContinue) {

            $importResult = excelImportTransaction($myDatabase, $attachmentPath, $stockpileId, $vendorId, $stockpileContractId);
            $importResult = explode("|", $importResult);

            if ($importResult[0] == 'OK') {
                $return_value = '|OK|' . $importResult[1] . '|';
            } else {
                $return_value = '|FAIL|' . $importResult[1] . '|';
            }

        }
    } else {
        $return_value = '|FAIL|Please fill required fields.|';
    }

    echo $return_value;

    // </editor-fold>
} elseif (isset($_POST['action']) && $_POST['action'] == 'import_general_vendor') {
    // <editor-fold defaultstate="collapsed" desc="import_transaction">

    $return_value = '';
    $boolContinue = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">

    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    //$vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    //$stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);

    // </editor-fold>

    if ($stockpileId != '' && isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import/stockpile-" . $stockpileId;

        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if ($boolContinue) {

            $importResult = excelImportGeneralVendor($myDatabase, $attachmentPath, $stockpileId);
            $importResult = explode("|", $importResult);

            if ($importResult[0] == 'OK') {
                $return_value = '|OK|' . $importResult[1] . '|';
            } else {
                $return_value = '|FAIL|' . $importResult[1] . '|';
            }

        }
    } else {
        $return_value = '|FAIL|Please fill required fields.|';
    }

    echo $return_value;

    // </editor-fold>
} elseif (isset($_POST['action']) && $_POST['action'] == 'import_jurnal') {
    // <editor-fold defaultstate="collapsed" desc="import_transaction">

    $return_value = '';
    $boolContinue = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">

    //$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    //$vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    //$stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);

    // </editor-fold>

    if (isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import/jurnal/";

        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if ($boolContinue) {

            $importResult = excelImportJurnal($myDatabase, $attachmentPath);
            $importResult = explode("|", $importResult);

            if ($importResult[0] == 'OK') {
                $return_value = '|OK|' . $importResult[1] . '|';
            } else {
                $return_value = '|FAIL|' . $importResult[1] . '|';
            }

        }
    } else {
        $return_value = '|FAIL|Please fill required fields.|';
    }

    echo $return_value;

    // </editor-fold>
} elseif (isset($_POST['action']) && $_POST['action'] == 'import_user_signature') {
    // <editor-fold defaultstate="collapsed" desc="import_transaction">

    $return_value = '';
    $boolContinue = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">

    $userId = $myDatabase->real_escape_string($_POST['userId']);
    // $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    // $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);

    // </editor-fold>

    if (isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import/signature/";
        $imageName = $_FILES['imagefile']['name'];

        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" . basename($imageName);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if ($boolContinue && $userId != '') {

            $sql = "INSERT INTO user_signature (user_id, signature) VALUES ({$userId}, '{$imageName}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Stockpile added successfully.|';
            } else {
                $return_value = '|FAIL|Failed adding signature.|';
            }
        } else {
            $return_value = '|FAIL|Please fill the required fields.|';
        }

        echo $return_value;
    }
    // </editor-fold>
} elseif (isset($_POST['action']) && $_POST['action'] == 'import_payment') {
    // <editor-fold defaultstate="collapsed" desc="import_transaction">

    $return_value = '';
    $boolContinue = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">

    //$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    //$vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    //$stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);

    // </editor-fold>

    if (isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import/payment-";

        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if ($boolContinue) {

            $importResult = excelImportPayment($myDatabase, $attachmentPath);
            $importResult = explode("|", $importResult);

            if ($importResult[0] == 'OK') {
                $return_value = '|OK|' . $importResult[1] . '|';
            } else {
                $return_value = '|FAIL|' . $importResult[1] . '|';
            }

        }
    } else {
        $return_value = '|FAIL|Please fill required fields.|';
    }

    echo $return_value;

    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_sales') {
    // <editor-fold defaultstate="collapsed" desc="delete_sales">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    // </editor-fold>

    if ($salesId != '') {
        $sql = "DELETE FROM `sales` WHERE sales_id = {$salesId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Sales agreement has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete sales agreement failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'sales_detail_data') {
    // <editor-fold defaultstate="collapsed" desc="bank_data">

    $return_value = '';
    $boolNew = false;
    $salesHeaderId = $myDatabase->real_escape_string($_POST['salesHeaderId']);
    $salesDetailId = $myDatabase->real_escape_string($_POST['salesDetailId']);
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    $vessel = $myDatabase->real_escape_string($_POST['vessel']);
    $shipmentNo = $myDatabase->real_escape_string($_POST['shipmentNo']);
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    $statsType = $myDatabase->real_escape_string($_POST['statsType']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $tolerance = str_replace(",", "", $myDatabase->real_escape_string($_POST['tolerance']));
    $moisture = str_replace(",", "", $myDatabase->real_escape_string($_POST['moisture']));
    $ncv = str_replace(",", "", $myDatabase->real_escape_string($_POST['ncv']));
    $tax_base = str_replace(",", "", $myDatabase->real_escape_string($_POST['tax_base']));
    $fm = str_replace(",", "", $myDatabase->real_escape_string($_POST['fm']));
    $fob = str_replace(",", "", $myDatabase->real_escape_string($_POST['fob']));
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    // </editor-fold>

    if ($salesDetailId == '') {
        $boolNew = true;
    }

    if ($boolNew) {
        $sql = "INSERT INTO `sales_detail`
						(`sales_header_id`,
						`customer_id`,
						`vessel`,
						`qty`,
						`stockpile_id`,
						`stats`,
						`shipment_no`,
						`tolerance`,
						`moisture`,
						`ncv`,
						`tax_base`,
						`fm`,
						`fob`,
						`entry_by`,
						`entry_date`)
						VALUES
						($salesHeaderId,
						$customerId,
						'$vessel',
						$quantity,
						$stockpileId,
						'$statsType',
						'$shipmentNo',						
						$moisture,
						$tolerance,
						$ncv,
						$tax_base,
						$fm,
						$fob,
						{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    } else {
        $sql = "UPDATE `sales_detail`
						SET
						`sales_header_id` = $salesHeaderId,
						`customer_id` = $customerId,
						`vessel` = '$vessel',
						`qty` = $quantity,
						`stats` = '$statsType',
						`shipment_no` = '$shipmentNo',
						`tolerance` = $tolerance,
						`moisture` = $moisture,
						`ncv` = $ncv,
						`tax_base` = $tax_base,
						`fm` = $fm,
						`fob` = $fob,
						`entry_by` = {$_SESSION['userId']},
						`entry_date` = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s')
						WHERE `sales_detail_id` = $salesDetailId";
    }
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($result !== false) {
        if ($boolNew) {
            $salesDetailId = $myDatabase->insert_id;
        }

        $return_value = '|OK|Sales Schedule has successfully inserted/updated.|' . $salesDetailId . '|';
    } else {
        $return_value = '|FAIL|Insert/update sales schedule failed.||';
    }


    echo $sql;
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'sales_header_data') {
    // <editor-fold defaultstate="collapsed" desc="bank_data">

    $return_value = '';
    $boolNew = false;

    $salesHeaderId = $myDatabase->real_escape_string($_POST['salesHeaderId']);
    $dateFrom = $myDatabase->real_escape_string($_POST['dateFrom']);
    $dateTo = $myDatabase->real_escape_string($_POST['dateTo']);
    $eta = $myDatabase->real_escape_string($_POST['eta']);
    $salesNo = str_replace(",", "", $myDatabase->real_escape_string($_POST['salesNo']));
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    // </editor-fold>

    if ($salesHeaderId == '') {
        $boolNew = true;
    }

    if ($boolNew) {
        $sql = "INSERT INTO `sales_header`
						(`date_from`,
						`date_to`,
						`eta`,
						`sales_no`,
						`entry_by`,
						`entry_date`)
						VALUES
						(STR_TO_DATE('{$dateFrom}','%d/%m/%Y'),
						STR_TO_DATE('{$dateTo}','%d/%m/%Y'),
						STR_TO_DATE('{$eta}','%d/%m/%Y'),
						'$salesNo',
						{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    } else {
        $sql = "UPDATE `sales_header`
						SET
						`date_from` = STR_TO_DATE('{$dateFrom}','%d/%m/%Y'),
						`date_to` = STR_TO_DATE('{$dateTo}','%d/%m/%Y'),
						`eta` = STR_TO_DATE('{$eta}','%d/%m/%Y'),
						`sales_no` = '$salesNo',						
						`entry_by` = {$_SESSION['userId']},
						`entry_date` = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s')
						WHERE `sales_header_id` = $salesHeaderId";
    }
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($result !== false) {
        if ($boolNew) {
            $salesHeaderId = $myDatabase->insert_id;
        }

        $return_value = '|OK|Sales has successfully inserted/updated.|' . $salesHeaderId . '|';
    } else {
        $return_value = '|FAIL|Insert/update sales failed.||';
    }


    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_price_rate_sales') {
    // <editor-fold defaultstate="collapsed" desc="update_price_rate_sales">
    // <editor-fold defaultstate="collapsed" desc="POST DATA">
    $return_value = '';
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRateUpdate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceUpdate']));
    // </editor-fold>
    if ($salesId != '' && $exchangeRate != '' && $price != '') {
        $priceConverted = $price * $exchangeRate;
        $sql = "UPDATE `sales` sl SET "
            . "sl.exchange_rate = {$exchangeRate}, "
            . "sl.price = {$price}, "
            . "sl.price_converted = {$priceConverted}, "
            . "sl.sales_status = 3 "
            . "WHERE sl.sales_id = {$salesId}";

        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {

            $sql = "SELECT sl.sales_id, t.transaction_id
						FROM sales sl 
						LEFT JOIN shipment sh ON sh.`sales_id` = sl.`sales_id`
						LEFT JOIN `transaction` t ON t.`shipment_id` = sh.`shipment_id` 
						WHERE sl.sales_id = {$salesId}
						AND t.`slip_retur` IS NULL AND notim_status = 0";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result->num_rows > 0) {
                while ($row = $result->fetch_object()) {
                    $transactionId = $row->transaction_id;
                    insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                    insertReportGL($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                }
            }
            $return_value = '|OK|Sales Agreement has successfully inserted/updated.' . $salesId . '|';
        } else {
            $return_value = '|FAIL|Insert/update sales agreement failed.||';
            echo $sql;
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'sales_data') {
    // <editor-fold defaultstate="collapsed" desc="sales_data">

    $return_value = '';
    $boolNew = false;
    $boolExists = true;
    $boolShipment = true;
    $boolUpdateShipment = false;
    $boolInsertCustomer = false;
    $boolCustomerExists = false;
    $addMessage = "";
    // <editor-fold defaultstate="collapsed" desc="VARIABLE POST DATA">
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $salesNo = $myDatabase->real_escape_string($_POST['salesNo']);
    $shipmentNo = $myDatabase->real_escape_string($_POST['shipmentNo']);
    $salesDate = $myDatabase->real_escape_string($_POST['salesDate']);
    $shipmentDate = $myDatabase->real_escape_string($_POST['shipmentDate']);
    $salesType = $myDatabase->real_escape_string($_POST['salesType']);
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    $customerName = $myDatabase->real_escape_string($_POST['customerName']);
    $customerAddress = $myDatabase->real_escape_string($_POST['customerAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $destination = $myDatabase->real_escape_string($_POST['destination']);
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    $totalShipment = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalShipment']));
    $oldTotalShipment = str_replace(",", "", $myDatabase->real_escape_string($_POST['oldTotalShipment']));
    $bkp_jkp = $myDatabase->real_escape_string($_POST['bkp_jkp']);
    $peb_fp_no = $myDatabase->real_escape_string($_POST['peb_fp_no']);
    $pebDate = $myDatabase->real_escape_string($_POST['pebDate']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $vendorLangsir = $myDatabase->real_escape_string($_POST['vendorLangsir']);
    $stockpileLangsir = $myDatabase->real_escape_string($_POST['stockpileLangsir']);
    $rsb = $myDatabase->real_escape_string($_POST['rsb']);
    $ggl = $myDatabase->real_escape_string($_POST['ggl']);

    // </editor-fold>
    if ($customerId == 'INSERT') {
        if ($customerName != '' && $customerAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
            $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$customerName}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result !== false && $result->num_rows > 0) {
                $boolCustomerExists = true;
            } elseif ($result !== false && $result->num_rows == 0) {
                $ppnValue = 0;
                $pphValue = 0;

                $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
                $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
                if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                    $rowPPN = $resultPPN->fetch_object();
                    $ppnValue = $rowPPN->tax_value;
                }

                $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
                $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                    $rowPPh = $resultPPh->fetch_object();
                    $pphValue = $rowPPh->tax_value;
                }

                $sql = "INSERT INTO `customer` (customer_name, customer_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                    . "'{$customerName}', '{$customerAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false) {
                    $customerId = $myDatabase->insert_id;
                    $boolInsertCustomer = true;
                }
            }
        } else {
            $boolInsertCustomer = false;
        }
    } else {
        $boolInsertCustomer = true;
    }

    if ($salesId == '') {
        $boolNew = true;
    } else {
        if ($totalShipment != $oldTotalShipment) {
            if ($totalShipment < $oldTotalShipment) {
                $boolShipment = false;
            }
        }
    }

    if ($salesDate != '' && $salesNo != '' && $salesType != '' && $customerId != '' && $currencyId != '' &&
        $price != '' && $quantity != '' && $totalShipment != '' && $stockpileId != '' && $boolShipment &&
        $boolInsertCustomer && !$boolCustomerExists) {

        if ($boolNew) {
            $sql = "SELECT * FROM `sales` WHERE company_id = {$_SESSION['companyId']} AND sales_no = '{$salesNo}'";
            $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($resultSales->num_rows > 0) {
                $boolExists = false;
            }
        }

        if ($boolExists) {
            if ($exchangeRate == '') {
                $exchangeRate = 1;
            }

            if ($vendorLangsir == '') {

                $vendorLangsir = 0;
                $stockpileLangsir = 0;
            }


            $priceConverted = $price * $exchangeRate;

            //closingDate
            $newSalesDate = implode("-", array_reverse(explode("/", $salesDate)));
            $checkClosingDate = explode('-', closingDate($newSalesDate, 'Sales - Sales Agreement'));
            $boolClosing = $checkClosingDate[0];
            $closingDate = $checkClosingDate[1];

            if (!$boolClosing) {
                $return_value = $closingDate;
                echo $return_value;
            } else {
                if ($boolNew) {
                    $sql = "INSERT INTO `sales` (sales_no, sales_date, sales_type, customer_id, "
                        . "stockpile_id, account_id, destination, notes, currency_id, exchange_rate, price, price_converted, quantity, "
                        . "total_shipment, shipment_date, bkp_jkp, peb_fp_no, peb_fp_date, company_id, entry_by, entry_date, stockpileContractId,vendorLangsir,stockpileLangsir, rsb, ggl) VALUES ("
                        . "'{$salesNo}', STR_TO_DATE('{$salesDate}', '%d/%m/%Y'), {$salesType}, "
                        . "{$customerId}, {$stockpileId}, {$accountId}, '{$destination}', '{$notes}', {$currencyId}, {$exchangeRate}, {$price}, "
                        . "{$priceConverted}, {$quantity}, {$totalShipment}, STR_TO_DATE('{$shipmentDate}', '%m/%Y'), '{$bkp_jkp}', "
                        . "'{$peb_fp_no}', STR_TO_DATE('{$pebDate}', '%d/%m/%Y'), {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$stockpileContractId},{$vendorLangsir},{$stockpileLangsir}, {$rsb}, {$ggl})";
                } else {
                    $sql = "UPDATE `sales` sl INNER JOIN shipment sh ON sl.sales_id = sh.sales_id SET "
                        . "sh.shipment_no = '{$shipmentNo}', "
                        . "sl.sales_no = '{$salesNo}', "
                        . "sl.sales_date = STR_TO_DATE('{$salesDate}', '%d/%m/%Y'), "
                        . "sl.sales_type = {$salesType}, "
                        . "sl.customer_id = {$customerId}, "
                        . "sl.stockpile_id = {$stockpileId}, "
                        . "sl.account_id = {$accountId}, "
                        . "sl.destination = '{$destination}', "
                        . "sl.notes = '{$notes}', "
                        . "sl.currency_id = {$currencyId}, "
                        . "sl.exchange_rate = {$exchangeRate}, "
                        . "sl.price = {$price}, "
                        . "sl.price_converted = {$priceConverted}, "
                        . "sl.quantity = {$quantity}, "
                        . "sl.total_shipment = {$totalShipment}, "
                        . "sl.stockpileContractId = {$stockpileContractId}, "
                        . "sl.vendorLangsir = {$vendorLangsir}, "
                        . "sl.stockpileLangsir = {$stockpileLangsir}, "
                        . "sl.shipment_date = STR_TO_DATE('{$shipmentDate}', '%m/%Y'), "
                        . "sl.bkp_jkp = '{$bkp_jkp}', "
                        . "sl.peb_fp_no = '{$peb_fp_no}', "
                        . "sl.rsb = '{$rsb}', "
                        . "sl.ggl = '{$ggl}', "
                        . "sl.peb_fp_date = STR_TO_DATE('{$pebDate}', '%d/%m/%Y') "
                        . "WHERE sl.sales_id = {$salesId}";
                }
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false) {
                    if ($boolNew) {
                        $salesId = $myDatabase->insert_id;
                        $j = 1;
                        $boolUpdateShipment = true;
                    } else {
                        if ($totalShipment > $oldTotalShipment) {
                            $j = $oldTotalShipment + 1;
                            $boolUpdateShipment = true;
                        } else {
                            $addMessage = " Total shipment cannot be updated.";
                        }

//                    $sql = "DELETE FROM `shipment` WHERE sales_id = {$salesId}";
//                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }

                    if ($boolUpdateShipment) {
                        for ($i = $j; $i <= $totalShipment; $i++) {
                            $shipmentCode = $salesNo . '-' . $i;

                            $sql = "INSERT INTO `shipment` (shipment_code, shipment_no, sales_id, entry_by, entry_date) VALUES ("
                                . "'{$shipmentCode}', '{$shipmentNo}', {$salesId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        }
                    }

                    $return_value = '|OK|Sales Agreement has successfully inserted/updated.' . $addMessage . '|' . $salesId . '|';
                } else {
                    $return_value = '|FAIL|Insert/update sales agreement failed.||';
                    echo $sql;
                }
            }
        } else {
            $return_value = '|FAIL|Sales agreement already exists.||';
        }
    } else {
        if (!$boolShipment) {
            $return_value = '|FAIL|Total shipment cant be less than before.||';
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'shipment_data') {
    // <editor-fold defaultstate="collapsed" desc="shipment_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
    $shipmentCode = $myDatabase->real_escape_string($_POST['shipmentCode']);
    $shipmentDate = $myDatabase->real_escape_string($_POST['shipmentDate']);
    $shipmentType = $myDatabase->real_escape_string($_POST['shipmentType']);
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    $destination = $myDatabase->real_escape_string($_POST['destination']);
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = $myDatabase->real_escape_string($_POST['exchangeRate']);
    $price = $myDatabase->real_escape_string($_POST['price']);
    $quantity = $myDatabase->real_escape_string($_POST['quantity']);
    // </editor-fold>

    if ($shipmentId == '') {
        $boolNew = true;
    }

    if ($shipmentCode != '' && $shipmentDate != '' && $shipmentType != '' && $customerId != '' && $currencyId != '' &&
        $price != '' && $quantity != '') {

        if ($boolNew) {
            // get next slip no
            $checkShipmentNo = $shipmentCode . '-' . $currentYearMonth;
            $sql = "SELECT LPAD(COUNT(1) + 1, 3, '0') AS next_id FROM shipment WHERE shipment_no LIKE '{$checkShipmentNo}%'";
            $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            $rowShipmentNo = $resultShipment->fetch_object();
            $nextShipmentNo = $rowShipmentNo->next_id;
            $shipmentNo = $checkShipmentNo . '-' . $nextShipmentNo;
        }

        if ($shipmentNo != '') {
            if ($exchangeRate == '') {
                $exchangeRate = 1;
            }

            $priceConverted = $price * $exchangeRate;

            if ($boolNew) {
                $sql = "INSERT INTO `shipment` (shipment_no, shipment_code, shipment_date, shipment_type, customer_id, "
                    . "destination, notes, currency_id, exchange_rate, price, price_converted, quantity, entry_by, entry_date) VALUES ("
                    . "'{$shipmentNo}', UPPER('{$shipmentCode}'), STR_TO_DATE('{$shipmentDate}', '%d/%m/%Y'), {$shipmentType}, "
                    . "{$customerId}, '{$destination}', '{$notes}', {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, "
                    . "{$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `shipment` SET "
                    . "shipment_date = STR_TO_DATE('{$shipmentDate}', '%d/%m/%Y'), "
                    . "shipment_type = {$shipmentType}, "
                    . "customer_id = {$customerId}, "
                    . "destination = '{$destination}', "
                    . "notes = '{$notes}', "
                    . "currency_id = {$currencyId}, "
                    . "exchange_rate = {$exchangeRate}, "
                    . "price = {$price}, "
                    . "price_converted = {$priceConverted}, "
                    . "quantity = {$quantity} "
                    . "WHERE shipment_id = {$shipmentId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $shipmentId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Sales Agreement has successfully inserted/updated.|' . $shipmentId . '|';
            } else {
                $return_value = '|FAIL|Insert/update sales agreement failed.||';
            }
        } else {
            $return_value = '|FAIL|Sales agreement already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_payment') {
    // <editor-fold defaultstate="collapsed" desc="delete_payment">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentId = $myDatabase->real_escape_string($_POST['paymentId']);
    // </editor-fold>

    if ($paymentId != '') {
        // check dp di shipment

        $sql = "SELECT p.*, b.currency_id AS b_currency_id, con.contract_id, con.contract_type, con.price_converted, con.quantity
                FROM payment p 
                INNER JOIN bank b
                    ON b.bank_id = p.bank_id
                LEFT JOIN stockpile_contract sc
                    ON sc.stockpile_contract_id = p.stockpile_contract_id
                LEFT JOIN contract con
                    ON con.contract_id = sc.contract_id
                WHERE p.payment_id = {$paymentId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();

            if ($row->stockpile_contract_id != '') {
                if ($row->contract_type == 'P') {
                    if ($row->payment_method == 1) {
                        $sqlUpdate = "UPDATE contract set payment_status = 0 WHERE contract_id = {$row->contract_id}";
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

                        if ($row->original_amount_converted != $row->amount_converted) {
                            $sqlDP = "SELECT p.*, b.currency_id AS b_currency_id 
                                    FROM payment p
                                    INNER JOIN bank b
                                        ON b.bank_id = p.bank_id
                                    WHERE p.stockpile_contract_id = {$row->stockpile_contract_id} 
                                    AND p.payment_method = 2
                                    AND p.payment_status = 0";
                            $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                            if ($resultDP !== false && $resultDP->num_rows > 0) {
                                while ($rowDP = $resultDP->fetch_object()) {
                                    $sqlUpdate = "UPDATE payment SET amount = {$rowDP->original_amount}, amount_converted = {$rowDP->original_amount_converted}
                                                WHERE payment_id = {$rowDP->payment_id}";
                                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                                }
                            }
                        }
                    }
                }

                $sqlUpdate = "UPDATE `transaction` set payment_id = NULL where payment_id = {$paymentId}";
                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
            } elseif ($row->vendor_id != '' || $row->freight_id != '' || $row->labor_id != '' || $row->general_vendor_id != '') {
                if ($row->vendor_id != '') {
                    $whereProperty = " p.vendor_id = {$row->vendor_id} ";

                    $sqlUpdate = "UPDATE `transaction` set payment_id = NULL where payment_id = {$paymentId}";
                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                } elseif ($row->freight_id != '') {
                    $whereProperty = " p.freight_id = {$row->freight_id} ";

                    $sqlUpdate = "UPDATE `transaction` set fc_payment_id = NULL where fc_payment_id = {$paymentId}";
                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                } elseif ($row->labor_id != '') {
                    $whereProperty = " p.labor_id = {$row->labor_id} ";

                    $sqlUpdate = "UPDATE `transaction` set uc_payment_id = NULL where uc_payment_id = {$paymentId}";
                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                } elseif ($row->general_vendor_id != '') {
                    $whereProperty = " p.general_vendor_id = {$row->general_vendor_id} ";
                }

                if ($row->payment_method == 1) {

                    $takenDP = $row->amount - $row->original_amount;
                    $takenDPConverted = $row->amount_coverted - $row->original_amount_converted;

                    if ($takenDP > 0) {
                        $sqlDP = "SELECT p.*, b.currency_id AS b_currency_id 
                                FROM payment p
                                INNER JOIN bank b
                                    ON b.bank_id = p.bank_id
                                WHERE {$whereProperty}
                                AND p.payment_method = 2
                                AND .ppayment_status = 0
                                ORDER BY p.payment_id ASC";
                        $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                        if ($resultDP !== false && $resultDP->num_rows > 0) {
                            while ($rowDP = $resultDP->fetch_object()) {
                                if ($takenDP > 0) {
                                    if ($row->b_currency_id == $rowDP->b_currency_id) {
                                        $amount = $takenDP - $rowDP->original_amount;
                                        $amountConverted = $takenDPConverted - $rowDP->original_amount_converted;
                                        $takenDP = $takenDP - $amount;
                                    } elseif ($row->b_currency_id != $rowDP->b_currency_id) {
                                        if ($rowDP->b_currency_id == 2) {
                                            $amount = ceil($takenDP / $rowDP->exchange_rate) - $rowDP->original_amount;
                                            $amountConverted = ceil($takenDPConverted / $rowDP->exchange_rate) - $rowDP->original_amount_converted;
                                            $takenDP = $takenDP - ceil($amount * $rowDP->exchange_rate);
                                        } else {
                                            $amount = ceil($takenDP * $rowDP->exchange_rate) - $rowDP->original_amount;
                                            $amountConverted = ceil($takenDPConverted * $rowDP->exchange_rate) - $rowDP->original_amount_converted;
                                            $takenDP = $takenDP - ceil($amount / $rowDP->exchange_rate);
                                        }
                                    } else {
                                        $amount = $takenDP - $rowDP->original_amount;
                                        $amountConverted = $takenDPConverted - $rowDP->original_amount_converted;
                                        $takenDP = $takenDP - $amount;
                                    }

                                    $sqlUpdate = "UPDATE payment SET amount = {$amount}, amount_converted = {$amountConverted}
                                                WHERE payment_id = {$rowDP->payment_id}";
                                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                                }
                            }
                        }
                    }
                }
            } elseif ($row->sales_id != '') {
                if ($row->payment_method == 1) {
                    $sqlUpdate = "UPDATE shipment SET payment_id = NULL WHERE payment_id = {$paymentId}";
                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                } elseif ($row->payment_method == 2) {
                    $sqlShipment = "SELECT pd.*, sh.dp_amount
                            FROM payment_detail pd 
                            INNER JOIN shipment sh
                                ON sh.shipment_id = pd.shipment_id
                            WHERE pd.payment_id = {$paymentId}";
                    $resultShipment = $myDatabase->query($sqlShipment, MYSQLI_STORE_RESULT);
                    if ($resultShipment !== false && $resultShipment->num_rows > 0) {
                        while ($rowShipment = $resultShipment->fetch_object()) {
                            $newDP = $rowShipment->dp_amount - $rowShipment->amount_converted;

                            $sqlUpdate = "UPDATE shipment SET dp_amount = {$newDP} WHERE shipment_id = {$rowShipment->shipment_id}";
                            $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                        }
                    }
                }
            }
        }


        $sql = "DELETE FROM `payment` WHERE payment_id = {$paymentId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Payment has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete payment failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'return_payment_notim') {
    // <editor-fold defaultstate="collapsed" desc="return_payment">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentId = $myDatabase->real_escape_string($_POST['paymentId']);
	$returnPaymentDate = $myDatabase->real_escape_string($_POST['returnPaymentDate']);
    // </editor-fold>
    
    if($paymentId != '') {
        
       $sql = "UPDATE `payment` SET "
                        . "payment_status = 1, "
                        . "edit_by = {$_SESSION['userId']}, "
                        . "edit_date = STR_TO_DATE('$returnPaymentDate', '%d/%m/%Y %H:%i:%s'), "
						. "exec_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . " WHERE payment_id = {$paymentId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        // echo "OEK" . $sql;
        if($result !== false) {
			
            $sqlD = "DELETE FROM temp_payment_return WHERE payment_id = {$paymentId}";
            $resultD = $myDatabase->query($sqlD, MYSQLI_STORE_RESULT);

            $sqlA = "SELECT * FROM payment WHERE payment_id = {$paymentId}";
            $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
            if($resultA !== false && $resultA->num_rows > 0) {
                while($rowA = $resultA->fetch_object()) {
                    if($rowA->freight_id != ''){ //FREIGHT
                        $sqlU = "SELECT  CASE WHEN p.payment_method = 1 THEN t.transaction_id ELSE 0 END AS transactionId, CASE WHEN p.payment_method = 1 THEN po.qty ELSE pp.total_qty END AS quantity,
                                        CASE WHEN p.payment_method = 1 THEN po.price ELSE pp.price END AS price, inv.inv_notim_id, inv.idpp, 
                                        IFNULL(po.shrink/ts.trx_shrink_claim,0) as qtyShrink, IFNULL(ts.trx_shrink_claim,0) as trx_shrink_claim, IFNULL(po.shrink,0) as shrink, IFNULL(po.additional_shrink,0) as addshrink,
                                        pp.termin,  CASE WHEN p.payment_method = 1 THEN po.dpp else inv.dpp END AS dpp, CASE WHEN p.payment_method = 1 THEN IFNULL(((po.dpp- (po.shrink + po.additional_shrink)) * (po.ppn_value/100)),0) ELSE IFNULL(inv.total_ppn,0) END AS ppnVal,
                                        CASE WHEN p.payment_method = 1 THEN IFNULL(((po.dpp-(po.shrink + po.additional_shrink)) * (po.pph_value/100)),0) ELSE IFNULL(inv.total_pph,0) END AS pphVal, 
                                        CASE WHEN p.payment_method = 1 THEN po.total_amount ELSE inv.amount END AS totalAmount, p.edit_date, p.payment_method, p.freight_id,
                                        CASE WHEN p.payment_method = 1 THEN 100 else pp.termin END as termin1
                                FROM payment p
                                    LEFT JOIN payment_oa po
                                        ON po.payment_id = p.payment_id
                                    LEFT JOIN TRANSACTION t
                                        ON t.transaction_id = po.transaction_id
                                    LEFT JOIN invoice_notim inv 
                                        ON  inv.payment_id = p.payment_id
                                    LEFT JOIN pengajuan_payment pp
                                        ON pp.idPP = inv.idPP
                                    LEFT JOIN transaction_shrink_weight ts
							            ON t.transaction_id = ts.transaction_id 
                                 WHERE p.payment_id = {$paymentId}";
                        $resultU = $myDatabase->query($sqlU, MYSQLI_STORE_RESULT);
                        if($resultU !== false && $resultU->num_rows > 0) {
                            while($rowU = $resultU->fetch_object()) {
                                $priceShrink = 0;
                                $totalShrink = 0;
                                $totalAddShrink = 0;
                                if($rowU->trx_shrink_claim > 0 || $rowU->shrink > 0 || $rowU->addshrink > 0){
                                   $priceShrink = $rowU->trx_shrink_claim;
                                   $totalShrink = $rowU->shrink;
                                   $totalAddShrink = $rowU->addshrink;
                                }
                                $sqlT = "INSERT INTO temp_payment_return (payment_id, payment_method, transaction_id, idpp, inv_notim_id,  freight_id, qty, price, termin, amount, 
                                                    shrink_qty_claim, shrink_price_claim, shrink_amount, add_shrink, ppn_value, pph_value, total_amount, entry_date, entry_by, return_date) 
                                        VALUES ({$paymentId}, {$rowU->payment_method}, {$rowU->transactionId}, {$rowU->idpp}, {$rowU->inv_notim_id}, {$rowU->freight_id}, {$rowU->quantity}, {$rowU->price}, {$rowU->termin1}, {$rowU->dpp}, 
                                        {$rowU->qtyShrink}, {$priceShrink}, {$totalShrink}, {$totalAddShrink}, {$rowU->ppnVal}, {$rowU->pphVal}, {$rowU->totalAmount}, 
                                                STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),  {$_SESSION['userId']}, '{$rowU->edit_date}')";
                                $resultT = $myDatabase->query($sqlT, MYSQLI_STORE_RESULT);

                                echo " return f => ". $sqlT;
                            }
                        }
                    }else if($rowA->labor_id > 0 || $rowA->vendor_id > 0 || $rowA->vendor_handling_id > 0 || $rowA->invoice_id > 0){
                        $vendorId = '';
                        $pengajuanId = '';
                        $invoiceId = '';

                        $pengajuanId = "idpp";
                        $invoiceId = "inv_notim_id";
                        if($rowA->labor_id > 0){
                            $vendorId = "labor_id";
                            $sqlU = "SELECT  CASE WHEN p.payment_method = 1 THEN t.transaction_id ELSE 0 END AS transactionId, CASE WHEN p.payment_method = 1 THEN t.quantity ELSE pp.total_qty END AS quantity,
                                            CASE WHEN p.payment_method = 1 THEN uc.price ELSE pp.price END AS price, inv.inv_notim_id, inv.idpp,
                                            pp.termin,  CASE WHEN p.payment_method = 1 THEN pob.dpp else inv.dpp END AS dpp, CASE WHEN p.payment_method = 1 THEN IFNULL((pob.dpp * (pob.ppn_value/100)),0) ELSE IFNULL(inv.total_ppn,0) END AS ppnVal,
                                            CASE WHEN p.payment_method = 1 THEN IFNULL((pob.dpp * (pob.pph_value/100)),0) ELSE IFNULL(inv.total_pph,0) END AS pphVal, 
                                            CASE WHEN p.payment_method = 1 THEN pob.total_amount ELSE inv.amount END AS totalAmount, p.edit_date, p.payment_method, p.labor_id as vendorId,
                                            CASE WHEN p.payment_method = 1 THEN 100 else pp.termin END as termin1
                                    FROM payment p
                                        LEFT JOIN payment_ob pob
                                            ON pob.payment_id = p.payment_id
                                        LEFT JOIN TRANSACTION t
                                            ON t.transaction_id = pob.transaction_id
                                        LEFT JOIN invoice_notim inv 
                                            ON  inv.payment_id = p.payment_id
                                        LEFT JOIN pengajuan_payment pp
                                            ON pp.idPP = inv.idPP
                                        LEFT JOIN unloading_cost uc
                                            ON uc.unloading_cost_id = t.unloading_cost_id
                                    WHERE p.payment_id = {$paymentId}";
                        }else if($rowA->vendor_handling_id > 0){
                            $vendorId = "handling_id";
                            $sqlU = "SELECT  CASE WHEN p.payment_method = 1 THEN t.transaction_id ELSE 0 END AS transactionId, CASE WHEN p.payment_method = 1 THEN ph.qty ELSE pp.total_qty END AS quantity,
                                        CASE WHEN p.payment_method = 1 THEN ph.price ELSE pp.price END AS price, inv.inv_notim_id, inv.idpp,
                                        pp.termin,  CASE WHEN p.payment_method = 1 THEN ph.dpp else inv.dpp END AS dpp, CASE WHEN p.payment_method = 1 THEN IFNULL((ph.dpp * (ph.ppn_value/100)),0) ELSE IFNULL(inv.total_ppn,0) END AS ppnVal,
                                        CASE WHEN p.payment_method = 1 THEN IFNULL((ph.dpp * (ph.pph_value/100)),0) ELSE IFNULL(inv.total_pph,0) END AS pphVal, 
                                        CASE WHEN p.payment_method = 1 THEN ph.total_amount ELSE inv.amount END AS totalAmount, p.edit_date, p.payment_method, p.vendor_handling_id as vendorId,
                                        CASE WHEN p.payment_method = 1 THEN 100 else pp.termin END as termin1
                                    FROM payment p
                                    LEFT JOIN payment_handling ph
                                        ON ph.payment_id = p.payment_id
                                    LEFT JOIN TRANSACTION t
                                        ON t.transaction_id = ph.transaction_id
                                    LEFT JOIN invoice_notim inv 
                                        ON  inv.payment_id = p.payment_id
                                    LEFT JOIN pengajuan_payment pp
                                        ON pp.idPP = inv.idPP
                                    WHERE p.payment_id = {$paymentId}";
                        }else if($rowA->vendor_id > 0){
                            $vendorId = "vendor_id";
                            $sqlU = "SELECT  CASE WHEN p.payment_method = 1 THEN t.transaction_id ELSE 0 END AS transactionId, CASE WHEN p.payment_method = 1 THEN pc.qty ELSE pp.total_qty END AS quantity,
                                        CASE WHEN p.payment_method = 1 THEN pc.price ELSE pp.price END AS price, inv.inv_notim_id, inv.idpp,
                                        pp.termin,  CASE WHEN p.payment_method = 1 THEN pc.dpp else inv.dpp END AS dpp, CASE WHEN p.payment_method = 1 THEN IFNULL((pc.dpp * (pc.ppn_value/100)),0) ELSE IFNULL(inv.total_ppn,0) END AS ppnVal,
                                        CASE WHEN p.payment_method = 1 THEN IFNULL((pc.dpp * (pc.pph_value/100)),0) ELSE IFNULL(inv.total_pph,0) END AS pphVal, 
                                        CASE WHEN p.payment_method = 1 THEN pc.total_amount ELSE inv.amount END AS totalAmount, p.edit_date, p.payment_method, p.vendor_id as vendorId,
                                        CASE WHEN p.payment_method = 1 THEN 100 else pp.termin END as termin1
                                    FROM payment p
                                    LEFT JOIN payment_curah pc
                                        ON pc.payment_id = p.payment_id
                                    LEFT JOIN TRANSACTION t
                                        ON t.transaction_id = pc.transaction_id
                                    LEFT JOIN invoice_notim inv 
                                        ON  inv.payment_id = p.payment_id
                                    LEFT JOIN pengajuan_payment pp
                                        ON pp.idPP = inv.idPP
                                    WHERE p.payment_id = {$paymentId}";
                        }else if($rowA->invoice_id > 0 && $rowA->general_vendor_id > 0){
                            $vendorId = "general_vendor_id";
                            $pengajuanId = "pg_id";
                            $invoiceId = "invoice_detail_id";

                            $sqlU = "SELECT  0 AS transactionId, invd.qty AS quantity, invd.price AS price,  invd.termin AS termin1,  invd.invoice_detail_id AS inv_notim_id, pg.pengajuan_general_id AS idpp,
                                        invd.amount AS dpp, invd.ppn AS ppnVal, invd.pph AS pphVal, 
                                        ((invd.amount + invd.ppn) - invd.pph) AS totalAmount, p.edit_date, p.payment_method, p.general_vendor_id AS vendorId
                                    FROM payment p
                                    LEFT JOIN invoice inv
                                        ON inv.invoice_id = p.invoice_id
                                    LEFT JOIN invoice_detail invd
                                        ON invd.invoice_id = inv.invoice_id
                                    LEFT JOIN pengajuan_general pg
                                        ON pg.invoice_id = inv.invoice_id
                                    WHERE p.payment_id = {$paymentId}";
                        }
                        $resultU = $myDatabase->query($sqlU, MYSQLI_STORE_RESULT);
                        if($resultU !== false && $resultU->num_rows > 0) {
                            while($rowU = $resultU->fetch_object()) {
                                $sqlT = "INSERT INTO temp_payment_return (payment_id, payment_method, transaction_id, {$pengajuanId}, {$invoiceId},  {$vendorId}, qty, price, termin, 
                                            amount, ppn_value, pph_value, total_amount, entry_date, entry_by, return_date) 
                                        VALUES ({$paymentId}, {$rowU->payment_method}, {$rowU->transactionId}, {$rowU->idpp}, {$rowU->inv_notim_id}, {$rowU->vendorId}, {$rowU->quantity}, 
                                            {$rowU->price}, {$rowU->termin1}, {$rowU->dpp}, {$rowU->ppnVal}, {$rowU->pphVal}, {$rowU->totalAmount}, 
                                                STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),  {$_SESSION['userId']}, '{$rowU->edit_date}')";
                                $resultT = $myDatabase->query($sqlT, MYSQLI_STORE_RESULT);
                                echo $sqlT;
                            }
                        }
                    }
                
                }
            }
            // echo $sqlU;
            // die();
			 insertGeneralLedger_payment($myDatabase, 'RETURN PAYMENT', "NULL", "NULL", "NULL", "NULL", "NULL", $paymentId);
			insertReportGL_payment($myDatabase, 'RETURN PAYMENT', "NULL", "NULL", "NULL", "NULL", "NULL", $paymentId);

            $sql = "SELECT p.*, b.currency_id AS b_currency_id, con.contract_id, con.contract_type, con.price_converted, con.quantity
                    FROM payment p 
                    INNER JOIN bank b
                        ON b.bank_id = p.bank_id
                    LEFT JOIN stockpile_contract sc
                        ON sc.stockpile_contract_id = p.stockpile_contract_id
                    LEFT JOIN contract con
                        ON con.contract_id = sc.contract_id
                    WHERE p.payment_id = {$paymentId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            
            if($result !== false && $result->num_rows == 1) {
                $row = $result->fetch_object();
                
                if($row->stockpile_contract_id != '') {
                    if($row->contract_type == 'P') {
                        if($row->payment_method == 1) {
                            $sqlUpdate = "UPDATE contract set payment_status = 0 WHERE contract_id = {$row->contract_id}";
                            $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            
                            if($row->original_amount_converted != $row->amount_converted) {
                                $sqlDP = "SELECT p.*, b.currency_id AS b_currency_id 
                                        FROM payment p
                                        INNER JOIN bank b
                                            ON b.bank_id = p.bank_id
                                        WHERE p.stockpile_contract_id = {$row->stockpile_contract_id} 
                                        AND p.payment_method = 2
                                        AND p.payment_status = 0";
                                $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                                if($resultDP !== false && $resultDP->num_rows > 0) {
                                    while($rowDP = $resultDP->fetch_object()) {
                                        $sqlUpdate = "UPDATE payment SET amount = {$rowDP->original_amount}, amount_converted = {$rowDP->original_amount_converted}
                                                    WHERE payment_id = {$rowDP->payment_id}";
                                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                                    }
                                }
                            }
                        }
                    } 
                    
                    // $sqlUpdate = "UPDATE `transaction` set payment_id = NULL where payment_id = {$paymentId}";
                    // $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                }elseif($row->vendor_id != '' || $row->freight_id != '' || $row->labor_id != ''|| $row->general_vendor_id != '' || $row->invoice_id != '') {
                    if($row->vendor_id != '') {
                        $whereProperty = " p.vendor_id = {$row->vendor_id} ";

                        $sqlUpdate = "UPDATE `transaction` set payment_id = NULL where payment_id = {$paymentId}";
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    } elseif($row->freight_id != '') {
                        $whereProperty = " p.freight_id = {$row->freight_id} ";

                        $sqlUpdate = "UPDATE `transaction` set fc_payment_id = NULL where fc_payment_id = {$paymentId}";
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    } elseif($row->labor_id != '') {
                        $whereProperty = " p.labor_id = {$row->labor_id} ";

                        $sqlUpdate = "UPDATE `transaction` set uc_payment_id = NULL where uc_payment_id = {$paymentId}";
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    } elseif($row->general_vendor_id != '') {
                        $whereProperty = " p.general_vendor_id = {$row->general_vendor_id} ";
                    }
                    
                    //  elseif($row->invoice_id != '') {
                    //      $sqlUpdate = "UPDATE invoice set payment_status = 0 WHERE invoice_id = {$row->invoice_id}";
                    //      $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    // }
                    
                    if($row->payment_method == 1) {

                        $takenDP = $row->amount - $row->original_amount;
                        $takenDPConverted = $row->amount_coverted - $row->original_amount_converted;

                        if($takenDP > 0) {
                            $sqlDP = "SELECT p.*, b.currency_id AS b_currency_id 
                                    FROM payment p
                                    INNER JOIN bank b
                                        ON b.bank_id = p.bank_id
                                    WHERE {$whereProperty}
                                    AND p.payment_method = 2
                                    AND .ppayment_status = 0
                                    ORDER BY p.payment_id ASC";
                            $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                            if($resultDP !== false && $resultDP->num_rows > 0) {
                                while($rowDP = $resultDP->fetch_object()) {
                                    if($takenDP > 0) {
                                        if($row->b_currency_id == $rowDP->b_currency_id) {
                                            $amount = $takenDP - $rowDP->original_amount;
                                            $amountConverted = $takenDPConverted - $rowDP->original_amount_converted;
                                            $takenDP = $takenDP - $amount;
                                        } elseif($row->b_currency_id != $rowDP->b_currency_id) {
                                            if($rowDP->b_currency_id == 2) {
                                                $amount = ceil($takenDP / $rowDP->exchange_rate) - $rowDP->original_amount;
                                                $amountConverted = ceil($takenDPConverted / $rowDP->exchange_rate) - $rowDP->original_amount_converted;
                                                $takenDP = $takenDP - ceil($amount * $rowDP->exchange_rate);
                                            } else {
                                                $amount = ceil($takenDP * $rowDP->exchange_rate) - $rowDP->original_amount;
                                                $amountConverted = ceil($takenDPConverted * $rowDP->exchange_rate) - $rowDP->original_amount_converted;
                                                $takenDP = $takenDP - ceil($amount / $rowDP->exchange_rate);
                                            }
                                        } else {
                                            $amount = $takenDP - $rowDP->original_amount;
                                            $amountConverted = $takenDPConverted - $rowDP->original_amount_converted;
                                            $takenDP = $takenDP - $amount;
                                        }

                                        $sqlUpdate = "UPDATE payment SET amount = {$amount}, amount_converted = {$amountConverted}
                                                    WHERE payment_id = {$rowDP->payment_id}";
                                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                                        // echo "AKA" . $sqlUpdate;
                                    }
                                }
                            }
                        }
                    }
                } 
                elseif($row->sales_id != '') {
                    if($row->payment_method == 1) {
                        $sqlUpdate = "UPDATE shipment SET payment_id = NULL WHERE payment_id = {$paymentId}";
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    } elseif($row->payment_method == 2) {
                        $sqlShipment = "SELECT pd.*, sh.dp_amount
                                FROM payment_detail pd 
                                INNER JOIN shipment sh
                                    ON sh.shipment_id = pd.shipment_id
                                WHERE pd.payment_id = {$paymentId}";
                        $resultShipment = $myDatabase->query($sqlShipment, MYSQLI_STORE_RESULT);
                        if($resultShipment !== false && $resultShipment->num_rows > 0) {
                            while($rowShipment = $resultShipment->fetch_object()) {
                                $newDP = $rowShipment->dp_amount - $rowShipment->amount_converted;
                                
                                $sqlUpdate = "UPDATE shipment SET dp_amount = {$newDP} WHERE shipment_id = {$rowShipment->shipment_id}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            }
                        }
                    }
                }
            }
			
            //add by yeni
            $sqlA = "SELECT * FROM logbook_new WHERE payment_id = {$paymentId}";
            $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
            if($resultA !== false && $resultA->num_rows > 0) {
                $rowA = $resultA->fetch_object();
                if($rowA->internalTf_id != ''){
                    $sqlLog = "UPDATE logbook_new set status1 = 4, payment_id = NULL where payment_id = {$paymentId}";

                    $sqlInv = "UPDATE pengajuan_internaltf set payment_id = NULL where pengajuan_interalTF_id = {$rowA->internalTf_id}";
                    $resultInv = $myDatabase->query($sqlInv, MYSQLI_STORE_RESULT);

                }else if($rowA->ppayment_id != ''){
                    $UpdateInv = "UPDATE invoice_notim SET status_payment = 2, return_remarks = 'RETURN PAYMENT VOUCHER' WHERE payment_id = {$paymentId}";
                    $resultUpdate = $myDatabase->query($UpdateInv, MYSQLI_STORE_RESULT);
                    $sqlLog = "UPDATE logbook_new set status1 = 1, payment_id = NULL where payment_id = {$paymentId}";
                }else if($rowA->pgeneral_id != ''){
                    $UpdateInv = "UPDATE invoice SET payment_status = 2, return_remarks = 'RETURN PAYMENT VOUCHER' WHERE invoice_id = {$rowA->inv_general_id}";
                    $resultUpdate = $myDatabase->query($UpdateInv, MYSQLI_STORE_RESULT);

                    $sqlB = "UPDATE payment SET invoice_id = NULL WHERE payment_id = {$paymentId}";
                    $resultB = $myDatabase->query($sqlB, MYSQLI_STORE_RESULT);

                    $sqlLog = "UPDATE logbook_new set status1 = 1, payment_id = NULL where payment_id = {$paymentId}";
                }
                $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
            }

            $return_value = '|OK|Payment has successfully returned.|' . $paymentId ;
        } else {
            $return_value = '|FAIL|Return payment failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'return_payment') {
    // <editor-fold defaultstate="collapsed" desc="return_payment">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentId = $myDatabase->real_escape_string($_POST['paymentId']);
    $returnPaymentDate = $myDatabase->real_escape_string($_POST['returnPaymentDate']);

    $dateTrans = str_replace("/", "-", $myDatabase->real_escape_string($_POST['returnPaymentDate']));
    $dt = date('Y-m-d', strtotime($dateTrans));
    $date2 = new DateTime($dt);
    $newDate = $date2->format('Y-m-d');
    // </editor-fold>

    if ($paymentId != '') {
        //Get Stockpile Contract Id
        $sql = "SELECT stockpile_contract_id FROM payment WHERE payment_id = {$paymentId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            $stockpileContractId = $row->stockpile_contract_id;
        }

        //closingDate
        $newReturnPaymentDate = implode("-", array_reverse(explode("/", $returnPaymentDate)));
        $checkClosingDate = explode('-', closingDate($newReturnPaymentDate, 'Payment - Return Payment'));
        $boolClosing = $checkClosingDate[0];
        $closingDate = $checkClosingDate[1];

        if ($boolClosing) {

            $sql = "SELECT DATE_FORMAT(payment_date,'%Y-%m-%d') AS paymentDate FROM payment WHERE payment_id = {$paymentId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false && $result->num_rows == 1) {
                $row = $result->fetch_object();

                $paymentDate = $row->paymentDate;

            }

            if ($newDate <= $paymentDate) {

                $sql = "UPDATE `payment` SET "
                    . "payment_status = 1, "
                    . "edit_by = {$_SESSION['userId']}, "
                    . "edit_date = STR_TO_DATE('$returnPaymentDate', '%d/%m/%Y %H:%i:%s'), "
                    . "exec_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                    . " WHERE payment_id = {$paymentId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false) {

                    insertGeneralLedger($myDatabase, 'RETURN PAYMENT', "NULL", "NULL", "NULL", "NULL", $paymentId);
                    insertReportGL($myDatabase, 'RETURN PAYMENT', "NULL", "NULL", "NULL", "NULL", $paymentId);


                    $sql = "SELECT p.*, b.currency_id AS b_currency_id, con.contract_id, con.contract_type, con.price_converted, con.quantity
                    FROM payment p 
                    INNER JOIN bank b
                        ON b.bank_id = p.bank_id
                    LEFT JOIN stockpile_contract sc
                        ON sc.stockpile_contract_id = p.stockpile_contract_id
                    LEFT JOIN contract con
                        ON con.contract_id = sc.contract_id
                    WHERE p.payment_id = {$paymentId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    if ($result !== false && $result->num_rows == 1) {
                        $row = $result->fetch_object();

                        if ($row->stockpile_contract_id > 0) {
                            if ($row->contract_type == 'P') {
                                if ($row->payment_method == 1) {
                                    $sqlUpdate = "UPDATE contract set payment_status = 0 WHERE contract_id = {$row->contract_id}";
                                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

                                    if ($row->original_amount_converted != $row->amount_converted) {
                                        $sqlDP = "SELECT p.*, b.currency_id AS b_currency_id 
                                        FROM payment p
                                        INNER JOIN bank b
                                            ON b.bank_id = p.bank_id
                                        WHERE p.stockpile_contract_id = {$row->stockpile_contract_id} 
                                        AND p.payment_method = 2
                                        AND p.payment_status = 0";
                                        $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                                        if ($resultDP !== false && $resultDP->num_rows > 0) {
                                            while ($rowDP = $resultDP->fetch_object()) {
                                                $sqlUpdate = "UPDATE payment SET amount = {$rowDP->original_amount}, amount_converted = {$rowDP->original_amount_converted}
                                                    WHERE payment_id = {$rowDP->payment_id}";
                                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                                            }
                                        }
                                    }
                                }
                            }

                            $sqlUpdate = "UPDATE `transaction` set payment_id = NULL where payment_id = {$paymentId}";
                            $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                        } elseif ($row->vendor_id > 0 || $row->freight_id > 0 || $row->labor_id > 0 || $row->general_vendor_id > 0 || $row->invoice_id > 0 || $row->vendor_handling_id > 0) {
                            if ($row->vendor_id > 0) {
                                $whereProperty = " p.vendor_id = {$row->vendor_id} ";

                                $sqlUpdate = "UPDATE `transaction` set payment_id = NULL where payment_id = {$paymentId}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } elseif ($row->freight_id > 0) {
                                $whereProperty = " p.freight_id = {$row->freight_id} ";

                                $sqlUpdate = "UPDATE `transaction` set fc_payment_id = NULL where fc_payment_id = {$paymentId}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } elseif ($row->vendor_handling_id > 0) {
                                $whereProperty = " p.vendor_handling_id = {$row->vendor_handling_id} ";

                                $sqlUpdate = "UPDATE `transaction` set hc_payment_id = NULL where hc_payment_id = {$paymentId}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } elseif ($row->labor_id > 0) {
                                $whereProperty = " p.labor_id = {$row->labor_id} ";

                                $sqlUpdate = "UPDATE `transaction` set uc_payment_id = NULL where uc_payment_id = {$paymentId}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } elseif ($row->general_vendor_id > 0) {
                                $whereProperty = " p.general_vendor_id = {$row->general_vendor_id} ";
                            } elseif ($row->invoice_id > 0) {
                                $sqlUpdate = "UPDATE invoice set payment_status = 0 WHERE invoice_id = {$row->invoice_id}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            }

                            if ($row->payment_method == 1) {

                                $takenDP = $row->amount - $row->original_amount;
                                $takenDPConverted = $row->amount_coverted - $row->original_amount_converted;

                                if ($takenDP > 0) {
                                    $sqlDP = "SELECT p.*, b.currency_id AS b_currency_id 
                                    FROM payment p
                                    INNER JOIN bank b
                                        ON b.bank_id = p.bank_id
                                    WHERE {$whereProperty}
                                    AND p.payment_method = 2
                                    AND .ppayment_status = 0
                                    ORDER BY p.payment_id ASC";
                                    $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                                    if ($resultDP !== false && $resultDP->num_rows > 0) {
                                        while ($rowDP = $resultDP->fetch_object()) {
                                            if ($takenDP > 0) {
                                                if ($row->b_currency_id == $rowDP->b_currency_id) {
                                                    $amount = $takenDP - $rowDP->original_amount;
                                                    $amountConverted = $takenDPConverted - $rowDP->original_amount_converted;
                                                    $takenDP = $takenDP - $amount;
                                                } elseif ($row->b_currency_id != $rowDP->b_currency_id) {
                                                    if ($rowDP->b_currency_id == 2) {
                                                        $amount = ceil($takenDP / $rowDP->exchange_rate) - $rowDP->original_amount;
                                                        $amountConverted = ceil($takenDPConverted / $rowDP->exchange_rate) - $rowDP->original_amount_converted;
                                                        $takenDP = $takenDP - ceil($amount * $rowDP->exchange_rate);
                                                    } else {
                                                        $amount = ceil($takenDP * $rowDP->exchange_rate) - $rowDP->original_amount;
                                                        $amountConverted = ceil($takenDPConverted * $rowDP->exchange_rate) - $rowDP->original_amount_converted;
                                                        $takenDP = $takenDP - ceil($amount / $rowDP->exchange_rate);
                                                    }
                                                } else {
                                                    $amount = $takenDP - $rowDP->original_amount;
                                                    $amountConverted = $takenDPConverted - $rowDP->original_amount_converted;
                                                    $takenDP = $takenDP - $amount;
                                                }

                                                $sqlUpdate = "UPDATE payment SET amount = {$amount}, amount_converted = {$amountConverted}
                                                    WHERE payment_id = {$rowDP->payment_id}";
                                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                                            }
                                        }
                                    }
                                }
                            }
                        } elseif ($row->sales_id != '') {
                            if ($row->payment_method == 1) {
                                $sqlUpdate = "UPDATE shipment SET payment_id = NULL WHERE payment_id = {$paymentId}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } elseif ($row->payment_method == 2) {
                                $sqlShipment = "SELECT pd.*, sh.dp_amount
                                FROM payment_detail pd 
                                INNER JOIN shipment sh
                                    ON sh.shipment_id = pd.shipment_id
                                WHERE pd.payment_id = {$paymentId}";
                                $resultShipment = $myDatabase->query($sqlShipment, MYSQLI_STORE_RESULT);
                                if ($resultShipment !== false && $resultShipment->num_rows > 0) {
                                    while ($rowShipment = $resultShipment->fetch_object()) {
                                        $newDP = $rowShipment->dp_amount - $rowShipment->amount_converted;

                                        $sqlUpdate = "UPDATE shipment SET dp_amount = {$newDP} WHERE shipment_id = {$rowShipment->shipment_id}";
                                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                                    }
                                }
                            }
                        }
                    }
					
					//add by YENI
					//PENGAJUAN OA
					$sqlLog = "UPDATE logbook_new set payment_id = NULL, status1 = 1 where payment_id = {$paymentId}";
                    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
								//echo "Lobook " . $pengajuanIdOA;
                    $sqlOA = "UPDATE pengajuan_payment set dp_status = 1, payment_id = NULL where payment_id = {$paymentId}";
                    $resultOA = $myDatabase->query($sqlOA, MYSQLI_STORE_RESULT);
					
					//Invoice General
					$sqlpayment = "SELECT invoice_id FROM payment where payment_id = {$paymentId}";
					$result = $myDatabase->query($sqlpayment, MYSQLI_STORE_RESULT);
					if ($result !== false && $result->num_rows > 0) {
                            while ($row = $result->fetch_object()) {
								$newInv = $row->invoice_id;

								$sqlInv = "UPDATE invoice set invoice_status = 0 where invoice_id = {$newInv}";
								$resultInv = $myDatabase->query($sqlInv, MYSQLI_STORE_RESULT);
						}
                    }					


                    $return_value = '|OK|Payment has successfully returned.|' . $paymentId . '|';
                } else {
                    $return_value = '|FAIL|Return payment failed.|';
                }
            } else {
                $return_value = '|FAIL|Tanggal retur harus sama/melebihi tanggal transaksi.|';
            }
        } else {
            $return_value = $closingDate;
            echo $return_value;
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'return_pc') {
    // <editor-fold defaultstate="collapsed" desc="return_pc">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentId = $myDatabase->real_escape_string($_POST['pc_id']);
    $returnPaymentDate = $myDatabase->real_escape_string($_POST['returnPaymentDate']);
    // </editor-fold>
    $dateTrans = str_replace("/", "-", $myDatabase->real_escape_string($_POST['returnPaymentDate']));
    $dt = date('Y-m-d', strtotime($dateTrans));
    $date2 = new DateTime($dt);
    $newDate = $date2->format('Y-m-d');

    if ($paymentId != '') {

        //closingDate
        $sql = "SELECT stockpile_contract_id FROM payment WHERE payment_id = {$paymentId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            $stockpileContractId = $row->stockpile_contract_id;
        }

        $newReturnPaymentDate = implode("-", array_reverse(explode("/", $returnPaymentDate)));
        $checkClosingDate = explode('-', closingDate($newReturnPaymentDate, 'Payment - Return Cash Payment'));
        $boolClosing = $checkClosingDate[0];
        $closingDate = $checkClosingDate[1];

        if (!$boolClosing) {
            $return_value = $closingDate;
            echo $return_value;
        } else {
            $sql = "SELECT DATE_FORMAT(payment_date,'%Y-%m-%d') AS paymentDate FROM payment WHERE payment_id = {$paymentId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false && $result->num_rows == 1) {
                $row = $result->fetch_object();

                $paymentDate = $row->paymentDate;

            }
            if ($paymentDate <= $newDate) {
                $sql = "UPDATE `payment` SET "
                    . "payment_status = 1, "
                    . "edit_by = {$_SESSION['userId']}, "
                    . "edit_date = STR_TO_DATE('$returnPaymentDate', '%d/%m/%Y %H:%i:%s'), "
                    . "exec_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                    . " WHERE payment_id = {$paymentId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false) {

                    insertGeneralLedger($myDatabase, 'RETURN PAYMENT', "NULL", "NULL", "NULL", "NULL", $paymentId);
                    insertReportGL($myDatabase, 'RETURN PAYMENT', "NULL", "NULL", "NULL", "NULL", $paymentId);


                    $sql = "SELECT p.*, b.currency_id AS b_currency_id, con.contract_id, con.contract_type, con.price_converted, con.quantity
                    FROM payment p 
                    INNER JOIN bank b
                        ON b.bank_id = p.bank_id
                    LEFT JOIN stockpile_contract sc
                        ON sc.stockpile_contract_id = p.stockpile_contract_id
                    LEFT JOIN contract con
                        ON con.contract_id = sc.contract_id
                    WHERE p.payment_id = {$paymentId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    if ($result !== false && $result->num_rows == 1) {
                        $row = $result->fetch_object();

                        if ($row->vendor_id != '' || $row->freight_id != '' || $row->labor_id != '' || $row->general_vendor_id != '' || $row->payment_cash_id != '') {
                            if ($row->vendor_id != '') {
                                $whereProperty = " p.vendor_id = {$row->vendor_id} ";

                                $sqlUpdate = "UPDATE `transaction` set payment_id = NULL where payment_id = {$paymentId}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } elseif ($row->freight_id != '') {
                                $whereProperty = " p.freight_id = {$row->freight_id} ";

                                $sqlUpdate = "UPDATE `transaction` set fc_payment_id = NULL where fc_payment_id = {$paymentId}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } elseif ($row->labor_id != '') {
                                $whereProperty = " p.labor_id = {$row->labor_id} ";

                                $sqlUpdate = "UPDATE `transaction` set uc_payment_id = NULL where uc_payment_id = {$paymentId}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } elseif ($row->general_vendor_id != '') {
                                $whereProperty = " p.general_vendor_id = {$row->general_vendor_id} ";
                            } elseif ($row->payment_cash_id != '') {
                                $sqlUpdate = "UPDATE payment_cash set payment_cash_status = 2 WHERE payment_id = {$paymentId}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

                                $sql = "SELECT GROUP_CONCAT(payment_cash_id) AS payment_cash_id FROM payment_cash WHERE payment_id = {$paymentId}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if ($result->num_rows == 1) {
                                    $row = $result->fetch_object();
                                    $payment_cash_id = $row->payment_cash_id;

                                    $sqldp = "UPDATE payment_cash_dp SET "
                                        . "status = 1 "
                                        . " WHERE payment_cash_id IN ({$payment_cash_id})";
                                    $resultdp = $myDatabase->query($sqldp, MYSQLI_STORE_RESULT);
                                }

                            }


                        }
                    }

                    // insertGeneralLedger($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", $paymentId);

                    $return_value = '|OK|Payment has successfully returned.|' . $paymentId . '|';
                } else {
                    $return_value = '|FAIL|Return payment failed.|';
                }
            } else {
                $return_value = '|FAIL|Tanggal retur harus sama/melebihi tanggal transaksi.|';
            }
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_payment') {
    // <editor-fold defaultstate="collapsed" desc="jurnal_payment">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    //$paymentId = $myDatabase->real_escape_string($_POST['paymentId']);
    // </editor-fold>
    $sqlNotim = "SELECT * FROM `payment` WHERE payment_id IN (
98702
)";
    $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
    if ($resultNotim !== false && $resultNotim->num_rows > 0) {
        while ($rowNotim = $resultNotim->fetch_object()) {
            $paymentId = $rowNotim->payment_id;

            if ($paymentId != '') {


                insertGeneralLedger($myDatabase, 'PAYMENT' , "NULL", "NULL", "NULL", "NULL", $paymentId);

                insertReportGL($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", "NULL", $paymentId);

                $return_value = '|OK|Payment has successfully returned.|';

            } else {
                $return_value = '|FAIL|Record not found.|';
            }

        }
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_petty_cash') {
    // <editor-fold defaultstate="collapsed" desc="jurnal_petty_cash">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentId = $myDatabase->real_escape_string($_POST['paymentId']);
    // </editor-fold>

    if ($paymentId != '') {


        insertGeneralLedger($myDatabase, 'PAYMENT ADMIN', "NULL", "NULL", "NULL", "NULL", $paymentId);

        insertReportGL($myDatabase, 'PAYMENT ADMIN', "NULL", "NULL", "NULL", "NULL", $paymentId);

        $return_value = '|OK|Payment has successfully returned.|';

    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_stock_transit') {
    // <editor-fold defaultstate="collapsed" desc="jurnal_stock_transit">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    // $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    //$contractId = 6223;
    // </editor-fold>

    $sqlNotim = "SELECT * FROM `stock_transit` WHERE stock_transit_id IN
                    (
104
)";
    $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
    if ($resultNotim !== false && $resultNotim->num_rows > 0) {
        while ($rowNotim = $resultNotim->fetch_object()) {
            $contractId = $rowNotim->stock_transit_id;

            if ($contractId != '') {


                insertGeneralLedger($myDatabase, 'STOCK TRANSIT', "NULL", "NULL", $contractId);
                insertReportGL($myDatabase, 'STOCK TRANSIT', "NULL", "NULL", $contractId);

                $return_value = '|OK|Payment has successfully returned.|';

            } else {
                $return_value = '|FAIL|Record not found.|';
            }
        }
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_contract') {
    // <editor-fold defaultstate="collapsed" desc="jurnal_contract">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    // $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    //$contractId = 6233;
    // </editor-fold>

    $sqlNotim = "SELECT * FROM `contract` WHERE contract_id IN (
	9258)";
    //$sqlNotim = "SELECT adj_id AS contract_id FROM `contract_adjustment` WHERE adj_id IN (127)";

    $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
    if ($resultNotim !== false && $resultNotim->num_rows > 0) {
        while ($rowNotim = $resultNotim->fetch_object()) {
            $contractId = $rowNotim->contract_id;

            if ($contractId != '') {

				insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);
                insertReportGL($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);

                $return_value = '|OK|Payment has successfully returned.|';

            } else {
                $return_value = '|FAIL|Record not found.|';
            }

        }
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'open_po_invoice') {
    // <editor-fold defaultstate="collapsed" desc="jurnal_reject_contract">
    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    $openpo = $myDatabase->real_escape_string($_POST['openpo']);

    //$dateTrans = str_replace("/", "-", $myDatabase->real_escape_string($_POST['rejectContractDate']));
    //$dt = date('Y-m-d', strtotime($dateTrans));
    //$date2 = new DateTime($dt);
    //$newDate = $date2->format('Y-m-d');
    // </editor-fold>

    if ($contractId != '') {

        /*$sql = "SELECT DATE_FORMAT(entry_date,'%Y-%m-%d') AS contractDate FROM contract WHERE contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();

            $contractDate = $row->contractDate;

        }*/

        if ($openpo > 0) {
            $sqlUpdate = "UPDATE contract SET open_po = {$openpo} WHERE contract_id = {$contractId}";
            $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
            if ($resultUpdate !== false) {

               // $sqlUpdate2 = "UPDATE po_pks AS a LEFT JOIN po_contract b ON a.po_pks_id = b.po_pks_id
				//		SET po_status = 0 WHERE b.contract_id = {$contractId}";
             //   $resultUpdate2 = $myDatabase->query($sqlUpdate2, MYSQLI_STORE_RESULT);


               // insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);
               // insertReportGL($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);

                $return_value = '|OK|Contract has successfully opened.|' . $contractId . '|';
            } else {
                $return_value = '|FAIL|Record not found.|';
            }

        } else {
            $return_value = '|FAIL|Data tidak boleh 0.|' . $contractId . '|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_reject_contract') {
    // <editor-fold defaultstate="collapsed" desc="jurnal_reject_contract">
    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    $rejectContractDate = $myDatabase->real_escape_string($_POST['rejectContractDate']);

    $dateTrans = str_replace("/", "-", $myDatabase->real_escape_string($_POST['rejectContractDate']));
    $dt = date('Y-m-d', strtotime($dateTrans));
    $date2 = new DateTime($dt);
    $newDate = $date2->format('Y-m-d');
    // </editor-fold>

    if ($contractId != '') {

        $sql = "SELECT DATE_FORMAT(entry_date,'%Y-%m-%d') AS contractDate FROM contract WHERE contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();

            $contractDate = $row->contractDate;

        }

        if ($contractDate <= $newDate) {
            $sqlUpdate = "UPDATE contract SET contract_status = 2 , `contract_no`=concat(contract_no,'REJECTED') , `po_no`=concat(po_no,'REJECTED'), sync_by = {$_SESSION['userId']}, 
            sync_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), 
			reject_date = STR_TO_DATE('$rejectContractDate', '%d/%m/%Y %H:%i:%s'),
			reject_by = {$_SESSION['userId']}			
					WHERE contract_id = {$contractId}";
            $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
            if ($resultUpdate !== false) {

                $sqlUpdate2 = "UPDATE po_pks AS a LEFT JOIN po_contract b ON a.po_pks_id = b.po_pks_id
						SET po_status = 0 WHERE b.contract_id = {$contractId}";
                $resultUpdate2 = $myDatabase->query($sqlUpdate2, MYSQLI_STORE_RESULT);


                insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);
                insertReportGL($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);

                $return_value = '|OK|Payment has successfully rejected.|' . $contractId . '|';
            } else {
                $return_value = '|FAIL|Record not found.|';
            }

        } else {
            $return_value = '|FAIL|Tanggal retur harus sama/melebihi tanggal kontrak.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_invoice_sales') {
    // <editor-fold defaultstate="collapsed" desc="jurnal_notim">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    //$transactionId = $myDatabase->real_escape_string($_POST['transactionId']);
    // </editor-fold>

    //$sqlNotim = "SELECT * FROM `transaction` WHERE slip_no IN ('MAR-19-0000002195','MAR-19-0000002196')";
    $sqlNotim = "SELECT * FROM `invoice_sales` WHERE inv_notim_id IN (28,29,30)";
    $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
    if ($resultNotim !== false && $resultNotim->num_rows > 0) {
        while ($rowNotim = $resultNotim->fetch_object()) {
            $invoiceId = $rowNotim->inv_notim_id;
            if ($invoiceId != '') {
                insertGeneralLedger($myDatabase, 'INVOICE SALES', $invoiceId);
                insertReportGL($myDatabase, 'INVOICE SALES', $invoiceId);
                //insertReportGL2($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                $return_value = '|OK|Payment has successfully returned.|';

            } else {
                $return_value = '|FAIL|Record not found.|';
            }
        }
    }

    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_invoice_sales_oa') {
    // <editor-fold defaultstate="collapsed" desc="jurnal_notim">
	echo 'aa';
    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    //$transactionId = $myDatabase->real_escape_string($_POST['transactionId']);
    // </editor-fold>

    //$sqlNotim = "SELECT * FROM `transaction` WHERE slip_no IN ('MAR-19-0000002195','MAR-19-0000002196')";
    $sqlNotim = "SELECT * FROM `invoice_sales_oa` WHERE inv_notim_id IN (3)";
    $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
    if ($resultNotim !== false && $resultNotim->num_rows > 0) {
        while ($rowNotim = $resultNotim->fetch_object()) {
            $invoiceId = $rowNotim->inv_notim_id;
            if ($invoiceId != '') {
                insertGeneralLedger($myDatabase, 'INVOICE SALES OA', $invoiceId);
                insertReportGL($myDatabase, 'INVOICE SALES OA', $invoiceId);
                //insertReportGL2($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                $return_value = '|OK|Payment has successfully returned.|';

            } else {
                $return_value = '|FAIL|Record not found.|';
            }
        }
    }

    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_invoice') {
    // <editor-fold defaultstate="collapsed" desc="jurnal_invoice">
    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    //$invoiceId = 7322;
    // </editor-fold>
    $sqlNotim = "SELECT * FROM `invoice_detail` WHERE invoice_detail_id IN (

)";
    //$sqlNotim = "SELECT * FROM invoice_detail WHERE entry_date BETWEEN '2020-05-01' AND '2020-05-31'";
    $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
    if ($resultNotim !== false && $resultNotim->num_rows > 0) {
        while ($rowNotim = $resultNotim->fetch_object()) {
            $invoiceId = $rowNotim->invoice_detail_id;
            if ($invoiceId != '') {
                insertGeneralLedger($myDatabase, 'INVOICE DETAIL', $invoiceId);
                insertReportGL($myDatabase, 'INVOICE DETAIL', $invoiceId);

                $sqlA = "SELECT invoice_detail_id FROM invoice_detail
                                WHERE invoice_id = $invoiceId}";
                $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                if ($resultA !== false && $resultA->num_rows > 0) {
                    while ($rowA = $resultA->fetch_object()) {
                        $invoiceId = $rowA->invoice_detail_id;
                        //insertReportGL($myDatabase, 'INVOICE DETAIL', $invoiceId);
                    }
                }
                $return_value = '|OK|Invoice has successfully Created.|';

            } else {
                $return_value = '|FAIL|Record not found.|';
            }

        }
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_invoice_return') {
    // <editor-fold defaultstate="collapsed" desc="jurnal_invoice_return">

    $return_value = '';

    $sqlNotim = "SELECT * FROM `invoice_detail` WHERE invoice_detail_id IN (
79715
)";
    //$sqlNotim = "SELECT * FROM invoice_detail WHERE entry_date BETWEEN '2020-02-01' AND '2020-05-31'";
    $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
    if ($resultNotim !== false && $resultNotim->num_rows > 0) {
        while ($rowNotim = $resultNotim->fetch_object()) {
            $invoiceId = $rowNotim->invoice_detail_id;
            if ($invoiceId != '') {

                insertGeneralLedger($myDatabase, 'RETURN INVOICE', $invoiceId);

                insertReportGL($myDatabase, 'RETURN INVOICE', $invoiceId);

                $return_value = '|OK|Invoice has successfully Created.|';

            } else {
                $return_value = '|FAIL|Record not found.|';
            }
        }
    }


    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_notim') {
    // <editor-fold defaultstate="collapsed" desc="jurnal_notim">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    //$transactionId = $myDatabase->real_escape_string($_POST['transactionId']);
    // </editor-fold>

    //$sqlNotim = "SELECT * FROM `transaction` WHERE slip_no IN ('MAR-19-0000002195','MAR-19-0000002196')";
    $sqlNotim = "SELECT * FROM `transaction` WHERE transaction_id IN (
540937,
540948,
540955,
540986,
540999,
541002,
541425)";
    $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
    if ($resultNotim !== false && $resultNotim->num_rows > 0) {
        while ($rowNotim = $resultNotim->fetch_object()) {
            $transactionId = $rowNotim->transaction_id;
            if ($transactionId != '') {
                insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                insertReportGL($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                //insertReportGL2($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                $return_value = '|OK|Payment has successfully returned.|';

            } else {
                $return_value = '|FAIL|Record not found.|';
            }
        }
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_memorial') {
    // <editor-fold defaultstate="collapsed" desc="jurnal_memorial">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    //$transactionId = $myDatabase->real_escape_string($_POST['transactionId']);
    // </editor-fold>

    //$sqlNotim = "SELECT * FROM `transaction` WHERE slip_no IN ('MAR-19-0000002195','MAR-19-0000002196')";
    $sqlNotim = "SELECT * FROM `rpt_upload` WHERE rpt_upload_id IN (78492,
78493,
78494,
78495,
78496,
78497,
78498,
78499,
78500,
78501,
78502,
78503,
78504,
78505,
78506,
78507,
78508,
78509,
78510,
78511,
78512,
78513,
78514,
78515,
78516,
78517,
78518,
78519,
78520,
78521,
78522,
78523,
78524,
78525,
78526,
78527)";
    $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
    if ($resultNotim !== false && $resultNotim->num_rows > 0) {
        while ($rowNotim = $resultNotim->fetch_object()) {
            $rpt_upload_id = $rowNotim->rpt_upload_id;


            if ($rpt_upload_id != '') {


                insertReportGL_JurnalMemorial($myDatabase, 'JURNAL MEMORIAL', "NULL", "NULL", "NULL", "NULL", "NULL", $rpt_upload_id);

                $return_value = '|OK|Payment has successfully returned111.|';

            } else {
                $return_value = '|FAIL|Record not found.|';
            }

        }
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'susut_notim') {
    // <editor-fold defaultstate="collapsed" desc="susut_notim">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    //$transactionId = $myDatabase->real_escape_string($_POST['transactionId']);
    // </editor-fold>

    //$sqlNotim = "SELECT * FROM `transaction` WHERE slip_no IN ('MAR-19-0000002195','MAR-19-0000002196')";
    $sqlNotim = "SELECT * FROM `transaction` WHERE transaction_id IN (296173)";
    $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
    if ($resultNotim !== false && $resultNotim->num_rows > 0) {
        while ($rowNotim = $resultNotim->fetch_object()) {
            $transactionId = $rowNotim->transaction_id;


            if ($transactionId != '') {


                $sql = "CALL sp_shrink_weight({$transactionId})";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                $return_value = '|OK|Payment has successfully returned.|';

            } else {
                $return_value = '|FAIL|Record not found.|';
            }

        }
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_adjustment_oa') {
    // <editor-fold defaultstate="collapsed" desc="delete_adjustment_oa">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $adjNo = $myDatabase->real_escape_string($_POST['adjNo']);
    // </editor-fold>

    if ($adjNo != '') {


        $sqlAdj = "SELECT adj_id FROM `adjustment_oa_ob` WHERE adj_no = '{$adjNo}'";
        $resultAdj = $myDatabase->query($sqlAdj, MYSQLI_STORE_RESULT);
        if ($resultAdj->num_rows == 1) {
            $rowAdj = $resultAdj->fetch_object();

            $adjId = $rowAdj->adj_id;
        }

        $sql = "UPDATE transaction SET adj_oa = NULL WHERE adj_oa = {$adjId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sqlNotim = "SELECT * FROM `rpt_upload` WHERE payment_no = '{$adjNo}' ";
        $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
        if ($resultNotim !== false && $resultNotim->num_rows > 0) {
            while ($rowNotim = $resultNotim->fetch_object()) {

                $sql = "INSERT INTO `delete_adjustment_oa_ob` (gl_module, payment_no, slip_no, supplier_name, supplier_code, gl_date, stockpile_name, account_no, account_name, amounts, description,entry_date,entry_by) "
                    . "VALUES ('Jurnal Memorial', '{$rowNotim->payment_no}', '{$rowNotim->slip_no}', '{$rowNotim->supplier_name}', '{$rowNotim->supplier_code}', '{$rowNotim->gl_date}', '{$rowNotim->stockpile_name}', '{$rowNotim->account_no}', '{$rowNotim->account_name}', '{$rowNotim->amounts}', '{$rowNotim->description}',STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']})";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


            }

        }

        $sql = "DELETE FROM `rpt_upload` WHERE payment_no = '{$adjNo}'";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "DELETE FROM `gl_report` WHERE jurnal_no = '{$adjNo}'";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "DELETE FROM `adjustment_oa_ob` WHERE adj_no = '{$adjNo}'";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Data has successfully deleted.|';
            echo $sql;
        } else {
            $return_value = '|FAIL|Delete Data failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_adjustment_ob') {
    // <editor-fold defaultstate="collapsed" desc="delete_adjustment_ob">
    $return_value = '';
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $adjNo = $myDatabase->real_escape_string($_POST['adjNo']);
    // </editor-fold>

    if ($adjNo != '') {


        $sqlAdj = "SELECT adj_id FROM `adjustment_oa_ob` WHERE adj_no = '{$adjNo}'";
        $resultAdj = $myDatabase->query($sqlAdj, MYSQLI_STORE_RESULT);
        if ($resultAdj->num_rows == 1) {
            $rowAdj = $resultAdj->fetch_object();

            $adjId = $rowAdj->adj_id;
        }

        $sql = "UPDATE transaction SET adj_ob = NULL WHERE adj_ob = {$adjId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sqlNotim = "SELECT * FROM `rpt_upload` WHERE payment_no = '{$adjNo}' ";
        $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
        if ($resultNotim !== false && $resultNotim->num_rows > 0) {
            while ($rowNotim = $resultNotim->fetch_object()) {

                $sql = "INSERT INTO `delete_adjustment_oa_ob` (gl_module, payment_no, slip_no, supplier_name, supplier_code, gl_date, stockpile_name, account_no, account_name, amounts, description,entry_date,entry_by) "
                    . "VALUES ('Jurnal Memorial', '{$rowNotim->payment_no}', '{$rowNotim->slip_no}', '{$rowNotim->supplier_name}', '{$rowNotim->supplier_code}', '{$rowNotim->gl_date}', '{$rowNotim->stockpile_name}', '{$rowNotim->account_no}', '{$rowNotim->account_name}', '{$rowNotim->amounts}', '{$rowNotim->description}',STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']})";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


            }

        }

        $sql = "DELETE FROM `rpt_upload` WHERE payment_no = '{$adjNo}'";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "DELETE FROM `gl_report` WHERE jurnal_no = '{$adjNo}'";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "DELETE FROM `adjustment_oa_ob` WHERE adj_no = '{$adjNo}'";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Data has successfully deleted.|';
            echo $sql;
        } else {
            $return_value = '|FAIL|Delete Data failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'adjustment_oa_ob_data') {
    // <editor-fold defaultstate="collapsed" desc="adjustment_oa_ob_data">
    $return_value = '';
    //echo 'A';
    $slipNos = '';
    $freightId = '';
    $laborId = '';

    $jurnalDate = $myDatabase->real_escape_string($_POST['jurnalDate']);
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $paymentFrom = $myDatabase->real_escape_string($_POST['paymentFrom']);
    $paymentTo = $myDatabase->real_escape_string($_POST['paymentTo']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $ppn = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn']));
    $pph = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph']));
    $totalPrice = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalPrice']));
    $grandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal']));
    $notes = $myDatabase->real_escape_string($_POST['notes']);


    if (isset($_POST['checkedSlips'])) {
        $checks = $_POST['checkedSlips'];
        for ($i = 0; $i < sizeof($checks); $i++) {
            if ($slipNos == '') {
                $slipNos .= $checks[$i];
            } else {
                $slipNos .= ',' . $checks[$i];
            }
        }
    }

    if ($freightId !== '') {
        $type = 'OA/';
        $laborId = 'NULL';
        $updateProperty = 'adj_oa';
        $accountNo = '210103';
        $accountName = 'Hutang Dagang - Ongkos Angkut';

        $sql = "SELECT * FROM freight WHERE freight_id = {$freightId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result->num_rows == 1) {
            $row = $result->fetch_object();
            $vendor = $row->freight_supplier;
            $vendorCode = $row->freight_code;
        }
    } else if ($laborId !== '') {
        $type = 'OB/';
        $freightId = 'NULL';
        $updateProperty = 'adj_ob';
        $accountNo = '210104';
        $accountName = 'Hutang Dagang - Ongkos Bongkar';

        $sql = "SELECT * FROM labor WHERE labor_id = {$laborId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result->num_rows == 1) {
            $row = $result->fetch_object();
            $vendor = $row->labor_name;
            $vendorCode = $row->labor_code;
        }
    } else {
        $type = '';
        $vendor = '';
        $vendorCode = '';
    }

    $sql = "SELECT * FROM stockpile WHERE stockpile_id = {$stockpileId}";
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    if ($result->num_rows == 1) {
        $row = $result->fetch_object();
        $stockpileName = $row->stockpile_name;

    }

    $sql = "SELECT * FROM account WHERE account_id = {$accountId}";
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    if ($result->num_rows == 1) {
        $row = $result->fetch_object();
        $accountNo2 = $row->account_no;
        $accountName2 = $row->account_name;

    }


    $sql = "select DATE_FORMAT(STR_TO_DATE('{$jurnalDate}', '%d/%m/%Y'), '%y%m') AS slip_prefix from dual";
    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    $rowSlip = $resultSlip->fetch_object();
    $adjYearMonth = $rowSlip->slip_prefix;


    $checkAdjNo = 'JM/JPJ/' . $type . $adjYearMonth;
    /* if($contractSeq != "") {
        $poNo = $checkInvoiceNo .'/'. $contractSeq;
    } else {*/
    $sql = "SELECT adj_no FROM adjustment_oa_ob WHERE adj_no LIKE '{$checkAdjNo}%' ORDER BY adj_id DESC LIMIT 1";
    $resultAdj = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    if ($resultAdj->num_rows == 1) {
        $rowAdj = $resultAdj->fetch_object();
        $splitAdjNo = explode('/', $rowAdj->adj_no);
        $lastExplode = count($splitAdjNo) - 1;
        $nextAdjNo = ((float)$splitAdjNo[$lastExplode]) + 1;
        $adjNo = $checkAdjNo . '/' . $nextAdjNo;
    } else {
        $adjNo = $checkAdjNo . '/1';

    }

    if ($jurnalDate != '' && $adjNo != '' && $accountId != '' && $stockpileId != '' && $totalPrice != '' && $grandTotal != '' && $notes != '') {

        $sql = "INSERT INTO adjustment_oa_ob (adj_no, jurnal_date, account_id, payment_from, payment_to, stockpile_id, freight_id, labor_id, total_price, ppn, pph, grand_total, notes, entry_by, entry_date) VALUES ('{$adjNo}', STR_TO_DATE('{$jurnalDate}', '%d/%m/%Y'), {$accountId}, STR_TO_DATE('{$paymentFrom}', '%d/%m/%Y'), STR_TO_DATE('{$paymentTo}', '%d/%m/%Y'), {$stockpileId}, {$freightId}, {$laborId}, {$totalPrice}, {$ppn}, {$pph}, {$grandTotal}, '{$notes}', {$_SESSION['userId']}, STR_TO_DATE('{$currentDate}', '%d/%m/%Y %H:%i:%s'))";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result !== false) {
            $adjId = $myDatabase->insert_id;
            $return_value = '|OK|adjustment has successfully inserted.||';
            $sql = "UPDATE `transaction` SET {$updateProperty} = {$adjId} WHERE transaction_id IN ({$slipNos})";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($slipNos !== '') {
                $sql1 = "SELECT t.*, ROUND((t.freight_price * t.freight_quantity) ,10) AS total_amount,  COALESCE(ts.amt_claim,0) AS susut, 
						tf.tax_category AS fcategory, tl.tax_category AS lcategory, tf.tax_value AS ftax, tl.tax_value AS ltax,
						af.`account_no` AS faccount, al.`account_no` AS laccount
						FROM TRANSACTION t 
						LEFT JOIN transaction_shrink_weight ts ON ts.transaction_id = t.transaction_id
						LEFT JOIN tax tf ON tf.`tax_id` = t.`fc_tax_id`
						LEFT JOIN tax tl ON tl.`tax_id` = t.`uc_tax_id`
						LEFT JOIN account af ON af.`account_id`= tf.`account_id`
						LEFT JOIN account al ON al.`account_id`= tl.`account_id`
						WHERE t.transaction_id IN ({$slipNos}) ";
                $result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
                if ($result1 !== false && $result1->num_rows > 0) {
                    while ($row1 = $result1->fetch_object()) {

                        if ($updateProperty == 'adj_oa') {
                            if ($row1->fcategory == 1) {
                                $amounta = $row1->total_amount * ((100 - $row1->ftax) / 100);
                                $amountb = $row1->total_amount * ($row1->ftax / 100);
                                $amountc = $row1->susut * ((100 - $row1->ftax) / 100);
                                $amountd = $row1->susut * ($row1->ftax / 100);
                            } else {
                                $amounta = $row1->total_amount;
                                $amounta1 = $row1->total_amount * ($row1->ftax / 100);
                                $amountb = $row1->total_amount * ($row1->ftax / 100);
                                $amountc = $row1->susut;
                                $amountd = $row1->susut * ($row1->ftax / 100);
                            }
                        } else if ($updateProperty == 'adj_ob') {
                            if ($row1->lcategory == 1) {
                                $amounta = $row1->unloading_price * ((100 - $row1->ltax) / 100);
                                $amountb = $row1->unloading_price * ($row1->ltax / 100);
                                $amountc = 0;
                                $amountd = 0;
                            } else {
                                $amounta = $row1->unloading_price;
                                $amountb = $row1->unloading_price * ($row1->ltax / 100);
                                $amountc = 0;
                                $amountd = 0;
                            }
                        } else {
                            $amounta = 0;
                            $amountb = 0;
                            $amountc = 0;
                            $amountd = 0;
                        }

                        if ($freightId !== 'NULL') {
                            $sqla = "SELECT * FROM account WHERE account_type IN (2) AND account_no IN ({$accountNo},{$row1->faccount}) ";
                            $resulta = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);
                            if ($resulta !== false && $resulta->num_rows > 0) {
                                while ($rowa = $resulta->fetch_object()) {
                                    if ($rowa->account_no == $accountNo) {
                                        $sql = "INSERT INTO `rpt_upload` (gl_module, payment_no, slip_no, supplier_name, supplier_code, gl_date, stockpile_name, account_no, account_name, amounts, description,entry_date,entry_by) "
                                            . "VALUES ('Jurnal Memorial', '{$adjNo}', '{$row1->slip_no}', '{$vendor}', '{$vendorCode}', STR_TO_DATE('{$jurnalDate}', '%d/%m/%Y'), '{$stockpileName}', '{$rowa->account_no}', '{$rowa->account_name}', '{$amounta}', '{$notes}',STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']})";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        if ($result !== false) {
                                            $rpt_upload_id = $myDatabase->insert_id;
                                            insertReportGL_JurnalMemorial($myDatabase, 'JURNAL MEMORIAL', "NULL", "NULL", "NULL", "NULL", "NULL", $rpt_upload_id);
                                        }
                                    } else if ($rowa->account_no == $row1->faccount) {
                                        $sql = "INSERT INTO `rpt_upload` (gl_module, payment_no, slip_no, supplier_name, supplier_code, gl_date, stockpile_name, account_no, account_name, amounts, description,entry_date,entry_by) "
                                            . "VALUES ('Jurnal Memorial', '{$adjNo}', '{$row1->slip_no}', '{$vendor}', '{$vendorCode}', STR_TO_DATE('{$jurnalDate}', '%d/%m/%Y'), '{$stockpileName}', '{$rowa->account_no}', '{$rowa->account_name}', '{$amountb}', '{$notes}',STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']})";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        if ($result !== false) {
                                            $rpt_upload_id = $myDatabase->insert_id;
                                            insertReportGL_JurnalMemorial($myDatabase, 'JURNAL MEMORIAL', "NULL", "NULL", "NULL", "NULL", "NULL", $rpt_upload_id);
                                        }
                                    }
                                }
                            }
                        }
                        if ($freightId !== 'NULL' && $row1->susut > 0) {
                            $sqla = "SELECT * FROM account WHERE account_type IN (2) AND account_no IN ({$accountNo},{$row1->faccount}) ";
                            $resulta = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);
                            if ($resulta !== false && $resulta->num_rows > 0) {
                                while ($rowa = $resulta->fetch_object()) {
                                    if ($rowa->account_no == $accountNo) {
                                        $amountc1 = $amountc * -1;
                                        $sql = "INSERT INTO `rpt_upload` (gl_module, payment_no, slip_no, supplier_name, supplier_code, gl_date, stockpile_name, account_no, account_name, amounts, description,entry_date,entry_by) "
                                            . "VALUES ('Jurnal Memorial', '{$adjNo}', '{$row1->slip_no}', '{$vendor}', '{$vendorCode}', STR_TO_DATE('{$jurnalDate}', '%d/%m/%Y'), '{$stockpileName}', '{$rowa->account_no}', '{$rowa->account_name}', '{$amountc1}', '{$notes}',STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']})";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        if ($result !== false) {
                                            $rpt_upload_id = $myDatabase->insert_id;
                                            insertReportGL_JurnalMemorial($myDatabase, 'JURNAL MEMORIAL', "NULL", "NULL", "NULL", "NULL", "NULL", $rpt_upload_id);
                                        }
                                    } else if ($rowa->account_no == $row1->faccount) {
                                        $amountd1 = $amountd * -1;
                                        $sql = "INSERT INTO `rpt_upload` (gl_module, payment_no, slip_no, supplier_name, supplier_code, gl_date, stockpile_name, account_no, account_name, amounts, description,entry_date,entry_by) "
                                            . "VALUES ('Jurnal Memorial', '{$adjNo}', '{$row1->slip_no}', '{$vendor}', '{$vendorCode}', STR_TO_DATE('{$jurnalDate}', '%d/%m/%Y'), '{$stockpileName}', '{$rowa->account_no}', '{$rowa->account_name}', '{$amountd1}', '{$notes}',STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']})";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        if ($result !== false) {
                                            $rpt_upload_id = $myDatabase->insert_id;
                                            insertReportGL_JurnalMemorial($myDatabase, 'JURNAL MEMORIAL', "NULL", "NULL", "NULL", "NULL", "NULL", $rpt_upload_id);
                                        }
                                    }
                                }
                            }
                        }
                        if ($laborId !== 'NULL') {
                            if ($row1->laccount == '') {
                                $laccount = 0;
                            }
                            $sqla = "SELECT * FROM account WHERE account_type IN (3) AND account_no IN ({$accountNo},{$laccount}) ";
                            $resulta = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);
                            if ($resulta !== false && $resulta->num_rows > 0) {
                                while ($rowa = $resulta->fetch_object()) {
                                    if ($rowa->account_no == 210104) {
                                        $sql = "INSERT INTO `rpt_upload` (gl_module, payment_no, slip_no, supplier_name, supplier_code, gl_date, stockpile_name, account_no, account_name, amounts, description,entry_date,entry_by) "
                                            . "VALUES ('Jurnal Memorial', '{$adjNo}', '{$row1->slip_no}', '{$vendor}', '{$vendorCode}', STR_TO_DATE('{$jurnalDate}', '%d/%m/%Y'), '{$stockpileName}', '{$rowa->account_no}', '{$rowa->account_name}', '{$amounta}', '{$notes}',STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']})";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        if ($result !== false) {
                                            echo $sql;
                                            $rpt_upload_id = $myDatabase->insert_id;
                                            insertReportGL_JurnalMemorial($myDatabase, 'JURNAL MEMORIAL', "NULL", "NULL", "NULL", "NULL", "NULL", $rpt_upload_id);
                                        }
                                    } else if ($rowa->account_no == $laccount) {
                                        $sql = "INSERT INTO `rpt_upload` (gl_module, payment_no, slip_no, supplier_name, supplier_code, gl_date, stockpile_name, account_no, account_name, amounts, description,entry_date,entry_by) "
                                            . "VALUES ('Jurnal Memorial', '{$adjNo}', '{$row1->slip_no}', '{$vendor}', '{$vendorCode}', STR_TO_DATE('{$jurnalDate}', '%d/%m/%Y'), '{$stockpileName}', '{$rowa->account_no}', '{$rowa->account_name}', '{$amountb}', '{$notes}',STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']})";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        if ($result !== false) {
                                            $rpt_upload_id = $myDatabase->insert_id;
                                            insertReportGL_JurnalMemorial($myDatabase, 'JURNAL MEMORIAL', "NULL", "NULL", "NULL", "NULL", "NULL", $rpt_upload_id);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if ($accountId !== '') {
                $grandTotal2 = $totalPrice * -1;
                $sql = "INSERT INTO `rpt_upload` (gl_module, payment_no, slip_no, supplier_name, supplier_code, gl_date, stockpile_name, account_no, account_name, amounts, description,entry_date,entry_by) "
                    . "VALUES ('Jurnal Memorial', '{$adjNo}', '-', '{$vendor}', '{$vendorCode}', STR_TO_DATE('{$jurnalDate}', '%d/%m/%Y'), '{$stockpileName}', '{$accountNo2}', '{$accountName2}', '{$grandTotal2}', '{$notes}',STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']})";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if ($result !== false) {
                    $rpt_upload_id = $myDatabase->insert_id;
                    insertReportGL_JurnalMemorial($myDatabase, 'JURNAL MEMORIAL', "NULL", "NULL", "NULL", "NULL", "NULL", $rpt_upload_id);
                }
            }
        } else {
            $return_value = '|FAIL|Failed insert Adjustment.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    echo $return_value;
    // </editor-fold defaultstate="collapsed" desc="adjustment_oa_ob_data">
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'payment_data_notim') {
        // <editor-fold defaultstate="collapsed" desc="payment_data">
    
        $return_value = '';
        $boolContinue = false;
        $boolBank = false;
        $boolUpdateTransaction = false;
        $boolUpdateShipment = false;
        $boolContinue2 = true;
        $tempStamp = '';
        $periodPaymentFrom='';
        $periodPaymentTo='';
        $paymentId = '';
        $amount2 = 0;
        // <editor-fold defaultstate="collapsed" desc="POST variables">
        $paymentMethod = $myDatabase->real_escape_string($_POST['paymentMethod']);
        $paymentDate = $myDatabase->real_escape_string($_POST['paymentDate']);
        $paymentType = $myDatabase->real_escape_string($_POST['paymentType']);
        $payment_type = $myDatabase->real_escape_string($_POST['payment_type']);
        $bankId = $myDatabase->real_escape_string($_POST['bankId']);
        $paymentFor = $myDatabase->real_escape_string($_POST['paymentFor']);
        $accountId = $myDatabase->real_escape_string($_POST['accountId']);
        $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
        $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
        $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
        $stockpileContractId2 = $myDatabase->real_escape_string($_POST['stockpileContractId2']);
        $stockpileContractId3 = $myDatabase->real_escape_string($_POST['stockpileContractId3']);
        $stockpileId1 = $myDatabase->real_escape_string($_POST['stockpileCurahId']);
        $vendorId1 = $myDatabase->real_escape_string($_POST['invoiceVendorCurahId']);
        $stockpileId2 = $myDatabase->real_escape_string($_POST['stockpileOAId']);
        $freightId = $myDatabase->real_escape_string($_POST['invoiceFreightId']);
        $stockpileId4 = $myDatabase->real_escape_string($_POST['stockpileHandlingId']);
        $vendorHandlingId = $myDatabase->real_escape_string($_POST['invoiceVendorHandlingId']);
        $stockpileId3 = $myDatabase->real_escape_string($_POST['stockpileOBId']);
        $laborId = $myDatabase->real_escape_string($_POST['invoiceLaborId']);
        $customerId = $myDatabase->real_escape_string($_POST['customerId']);
        $salesId = $myDatabase->real_escape_string($_POST['salesId']);
        $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
        $shipmentId1 = $myDatabase->real_escape_string($_POST['shipmentId1']);
        $contractId = $myDatabase->real_escape_string($_POST['contractId']);
        $generalVendorId = $myDatabase->real_escape_string($_POST['gvId']);
        $gvEmail = $myDatabase->real_escape_string($_POST['gvEmail']);

        $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
        $bankCurrencyId = $myDatabase->real_escape_string($_POST['bankCurrencyId']);
        $journalCurrencyId = $myDatabase->real_escape_string($_POST['journalCurrencyId']);
        $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
        $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
        $tempAmount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
        $originalAmount = $amount;

        $totalDpp = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalDpp']));
		$totalDppShrink = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalDppShrink']));

        $totalAmount = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalAmount']));
        $totalPrice = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalPrice']));
        $downPayment = str_replace(",", "", $myDatabase->real_escape_string($_POST['downPayment']));
        $grandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal']));
        $ppn = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn']));
        $pph = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph']));

        $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
        $qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty']));
        $termin = str_replace(",", "", $myDatabase->real_escape_string($_POST['termin']));
        $fc_ppn_dp = str_replace(",", "", $myDatabase->real_escape_string($_POST['fc_ppn_dp']));
        $ppn1 = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn1']));
        $ppn2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn2']));
        $pph1 = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph1']));
        $ppnInvoice = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppnInvoice']));
        $pphInvoice = str_replace(",", "", $myDatabase->real_escape_string($_POST['pphInvoice']));
        $notes = $myDatabase->real_escape_string($_POST['paymentNotes']);
        $remarks = $myDatabase->real_escape_string($_POST['remarks']);
        $remarks2 = $myDatabase->real_escape_string($_POST['remarks2']);
        $paymentLocation = $myDatabase->real_escape_string($_POST['paymentLocation']);
        $stockpileLocation = $myDatabase->real_escape_string($_POST['stockpileLocation']);
        
        $chequeNo = $myDatabase->real_escape_string($_POST['chequeNo']);
        $chequeNo1 = $myDatabase->real_escape_string($_POST['chequeNo1']);

        $invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
        $invoiceId = $myDatabase->real_escape_string($_POST['invoiceId']);
        $taxInvoice = $myDatabase->real_escape_string($_POST['taxInvoice']);
        $invoiceNo = $myDatabase->real_escape_string($_POST['invoiceNo']);

        $paymentCashId = $paymentFor;
        $slipNos = "";
        $shipmentNos = "";
        
        $stockpileIdFcDp = $myDatabase->real_escape_string($_POST['stockpileIdFcDp']);
        $stockpileOAId = $myDatabase->real_escape_string($_POST['stockpileOAId']);
        $freightIdFcDp = $myDatabase->real_escape_string($_POST['freightIdFcDp']);
        $invoiceFreightId = $myDatabase->real_escape_string($_POST['invoiceFreightId']);  
        // $bankIdDp = $myDatabase->real_escape_string($_POST['bankIdDp']);
        $FreightbankDp = $myDatabase->real_escape_string($_POST['freightbankDp']);
    
        $vendorBankId = $myDatabase->real_escape_string($_POST['vendorBankId']);
        $stockpileVhDp = $myDatabase->real_escape_string($_POST['stockpileVhDp']);
        $vendorHandlingDp = $myDatabase->real_escape_string($_POST['vendorHandlingDp']);
        $vendorHandlingBankDp = $myDatabase->real_escape_string($_POST['vendorHandlingBankDp']);
        $vendorHandlingBankId = $myDatabase->real_escape_string($_POST['vendorHandlingBankId']);
        $freightBankId = $myDatabase->real_escape_string($_POST['freightBankId']);
        $stockpileLaborDp = $myDatabase->real_escape_string($_POST['stockpileLaborDp']);
        $laborDp = $myDatabase->real_escape_string($_POST['laborDp']);
        $laborBankDp = $myDatabase->real_escape_string($_POST['laborBankDp']);
        $laborBankId = $myDatabase->real_escape_string($_POST['laborBankId']);
        $gvBankId = $myDatabase->real_escape_string($_POST['gvBankId']);
        // $curahBankId = $myDatabase->real_escape_string($_POST['curahBankId']);
        $curahBankDp = $myDatabase->real_escape_string($_POST['curahBankDp']);
        $gvPCBankId = $myDatabase->real_escape_string($_POST['gvPCBankId']);
        $paymentFrom = $myDatabase->real_escape_string($_POST['paymentFrom']);
        $paymentFrom1 = $myDatabase->real_escape_string($_POST['paymentFrom1']);
        $paymentFromUP = $myDatabase->real_escape_string($_POST['paymentFromUP']);
        $paymentFromHP = $myDatabase->real_escape_string($_POST['paymentFromHP']);
        $paymentTo = $myDatabase->real_escape_string($_POST['paymentTo']);
        $paymentTo1 = $myDatabase->real_escape_string($_POST['paymentTo1']);
        $paymentToUP = $myDatabase->real_escape_string($_POST['paymentToUP']);
        $paymentToHP = $myDatabase->real_escape_string($_POST['paymentToHP']);
        $invoiceBankId = $myDatabase->real_escape_string($_POST['invoiceBankId']);
        $invoiceCurrencyId = $myDatabase->real_escape_string($_POST['invoiceCurrencyId']);
        $invoiceKurs = $myDatabase->real_escape_string($_POST['invoiceKurs']);
        $idPP = $myDatabase->real_escape_string($_POST['idPP']);
        $pengajuanInvId = $myDatabase->real_escape_string($_POST['inv_notim_id']);
        $idPG = $myDatabase->real_escape_string($_POST['idPG']);

        $priceDp = $myDatabase->real_escape_string($_POST['priceDp']);  
        $qtyDp = $myDatabase->real_escape_string($_POST['qtyDp']);

        $invoiceOAId = $myDatabase->real_escape_string($_POST['invoiceOAId']);
        $invoiceHandlingId = $myDatabase->real_escape_string($_POST['invoiceHandlingId']);
        $invoiceVendorHandlingId = $myDatabase->real_escape_string($_POST['invoiceVendorHandlingId']);
        $invoiceOBId = $myDatabase->real_escape_string($_POST['invoiceOBId']);
        $invoiceLaborId = $myDatabase->real_escape_string($_POST['invoiceLaborId']);
        $stockpileOBId = $myDatabase->real_escape_string($_POST['stockpileOBId']);
        $handlingBankDp = $myDatabase->real_escape_string($_POST['handlingBankDp']);
        $invoiceCurahId = $myDatabase->real_escape_string($_POST['invoiceCurahId']);
        $invoiceVendorCurahId = $myDatabase->real_escape_string($_POST['invoiceVendorCurahId']);
        $invoiceFreightText = $myDatabase->real_escape_string($_POST['invoiceFreightText']);
        $invoiceOAIdTest = $myDatabase->real_escape_string($_POST['invoiceOAIdTest']);
        $internalTF = $myDatabase->real_escape_string($_POST['internalTF']);
        $gv_email2 = $myDatabase->real_escape_string($_POST['gv_email2']);
        $typeOKS = $myDatabase->real_escape_string($_POST['typeOKS']);
        // $chequeNo1 = $myDatabase->real_escape_string($_POST['chequeNo1']);

        if($internalTF != '' || $internalTF != 0){
            $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount1']));
            $generalVendorId = NULL;
        }
      if($invoiceOAId == '') {
                $invoiceOAId = 0;
            }
        if($invoiceHandlingId == '') {
                $invoiceHandlingId = 0;
            }
            
            if($invoiceOBId == '') {
                $invoiceOBId = 0;
            }
            
            if($invoiceCurahId == '') {
                $invoiceCurahId = 0;
            }
    
        if($stockpileContractId2 == '' && $stockpileContractId3 == ''){
            $stockpileContract_Id = 'NULL';
        }elseif($stockpileContractId2 == '' && $stockpileContractId3 != ''){
            $stockpileContract_Id = $stockpileContractId3;
        }elseif($stockpileContractId3 == '' && $stockpileContractId2 != ''){
            $stockpileContract_Id = $stockpileContractId2;
        }
    
        if($shipmentId == '' && $shipmentId1 == ''){
            $shipment_Id = 'NULL';
        }elseif($shipmentId == '' && $shipmentId1 != ''){
            $shipment_Id = $shipmentId1;
        }elseif($shipmentId != '' && $shipmentId1 == ''){
            $shipment_Id = $shipmentId;
        }
    
        if($invoiceId == '') {
                $invoiceId = 'NULL';
            }
        if($vendorHandlingId == '' || $vendorHandlingId == 0) {
                $vendorHandlingId = 'NULL';
            }
        if($ppn12 == '') {
                $ppn12 = 0;
            }
        if($pph12 == '') {
                $pph12 = 0;
            }
        if($paymentCashId != 10 ) {
                $paymentCashId = 'NULL';
            }
            
        if($currencyId == 0 ) {
                $currencyId = 1;
            }
        if($gvEmail == ''){
            $gvEmail = NULL;
        }
    
        $sqlBankAcc = "SELECT account_id FROM bank WHERE bank_id = {$bankId}";
                        $resultBankAcc = $myDatabase->query($sqlBankAcc, MYSQLI_STORE_RESULT);
                        if($resultBankAcc->num_rows == 1) {
                            $rowBankAcc = $resultBankAcc->fetch_object();
    
                            if($rowBankAcc->account_id !== $accountId){
                                $boolBank = true;
                            }
                        }	
            
        $vendorBank = 'NULL';
    

        if($paymentFor == 0) {
            // PKS Kontrak
            if($stockpileId != '' && $vendorId != '' && $stockpileContractId != '' && $vendorBankId != '' && $grandTotal != 0) {
                if($paymentMethod == 1) {
                    if($ppn > 0) {
                        if($taxInvoice != '') {
                            $boolContinue = true;
                        }
                    } else {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                    $pph = 0;
                    $ppn = $ppn2;
                    $amount = $amount + $ppn;
                    $originalAmount = $originalAmount + $ppn;
                    if($ppn2 == '') {
                        $ppn = 0;
                    }
                }
                $salesId = 'NULL';
                $freightId = 'NULL';
                $laborId = 'NULL';
                $vendorId1 = 'NULL';
                $qty = 'NULL';
                $price = 'NULL';
                $generalVendorId = 'NULL';
                $vendorBank = $vendorBankId;
            }
        } else if($paymentFor == 1) {
          $periodPaymentFrom=$paymentFrom1;
          $periodPaymentTo=$paymentTo1;
          $chequeNo = $chequeNo1;
		  $amount2 = $grandTotal;
            if($paymentType == 1) {
                // Sales
                      if($customerId != '' && $salesId != '') {
                    $boolContinue = true;
                    $stockpileContractId = 'NULL';
                    $freightId = 'NULL';
                    $laborId = 'NULL';
                    $vendorId1 = 'NULL';
                    $qty = 'NULL';
                    $price = 'NULL';
                    $generalVendorId = 'NULL';
    
                    if($paymentMethod == 2) {
    
                        $ppn = 0;
    
                        $pph = 0;
                    }
                }
            } else if($paymentType == 2) {
                // PKS Curah
				$amount2 = $grandTotal;
              if($paymentMethod == 1 && $stockpileId1 != '' && $vendorId1 != '' && $grandTotal >= 0 && $invoiceBankId != '') {
                $invoiceId = 'NULL';
    
                    if($ppn > 0) {
                        if($taxInvoice != '') {
                            $boolContinue = true;
                        }
                    } else {
                        $boolContinue = true;
                    }
                    $salesId = 'NULL';
                    $stockpileContractId = 'NULL';
                    $freightId = 'NULL';
                    $laborId = 'NULL';
                    $qty = $qtyDp;
                    $price = $priceDp;
                    $termin = 100;
                    $vendorBank = $curahBankDp;
                    $generalVendorId = 'NULL';
                   // $amount = $grandTotal;
				   $amount = $totalDpp;
                    $originalAmount = $grandTotal;
                    $pph = $pphInvoice;
                    $ppn = $ppnInvoice;
                } elseif($paymentMethod == 2 && $stockpileId1 != '' && $vendorId1 != '') {
                    $boolContinue = true;
                    $salesId = 'NULL';
                    $stockpileContractId = 'NULL';
                    $freightId = 'NULL';
                    $laborId = 'NULL';
                    $qty = $qtyDp;
                    $price = $priceDp;
                    $termin = $termin;
                    $invoiceId = 'NULL';
                    $vendorBank = $curahBankDp;
                    $generalVendorId = 'NULL';
                    $ppn = 0;
                    $pph = 0;
                }
            }
        } else if($paymentFor == 9) {
            // HC payment
            $periodPaymentFrom=$paymentFromHP;
            $periodPaymentTo=$paymentToHP;
            $chequeNo = $chequeNo1;
			$amount2 = $grandTotal;
			
            if($paymentMethod == 2 && $invoiceHandlingId != '' && $bankId != ''  && $stockpileId4 != '') {
                $boolContinue = true;
                $stockpileContractId = 'NULL';
                $salesId = 'NULL';
                $laborId = 'NULL';
                $vendorId1 = 'NULL';
                $freightId = 'NULL';
                $vendorBank = $handlingBankDp;
                $vendorHandlingId = $invoiceVendorHandlingId;
                
                $ppn = $ppnInvoice;
                $pph = $pphInvoice;
                $stockpileLocation = $stockpileId4;
                $qty = $qtyDp;
                $price = $priceDp;
                $termin = $termin;
                $amountConverted = $totalDpp;
                $originalAmount = $grandTotal;
                $amount = $totalDpp;
                $generalVendorId = 'NULL';
                $pphJournal = 'NULL';
                $invoiceId = 'NULL';
                
                
    
            } elseif($paymentMethod == 1 && $stockpileId4 != '' && $invoiceVendorHandlingId != '' && $grandTotal >= 0 && $invoiceBankId != '') {
                if($ppn > 0) {
                    if($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
               
				$amount2 = $grandTotal;
                $stockpileContractId = 'NULL';
                $salesId = 'NULL';
                $laborId = 'NULL';
                $freightId = 'NULL';
                $vendorId1 = 'NULL';
                $qty = $qtyDp;
                $price = $priceDp;
                $termin = 100;
                $vendorBank = $invoiceBankId;
                
                //$shipment_Id = 'NULL';
                //$stockpileContract_Id = 'NULL';
                //$shipmentId1 = 'NULL';
                //$stockpileContractId3 = 'NULL';
                $generalVendorId = 'NULL';
                $amount = $totalDpp;
                $originalAmount = $grandTotal;
                $pph = $pphInvoice;
                $ppn = $ppnInvoice;
            }
        }else if($paymentFor == 2) { 
            // FC payment
            $periodPaymentFrom=$paymentFrom;
            $periodPaymentTo=$paymentTo;
			$amount2 = $grandTotal;

            // echo " A " . $invoiceFreightId . ' | ' . $bankId . ' | ' . $stockpileOAId ;
            if($paymentMethod == 2 && $invoiceFreightId != '' && $bankId != '' && $stockpileOAId != '') { //Freight Dp && $stockpileIdFcDp != '' && $freightIdFcDp != '' && $freightBankDp != '' && $grandTotal != 0
				$amount2 = $grandTotal;
                $chequeNo = $chequeNo1;
                $boolContinue = true;
                $stockpileContractId = 'NULL';
                $invoiceId = NULL;
                $salesId = 'NULL';
                $laborId = 'NULL';
                $vendorId1 = 'NULL';
                $qty = $qtyDp;
                $price = $priceDp;
                $termin = $termin;
                $freightId = $invoiceFreightId;
                $vendorBank = $FreightbankDp;
                $stockpileLocation = $stockpileOAId;
                $ppn = $ppnInvoice;
                $pph = $pphInvoice;
                $generalVendorId = 'NULL';
                $vendorHandlingId = 'NULL';
                $pphJournal = 'NULL';
                $amountConverted = $totalDppShrink;
                $originalAmount = $grandTotal;
                $amount = $totalDppShrink;
    
            } elseif($paymentMethod == 1 && $stockpileId2 == 10 && $freightId == 26 && $freightBankId != '') {
                $boolContinue = true;
                $ppn = 0;
                $pph = 0;
                $freightId = 26;
                $stockpileContractId = 'NULL';
                $salesId = 'NULL';
                $laborId = 'NULL';
                $vendorId1 = 'NULL';
                $qty = 'NULL';
                $price = 'NULL';
                $generalVendorId = 'NULL';
                $vendorBank = $freightBankId;
                $totalPrice = $grandTotal;
          }elseif($paymentMethod == 1 && $stockpileId2 != '' && $freightId != '' && $grandTotal >= 0 && $invoiceBankId != '') { //payment
              
                $pph = $pphInvoice;
                $ppn = $ppnInvoice;
                if($ppn > 0) {
                    if($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
                $stockpileContractId = 'NULL';
                $salesId = 'NULL';
                $laborId = 'NULL';
                $vendorId1 = 'NULL';
                $qty = $qtyDp;
                $price = $priceDp;
                $termin = 100;
                $vendorBank = $invoiceBankId;
                $generalVendorId = 'NULL';
                $amount = $totalDppShrink;
                $originalAmount = $grandTotal;
                $chequeNo = $chequeNo1;

            }
        } else if($paymentFor == 3) {
            // UC payment
            $periodPaymentFrom=$paymentFromUP;
            $periodPaymentTo=$paymentToUP;
           $amount2 = $grandTotal;
		   
            if($paymentMethod == 1 && $stockpileId3 != '' && $laborId != '' && $grandTotal >= 0 && $invoiceBankId != '')  {
                if($ppn > 0) {
                    if($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
                $chequeNo = $chequeNo1;
                $stockpileContractId = 'NULL';
                $salesId = 'NULL';
                $freightId = 'NULL';
                $vendorId1 = 'NULL';
                $qty = $qtyDp;
                $price = $priceDp;
                $termin = 100;
                $vendorBank = $invoiceBankId;
                $generalVendorId = 'NULL';
                $amount = $totalDpp;
                $originalAmount = $grandTotal;
                $pph = $pphInvoice;
                $ppn = $ppnInvoice;
                $invoiceId = 'NULL';
				if($qty == ''){
					$qty = 0;
				}
				$amount2 = $grandTotal;
    
            } elseif($paymentMethod == 2 && $invoiceLaborId != '' && $bankId != '' && $stockpileOBId != '') {
                $invoiceId = 'NULL';
                $boolContinue = true;
                $stockpileContractId = 'NULL';
                $salesId = 'NULL';
                $freightId = 'NULL';
                $vendorId1 = 'NULL';
                //$shipmentId = 'NULL';
                $qty = $qtyDp;
                $price = $priceDp;
                $termin = $termin;
                $laborId = $invoiceLaborId;
                $vendorBank = $laborBankDp;
                $stockpileLocation = $stockpileOBId;
                $ppn = $ppnInvoice;
                $pph = $pphInvoice;
                $generalVendorId = 'NULL';
                $vendorHandlingId = 'NULL';
                $pphJournal = 'NULL';
                $amountConverted = $totalDpp;
                $originalAmount = $totalDpp;
                $amount = $totalDpp;
                $chequeNo = $chequeNo1;
				$amount2 = $grandTotal;

            }
        } else {
            $boolContinue = true;
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $freightId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
            if($paymentFor == 8){ //INVOICE 
        
                $qty = $qtyDp;
                $price = $priceDp;
                $vendorBank = $gvBankId;
                $amount = $grandTotal;
                $originalAmount = $grandTotal;
                $tempAmount = $amount;
                $termin = 0;
                $ppn = $ppnInvoice;
                $pph = $pphInvoice;
                $chequeNo = $chequeNo1;
    
            }else if($paymentFor == 10){
                $vendorBank = $gvPCBankId;
            }else if($paymentFor == 7){ //INTERNAL TRANSFER
                $amountConverted = $amount;
                $originalAmount = $amount;
                $originalAmountConverted = $amount;
                $amountJournal = $amount;
                $invoiceId = 'NULL';
                $invoiceDate = $paymentDate;
                $termin = 100;
                $tempAmount = $amount;
            }
    
            if($generalVendorId == '') {
                $generalVendorId = 'NULL';
            }
             if($price == '') {
                $price = 'NULL';
            }
            if($qty == '') {
                $qty = 'NULL';
            }

             if($paymentType == 1 && ($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 7 || $paymentFor == 8 || $paymentFor == 10)) {
                $ppn1 = $ppn1;
                $pph1 = $pph1;
                $grandTotal = $amount;
                $totalPrice = $amount;
              

    
             }else if($paymentType == 1) {
    
                $ppn1 = 0;
                $pph1 = 0;
                $grandTotal = $amount;
            }
            if($paymentFor == 7 || $paymentMethod == 2) {
                $ppn = 0;
                $pph = 0;

            }
    
           if($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 8 || $paymentFor == 10) {
                if(is_numeric($ppn1)) {
                    $ppn = $ppn1;
                } else {
                    $ppn = 0;
                }
    
                if(is_numeric($pph1)) {
                    $pph = $pph1;
                } else {
                    $pph = 0;
                }

            }
        }
    if ($_POST['_method'] == 'INSERT') {
        if($boolBank){
            if($paymentDate != '' && $paymentType != '' && $paymentMethod != '' && $accountId != '' && $bankId != '' &&
                    $currencyId != ''  /*&& $boolContinue*/) {
            if($paymentMethod == 1 && $paymentType == 2 && ($paymentFor == 0 || $paymentFor == 1 || $paymentFor == 2 || $paymentFor == 3 || $paymentFor == 9)) {
                    // <editor-fold defaultstate="collapsed" desc="PAYMENT - OUT - PKS Curah/FC/UC - UPDATE TRANSACTION">
                    if($amount2 < $grandTotal || ($amount2 != 0 && $amount2 > $grandTotal)) {
                        $boolContinue2 = false;
                    } else {
                        $boolUpdateTransaction = true;
                        if($paymentFor == 0) {
                            $whereProperty = " AND stockpile_contract_id = {$stockpileContractId} ";
                            $updateProperty = " payment_id ";
    
                            $sql = "SELECT GROUP_CONCAT(transaction_id) AS transaction_ids "
                                    . "FROM `transaction` "
                                    . "WHERE stockpile_contract_id = {$stockpileContractId} ";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $slipNos = $row->transaction_id;
                            }
                        } else if($paymentFor == 1) {
                            $whereProperty = " AND vendor_id = {$vendorId1} ";
                            $updateProperty = " payment_id ";
                            $invoiceId = 'NULL';
    
                        } else if($paymentFor == 2) {
                            $whereProperty = " AND p.freight_id = {$freightId}";
                            $updateProperty = " fc_payment_id ";
                            $invoiceId = 'NULL';
                        } else if($paymentFor == 9) {
                            $whereProperty = " AND p.vendor_handling_id = {$vendorHandlingId} ";
                            $updateProperty = " hc_payment_id ";
                            $invoiceId = 'NULL';
    
                        } else if($paymentFor == 3) {
                            $whereProperty = " AND labor_id = {$laborId} ";
                            $updateProperty = " uc_payment_id ";
                            $invoiceId = 'NULL';
    
                        }
    
                        if (isset($_POST['checkedSlips'])) {
                            $checks = $_POST['checkedSlips'];
                            for ($i = 0; $i < sizeof($checks); $i++) {
                                if($slipNos == '') {
                                    $slipNos .= $checks[$i];
                                } else {
                                    $slipNos .= ','. $checks[$i];
                                }
                            }
                        }
    
                        if($grandTotal <= 0) {
                                
                                $amount = $grandTotal;
        
                                $sql = "SELECT p.*, f.pph
                                        FROM `payment` p
                                        LEFT JOIN freight f ON f.`freight_id` = p.`freight_id`
                                        WHERE p.payment_type = {$paymentType}
                                        AND p.payment_method = 2 AND p.payment_status = 0
                                        {$whereProperty}
                                        AND p.amount_converted > 0
                                        AND p.company_id = {$_SESSION['companyId']}
                                        ORDER BY p.payment_id ASC";

                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if($result !== false && $result->num_rows > 0) {
                                    $balanceLeft = $totalPrice;
                                    while($row = $result->fetch_object()) {
                                            $dp = $row->amount_converted;
                                            $availableDP = $dp - $balanceLeft;
                                        if($availableDP > 0) {
                                            $sql2 = "UPDATE payment SET amount = ". $availableDP/$row->exchange_rate .", amount_converted = ". $availableDP ." WHERE payment_id = {$row->payment_id}";
                                            $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                                        //  break;
                                        } elseif($availableDP <= 0) {
                                            $balanceLeft = $balanceLeft - $row->amount_converted;
                                            $sql2 = "UPDATE payment SET amount = 0, amount_converted = 0, pph_amount = 0  WHERE payment_id = {$row->payment_id}";
                                            $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                                        }
                                    }
                                }
                        } elseif($paymentFor == 0) {
                            ///if($freightId != 312 && $stockpileLocation != 8){
                            $amount = $grandTotal;
                                $sql = "UPDATE `payment` p SET p.amount = 0, p.amount_converted = 0
                                        WHERE p.payment_type = {$paymentType}
                                        AND p.payment_method = 2
                                        {$whereProperty}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                // echo " Y1 ". $sql;
                            //}
                        } //edited by alan
                        
                    }
             
                    // </editor-fold>
                }elseif($paymentMethod == 1 && $paymentType == 1 && ($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 8)) {
                    echo "Y2";
                    // <editor-fold defaultstate="collapsed" desc="PAYMENT - IN - Other with GV">
                    if($invoiceId != 'NULL') {
                        $sql = "SELECT p.*, b.currency_id AS b_currency_id
                                FROM `payment` p
                                INNER JOIN bank b
                                ON b.bank_id = p.bank_id
                                WHERE p.payment_type = {$paymentType}
                                AND p.payment_method = 2 AND p.payment_status = 0
                                AND p.invoice_id = {$invoiceId}
                                AND p.amount_converted > 0
                                AND p.company_id = {$_SESSION['companyId']}
                                ORDER BY p.payment_id ASC";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if($result !== false && $result->num_rows > 0) {
                            while($row = $result->fetch_object()) {
                                if($row->b_currency_id == $bankCurrencyId && $bankCurrencyId == $journalCurrencyId) {
                                    // IDR - IDR - IDR
                                    $addedAmount = $row->amount;
                                } elseif($row->b_currency_id != $bankCurrencyId && $bankCurrencyId == $journalCurrencyId) {
                                    // USD - IDR - IDR
                                    $addedAmount = $row->amount * $row->exchange_rate;
                                } elseif($row->b_currency_id == $bankCurrencyId && $bankCurrencyId != $journalCurrencyId) {
                                    // USD - USD - IDR
                                    $addedAmount = $row->amount;
                                } elseif($row->b_currency_id != $bankCurrencyId && $bankCurrencyId != $journalCurrencyId) {
                                    // IDR - USD - IDR
                                    $addedAmount = $row->amount / $row->exchange_rate;
                                }
                                $sql2 = "UPDATE payment SET amount = 0, amount_converted = 0 WHERE payment_id = {$row->payment_id}";
                                $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                            }
                        }
    
                        $amount = $amount + $addedAmount;
                    }
    
                    // </editor-fold>
                } elseif($paymentMethod == 1 && $paymentType == 2 && ($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 8)) {
                    // echo "Y3";
                    // <editor-fold defaultstate="collapsed" desc="PAYMENT - OUT - Other with GV">
                    if($generalVendorId != 'NULL') {
                        $sql = "SELECT p.*, b.currency_id AS b_currency_id
                                FROM `payment` p
                                INNER JOIN bank b
                                ON b.bank_id = p.bank_id
                                WHERE p.payment_type = {$paymentType}
                                AND p.payment_method = 2 AND p.payment_status = 0
                                AND p.invoice_id = {$invoiceId}
                                AND p.amount_converted > 0
                                AND p.company_id = {$_SESSION['companyId']}
                                ORDER BY p.payment_id ASC";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if($result !== false && $result->num_rows > 0) {
                            while($row = $result->fetch_object()) {
                                if($row->b_currency_id == $bankCurrencyId && $bankCurrencyId == $journalCurrencyId) {
                                    // IDR - IDR - IDR
                                    //$addedAmount = $row->amount;
                                    $addedAmount = 0;
                                } elseif($row->b_currency_id != $bankCurrencyId && $bankCurrencyId == $journalCurrencyId) {
                                    // USD - IDR - IDR
                                    //$addedAmount = $row->amount * $row->exchange_rate;
                                    $addedAmount = 0 * $row->exchange_rate;
                                } elseif($row->b_currency_id == $bankCurrencyId && $bankCurrencyId != $journalCurrencyId) {
                                    // USD - USD - IDR
                                    //$addedAmount = $row->amount;
                                    $addedAmount = 0;
                                } elseif($row->b_currency_id != $bankCurrencyId && $bankCurrencyId != $journalCurrencyId) {
                                    // IDR - USD - IDR
                                    //$addedAmount = $row->amount / $row->exchange_rate;
                                    $addedAmount = 0 * $row->exchange_rate;
                                }
                                $sql2 = "UPDATE payment SET amount = 0, amount_converted = 0 WHERE payment_id = {$row->payment_id}";
                                $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                            }
                        }
    
                        $amount = $amount + $addedAmount;
                    }
                }
                elseif($paymentMethod == 2 && $paymentType == 1 && $paymentFor != 4) {
    
                    // <editor-fold defaultstate="collapsed" desc="DOWN PAYMENT - IN - PKS">
                    $sql = "SELECT shipment_id, COALESCE(dp_amount, 0) AS dp_amount FROM shipment WHERE sales_id = {$salesId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($result->num_rows > 0) {
                        $tempStamp = 1;
                        while($row = $result->fetch_object()) {
    
                            $downPayment1 = $myDatabase->real_escape_string($_POST['downPayment'. $row->shipment_id]);
                            $ppn = $myDatabase->real_escape_string($_POST['ppnSales'. $row->shipment_id]);
                            $downPayment = $downPayment1 + $ppn;
                            if($downPayment != '' && $downPayment != 0) {
                                if($exchangeRate == '') {
                                    $exchangeRate = 1;
                                }
    
                                if($bankCurrencyId == $currencyId && $currencyId != $journalCurrencyId) {
                                    $downPaymentDetailConverted = $downPayment;
                                    $downPaymentDetailJournal = $downPayment * $exchangeRate;
                                } elseif($bankCurrencyId != $currencyId && $currencyId != $journalCurrencyId) {
                                    $downPaymentDetailConverted = $downPayment / $exchangeRate;
                                    $downPaymentDetailJournal = $downPayment;
                                } elseif($bankCurrencyId != $currencyId && $currencyId == $journalCurrencyId) {
                                    $downPaymentDetailConverted = $downPayment * $exchangeRate;
                                    $downPaymentDetailJournal = $downPayment * $exchangeRate;
                                } else {
                                    $downPaymentDetailConverted = $downPayment;
                                    $downPaymentDetailJournal = $downPayment;
                                }
    
    
                                $convertedDownPayment = $row->dp_amount + $downPaymentDetailConverted;
    
                                //untuk table payment
                                $amount = $amount + $downPayment;
                                $originalAmount = $originalAmount + $downPayment;
    
                                $sql = "INSERT INTO payment_detail (payment_id, amount, amount_converted, amount_journal, shipment_id) VALUES ("
                                        . "{$tempStamp}, {$downPayment}, {$downPaymentDetailConverted}, {$downPaymentDetailJournal}, {$row->shipment_id})";
                                $resultUpdate = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    
                                $sql = "UPDATE shipment SET dp_amount = {$convertedDownPayment} WHERE shipment_id = {$row->shipment_id}";
                                $resultUpdate = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    }
    
                    if($amount <= 0) {
                        $boolContinue2 = false;
                    }
                    // </editor-fold>
                }

                elseif($paymentMethod == 1 && $paymentType == 1 && $paymentFor == 1) {
                    // <editor-fold defaultstate="collapsed" desc="PAYMENT - IN - PKS">
    
    
                    if($exchangeRate == '') {
                        $exchangeRate = 1;
                    }
    
                    if($bankCurrencyId == $currencyId && $currencyId != $journalCurrencyId) {
                        // USD - USD - IDR
                        $amountConverted = $amount;
                        $grandTotalConverted = $grandTotal;
                    } elseif($bankCurrencyId != $currencyId && $currencyId != $journalCurrencyId) {
                        // IDR - USD - IDR
                        $amountConverted = $amount / $exchangeRate;
                        $grandTotalConverted = $grandTotal;
                    } elseif($bankCurrencyId != $currencyId && $currencyId == $journalCurrencyId) {
                        // USD - IDR - IDR
                        $amountConverted = $amount * $exchangeRate;
                        $grandTotalConverted = $grandTotal;
                    } else {
                        $amountConverted = $amount;
                        $grandTotalConverted = $grandTotal;
                    }
    
                    if($amountConverted < $grandTotalConverted || ($amountConverted != 0 && $amountConverted > $grandTotalConverted)) {
                        $boolContinue2 = false;
                    } else {
    
                        $boolUpdateShipment = true;
    
                        if (isset($_POST['checkedSlips'])) {
                            $checks = $_POST['checkedSlips'];
                            $tempStamp = 1;
                            for ($i = 0; $i < sizeof($checks); $i++) {
                                if($shipmentNos == '') {
                                    $shipmentNos .= $checks[$i];
                                } else {
                                    $shipmentNos .= ','. $checks[$i];
                                }
    
                                $sql = "SELECT sh.*
                                        FROM shipment sh
                                        WHERE sh.shipment_id = {$checks[$i]}";
                                $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $rowShipment = $resultShipment->fetch_object();
                                $shipmentPayment = $rowShipment->invoice_amount - $rowShipment->dp_amount;
    
                                if($bankCurrencyId == $currencyId && $currencyId != $journalCurrencyId) {
                                    $shipmentAmount = $shipmentPayment;
                                    $shipmentPaymentConverted = $shipmentPayment;
                                    $shipmentPaymentJournal = $shipmentPayment * $exchangeRate;
                                } elseif($bankCurrencyId != $currencyId && $currencyId != $journalCurrencyId) {
                                    $shipmentAmount = $shipmentPayment * $exchangeRate;
                                    $shipmentPaymentConverted = $shipmentPayment;
                                    $shipmentPaymentJournal = $shipmentPayment * $exchangeRate;
                                } elseif($bankCurrencyId != $currencyId && $currencyId == $journalCurrencyId) {
                                    $shipmentAmount = $shipmentPayment / $exchangeRate;
                                    $shipmentPaymentConverted = $shipmentPayment;
                                    $shipmentPaymentJournal = $shipmentPayment;
                                } else {
                                    $shipmentAmount = $shipmentPayment;
                                    $shipmentPaymentConverted = $shipmentPayment;
                                    $shipmentPaymentJournal = $shipmentPayment;
                                }
    
                                $sql = "INSERT INTO payment_detail (payment_id, amount, amount_converted, amount_journal, shipment_id) VALUES ("
                                        . "{$tempStamp}, {$shipmentAmount}, {$shipmentPaymentConverted}, {$shipmentPaymentJournal}, {$checks[$i]})";
                                $resultUpdate = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    
                            }
                        }
    
                        if($shipmentNos == "") {
                            $boolContinue2 = false;
                        }
                    }
                    // </editor-fold>
                }
            if($boolContinue2) {
                    $sql = "select DATE_FORMAT(STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), '%y%m') AS slip_prefix from dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $rowSlip = $resultSlip->fetch_object();
                    $checkPaymentNo = $rowSlip->slip_prefix;
    
    
                    $sql = "SELECT LPAD(RIGHT(payment_no, 5) + 1, 5, '0') AS next_id FROM payment WHERE company_id = {$_SESSION['companyId']} AND bank_id = {$bankId} AND payment_no LIKE '{$checkPaymentNo}%' ORDER BY payment_no DESC LIMIT 1";
                    $resultPaymentNo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultPaymentNo->num_rows == 0) {
                        $sql = "SELECT LPAD(1, 5, '0') AS next_id FROM dual LIMIT 1";
                        $resultPaymentNo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }
                    $rowPaymentNo = $resultPaymentNo->fetch_object();
                    $nextPaymentNo = $rowPaymentNo->next_id;
                    $paymentNo = $checkPaymentNo .'-'. $nextPaymentNo;
    
                    if($exchangeRate == '') {
                        $exchangeRate = 1;
                    }
                    
                  
                    if($bankCurrencyId == $currencyId && $currencyId != $journalCurrencyId) {
                        // USD - USD - IDR
                        echo " A1 ";
                        $originalAmountConverted = $tempAmount;
                        $amountConverted = $amount;
                        $ppnConverted = $ppn;
                        $pphConverted = $pph;
                        $amountJournal = $tempAmount * $exchangeRate;
                        $ppnJournal = $ppn * $exchangeRate;
                        $pphJournal = $pph * $exchangeRate;
                        $amount2 = $tempAmount;
                    } elseif($bankCurrencyId != $currencyId && $currencyId != $journalCurrencyId) {
                        // IDR - USD - IDR
                        echo " B1 ";
                        $originalAmountConverted = $tempAmount / $exchangeRate;
                        $amountConverted = $amount / $exchangeRate;
                        $ppnConverted = $ppn / $exchangeRate;
                        $pphConverted = $pph / $exchangeRate;
                        $amountJournal = $tempAmount;
                        $ppnJournal = $ppn;
                        $pphJournal = $pph;
                        $currencyId = $bankCurrencyId;
                        $amount2 = $tempAmount/$exchangeRate;
                    } elseif($bankCurrencyId != $currencyId && $currencyId == $journalCurrencyId) {
                        // USD - IDR - IDR
                        echo " C1 ";

                        $originalAmountConverted = $tempAmount * $exchangeRate;
                        $amountConverted = $amount * $exchangeRate;
                        $ppnConverted = $ppn * $exchangeRate;
                        $pphConverted = $pph * $exchangeRate;
                        $amountJournal = $tempAmount * $exchangeRate;
                        $ppnJournal = $ppn * $exchangeRate;
                        $pphJournal = $pph * $exchangeRate;
                        $currencyId = $bankCurrencyId;
                        $amount2 = $tempAmount * $exchangeRate;
                    } else {
                        echo " D1 ";

                        $originalAmountConverted = $tempAmount;
                        $amountConverted = $amount;
                        $ppnConverted = $ppn;
                        $pphConverted = $pph;
                        $amountJournal = $tempAmount;
                        $ppnJournal = $ppn;
                        $pphJournal = $pph;
                        $amount2 = $tempAmount;
                        // echo " AMOUNT 2 - ". $amount2 ; 

                    }
                        if($freightId != '' && $fc_ppn_dp != 0){
                            //$amountJournal = $originalAmount - $fc_ppn_dp;
                        }
                    
                    if(($idPP != ''|| $idPP != 0) && ($idPG = '' || $idPG == 0)){
                        $invoiceId = 'NULL';
                    }
                    $sql = "INSERT INTO payment (payment_no, payment_date, payment_type, payment_type2, payment_method, account_id, bank_id, stockpile_contract_id, invoice_id, payment_cash_id,"
                            . "vendor_id, sales_id, freight_id, vendor_handling_id, labor_id, stockpile_contract_id_2,shipment_id, vendor_bank_id, payment_notes, remarks, tax_invoice, invoice_no, currency_id, "
                            . "exchange_rate, qty, price, termin, amount, amount_converted, amount2, original_amount, original_amount_converted, ppn_amount, ppn_amount_converted, "
                            . "pph_amount, pph_amount_converted, amount_journal, ppn_journal, pph_journal, general_vendor_id, gv_email, payment_location, cheque_no, entry_by, "
                            . "entry_date, stockpile_location, invoice_date, period_from,period_to,remarks2, status, gv_email2) VALUES ("
                            . "'{$paymentNo}', STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), {$paymentType}, {$payment_type},{$paymentMethod}, {$accountId}, {$bankId}, "
                            . "{$stockpileContractId}, {$invoiceId}, {$paymentCashId}, {$vendorId1}, {$salesId}, {$freightId}, {$vendorHandlingId}, {$laborId}, {$stockpileContract_Id}, {$shipment_Id}, {$vendorBank}, '{$notes}', '{$remarks}', "
                            . "'{$taxInvoice}', '{$invoiceNo}', '{$currencyId}', {$exchangeRate}, "
                            . "{$qty}, {$price}, {$termin},'{$amount}', {$amountConverted}, {$amount2}, {$originalAmount}, {$originalAmountConverted}, {$ppn}, {$ppnConverted}, "
                            . "{$pph}, {$pphConverted}, {$amountJournal}, {$ppnJournal}, {$pphJournal}, {$generalVendorId}, '{$gvEmail}', {$paymentLocation}, '{$chequeNo}', "
                            . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$stockpileLocation},STR_TO_DATE('$invoiceDate', '%d/%m/%Y'),STR_TO_DATE('{$periodPaymentFrom}', "
                            . "'%d/%m/%Y'),STR_TO_DATE('{$periodPaymentTo}', '%d/%m/%Y'), '{$remarks2}', 1, '{$gv_email2}')";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                //    echo " OP " . $sql;
                    if($result !== false) {
                        $paymentId = $myDatabase->insert_id;

                        if($boolUpdateTransaction) {
                            if($paymentFor == 2){
                                $sql = "SELECT transaction_id FROM `payment_oa` WHERE inv_notim_id = {$invoiceOAId}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if($result !== false && $result->num_rows > 0) {
                                while($row = $result->fetch_object()) {
                                    
                                    $sqlU = "UPDATE `payment_oa` SET payment_id = '{$paymentId}' WHERE transaction_id = {$row->transaction_id} AND inv_notim_id = {$invoiceOAId}";
                                    $resultU = $myDatabase->query($sqlU, MYSQLI_STORE_RESULT);
    
                                    $sqlA = "UPDATE `transaction` SET fc_payment_id = '{$paymentId}' WHERE transaction_id = {$row->transaction_id}";
                                    $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                                    // echo $sqlA;
                                }
                            }
                            }elseif($paymentFor == 9){
                                    $sql = "SELECT transaction_id FROM `payment_handling` WHERE inv_notim_id = {$invoiceHandlingId}";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($result !== false && $result->num_rows > 0) {
                                    while($row = $result->fetch_object()) {
                                    
                                    $sqlU = "UPDATE `payment_handling` SET payment_id = '{$paymentId}' WHERE transaction_id = {$row->transaction_id} AND inv_notim_id = {$invoiceHandlingId}";
                                    $resultU = $myDatabase->query($sqlU, MYSQLI_STORE_RESULT);
        
                                    $sqlA = "UPDATE `transaction` SET hc_payment_id = '{$paymentId}' WHERE transaction_id = {$row->transaction_id}";
                                    $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                                    }
                                }
                            }elseif($paymentFor == 3){
                                    $sql = "SELECT transaction_id FROM `payment_ob` WHERE inv_notim_id = {$invoiceOBId}";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($result !== false && $result->num_rows > 0) {
                                    while($row = $result->fetch_object()) {
                                    
                                    $sqlU = "UPDATE `payment_ob` SET payment_id = '{$paymentId}' WHERE transaction_id = {$row->transaction_id} AND inv_notim_id = {$invoiceOBId}";
                                    $resultU = $myDatabase->query($sqlU, MYSQLI_STORE_RESULT);
                                    
                                    $sqlA = "UPDATE `transaction` SET uc_payment_id = '{$paymentId}' WHERE transaction_id = {$row->transaction_id}";
                                    $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                                    
                                    }
                                }
                            }elseif($paymentFor == 1){
                                $sql = "SELECT transaction_id FROM `payment_curah` WHERE inv_notim_id = {$invoiceCurahId}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if($result !== false && $result->num_rows > 0) {
                                while($row = $result->fetch_object()) {
                                
                                $sqlU = "UPDATE `payment_curah` SET payment_id = '{$paymentId}' WHERE transaction_id = {$row->transaction_id} AND inv_notim_id = {$invoiceCurahId}";
                                $resultU = $myDatabase->query($sqlU, MYSQLI_STORE_RESULT);
                                // echo " SQLU " .$sqlU;
                                
                                $sqlA = "UPDATE `transaction` SET payment_id = '{$paymentId}' WHERE transaction_id = {$row->transaction_id}";
                                $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                                
                                    }
                                }
                            }
                                
                            $sql = "SELECT transaction_id, sync_status FROM `transaction` WHERE transaction_id IN ($slipNos)";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result !== false && $result->num_rows > 0) {
                                while($row = $result->fetch_object()) {
                                    $syncStatus = 0;
                                    if($row->sync_status == 1) {
                                        $syncStatus = 2;
                                    }
    
                                    $sql2 = "UPDATE `transaction` SET sync_status = {$syncStatus} WHERE transaction_id = {$row->transaction_id}";
                                    $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                                }
                            }
                            
                        }
                        
                        
                        //Update by yeni
                        if($idPP != ''){
                            // echo 'A';
                            $sqlPP = "UPDATE pengajuan_payment SET status = 3 WHERE idPP = {$idPP}"; //UPDATE status Pengajuan Payment
                            $resultPP = $myDatabase->query($sqlPP, MYSQLI_STORE_RESULT);
                            //echo $sqlPP;

                            //UPDATE LOGBOOK PKS
                            $sqlLog = "UPDATE logbook_new set payment_id = {$paymentId}, status1 = 3,  type_pengajuan = 1 where ppayment_id = {$idPP}";
                            $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
                            
                            $sqlInvNotim = "UPDATE invoice_notim set payment_id = {$paymentId}, status_payment = 1 where idPP = {$idPP}";
                            $resultInvNotim = $myDatabase->query($sqlInvNotim, MYSQLI_STORE_RESULT);
                            
                        }else if($idPG != ''){
                            // echo 'B';
                            $sqlLog = "UPDATE logbook_new set payment_id = {$paymentId}, status1 = 3 where inv_general_id = {$invoiceId}";
                            $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
                            
                            $sqlInv = "UPDATE invoice set payment_status = 1 where invoice_id = {$invoiceId}";
                            $resultInv = $myDatabase->query($sqlInv, MYSQLI_STORE_RESULT);

                            $sqlInv = "UPDATE pengajuan_general set status_pengajuan = 3 where pengajuan_general_id = {$idPG}";
                            $resultInv = $myDatabase->query($sqlInv, MYSQLI_STORE_RESULT);

                            $sqlOKS = "UPDATE temp_oks_akt oks
                                        INNER JOIN pengajuan_general_detail pgd ON pgd.`pgd_id` = oks.`pgd_id`
                                        SET oks.`payment_id` = {$paymentId}
                                        WHERE pgd.pg_id = {$idPG}";
                            $resultOKS = $myDatabase->query($sqlOKS, MYSQLI_STORE_RESULT);

                            $sqlOKS_others = "UPDATE temp_oks_akt_others oks1
                                        INNER JOIN pengajuan_general pg ON pg.`pg_id` = oks1.`pg_id`
                                        SET oks1.`payment_id` = {$paymentId}
                                        WHERE pg.pg_id = {$idPG}";
                            $resultOKS1 = $myDatabase->query($sqlOKS_others, MYSQLI_STORE_RESULT);
                        }

                        else if($stockpileContractId != 'NULL'){ //KONTRAK PKS
                            // echo 'C' .$stockpileContractId;
                            //INSERT LOGBOOK INVOICE
                            $sqlPurchasing = "SELECT pur.purchasing_id FROM purchasing pur
                                                LEFT JOIN po_pks po ON po.purchasing_id = pur.purchasing_id
                                                LEFT JOIN po_contract poc ON poc.po_pks_id = po.po_pks_id
                                                LEFT JOIN contract con ON con.contract_id = poc.contract_id
                                                LEFT JOIN stockpile_contract sc ON sc.contract_id = con.contract_id
                                                WHERE stockpile_contract_id = {$stockpileContractId}";
                            $resultPurchasing = $myDatabase->query($sqlPurchasing, MYSQLI_STORE_RESULT);
                            if($resultPurchasing !== false && $resultPurchasing->num_rows == 1) {
                                $rowPurchasing = $resultPurchasing->fetch_object();
                                $purchasingId = $rowPurchasing->purchasing_id;
                                
                                $sqlLog = "UPDATE logbook_new set payment_id = {$paymentId}, status1 = 3 where purchasing_Id = {$purchasingId}";
                                $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
                                
                                $sqlPurchasing = "UPDATE purchasing set status = 2, payment_id = {$paymentId} where purchasing_Id = {$purchasingId}";
                                $resultPurchasing = $myDatabase->query($sqlPurchasing, MYSQLI_STORE_RESULT);
    
                            }
                        }else if($internalTF != '' || $internalTF != 0){
                            // echo 'D';
                            $sqlLog = "UPDATE logbook_new set payment_id = {$paymentId}, status1 = 3 where internalTf_id = {$internalTF}";
                            $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);

                            $sqlInv = "UPDATE pengajuan_internaltf set status = 3, payment_id = {$paymentId}, amount = {$amount} where pengajuan_interalTF_id = {$internalTF}";
                            $resultInv = $myDatabase->query($sqlInv, MYSQLI_STORE_RESULT);
                            // echo $sqlLog;
                            // echo $sqlInv;
                        }
    
                        if($boolUpdateShipment) {
                            $sql = "UPDATE `shipment` SET payment_id = {$paymentId} WHERE shipment_id IN ($shipmentNos)";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        }
    
                        if($tempStamp != '') {
                            $sql = "UPDATE payment_detail SET payment_id = {$paymentId} WHERE payment_id = {$tempStamp}";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        }
                        if($paymentFor == 0) {
                            $sql = "SELECT con.contract_id, con.price_converted * con.quantity AS contract_amount, SUM(p.amount_converted) AS paid_amount, v.ppn, v.pph
                                    FROM stockpile_contract sc
                                    INNER JOIN `contract` con
                                        ON con.contract_id = sc.contract_id
                                    INNER JOIN `payment` p
                                        ON p.stockpile_contract_id = sc.stockpile_contract_id
                                    INNER JOIN vendor v
                                        ON v.vendor_id = con.vendor_id
                                    WHERE sc.stockpile_contract_id = {$stockpileContractId}
                                    AND con.company_id = {$_SESSION['companyId']} AND p.payment_status = 0
                                    GROUP BY sc.stockpile_contract_id";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows > 0) {
                                $row = $result->fetch_object();
                                $ppn = $row->ppn;
                                $pph = $row->pph;
    
                                $ppnAmount = ($ppn/100) * $row->contract_amount;
                                $pphAmount = ($pph/100) * $row->contract_amount;
                                $total  = $pphAmount + $ppnAmount + $row->contract_amount;
    
    
                                if($row->paid_amount >= $total)
                            {
                                    $sqlUpdate = "UPDATE `contract` SET payment_status = 1 WHERE contract_id = {$row->contract_id}";
                                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                                }
                            }
                        }
    
                        if($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 8) {
                            if($paymentMethod == 1){
                                    $sqlUpdate = "UPDATE `invoice` SET payment_status = 1 WHERE invoice_id = {$invoiceId}";
                                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
    
                            }
                        }
    
                            $sql = "SELECT b.* FROM bank b LEFT JOIN payment p ON p.`bank_id` = b.`bank_id` WHERE p.payment_id = {$paymentId}";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result !== false && $result->num_rows > 0) {
                                while($row = $result->fetch_object()) {
                                    $bankType = $row->bank_type;
                                    $bankStockpile = $row->stockpile_id;
    
                                }
                            }
    
    
                        if($paymentFor == 10){
                                $sqlUpdate = "UPDATE `payment_cash` SET payment_id = {$paymentId}, payment_cash_method = {$paymentMethod} WHERE payment_id IS NULL AND entry_by = {$_SESSION['userId']}";
                                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
    
                                if($paymentMethod == 1){
                                    $sqlUpdate = "UPDATE `payment_cash` SET payment_cash_status = 1 WHERE payment_id = {$paymentId}";
                                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
    
                            }
                        }
                        unset($_SESSION['payment']);
                        
                        insertGeneralLedger_payment($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", "NULL", "NULL", $paymentId);
                        insertReportGL_payment($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", "NULL", "NULL", $paymentId);


                        $return_value = '|OK|Payment has inserted successfully.|'. $paymentId .'|' .$sqlInvNotim;
    
                    } else {
                        $return_value = '|FAIL|Failed insert payment1.||' . $sql . ' | '; //invoiceFreightText
                        
                        if($tempStamp != '') {
                            $sql = "DELETE FROM payment_detail WHERE payment_id = {$tempStamp}";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        }
                    }
                } else {
                    $return_value = '|FAIL|Please insert correct amount.||' . $sql;
                }
            } else {
                $return_value = '|FAIL|Please fill the required fields.||' . $invoiceFreightId;
               // echo $sql;
    
            }
            }else{
                $return_value = '|FAIL|Please Choose Different Bank.||';
            }
        }
    
        echo $return_value;
    }elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'payment_data') {
    // <editor-fold defaultstate="collapsed" desc="payment_data">

    $return_value = '';
    $boolContinue = false;
    $boolBank = false;
    $boolDate = false;
    $boolUpdateTransaction = false;
    $boolUpdateShipment = false;
    $boolContinue2 = true;
    $tempStamp = '';
    $periodPaymentFrom = '';
    $periodPaymentTo = '';
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentMethod = $myDatabase->real_escape_string($_POST['paymentMethod']);
    $paymentDate = $myDatabase->real_escape_string($_POST['paymentDate']);
    $paymentType = $myDatabase->real_escape_string($_POST['paymentType']);
    $payment_type = $myDatabase->real_escape_string($_POST['payment_type']);
    $bankId = $myDatabase->real_escape_string($_POST['bankId']);
    $paymentFor = $myDatabase->real_escape_string($_POST['paymentFor']);
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $stockpileContractId2 = $myDatabase->real_escape_string($_POST['stockpileContractId2']);
    $stockpileContractId3 = $myDatabase->real_escape_string($_POST['stockpileContractId3']);
    $stockpileId1 = $myDatabase->real_escape_string($_POST['stockpileId1']);
    $vendorId1 = $myDatabase->real_escape_string($_POST['vendorId1']);
    $stockpileId2 = $myDatabase->real_escape_string($_POST['stockpileId2']);
    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    $stockpileId4 = $myDatabase->real_escape_string($_POST['stockpileId4']);
    $vendorHandlingId = $myDatabase->real_escape_string($_POST['vendorHandlingId']);
    $stockpileId3 = $myDatabase->real_escape_string($_POST['stockpileId3']);
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
    $shipmentId1 = $myDatabase->real_escape_string($_POST['shipmentId1']);
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    $generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId']);
    $taxInvoice = $myDatabase->real_escape_string($_POST['taxInvoice']);
    $invoiceNo = $myDatabase->real_escape_string($_POST['invoiceNo']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $bankCurrencyId = $myDatabase->real_escape_string($_POST['bankCurrencyId']);
    $journalCurrencyId = $myDatabase->real_escape_string($_POST['journalCurrencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
    $originalAmount = $amount;
    $totalPrice = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalPrice']));
    $downPayment = str_replace(",", "", $myDatabase->real_escape_string($_POST['downPayment']));
    $grandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal']));
    $ppn = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn']));
    $pph = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty']));
    $fc_ppn_dp = str_replace(",", "", $myDatabase->real_escape_string($_POST['fc_ppn_dp']));
    $ppn1 = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn1']));
    $ppn2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn2']));
    $pph1 = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph1']));
    $notes = $myDatabase->real_escape_string($_POST['paymentNotes']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    $remarks2 = $myDatabase->real_escape_string($_POST['remarks2']);
    $paymentLocation = $myDatabase->real_escape_string($_POST['paymentLocation']);
    $stockpileLocation = $myDatabase->real_escape_string($_POST['stockpileLocation']);
    $chequeNo = $myDatabase->real_escape_string($_POST['chequeNo']);
    $invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
    $invoiceId = $myDatabase->real_escape_string($_POST['invoiceId']);
    $paymentCashId = $paymentFor;
    $slipNos = "";
    $shipmentNos = "";
    $priceFreight = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceFreight']));
    $qtyFreight = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyFreight']));
    $terminFreight = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminFreight']));
    $stockpileIdFcDp = $myDatabase->real_escape_string($_POST['stockpileIdFcDp']);
    $freightIdFcDp = $myDatabase->real_escape_string($_POST['freightIdFcDp']);
    $freightBankDp = $myDatabase->real_escape_string($_POST['freightBankDp']);
    $vendorBankId = $myDatabase->real_escape_string($_POST['vendorBankId']);
    $qtyHandlingDP = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyHandlingDP']));
    $priceHandlingDP = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceHandlingDP']));
    $terminHandlingDP = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminHandlingDP']));
    $stockpileVhDp = $myDatabase->real_escape_string($_POST['stockpileVhDp']);
    $vendorHandlingDp = $myDatabase->real_escape_string($_POST['vendorHandlingDp']);
    $vendorHandlingBankDp = $myDatabase->real_escape_string($_POST['vendorHandlingBankDp']);
    $vendorHandlingBankId = $myDatabase->real_escape_string($_POST['vendorHandlingBankId']);
    $freightBankId = $myDatabase->real_escape_string($_POST['freightBankId']);
    $qtyLabor = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyLabor']));
    $priceLabor = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceLabor']));
    $terminLabor = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminLabor']));
    $stockpileLaborDp = $myDatabase->real_escape_string($_POST['stockpileLaborDp']);
    $laborDp = $myDatabase->real_escape_string($_POST['laborDp']);
    $laborBankDp = $myDatabase->real_escape_string($_POST['laborBankDp']);
    $laborBankId = $myDatabase->real_escape_string($_POST['laborBankId']);
    $gvBankId = $myDatabase->real_escape_string($_POST['gvBankId']);
    $curahBankId = $myDatabase->real_escape_string($_POST['curahBankId']);
    $gvPCBankId = $myDatabase->real_escape_string($_POST['gvPCBankId']);
    $paymentFrom = $myDatabase->real_escape_string($_POST['paymentFrom']);
    $paymentFrom1 = $myDatabase->real_escape_string($_POST['paymentFrom1']);
    $paymentFromUP = $myDatabase->real_escape_string($_POST['paymentFromUP']);
    $paymentFromHP = $myDatabase->real_escape_string($_POST['paymentFromHP']);
    $paymentTo = $myDatabase->real_escape_string($_POST['paymentTo']);
    $paymentTo1 = $myDatabase->real_escape_string($_POST['paymentTo1']);
    $paymentToUP = $myDatabase->real_escape_string($_POST['paymentToUP']);
    $paymentToHP = $myDatabase->real_escape_string($_POST['paymentToHP']);

    $idPP = $myDatabase->real_escape_string($_POST['idPP']);
    $idPG = $myDatabase->real_escape_string($_POST['idPG']);
    $priceDp = $myDatabase->real_escape_string($_POST['priceDp']);
    $qtyDp = $myDatabase->real_escape_string($_POST['qtyDp']);

    $totalPrice2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalPrice2']));
    $contractHandling = $myDatabase->real_escape_string($_POST['contractHandling']);
    $contractHandlingDp = $myDatabase->real_escape_string($_POST['contractHandlingDp']);
    $contractFreight = $myDatabase->real_escape_string($_POST['contractFreight']);
    $contractFreightDp = $myDatabase->real_escape_string($_POST['contractFreightDp']);
    $contractCurah = $myDatabase->real_escape_string($_POST['contractCurah']);
    $contractCurahDp = $myDatabase->real_escape_string($_POST['contractCurahDp']);
    $stockpileIdCurahDp = $myDatabase->real_escape_string($_POST['stockpileIdCurahDp']);
    $vendorIdCurahDp = $myDatabase->real_escape_string($_POST['vendorIdCurahDp']);
    $curahBankDp = $myDatabase->real_escape_string($_POST['curahBankDp']);
    $downPaymentFC = str_replace(",", "", $myDatabase->real_escape_string($_POST['downPaymentFC']));
    $downPaymentHC = str_replace(",", "", $myDatabase->real_escape_string($_POST['downPaymentHC']));
    $downPaymentC = str_replace(",", "", $myDatabase->real_escape_string($_POST['downPaymentC']));
	$pengajuanIdOA = $myDatabase->real_escape_string($_POST['pengajuanNo']);
	    $gv_email = $myDatabase->real_escape_string($_POST['gv_email']);
    $gv_email2 = $myDatabase->real_escape_string($_POST['gv_email2']);
	
	$gvBankIdPerdin = $myDatabase->real_escape_string($_POST['gvBankIdPerdin']);
	$gvBankIdNonPerdin = $myDatabase->real_escape_string($_POST['gvBankIdNonPerdin']);
	$saIdNon = $myDatabase->real_escape_string($_POST['saIdNon']);
	$saId = $myDatabase->real_escape_string($_POST['saId']);

	$stockpileContractIdAdj = $myDatabase->real_escape_string($_POST['stockpileContractIdAdj']);

    $dateTrans = str_replace("/", "-", $myDatabase->real_escape_string($_POST['paymentDate']));
    $dt = date('Y-m-d', strtotime($dateTrans));
    $date2 = new DateTime($dt);
    $newDate = $date2->format('Y-m-d');
    // </editor-fold defaultstate="collapsed" desc="POST variables">
    if ($stockpileContractId2 == '' && $stockpileContractId3 == '') {
        $stockpileContract_Id = 'NULL';
    } elseif ($stockpileContractId2 == '' && $stockpileContractId3 != '') {
        $stockpileContract_Id = $stockpileContractId3;
    } elseif ($stockpileContractId3 == '' && $stockpileContractId2 != '') {
        $stockpileContract_Id = $stockpileContractId2;
    }

    if ($shipmentId == '' && $shipmentId1 == '') {
        $shipment_Id = 'NULL';
    } elseif ($shipmentId == '' && $shipmentId1 != '') {
        $shipment_Id = $shipmentId1;
    } elseif ($shipmentId != '' && $shipmentId1 == '') {
        $shipment_Id = $shipmentId;
    }

    if ($invoiceId == '') {
        $invoiceId = 'NULL';
    }
    if ($vendorHandlingId == '') {
        $vendorHandlingId = 'NULL';
    }
    if ($ppn12 == '') {
        $ppn12 = 0;
    }
    if ($pph12 == '') {
        $pph12 = 0;
    }
      if($paymentCashId == 11 || $paymentCashId == 12 ) {
            $paymentCashId = 10;
       }else if ($paymentCashId == 10){
		   $paymentCashId = 10;
	   }else{
		   $paymentCashId = 'NULL';
	   }

    if ($totalPrice2 == '') {
        $totalPrice2 = 0;
    }

    if ($contractHandlingDp == '') {
        $contractHandlingDp = 0;
    }

    if ($contractHandling == '') {
        $contractHandling = 0;
    }

    if ($contractFreightDp == '') {
        $contractFreightDp = 0;
    }

    if ($contractFreight == '') {
        $contractFreight = 0;
    }

    if ($contractCurahDp == '') {
        $contractCurahDp = 0;
    }

    if ($contractCurah == '') {
        $contractCurah = 0;
    }
    if ($downPaymentFC == '') {
        $downPaymentFC = 0;
    }

    if ($downPaymentHC == '') {
        $downPaymentHC = 0;
    }

    if ($downPaymentC == '') {
        $downPaymentC = 0;
    }

    $sqlBankAcc = "SELECT account_id FROM bank WHERE bank_id = {$bankId}";
    $resultBankAcc = $myDatabase->query($sqlBankAcc, MYSQLI_STORE_RESULT);
    if ($resultBankAcc->num_rows == 1) {
        $rowBankAcc = $resultBankAcc->fetch_object();

        if ($rowBankAcc->account_id !== $accountId) {
            $boolBank = true;
        }
    }

    $termin = 'NULL';
    $vendorBank = 'NULL';
    $handlingContract = 0;
    $freightContract = 0;
    $curahContract = 0;

    if ($paymentFor == 0) {
        // PKS Kontrak
        if ($stockpileId != '' && $vendorId != '' && $stockpileContractId != '' && $vendorBankId != '' && $grandTotal != 0) {
            if ($paymentMethod == 1) {
                if ($ppn > 0) {
                    if ($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
            } else {
                $boolContinue = true;
                $pph = 0;
                $ppn = $ppn2;
                $amount = $amount + $ppn;
                $originalAmount = $originalAmount + $ppn;
                if ($ppn2 == '') {
                    $ppn = 0;
                }
            }
            $salesId = 'NULL';
            $freightId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
            $qty = 'NULL';
            $price = 'NULL';
            //$shipment_Id = 'NULL';
            //$stockpileContract_Id = 'NULL';
            //$shipmentId1 = 'NULL';
            //$stockpileContractId3 = 'NULL';
            $generalVendorId = 'NULL';
            $vendorBank = $vendorBankId;
			
			if($stockpileContractIdAdj != ''){
			$adjId = $stockpileContractId;
            $stockpileContractId = $stockpileContractIdAdj;
			}

            $sql = "SELECT DATE_FORMAT(c.entry_date,'%Y-%m-%d') AS contractDate, c.contract_no FROM contract c 
			LEFT JOIN stockpile_contract sc ON sc.contact_id = c.contract_id WHERE sc.stockpile_contract_id = {$stockpileContractId} LIMIT 1";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result !== false && $result->num_rows == 1) {
                $row = $result->fetch_object();
                $contractDate = $row->contractDate;
				$remarks = $remarks . ' (Contract No : ' . $row->contract_no . ')';
            }

            if ($contractDate <= $newDate) {
                $boolDate = true;
            }

        }
    } else if ($paymentFor == 1) {
        $periodPaymentFrom = $paymentFrom1;
        $periodPaymentTo = $paymentTo1;
        if ($paymentType == 1) {
            // Sales
            if ($customerId != '' && $salesId != '') {
                $boolContinue = true;
                $stockpileContractId = 'NULL';
                $freightId = 'NULL';
                $laborId = 'NULL';
                $vendorId1 = 'NULL';
                $qty = 'NULL';
                $price = 'NULL';
                // $shipment_Id = 'NULL';
                //$stockpileContract_Id = 'NULL';
                //$shipmentId1 = 'NULL';
                //$stockpileContractId3 = 'NULL';
                $generalVendorId = 'NULL';
                //$boolContinue = true;


                if ($paymentMethod == 2) {


                    $ppn = 0;

                    $pph = 0;
                }
//                $amount = 0;
//                $originalAmount = 0;

                $salesDate = $newDate;
                $sql = "SELECT DATE_FORMAT(sales_date,'%Y-%m-%d') AS salesDate FROM sales WHERE sales_id = {$salesId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if ($result !== false && $result->num_rows == 1) {
                    $row = $result->fetch_object();

                    if ($row->salesDate != '') {
                        $salesDate = $row->salesDate;
                    } else {
                        //$salesDate = $newDate;
                    }
                }

                if ($salesDate <= $newDate) {
                    $boolDate = true;
                }
                $boolDate = true;
            }
        } else if ($paymentType == 2) {
            // PKS Curah
            if ($paymentMethod == 1 && $stockpileId1 != '' && $vendorId1 != '' && $grandTotal != 0) {
                if ($ppn > 0) {
                    if ($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
                $salesId = 'NULL';
                $stockpileContractId = 'NULL';
                $freightId = 'NULL';
                $laborId = 'NULL';
                $qty = 'NULL';
                $price = 'NULL';
                $vendorBank = $curahBankId;
                //$shipment_Id = 'NULL';
                //$stockpileContract_Id = 'NULL';
                //$shipmentId1 = 'NULL';
                //$stockpileContractId3 = 'NULL';
                $generalVendorId = 'NULL';
                $boolDate = true;
                $curahContract = $contractCurah;
            } elseif ($paymentMethod == 2 && $stockpileId1 != '' && $vendorId1 != '' && $amount != 0) {
                $boolContinue = true;
                $salesId = 'NULL';
                $stockpileContractId = 'NULL';
                $freightId = 'NULL';
                $laborId = 'NULL';
                $qty = 'NULL';
                $price = 'NULL';
                $vendorBank = $curahBankDp;
                //$shipment_Id = 'NULL';
                //$stockpileContract_Id = 'NULL';
                //$shipmentId1 = 'NULL';
                //$stockpileContractId3 = 'NULL';
                $generalVendorId = 'NULL';
                $ppn = 0;
                $pph = 0;
                $boolDate = true;
                $curahContract = $contractCurahDp;
                $vendorId1 = $vendorIdCurahDp;
            }
        }
    } else if ($paymentFor == 9) {
        // HC payment
        $periodPaymentFrom = $paymentFromHP;
        $periodPaymentTo = $paymentToHP;
        if ($paymentMethod == 2 && $stockpileVhDp != '' && $vendorHandlingDp != '' && $vendorHandlingBankDp != '' && $amount != 0) {
            $boolContinue = true;
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
            $freightId = 'NULL';
            $qty = $qtyHandlingDP;
            $price = $priceHandlingDP;
            $termin = $terminHandlingDP;
            $vendorBank = $vendorHandlingBankDp;
            $vendorHandlingId = $vendorHandlingDp;
            $handlingContract = $contractHandlingDp;
            //$shipment_Id = 'NULL';
            //$stockpileContract_Id = 'NULL';
            //$shipmentId1 = 'NULL';
            //$stockpileContractId3 = 'NULL';
            $generalVendorId = 'NULL';
            $boolDate = true;
            $sql = "SELECT pph FROM vendor_handling WHERE vendor_handling_id = {$vendorHandlingDp}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result->num_rows == 1) {
                $row = $result->fetch_object();

                $pph = $amount * ($row->pph / 100);
            } else {
                $pph = 0;
            }
            $ppn = 0;

        } elseif ($paymentMethod == 1 && $stockpileId4 != '' && $vendorHandlingId != '' && $grandTotal >= 0 && $vendorHandlingBankId != '') {
            if ($ppn > 0) {
                if ($taxInvoice != '') {
                    $boolContinue = true;
                }
            } else {
                $boolContinue = true;
            }
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $laborId = 'NULL';
            $freightId = 'NULL';
            $vendorId1 = 'NULL';
            $qty = 'NULL';
            $price = 'NULL';
            $vendorBank = $vendorHandlingBankId;
            $handlingContract = $contractHandling;
            //$shipment_Id = 'NULL';
            //$stockpileContract_Id = 'NULL';
            //$shipmentId1 = 'NULL';
            //$stockpileContractId3 = 'NULL';
            $generalVendorId = 'NULL';
            $boolDate = true;
        }
    } else if ($paymentFor == 2) {
        // FC payment
        $periodPaymentFrom = $paymentFrom;
        $periodPaymentTo = $paymentTo;
        if ($paymentMethod == 2 && $stockpileIdFcDp != '' && $freightIdFcDp != '' && $freightBankDp != '' && $amount != 0) {
            $boolContinue = true;
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
            $qty = $qtyFreight;
            $price = $priceFreight;
            $termin = $terminFreight;
            $freightId = $freightIdFcDp;
            $vendorBank = $freightBankDp;
            $freightContract = $contractFreightDp;
            //$shipment_Id = 'NULL';
            //$stockpileContract_Id = 'NULL';
            //$shipmentId1 = 'NULL';
            //$stockpileContractId3 = 'NULL';
            $generalVendorId = 'NULL';
            $boolDate = true;
			//echo 'test';
            $sql = "SELECT pph,ppn FROM freight WHERE freight_id = {$freightIdFcDp}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result->num_rows == 1) {
                $row = $result->fetch_object();
                $ppn = $amount * ($row->ppn / 100);
                $pph = $amount * ($row->pph / 100);
            } else {
                $pph = 0;
                $ppn = 0;
            }

        } elseif ($paymentMethod == 1 && $stockpileId2 == 10 && $freightId == 26 && $freightBankId != '') {
            $boolContinue = true;
            $ppn = 0;
            $pph = 0;
            $freightId = 26;
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
            $qty = 'NULL';
            $price = 'NULL';
            //$shipmentId = 'NULL';
            $generalVendorId = 'NULL';
            $vendorBank = $freightBankId;
            $freightContract = $contractFreight;
            //$shipment_Id = 'NULL';
            //$stockpileContract_Id = 'NULL';
            //$shipmentId1 = 'NULL';
            //$stockpileContractId3 = 'NULL';
            $totalPrice = $originalAmount;
            $grandTotal = $originalAmount;
            $boolDate = true;
        //} elseif ($paymentMethod == 1 && $stockpileId2 != '' && $freightId != '' && $grandTotal >= 0 && $freightBankId != '') {
        } elseif ($paymentMethod == 1 && $stockpileId2 != '' && $freightId != '' && $freightBankId != '') {
            if ($ppn > 0) {
                if ($taxInvoice != '') {
                    $boolContinue = true;
                }
            } else {
                $boolContinue = true;
            }
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
            $qty = 'NULL';
            $price = 'NULL';
            $vendorBank = $freightBankId;
            //$shipment_Id = 'NULL';
            //$stockpileContract_Id = 'NULL';
            //$shipmentId1 = 'NULL';
            //$stockpileContractId3 = 'NULL';
            $generalVendorId = 'NULL';
            $originalAmount = $amount + $fc_ppn_dp;
            $boolDate = true;
        }
    } else if ($paymentFor == 3) {
        // UC payment
        $periodPaymentFrom = $paymentFromUP;
        $periodPaymentTo = $paymentToUP;
        if ($paymentMethod == 1 && $stockpileId3 != '' && $laborId != '' && $grandTotal >= 0 && $laborBankId != '') {
            if ($ppn > 0) {
                if ($taxInvoice != '') {
                    $boolContinue = true;
                }
            } else {
                $boolContinue = true;
            }
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $freightId = 'NULL';
            $vendorId1 = 'NULL';
            $qty = 'NULL';
            $price = 'NULL';
            $vendorBank = $laborBankId;
            //$shipment_Id = 'NULL';
            //$stockpileContract_Id = 'NULL';
            //$shipmentId1 = 'NULL';
            //$stockpileContractId3 = 'NULL';
            $generalVendorId = 'NULL';
            $boolDate = true;
        } elseif ($paymentMethod == 2 && $stockpileLaborDp != '' && $laborDp != '' && $laborBankDp != '' && $amount != 0) {
            $boolContinue = true;
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $freightId = 'NULL';
            $vendorId1 = 'NULL';
            //$shipmentId = 'NULL';
            $qty = $qtyLabor;
            $price = $priceLabor;
            $termin = $terminLabor;
            $laborId = $laborDp;
            $vendorBank = $laborBankDp;
            //$shipment_Id = 'NULL';
            //$stockpileContract_Id = 'NULL';
            //$shipmentId1 = 'NULL';
            //$stockpileContractId3 = 'NULL';
            $generalVendorId = 'NULL';
            $ppn = 0;
            $pph = 0;
            $boolDate = true;
        }
    } else {
        $boolContinue = true;
        $stockpileContractId = 'NULL';
        $salesId = 'NULL';
        $freightId = 'NULL';
        $laborId = 'NULL';
        $vendorId1 = 'NULL';
        $boolDate = true;

        if ($invoiceId != '' && $invoiceId != 'NULL') {
            $sql = "SELECT DATE_FORMAT(invoice_date,'%Y-%m-%d') AS invoiceDate2 FROM invoice WHERE invoice_id = {$invoiceId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result !== false && $result->num_rows == 1) {
                $row = $result->fetch_object();
                $invoiceDate2 = $row->invoiceDate2;
            }

            if ($invoiceDate2 <= $newDate) {
                $boolDate = true;
            } else {
                $boolDate = false;
            }
        }
        /*if($shipment_Id == '') {
            $shipment_Id = 'NULL';
        }
		if($stockpileContract_Id == '') {
            $stockpileContract_Id = 'NULL';
        }*/
        if ($paymentFor == 8) {
            $vendorBank = $gvBankId;
            $originalAmount = $grandTotal;
            $amount = $grandTotal;
            $totalPrice = $grandTotal;
        } else if ($paymentFor == 10) {
            $vendorBank = $gvPCBankId;
        }else if($paymentFor == 11){
			$vendorBank = $gvBankIdPerdin;
		}else if($paymentFor == 12){
			$vendorBank = $gvBankIdNonPerdin;
		}

        if ($generalVendorId == '') {
            $generalVendorId = 'NULL';
        }
        if ($price == '') {
            $price = 'NULL';
        }
        if ($qty == '') {
            $qty = 'NULL';
        }
        if ($paymentType == 1 && ($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 7 || $paymentFor == 8 || $paymentFor == 10 || $paymentFor == 11|| $paymentFor == 12)) {
            $ppn1 = $ppn1;
            $pph1 = $pph1;
            //$grandTotal = $amount;
            //$totalPrice = $amount;

        } else if ($paymentType == 1) {

            $ppn1 = 0;
            $pph1 = 0;
            //$grandTotal = $amount;
        }
        if ($paymentFor == 7 || $paymentMethod == 2) {
            $ppn = 0;
            $pph = 0;
        }

        if ($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 8 || $paymentFor == 10 || $paymentFor == 11|| $paymentFor == 12) {
            if (is_numeric($ppn1)) {
                $ppn = $ppn1;
            } else {
                $ppn = 0;
            }

            if (is_numeric($pph1)) {
                $pph = $pph1;
            } else {
                $pph = 0;
            }


        }
		if ($paymentFor == 11 || $paymentFor == 12) {
            if (is_numeric($ppn1)) {
                $ppn = $ppn1;
            } else {
                $ppn = 0;
            }

            if (is_numeric($pph1)) {
                $pph = $pph1;
            } else {
                $pph = 0;
            }
			
			$originalAmount = $grandTotal;
			$amount = $grandTotal;
			$totalPrice = $grandTotal;

        }
    }
	
    if ($boolDate) {
        if ($boolBank) {
            if ($paymentDate != '' && $paymentType != '' && $paymentMethod != '' && $accountId != '' && $bankId != '' &&
                $currencyId != '' && $boolContinue) {
                if ($paymentMethod == 1 && $paymentType == 2 && ($paymentFor == 0 || $paymentFor == 1 || $paymentFor == 2 || $paymentFor == 3 || $paymentFor == 9)) {
                    // <editor-fold defaultstate="collapsed" desc="PAYMENT - OUT - PKS Curah/FC/UC - UPDATE TRANSACTION">
                    if ($amount < $grandTotal || ($amount != 0 && $amount > $grandTotal)) {
                        $boolContinue2 = false;
                    } else {
                        $boolUpdateTransaction = true;

                        if ($paymentFor == 0) {
                            $whereProperty = " AND stockpile_contract_id = {$stockpileContractId} ";
                            $updateProperty = " payment_id ";

                            $sql = "SELECT GROUP_CONCAT(transaction_id) AS transaction_ids "
                                . "FROM `transaction` "
                                . "WHERE stockpile_contract_id = {$stockpileContractId} ";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $slipNos = $row->transaction_id;
                            }
                        } else if ($paymentFor == 1) {

                            $paymentIds = '';

                            if (isset($_POST['checkedSlipsDP'])) {
                                $checksDP = $_POST['checkedSlipsDP'];
                                for ($i = 0; $i < sizeof($checksDP); $i++) {
                                    if ($paymentIds == '') {
                                        $paymentIds .= $checksDP[$i];
                                    } else {
                                        $paymentIds .= ',' . $checksDP[$i];
                                    }
                                }
                            }

                            $whereProperty = " AND p.vendor_id = {$vendorId1} AND p.payment_id IN ({$paymentIds})";
                            $updateProperty = " payment_id ";
                        } else if ($paymentFor == 2) {

                            $paymentIds = '';

                            if (isset($_POST['checkedSlipsDP'])) {
                                $checksDP = $_POST['checkedSlipsDP'];
                                for ($i = 0; $i < sizeof($checksDP); $i++) {
                                    if ($paymentIds == '') {
                                        $paymentIds .= $checksDP[$i];
                                    } else {
                                        $paymentIds .= ',' . $checksDP[$i];
                                    }
                                }
                            }

                            $whereProperty = " AND p.freight_id = {$freightId} AND p.payment_id IN ({$paymentIds})";
                            $updateProperty = " fc_payment_id ";
                        } else if ($paymentFor == 9) {

                            $paymentIds = '';

                            if (isset($_POST['checkedSlipsDP'])) {
                                $checksDP = $_POST['checkedSlipsDP'];
                                for ($i = 0; $i < sizeof($checksDP); $i++) {
                                    if ($paymentIds == '') {
                                        $paymentIds .= $checksDP[$i];
                                    } else {
                                        $paymentIds .= ',' . $checksDP[$i];
                                    }
                                }
                            }

                            //$whereProperty = " AND p.vendor_handling_id = {$vendorHandlingId} AND p.handlingContract = {$handlingContract} AND p.payment_id IN ({$paymentIds})";
                            $whereProperty = " AND p.vendor_handling_id = {$vendorHandlingId} AND p.payment_id IN ({$paymentIds})";
                            $updateProperty = " hc_payment_id ";
                        } else if ($paymentFor == 3) {
                            $whereProperty = " AND labor_id = {$laborId} ";
                            $updateProperty = " uc_payment_id ";
                        }

                        if (isset($_POST['checkedSlips'])) {
                            $checks = $_POST['checkedSlips'];
                            for ($i = 0; $i < sizeof($checks); $i++) {
                                if ($slipNos == '') {
                                    $slipNos .= $checks[$i];
                                } else {
                                    $slipNos .= ',' . $checks[$i];
                                }
                            }
                        }

                        if ($grandTotal <= 0) {
                            $amount = $totalPrice;

                            $sql = "SELECT p.*, f.pph AS fpph, vh.`pph` AS vhpph , v.`ppn` AS vppn
							FROM `payment` p 
							LEFT JOIN freight f ON f.`freight_id` = p.`freight_id` 
							LEFT JOIN vendor_handling vh ON vh.`vendor_handling_id` = p.`vendor_handling_id`
							LEFT JOIN vendor v ON v.`vendor_id` = p.`vendor_id`
                            WHERE p.payment_type = {$paymentType}
                            AND p.payment_method = 2 AND p.payment_status = 0
                            {$whereProperty}
                            AND p.amount_converted > 0
                            AND p.company_id = {$_SESSION['companyId']}
                            ORDER BY p.amount_converted ASC";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                            $availableDP1 = '';
                            if ($result !== false && $result->num_rows > 0) {
                                //$balanceLeft = $totalPrice;
                                while ($row = $result->fetch_object()) {
                                    /* $dp = $row->amount_converted;
                                     $availableDP = $dp - $balanceLeft;
                                     if ($availableDP > 0) {
                                         $sql2 = "UPDATE payment SET amount = " . $availableDP / $row->exchange_rate . ", amount_converted = " . $availableDP . " WHERE payment_id = {$row->payment_id}";
                                         $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                                         //  break;
                                     } elseif ($availableDP <= 0) {
                                         $balanceLeft = $balanceLeft - $row->amount_converted;
                                         $sql2 = "UPDATE payment SET amount = 0, amount_converted = 0, pph_amount = 0  WHERE payment_id = {$row->payment_id}";
                                         $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                                     }*/

                                    $availableDP = $totalPrice2;

                                    //$availableDP1 = '';
                                    if ($availableDP > 0) {


                                        $totalTaken = 0;
                                        $sql = "SELECT SUM(amount_converted) AS total_taken FROM payment WHERE payment_id = {$row->payment_id}";
                                        $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        if ($resultTaken !== false && $resultTaken->num_rows == 1) {
                                            $rowTaken = $resultTaken->fetch_object();
                                            $totalTaken = $rowTaken->total_taken;
                                        }

                                        if ($availableDP >= $totalTaken && $availableDP1 == '') {
                                            $availableDP1 = $availableDP - $totalTaken;

                                            $quantityTaken = 0;

                                            echo 'BB';
                                        } else if ($availableDP >= $totalTaken && $availableDP1 > $totalTaken) {
                                            echo 'AA';
                                            if ($availableDP1 !== '') {
                                                $quantityTaken = $totalTaken - $availableDP1;
                                            } else {
                                                $quantityTaken = $totalTaken - $availableDP;
                                            }

                                            $availableDP = 0;

                                        } else if ($availableDP1 < $totalTaken) {
                                            echo 'AA';
                                            if ($availableDP1 !== '') {
                                                $quantityTaken = $totalTaken - $availableDP1;
                                            } else {
                                                $quantityTaken = $totalTaken - $availableDP;
                                            }

                                            $availableDP = 0;

                                        }
                                        //$availableDP = 0;
                                    }

                                    $sql2 = "UPDATE payment SET amount = " . $quantityTaken / $row->exchange_rate . ", amount_converted = " . $quantityTaken . " 
							 WHERE payment_id = {$row->payment_id}";
                                    $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);


                                    echo $sql2;
                                    echo '<br>';
                                    echo $availableDP;
                                    echo '<br>';
                                    echo $totalTaken;
                                    echo '<br>';
                                    echo $availableDP1;
                                }
                            }
                        } else {

                            ///if($freightId != 312 && $stockpileLocation != 8){
                            $amount = $totalPrice;

                            $sql = "UPDATE `payment` p SET p.amount = 0, p.amount_converted = 0
                            WHERE p.payment_type = {$paymentType}
                            AND p.payment_method = 2
                            {$whereProperty}";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            //}
                        } //edited by alan
                    }
                    // </editor-fold>
                } elseif ($paymentMethod == 1 && $paymentType == 1 && ($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 8)) {
                    // <editor-fold defaultstate="collapsed" desc="PAYMENT - IN - Other with GV">
                    if ($invoiceId != 'NULL') {
                        $sql = "SELECT p.*, b.currency_id AS b_currency_id
                        FROM `payment` p
                        INNER JOIN bank b
                        ON b.bank_id = p.bank_id
                        WHERE p.payment_type = {$paymentType}
                        AND p.payment_method = 2 AND p.payment_status = 0
                        AND p.invoice_id = {$invoiceId}
                        AND p.amount_converted > 0
                        AND p.company_id = {$_SESSION['companyId']}
                        ORDER BY p.payment_id ASC";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($result !== false && $result->num_rows > 0) {
                            while ($row = $result->fetch_object()) {
                                if ($row->b_currency_id == $bankCurrencyId && $bankCurrencyId == $journalCurrencyId) {
                                    // IDR - IDR - IDR
                                    $addedAmount = $row->amount;
                                } elseif ($row->b_currency_id != $bankCurrencyId && $bankCurrencyId == $journalCurrencyId) {
                                    // USD - IDR - IDR
                                    $addedAmount = $row->amount * $row->exchange_rate;
                                } elseif ($row->b_currency_id == $bankCurrencyId && $bankCurrencyId != $journalCurrencyId) {
                                    // USD - USD - IDR
                                    $addedAmount = $row->amount;
                                } elseif ($row->b_currency_id != $bankCurrencyId && $bankCurrencyId != $journalCurrencyId) {
                                    // IDR - USD - IDR
                                    $addedAmount = $row->amount / $row->exchange_rate;
                                }
                                $sql2 = "UPDATE payment SET amount = 0, amount_converted = 0 WHERE payment_id = {$row->payment_id}";
                                $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                            }
                        }

                        $amount = $amount + $addedAmount;
                    }

                    // </editor-fold>
                } elseif ($paymentMethod == 1 && $paymentType == 2 && ($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 8)) {
                    // <editor-fold defaultstate="collapsed" desc="PAYMENT - OUT - Other with GV">
                    if ($generalVendorId != 'NULL') {
                        $sql = "SELECT p.*, b.currency_id AS b_currency_id
                        FROM `payment` p
                        INNER JOIN bank b
                        ON b.bank_id = p.bank_id
                        WHERE p.payment_type = {$paymentType}
                        AND p.payment_method = 2 AND p.payment_status = 0
                        AND p.invoice_id = {$invoiceId}
                        AND p.amount_converted > 0
                        AND p.company_id = {$_SESSION['companyId']}
                        ORDER BY p.payment_id ASC";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($result !== false && $result->num_rows > 0) {
                            while ($row = $result->fetch_object()) {
                                if ($row->b_currency_id == $bankCurrencyId && $bankCurrencyId == $journalCurrencyId) {
                                    // IDR - IDR - IDR
                                    //$addedAmount = $row->amount;
                                    $addedAmount = 0;
                                } elseif ($row->b_currency_id != $bankCurrencyId && $bankCurrencyId == $journalCurrencyId) {
                                    // USD - IDR - IDR
                                    //$addedAmount = $row->amount * $row->exchange_rate;
                                    $addedAmount = 0 * $row->exchange_rate;
                                } elseif ($row->b_currency_id == $bankCurrencyId && $bankCurrencyId != $journalCurrencyId) {
                                    // USD - USD - IDR
                                    //$addedAmount = $row->amount;
                                    $addedAmount = 0;
                                } elseif ($row->b_currency_id != $bankCurrencyId && $bankCurrencyId != $journalCurrencyId) {
                                    // IDR - USD - IDR
                                    //$addedAmount = $row->amount / $row->exchange_rate;
                                    $addedAmount = 0 * $row->exchange_rate;
                                }
                                $sql2 = "UPDATE payment SET amount = 0, amount_converted = 0 WHERE payment_id = {$row->payment_id}";
                                $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                            }
                        }

                        $amount = $amount + $addedAmount;
                    }
                }
                // </editor-fold>

//        elseif($paymentMethod == 2 && $paymentType == 2) {
//            $ppn = 0;
//            $pph = 0;
//        }
                elseif ($paymentMethod == 2 && $paymentType == 1 && $paymentFor != 4) {
                    // <editor-fold defaultstate="collapsed" desc="DOWN PAYMENT - IN - PKS">
                    $sql = "SELECT shipment_id, COALESCE(dp_amount, 0) AS dp_amount FROM shipment WHERE sales_id = {$salesId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($result->num_rows > 0) {
                        $tempStamp = 1;
                        while ($row = $result->fetch_object()) {

                            $downPayment1 = $myDatabase->real_escape_string($_POST['downPayment' . $row->shipment_id]);
                            //$ppn = $myDatabase->real_escape_string($_POST['ppnSales'. $row->shipment_id]);
                            $ppn = 0;
                            $downPayment = $downPayment1 + $ppn;
                            if ($downPayment != '' && $downPayment != 0) {
                                if ($exchangeRate == '') {
                                    $exchangeRate = 1;
                                }

                                if ($bankCurrencyId == $currencyId && $currencyId != $journalCurrencyId) {
                                    $downPaymentDetailConverted = $downPayment;
                                    $downPaymentDetailJournal = $downPayment * $exchangeRate;
                                } elseif ($bankCurrencyId != $currencyId && $currencyId != $journalCurrencyId) {
                                    $downPaymentDetailConverted = $downPayment / $exchangeRate;
                                    $downPaymentDetailJournal = $downPayment;
                                } elseif ($bankCurrencyId != $currencyId && $currencyId == $journalCurrencyId) {
                                    $downPaymentDetailConverted = $downPayment * $exchangeRate;
                                    $downPaymentDetailJournal = $downPayment * $exchangeRate;
                                } else {
                                    $downPaymentDetailConverted = $downPayment;
                                    $downPaymentDetailJournal = $downPayment;
                                }


                                $convertedDownPayment = $row->dp_amount + $downPaymentDetailConverted;

                                //untuk table payment
                                //$amount = $amount + $downPayment;
                                //$originalAmount = $originalAmount + $downPayment;

                                $amount = $amount;
                                $originalAmount = $originalAmount;

                                //amount = ikut cur payment
                                //amount_converted = ikut cur sales
                                //amount_journal = idr
                                $sql = "INSERT INTO payment_detail (payment_id, amount, amount_converted, amount_journal, shipment_id) VALUES ("
                                    . "{$tempStamp}, {$downPayment}, {$downPaymentDetailConverted}, {$downPaymentDetailJournal}, {$row->shipment_id})";
                                $resultUpdate = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                $sql = "UPDATE shipment SET dp_amount = {$convertedDownPayment} WHERE shipment_id = {$row->shipment_id}";
                                $resultUpdate = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    }

                    if ($amount <= 0) {
                        $boolContinue2 = false;
                    }
                    // </editor-fold>
                } elseif ($paymentMethod == 1 && $paymentType == 1 && $paymentFor == 1) {
                    // <editor-fold defaultstate="collapsed" desc="PAYMENT - IN - PKS">


                    if ($exchangeRate == '') {
                        $exchangeRate = 1;
                    }

                    if ($bankCurrencyId == $currencyId && $currencyId != $journalCurrencyId) {
                        // USD - USD - IDR
                        $amountConverted = $amount;
                        $grandTotalConverted = $grandTotal;
                    } elseif ($bankCurrencyId != $currencyId && $currencyId != $journalCurrencyId) {
                        // IDR - USD - IDR
                        $amountConverted = $amount / $exchangeRate;
                        $grandTotalConverted = $grandTotal;
                    } elseif ($bankCurrencyId != $currencyId && $currencyId == $journalCurrencyId) {
                        // USD - IDR - IDR
                        $amountConverted = $amount * $exchangeRate;
                        $grandTotalConverted = $grandTotal;
                    } else {
                        $amountConverted = $amount;
                        $grandTotalConverted = $grandTotal;
                    }

                    if ($amountConverted < $grandTotalConverted || ($amountConverted != 0 && $amountConverted > $grandTotalConverted)) {
                        $boolContinue2 = false;
                    } else {

                        $boolUpdateShipment = true;

                        if (isset($_POST['checkedSlips'])) {
                            $checks = $_POST['checkedSlips'];
                            $tempStamp = 1;
                            for ($i = 0; $i < sizeof($checks); $i++) {
                                if ($shipmentNos == '') {
                                    $shipmentNos .= $checks[$i];
                                } else {
                                    $shipmentNos .= ',' . $checks[$i];
                                }

                                $sql = "SELECT sh.*
                                FROM shipment sh
                                WHERE sh.shipment_id = {$checks[$i]}";
                                $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $rowShipment = $resultShipment->fetch_object();
                                $shipmentPayment = $rowShipment->invoice_amount - $rowShipment->dp_amount;

                                if ($bankCurrencyId == $currencyId && $currencyId != $journalCurrencyId) {
                                    $shipmentAmount = $shipmentPayment;
                                    $shipmentPaymentConverted = $shipmentPayment;
                                    $shipmentPaymentJournal = $shipmentPayment * $exchangeRate;
                                } elseif ($bankCurrencyId != $currencyId && $currencyId != $journalCurrencyId) {
                                    $shipmentAmount = $shipmentPayment * $exchangeRate;
                                    $shipmentPaymentConverted = $shipmentPayment;
                                    $shipmentPaymentJournal = $shipmentPayment * $exchangeRate;
                                } elseif ($bankCurrencyId != $currencyId && $currencyId == $journalCurrencyId) {
                                    $shipmentAmount = $shipmentPayment / $exchangeRate;
                                    $shipmentPaymentConverted = $shipmentPayment;
                                    $shipmentPaymentJournal = $shipmentPayment;
                                } else {
                                    $shipmentAmount = $shipmentPayment;
                                    $shipmentPaymentConverted = $shipmentPayment;
                                    $shipmentPaymentJournal = $shipmentPayment;
                                }


                                $sql = "INSERT INTO payment_detail (payment_id, amount, amount_converted, amount_journal, shipment_id) VALUES ("
                                    . "{$tempStamp}, {$shipmentAmount}, {$shipmentPaymentConverted}, {$shipmentPaymentJournal}, {$checks[$i]})";
                                $resultUpdate = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                            }
                        }

                        if ($shipmentNos == "") {
                            $boolContinue2 = false;
                        }
                    }
                    // </editor-fold>
                }

                if ($boolContinue2) {
                    $sql = "select DATE_FORMAT(STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), '%y%m') AS slip_prefix from dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $rowSlip = $resultSlip->fetch_object();
                    $checkPaymentNo = $rowSlip->slip_prefix;

//            $checkPaymentNo = $currentYearMonth;

                    $sql = "SELECT LPAD(RIGHT(payment_no, 5) + 1, 5, '0') AS next_id FROM payment WHERE company_id = {$_SESSION['companyId']} AND bank_id = {$bankId} AND payment_no LIKE '{$checkPaymentNo}%' ORDER BY payment_no DESC LIMIT 1";
                    $resultPaymentNo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultPaymentNo->num_rows == 0) {
                        $sql = "SELECT LPAD(1, 5, '0') AS next_id FROM dual LIMIT 1";
                        $resultPaymentNo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }
                    $rowPaymentNo = $resultPaymentNo->fetch_object();
                    $nextPaymentNo = $rowPaymentNo->next_id;
                    $paymentNo = $checkPaymentNo . '-' . $nextPaymentNo;

                    if ($exchangeRate == '') {
                        $exchangeRate = 1;
                    }

                    if ($bankCurrencyId == $currencyId && $currencyId != $journalCurrencyId) {
                        // USD - USD - IDR
                        $originalAmountConverted = $originalAmount * $exchangeRate;
                        $amountConverted = $amount * $exchangeRate;
                        $ppnConverted = $ppn;
                        $pphConverted = $pph;
                        $amountJournal = $originalAmount * $exchangeRate;
                        $ppnJournal = $ppn * $exchangeRate;
                        $pphJournal = $pph * $exchangeRate;
                    } elseif ($bankCurrencyId != $currencyId && $currencyId != $journalCurrencyId) {
                        // IDR - USD - IDR
                        $originalAmountConverted = $originalAmount / $exchangeRate;
                        $amountConverted = $amount / $exchangeRate;
                        $ppnConverted = $ppn / $exchangeRate;
                        $pphConverted = $pph / $exchangeRate;
                        $amountJournal = $originalAmount;
                        $ppnJournal = $ppn;
                        $pphJournal = $pph;
                        $currencyId = $bankCurrencyId;
                    } elseif ($bankCurrencyId != $currencyId && $currencyId == $journalCurrencyId) {
                        // USD - IDR - IDR
                        $originalAmountConverted = $originalAmount * $exchangeRate;
                        $amountConverted = $amount * $exchangeRate;
                        $ppnConverted = $ppn * $exchangeRate;
                        $pphConverted = $pph * $exchangeRate;
                        $amountJournal = $originalAmount * $exchangeRate;
                        $ppnJournal = $ppn * $exchangeRate;
                        $pphJournal = $pph * $exchangeRate;
                        $currencyId = $bankCurrencyId;
                    } else {
                        $originalAmountConverted = $originalAmount;
                        $amountConverted = $amount;
                        $ppnConverted = $ppn;
                        $pphConverted = $pph;
                        $amountJournal = $originalAmount;
                        $ppnJournal = $ppn;
                        $pphJournal = $pph;

                    }
                    if ($freightId != '' && $fc_ppn_dp != 0) {
                        $amountJournal = $originalAmount - $fc_ppn_dp;
                    }elseif ($freightId != '' && $ppn != 0) {
                        $amountJournal = $originalAmount;
                    }elseif ($freightId != '' && $ppn == 0) {
                        $amountJournal = $amountConverted;
                    }
                    //closingDate
                    $newPaymentDate = implode("-", array_reverse(explode("/", $paymentDate)));
					echo $newPaymentDate;
                    //Belum Fix StockpileContractId nya gatau yang mana
                    $checkClosingDate = explode('-', closingDate($newPaymentDate, 'Payment - Payment'));
                    $boolClosing = $checkClosingDate[0];
                    $closingDate = $checkClosingDate[1];

                    if ($boolClosing) {
                        // currency_id = cur yg di bayarkan
                        // amount, original_amount, ppn, pph = amount yg di input d form
                        // *_converted = di konversi ke cur yg d bayarkan
                        // *_journal = di konversi ke IDR
                        $sqlaa = "INSERT INTO payment (payment_no, payment_date, payment_type, payment_type2, payment_method, account_id, bank_id, stockpile_contract_id, invoice_id, payment_cash_id,"
                            . "vendor_id, sales_id, freight_id, vendor_handling_id, labor_id, stockpile_contract_id_2,shipment_id, vendor_bank_id, payment_notes, remarks, tax_invoice, invoice_no, currency_id, "
                            . "exchange_rate, qty, price, termin, amount, amount_converted, original_amount, original_amount_converted, ppn_amount, ppn_amount_converted, "
                            . "pph_amount, pph_amount_converted, amount_journal, ppn_journal, pph_journal, general_vendor_id, payment_location, cheque_no, entry_by, entry_date, stockpile_location, invoice_date,period_from,period_to,remarks2,handlingContract,freightContract,curahContract,freightDP,handlingDP,curahDP, gv_email, gv_email2) VALUES ("
                            . "'{$paymentNo}', STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), {$paymentType}, {$payment_type},{$paymentMethod}, {$accountId}, {$bankId}, "
                            . "{$stockpileContractId}, {$invoiceId}, {$paymentCashId}, {$vendorId1}, {$salesId}, {$freightId}, {$vendorHandlingId}, {$laborId}, {$stockpileContract_Id}, {$shipment_Id}, {$vendorBank}, '{$notes}', '{$remarks}', "
                            . "'{$taxInvoice}', '{$invoiceNo}', {$currencyId}, {$exchangeRate}, "
                            . "{$qty}, {$price}, {$termin},{$amount}, {$amountConverted}, {$originalAmount}, {$originalAmountConverted}, {$ppn}, {$ppnConverted}, "
                            . "{$pph}, {$pphConverted}, {$amountJournal}, {$ppnJournal}, {$pphJournal}, {$generalVendorId}, {$paymentLocation}, '{$chequeNo}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$stockpileLocation},STR_TO_DATE('$invoiceDate', '%d/%m/%Y %H:%i:%s'),STR_TO_DATE('{$periodPaymentFrom}', '%d/%m/%Y'),STR_TO_DATE('{$periodPaymentTo}', '%d/%m/%Y'), '{$remarks2}', {$handlingContract}, {$freightContract}, {$curahContract},{$downPaymentFC},{$downPaymentHC},{$downPaymentC}, '{$gv_email}', '{$gv_email2}')";
                        $result = $myDatabase->query($sqlaa, MYSQLI_STORE_RESULT);

                        if ($result !== false) {
                            $paymentId = $myDatabase->insert_id;

                            $return_value = '|OK|Payment has inserted successfully.|' . $paymentId . '|';

                            if ($boolUpdateTransaction) {
                                $sql = "UPDATE `transaction` SET {$updateProperty} = {$paymentId} WHERE transaction_id IN ($slipNos)";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
								echo $sql;
                                $sql = "SELECT transaction_id, sync_status FROM `transaction` WHERE transaction_id IN ($slipNos)";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if ($result !== false && $result->num_rows > 0) {
                                    while ($row = $result->fetch_object()) {
                                        $syncStatus = 0;
                                        if ($row->sync_status == 1) {
                                            $syncStatus = 2;
                                        }

                                        $sql2 = "UPDATE `transaction` SET sync_status = {$syncStatus} WHERE transaction_id = {$row->transaction_id}";
                                        $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                                    }
                                }
                            }

                              //add by Yeni
							if($invoiceId == 'NULL'){
								$invoiceId = 0;
							}else if($pengajuanIdOA == 'NULL'){
								$pengajuanIdOA = 0;
							}else if($stockpileContractId == 'NULL'){
								$stockpileContractId = 0;
							}
							
							//echo "OA ". $pengajuanIdOA;
                            if ($invoiceId != 0) { //General
                                $sqlLog = "UPDATE logbook_new set payment_id = {$paymentId}, status1 = 3 where invoice_id = {$invoiceId}";
                                $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);

                                $sqlInv = "UPDATE invoice set invoice_status = 1 where invoice_id = {$invoiceId}";
                                $resultInv = $myDatabase->query($sqlInv, MYSQLI_STORE_RESULT);
                            } else if($pengajuanIdOA != '' || $pengajuanIdOA != 0 ){ //SEMENTEARA
								$sqlLog = "UPDATE logbook_new set payment_id = {$paymentId}, status1 = 3 where ppayment_id = {$pengajuanIdOA}";
                                $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
								//echo "Lobook " . $pengajuanIdOA;

                                $sqlOA = "UPDATE pengajuan_payment set dp_status = 3, payment_id = {$paymentId} where idPP = {$pengajuanIdOA}";
                                $resultOA = $myDatabase->query($sqlOA, MYSQLI_STORE_RESULT);
								
							} else if ($stockpileContractId != '') { //KONTRAK PKS
                                //INSERT LOGBOOK INVOICE
                                $sqlPurchasing = "SELECT pur.purchasing_id FROM purchasing pur
										LEFT JOIN po_pks po ON po.purchasing_id = pur.purchasing_id
										LEFT JOIN po_contract poc ON poc.po_pks_id = po.po_pks_id
										LEFT JOIN contract con ON con.contract_id = poc.contract_id
										LEFT JOIN stockpile_contract sc ON sc.contract_id = con.contract_id
										WHERE stockpile_contract_id = {$stockpileContractId}";
                                $resultPurchasing = $myDatabase->query($sqlPurchasing, MYSQLI_STORE_RESULT);
                                if ($resultPurchasing !== false && $resultPurchasing->num_rows == 1) {
                                    $rowPurchasing = $resultPurchasing->fetch_object();
                                    $purchasingId = $rowPurchasing->purchasing_id;

                                    $sqlLog = "UPDATE logbook_new set payment_id = {$paymentId}, status1 = 3 where purchasing_Id = {$purchasingId}";
                                    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);

                                    $sqlPurchasing = "UPDATE purchasing set status = 2, payment_id = {$paymentId} where purchasing_Id = {$purchasingId}";
                                    $resultPurchasing = $myDatabase->query($sqlPurchasing, MYSQLI_STORE_RESULT);

                                }
								
								 if ($adjId != '') {
                                    $sqladj = "UPDATE contract_adjustment set payment_id = {$paymentId} WHERE adj_id = {$adjId}";
                                    $resultadj = $myDatabase->query($sqladj, MYSQLI_STORE_RESULT);

                                }
                            }

                            if ($boolUpdateShipment) {
                                $sql = "UPDATE `shipment` SET payment_id = {$paymentId} WHERE shipment_id IN ($shipmentNos)";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }

                            if ($tempStamp != '') {
                                $sql = "UPDATE payment_detail SET payment_id = {$paymentId} WHERE payment_id = {$tempStamp}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                            if ($paymentFor == 0) {
                                $sql = "SELECT con.contract_id, con.price_converted * con.quantity AS contract_amount, SUM(p.amount_converted) AS paid_amount, v.ppn, v.pph
                            FROM stockpile_contract sc
                            INNER JOIN `contract` con
                                ON con.contract_id = sc.contract_id
                            INNER JOIN `payment` p
                                ON p.stockpile_contract_id = sc.stockpile_contract_id
							INNER JOIN vendor v
								ON v.vendor_id = con.vendor_id
                            WHERE sc.stockpile_contract_id = {$stockpileContractId}
                            AND con.company_id = {$_SESSION['companyId']} AND p.payment_status = 0
                            GROUP BY sc.stockpile_contract_id";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if ($result->num_rows > 0) {
                                    $row = $result->fetch_object();
                                    $ppn = $row->ppn;
                                    $pph = $row->pph;

                                    $ppnAmount = ($ppn / 100) * $row->contract_amount;
                                    $pphAmount = ($pph / 100) * $row->contract_amount;
                                    $total = $pphAmount + $ppnAmount + $row->contract_amount;


                                    if ($row->paid_amount >= $total) {
                                        $sqlUpdate = "UPDATE `contract` SET payment_status = 1 WHERE contract_id = {$row->contract_id}";
                                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                                    }
                                }
                            }

                            if ($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 8) {
                                if ($paymentMethod == 1) {
                                    $sqlUpdate = "UPDATE `invoice` SET payment_status = 1 WHERE invoice_id = {$invoiceId}";
                                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

                                }
                            }


                            $sql = "SELECT b.* FROM bank b LEFT JOIN payment p ON p.`bank_id` = b.`bank_id` WHERE p.payment_id = {$paymentId}";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result !== false && $result->num_rows > 0) {
                                while ($row = $result->fetch_object()) {
                                    $bankType = $row->bank_type;
                                    $bankStockpile = $row->stockpile_id;

                                }
                            }


                            if ($paymentFor == 10) {
                                $sqlUpdate = "UPDATE `payment_cash` SET payment_id = {$paymentId}, payment_cash_method = {$paymentMethod} WHERE payment_id IS NULL AND entry_by = {$_SESSION['userId']}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

                                if ($paymentMethod == 1) {
                                    $sqlUpdate = "UPDATE `payment_cash` SET payment_cash_status = 1 WHERE payment_id = {$paymentId}";
                                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

                                }
                            }
							
							if($paymentFor == 12){
					if($paymentMethod == 2){
						$shipment_id = 0;
						$sql = "SELECT a.*, b.`id_user`, b.`stockpile_id`
								FROM non_adv_detail a
								LEFT JOIN non_adv_settle b ON a.`sa_id` = b.`sa_id`
								WHERE a.`sa_id` = {$saIdNon}";
						$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
						if($result !== false && $result->num_rows > 0) {
                        while($row = $result->fetch_object()) {
							$amount = $row->amount;
							$keterangan = $row->keterangan;
							$type = $row->type;
							$account_id = $row->account_id;
							$id_user = $row->id_user;
							$shipment_id = $row->shipment_id;
							$stockpile_id = $row->stockpile_id;
						}
						$sql = "INSERT INTO `payment_cash` (payment_id, payment_cash_method, type, account_id, general_vendor_id, shipment_id, stockpile_remark, qty, price, termin, amount, amount_converted, currency_id, exchange_rate, ppnID, ppn, ppn_converted, pphID, pph, pph_converted, tamount, tamount_converted, notes, company_id, entry_by, entry_date, idUOM, sa_id_non) VALUES ({$paymentId}, 2, {$type}, {$account_id}, {$id_user}, {$shipment_id}, {$stockpile_id} ,1, '{$amount}', 100, '{$amount}', '{$amount}',1,1,0,0,0,0,0,0,'{$amount}','{$amount}','{$keterangan}', 2, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),17,{$saIdNon})";
						$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
						$pc_dp_id = $myDatabase->insert_id;
						
						$sqlUpdate = "UPDATE `non_adv_settle` SET pc_dp_id = {$pc_dp_id} WHERE sa_id = {$saIdNon}";
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
						
						$sqlUpdatePG = "UPDATE `non_adv_settle` SET invoice_status = 1 WHERE sa_id = {$saIdNon}";
						$updatePG = $myDatabase->query($sqlUpdatePG, MYSQLI_STORE_RESULT);
						
					}
						
					}else if($paymentMethod == 1){
						
						$shipment_id = 0;
						$sql1 = "SELECT a.*, IFNULL(a.`shipment_id`,0) AS shipment_id, b.`stockpile_id`, c.`sa_id_adv`, d.`pc_dp_id`, c.`amount` AS advance
								FROM non_settle_detail a
								LEFT JOIN non_adv_settle b ON a.`sa_id` = b.`sa_id`
								LEFT JOIN non_dp c ON c.`settle_id` = a.`settle_id`
								LEFT JOIN non_adv_settle d ON d.`sa_id` = c.`sa_id_adv`
								WHERE a.`sa_id` = {$saIdNon}";
						$result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
						if($result1 !== false && $result1->num_rows > 0) {
                        while($row1 = $result1->fetch_object()) {
							$amount = $row1->amount;
							$keterangan = $row1->items;
							$type = $row1->settlementType;
							$account_id = $row1->accountId;
							$id_user = $row1->id_user;
							$shipment_id = $row1->shipment_id;
							$stockpile_id = $row1->stockpile_id;
							$qty = $row1->qty;
							$price = $row1->price;
							$uom = $row1->uom;
							$sa_id_adv = $row1->sa_id_adv;
							$payment_cash_dp = $row1->pc_dp_id;
							$advance = $row1->advance;
							
						
						$sql2 = "INSERT INTO `payment_cash` (payment_id, payment_cash_method, type, account_id, general_vendor_id, shipment_id, stockpile_remark, qty, price, termin, amount, amount_converted, currency_id, exchange_rate, ppnID, ppn, ppn_converted, pphID, pph, pph_converted, tamount, tamount_converted, notes, company_id, entry_by, entry_date, idUOM, sa_id_non) VALUES ({$paymentId}, 2, {$type}, {$account_id}, {$id_user}, {$shipment_id}, {$stockpile_id} ,'{$qty}', '{$price}', 100, '{$amount}', '{$amount}',1,1,0,0,0,0,0,0,'{$amount}','{$amount}','{$keterangan}', 2, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),'{$uom}',{$saIdNon})";
						$result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
						$payment_cash_id = $myDatabase->insert_id;
						
						if($payment_cash_dp != 'NULL'){
							
						$sql3 = "INSERT INTO `payment_cash_dp` (payment_cash_id, payment_cash_dp, amount_payment) VALUES ({$payment_cash_id}, {$payment_cash_dp}, '{$advance}')";
						$result3 = $myDatabase->query($sql3, MYSQLI_STORE_RESULT);
						
						}
						
						//$sqlUpdate = "UPDATE `non_adv_settle` SET pc_dp_id = {$pc_dp_id} WHERE sa_id = {$saIdNon}";
                        //$resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
						}
						//echo $sqlaabb;
						
					}
						$sqlUpdatePG = "UPDATE `non_adv_settle` SET invoice_status = 1 WHERE sa_id = {$saIdNon}";
						$updatePG = $myDatabase->query($sqlUpdatePG, MYSQLI_STORE_RESULT);
						
						 //UPDATE LOGBOOK 
                        $sqlLog = "UPDATE logbook_new set payment_id = {$paymentId}, status1 = 3 where non_perdin_id = {$saIdNon}";
                        $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
						
					}
					
					
				}
				
				if($paymentFor == 11){
					if($paymentMethod == 2){
						$shipment_id = 0;
						$sql = "SELECT b.amount AS amount,b.keterangan AS keterangan, b.`type`, b.`account_id`, a.`id_user`, a.`stockpile_id`,b.`adv_detail_id`
                        FROM perdin_adv_settle a
                        LEFT JOIN perdin_adv_detail b ON a.`sa_id` = b.`sa_id`
                        WHERE a.`sa_id` = {$saId}";
						$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
						if($result !== false && $result->num_rows > 0) {
                        while($row = $result->fetch_object()) {
							$amount = $row->amount;
							$keterangan = $row->keterangan;
							$type = $row->type;
							$account_id = $row->account_id;
							$id_user = $row->id_user;
							$adv_detail_id = $row->adv_detail_id;
							$stockpile_id = $row->stockpile_id;

                        $sqli = "INSERT INTO `payment_cash` (payment_id, payment_cash_method, type, account_id, general_vendor_id, shipment_id, stockpile_remark, qty, price, termin, amount, amount_converted, currency_id, exchange_rate, ppnID, ppn, ppn_converted, pphID, pph, pph_converted, tamount, tamount_converted, notes, company_id, entry_by, entry_date, idUOM,sa_id) VALUES ({$paymentId}, 2, {$type}, {$account_id}, {$id_user}, {$shipment_id}, {$stockpile_id} ,1, '{$amount}', 100, '{$amount}', '{$amount}',1,1,0,0,0,0,0,0,'{$amount}','{$amount}','{$keterangan}', 2, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),17,{$saId})";
						$resulti = $myDatabase->query($sqli, MYSQLI_STORE_RESULT);
						$pc_dp_id = $myDatabase->insert_id;
						
						$sqlUpdate = "UPDATE `perdin_adv_detail` SET pc_dp_id = {$pc_dp_id} WHERE adv_detail_id = {$adv_detail_id}";
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
						
                    }
						
						
						$sqlUpdatePG = "UPDATE `perdin_adv_settle` SET invoice_status = 1 WHERE sa_id = {$saId}";
						$updatePG = $myDatabase->query($sqlUpdatePG, MYSQLI_STORE_RESULT);
                        echo $sql;
						
					}
						
					}else if($paymentMethod == 1){
						echo 'aaa';
						//$shipment_id2 = 0;
						$sql1 = "SELECT a.*, IFNULL(a.`shipment_id`,0) AS shipment_id, b.`stockpile_id`, c.`sa_id_adv`, d.`pc_dp_id`, c.`amount` AS advance
                        FROM perdin_settle_detail a
                        LEFT JOIN perdin_dp c ON c.`settle_id` = a.`settle_id`
                        LEFT JOIN perdin_adv_settle b ON a.`sa_id` = b.`sa_id`
                        LEFT JOIN perdin_adv_detail d ON d.`adv_detail_id` = c.`sa_id_adv`
                        WHERE a.`sa_id` = {$saId}";
						$result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
						if($result1 !== false && $result1->num_rows > 0) {
                        while($row1 = $result1->fetch_object()) {
							$amount = $row1->amount;
							$keterangan = $row1->notes;
							$type = $row1->settlementType;
							$account_id = $row1->accountId;
							$id_user = $row1->id_user;
							$shipment_id = $row1->shipment_id;
							$stockpile_id = $row1->stockpile_id;
							$qty = $row1->qty;
							$price = $row1->price;
							$uom = $row1->uom;
							$sa_id_adv = $row1->sa_id_adv;
							$payment_cash_dp = $row1->pc_dp_id;
							$advance = $row1->advance;
							
							
							
						
						$sql2 = "INSERT INTO `payment_cash` (payment_id, payment_cash_method, type, account_id, general_vendor_id, shipment_id, stockpile_remark, qty, price, termin, amount, amount_converted, currency_id, exchange_rate, ppnID, ppn, ppn_converted, pphID, pph, pph_converted, tamount, tamount_converted, notes, company_id, entry_by, entry_date, idUOM,sa_id) VALUES ({$paymentId}, 2, {$type}, {$account_id}, {$id_user}, {$shipment_id}, {$stockpile_id} ,'{$qty}', '{$price}', 100, '{$amount}', '{$amount}',1,1,0,0,0,0,0,0,'{$amount}','{$amount}','{$keterangan}', 2, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),'{$uom}',{$saId})";
						$result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
						$payment_cash_id = $myDatabase->insert_id;
						
						if($payment_cash_dp != 'NULL'){
							
						$sql3 = "INSERT INTO `payment_cash_dp` (payment_cash_id, payment_cash_dp, amount_payment) VALUES ({$payment_cash_id}, {$payment_cash_dp}, '{$advance}')";
						$result3 = $myDatabase->query($sql3, MYSQLI_STORE_RESULT);
						
						echo 'bbb';
						}
						echo $sql2;
						
						//$sqlUpdate = "UPDATE `non_adv_settle` SET pc_dp_id = {$pc_dp_id} WHERE sa_id = {$saIdNon}";
                        //$resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
						}
						echo $sql2;
						//echo $sqlaabb;
						
					}
						$sqlUpdatePG = "UPDATE `perdin_adv_settle` SET invoice_status = 1 WHERE sa_id = {$saId}";
						$updatePG = $myDatabase->query($sqlUpdatePG, MYSQLI_STORE_RESULT);
						
						  //UPDATE LOGBOOK 
                        $sqlLog = "UPDATE logbook_new set payment_id = {$paymentId}, status1 = 3 where perdin_id = {$saId}";
                        $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
						
					}
					
					
				}
				
                            if (($paymentFor == 10 || $paymentFor == 11 || $paymentFor == 12) && $bankType == 2) {
                                insertGeneralLedger($myDatabase, 'PETTY CASH', "NULL", "NULL", "NULL", "NULL", $paymentId);
                                insertReportGL($myDatabase, 'PETTY CASH', "NULL", "NULL", "NULL", "NULL", $paymentId);
                            } elseif ($bankStockpile != 10) {
                                insertGeneralLedger($myDatabase, 'PAYMENT ADMIN', "NULL", "NULL", "NULL", "NULL", $paymentId);
                                insertReportGL($myDatabase, 'PAYMENT ADMIN', "NULL", "NULL", "NULL", "NULL", $paymentId);
                            } else {
                                insertGeneralLedger($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", "NULL", $paymentId);
                                insertReportGL($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", "NULL", $paymentId);
                            }
							
							$sqlLogPayment = "INSERT INTO log_payment(payment_id, entry_by, entry_date, payment_date, log) VALUES "
                                            ."({$paymentId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), "
                                            ." STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), 'INSERT')";
                            $resultLogPayment = $myDatabase->query($sqlLogPayment, MYSQLI_STORE_RESULT);
                            unset($_SESSION['payment']);
                        } else {
                            $return_value = '|FAIL|Failed insert payment.|' . $sqlaa . '|';
                            if ($tempStamp != '') {
                                $sql = "DELETE FROM payment_detail WHERE payment_id = {$tempStamp}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    } else {
                        echo $closingDate;
                        die();
                    }//close closing date
                } else {
                    $return_value = '|FAIL|Please insert correct amount.||';
                }
            } else {
                $return_value = '|FAIL|Please fill the required fields.||';
                echo $paymentDate;
                echo $paymentType;
                echo $paymentMethod;
                echo $accountId;
                echo $bankId;
                echo $currencyId;
                echo $boolContinue;
				echo $sql;

            }
        } else {
            $return_value = '|FAIL|Please Choose Different Bank.||';
        }
    } else {
        $return_value = '|FAIL|Tanggal Input harus sama/melebihi tanggal kontrak/invoice.|';
    }
    echo $return_value;

    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'payment_account_data') {
    // <editor-fold defaultstate="collapsed" desc="payment_account_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $accountType = $myDatabase->real_escape_string($_POST['accountType']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $accountName = $myDatabase->real_escape_string($_POST['accountName']);
    // </editor-fold>

    if ($accountNo != '' && $accountName != '') {
        $sql = "SELECT * FROM `account` WHERE UPPER(account_no) = UPPER('{$accountNo}')";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result !== false && $result->num_rows == 0) {
            $sql = "INSERT INTO `account` (account_type, account_no, account_name, entry_by, entry_date) VALUES ("
                . "{$accountType}, '{$accountNo}', '{$accountName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $accountId = $myDatabase->insert_id;

                $return_value = '|OK|Account has successfully inserted.|ACCOUNT~' . $accountId . '|';
            } else {
                $return_value = '|FAIL|Insert account failed.||';
            }
        } else {
            $return_value = '|FAIL|Account No. already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'payment_bank_data') {
    // <editor-fold defaultstate="collapsed" desc="payment_bank_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
    $bankAccountNo = $myDatabase->real_escape_string($_POST['bankAccountNo']);
    $bankAccountName = $myDatabase->real_escape_string($_POST['bankAccountName']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $openingBalance = str_replace(",", "", $myDatabase->real_escape_string($_POST['openingBalance']));
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $bankType = $myDatabase->real_escape_string($_POST['bankType']);
    $bankCode = $myDatabase->real_escape_string($_POST['bankCode']);
    // </editor-fold>

    if ($bankName != '' && $bankAccountNo != '' && $bankAccountName != '' && $currencyId != '' && $accountId != '' && $openingBalance != '' &&
        $bankType != '' && $bankCode != '') {
        $sql = "SELECT * FROM `bank` WHERE UPPER(bank_name) = UPPER('{$bankName}') AND UPPER(bank_account_no) = UPPER('{$bankAccountNo}')";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result !== false && $result->num_rows == 0) {
            $sql = "INSERT INTO `bank` (bank_name, bank_type, bank_code, bank_account_no, bank_account_name, currency_id, opening_balance, account_id, entry_by, entry_date) VALUES ("
                . "'{$bankName}', {$bankType}, '{$bankCode}', '{$bankAccountNo}', UPPER('{$bankAccountName}'), {$currencyId}, {$openingBalance}, {$accountId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $bankId = $myDatabase->insert_id;

                $return_value = '|OK|Bank has successfully inserted.|BANK~' . $bankId . '|';
            } else {
                $return_value = '|FAIL|Insert bank failed.||';
            }
        } else {
            $return_value = '|FAIL|Bank Account already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'payment_general_vendor_data') {
    // <editor-fold defaultstate="collapsed" desc="payment_general_vendor_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    $vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>

    if ($vendorName != '' && $vendorAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
        $sql = "SELECT * FROM `general_vendor` WHERE UPPER(general_vendor_name) = UPPER('{$vendorName}')";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;

            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }

            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }

            if ($ppn == 'NONE') {
                $ppn = 0;
            }

            if ($pph == 'NONE') {
                $pph = 0;
            }

            $sql = "INSERT INTO `general_vendor` (general_vendor_name, general_vendor_address, npwp, npwp_name, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                . "'{$vendorName}', '{$vendorAddress}', '{$npwp}', '{$npwp_name}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $vendorId = $myDatabase->insert_id;

                $return_value = '|OK|General Vendor has successfully inserted.|GENERALVENDOR~' . $vendorId . '|';
            } else {
                $return_value = '|FAIL|Insert general vendor failed.' . $sql . '||';
            }
        } else {
            $return_value = '|FAIL|General Vendor already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'logout') {
    // <editor-fold defaultstate="collapsed" desc="Logout and go back to index page">

    session_unset();
    echo 1;
    // </editor-fold>
} elseif (isset($_POST['action']) && $_POST['action'] == 'import_contract') {
    // <editor-fold defaultstate="collapsed" desc="import_contract">

    $return_value = '';
    $boolContinue = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">

    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);

    if ($stockpileId == '') {
        $stockpileId = 0;
    }

    // </editor-fold>

    if (isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import";

        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if ($boolContinue) {

            $importResult = excelImportContract($myDatabase, $attachmentPath, $stockpileId);
            $importResult = explode("|", $importResult);

            if ($importResult[0] == 'OK') {
                $return_value = '|OK|' . $importResult[1] . '|';
            } else {
                $return_value = '|FAIL|' . $importResult[1] . '|';
            }

        }
    } else {
        $return_value = '|FAIL|Please fill required fields.|';
    }

    echo $return_value;

    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_vendor_branch') {
    // <editor-fold defaultstate="collapsed" desc="update_vendor_branch">

    $return_value = '';
    //$boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $branchPKS = $myDatabase->real_escape_string($_POST['branchPKS']);

    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    $branchOA = $myDatabase->real_escape_string($_POST['branchOA']);

    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $branchOB = $myDatabase->real_escape_string($_POST['branchOB']);

    $vendorHandlingId = $myDatabase->real_escape_string($_POST['vendorHandlingId']);
    $branchHC = $myDatabase->real_escape_string($_POST['branchHC']);

    $generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId']);
    $branchGV = $myDatabase->real_escape_string($_POST['branchGV']);
    // </editor-fold>

    //if ($moduleId == '') {
    //    $boolNew = true;
    //}

    if ($vendorId != '') {

        $sql = "UPDATE vendor SET "
            . "branch = '{$branchPKS}'"
            . "WHERE vendor_id = {$vendorId}";

    } else if ($freightId != '') {

        $sql = "UPDATE freight SET "
            . "branch = '{$branchOA}'"
            . "WHERE freight_id = {$freightId}";

    } else if ($laborId != '') {

        $sql = "UPDATE labor SET "
            . "branch = '{$branchOB}'"
            . "WHERE labor_id = {$laborId}";

    } else if ($vendorHandlingId != '') {

        $sql = "UPDATE vendor_handling SET "
            . "branch = '{$branchHC}'"
            . "WHERE vendor_handling_id = {$vendorHandlingId}";

    } else if ($generalVendorId != '') {

        $sql = "UPDATE general_vendor SET "
            . "branch = '{$branchGV}'"
            . "WHERE general_vendor_id = {$generalVendorId}";

    }
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($result !== false) {

        $return_value = '|OK|Successfully Updated.|';
    } else {
        $return_value = '|FAIL|Update Failed.||';
    }

    //} else {
    //  $return_value = '|FAIL|Please fill the required fields.||';
    //}

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_do_timbangan') {
    // <editor-fold defaultstate="collapsed" desc="update_do_timbangan">

    $return_value = '';
    //$boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $slipId = $myDatabase->real_escape_string($_POST['slip_id']);
    $noDo = $myDatabase->real_escape_string($_POST['no_do']);

    // </editor-fold>

    //if ($moduleId == '') {
    //    $boolNew = true;
    //}

    if ($slipId != '') {

        $sql = "UPDATE transaction_upload SET "
            . "no_do = '{$noDo}'"
            . "WHERE slip_id = {$slipId}";

        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {


            $return_value = '|OK|Successfully Updated.|' . $invoiceId . '|';
        } else {
            $return_value = '|FAIL|Update Failed.||';
        }

    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_POST['action']) && $_POST['action'] == 'import_timbangan') {
    // <editor-fold defaultstate="collapsed" desc="import_timbangan">

    $return_value = '';
    $boolContinue = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">

    $stockpileId = $myDatabase->real_escape_string($_POST['stockpile']);

    if ($stockpileId == '') {
        $stockpileId = 0;
    }

    // </editor-fold>

    if (isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import";

        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if ($boolContinue) {

            $importResult = excelImportTimbangan($myDatabase, $attachmentPath, $stockpileId);
            $importResult = explode("|", $importResult);

            if ($importResult[0] == 'OK') {
                $return_value = '|OK|' . $importResult[1] . '|';
            } else {
                $return_value = '|FAIL|' . $importResult[1] . '|';
            }

        }
    } else {
        $return_value = '|FAIL|Please fill required fields.|';
    }

    echo $return_value;

    // </editor-fold>
} elseif (isset($_POST['action']) && $_POST['action'] == 'logbook_data') {
    // <editor-fold defaultstate="collapsed" desc="logbook_data">
    $return_value = '';
    $boolContinue = true;
    $userId = $_SESSION['userId'];

    if (isset($_POST['delete'])) {
        $delete = true;
    } else {
        $delete = false;
    }

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $logbookId = $myDatabase->real_escape_string($_POST['logbookId']);
    $pLogbookId = $myDatabase->real_escape_string($_POST['pLogbookId']);
    $requestDateHo = $myDatabase->real_escape_string($_POST['requestDateHo']);
    //$mvName = $myDatabase->real_escape_string($_POST['mvName']);
    $requestDate = $myDatabase->real_escape_string($_POST['requestDate']);
    //$qtyPKS = $myDatabase->real_escape_string($_POST['qtyPKS']);
    $requestMonth = $myDatabase->real_escape_string($_POST['requestMonth']);
    $invoiceValue = $myDatabase->real_escape_string($_POST['invoiceValue']);
    $requestWeek = $myDatabase->real_escape_string($_POST['requestWeek']);
    $paymentDate = $myDatabase->real_escape_string($_POST['paymentDate']);
    $emailTime = $myDatabase->real_escape_string($_POST['emailTime']);
    $status = $myDatabase->real_escape_string($_POST['status']);
    $invReceive = $myDatabase->real_escape_string($_POST['invReceive']);
    $paidTime = $myDatabase->real_escape_string($_POST['paidTime']);
    $paymentSchedule = $myDatabase->real_escape_string($_POST['paymentSchedule']);
    $statusTime = $myDatabase->real_escape_string($_POST['statusTime']);
    $statusDay = $myDatabase->real_escape_string($_POST['statusDay']);
    //$companyId = $myDatabase->real_escape_string($_POST['companyId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $masterBankId = $myDatabase->real_escape_string($_POST['masterBankId']);
    $requesterId = $myDatabase->real_escape_string($_POST['requesterId']);
    $pvNumber = $myDatabase->real_escape_string($_POST['pvNumber']);
    $picFinanceId = $myDatabase->real_escape_string($_POST['picFinanceId']);
    $outstanding = $myDatabase->real_escape_string($_POST['outstanding']);
    // $categoryId = $myDatabase->real_escape_string($_POST['categoryId']);
    $toBePaid = $myDatabase->real_escape_string($_POST['toBePaid']);
    $invCategoryId = $myDatabase->real_escape_string($_POST['invCategoryId']);
    $paid = $myDatabase->real_escape_string($_POST['paid']);
    //$advanceNumber = $myDatabase->real_escape_string($_POST['advanceNumber']);
    $shipmentCode = $myDatabase->real_escape_string($_POST['shipmentCode']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    $paidRemarks = $myDatabase->real_escape_string($_POST['paidRemarks']);
    $shipmentCode = $myDatabase->real_escape_string($_POST['shipmentCode']);
    $vendorType = $myDatabase->real_escape_string($_POST['vendorType']);

    if (isset($_POST['incomplete']) && $_POST['incomplete'] != '') {
        $incomplete = $_POST['incomplete'];
        $keteranganIncomplete = $myDatabase->real_escape_string($_POST['keteranganIncomplete']);
    } else {
        $incomplete = 1;
        $keteranganIncomplete = 'NULL';
    }
    // </editor-fold>
    if (isset($vendorType) && $vendorType == 'Pks') {
        $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    } elseif (isset($vendorType) && $vendorType == 'General') {
        $vendorName = $myDatabase->real_escape_string($_POST['vendorNameGeneral']);
    } elseif (isset($vendorType) && $vendorType == 'Freight') {
        $vendorName = $myDatabase->real_escape_string($_POST['vendorNameFreight']);
    } elseif (isset($vendorType) && $vendorType == 'Labor') {
        $vendorName = $myDatabase->real_escape_string($_POST['vendorLabor']);
    } elseif (isset($vendorType) && $vendorType == 'Handling') {
        $vendorName = $myDatabase->real_escape_string($_POST['vendorHandling']);
    } elseif (isset($vendorType) && $vendorType == 'PettyCash') {
        $vendorName = $myDatabase->real_escape_string($_POST['vendorPettyCash']);
    } else {
        $vendorName = 'NULL';
    }

    if (isset($logbookId) && $logbookId != '' && $delete !== true) {
        $action = 'UPDATE';
        // <editor-fold defaultstate="collapsed" desc="UPDATE Logbook">
        $sql = "UPDATE  logbook SET " .
            'request_date_ho = ' . (($requestDateHo == '') ? "NULL" : ("'" . $requestDateHo . "'")) . ", " . 'request_date = ' . (($requestDate == '') ? "NULL" : ("'" . $requestDate . "'")) . ", " .
            'request_month = ' . (($requestMonth == '') ? "NULL" : ("'" . $requestMonth . "'")) . ", " . 'request_week = ' . (($requestWeek == '') ? "NULL" : ("'" . $requestWeek . "'")) . ", " .
            'email_time = ' . (($emailTime == '') ? "NULL" : ("'" . $emailTime . "'")) . ", " . 'email_time_app = ' . (($emailTime == '') ? "NULL" : ("'" . $emailTime . "'")) . ", " .
            'inv_receive = ' . (($invReceive == '') ? "NULL" : ("'" . $invReceive . "'")) . ", " . 'payment_schedule = ' . (($paymentSchedule == '') ? "NULL" : ("'" . $paymentSchedule . "'")) . ", " .
            'stockpile_id = ' . (($stockpileId == '') ? "NULL" : ("'" . $stockpileId . "'")) . ", " .
            'master_requester_id = ' . (($requesterId == '') ? "NULL" : ("'" . $requesterId . "'")) . ", " . 'master_pic_finance_id = ' . (($picFinanceId == '') ? "NULL" : ("'" . $picFinanceId . "'")) . ", " .
            'vendor_name = ' . (($vendorName == '') ? "NULL" : ("'" . $vendorName . "'")) . ", " .
            'logbook_inv_category_id = ' . (($invCategoryId == '') ? "NULL" : ("'" . $invCategoryId . "'")) . ", " .
            'remarks = ' . (($remarks == '') ? "NULL" : ("'" . $remarks . "'")) . ", " . 'invoice_value = ' . (($invoiceValue == '') ? "NULL" : ("'" . $invoiceValue . "'")) . ", " .
            'payment_date = ' . (($paymentDate == '') ? "NULL" : ("'" . $paymentDate . "'")) . ", " . 'status = ' . (($status == '') ? "NULL" : ("'" . $status . "'")) . ", " .
            'paid_time = ' . (($paidTime == '') ? "NULL" : ("'" . $paidTime . "'")) . ", " . 'status_time = ' . (($statusTime == '') ? "NULL" : ("'" . $statusTime . "'")) . ", " .
            'status_day = ' . (($statusDay == '') ? "NULL" : ("'" . $statusDay . "'")) . ", " . 'master_bank_id = ' . (($masterBankId == '') ? "NULL" : ("'" . $masterBankId . "'")) . ", " .
            'pv_number = ' . (($pvNumber == '') ? "NULL" : ("'" . $pvNumber . "'")) . ", " . 'outstanding = ' . (($outstanding == '') ? "NULL" : ("'" . $outstanding . "'")) . ", " .
            'to_be_paid = ' . (($toBePaid == '') ? "NULL" : ("'" . $toBePaid . "'")) . ", " . 'paid = ' . (($paid == '') ? "NULL" : ("'" . $paid . "'")) . ", " .
            'paid_remarks = ' . (($paidRemarks == '') ? "NULL" : ("'" . $paidRemarks . "'")) . ", " . 'vendor_type = ' . (($vendorType == '') ? "NULL" : ("'" . $vendorType . "'")) . ", " .
            'shipment_code = ' . (($shipmentCode == '') ? "NULL" : ("'" . $shipmentCode . "'")) .
            " where logbook_id = {$logbookId} ";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
// </editor-fold>
    } elseif ($delete !== false) {
        $action = 'DELETE';
        // <editor-fold defaultstate="collapsed" desc="Get Data Logbook">
        $sql = "SELECT l.*FROM logbook l WHERE l.logbook_id = {$logbookId}
            ";
        $resultData = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($resultData !== false && $resultData->num_rows > 0) {
            $rowData = $resultData->fetch_object();
            $requestDateHo = $rowData->request_date_ho;
            $requestDate = $rowData->request_date;
            $requestMonth = $rowData->request_month;
            $requestWeek = $rowData->request_week;
            $emailTime = $rowData->email_time;
            $emailTimeApp = $rowData->email_time_app;
            $invReceive = $rowData->inv_receive;
            $paymentSchedule = $rowData->payment_schedule;
            //$company = $rowData->company_id;
            $stockpile = $rowData->stockpile_id;
            $requester = $rowData->master_requester_id;
            $picFinance = $rowData->master_pic_finance_id;
            //$category = $rowData->logbook_category_id;
            //$advanceNumber = $rowData->advance_number;
            $invCategory = $rowData->logbook_inv_category_id;
            $vendorName = $rowData->vendor_name;
            $remarks = $rowData->remarks;
            //$mvName = $rowData->mv_name;
            //$qtyPks = $rowData->qty_pks;
            $invoiceValue = $rowData->invoice_value;
            $paymentDate = $rowData->payment_date;
            $status = $rowData->status;
            $paidTime = $rowData->paid_time;
            $statusTime = $rowData->status_time;
            $statusDay = $rowData->status_day;
            $masterBankId = $rowData->master_bank_id;
            $pvNumber = $rowData->pv_number;
            $outstanding = $rowData->outstanding;
            $toBePaid = $rowData->to_be_paid;
            $paid = $rowData->paid;
            $paidRemarks = $rowData->paid_remarks;
            $shipmentCode = $rowData->shipment_code;
            $vendorType = $rowData->vendor_type;
        }
        // </editor-fold>
    } else {
        $action = 'INSERT';
        // <editor-fold defaultstate="collapsed" desc="INSERT Logbook">
        $sql = "INSERT INTO `logbook` (
`request_date_ho`, `request_date`, `request_month`, `request_week`, 
`email_time`, `email_time_app`, `inv_receive`, `payment_schedule`, `logbook_inv_category_id`,
`stockpile_id`, `master_requester_id`, `master_pic_finance_id`,
 `vendor_name`,`remarks`, `invoice_value`, `payment_date`, `status`, `paid_time`, `status_time`, `status_day`,
`master_bank_id`, `pv_number`, `outstanding`, `to_be_paid`, `paid`, `paid_remarks`,`vendor_type`,`pengajuan_logbook_id`,`shipment_code`) VALUES 
    (" . (($requestDateHo == '') ? "NULL" : ("'" . $requestDateHo . "'")) . ", " . (($requestDate == '') ? "NULL" : ("'" . $requestDate . "'")) . ", " .
            (($requestMonth == '') ? "NULL" : ("'" . $requestMonth . "'")) . ", " . (($requestWeek == '') ? "NULL" : ("'" . $requestWeek . "'")) . ", " .
            (($emailTime == '') ? "NULL" : ("'" . $emailTime . "'")) . ", " . (($emailTime == '') ? "NULL" : ("'" . $emailTime . "'")) . ", " .
            (($invReceive == '') ? "NULL" : ("'" . $invReceive . "'")) . ", " . (($paymentSchedule == '') ? "NULL" : ("'" . $paymentSchedule . "'")) . ",  " .
            (($invCategoryId == '') ? "NULL" : ("'" . $invCategoryId . "'")) . ", " . (($stockpileId == '') ? "NULL" : ("'" . $stockpileId . "'")) . ", " .
            (($requesterId == '') ? "NULL" : ("'" . $requesterId . "'")) . ", " . (($picFinanceId == '') ? "NULL" : ("'" . $picFinanceId . "'")) . ", " .
            (($vendorName == '') ? "NULL" : ("'" . $vendorName . "'")) . ", " .
            (($remarks == '') ? "NULL" : ("'" . $remarks . "'")) . ", " . (($invoiceValue == '') ? "NULL" : ("'" . $invoiceValue . "'")) . ", " .
            (($paymentDate == '') ? "NULL" : ("'" . $paymentDate . "'")) . ", " . (($status == '') ? "NULL" : ("'" . $status . "'")) . ", " .
            (($paidTime == '') ? "NULL" : ("'" . $paidTime . "'")) . ", " . (($statusTime == '') ? "NULL" : ("'" . $statusTime . "'")) . ", " .
            (($statusDay == '') ? "NULL" : ("'" . $statusDay . "'")) . ", " . (($masterBankId == '') ? "NULL" : ("'" . $masterBankId . "'")) . ", " .
            (($pvNumber == '') ? "NULL" : ("'" . $pvNumber . "'")) . ", " . (($outstanding == '') ? "NULL" : ("'" . $outstanding . "'")) . ", " .
            (($toBePaid == '') ? "NULL" : ("'" . $toBePaid . "'")) . ", " . (($paid == '') ? "NULL" : ("'" . $paid . "'")) . ", " .
            (($paidRemarks == '') ? "NULL" : ("'" . $paidRemarks . "'")) . ", " . (($vendorType == '') ? "NULL" : ("'" . $vendorType . "'")) . ", " .
            (($pLogbookId == '') ? "NULL" : ("'" . $pLogbookId . "'")) . ", " .
            (($shipmentCode == '') ? "NULL" : ("'" . $shipmentCode . "'")) .
            ");";
        $sql .= "UPDATE pengajuan_logbook SET status = $incomplete, incomplete_remark  = '{$keteranganIncomplete}' where id = {$_POST['pLogbookId']}";
        $result = $myDatabase->multi_query($sql);
// </editor-fold>
        $logbookId = $myDatabase->insert_id;
    }

    if ($result !== false) {
        $trxDate = date("Y-m-d h:i:s");
        // <editor-fold defaultstate="collapsed" desc="INSERT Logbook Log">
        $sql2 = "INSERT INTO `logbook_log` (
`request_date_ho`, `request_date`, `request_month`, `request_week`, 
`email_time`, `email_time_app`, `inv_receive`, `payment_schedule`, 
`stockpile_id`, `master_requester_id`, `master_pic_finance_id`, `vendor_name`, `logbook_inv_category_id`,
`remarks`, `invoice_value`, `payment_date`, `status`, `paid_time`, `status_time`, `status_day`,
`master_bank_id`, `pv_number`, `outstanding`, `to_be_paid`, `paid`, `paid_remarks`,`shipment_code`,
`logbook_id`,`action`,`user_id`,`vendor_type`,`trx_date`) VALUES 
    (" .
            (($requestDateHo == '') ? "NULL" : ("'" . $requestDateHo . "'")) . ", " . (($requestDate == '') ? "NULL" : ("'" . $requestDate . "'")) . ", " .
            (($requestMonth == '') ? "NULL" : ("'" . $requestMonth . "'")) . ", " . (($requestWeek == '') ? "NULL" : ("'" . $requestWeek . "'")) . ", " .
            (($emailTime == '') ? "NULL" : ("'" . $emailTime . "'")) . ", " . (($emailTime == '') ? "NULL" : ("'" . $emailTime . "'")) . ", " .
            (($invReceive == '') ? "NULL" : ("'" . $invReceive . "'")) . ", " . (($paymentSchedule == '') ? "NULL" : ("'" . $paymentSchedule . "'")) . ", " .
            (($stockpileId == '') ? "NULL" : ("'" . $stockpileId . "'")) . ", " . (($requesterId == '') ? "NULL" : ("'" . $requesterId . "'")) . ", " .
            (($picFinanceId == '') ? "NULL" : ("'" . $picFinanceId . "'")) . ", " . (($vendorName == '') ? "NULL" : ("'" . $vendorName . "'")) . ", " .
            (($invCategoryId == '') ? "NULL" : ("'" . $invCategoryId . "'")) . ", " .
            (($remarks == '') ? "NULL" : ("'" . $remarks . "'")) . ", " . (($invoiceValue == '') ? "NULL" : ("'" . $invoiceValue . "'")) . ", " .
            (($paymentDate == '') ? "NULL" : ("'" . $paymentDate . "'")) . ", " . (($status == '') ? "NULL" : ("'" . $status . "'")) . ", " .
            (($paidTime == '') ? "NULL" : ("'" . $paidTime . "'")) . ", " . (($statusTime == '') ? "NULL" : ("'" . $statusTime . "'")) . ", " .
            (($statusDay == '') ? "NULL" : ("'" . $statusDay . "'")) . ", " . (($masterBankId == '') ? "NULL" : ("'" . $masterBankId . "'")) . ", " .
            (($pvNumber == '') ? "NULL" : ("'" . $pvNumber . "'")) . ", " . (($outstanding == '') ? "NULL" : ("'" . $outstanding . "'")) . ", " .
            (($toBePaid == '') ? "NULL" : ("'" . $toBePaid . "'")) . ", " . (($paid == '') ? "NULL" : ("'" . $paid . "'")) . ", " .
            (($paidRemarks == '') ? "NULL" : ("'" . $paidRemarks . "'")) . ", " . (($shipmentCode == '') ? "NULL" : ("'" . $shipmentCode . "'")) . ", " .
            (($logbookId == '') ? "NULL" : ("'" . $logbookId . "'")) . ", " . (($action == '') ? "NULL" : ("'" . $action . "'")) . ", " .
            (($userId == '') ? "NULL" : ("'" . $userId . "'")) . ", " . (($vendorType == '') ? "NULL" : ("'" . $vendorType . "'")) . ", " .
            (($trxDate == '') ? "NULL" : ("'" . $trxDate . "'")) .
            ")";
        $result = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
        if ($delete !== false) {
            $sql = "DELETE FROM logbook WHERE logbook_id={$logbookId}";
            $result2 = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        }
// </editor-fold>
        echo $sql;
        $return_value = '|OK|Success';
    } else {
        echo $sql;
        echo $sql2;
        $return_value = '|FAIL|Please fill required fields.|';
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_POST['action']) && $_POST['action'] == 'pengajuan_logbook_data') {
    // <editor-fold defaultstate="collapsed" desc="pengajuan_logbook_data">
    $return_value = '';
    $boolContinue = true;
    $userId = $_SESSION['userId'];

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $id = isset($_POST['pLogbookId']) ? $_POST['pLogbookId'] : 'null';
    $actionType = $myDatabase->real_escape_string($_POST['actionType']);
    if ($actionType != 'DELETE') {
        $noRekening = $myDatabase->real_escape_string($_POST['noRekening']);
        $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
        $vendorType = $myDatabase->real_escape_string($_POST['vendorType']);
        $masterBankId = $myDatabase->real_escape_string($_POST['masterBankId']);
        $cabangBank = $myDatabase->real_escape_string($_POST['cabangBank']);
        $namaAkunBank = $myDatabase->real_escape_string($_POST['namaAkunBank']);
        $qty = $myDatabase->real_escape_string($_POST['qty']);
        $hargaQty = $myDatabase->real_escape_string($_POST['hargaQty']);
//    $dpp = $myDatabase->real_escape_string($_POST['dpp']);
        $ppn = $myDatabase->real_escape_string($_POST['ppn']);
        $pph = $myDatabase->real_escape_string($_POST['pph']);
        $taxRemark = $myDatabase->real_escape_string($_POST['taxRemark']);
        $remark = $myDatabase->real_escape_string($_POST['remark']);
        $noInvoice = $myDatabase->real_escape_string($_POST['noInvoice']);
        $dpp = $qty * $hargaQty;
        $total = $dpp + $ppn - $pph;
        if (isset($_FILES['file']) && $_FILES['file']['size'] > 0) {
            $allowed = array('png', 'jpg', 'pdf', 'doc', 'docs', 'xls', 'xlsx');
            $fileName = $_FILES['file']['name'];
            $x = explode('.', $fileName);
            $ekstensi = strtolower(end($x));
            $ukuran = $_FILES['file']['size'];
            $file_tmp = $_FILES['file']['tmp_name'];

            if (in_array($ekstensi, $allowed) === true) {

                $attachmentPath = "./import/logbook/";
                if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
                    $temp = mkdir($attachmentPath, 0755, TRUE);
                else
                    $temp = TRUE;

                if ($temp === TRUE) {
                    $attachmentPath .= "/" . date("ymdHis") . "-" . basename($fileName);
                    if (!move_uploaded_file($file_tmp, $attachmentPath)) {
                        echo '|FAIL|Error while uploading file.|';
                        die();
                    }
                } else {
                    echo '|FAIL|Error while creating directory.|';
                    die();
                }
            } else {
                echo '|FAIL|EKSTENSI FILE YANG DI UPLOAD TIDAK DI PERBOLEHKAN.|';
                die();
            }
        } else {
            $attachmentPath = 'NULL';
        }
    }
    // </editor-fold>
    if (isset($vendorType) && $vendorType == 'Pks') {
        $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    } elseif (isset($vendorType) && $vendorType == 'General') {
        $vendorName = $myDatabase->real_escape_string($_POST['vendorNameGeneral']);
    } elseif (isset($vendorType) && $vendorType == 'Freight') {
        $vendorName = $myDatabase->real_escape_string($_POST['vendorNameFreight']);
    } elseif (isset($vendorType) && $vendorType == 'Labor') {
        $vendorName = $myDatabase->real_escape_string($_POST['vendorLabor']);
    } elseif (isset($vendorType) && $vendorType == 'Handling') {
        $vendorName = $myDatabase->real_escape_string($_POST['vendorHandling']);
    } elseif (isset($vendorType) && $vendorType == 'PettyCash') {
        $vendorName = $myDatabase->real_escape_string($_POST['vendorPettyCash']);
    } else {
        $vendorName = '';
    }
    $status = 0;
    $entryDate = date("Y-m-d h:i:s");
    if ($actionType == 'INSERT') {
        $sql = "INSERT INTO `pengajuan_logbook` (`no_rek`, `no_invoice`,`stockpile_id`, `vendor`, `vendor_type`, `remark`, `master_bank_id`, `cabang_bank`, `nama_akun_bank`, `qty`, `harga_qty`, `dpp`, `ppn`, `pph`, `total`, `tax_remark`, `file`,`entry_by`,`status`,`entry_date`) VALUES('{$noRekening}','$noInvoice',$stockpileId,'$vendorName','$vendorType','$remark','$masterBankId','$cabangBank','$namaAkunBank',$qty,$hargaQty,$dpp,$ppn,$pph,$total,'$taxRemark','$attachmentPath',$userId,$status,'$entryDate')";
    } elseif ($actionType == 'UPDATE') {
        if ($attachmentPath != 'NULL') {
            $sql = "UPDATE `pengajuan_logbook` SET 
            no_rek = '{$noRekening}',no_invoice = '{$noInvoice}', stockpile_id = {$stockpileId}, vendor = '{$vendorName}', remark = '{$remark}', master_bank_id = '{$masterBankId}', cabang_bank = '{$cabangBank}', nama_akun_bank = '{$namaAkunBank}', qty = '{$qty}',
            harga_qty = '{$hargaQty}', dpp = '{$dpp}', ppn = '{$ppn}', pph = '{$pph}', total = '{$total}', tax_remark = '{$taxRemark}', file = '{$attachmentPath}', vendor_type = '{$vendorType}', status = '{$status}'
            WHERE id = {$id}";
        } else {
            $sql = "UPDATE `pengajuan_logbook` SET 
            no_rek = {$noRekening},no_invoice = '{$noInvoice}', stockpile_id = {$stockpileId}, vendor = '{$vendorName}', remark = '{$remark}', master_bank_id = '{$masterBankId}', cabang_bank = '{$cabangBank}', nama_akun_bank = '{$namaAkunBank}', qty = '{$qty}',
            harga_qty = '{$hargaQty}', dpp = '{$dpp}', ppn = '{$ppn}', pph = '{$pph}', total = '{$total}', tax_remark = '{$taxRemark}', vendor_type = '{$vendorType}', status = '{$status}'
            WHERE id = {$id}";
        }
    } elseif ($actionType == 'DELETE') {
        $sql = "DELETE FROM `pengajuan_logbook` WHERE id = {$id}";
    } else {
        // DO Nothing
    }
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($result !== false) {
        if ($actionType == 'INSERT') {
            $return_value = '|OK|Pengajuan Logbook has successfully inserted';
        } elseif ($actionType == 'UPDATE') {
            $return_value = '|OK|Pengajuan Logbook has successfully updated';
        } elseif ($actionType == 'DELETE') {
            $return_value = '|OK|Pengajuan Logbook has successfully deleted';
        }

    } else {
        $return_value = '|FAIL|Insert/update Pengajuan Logbook failed.||';
        echo $sql;
    }
    echo $return_value;


    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'pic_finance_data') {
    // <editor-fold defaultstate="collapsed" desc="pic_finance_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $picFinanceId = $myDatabase->real_escape_string($_POST['picFinanceId']);
    $picFinanceName = $myDatabase->real_escape_string($_POST['picFinanceName']);
    // </editor-fold>

    if ($picFinanceId == '') {
        $boolNew = true;
    }

    if ($picFinanceName != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `master_pic_finance` WHERE UPPER(pic_name) = UPPER('{$picFinanceName}')";
        } else {
            $sql = "SELECT * FROM `master_pic_finance` WHERE UPPER(pic_name) = UPPER('{$picFinanceName}') AND id <> {$picFinanceId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `master_pic_finance` (pic_name, entry_by, entry_date) VALUES ("
                    . "'{$picFinanceName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `master_pic_finance` SET "
                    . "pic_name = '{$picFinanceName}' "
                    . "WHERE id = {$picFinanceId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $picFinanceId = $myDatabase->insert_id;
                }
                $return_value = '|OK|PIC Finance has successfully inserted/updated.|' . $picFinanceId . '|';
            } else {
                $return_value = '|FAIL|Insert/update PIC Finance failed.||';
            }
        } else {
            $return_value = '|FAIL|PIC Finance already exists.||';
            echo $sql;
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_pic_finance') {
    // <editor-fold defaultstate="collapsed" desc="delete_pic_finance">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $picFinanceId = $myDatabase->real_escape_string($_POST['picFinanceId']);
    // </editor-fold>
    if ($picFinanceId != '') {
        $sql = "SELECT * FROM `logbook` WHERE master_pic_finance_id = {$picFinanceId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `master_pic_finance` WHERE id = {$picFinanceId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|PIC Finance has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete PIC Finance failed.|';
            }
        } else {
            $return_value = '|FAIL|PIC Finance use in Logbook.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'logbook_category_data') {
    // <editor-fold defaultstate="collapsed" desc="logbook_category_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $logbookCategoryId = $myDatabase->real_escape_string($_POST['logbookCategoryId']);
    $logbookCategoryName = $myDatabase->real_escape_string($_POST['logbookCategoryName']);
    // </editor-fold>

    if ($logbookCategoryId == '') {
        $boolNew = true;
    }

    if ($logbookCategoryName != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `logbook_category` WHERE UPPER(name) = UPPER('{$logbookCategoryName}')";
        } else {
            $sql = "SELECT * FROM `logbook_category` WHERE UPPER(name) = UPPER('{$logbookCategoryName}') AND id <> {$logbookCategoryId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `logbook_category` (name, entry_by, entry_date) VALUES ("
                    . "'{$logbookCategoryName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `logbook_category` SET "
                    . "name = '{$logbookCategoryName}' "
                    . "WHERE id = {$logbookCategoryId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $logbookCategoryId = $myDatabase->insert_id;
                }
                $return_value = '|OK|Logbook Category has successfully inserted/updated.|' . $logbookCategoryId . '|';
            } else {
                $return_value = '|FAIL|Insert/update Logbook Category failed.||';
            }
        } else {
            $return_value = '|FAIL|Logbook Category already exists.||';
            echo $sql;
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    echo $return_value;
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_logbook_category') {
    // <editor-fold defaultstate="collapsed" desc="delete_logbook_category">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $logbookCategoryId = $myDatabase->real_escape_string($_POST['logbookCategoryId']);
    // </editor-fold>

    if ($logbookCategoryId != '') {
        $sql = "SELECT * FROM `logbook` WHERE logbook_category_id = {$logbookCategoryId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `logbook_category` WHERE id = {$logbookCategoryId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Logbook Category has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete Logbook Category failed.|';
            }
        } else {
            $return_value = '|FAIL|Logbook Category use in Logbook.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'logbook_sub_category_data') {
    // <editor-fold defaultstate="collapsed" desc="logbook_sub_category_data">

    $return_value = '';
    $boolNew = false;

    //        $freightLoginId = $myDatabase->real_escape_string($_POST['freightLoginId']);
    $logbookCategoryId = $myDatabase->real_escape_string($_POST['logbookCategoryId']);
    $logbookSubCategoryName = $myDatabase->real_escape_string($_POST['logbookSubCategoryName']);

    if ($logbookSubCategoryId == '') {
        $boolNew = true;
    }
    // </editor-fold>


    if ($logbookCategoryId != '' && $logbookSubCategoryName != '') {
        if ($boolNew) {
            $sql = "INSERT INTO logbook_inv_category (logbook_category_id, name, entry_by, entry_date)
                                VALUES ({$logbookCategoryId}, '{$logbookSubCategoryName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Sub Category has successfully inserted/updated.|';
        } else {
            $return_value = '|FAIL|Insert Sub Category failed.|';
            echo $sql;
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
        echo $sql;
    }

    echo $return_value;
    //    // </editor-fold>
} elseif (isset($_POST['action']) && $_POST['action'] == 'edit_logbook_sub_category') {
    // <editor-fold defaultstate="collapsed" desc="edit_logbook_sub_category">
    $return_value = '';
    $boolContinue = true;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $logbookSubCategoryId = $myDatabase->real_escape_string($_POST['logbookSubCategoryId']);
    $logbookSubCategoryName = $myDatabase->real_escape_string($_POST['logbookSubCategoryName']);
    // </editor-fold>
    $sql = "UPDATE logbook_inv_category 
            SET id = $logbookSubCategoryId, name = '$logbookSubCategoryName' WHERE id = $logbookSubCategoryId";
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    if ($result !== false) {
        $return_value = '|OK|Sub Category has been updated';
    } else {
        $return_value = '|FAIL|Please fill required fields.|';
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_logbook_sub_category') {
    // <editor-fold defaultstate="collapsed" desc="delete_logbook_sub_category">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $logbookSubCategoryId = $myDatabase->real_escape_string($_POST['logbookSubCategoryId']);
    // </editor-fold>
    if ($logbookSubCategoryId != '') {
        $sql = "DELETE FROM `logbook_inv_category` WHERE id = {$logbookSubCategoryId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $return_value = '|OK|Sub Category has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete Sub Category failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'logbook_requester_data') {
    // <editor-fold defaultstate="collapsed" desc="logbook_requester_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $logbookRequesterId = $myDatabase->real_escape_string($_POST['logbookRequesterId']);
    $logbookRequesterName = $myDatabase->real_escape_string($_POST['logbookRequesterName']);
    // </editor-fold>

    if ($logbookRequesterId == '') {
        $boolNew = true;
    }

    if ($logbookRequesterName != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `master_requester` WHERE UPPER(requester) = UPPER('{$logbookRequesterName}')";
        } else {
            $sql = "SELECT * FROM `master_requester` WHERE UPPER(requester) = UPPER('{$logbookRequesterName}') AND id <> {$logbookRequesterId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `master_requester` (requester, entry_by, entry_date) VALUES ("
                    . "'{$logbookRequesterName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `master_requester` SET "
                    . "requester = '{$logbookRequesterName}' "
                    . "WHERE id = {$logbookRequesterId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $logbookRequesterId = $myDatabase->insert_id;
                }
                $return_value = '|OK|Logbook Requester has successfully inserted/updated.|' . $logbookRequesterId . '|';
            } else {
                $return_value = '|FAIL|Insert/update Logbook Requester failed.||';
            }
        } else {
            $return_value = '|FAIL|Logbook Requester already exists.||';
            echo $sql;
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_logbook_requester') {
    // <editor-fold defaultstate="collapsed" desc="delete_logbook_requester">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $logbookRequesterId = $myDatabase->real_escape_string($_POST['logbookRequesterId']);
    // </editor-fold>

    if ($logbookRequesterId != '') {
        $sql = "SELECT * FROM `logbook` WHERE master_requester_id = {$logbookRequesterId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `master_requester` WHERE id = {$logbookRequesterId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false && $result->num_rows == 0) {
                $return_value = '|OK|Logbook Requester has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete Logbook Requester failed.|';
            }
        } else {
            $return_value = '|FAIL|Logbook Requester use in Logbook.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    echo $return_value;
// </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'termin_data') {
    // <editor-fold defaultstate="collapsed" desc="termin_data">

    $return_value = '';
    $boolNew = false;

    $actionType = $myDatabase->real_escape_string($_POST['actionType']);
    $terminId = $myDatabase->real_escape_string($_POST['terminId']);
    $name = $myDatabase->real_escape_string($_POST['name']);


    if ($actionType == 'INSERT') {
        $sql = "INSERT INTO `master_termin` (name, entry_by, entry_date) 
                VALUES ('{$name}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    } elseif ($actionType == 'UPDATE') {
        $sql = "UPDATE `master_termin` SET name = '{$name}', entry_by = {$_SESSION['userId']}, entry_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s')  WHERE id = {$terminId}";
    } elseif ($actionType == 'DELETE') {
        $sql = "DELETE FROM `master_termin` WHERE id = {$terminId}";
    } else {
    }
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($result !== false) {
        if ($actionType == 'INSERT') {
            $return_value = '|OK|Master Termin has successfully inserted';
        } elseif ($actionType == 'UPDATE') {
            $return_value = '|OK|Master Termin has successfully updated';
        } elseif ($actionType == 'DELETE') {
            $return_value = '|OK|Master Termin has successfully deleted';
        }
    } else {
        $return_value = '|FAIL|Insert/Update Master Termin Failed or Termin Name has been used||';

    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'termin_detail') {
    // <editor-fold defaultstate="collapsed" desc="termin_detail_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $actionType = $myDatabase->real_escape_string($_POST['actionType']);
    $terminId = $myDatabase->real_escape_string($_POST['terminId']);
    $terminDetailId = $myDatabase->real_escape_string($_POST['terminDetailId']);
    $percentage = $myDatabase->real_escape_string($_POST['percentage']);
    // </editor-fold>
    $sql1 = "select total_percentage from master_termin mt where id = {$terminId}";
    $termin = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
    $termin = $termin->fetch_object();

    if ($termin->total_percentage != 100) {
        $total = $termin->total_percentage + $percentage;

        if ($total > 100) {
            $return_value = '|FAIL|Tidak boleh lebih dari 100%';
        } else {
            if ($actionType == 'INSERT') {
                $sql = "INSERT INTO `termin_detail` (termin_id, percentage, entry_by, entry_date) VALUES ({$terminId}, '{$percentage}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'));";
            } elseif ($actionType == 'UPDATE') {
                $sql = "UPDATE `termin_detail` SET percentage = '{$percentage}', entry_by = {$_SESSION['userId']}, entry_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') WHERE id = {$terminDetailId}";
            } elseif ($actionType == 'DELETE') {
                $sql = "DELETE FROM `termin_detail` WHERE id = {$terminDetailId}";
            } else {

            }
            $sql .= "update `master_termin` set total_percentage = {$total} where id = {$terminId}";
            $result = $myDatabase->multi_query($sql);
            if ($result !== false) {
                if ($actionType == 'INSERT') {
                    $return_value = '|OK|Termin Detail has successfully inserted';
                } elseif ($actionType == 'UPDATE') {
                    $return_value = '|OK|Termin Detail has successfully updated';
                } elseif ($actionType == 'DELETE') {
                    $return_value = '|OK|Termin Detail has successfully deleted';
                }

            } else {
                $return_value = '|FAIL|Insert/Update Termin Detail failed.||';
                echo $sql;
            }
        }
    } else {
        $return_value = '|FAIL|Termin sudah 100%';
    }
    echo $return_value;
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'stock_transit_data') {
    // <editor-fold defaultstate="collapsed" desc="stock_transit_data">
    $return_value = '';
    $boolNew = false;
    $actionType = $myDatabase->real_escape_string($_POST['actionType']);
    if ($actionType == 'INSERT') {
        $mutasiHeaderId = $myDatabase->real_escape_string($_POST['mutasiHeaderId']);
        $array = $_POST['stockTransits'];
        $newArray = array();
        foreach (array_keys($array) as $fieldKey) {
            foreach ($array[$fieldKey] as $key => $value) {
                $newArray[$key][$fieldKey] = $value;
            }
        }
        //Get Stockpile Tujuan
        $sql = "SELECT * FROM mutasi_header where mutasi_header_id = {$mutasiHeaderId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $mh = $result->fetch_object();
        $stockpileTujuan = $mh->stockpile_to;

        //Insert Stock Transit
        foreach ($newArray as $row) {
            $sqlCek = "select c.contract_no, DATE_FORMAT(c.entry_date,'%Y-%m-%d') as contract_date, sc.quantity 
            from stockpile_contract sc left join contract c on sc.contract_id = c.contract_id 
            where stockpile_contract_id = {$row['stockpile_contract_id']}";
            $resultCek = $myDatabase->query($sqlCek, MYSQLI_STORE_RESULT);
            $rowCek = $resultCek->fetch_object();
            $qtyCek = $rowCek->quantity;
            $contractDate = $rowCek->contract_date;
            if ($row['loading_date'] < $contractDate) {
                $return_value = '|Fail|Loading Date Older than Contract Date at' . $contractDate;
                echo $return_value;
            } else {
                if ($row['send_weight'] <= $qtyCek) {
                    $sql = "INSERT INTO `stock_transit` (kode_stock_transit, mutasi_header_id, stockpile_contract_id, send_weight, netto_weight,  loading_date, entry_by, entry_date) 
                VALUES ('{$row['kode_stock_transit']}', '{$mutasiHeaderId}', {$row['stockpile_contract_id']},'{$row['send_weight']}','{$row['netto_weight']}', '{$row['loading_date']}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'));";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $stockTransitId = $myDatabase->insert_id;
                    $sqlLogStockTransit = "INSERT INTO log_stock_transit (`action`, action_by, action_date,stock_transit_id,kode_stock_transit, mutasi_header_id, stockpile_contract_id, send_weight, netto_weight,  loading_date, entry_by, entry_date) 
                VALUES ('$actionType',{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),'{$stockTransitId}','{$row['kode_stock_transit']}', '{$mutasiHeaderId}', {$row['stockpile_contract_id']},'{$row['send_weight']}','{$row['netto_weight']}', '{$row['loading_date']}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                    $resultLogs = $myDatabase->query($sqlLogStockTransit, MYSQLI_STORE_RESULT);
//                    echo $sqlLogStockTransit;
//                    die();


                    $sqlPPh = "SELECT c.contract_id, langsir FROM stock_transit a 
LEFT JOIN stockpile_contract b ON a.`stockpile_contract_id` = b.`stockpile_contract_id`
LEFT JOIN contract c ON b.`contract_id` = c.`contract_id` WHERE a.stock_transit_id = {$stockTransitId}";
                    $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                    if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                        $rowPPh = $resultPPh->fetch_object();
                        $contractId = $stockTransitId;
						$cekLangsir = $rowPPh->langsir;

                        if ($cekLangsir != 1) {
                            insertGeneralLedger($myDatabase, 'STOCK TRANSIT', "NULL", "NULL", $contractId);
                            insertReportGL($myDatabase, 'STOCK TRANSIT', "NULL", "NULL", $contractId);
                        }

                    }


                } else {
                    $hasilCek[] = $row['stockpile_contract_id'];
                    $contractCek = $rowCek->contract_no;
                }
            }
        }

    } elseif ($actionType == 'UPDATE') {
        $array = $_POST['stockTransits'];
        $newArray = array();
        foreach (array_keys($array) as $fieldKey) {
            foreach ($array[$fieldKey] as $key => $value) {
                $newArray[$key][$fieldKey] = $value;
            }
        }
        foreach ($newArray as $row) {
            $sql = "UPDATE `stock_transit` SET send_weight = {$row['send_weight']}, netto_weight = {$row['netto_weight']}, loading_date = '{$row['loading_date']}'
                     WHERE stock_transit_id = {$row['id']}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        }
    } elseif ($actionType == 'DELETE') {
        $mutasiHeaderId = $myDatabase->real_escape_string($_POST['mutasiHeaderId']);
        $sqlCekLogs = "SELECT * FROM stock_transit where mutasi_header_id = {$mutasiHeaderId}";
        $resultCekLogs = $myDatabase->query($sqlCekLogs, MYSQLI_STORE_RESULT);
        if ($resultCekLogs !== false && $resultCekLogs->num_rows > 0) {
            while ($rowLogs = $resultCekLogs->fetch_object()) {
                $stockTransitId = $rowLogs->stock_transit_id;
                $kodeStockTransit = $rowLogs->kode_stock_transit;
                $stockpileContractId = $rowLogs->stockpile_contract_id;
                $sendWeight = $rowLogs->send_weight;
                $nettoWeight = $rowLogs->netto_weight;
                $status = $rowLogs->status;
                $loadingDate = $rowLogs->loading_date;
                $entryBy = $rowLogs->entry_by;
                $entryDate = $rowLogs->entry_date;
                $sqlInsertLogs = "INSERT INTO log_stock_transit (`action`, action_by, action_date,stock_transit_id, kode_stock_transit, mutasi_header_id, stockpile_contract_id, send_weight, netto_weight,  loading_date, entry_by, entry_date) 
                VALUES ('{$actionType}',{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$stockTransitId},'{$kodeStockTransit}', '{$mutasiHeaderId}', {$stockpileContractId},
                '{$sendWeight}','{$nettoWeight}', '{$loadingDate}', {$entryBy}, '{$entryDate}')";
                $resultLogStockTransit = $myDatabase->query($sqlInsertLogs, MYSQLI_STORE_RESULT);
            }
//             echo $sqlInsertLogs;
//             die();
        }
        $sqlContract = "SELECT c.contract_id FROM stock_transit st
                        LEFT JOIN stockpile_contract sc ON st.`stockpile_contract_id` = sc.`stockpile_contract_id`
                        LEFT JOIN contract c ON sc.`contract_id` = c.`contract_id`
                        WHERE st.`mutasi_header_id` = {$mutasiHeaderId}";
        $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);
        if ($resultContract !== false && $resultContract->num_rows > 0) {
            while ($rowCheck = $resultContract->fetch_object()) {
                $contractId = $rowCheck->contract_id;
                $sqlDelete = "DELETE FROM gl_report WHERE contract_id = {$contractId} AND general_ledger_module = 'STOCK TRANSIT';";
                $sqlDelete = "DELETE FROM general_ledger WHERE contract_id = {$contractId} AND general_ledger_module = 'STOCK TRANSIT';";
                $resultCek = $myDatabase->multi_query($sqlDelete);
            }
        }
        $sql = "DELETE FROM `stock_transit` WHERE mutasi_header_id = {$mutasiHeaderId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    }

    if ($result !== false) {
        if ($actionType == 'INSERT') {
            if (isset($contractCek)) {
                $return_value = '|OK|Send Weight Pabric / Netto Weight Draft Survey on Contract ' . $contractCek . ' exceeds the quantity. Please create a new contract for the more quantity';
            } else {
                $return_value = '|OK|Stock Transit has successfully inserted';
            }
        } elseif ($actionType == 'UPDATE') {
            $return_value = '|OK|Stock Transit has successfully updated';
        } elseif ($actionType == 'DELETE') {
            $return_value = '|OK|Stock Transit has successfully deleted';
        }
    } else {
        $return_value = '|FAIL|Insert/update mutasi failed.||';
        echo $sql;
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'posting_transit_data') {

    $mutasiHeaderId = $myDatabase->real_escape_string($_POST['kodeMutasi']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockTransitId = $myDatabase->real_escape_string($_POST['stockTransitId']);
    $totalSendWeight = $myDatabase->real_escape_string($_POST['totalSendWeight']);
    $totalNettoWeight = $myDatabase->real_escape_string($_POST['totalNettoWeight']);
    $tglPosting = $myDatabase->real_escape_string($_POST['tglPosting']);
	$unloadingDate = $myDatabase->real_escape_string($_POST['unloadingDate']);
//    $stockTransitId2=$myDatabase->real_escape_string($_POST['stockTransitId2']);

    // get stockpile code
    $sql1 = "SELECT * from stockpile where stockpile_id = $stockpileId ";
    $resultStockpile = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
    if ($resultStockpile !== false && $resultStockpile->num_rows == 1) {
        $rowStockpile = $resultStockpile->fetch_object();
        $stockpileCode = $rowStockpile->stockpile_code;
    }
    //$sqlTax = "SELECT total FROM mutasi_header WHERE mutasi_header_id = $mutasiHeaderId";
	$sqlTax = "SELECT sum(id.amount_converted) as total
        FROM mutasi_detail md
        LEFT JOIN mutasi_header mh ON mh.mutasi_header_id = md.mutasi_header_id
        LEFT JOIN currency as c on md.currency_id = c.currency_id
        LEFT JOIN master_biaya_mutasi mbm on md.biaya_mutasi_id = mbm.id
        LEFT JOIN termin_detail td ON md.termin_detail_id = td.id 
        LEFT JOIN master_termin mt ON mt.id = td.termin_id
        LEFT JOIN invoice_detail id on md.mutasi_detail_id = id.mutasi_detail_id
        LEFT JOIN invoice i on i.invoice_id = id.invoice_id
        RIGHT JOIN payment p on p.invoice_id = i.invoice_id  and p.payment_status != 1 AND i.payment_status != 2
        WHERE md.mutasi_header_id = {$mutasiHeaderId} ORDER BY md.general_vendor_id ASC";
    $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
    if ($resultTax->num_rows == 1) {
        $sqlTax = $resultTax->fetch_object();
        $mutasi_value = $sqlTax->total;
        $mutasiValueTon = $mutasi_value / $totalSendWeight;
    }
	//echo $sqlTax;
    $sql2 = "SELECT st.*,c.`price`, c.contract_no FROM stock_transit st
                LEFT JOIN `stockpile_contract` sc ON sc.`stockpile_contract_id`=st.`stockpile_contract_id`
                LEFT JOIN contract c ON c.`contract_id`=sc.`contract_id` where st.stock_transit_id in ($stockTransitId);";
//    echo $sql2;
    $resultPrice = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
    $checkSlipNo = $stockpileCode . '-' . $currentYear;

    //TGL INVOICE TERTUA
    $sqlTglInvoice = "SELECT max(DATE_FORMAT(i.invoice_date, '%Y/%m/%d')) as invoice_date
        FROM mutasi_detail md
        LEFT JOIN mutasi_header mh ON mh.mutasi_header_id = md.mutasi_header_id
        LEFT JOIN invoice_detail id on md.mutasi_detail_id = id.mutasi_detail_id
        LEFT JOIN invoice i on i.invoice_id = id.invoice_id
        LEFT JOIN payment p on p.invoice_id = i.invoice_id  and p.payment_status != 1
        WHERE md.mutasi_header_id = $mutasiHeaderId";
    $resultTglInvoice = $myDatabase->query($sqlTglInvoice, MYSQLI_STORE_RESULT);
    $rowTglInvoice = $resultTglInvoice->fetch_object();
    $invoiceDate = $rowTglInvoice->invoice_date;

    //Closing Date
    $newTglPosting = implode("-", explode("/", $tglPosting));
    $checkClosingDate=  explode('-', closingDate($newTglPosting,'Mutasi - POSTING SIT'));
    $boolClosing = $checkClosingDate[0];
    $closingDate = $checkClosingDate[1];

    $sqlCheck = "select md.status from mutasi_detail md where md.mutasi_header_id = $mutasiHeaderId";
    $resultCheck = $myDatabase->query($sqlCheck, MYSQLI_STORE_RESULT);
    $status = array();
    while ($rowCheck = $resultCheck->fetch_array()) {
        $status[] = $rowCheck['status'];
    }
    $transactionId = array();
    if (count(array_unique($status)) === 1 && end($status) === '1') {
        if ($resultPrice !== false && $resultPrice->num_rows > 0) {
            while ($row = $resultPrice->fetch_array()) {
                $sql2 = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                if ($resultSlip->num_rows == 0) {
                    $sql2 = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo . '-' . $nextSlipNo;

                $cekContractLangsir = substr($row['contract_no'],0,7);

                $unitPrice = $row['price'];
                $sendWeightTransit = $row['send_weight'];
                $nettoTransit = $row['netto_weight'];
                $nettoStockpile = $sendWeightTransit * $totalNettoWeight / $totalSendWeight;
                $shrink = $sendWeightTransit - $nettoStockpile;
                if ($shrink <= 0) {
                    $shrink = 0;
                } else {
                    $shrink;
                }
                $shrinkAmount = $shrink * ($mutasiValueTon + $unitPrice);
                $shrinkValueTon = $shrinkAmount / $nettoStockpile;
                $unitCost = $unitPrice + $mutasiValueTon + $shrinkValueTon;
				if($totalSendWeight > $totalNettoWeight){
                    $inventoryValue = $nettoStockpile * $unitCost;
                } else {
                    $inventoryValue = $totalSendWeight * $unitCost;
                    $unitCost = $inventoryValue / $nettoStockpile;
                }
                $stockTransit = $row['stock_transit_id'];
                $stockpileContractId = $row['stockpile_contract_id'];

                if ($tglPosting != '') {
                    if ($boolClosing) {
                        if ($tglPosting >= $invoiceDate) {
                            $InsertTT = "INSERT INTO transaction (slip_no,unit_price,send_weight,netto_weight,shrink,shrink_amount,shrink_price,transaction_date,unloading_date,
                                                transaction_type,quantity,inventory_value,delivery_status,block,
                                                posting_status,stock_transit_id,notim_status,stockpile_contract_id,
                                                mutasi_id,mutasi_amount,unit_cost,entry_by,entry_date)
                                        VALUES ('{$slipNo}', {$unitPrice},{$sendWeightTransit},{$nettoStockpile},{$shrink},
                                                {$shrinkAmount},{$shrinkValueTon},STR_TO_DATE('$tglPosting', '%Y/%m/%d %H:%i:%s'), STR_TO_DATE('$unloadingDate', '%Y/%m/%d %H:%i:%s'),1,{$nettoStockpile},{$inventoryValue},0,'NONE', 0,{$stockTransit},0,$stockpileContractId,
                                                {$mutasiHeaderId},{$mutasiValueTon},{$unitCost},{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'));";
                            $res = $myDatabase->query($InsertTT, MYSQLI_STORE_RESULT);

                            if ($res !== false) {
                                $transactionId[] = $myDatabase->insert_id;
                                $updateST = "update stock_transit set status = 1 where stock_transit_id = $stockTransit";
                                $resultUpdate = $myDatabase->query($updateST, MYSQLI_STORE_RESULT);

                            } else {
                                echo '|FAIL|Insert Posting failed.|' . $InsertTT;
                                die();
                            }
                        } else {
                            echo '|FAIL|Posting date ' . $tglPosting . ' is older than the last mutation invoice'. $invoiceDate .'|';
                            die();
                        }
                    } else{
                        echo $closingDate;
                        die();
                    }//Closing Date
                } else {
                    echo '|FAIL|Please fill the required field.|';
                    echo $cekContractLangsir;
                    die();
                }
            }
            if($cekContractLangsir == 'Langsir'){
                                $sqlCekSusut = "SELECT c.contract_no, t.* FROM `transaction` t
                                                LEFT JOIN mutasi_header mh ON t.`mutasi_id` = mh.`mutasi_header_id`
                                                LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                                                LEFT JOIN contract c ON sc.`contract_id` = c.`contract_id`
                                                WHERE mh.`mutasi_header_id` = {$mutasiHeaderId}";
                                $resultCekSusut = $myDatabase->query($sqlCekSusut, MYSQLI_STORE_RESULT);
                                if ($resultCekSusut !== false && $resultCekSusut->num_rows > 1){
                                    while ($rowCheckSusut = $resultCekSusut->fetch_object()){
                                        //echo $rowCheckSusut->contract_no . '    ';
                                        $contractLangsir = substr($rowCheckSusut->contract_no,0,24);
                                        // echo 'test'. $contractLangsir;
                                        $contractLangsirSusut = substr($rowCheckSusut->contract_no,24,2);
                                        //echo '  tost'.$contractLangsirSusut;

                                        if($rowCheckSusut->contract_no == $contractLangsir){
                                                $LangsirSendWeight = $rowCheckSusut->send_weight;
                                                $LangsirNettoWeight = $rowCheckSusut->netto_weight;
                                                $LangsirQuantity = $rowCheckSusut->quantity;
                                                $LangsirShrink = $rowCheckSusut->shrink;
                                                $LangsirUnitPrice = $rowCheckSusut->unit_price;
                                                $LangsirInventoruValue = $rowCheckSusut->inventory_value;
                                                $LangsirShrinkAmount = $rowCheckSusut->shrink_amount;
                                                $LangsirShrinkPrice =  $rowCheckSusut->shrink_price;
                                                $LangsirUnitCost = $rowCheckSusut->unit_cost;
                                        }
                                        if($contractLangsirSusut == '-S'){
                                            $susutSendWeight = $rowCheckSusut->send_weight;
                                            $susutNettoWeight = $rowCheckSusut->netto_weight;
                                            $susutQuantity = $rowCheckSusut->quantity;
                                            $susutShrink = $rowCheckSusut->shrink;
                                            $susutUnitPrice = $rowCheckSusut->unit_price;
                                            $susutInventoruValue = $rowCheckSusut->inventory_value;
                                            $susutShrinkAmount = $rowCheckSusut->shrink_amount;
                                            $susutShrinkPrice =  $rowCheckSusut->shrink_price;
                                            $susutUnitCost = $rowCheckSusut->unit_cost;
                                        }
                                    }
                                        $sendWeightFix = $LangsirSendWeight + $susutSendWeight;
                                        $nettoWeightFix = $LangsirNettoWeight + $susutNettoWeight;
                                        $totalCogsLangsir = $LangsirSendWeight * $LangsirUnitPrice;
                                        $totalCogsLangsirSusut = $susutSendWeight * $susutUnitPrice;
                                        $totalFinalCogs = $totalCogsLangsir + $totalCogsLangsirSusut;
                                        $totalFinalQuantity = $LangsirQuantity + $susutQuantity;
                                        $finalUnitPrice = $totalFinalCogs / $sendWeightFix;
                                        $shrinkFix = $LangsirShrink + $susutShrink;
                                        $shrinkAmountFix = $LangsirShrinkAmount + $susutShrinkAmount;
                                        $shrinkPriceFix = $shrinkAmountFix / $nettoWeightFix;
                                        if($LangsirNettoWeight > $LangsirSendWeight){
                                            $unitCostFix = $LangsirUnitCost;
                                            $inventoryValueFix = $unitCostFix * $nettoWeightFix;
                                            $updateTx = "update transaction t
                                        LEFT JOIN mutasi_header mh ON t.`mutasi_id` = mh.`mutasi_header_id`
                                        LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                                        LEFT JOIN contract c ON sc.`contract_id` = c.`contract_id`
                                        set t.send_weight = '{$sendWeightFix}', t.netto_weight = '{$nettoWeightFix}' , t.quantity = '{$totalFinalQuantity}', t.shrink = '{$shrinkFix}', t.unit_price = '{$finalUnitPrice}',
                                        t.inventory_value = '{$inventoryValueFix}', t.shrink_amount = '{$shrinkAmountFix}', t.shrink_price = '{$shrinkPriceFix}', t.unit_cost = '{$unitCostFix}'
                                        WHERE mh.`mutasi_header_id` = {$mutasiHeaderId} AND c.contract_no = '{$contractLangsir}' order by t.transaction_id desc limit 1";
                                        $resultUpdateTx = $myDatabase->query($updateTx,MYSQLI_STORE_RESULT);
                                        } else {
                                            $unitCostFix = $finalUnitPrice + $shrinkPriceFix + $mutasiValueTon;
                                            $inventoryValueFix = $unitCostFix * $nettoWeightFix;
                                            $updateTx = "update transaction t
                                        LEFT JOIN mutasi_header mh ON t.`mutasi_id` = mh.`mutasi_header_id`
                                        LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                                        LEFT JOIN contract c ON sc.`contract_id` = c.`contract_id`
                                        set t.send_weight = '{$sendWeightFix}', t.netto_weight = '{$nettoWeightFix}' , t.quantity = '{$totalFinalQuantity}', t.shrink = '{$shrinkFix}', t.unit_price = '{$finalUnitPrice}',
                                        t.inventory_value = '{$inventoryValueFix}', t.shrink_amount = '{$shrinkAmountFix}', t.shrink_price = '{$shrinkPriceFix}', t.unit_cost = '{$unitCostFix}'
                                        WHERE mh.`mutasi_header_id` = {$mutasiHeaderId} AND c.contract_no = '{$contractLangsir}'";
                                        $resultUpdateTx = $myDatabase->query($updateTx,MYSQLI_STORE_RESULT);
                                        }
                                    $deleteTx = "DELETE `transaction` FROM `transaction`
                                                LEFT JOIN mutasi_header mh ON transaction.`mutasi_id` = mh.`mutasi_header_id`
                                                LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = transaction.stockpile_contract_id
                                                LEFT JOIN contract c ON sc.`contract_id` = c.`contract_id`
                                                WHERE mh.`mutasi_header_id` = {$mutasiHeaderId} AND SUBSTRING(c.contract_no,25,2) = '-S'";
                                    $resultDeleteTx = $myDatabase->query($deleteTx,MYSQLI_STORE_RESULT);
                                    }
                                }

                foreach($transactionId as $id){
                    insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $id);
                    insertReportGL($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $id);
                }
            //die();

            if (isset($resultUpdate) && $resultUpdate !== false) {
                //Set Status Mutasi Header 1
                $updateMH = "update mutasi_header set status = 1 where mutasi_header_id = $mutasiHeaderId";
                $resultUpdate = $myDatabase->query($updateMH, MYSQLI_STORE_RESULT);

                $return_value = '|OK|Posting Transit has successfully inserted/updated.|' . $InsertTT;
            } else {
                $return_value = '|FAIL|Insert Posting failed.|';
                echo $sql4;
            }
        } else {
            $return_value = '|FAIL|Insert Failed.|';
        }
    } else {
        $return_value = '|FAIL|INVOICE NOT REGISTER|';
    }
    echo $return_value;
// </editor-fold>

} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'posting_transit') {
    // <editor-fold defaultstate="collapsed" desc="termin_detail_data">
    $sql = "select stockpile_to from mutasi_header where mutasi_header_id ={$_POST['kodeMutasi']}";
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    $row = $result->fetch_object();
    $stockpileId = $row->stockpile_to;
    $type = $_POST['type'];

    if ($type = 'calculateNettoSendwWeight') {
        $sql = "select * from transaction_timbangan where mutasi_header_id = {$_POST['kodeMutasi']} and stockpile_id = {$stockpileId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $totalNettoWeight = 0;
        if ($result->num_rows > 0) {
            while ($row = $result->fetch_array()) {
                if ($row['netto_weight'] < 0) {
                    $totalNettoWeight += $row['netto_weight'] * -1;
                } else {
                    $totalNettoWeight += $row['netto_weight'];
                }
            }
        }

        $sql1 = "select * from stock_transit where mutasi_header_id = {$_POST['kodeMutasi']}";
        $result = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
        $totalSendWeight = 0;
        if ($result->num_rows > 0) {
            while ($row = $result->fetch_array()) {
                $totalSendWeight += $row['send_weight'];
            }
        }

        echo $totalNettoWeight . '|' . $totalSendWeight;
    }
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'posting_mutasi_ok') {
    // <editor-fold defaultstate="collapsed" desc="posting_mutasi_data">

    $return_value = '';
    $selectedCheck = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $mutasiHeaderId = $myDatabase->real_escape_string($_POST['mutasiHeaderId']);
    // </editor-fold>

    if (isset($_POST['checks'])) {
        $checks = $_POST['checks'];
        for ($i = 0; $i < sizeof($checks); $i++) {
            $notimId = $checks[$i];

            if ($selectedCheck == '') {
                $selectedCheck .= $notimId;
            } else {
                $selectedCheck .= ', ' . $notimId;
            }
        }
    }

    $sqlNotim = "SELECT * FROM `transaction` WHERE transaction_id IN ({$selectedCheck})";
    $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
    if ($resultNotim !== false && $resultNotim->num_rows > 0) {
        while ($rowNotim = $resultNotim->fetch_object()) {
            $transactionId = $rowNotim->transaction_id;


            if ($transactionId != '') {

                $sql = "UPDATE transaction SET posting_status = 2 WHERE transaction_id = {$transactionId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                insertReportGL($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                $return_value = '|OK|Mutasi has successfully posted.|';

            } else {
                $return_value = '|FAIL|Record not found.|';
            }

        }
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'mutasi_data') {
    // <editor-fold defaultstate="collapsed" desc="mutasi_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $actionType = $myDatabase->real_escape_string($_POST['actionType']);
    $mutasiId = $myDatabase->real_escape_string($_POST['mutasiId']);
    $stockpileFrom = $myDatabase->real_escape_string($_POST['stockpileFrom']);
    $stockpileTo = $myDatabase->real_escape_string($_POST['stockpileTo']);
    $tanggalMutasi = $myDatabase->real_escape_string($_POST['tanggalMutasi']);
    $keterangan = $myDatabase->real_escape_string($_POST['keterangan']);
    $total = 0;
    // </editor-fold>

    $date = strtotime($tanggalMutasi);
    $newFormatDate = date('Y-m-d', $date);
    if ($actionType == 'INSERT') {
        // <editor-fold defaultstate="collapsed" desc="Generate Kode Mutasi">
        $sql = "SELECT kode_mutasi FROM mutasi_header WHERE stockpile_from = {$stockpileFrom} AND stockpile_to = {$stockpileTo} ORDER BY mutasi_header_id DESC LIMIT 1";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        //Stockpile From
        $sqFrom = "SELECT stockpile_code FROM stockpile WHERE stockpile_id = {$stockpileFrom} ";
        $resultFrom = $myDatabase->query($sqFrom, MYSQLI_STORE_RESULT);
        $rowFrom = $resultFrom->fetch_object();
        //Stockpile To
        $sqTo = "SELECT stockpile_code FROM stockpile WHERE stockpile_id = {$stockpileTo} ";
        $resultTo = $myDatabase->query($sqTo, MYSQLI_STORE_RESULT);
        $rowTo = $resultTo->fetch_object();

        if ($result->num_rows == 1) {
            $row = $result->fetch_object();
            $splitPoNo = explode('-', $row->kode_mutasi);
            $lastExplode = count($splitPoNo) - 1;
            $nextPoNo = ((float)$splitPoNo[$lastExplode]) + 1;
            $kodeMutasi = $rowFrom->stockpile_code . '-' . $rowTo->stockpile_code . '-' . $newFormatDate . '-' . $nextPoNo;
        } else {
            $kodeMutasi = $rowFrom->stockpile_code . '-' . $rowTo->stockpile_code . '-' . $newFormatDate . '-1';
        }
        //</editor-fold>
        $sql = "INSERT INTO `mutasi_header` (kode_mutasi, total, stockpile_from, stockpile_to, tanggal_mutasi, keterangan, entry_by, entry_date) VALUES ('{$kodeMutasi}',{$total}, {$stockpileFrom},{$stockpileTo}, '{$newFormatDate}','{$keterangan}',{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    } elseif ($actionType == 'UPDATE') {
        $sql = "UPDATE `mutasi_header` SET stockpile_from = {$stockpileFrom}, stockpile_to = {$stockpileTo}, keterangan = '{$keterangan}' WHERE mutasi_header_id = {$mutasiId}";
    } elseif ($actionType == 'DELETE') {
        $sql = "DELETE FROM `mutasi_header` WHERE mutasi_header_id = {$mutasiId}";
    } else {

    }
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($result !== false) {
        if ($actionType == 'INSERT') {
            $return_value = '|OK|Mutasi has successfully inserted';
        } elseif ($actionType == 'UPDATE') {
            $return_value = '|OK|Mutasi has successfully updated';
        } elseif ($actionType == 'DELETE') {
            $return_value = '|OK|Mutasi has successfully deleted';
        }

    } else {
        $return_value = '|FAIL|Insert/update mutasi failed.||';
        echo $sql;
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'mutasi_detail') {
    // <editor-fold defaultstate="collapsed" desc="mutasi_detail">
    $return_value = '';
    $boolNew = false;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $actionType = $myDatabase->real_escape_string($_POST['actionType']);
    $mutasiDetailId = $myDatabase->real_escape_string($_POST['mutasiDetailId']);
    if ($actionType !== 'DELETE') {
        $vendorType = $myDatabase->real_escape_string($_POST['vendorType']);
        $mutasiId = $myDatabase->real_escape_string($_POST['mutasiId']);
        $tipeBiaya = $myDatabase->real_escape_string($_POST['tipeBiaya']);
        $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
        $exchangeRate = $myDatabase->real_escape_string($_POST['exchangeRate']);
        $qty = floatval($myDatabase->real_escape_string($_POST['qty']));
        $price = floatval($myDatabase->real_escape_string($_POST['price']));
        $total = floatval($myDatabase->real_escape_string($_POST['total']));
        $accountId = $myDatabase->real_escape_string($_POST['accountId']);
        $uom = $myDatabase->real_escape_string($_POST['uom']);
        $registerDate = $myDatabase->real_escape_string($_POST['registerDate']);
        if (isset($_POST['ppn'])) {
            $ppn = $myDatabase->real_escape_string($_POST['ppn']);
            $ppnId = $myDatabase->real_escape_string($_POST['ppnTaxId']);
        } else {
            $ppn = 0;
            $ppnId = 0;
        }

        if ($actionType == 'INSERT') {
            $terminId = $myDatabase->real_escape_string($_POST['terminId']);
            $mutasiId = $myDatabase->real_escape_string($_POST['mutasiId']);
        }
        if ($vendorType == 'General' && $actionType != 'UPDATE') {
            if (isset($_POST['pphVendorId']) && $_POST['pphVendorId'] != '') {
                $pphId = $myDatabase->real_escape_string($_POST['pphVendorId']);
            } else {
                $pphId = 0;
            }
        } else {
            if (isset($_POST['pph']) && $_POST['pph'] != 0 && isset($_POST['pphTaxId'])) {
                $pph = $myDatabase->real_escape_string($_POST['pph']);
                $pphId = $myDatabase->real_escape_string($_POST['pphTaxId']);
            } else {
                $pph = 0;
                $pphId = 0;
            }
        }
        //Get Vendor
        if (isset($vendorType) && $vendorType == 'Pks') {
            $vendor = $myDatabase->real_escape_string($_POST['vendorNamePks']);
        } elseif (isset($vendorType) && $vendorType == 'General') {
            $vendor = $myDatabase->real_escape_string($_POST['vendorNameGeneral']);
        } elseif (isset($vendorType) && $vendorType == 'Freight') {
            $vendor = $myDatabase->real_escape_string($_POST['vendorNameFreight']);
        } elseif (isset($vendorType) && $vendorType == 'Labor') {
            $vendor = $myDatabase->real_escape_string($_POST['vendorNameLabor']);
        } elseif (isset($vendorType) && $vendorType == 'Handling') {
            $vendor = $myDatabase->real_escape_string($_POST['vendorNameHandling']);
        } elseif (isset($vendorType) && $vendorType == 'PettyCash') {
            $vendor = $myDatabase->real_escape_string($_POST['vendorNamaPettyCash']);
        } else {
            $vendor = 'NULL';
        }
        // </editor-fold>
        //check total termin percentage
        if ($actionType === 'INSERT') {
            $sql1 = "select total_percentage from master_termin where id = {$terminId}";
            $totalTermin = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
            $rowTotal = $totalTermin->fetch_object();
        }
    }

    if (isset($rowTotal->total_percentage) && $rowTotal->total_percentage == 100 && $actionType == 'INSERT') {

        $vendor = explode("-", $vendor);
        $vendorId = $vendor[0];
        $vendorName = $vendor[1];
        $totalPrice = $qty * $price * $exchangeRate;

        $sql3 = "select id, percentage from termin_detail td where td.termin_id = {$terminId}";
        $terminPercent = $myDatabase->query($sql3, MYSQLI_STORE_RESULT);

        $sqlTglMutasi = "select * from mutasi_header where mutasi_header_id = {$mutasiId}";
        $resultTanggalMutasi = $myDatabase->query($sqlTglMutasi, MYSQLI_STORE_RESULT);
        $rowTanggalMutasi = $resultTanggalMutasi->fetch_object();
        $tanggalMutasi = $rowTanggalMutasi->tanggal_mutasi;
        if ($registerDate >= $tanggalMutasi) {
            if ($terminPercent !== false && $terminPercent->num_rows > 0) {
                while ($rowTermin = $terminPercent->fetch_object()) {
                    $totalFinal = $totalPrice * $rowTermin->percentage / 100;
                    $ppnConverted = $totalFinal * $ppn / 100;
                    if ($vendorType == 'General') {
                        if ($pphId != 0) {
                            $sql = "select tax_value from tax where tax_id = {$pphId}";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            $row = $result->fetch_object();
                            $pph = $row->tax_value;
                        } else {
                            $pph = 0;
                        }
                        $pphConverted = $totalFinal * $pph / 100;
                    } else {
                        $pphConverted = $totalFinal * $pph / 100;
                    }

//                echo $tanggalMutasi . '    ' . $registerDate;


                    $sql = "INSERT INTO `mutasi_detail` (mutasi_header_id, biaya_mutasi_id, vendor_type,vendor, currency_id,exchange_rate, qty, uom,price, total,total_per_termin, account_id,termin_detail_id,ppnId,ppn,ppn_converted,pphId,pph,pph_converted,general_vendor_id, register_date, entry_by, entry_date)
                        VALUES ({$mutasiId}, '{$tipeBiaya}', '{$vendorType}', '{$vendorName}', {$currencyId}, {$exchangeRate}, {$qty}, '{$uom}',{$price}, {$total}, {$totalFinal},{$accountId},{$rowTermin->id},{$ppnId},{$ppn},{$ppnConverted},{$pphId},{$pph},{$pphConverted}, {$vendorId} ,'{$registerDate}',{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                }
            }
            $sql5 = "select * from mutasi_detail where mutasi_header_id = {$mutasiId}";
            $temp = $myDatabase->query($sql5, MYSQLI_STORE_RESULT);
            while ($rowTemp = $temp->fetch_array()) {
                $totalMutasiHeader += $rowTemp['total_per_termin'];
            }
            $sql2 = "update `mutasi_header` set total = {$totalMutasiHeader} where mutasi_header_id = {$mutasiId} ";
            $result = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
            if ($result !== false) {
                $return_value = '|OK|Mutasi Detail has successfully inserted';
                echo $totalMutasiHeader . ' test ';
            } else {
                $return_value = '|FAIL|Insert mutasi failed.||';
            }
        } else {
            $return_value = '|FAIL|Register Date cant older than Mutation Date ' . $tanggalMutasi;
//            die();
        }
    } elseif ($actionType == 'UPDATE') {
        $totalPrice = $qty * $price;
        $percentage = $_POST['terminPercentage'];
        $totalTermin = $totalPrice * $percentage / 100;
        $ppnConverted = $totalTermin * $ppn / 100;
        $pphConverted = $totalTermin * $pph / 100;

        $sql = "UPDATE `mutasi_detail` SET 
                tipe_biaya = '{$tipeBiaya}', qty = {$qty}, price = {$price}, total = {$totalPrice}, total_per_termin = {$totalTermin}, ppn_converted = {$ppnConverted}, pph_converted = {$pphConverted}
                WHERE mutasi_detail_id = {$mutasiDetailId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $return_value = '|OK|Mutasi Detail has successfully updated';
    } elseif ($actionType == 'DELETE') {
        $mutasiId = $myDatabase->real_escape_string($_POST['mutasiId']);
        $sqlMutasiDetail = "select * from mutasi_detail where mutasi_detail_id = {$mutasiDetailId}";
        $resulMutasiDetail = $myDatabase->query($sqlMutasiDetail, MYSQLI_STORE_RESULT);
        if ($resulMutasiDetail !== false && $resulMutasiDetail->num_rows > 0) {
            $rowData = $resulMutasiDetail->fetch_object();
            $mhId = $rowData->mutasi_header_id;
            $pgdId = $rowData->pgd_id;
            $biayaMutasi = $rowData->biaya_mutasi_id;
            $vendor = $rowData->vendor;
            $gvId = $rowData->general_vendor_id;
            $currency1 = $rowData->currency_id;
            $exchangeRate1 = $rowData->exchange_rate;
            $qty1 = $rowData->qty;
            $price1 = $rowData->price;
            $total1 = $rowData->total;
            $totalPerTermin1 = $rowData->total_per_termin;
            $accountId1 = $rowData->account_id;
            $terminDetail1 = $rowData->termin_detail_id;
            $ppn1 = $rowData->ppn;
            $ppnConverted1 = $rowData->ppn_converted;
            $pph1 = $rowData->pph;
            $pphConverted1 = $rowData->pph_converted;
            $sql1 = "INSERT INTO `log_mutasi_detail` (`action`, mutasi_detail_id, mutasi_header_id, biaya_mutasi_id,vendor, general_vendor_id, currency_id,exchange_rate, 
                        qty, price, total,total_per_termin, account_id,termin_detail_id,ppn,ppn_converted,pph,pph_converted, entry_by, entry_date)
                        VALUES ('{$actionType}',{$mutasiDetailId},{$mutasiId}, '{$biayaMutasi}', '{$vendor}', {$gvId},{$currency1}, {$exchangeRate1}, {$qty1}, 
                        {$price1}, {$total1}, {$totalPerTermin1},{$accountId1},{$terminDetail1},{$ppn1},{$ppnConverted1},{$pph1},{$pphConverted1},
                        {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $resultLogMutasiDetail = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
        }
        $sqlCekInvoice = "SELECT * FROM invoice_detail id LEFT JOIN invoice i ON id.invoice_id = i.invoice_id 
                        WHERE i.payment_status != 2 AND i.invoice_status != 1 AND mutasi_detail_id = {$mutasiDetailId}";
        $resultCekInvoice = $myDatabase->query($sqlCekInvoice, MYSQLI_STORE_RESULT);
        if ($resultCekInvoice !== false && $resultCekInvoice->num_rows == 0) {
            $sql1 = "select total_per_termin from mutasi_detail where mutasi_detail_id = {$mutasiDetailId} ";
            $tempTotalPerTermin = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
            $rowTotalPerTermin = $tempTotalPerTermin->fetch_object();
            $totalPerTermin = $rowTotalPerTermin->total_per_termin;
            $sql2 = "select total from mutasi_header where mutasi_header_id = {$mutasiId}";
            $tempTotalTermin = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
            $rowTotalTermin = $tempTotalTermin->fetch_object();
            $totalTermin = $rowTotalTermin->total;
            $totalMutasiHeader = $totalTermin - $totalPerTermin;
            $sql = "update mutasi_header set total = {$totalMutasiHeader} where mutasi_header_id = {$mutasiId};";
            $sql .= "DELETE FROM `mutasi_detail` WHERE mutasi_detail_id = {$mutasiDetailId}";
            $result = $myDatabase->multi_query($sql);
            $return_value = '|OK|Mutasi has successfully deleted';
        } else {
            $return_value = '|FAIL|Detail mutation already has invoice';
            echo $sqlCekInvoice;
        }
    } else {
        $return_value = '|FAIL|Termin Kurang Dari 100% silahkan pilih termin lain.||';
    }
    echo $return_value;
// </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'biaya_mutasi_data') {
    // <editor-fold defaultstate="collapsed" desc="biaya_mutasi_data">

    $return_value = '';

    $actionType = $myDatabase->real_escape_string($_POST['actionType']);
    $biayaMutasiId = $myDatabase->real_escape_string($_POST['biayaMutasiId']);
    $tipeBiaya = $myDatabase->real_escape_string($_POST['tipeBiaya']);


    if ($actionType == 'INSERT') {
        $sql = "INSERT INTO `master_biaya_mutasi` (tipe_biaya, entry_by, entry_date) 
                VALUES ('{$tipeBiaya}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    } elseif ($actionType == 'UPDATE') {
        $sql = "UPDATE `master_biaya_mutasi` SET tipe_biaya = '{$tipeBiaya}', entry_by = {$_SESSION['userId']}, entry_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s')  WHERE id = {$biayaMutasiId}";
    } elseif ($actionType == 'DELETE') {
        $sql = "DELETE FROM `master_biaya_mutasi` WHERE id = {$biayaMutasiId}";
    } else {
    }
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($result !== false) {
        if ($actionType == 'INSERT') {
            $return_value = '|OK|Biaya Mutasi has successfully inserted';
        } elseif ($actionType == 'UPDATE') {
            $return_value = '|OK|Biaya Mutasi has successfully updated';
        } elseif ($actionType == 'DELETE') {
            $return_value = '|OK|Biaya Mutasi has successfully deleted';
        }
    } else {
        $return_value = '|FAIL|Insert/Update Biaya Mutasi Failed||';
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'mutasi_contract') {
    // <editor-fold defaultstate="collapsed" desc="mutasi_contract">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $actionType = $myDatabase->real_escape_string($_POST['actionType']);
    $mutasiId = $myDatabase->real_escape_string($_POST['mutasiId']);
    $mutasiContractId = $myDatabase->real_escape_string($_POST['mutasiContractId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    // </editor-fold>
    if ($actionType == 'INSERT') {
        $sql = "INSERT INTO `mutasi_contract` (mutasi_header_id, stockpile_contract_id, entry_by, entry_date) VALUES ('{$mutasiId}',{$stockpileContractId},{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    } elseif ($actionType == 'UPDATE') {
        $sql = "UPDATE `mutasi_contract` SET stockpile_contract_id = {$stockpileContractId} WHERE id = {$mutasiContractId}";
    } elseif ($actionType == 'DELETE') {
        $sql = "DELETE FROM `mutasi_contract` WHERE id = {$mutasiContractId}";
    } else {

    }
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($result !== false) {
        if ($actionType == 'INSERT') {
            $sqlUpdate = "UPDATE stockpile_contract SET status_mutasi = 1 where stockpile_contract_id = $stockpileContractId";
            $result1 = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
            $return_value = '|OK|Mutasi Contract has successfully inserted';
        } elseif ($actionType == 'UPDATE') {
            $return_value = '|OK|Mutasi Contract has successfully updated';
        } elseif ($actionType == 'DELETE') {
            $return_value = '|OK|Mutasi Contract has successfully deleted';
        }

    } else {
        $return_value = '|FAIL|Insert/update Mutasi Contract failed.||';
        echo $sql;
    }
    echo $return_value;
    // </editor-fold>
}

function closingDate($transactionDate, $module)
{
    // <editor-fold defaultstate="collapsed" desc="closingDate">

    global $myDatabase;


    $sqlClosingDate = "SELECT DATE_FORMAT(closing_date,'%d %M %Y') as cd_format,
    DATE_FORMAT(start_period,'%d %M %Y') as sp_format, 
    DATE_FORMAT(end_period,'%d %M %Y') as ep_format,
    closing_date,start_period,end_period,cd.`status`,cd.`active`,cdl.label,s.stockpile_name,s.stockpile_id
    FROM closing_date cd 
    LEFT JOIN closing_date_label cdl ON cdl.closing_date_label_id = cd.closing_date_label_id
    LEFT JOIN stockpile s ON s.stockpile_id = cd.stockpile_id
    LEFT JOIN user_stockpile us ON us.stockpile_id = cd.stockpile_id
    WHERE cd.active = 1 AND cdl.label = '{$module}' AND us.user_id = {$_SESSION['userId']}
    AND (closing_date < '{$transactionDate}' OR start_period <= '{$transactionDate}' AND end_period >= '{$transactionDate}') LIMIT 1 ";

    $resultClosingDate = $myDatabase->query($sqlClosingDate, MYSQLI_STORE_RESULT);
    if ($resultClosingDate !== false && $resultClosingDate->num_rows > 0) {
        $rowClosingDate = $resultClosingDate->fetch_object();
    } else {
        $sqlClosingDate = "SELECT DATE_FORMAT(closing_date,'%d %M %Y') as cd_format,
        DATE_FORMAT(start_period,'%d %M %Y') as sp_format, 
        DATE_FORMAT(end_period,'%d %M %Y') as ep_format,
        closing_date,start_period,end_period,cd.`status`,cd.`active`,cdl.label,s.stockpile_name,s.stockpile_id
        FROM closing_date cd 
        LEFT JOIN closing_date_label cdl ON cdl.closing_date_label_id = cd.closing_date_label_id
        LEFT JOIN stockpile s ON s.stockpile_id = cd.stockpile_id
        WHERE cdl.label = '{$module}' AND cd.stockpile_id IS NULL AND cd.active = 1
        AND (closing_date < '{$transactionDate}' OR start_period <= '{$transactionDate}' AND end_period >= '{$transactionDate}') LIMIT 1 ";
        $resultClosingDate = $myDatabase->query($sqlClosingDate, MYSQLI_STORE_RESULT);
        $rowClosingDate = $resultClosingDate->fetch_object();
    }
    $closing = false;

    if ($resultClosingDate !== false && $resultClosingDate->num_rows > 0) {
        // $closingDate = $rowClosingDate->closing_date;
        // $startPeriod = $rowClosingDate->start_period;
        // $endPeriod = $rowClosingDate->end_period;
        // $status = $rowClosingDate->status;
        // $active = $rowClosingDate->active;
        // $closingDateFormat = $rowClosingDate->cd_format;
        // $startPeriodFormat = $rowClosingDate->sp_format;
        // $endPeriodFormat = $rowClosingDate->ep_format;
        $closing = '1-Sukses';
    } else {
        $closing = '0-|Fail|Transaction has been closed.';
    }
    return $closing;

    // if ($status == 0) {
    //     if ($transactionDate >= $closingDate) {
    //         $closing = 1;
    //     } else {
    //         $closing = '0|at ' . '' . $closingDateFormat;
    //     }
    // } elseif ($status == 1) {
    //     if ($transactionDate >= $startPeriod && $transactionDate <= $endPeriod OR $transactionDate >= $closingDate) {
    //         $closing = 1;
    //     } else {
    //         $closing = '0|Period From ' . $startPeriodFormat . ' To ' . $endPeriodFormat.' And Closing At '.$closingDateFormat;
    //     }
    // }

    // return $closing;
    // </editor-fold>
}

function get_ip_address()
{
    // <editor-fold defaultstate="collapsed" desc="get_ip_address">
    foreach (array('HTTP_CLIENT_IP', 'HTTP_X_FORWARDED_FOR', 'REMOTE_ADDR') as $key) {
        if (array_key_exists($key, $_SERVER)) {
            foreach (explode(',', $_SERVER[$key]) as $ip) {
                if (filter_var($ip, FILTER_VALIDATE_IP)) {
                    return $ip;
                }
            }
        }
    }
    return "0";
    // </editor-fold>
}

function generateRandomString($length = 10)
{
    // <editor-fold defaultstate="collapsed" desc="generateRandomString">
    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $randomString = '';
    for ($i = 0; $i < $length; $i++) {
        $randomString .= $characters[rand(0, strlen($characters) - 1)];
    }
    return $randomString;
    // </editor-fold>
}

function excelImportContract($myDatabase, $fileName = "", $stockpileId = 0, $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1)
{
    // <editor-fold defaultstate="collapsed" desc="excelImportContract($myDatabase, $fileName = "", $stockpileId = 0, $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1)">
    if (file_exists(realpath($fileName))) {
        $fileNameRealPath = realpath($fileName);

        require_once './assets/extensions/PHPExcel.php';
        require_once './assets/extensions/PHPExcel/IOFactory.php';
        require_once './assets/extensions/PHPExcel/Cell/AdvancedValueBinder.php';

        $objReader = PHPExcel_IOFactory::createReader('Excel5');

        $objPHPExcel = $objReader->load($fileNameRealPath);

        $readStartAtRow = 1;
        $totalCols = 11;

        $result = $myDatabase->query("START TRANSACTION", MYSQLI_STORE_RESULT);

//        $sheetCount = $objPHPExcel->getSheetCount();
        $sheetCount = 1;
        for ($onSheet; $onSheet < $sheetCount; $onSheet++) {
            $objPHPExcel->setActiveSheetIndex($onSheet);
            $objWorksheet = $objPHPExcel->getActiveSheet();

            $rows = $objWorksheet->getHighestRow();
            $cols = PHPExcel_Cell::columnIndexFromString($objWorksheet->getHighestColumn());
            if ($toRow == -1)
                $toRow = $rows;
            if ($toCol == -1)
                $toCol = $cols;

            $key = array();
            $columnName = array();
            $getColumnAName = false;

            if ($toCol == $totalCols) {
                for ($row = $fromRow; $row <= $rows; $row++) {
                    for ($i = $fromCol; $i < $cols; $i++) {
                        $columnName[$i] = "column_" . $i;
                        if (isset($columnName[$i])) {
                            if (PHPExcel_Shared_Date::isDateTime($objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row))) {
                                $tmp = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();

                                if (is_numeric($tmp)) {
                                    $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'YYYY-MM-DD');
                                } else {
                                    $key[$row][$i]['value'] = substr($tmp, 6, 4) . "-" . substr($tmp, 3, 2) . "-" . substr($tmp, 0, 2);
                                }
//                                $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'DD-MMM-YYYY');
                            } else {
//                                $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();
                                $check = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();
                                if (substr($check, 0, 1) == "=") {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getCalculatedValue();
                                } else {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();
                                }
                            }
                        }
                    }
                }

                $getColumnAName = true;
            } else {
                return 'FAIL|Template is wrong.';
            }
        }

        if ($getColumnAName) {
            $temporaryTable = '';
            $temporaryTableWarning = '';
            $temporaryTableDuplicate = '';
            $fieldNames = '';

            foreach ($columnName as $i => $names) {
                if (trim($names) != '') {
                    $temporaryTable .= (($temporaryTable == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableWarning .= (($temporaryTableWarning == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableDuplicate .= (($temporaryTableDuplicate == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $fieldNames .= (($fieldNames == '') ? '' : ', ') . "`" . trim($names) . "`";
                }
            }

            $tempTable = '`tmp_contract_' . uniqid() . '`';
//            $temporaryTable = 'CREATE TEMPORARY TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableWarning = '`jb_sdw_' . uniqid() . '`';
//            $temporaryTableWarning = 'CREATE TEMPORARY TABLE ' . $tempTableWarning . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableWarning . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableDuplicate = '`jb_sdd_' . uniqid() . '`';
//            $temporaryTableDuplicate = 'CREATE TEMPORARY TABLE ' . $tempTableDuplicate . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableDuplicate . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
            $temporaryTable = 'CREATE TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';

//            return "0|". $temporaryTable;

            $result = $myDatabase->query($temporaryTable, MYSQLI_STORE_RESULT);
            if ($result === false) {
                return 'FAIL|error create table ' . $myDatabase->errorMessage;
            }

            $insertInto = '';
            foreach ($key as $row => $colData) {
                if ($colData[1] != null) {
                    $insertIntoCol = '';
                    foreach ($colData as $col => $colDatas) {
                        if (strpos($colDatas['value'], "NULL") !== false || $colDatas['value'] == '')
                            $insertIntoCol .= (($insertIntoCol == '') ? '' : ', ') . "NULL";
                        else {
                            $insertIntoCol .= (($insertIntoCol == '') ? '' : ', ') . "'" . $colDatas['value'] . "'";
                        }
                    }
                    $insertInto .= (($insertInto == '') ? '' : ', ') . "(" . $insertIntoCol . ")";
//                die("INSERT INTO $temp_table ($fieldnames) VALUES " . $insertinto . ";");
                }
            }

            $insertIntoTemp = "INSERT INTO $tempTable ($fieldNames) VALUES " . $insertInto . ";";

            $result = $myDatabase->query($insertIntoTemp, MYSQLI_STORE_RESULT);
            if ($result === false) {
                return 'FAIL|error insert table ' . $myDatabase->errorMessage;
            }

//            return 'OK|Table created.';

            $sqlSelect = "select SUBSTR(a.column_1, 1, 1) as contract_type, a.* from $tempTable a;";
            $resultSelect = $myDatabase->query($sqlSelect, MYSQLI_STORE_RESULT);
            $successRow = 0;
            $errorRow = 0;
            $warningRow = 0;
            $counterRow = 1;
            $errorMessage = '';

            date_default_timezone_set('Asia/Jakarta');

            $date = new DateTime();
            $currentDate = $date->format('d/m/Y H:i:s');
            $currentYear = $date->format('y');
            $currentYearMonth = $date->format('ym');

            while ($importedData = $resultSelect->fetch_object()) {
                if ($counterRow >= $readStartAtRow) {
                    // check Vendor
                    $boolInsertVendor = false;
                    $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$importedData->column_2}')";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($result !== false && $result->num_rows > 0) {
                        $rowVendor = $result->fetch_object();
                        $vendorId = $rowVendor->vendor_id;
                        $boolInsertVendor = true;
                    } elseif ($result !== false && $result->num_rows == 0) {
                        $ppn = 0;
                        $pph = 0;
                        $ppnValue = 0;
                        $pphValue = 0;

                        if (strtoupper($importedData->column_4) == 'PPN') {
                            $ppn = 1;
                            $ppnValue = 10;
                        }

                        if ($importedData->column_5 != '') {
                            $sqlPPh = "SELECT * FROM tax WHERE UPPER(tax_name) = UPPER({$importedData->column_4})";
                            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                            if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                                $rowPPh = $resultPPh->fetch_object();
                                $pph = $rowPPh->tax_id;
                                $pphValue = $rowPPh->tax_value;
                            }
                        }

                        $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                            . "UPPER('{$importedData->column_2}'), UPPER('{$importedData->column_3}'), '', '', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                        if ($result !== false) {
                            $vendorId = $myDatabase->insert_id;
                            $boolInsertVendor = true;
                        }
                    }

                    if ($boolInsertVendor) {
                        $sql = "SELECT * FROM contract WHERE UPPER(contract_no) = UPPER('{$importedData->column_7}')";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($result !== false && $result->num_rows == 0) {
                            if ($importedData->column_1 == '-' || $importedData->column_1 == '' || $importedData->column_1 == null) {
                                $checkPoNo = $importedData->contract_type . '-' . $importedData->column_2 . '-' . $currentYearMonth;
                                $sql = "SELECT po_no FROM contract WHERE company_id = {$_SESSION['companyId']} AND po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
                                $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if ($resultPo->num_rows == 1) {
                                    $rowPo = $resultPo->fetch_object();
                                    $splitPoNo = explode('-', $rowPo->po_no);
                                    $nextPoNo = ((float)$splitPoNo[3]) + 1;
                                    $poNo = $checkPoNo . '-' . $nextPoNo;
                                } else {
                                    $poNo = $checkPoNo . '-1';
                                }
                            } else {
                                $poNo = $importedData->column_1;
                            }

                            if ($importedData->column_9 == '-' || $importedData->column_9 == '' || $importedData->column_9 == null) {
                                $quantity = 0;
                            } else {
                                $quantity = $importedData->column_9;
                            }

                            $sql = "INSERT INTO `contract` (contract_type, po_no, contract_no, vendor_id, currency_id, exchange_rate, price, price_converted, "
                                . "quantity, company_id, entry_by, entry_date) VALUES ("
                                . "'{$importedData->contract_type}', '{$poNo}', '{$importedData->column_7}', {$vendorId}, 1, 1, {$importedData->column_8}, {$importedData->column_8}, "
                                . "{$quantity}, {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                            if ($result !== false) {
                                $contractId = $myDatabase->insert_id;

                                $sql = "SELECT * FROM `stockpile` WHERE UPPER(stockpile_name) = UPPER('{$importedData->column_10}')";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if ($result !== false && $result->num_rows > 0) {
                                    $rowSP = $result->fetch_object();
                                    $stockpileId = $rowSP->stockpile_id;

                                    $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                                        . "{$stockpileId}, {$contractId}, {$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                } else {
                                    $warningRow = $warningRow + 1;
                                }

                                insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", $contractId);

                                $successRow = $successRow + 1;
                            } else {
                                $errorRow = $errorRow + 1;
                            }
                        } else {
                            $warningRow = $warningRow + 1;
                        }
                    } else {
                        $errorRow = $errorRow + 1;
                    }
                }
                $counterRow++;
            }

            if (($successRow + $warningRow) >= ($counterRow - 1) && $errorRow == 0) {
                $result = $myDatabase->query("COMMIT", MYSQLI_STORE_RESULT);

                $sql = "DROP TABLE {$tempTable}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


                return "OK|" . $successRow . " Row(s) import successfully, " . $warningRow . " Row(s) failed with warning. " . $errorMessage;
            } else {
                $result = $myDatabase->query("ROLLBACK", MYSQLI_STORE_RESULT);

                return "FAIL|Import failed. " . $errorRow . " Rows(s) can not be imported. Please contact administrator. ";
            }

        }
    } else {
        return 'FAIL|File not exists.';
    }
    // </editor-fold>
}

function excelImportPayment($myDatabase, $fileName = "", $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1)
{
    // <editor-fold defaultstate="collapsed" desc="function excelImportTransaction($myDatabase, $fileName = "", $stockpileId = 0, $vendorId = 0, $stockpileContractId = 0, $onSheet = 0, $fromRow = 1, $toRow = -1, $fromCol = 0, $toCol = -1)">
    if (file_exists(realpath($fileName))) {
        $fileNameRealPath = realpath($fileName);

        require_once './assets/extensions/PHPExcel.php';
        require_once './assets/extensions/PHPExcel/IOFactory.php';
        require_once './assets/extensions/PHPExcel/Cell/AdvancedValueBinder.php';

        $objReader = PHPExcel_IOFactory::createReader('Excel5');

        $objPHPExcel = $objReader->load($fileNameRealPath);

        $readStartAtRow = 1;
        $totalCols = 23;

        $result = $myDatabase->query("START TRANSACTION", MYSQLI_STORE_RESULT);

//        $sheetCount = $objPHPExcel->getSheetCount();
        $sheetCount = 1;
        for ($onSheet; $onSheet < $sheetCount; $onSheet++) {
            $objPHPExcel->setActiveSheetIndex($onSheet);
            $objWorksheet = $objPHPExcel->getActiveSheet();

            $rows = $objWorksheet->getHighestRow();
            $cols = PHPExcel_Cell::columnIndexFromString($objWorksheet->getHighestColumn());
            if ($toRow == -1)
                $toRow = $rows;
            if ($toCol == -1)
                $toCol = $cols;

            $key = array();
            $columnName = array();
            $getColumnAName = false;

            if ($toCol == $totalCols) {
                for ($row = $fromRow; $row <= $rows; $row++) {
                    for ($i = $fromCol; $i < $cols; $i++) {
                        $columnName[$i] = "column_" . $i;
                        if (isset($columnName[$i])) {
                            if (PHPExcel_Shared_Date::isDateTime($objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row))) {
                                $tmp = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();

                                if (is_numeric($tmp)) {
                                    $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'YYYY-MM-DD');
                                } else {
                                    $key[$row][$i]['value'] = substr($tmp, 6, 4) . "-" . substr($tmp, 3, 2) . "-" . substr($tmp, 0, 2);
                                }
//                                $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'DD-MMM-YYYY');
                            } else {
//                                $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();
                                $check = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();
                                if (substr($check, 0, 1) == "=") {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getCalculatedValue();
                                } else {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();
                                }
                            }
                        }
                    }
                }

                $getColumnAName = true;
            } else {
                return 'FAIL|Template is wrong.';
            }
        }

        if ($getColumnAName) {
            $temporaryTable = '';
            $temporaryTableWarning = '';
            $temporaryTableDuplicate = '';
            $fieldNames = '';

            foreach ($columnName as $i => $names) {
                if (trim($names) != '') {
                    $temporaryTable .= (($temporaryTable == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableWarning .= (($temporaryTableWarning == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableDuplicate .= (($temporaryTableDuplicate == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $fieldNames .= (($fieldNames == '') ? '' : ', ') . "`" . trim($names) . "`";
                }
            }

            $tempTable = '`tmp_payment_' . uniqid() . '`';
//            $temporaryTable = 'CREATE TEMPORARY TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableWarning = '`jb_sdw_' . uniqid() . '`';
//            $temporaryTableWarning = 'CREATE TEMPORARY TABLE ' . $tempTableWarning . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableWarning . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableDuplicate = '`jb_sdd_' . uniqid() . '`';
//            $temporaryTableDuplicate = 'CREATE TEMPORARY TABLE ' . $tempTableDuplicate . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableDuplicate . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
            $temporaryTable = 'CREATE TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';

//            return "0|". $temporaryTable;

            $result = $myDatabase->query($temporaryTable, MYSQLI_STORE_RESULT);
            if ($result === false) {
                return 'FAIL|error create table ' . $myDatabase->errorMessage;
            }

            $insertInto = '';
            foreach ($key as $row => $colData) {
                if ($colData[1] != null) {
                    $insertIntoCol = '';
                    foreach ($colData as $col => $colDatas) {
                        if (strpos($colDatas['value'], "NULL") !== false || $colDatas['value'] == '')
                            $insertIntoCol .= (($insertIntoCol == '') ? '' : ', ') . "NULL";
                        else {
                            $insertIntoCol .= (($insertIntoCol == '') ? '' : ', ') . "'" . $colDatas['value'] . "'";
                        }
                    }
                    $insertInto .= (($insertInto == '') ? '' : ', ') . "(" . $insertIntoCol . ")";
//                die("INSERT INTO $temp_table ($fieldnames) VALUES " . $insertinto . ";");
                }
            }

            $insertIntoTemp = "INSERT INTO $tempTable ($fieldNames) VALUES " . $insertInto . ";";

            $result = $myDatabase->query($insertIntoTemp, MYSQLI_STORE_RESULT);
            if ($result === false) {
                return 'FAIL|error insert table ' . $myDatabase->errorMessage;
            }

            $sqlSelect = "SELECT a.*, DATE_FORMAT(a.column_2, '%y') AS trans_year, COALESCE(a.column_15, 0) AS tarra FROM $tempTable a ORDER BY id ASC;";
            $resultSelect = $myDatabase->query($sqlSelect, MYSQLI_STORE_RESULT);
            $successRow = 0;
            $errorRow = 0;
            $warningRow = 0;
            $counterRow = 1;
            $errorMessage = '';
            $shipmentError = 0;
            $categoryError = 0;
            $rateError = 0;
            $currencyError = 0;
            $insuredError = 0;
            $countryFromError = 0;
            $countryToError = 0;
            $duplicateError = 0;
            $duplicateQuotation = '';
            $shipmentQuotation = '';
            $categoryQuotation = '';
            $rateQuotation = '';
            $currencyQuotation = '';
            $insuredQuotation = '';
            $countryFromQuotation = '';
            $countryToQuotation = '';

            date_default_timezone_set('Asia/Jakarta');

            $date = new DateTime();
            $currentDate = $date->format('d/m/Y H:i:s');

            /* $sqlStockpile = "SELECT * FROM stockpile WHERE stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sqlStockpile, MYSQLI_STORE_RESULT);
            $rowStockpile = $resultStockpile->fetch_object();
            $freightWeightRule = $rowStockpile->freight_weight_rule;
            $curahWeightRule = $rowStockpile->curah_weight_rule;
            $stockpileCode = $rowStockpile->stockpile_code;
            */
            while ($importedData = $resultSelect->fetch_object()) {
                if ($counterRow >= $readStartAtRow) {
                    // $custTaxId = 'NULL';
                    //$curahTaxId = 'NULL';
                    //$ucTaxId = 'NULL';
                    //$fcTaxId = 'NULL';

                    if (strtoupper($importedData->column_0) == 'PAYMENT' && strtoupper($importedData->column_1) == 'OUT' && strtoupper($importedData->column_0) == 'FREIGHT COST') {
                        if ($importedData->column_6 != '0' && strtoupper($importedData->column_6) != 'NONE' && $importedData->column_6 != '' && $importedData->column_11 != '-' && $importedData->column_6 != null) {
                            $sql = "SELECT * FROM stockpile WHERE UPPER(stockpile_name) = UPPER('{$importedData->column_6}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $stockpileId = $row->stockpile_id;
                            }
                        }

                        if ($importedData->column_11 != '0' && strtoupper($importedData->column_11) != 'NONE' && $importedData->column_11 != '' && $importedData->column_11 != '-' && $importedData->column_11 != null) {
                            $sql = "SELECT * FROM `freight` WHERE UPPER(freight_supplier) = UPPER('{$importedData->column_11}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $freightId = $row->freight_id;
                            }
                        }

                        if ($importedData->column_11 != '0' && strtoupper($importedData->column_11) != 'NONE' && $importedData->column_11 != '' && $importedData->column_11 != '-' && $importedData->column_11 != null) {
                            $sql = "SELECT * FROM `contract` WHERE UPPER(contract_no) = UPPER('{$importedData->column_11}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $vendorId = $row->vendor_id;
                            }
                        }

                        if ($importedData->column_10 != '0' && strtoupper($importedData->column_10) != 'NONE' && $importedData->column_10 != '' && $importedData->column_10 != '-' && $importedData->column_10 != null) {
                            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_name) = UPPER('{$importedData->column_10}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $supplierId = $row->vendor_id;
                            } else {
                                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, entry_by, entry_date) VALUES ("
                                    . "'" . strtoupper(substr($importedData->column_10, 0, 3)) . "', '{$importedData->column_10}', "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $supplierId = $myDatabase->insert_id;
                            }
                        }

//                        if($vendorId == "") {
//                            $vendorId = $supplierId;
//                        }

                        if ($supplierId == "") {
                            $supplierId = 'NULL';
                        }

                        // </editor-fold>

                        // <editor-fold defaultstate="collapsed" desc="check vehicle and unloading cost">
                        if ($importedData->column_4 != '0' && strtoupper($importedData->column_4) != 'NONE' && $importedData->column_4 != '' && $importedData->column_4 != '-' && $importedData->column_4 != null) {
                            $sql = "SELECT * FROM `vehicle` WHERE UPPER(vehicle_name) = UPPER('{$importedData->column_4}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $vehicleId = $row->vehicle_id;
                            } else {
                                $sql = "INSERT INTO `vehicle` (vehicle_name, entry_by, entry_date) VALUES ("
                                    . "'{$importedData->column_4}', "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $vehicleId = $myDatabase->insert_id;
                            }
                        }

                        if ($importedData->column_32 != '0' && strtoupper($importedData->column_32) != 'NONE' && $importedData->column_32 != '' && $importedData->column_32 != '-' && $importedData->column_32 != null) {
                            $sql = "SELECT * FROM `labor` WHERE UPPER(labor_name) = UPPER('{$importedData->column_32}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $laborId = $row->labor_id;
                                $ucTaxId = $row->pph_tax_id;
                            } else {

                                $ppn = 0;
                                $pph = 0;
                                $ppnValue = 0;
                                $pphValue = 0;

                                if (strtoupper($importedData->column_33) == 'PPN') {
                                    $ppn = 1;
                                    $ppnValue = 10;
                                }

                                if ($importedData->column_34 != '' || $importedData->column_34 != null) {
                                    $sqlPPh = "SELECT * FROM tax WHERE UPPER(tax_name) = UPPER('{$importedData->column_34}')";
                                    $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                                    if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                                        $rowPPh = $resultPPh->fetch_object();
                                        $pph = $rowPPh->tax_id;
                                        $pphValue = $rowPPh->tax_value;
                                    }
                                }

                                $sql = "INSERT INTO `labor` (labor_name, labor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                                    . "'{$importedData->column_32}', '', '', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $laborId = $myDatabase->insert_id;

                                $ucTaxId = $pph;
                            }
                        }

                        if (($importedData->column_22 != '' && strtoupper($importedData->column_22) != 'NONE' && $importedData->column_22 != '0' && $importedData->column_22 != '-' && $importedData->column_22 != null) && $vehicleId != '') {
                            $sql = "SELECT * FROM unloading_cost WHERE vehicle_id = {$vehicleId} AND stockpile_id = {$stockpileId} AND price_converted = {$importedData->column_22} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $unloadingCostId = $row->unloading_cost_id;
                            } else {
                                $sql = "INSERT INTO `unloading_cost` (vehicle_id, stockpile_id, currency_id, exchange_rate, price, price_converted, entry_by, entry_date) VALUES ("
                                    . "{$vehicleId}, {$stockpileId}, 1, 1, {$importedData->column_22}, {$importedData->column_22}, "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $unloadingCostId = $myDatabase->insert_id;
                            }
                        } else {
                            $unloadingCostId = 'NULL';
                        }

                        if ($vehicleId == "") {
                            $unloadingCostId = 'NULL';
                        }
                        if ($laborId == "") {
                            $laborId = 'NULL';
                        }

                        // </editor-fold>

                        // <editor-fold defaultstate="collapsed" desc="check freight and freight cost">
                        if ($importedData->column_6 != '0' && strtoupper($importedData->column_6) != 'NONE' && $importedData->column_6 != '' && $importedData->column_6 != '-' && $importedData->column_6 != null) {
                            $sql = "SELECT * FROM `freight` WHERE UPPER(freight_supplier) = UPPER('{$importedData->column_28}') AND UPPER(freight_code) = UPPER('{$importedData->column_29}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $freightId = $row->freight_id;
                                $fcTaxId = $row->pph_tax_id;
                            } else {

                                $ppn = 0;
                                $pph = 0;
                                $ppnValue = 0;
                                $pphValue = 0;

                                if (strtoupper($importedData->column_30) == 'PPN') {
                                    $ppn = 1;
                                    $ppnValue = 10;
                                }

                                if ($importedData->column_31 != '' || $importedData->column_31 != null) {
                                    $sqlPPh = "SELECT * FROM tax WHERE UPPER(tax_name) = UPPER('{$importedData->column_31}')";
                                    $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                                    if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                                        $rowPPh = $resultPPh->fetch_object();
                                        $pph = $rowPPh->tax_id;
                                        $pphValue = $rowPPh->tax_value;
                                    }
                                }

                                $sql = "INSERT INTO `freight` (freight_code, freight_supplier, freight_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                                    . "'" . strtoupper($importedData->column_29) . "', '{$importedData->column_28}', '', '', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $freightId = $myDatabase->insert_id;

                                $fcTaxId = $pph;
                            }
                        }

                        $freightQuantity = 0;
                        if (($importedData->column_21 != '' || $importedData->column_21 != '0' || $importedData->column_21 != '-' || $importedData->column_21 != null) && $freightId != '') {
                            // get freight weight
                            if ($freightWeightRule == 0) {
                                if ((float)$importedData->column_16 < (float)$importedData->column_13) {
                                    $freightQuantity = (float)$importedData->column_16;
                                } elseif ((float)$importedData->column_16 > (float)$importedData->column_13) {
                                    $freightQuantity = (float)$importedData->column_13;
                                } else {
                                    $freightQuantity = (float)$importedData->column_13;
                                }
                            } elseif ($freightWeightRule == 1) {
                                $freightQuantity = (float)$importedData->column_13;
                            } elseif ($freightWeightRule == 2) {
                                $freightQuantity = (float)$importedData->column_16;
                            } else {
                                $freightQuantity = (float)$importedData->column_13;
                            }

                            $freightPrice = (float)$importedData->column_21 / $freightQuantity;

                            $sql = "SELECT * FROM freight_cost WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId} AND vendor_id = {$vendorId} AND price_converted = {$freightPrice} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $freightCostId = $row->freight_cost_id;
                            } else {
                                $sql = "INSERT INTO `freight_cost` (freight_id, stockpile_id, vendor_id, currency_id, exchange_rate, price, price_converted, entry_by, entry_date) VALUES ("
                                    . "{$freightId}, {$stockpileId}, {$vendorId}, 1, 1, {$freightPrice}, {$freightPrice}, "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $freightCostId = $myDatabase->insert_id;
                            }
                        }

                        if ($freightId == "") {
                            $freightCostId = 'NULL';
                        }

                        // </editor-fold>

                        //curah
                        $boolNewContract = false;
                        $boolContinue = false;
                        $boolUpdateCurah = false;
                        if (strtoupper($importedData->column_24) == 'CURAH') {
                            $contractType = 'C';

                            $totalSend = (float)$importedData->column_13;
                            $totalNetto = (float)$importedData->column_16;

                            $sqlContract = "SELECT con.*, v.pph_tax_id 
                                    FROM contract con 
                                    INNER JOIN vendor v
                                        ON v.vendor_id = con.vendor_id
                                    WHERE contract_type = '{$contractType}' AND contract_no = '{$importedData->column_11}'";
                            $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);
                            if ($resultContract->num_rows == 1) {
                                $rowContract = $resultContract->fetch_object();
                                $contractId = $rowContract->contract_id;
                                $unitPrice = $rowContract->price;
                                $curahTaxId = $rowContract->pph_tax_id;

                                $sqlStockpileContract = "SELECT * FROM stockpile_contract WHERE contract_id = {$contractId} AND stockpile_id = {$stockpileId}";
                                $resultStockpileContract = $myDatabase->query($sqlStockpileContract, MYSQLI_STORE_RESULT);
                                if ($resultStockpileContract->num_rows == 1) {
                                    $rowStockpileContract = $resultStockpileContract->fetch_object();
                                    $stockpileContractId = $rowStockpileContract->stockpile_contract_id;
                                    $currentQuantity = $rowStockpileContract->quantity;
                                    $boolContinue = true;
                                    $boolUpdateCurah = true;
                                }
                            }

//                            $boolContinue = true;
//                            $boolNewContract = true;
                        } elseif (strtoupper($importedData->column_24) == 'PKS') {
                            $contractType = 'P';

                            if (($importedData->column_8 != '' || $importedData->column_8 != '0' || $importedData->column_8 != '-' && $importedData->column_8 != 'NONE' && $importedData->column_8 != null) &&
                                $importedData->column_11 != '' || $importedData->column_11 != '0' || $importedData->column_11 != '-' && $importedData->column_11 != 'NONE' && $importedData->column_11 != null) {
                                $sqlContract = "SELECT * FROM contract WHERE contract_type = '{$contractType}' AND contract_no = '{$importedData->column_11}'";
                                $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);
                                if ($resultContract->num_rows == 1) {
                                    $rowContract = $resultContract->fetch_object();
                                    $contractId = $rowContract->contract_id;
                                    $unitPrice = $rowContract->price;

                                    $sqlStockpileContract = "SELECT * FROM stockpile_contract WHERE contract_id = {$contractId} AND stockpile_id = {$stockpileId}";
                                    $resultStockpileContract = $myDatabase->query($sqlStockpileContract, MYSQLI_STORE_RESULT);
                                    if ($resultStockpileContract->num_rows == 1) {
                                        $rowStockpileContract = $resultStockpileContract->fetch_object();
                                        $stockpileContractId = $rowStockpileContract->stockpile_contract_id;
                                        $boolContinue = true;
                                    }
                                }
//                                else {
//                                    $sqlTemp = "SELECT SUM(column_13) AS total_send, SUM(column_16) AS total_netto FROM {$tempTable} WHERE column_8 = '{$importedData->column_8}' "
//                                            . "AND column_11 = '{$importedData->column_11}' AND UPPER(column_12) = UPPER('{$importedData->column_12}')";
//                                    $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
//                                    $rowTemp = $resultTemp->fetch_object();
//
//                                    $totalSend = $rowTemp->total_send;
//                                    $totalNetto = $rowTemp->total_netto;
//                                    $boolNewContract = true;
//                                }
                            } else {
                                $totalSend = (float)$importedData->column_13;
                                $totalNetto = (float)$importedData->column_16;
//                                $boolContinue = true;
//                                $boolNewContract = true;
                            }
                        }

//                        $boolContinue = true;
                        if ($boolNewContract) {
                            // <editor-fold defaultstate="collapsed" desc="create new contract for curah">

//                            $checkPoNo = $contractType .'-'. $vendorCode .'-'. $importedData->trans_year;
//                            $sql = "SELECT po_no FROM contract WHERE po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
//                            $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                            if($resultPo->num_rows == 1) {
//                                $rowPo = $resultPo->fetch_object();
//                                $splitPoNo = explode('-', $rowPo->po_no);
//                                $nextPoNo = ((float) $splitPoNo[3]) + 1;
//                                $poNo = $checkPoNo .'-'. $nextPoNo;
//                            } else {
//                                $poNo = $checkPoNo .'-1';
//                            }
//
//                            if($totalNetto < $totalSend) {
//                                $quantity = $totalNetto;
//                            } elseif($totalNetto > $totalSend) {
//                                $quantity = $totalSend;
//                            } else {
//                                $quantity = $totalSend;
//                            }
//
//                            $sql = "INSERT INTO contract (contract_type, po_no, contract_no, vendor_id, currency_id, exchange_rate, "
//                                    . "price, price_converted, quantity, entry_by, entry_date) VALUES ("
//                                    . "'{$contractType}', '{$poNo}', '{$importedData->column_11}', {$vendorId}, 1, 1, "
//                                    . "{$importedData->column_27}, {$importedData->column_27}, {$quantity}, "
//                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
//                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//                            if($result === false) {
//                                $boolContinue = false;
//                            } else {
//                                $contractId = $myDatabase->insert_id;
//                                $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
//                                        . "{$stockpileId}, {$contractId}, {$quantity}, "
//                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
//                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                                if($result === false) {
//                                    $boolContinue = false;
//                                } else {
//                                    $stockpileContractId = $myDatabase->insert_id;
//                                }
//                            }

                            // </editor-fold>
                        }

                        if ($boolContinue) {
                            $shrink = 0;
                            if ($contractType == 'P') {
                                if ((float)$importedData->column_16 < (float)$importedData->column_13) {
                                    $quantity = (float)$importedData->column_16;
                                    $shrink = (float)$importedData->column_13 - (float)$importedData->column_16;
                                } elseif ((float)$importedData->column_16 > (float)$importedData->column_13) {
                                    $quantity = (float)$importedData->column_13;
                                    $shrink = (float)$importedData->column_13 - (float)$importedData->column_16;
                                } else {
                                    $quantity = (float)$importedData->column_13;
                                }
                            } elseif ($contractType == 'C') {
                                if ($curahWeightRule == 0) {
                                    if ((float)$importedData->column_16 < (float)$importedData->column_13) {
                                        $quantity = (float)$importedData->column_16;
                                        $shrink = (float)$importedData->column_13 - (float)$importedData->column_16;
                                    } elseif ((float)$importedData->column_16 > (float)$importedData->column_13) {
                                        $quantity = (float)$importedData->column_13;
                                        $shrink = (float)$importedData->column_13 - (float)$importedData->column_16;
                                    } else {
                                        $quantity = (float)$importedData->column_13;
                                    }
                                } elseif ($curahWeightRule == 1) {
                                    $quantity = (float)$importedData->column_13;
                                    $shrink = (float)$importedData->column_13 - (float)$importedData->column_16;
                                } elseif ($curahWeightRule == 2) {
                                    $quantity = (float)$importedData->column_16;
                                    $shrink = (float)$importedData->column_13 - (float)$importedData->column_16;
                                } else {
                                    $quantity = (float)$importedData->column_13;
                                }
                            }

                            // get next slip no
                            $checkSlipNo = $stockpileCode . '-' . $importedData->trans_year;
                            //                $sql = "SELECT LPAD(COUNT(1) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ";
                            //                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($resultSlip->num_rows == 0) {
                                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                            $rowSlipNo = $resultSlip->fetch_object();
                            $nextSlipNo = $rowSlipNo->next_id;
                            $slipNo = $checkSlipNo . '-' . $nextSlipNo;

                            // get freight cost
                            if ($freightCostId == 'NULL') {
                                $freightPrice = 0;
                            }

                            // get unloading cost

                            if ($unloadingCostId == 'NULL') {
                                $unloadingPrice = 0;
                            } else {
                                $unloadingPrice = $importedData->column_22;
                            }

//                            $unitPrice = $importedData->column_27;

                            // get inventory value
                            $inventoryValue = ($freightQuantity * $freightPrice) + $unloadingPrice + ($quantity * $unitPrice);

                            // insert into transaction
                            $sql = "INSERT INTO `transaction` (slip_no, stockpile_contract_id, transaction_date, loading_date, vehicle_no, labor_id, unloading_cost_id, "
                                . "unloading_date, freight_cost_id, permit_no, transaction_type, vendor_id, send_weight, bruto_weight, tarra_weight, "
                                . "netto_weight, notes, driver, freight_quantity, quantity, shrink, freight_price, unloading_price, unit_price, "
                                . "inventory_value, block, uc_tax_id, fc_tax_id, curah_tax_id, entry_by, entry_date) "
                                . "VALUES ('{$slipNo}', {$stockpileContractId}, STR_TO_DATE('{$importedData->column_2}', '%Y-%m-%d'), STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), "
                                . "'{$importedData->column_3}', {$laborId}, {$unloadingCostId}, STR_TO_DATE('{$importedData->column_2}', '%Y-%m-%d'), {$freightCostId}, '{$importedData->column_7}', "
                                . "1, {$supplierId}, {$importedData->column_13}, {$importedData->column_14}, {$importedData->tarra}, {$importedData->column_16}, '{$importedData->column_17}', "
                                . "'{$importedData->column_18}', {$freightQuantity}, {$quantity}, {$shrink}, {$freightPrice}, {$unloadingPrice}, {$unitPrice}, {$inventoryValue}, 'NONE', "
                                . "{$ucTaxId}, {$fcTaxId}, {$curahTaxId}, "
                                . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                            if ($result !== false) {
                                $successRow = $successRow + 1;

                                $transactionId = $myDatabase->insert_id;

                                if ($boolUpdateCurah) {
                                    /*$newQuantity = (float) $currentQuantity + (float) $totalSend;
                                    $sql = "UPDATE stockpile_contract SET quantity = {$newQuantity} WHERE stockpile_contract_id = {$stockpileContractId}";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                    $sql = "UPDATE contract SET quantity = (SELECT SUM(quantity) FROM stockpile_contract_id WHERE contract_id = {$contractId}) WHERE contract_id = {$contractId}";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/
                                }

                                $sql = "DELETE FROM {$tempTable} WHERE column_0 = {$importedData->column_0}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                                insertReportGL($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                            } else {
                                $errorRow = $errorRow + 1;
                            }
                        } else {
                            $errorRow = $errorRow + 1;
                        }

                        // </editor-fold>
                    } elseif (strtoupper($importedData->column_12) == 'OUT') {
                        // <editor-fold defaultstate="collapsed" desc="OUT">
                        if (($importedData->column_10 != '0' || $importedData->column_10 != 'NONE' || $importedData->column_10 != '' || $importedData->column_10 != '-') &&
                            ($importedData->column_27 != '0' || $importedData->column_27 != 'NONE' || $importedData->column_27 != '' || $importedData->column_27 != '-')) {
                            $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$importedData->column_10}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $customerId = $row->customer_id;
                            } else {
                                $sql = "INSERT INTO `customer` (customer_name, entry_by, entry_date) VALUES ("
                                    . "'{$importedData->column_10}', "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $customerId = $myDatabase->insert_id;
                            }
                        }

                        if ($customerId != '') {


                            $salesNo = strtoupper(str_replace(' ', '', substr($importedData->column_10, 0, 5)));


                            $sql = "SELECT * FROM sales WHERE UPPER(sales_no) = '{$salesNo}' AND customer_id = {$customerId} AND stockpile_id = {$stockpileId} "
                                . "AND currency_id = 1 AND price = {$importedData->column_27} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $salesId = $row->sales_id;
                                $salesBalance = $row->quantity;
                            } else {
                                $sqlTemp = "SELECT count(1) AS total_shipment FROM {$tempTable} WHERE UPPER(column_10) = UPPER('{$importedData->column_10}') "
                                    . "AND UPPER(column_12) = UPPER('{$importedData->column_12}') AND column_27 = {$importedData->column_27}";
                                $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
                                $rowTemp = $resultTemp->fetch_object();
                                $totalShipment = $rowTemp->total_shipment;

                                $sqlTemp = "SELECT MIN(column_5) AS sales_date, SUM(column_13) AS total_quantity FROM {$tempTable} WHERE UPPER(column_10) = UPPER('{$importedData->column_10}') "
                                    . "AND UPPER(column_12) = UPPER('{$importedData->column_12}') AND column_27 = {$importedData->column_27}";
                                $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
                                $rowTemp = $resultTemp->fetch_object();
                                $salesDate = $rowTemp->sales_date;
                                $totalQuantity = $rowTemp->total_quantity;
                                $salesBalance = $totalQuantity;


                                $sql = "INSERT INTO sales (sales_no, sales_date, sales_type, customer_id, stockpile_id, currency_id, exchange_rate, "
                                    . "price, price_converted, quantity, total_shipment, entry_by, entry_date) VALUES ("
                                    . "'{$salesNo}', STR_TO_DATE('{$salesDate}', '%Y-%m-%d'), 1, {$customerId}, {$stockpileId}, 1, 1, "
                                    . "{$importedData->column_27}, {$importedData->column_27}, {$totalQuantity}, {$totalShipment}, "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                $boolContinue = true;
                                if ($result !== false) {
                                    $salesId = $myDatabase->insert_id;

                                    for ($i = 1; $i <= $totalShipment; $i++) {
                                        $shipmentCode = $salesNo . '-' . $i;

                                        $sql = "INSERT INTO `shipment` (shipment_code, sales_id, entry_by, entry_date) VALUES ("
                                            . "'{$shipmentCode}', {$salesId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    }
                                } else {
                                    $boolContinue = false;
                                }
                            }

                            if ($boolContinue) {
                                $sql = "SELECT shipment_id FROM shipment WHERE shipment_code LIKE '{$salesNo}%' AND shipment_status = 0 ORDER BY shipment_code ASC LIMIT 1";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if ($result->num_rows == 1) {
                                    $row = $result->fetch_object();
                                    $shipmentId = $row->shipment_id;

                                    $shrink = (float)$importedData->column_13 - (float)$importedData->column_16;

                                    // get next slip no
                                    $checkSlipNo = $stockpileCode . '-' . $importedData->trans_year;
                                    $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if ($resultSlip->num_rows == 0) {
                                        $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM transaction LIMIT 1";
                                        $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    }

                                    $rowSlipNo = $resultSlip->fetch_object();
                                    $nextSlipNo = $rowSlipNo->next_id;
                                    $slipNo = $checkSlipNo . '-' . $nextSlipNo;

                                    $sql = "INSERT INTO `transaction` (slip_no, product_id, shipment_id, transaction_date, vehicle_no, transaction_type, "
                                        . "send_weight, quantity, shrink, entry_by, entry_date) VALUES ('{$slipNo}', 1, "
                                        . "{$shipmentId}, STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), '{$importedData->column_9}', 2, "
                                        . "{$importedData->column_13}, {$importedData->column_16}, {$shrink}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                    if ($result !== false) {
                                        $transactionId = $myDatabase->insert_id;

                                        // insert into delivery
                                        $sql = "SELECT t.* 
                                                FROM transaction t 
                                                WHERE t.stockpile_contract_id IN (
                                                    SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                                                ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                                                ORDER BY t.unloading_date ASC";
                                        $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        $totalInventoryValue = 0;
                                        if ($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                                            $balanceLeft = (float)$importedData->column_13;
                                            while ($rowDelivery = $resultDelivery->fetch_object()) {
                                                if ($balanceLeft > 0) {
                                                    if ($rowDelivery->delivery_status == 0) {
                                                        if ($balanceLeft >= $rowDelivery->quantity) {
                                                            $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                                            $quantityTaken = $rowDelivery->quantity;
                                                            $percentTaken = 1;
                                                            $deliveryStatus = 1;
                                                        } elseif ($balanceLeft < $rowDelivery->quantity) {
                                                            $quantityTaken = $balanceLeft;
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $balanceLeft = 0;
                                                            $deliveryStatus = 2;
                                                        }
                                                    } elseif ($rowDelivery->delivery_status == 2) {
                                                        $totalTaken = 0;
                                                        $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                                        $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                                        if ($resultTaken !== false && $resultTaken->num_rows == 1) {
                                                            $rowTaken = $resultTaken->fetch_object();
                                                            $totalTaken = $rowTaken->total_taken;
                                                        }

                                                        if ($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                                            $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                                            $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $deliveryStatus = 1;
                                                        } elseif ($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                                            $quantityTaken = $balanceLeft;
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $balanceLeft = 0;
                                                            $deliveryStatus = 2;
                                                        }
                                                    }

                                                    $deliveryValue = $quantityTaken * (float)$importedData->column_27;
                                                    $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                                    $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                                    $percentTaken = $percentTaken * 100;

                                                    $sql = "INSERT INTO delivery (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                                        . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), {$percentTaken}, "
                                                        . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                                    $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                                }
                                            }
                                        }

                                        //$updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                                        $updateInventoryValue = $totalInventoryValue;

                                        $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                        // update shipment
                                        $cogsAmount = $updateInventoryValue;
                                        $invoiceAmount = (float)$importedData->column_16 * (float)$importedData->column_27;
                                        $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), "
                                            . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$importedData->column_16}, shipment_status = 1 "
                                            . "WHERE shipment_id = {$shipmentId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                        $sql = "SELECT COALESCE(SUM(quantity), 0) AS delivered_balance FROM `transaction` 
                                                WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                                                AND transaction_type = 2
                                                AND transaction_id <> {$transactionId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        $row = $result->fetch_object();
                                        $deliveredBalance = $row->delivered_balance;

                                        // update sales
                                        $boolUpdateSales = false;
                                        if ((float)$importedData->column_13 == ($salesBalance - $deliveredBalance)) {
                                            $salesStatus = 1;
                                            $boolUpdateSales = true;
                                        } elseif ((float)$importedData->column_13 < ($salesBalance - $deliveredBalance)) {
                                            $salesStatus = 2;
                                            $boolUpdateSales = true;
                                        }

                                        if ($boolUpdateSales) {
                                            $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        }

                                        $successRow = $successRow + 1;
                                    } else {
                                        $errorRow = $errorRow + 1;
                                    }
                                } else {
                                    $errorRow = $errorRow + 1;
                                }
                            }
                        }

                        // </editor-fold>
                    }

                }
                $counterRow++;
            }

            if (($successRow + $warningRow) == ($counterRow - 1) && $errorRow == 0) {
                $result = $myDatabase->query("COMMIT", MYSQLI_STORE_RESULT);

                $sql = "DROP TABLE {$tempTable}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


                return "OK|" . $successRow . " Row(s) import successfully, " . $warningRow . " Row(s) failed with warning. " . $errorMessage;
            } else {
                $result = $myDatabase->query("ROLLBACK", MYSQLI_STORE_RESULT);

                return "FAIL|Import failed. " . $errorRow . " Rows(s) can not be imported. Please contact administrator. ";
            }
        }
    } else {
        return 'FAIL|File not exists.';
    }
    // </editor-fold>
}

function excelImportTransaction($myDatabase, $fileName = "", $stockpileId = 0, $vendorId = 0, $stockpileContractId = 0, $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1)
{
    // <editor-fold defaultstate="collapsed" desc="function excelImportTransaction($myDatabase, $fileName = "", $stockpileId = 0, $vendorId = 0, $stockpileContractId = 0, $onSheet = 0, $fromRow = 1, $toRow = -1, $fromCol = 0, $toCol = -1)">
    if (file_exists(realpath($fileName))) {
        $fileNameRealPath = realpath($fileName);

        require_once './assets/extensions/PHPExcel.php';
        require_once './assets/extensions/PHPExcel/IOFactory.php';
        require_once './assets/extensions/PHPExcel/Cell/AdvancedValueBinder.php';

        $objReader = PHPExcel_IOFactory::createReader('Excel5');

        $objPHPExcel = $objReader->load($fileNameRealPath);

        $readStartAtRow = 1;
        $totalCols = 35;

        $result = $myDatabase->query("START TRANSACTION", MYSQLI_STORE_RESULT);

//        $sheetCount = $objPHPExcel->getSheetCount();
        $sheetCount = 1;
        for ($onSheet; $onSheet < $sheetCount; $onSheet++) {
            $objPHPExcel->setActiveSheetIndex($onSheet);
            $objWorksheet = $objPHPExcel->getActiveSheet();

            $rows = $objWorksheet->getHighestRow();
            $cols = PHPExcel_Cell::columnIndexFromString($objWorksheet->getHighestColumn());
            if ($toRow == -1)
                $toRow = $rows;
            if ($toCol == -1)
                $toCol = $cols;

            $key = array();
            $columnName = array();
            $getColumnAName = false;

            if ($toCol == $totalCols) {
                for ($row = $fromRow; $row <= $rows; $row++) {
                    for ($i = $fromCol; $i < $cols; $i++) {
                        $columnName[$i] = "column_" . $i;
                        if (isset($columnName[$i])) {
                            if (PHPExcel_Shared_Date::isDateTime($objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row))) {
                                $tmp = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();

                                if (is_numeric($tmp)) {
                                    $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'YYYY-MM-DD');
                                } else {
                                    $key[$row][$i]['value'] = substr($tmp, 6, 4) . "-" . substr($tmp, 3, 2) . "-" . substr($tmp, 0, 2);
                                }
//                                $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'DD-MMM-YYYY');
                            } else {
//                                $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();
                                $check = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();
                                if (substr($check, 0, 1) == "=") {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getCalculatedValue();
                                } else {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();
                                }
                            }
                        }
                    }
                }

                $getColumnAName = true;
            } else {
                return 'FAIL|Template is wrong.';
            }
        }

        if ($getColumnAName) {
            $temporaryTable = '';
            $temporaryTableWarning = '';
            $temporaryTableDuplicate = '';
            $fieldNames = '';

            foreach ($columnName as $i => $names) {
                if (trim($names) != '') {
                    $temporaryTable .= (($temporaryTable == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableWarning .= (($temporaryTableWarning == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableDuplicate .= (($temporaryTableDuplicate == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $fieldNames .= (($fieldNames == '') ? '' : ', ') . "`" . trim($names) . "`";
                }
            }

            $tempTable = '`tmp_transaction_' . uniqid() . '`';
//            $temporaryTable = 'CREATE TEMPORARY TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableWarning = '`jb_sdw_' . uniqid() . '`';
//            $temporaryTableWarning = 'CREATE TEMPORARY TABLE ' . $tempTableWarning . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableWarning . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableDuplicate = '`jb_sdd_' . uniqid() . '`';
//            $temporaryTableDuplicate = 'CREATE TEMPORARY TABLE ' . $tempTableDuplicate . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableDuplicate . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
            $temporaryTable = 'CREATE TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';

//            return "0|". $temporaryTable;

            $result = $myDatabase->query($temporaryTable, MYSQLI_STORE_RESULT);
            if ($result === false) {
                return 'FAIL|error create table ' . $myDatabase->errorMessage;
            }

            $insertInto = '';
            foreach ($key as $row => $colData) {
                if ($colData[1] != null) {
                    $insertIntoCol = '';
                    foreach ($colData as $col => $colDatas) {
                        if (strpos($colDatas['value'], "NULL") !== false || $colDatas['value'] == '')
                            $insertIntoCol .= (($insertIntoCol == '') ? '' : ', ') . "NULL";
                        else {
                            $insertIntoCol .= (($insertIntoCol == '') ? '' : ', ') . "'" . $colDatas['value'] . "'";
                        }
                    }
                    $insertInto .= (($insertInto == '') ? '' : ', ') . "(" . $insertIntoCol . ")";
//                die("INSERT INTO $temp_table ($fieldnames) VALUES " . $insertinto . ";");
                }
            }

            $insertIntoTemp = "INSERT INTO $tempTable ($fieldNames) VALUES " . $insertInto . ";";

            $result = $myDatabase->query($insertIntoTemp, MYSQLI_STORE_RESULT);
            if ($result === false) {
                return 'FAIL|error insert table ' . $myDatabase->errorMessage;
            }
//		}
//	}
//}

//            return 'OK|Table created.';

//            $insertIntoWarning = "INSERT INTO $tempTableWarning ($fieldNames) VALUES " . $insertInto . ";";
//
//            $resultWarning = $myDatabase->query($insertIntoWarning, MYSQLI_STORE_RESULT);
//            if($resultWarning === false) {
//                return 'FAIL|error insert warning table '. $myDatabase->errorMessage;
//            }
//
//            $insertIntoDuplicate = "INSERT INTO $tempTableDuplicate ($fieldNames) VALUES " . $insertInto . ";";
//
//            $resultDuplicate = $myDatabase->query($insertIntoDuplicate, MYSQLI_STORE_RESULT);
//            if($resultDuplicate === false) {
//                return 'FAIL|error insert duplicate table '. $myDatabase->errorMessage;
//            }

//            return "0|". $temporaryTable;

            $sqlSelect = "SELECT a.*, DATE_FORMAT(a.column_2, '%y') AS trans_year, COALESCE(a.column_15, 0) AS tarra FROM $tempTable a ORDER BY id ASC;";
            $resultSelect = $myDatabase->query($sqlSelect, MYSQLI_STORE_RESULT);
            $successRow = 0;
            $errorRow = 0;
            $warningRow = 0;
            $counterRow = 1;
            $errorMessage = '';
            $shipmentError = 0;
            $categoryError = 0;
            $rateError = 0;
            $currencyError = 0;
            $insuredError = 0;
            $countryFromError = 0;
            $countryToError = 0;
            $duplicateError = 0;
            $duplicateQuotation = '';
            $shipmentQuotation = '';
            $categoryQuotation = '';
            $rateQuotation = '';
            $currencyQuotation = '';
            $insuredQuotation = '';
            $countryFromQuotation = '';
            $countryToQuotation = '';

            date_default_timezone_set('Asia/Jakarta');

            $date = new DateTime();
            $currentDate = $date->format('d/m/Y H:i:s');

            $sqlStockpile = "SELECT * FROM stockpile WHERE stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sqlStockpile, MYSQLI_STORE_RESULT);
            $rowStockpile = $resultStockpile->fetch_object();
            $freightWeightRule = $rowStockpile->freight_weight_rule;
            $curahWeightRule = $rowStockpile->curah_weight_rule;
            $stockpileCode = $rowStockpile->stockpile_code;

            while ($importedData = $resultSelect->fetch_object()) {
                if ($counterRow >= $readStartAtRow) {
                    $custTaxId = 'NULL';
                    $curahTaxId = 'NULL';
                    $ucTaxId = 'NULL';
                    $fcTaxId = 'NULL';

                    if (strtoupper($importedData->column_12) == 'IN') {
                        // <editor-fold defaultstate="collapsed" desc="IN">

                        // <editor-fold defaultstate="collapsed" desc="check vendor and supplier">
//                        if($importedData->column_9 != '0' || $importedData->column_9 != 'NONE' || $importedData->column_9 != '' || $importedData->column_9 != '-') {
//                            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_name) = UPPER('{$importedData->column_9}') LIMIT 1";
//                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                            if($result->num_rows == 1) {
//                                $row = $result->fetch_object();
//                                $vendorId = $row->vendor_id;
//                                $vendorCode = $row->vendor_code;
//                            } else {
//                                if($importedData->column_8 != '0' || $importedData->column_8 != 'NONE' || $importedData->column_8 != '' || $importedData->column_8 != '-') {
//                                    $vendorCode = strtoupper(substr($importedData->column_8, 2, 3)) ;
//                                } else {
//                                    $vendorCode = strtoupper(substr($importedData->column_9, 0, 3));
//                                }
//
//                                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, entry_by, entry_date) VALUES ("
//                                        . "'{$vendorCode}', '{$importedData->column_9}', "
//                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
//                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                                $vendorId = $myDatabase->insert_id;
//                            }
//                        }

                        if ($importedData->column_11 != '0' && strtoupper($importedData->column_11) != 'NONE' && $importedData->column_11 != '' && $importedData->column_11 != '-' && $importedData->column_11 != null) {
                            $sql = "SELECT * FROM `contract` WHERE UPPER(contract_no) = UPPER('{$importedData->column_11}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $vendorId = $row->vendor_id;
                            }
                        }

                        if ($importedData->column_10 != '0' && strtoupper($importedData->column_10) != 'NONE' && $importedData->column_10 != '' && $importedData->column_10 != '-' && $importedData->column_10 != null) {
                            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_name) = UPPER('{$importedData->column_10}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $supplierId = $row->vendor_id;
                            } else {
                                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, entry_by, entry_date) VALUES ("
                                    . "'" . strtoupper(substr($importedData->column_10, 0, 3)) . "', '{$importedData->column_10}', "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $supplierId = $myDatabase->insert_id;
                            }
                        }

//                        if($vendorId == "") {
//                            $vendorId = $supplierId;
//                        }

                        if ($supplierId == "") {
                            $supplierId = 'NULL';
                        }

                        // </editor-fold>

                        // <editor-fold defaultstate="collapsed" desc="check vehicle and unloading cost">
                        if ($importedData->column_4 != '0' && strtoupper($importedData->column_4) != 'NONE' && $importedData->column_4 != '' && $importedData->column_4 != '-' && $importedData->column_4 != null) {
                            $sql = "SELECT * FROM `vehicle` WHERE UPPER(vehicle_name) = UPPER('{$importedData->column_4}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $vehicleId = $row->vehicle_id;
                            } else {
                                $sql = "INSERT INTO `vehicle` (vehicle_name, entry_by, entry_date) VALUES ("
                                    . "'{$importedData->column_4}', "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $vehicleId = $myDatabase->insert_id;
                            }
                        }

                        if ($importedData->column_32 != '0' && strtoupper($importedData->column_32) != 'NONE' && $importedData->column_32 != '' && $importedData->column_32 != '-' && $importedData->column_32 != null) {
                            $sql = "SELECT * FROM `labor` WHERE UPPER(labor_name) = UPPER('{$importedData->column_32}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $laborId = $row->labor_id;
                                $ucTaxId = $row->pph_tax_id;
                            } else {

                                $ppn = 0;
                                $pph = 0;
                                $ppnValue = 0;
                                $pphValue = 0;

                                if (strtoupper($importedData->column_33) == 'PPN') {
                                    $ppn = 1;
                                    $ppnValue = 10;
                                }

                                if ($importedData->column_34 != '' || $importedData->column_34 != null) {
                                    $sqlPPh = "SELECT * FROM tax WHERE UPPER(tax_name) = UPPER('{$importedData->column_34}')";
                                    $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                                    if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                                        $rowPPh = $resultPPh->fetch_object();
                                        $pph = $rowPPh->tax_id;
                                        $pphValue = $rowPPh->tax_value;
                                    }
                                }

                                $sql = "INSERT INTO `labor` (labor_name, labor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                                    . "'{$importedData->column_32}', '', '', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $laborId = $myDatabase->insert_id;

                                $ucTaxId = $pph;
                            }
                        }

                        if (($importedData->column_22 != '' && strtoupper($importedData->column_22) != 'NONE' && $importedData->column_22 != '0' && $importedData->column_22 != '-' && $importedData->column_22 != null) && $vehicleId != '') {
                            $sql = "SELECT * FROM unloading_cost WHERE vehicle_id = {$vehicleId} AND stockpile_id = {$stockpileId} AND price_converted = {$importedData->column_22} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $unloadingCostId = $row->unloading_cost_id;
                            } else {
                                $sql = "INSERT INTO `unloading_cost` (vehicle_id, stockpile_id, currency_id, exchange_rate, price, price_converted, entry_by, entry_date) VALUES ("
                                    . "{$vehicleId}, {$stockpileId}, 1, 1, {$importedData->column_22}, {$importedData->column_22}, "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $unloadingCostId = $myDatabase->insert_id;
                            }
                        } else {
                            $unloadingCostId = 'NULL';
                        }

                        if ($vehicleId == "") {
                            $unloadingCostId = 'NULL';
                        }
                        if ($laborId == "") {
                            $laborId = 'NULL';
                        }

                        // </editor-fold>

                        // <editor-fold defaultstate="collapsed" desc="check freight and freight cost">
                        if ($importedData->column_6 != '0' && strtoupper($importedData->column_6) != 'NONE' && $importedData->column_6 != '' && $importedData->column_6 != '-' && $importedData->column_6 != null) {
                            $sql = "SELECT * FROM `freight` WHERE UPPER(freight_supplier) = UPPER('{$importedData->column_28}') AND UPPER(freight_code) = UPPER('{$importedData->column_29}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $freightId = $row->freight_id;
                                $freightRule = $row->freight_rule;
                                $fcTaxId = $row->pph_tax_id;
                            } else {

                                $ppn = 0;
                                $pph = 0;
                                $ppnValue = 0;
                                $pphValue = 0;

                                if (strtoupper($importedData->column_30) == 'PPN') {
                                    $ppn = 1;
                                    $ppnValue = 10;
                                }

                                if ($importedData->column_31 != '' || $importedData->column_31 != null) {
                                    $sqlPPh = "SELECT * FROM tax WHERE UPPER(tax_name) = UPPER('{$importedData->column_31}')";
                                    $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                                    if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                                        $rowPPh = $resultPPh->fetch_object();
                                        $pph = $rowPPh->tax_id;
                                        $pphValue = $rowPPh->tax_value;
                                    }
                                }

                                $sql = "INSERT INTO `freight` (freight_code, freight_supplier, freight_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                                    . "'" . strtoupper($importedData->column_29) . "', '{$importedData->column_28}', '', '', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $freightId = $myDatabase->insert_id;

                                $fcTaxId = $pph;
                            }
                        }

                        $freightQuantity = 0;
                        if (($importedData->column_21 != '' || $importedData->column_21 != '0' || $importedData->column_21 != '-' || $importedData->column_21 != null) && $freightId != '') {
                            // get freight weight
                            if ($freightWeightRule == 0) {
                                if ((float)$importedData->column_16 < (float)$importedData->column_13) {
                                    $freightQuantity = (float)$importedData->column_16;
                                } elseif ((float)$importedData->column_16 > (float)$importedData->column_13) {
                                    $freightQuantity = (float)$importedData->column_13;
                                } else {
                                    $freightQuantity = (float)$importedData->column_13;
                                }
                            } elseif ($freightWeightRule == 1) {
                                $freightQuantity = (float)$importedData->column_13;
                            } elseif ($freightWeightRule == 2) {
                                $freightQuantity = (float)$importedData->column_16;
                            } else {
                                $freightQuantity = (float)$importedData->column_13;
                            }

                            if ($freightRule == 1) {
                                $freightPrice = (float)$importedData->column_21 / (float)$importedData->column_13;
                            } else {
                                $freightPrice = (float)$importedData->column_21 / $freightQuantity;
                            }

                            $sql = "SELECT * FROM freight_cost WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId} AND vendor_id = {$vendorId} AND price_converted = {$freightPrice} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $freightCostId = $row->freight_cost_id;
                            } else {
                                $sql = "INSERT INTO `freight_cost` (freight_id, stockpile_id, vendor_id, currency_id, exchange_rate, price, price_converted, entry_by, entry_date) VALUES ("
                                    . "{$freightId}, {$stockpileId}, {$vendorId}, 1, 1, {$freightPrice}, {$freightPrice}, "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $freightCostId = $myDatabase->insert_id;
                            }
                        }

                        if ($freightId == '') {
                            $freightCostId = 'NULL';
                        }

                        // </editor-fold>

                        //curah
                        $boolNewContract = false;
                        $boolContinue = false;
                        $boolUpdateCurah = false;
                        if (strtoupper($importedData->column_24) == 'CURAH') {
                            $contractType = 'C';

                            $totalSend = (float)$importedData->column_13;
                            $totalNetto = (float)$importedData->column_16;

                            $sqlContract = "SELECT con.*, v.pph_tax_id 
                                    FROM contract con 
                                    INNER JOIN vendor v
                                        ON v.vendor_id = con.vendor_id
                                    WHERE contract_type = '{$contractType}' AND contract_no = '{$importedData->column_11}'";
                            $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);
                            if ($resultContract->num_rows == 1) {
                                $rowContract = $resultContract->fetch_object();
                                $contractId = $rowContract->contract_id;
                                $unitPrice = $rowContract->price_converted;
                                $curahTaxId = $rowContract->pph_tax_id;

                                $sqlStockpileContract = "SELECT * FROM stockpile_contract WHERE contract_id = {$contractId} AND stockpile_id = {$stockpileId}";
                                $resultStockpileContract = $myDatabase->query($sqlStockpileContract, MYSQLI_STORE_RESULT);
                                if ($resultStockpileContract->num_rows == 1) {
                                    $rowStockpileContract = $resultStockpileContract->fetch_object();
                                    $stockpileContractId = $rowStockpileContract->stockpile_contract_id;
                                    $currentQuantity = $rowStockpileContract->quantity;
                                    $boolContinue = true;
                                    $boolUpdateCurah = true;
                                }
                            }

//                            $boolContinue = true;
//                            $boolNewContract = true;
                        } elseif (strtoupper($importedData->column_24) == 'PKS') {
                            $contractType = 'P';

                            if (($importedData->column_8 != '' || $importedData->column_8 != '0' || $importedData->column_8 != '-' && $importedData->column_8 != 'NONE' && $importedData->column_8 != null) &&
                                $importedData->column_11 != '' || $importedData->column_11 != '0' || $importedData->column_11 != '-' && $importedData->column_11 != 'NONE' && $importedData->column_11 != null) {
                                $sqlContract = "SELECT * FROM contract WHERE contract_type = '{$contractType}' AND contract_no = '{$importedData->column_11}'";
                                $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);
                                if ($resultContract->num_rows == 1) {
                                    $rowContract = $resultContract->fetch_object();
                                    $contractId = $rowContract->contract_id;
                                    $unitPrice = $rowContract->price_converted;

                                    $sqlStockpileContract = "SELECT * FROM stockpile_contract WHERE contract_id = {$contractId} AND stockpile_id = {$stockpileId}";
                                    $resultStockpileContract = $myDatabase->query($sqlStockpileContract, MYSQLI_STORE_RESULT);
                                    if ($resultStockpileContract->num_rows == 1) {
                                        $rowStockpileContract = $resultStockpileContract->fetch_object();
                                        $stockpileContractId = $rowStockpileContract->stockpile_contract_id;
                                        $boolContinue = true;
                                    }
                                }
//                                else {
//                                    $sqlTemp = "SELECT SUM(column_13) AS total_send, SUM(column_16) AS total_netto FROM {$tempTable} WHERE column_8 = '{$importedData->column_8}' "
//                                            . "AND column_11 = '{$importedData->column_11}' AND UPPER(column_12) = UPPER('{$importedData->column_12}')";
//                                    $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
//                                    $rowTemp = $resultTemp->fetch_object();
//
//                                    $totalSend = $rowTemp->total_send;
//                                    $totalNetto = $rowTemp->total_netto;
//                                    $boolNewContract = true;
//                                }
                            } else {
                                $totalSend = (float)$importedData->column_13;
                                $totalNetto = (float)$importedData->column_16;
//                                $boolContinue = true;
//                                $boolNewContract = true;
                            }
                        }

//                        $boolContinue = true;
                        if ($boolNewContract) {
                            // <editor-fold defaultstate="collapsed" desc="create new contract for curah">

//                            $checkPoNo = $contractType .'-'. $vendorCode .'-'. $importedData->trans_year;
//                            $sql = "SELECT po_no FROM contract WHERE po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
//                            $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                            if($resultPo->num_rows == 1) {
//                                $rowPo = $resultPo->fetch_object();
//                                $splitPoNo = explode('-', $rowPo->po_no);
//                                $nextPoNo = ((float) $splitPoNo[3]) + 1;
//                                $poNo = $checkPoNo .'-'. $nextPoNo;
//                            } else {
//                                $poNo = $checkPoNo .'-1';
//                            }
//
//                            if($totalNetto < $totalSend) {
//                                $quantity = $totalNetto;
//                            } elseif($totalNetto > $totalSend) {
//                                $quantity = $totalSend;
//                            } else {
//                                $quantity = $totalSend;
//                            }
//
//                            $sql = "INSERT INTO contract (contract_type, po_no, contract_no, vendor_id, currency_id, exchange_rate, "
//                                    . "price, price_converted, quantity, entry_by, entry_date) VALUES ("
//                                    . "'{$contractType}', '{$poNo}', '{$importedData->column_11}', {$vendorId}, 1, 1, "
//                                    . "{$importedData->column_27}, {$importedData->column_27}, {$quantity}, "
//                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
//                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//                            if($result === false) {
//                                $boolContinue = false;
//                            } else {
//                                $contractId = $myDatabase->insert_id;
//                                $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
//                                        . "{$stockpileId}, {$contractId}, {$quantity}, "
//                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
//                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                                if($result === false) {
//                                    $boolContinue = false;
//                                } else {
//                                    $stockpileContractId = $myDatabase->insert_id;
//                                }
//                            }

                            // </editor-fold>
                        }

                        if ($boolContinue) {
                            $shrink = 0;
                            if ($contractType == 'P') {
                                if ((float)$importedData->column_16 < (float)$importedData->column_13) {
                                    $quantity = (float)$importedData->column_16;
                                    $shrink = (float)$importedData->column_13 - (float)$importedData->column_16;
                                } elseif ((float)$importedData->column_16 > (float)$importedData->column_13) {
                                    $quantity = (float)$importedData->column_13;
                                    $shrink = 0;
                                } else {
                                    $quantity = (float)$importedData->column_13;
                                }
                            } elseif ($contractType == 'C') {
                                if ($curahWeightRule == 0) {
                                    if ((float)$importedData->column_16 < (float)$importedData->column_13) {
                                        $quantity = (float)$importedData->column_16;
                                        $shrink = (float)$importedData->column_13 - (float)$importedData->column_16;
                                    } elseif ((float)$importedData->column_16 > (float)$importedData->column_13) {
                                        $quantity = (float)$importedData->column_13;
                                        $shrink = 0;
                                    } else {
                                        $quantity = (float)$importedData->column_13;
                                    }
                                } elseif ($curahWeightRule == 1) {
                                    $quantity = (float)$importedData->column_13;
                                    $shrink = (float)$importedData->column_13 - (float)$importedData->column_16;
                                } elseif ($curahWeightRule == 2) {
                                    $quantity = (float)$importedData->column_16;
                                    $shrink = (float)$importedData->column_13 - (float)$importedData->column_16;
                                } else {
                                    $quantity = (float)$importedData->column_13;
                                }
                            }

                            // get next slip no
                            if ($importedData->column_2 <= '2016-12-31') {
                                $checkSlipNo = $stockpileCode;
                            } else {
                                $checkSlipNo = $stockpileCode . '-' . $importedData->trans_year;
                            }
                            //                $sql = "SELECT LPAD(COUNT(1) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ";
                            //                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($resultSlip->num_rows == 0) {
                                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                            $rowSlipNo = $resultSlip->fetch_object();
                            $nextSlipNo = $rowSlipNo->next_id;
                            $slipNo = $checkSlipNo . '-' . $nextSlipNo;

                            // get freight cost
                            if ($freightCostId == 'NULL') {
                                $freightPrice = 0;
                            }

                            // get unloading cost

                            if ($unloadingCostId == 'NULL') {
                                $unloadingPrice = 0;
                            } else {
                                $unloadingPrice = $importedData->column_22;
                            }

//                            $unitPrice = $importedData->column_27;

                            // get inventory value
                            $inventoryValue = ($freightQuantity * $freightPrice) + $unloadingPrice + ($quantity * $unitPrice);

                            // insert into transaction
                            $sql = "INSERT INTO `transaction` (slip_no, stockpile_contract_id, transaction_date, loading_date, vehicle_no, labor_id, unloading_cost_id, "
                                . "unloading_date, freight_cost_id, permit_no, transaction_type, vendor_id, send_weight, bruto_weight, tarra_weight, "
                                . "netto_weight, notes, driver, freight_quantity, quantity, shrink, freight_price, unloading_price, unit_price, "
                                . "inventory_value, block, uc_tax_id, fc_tax_id, curah_tax_id, entry_by, entry_date) "
                                . "VALUES ('{$slipNo}', {$stockpileContractId}, STR_TO_DATE('{$importedData->column_2}', '%Y-%m-%d'), STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), "
                                . "'{$importedData->column_3}', {$laborId}, {$unloadingCostId}, STR_TO_DATE('{$importedData->column_2}', '%Y-%m-%d'), {$freightCostId}, '{$importedData->column_7}', "
                                . "1, {$supplierId}, {$importedData->column_13}, {$importedData->column_14}, {$importedData->tarra}, {$importedData->column_16}, '{$importedData->column_17}', "
                                . "'{$importedData->column_18}', {$freightQuantity}, {$quantity}, {$shrink}, {$freightPrice}, {$unloadingPrice}, {$unitPrice}, {$inventoryValue}, 'NONE', "
                                . "{$ucTaxId}, {$fcTaxId}, {$curahTaxId}, "
                                . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                            if ($result !== false) {
                                $successRow = $successRow + 1;

                                $transactionId = $myDatabase->insert_id;

                                if ($boolUpdateCurah) {
                                    /*$newQuantity = (float) $currentQuantity + (float) $totalSend;
                                    $sql = "UPDATE stockpile_contract SET quantity = {$newQuantity} WHERE stockpile_contract_id = {$stockpileContractId}";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                    $sql = "UPDATE contract SET quantity = (SELECT SUM(quantity) FROM stockpile_contract_id WHERE contract_id = {$contractId}) WHERE contract_id = {$contractId}";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/
                                }

                                $sql = "DELETE FROM {$tempTable} WHERE column_0 = {$importedData->column_0}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                                insertReportGL($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                            } else {
                                $errorRow = $errorRow + 1;
                            }
                        } else {
                            $errorRow = $errorRow + 1;
                        }

                        // </editor-fold>
                    } elseif (strtoupper($importedData->column_12) == 'OUT') {
                        // <editor-fold defaultstate="collapsed" desc="OUT">
                        if (($importedData->column_10 != '0' || $importedData->column_10 != 'NONE' || $importedData->column_10 != '' || $importedData->column_10 != '-') &&
                            ($importedData->column_27 != '0' || $importedData->column_27 != 'NONE' || $importedData->column_27 != '' || $importedData->column_27 != '-')) {
                            $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$importedData->column_10}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $customerId = $row->customer_id;
                            } else {
                                $sql = "INSERT INTO `customer` (customer_name, entry_by, entry_date) VALUES ("
                                    . "'{$importedData->column_10}', "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $customerId = $myDatabase->insert_id;
                            }
                        }

                        if ($customerId != '') {


                            // $salesNo = strtoupper(str_replace(' ', '', substr($importedData->column_10, 0, 5)));


                            $sql = "SELECT * FROM sales WHERE  customer_id = {$customerId} AND stockpile_id = {$stockpileId} "
                                . "AND currency_id = 1 AND price = {$importedData->column_27} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $salesId = $row->sales_id;
                                $salesBalance = $row->quantity;
                            } else {
                                $sqlTemp = "SELECT count(1) AS total_shipment FROM {$tempTable} WHERE UPPER(column_10) = UPPER('{$importedData->column_10}') "
                                    . "AND UPPER(column_12) = UPPER('{$importedData->column_12}') AND column_27 = {$importedData->column_27}";
                                $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
                                $rowTemp = $resultTemp->fetch_object();
                                $totalShipment = $rowTemp->total_shipment;

                                $sqlTemp = "SELECT MIN(column_5) AS sales_date, SUM(column_13) AS total_quantity FROM {$tempTable} WHERE UPPER(column_10) = UPPER('{$importedData->column_10}') "
                                    . "AND UPPER(column_12) = UPPER('{$importedData->column_12}') AND column_27 = {$importedData->column_27}";
                                $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
                                $rowTemp = $resultTemp->fetch_object();
                                $salesDate = $rowTemp->sales_date;
                                $totalQuantity = $rowTemp->total_quantity;
                                $salesBalance = $totalQuantity;


                                $sql = "INSERT INTO sales (sales_no, sales_date, sales_type, customer_id, stockpile_id, currency_id, exchange_rate, "
                                    . "price, price_converted, quantity, total_shipment, entry_by, entry_date) VALUES ("
                                    . "'{$salesNo}', STR_TO_DATE('{$salesDate}', '%Y-%m-%d'), 1, {$customerId}, {$stockpileId}, 1, 1, "
                                    . "{$importedData->column_27}, {$importedData->column_27}, {$totalQuantity}, {$totalShipment}, "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                $boolContinue = true;
                                if ($result !== false) {
                                    $salesId = $myDatabase->insert_id;

                                    for ($i = 1; $i <= $totalShipment; $i++) {
                                        $shipmentCode = $salesNo . '-' . $i;

                                        $sql = "INSERT INTO `shipment` (shipment_code, sales_id, entry_by, entry_date) VALUES ("
                                            . "'{$shipmentCode}', {$salesId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    }
                                } else {
                                    $boolContinue = false;
                                }
                            }

                            if ($boolContinue) {
                                $sql = "SELECT shipment_id FROM shipment WHERE shipment_code LIKE '{$salesNo}%' AND shipment_status = 0 ORDER BY shipment_code ASC LIMIT 1";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if ($result->num_rows == 1) {
                                    $row = $result->fetch_object();
                                    $shipmentId = $row->shipment_id;

                                    $shrink = (float)$importedData->column_13 - (float)$importedData->column_16;

                                    // get next slip no
                                    //$checkSlipNo = $stockpileCode /*.'-'. $importedData->trans_year*/;
                                    if ($importedData->column_2 <= '2016-12-31') {
                                        $checkSlipNo = $stockpileCode;
                                    } else {
                                        $checkSlipNo = $stockpileCode . '-' . $importedData->trans_year;
                                    }
                                    $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if ($resultSlip->num_rows == 0) {
                                        $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM transaction LIMIT 1";
                                        $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    }

                                    $rowSlipNo = $resultSlip->fetch_object();
                                    $nextSlipNo = $rowSlipNo->next_id;
                                    $slipNo = $checkSlipNo . '-' . $nextSlipNo;

                                    $sql = "INSERT INTO `transaction` (slip_no, product_id, shipment_id, transaction_date, vehicle_no, transaction_type, "
                                        . "send_weight, quantity, shrink, entry_by, entry_date) VALUES ('{$slipNo}', 1, "
                                        . "{$shipmentId}, STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), '{$importedData->column_9}', 2, "
                                        . "{$importedData->column_13}, {$importedData->column_16}, {$shrink}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                    if ($result !== false) {
                                        $transactionId = $myDatabase->insert_id;

                                        // insert into delivery
                                        $sql = "SELECT t.* 
                                                FROM transaction t 
                                                WHERE t.stockpile_contract_id IN (
                                                    SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                                                ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                                                ORDER BY t.slip_no ASC, t.unloading_date ASC";
                                        $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        $totalInventoryValue = 0;
                                        if ($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                                            $balanceLeft = (float)$importedData->column_13;
                                            while ($rowDelivery = $resultDelivery->fetch_object()) {
                                                if ($balanceLeft > 0) {
                                                    if ($rowDelivery->delivery_status == 0) {
                                                        if ($balanceLeft >= $rowDelivery->quantity) {
                                                            $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                                            $quantityTaken = $rowDelivery->quantity;
                                                            $percentTaken = 1;
                                                            $deliveryStatus = 1;
                                                        } elseif ($balanceLeft < $rowDelivery->quantity) {
                                                            $quantityTaken = $balanceLeft;
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $balanceLeft = 0;
                                                            $deliveryStatus = 2;
                                                        }
                                                    } elseif ($rowDelivery->delivery_status == 2) {
                                                        $totalTaken = 0;
                                                        $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                                        $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                                        if ($resultTaken !== false && $resultTaken->num_rows == 1) {
                                                            $rowTaken = $resultTaken->fetch_object();
                                                            $totalTaken = $rowTaken->total_taken;
                                                        }

                                                        if ($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                                            $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                                            $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $deliveryStatus = 1;
                                                        } elseif ($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                                            $quantityTaken = $balanceLeft;
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $balanceLeft = 0;
                                                            $deliveryStatus = 2;
                                                        }
                                                    }

                                                    $deliveryValue = $quantityTaken * (float)$importedData->column_27;
                                                    $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                                    $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                                    $percentTaken = $percentTaken * 100;

                                                    $sql = "INSERT INTO delivery (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                                        . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), {$percentTaken}, "
                                                        . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                                    $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                                }
                                            }
                                        }

                                        //$updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                                        $updateInventoryValue = $totalInventoryValue;

                                        $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                        // update shipment
                                        $cogsAmount = $updateInventoryValue;
                                        $invoiceAmount = (float)$importedData->column_16 * (float)$importedData->column_27;
                                        $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), "
                                            . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$importedData->column_16}, shipment_status = 1 "
                                            . "WHERE shipment_id = {$shipmentId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                        $sql = "SELECT COALESCE(SUM(quantity), 0) AS delivered_balance FROM `transaction` 
                                                WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                                                AND transaction_type = 2
                                                AND transaction_id <> {$transactionId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        $row = $result->fetch_object();
                                        $deliveredBalance = $row->delivered_balance;

                                        // update sales
                                        $boolUpdateSales = false;
                                        if ((float)$importedData->column_13 == ($salesBalance - $deliveredBalance)) {
                                            $salesStatus = 1;
                                            $boolUpdateSales = true;
                                        } elseif ((float)$importedData->column_13 < ($salesBalance - $deliveredBalance)) {
                                            $salesStatus = 2;
                                            $boolUpdateSales = true;
                                        }

                                        if ($boolUpdateSales) {
                                            $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        }

                                        $successRow = $successRow + 1;
                                    } else {
                                        $errorRow = $errorRow + 1;
                                    }
                                } else {
                                    $errorRow = $errorRow + 1;
                                }
                            }
                        }

                        // </editor-fold>
                    }

                }
                $counterRow++;
            }

            if (($successRow + $warningRow) == ($counterRow - 1) && $errorRow == 0) {
                $result = $myDatabase->query("COMMIT", MYSQLI_STORE_RESULT);

                $sql = "DROP TABLE {$tempTable}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


                return "OK|" . $successRow . " Row(s) import successfully, " . $warningRow . " Row(s) failed with warning. " . $errorMessage;
            } else {
                $result = $myDatabase->query("ROLLBACK", MYSQLI_STORE_RESULT);

                return "FAIL|Import failed. " . $errorRow . " Rows(s) can not be imported. Please contact administrator. ";
            }
        }
    } else {
        return 'FAIL|File not exists.';
    }
    // </editor-fold>
}

function excelImportGeneralVendor($myDatabase, $fileName = "", $stockpileId = 0, $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1)
{
    // <editor-fold defaultstate="collapsed" desc="function excelImportTransaction($myDatabase, $fileName = "", $stockpileId = 0, $vendorId = 0, $stockpileContractId = 0, $onSheet = 0, $fromRow = 1, $toRow = -1, $fromCol = 0, $toCol = -1)">
    if (file_exists(realpath($fileName))) {
        $fileNameRealPath = realpath($fileName);

        require_once './assets/extensions/PHPExcel.php';
        require_once './assets/extensions/PHPExcel/IOFactory.php';
        require_once './assets/extensions/PHPExcel/Cell/AdvancedValueBinder.php';

        $objReader = PHPExcel_IOFactory::createReader('Excel5');

        $objPHPExcel = $objReader->load($fileNameRealPath);

        $readStartAtRow = 1;
        $totalCols = 14;

        $result = $myDatabase->query("START TRANSACTION", MYSQLI_STORE_RESULT);

//        $sheetCount = $objPHPExcel->getSheetCount();
        $sheetCount = 1;
        for ($onSheet; $onSheet < $sheetCount; $onSheet++) {
            $objPHPExcel->setActiveSheetIndex($onSheet);
            $objWorksheet = $objPHPExcel->getActiveSheet();

            $rows = $objWorksheet->getHighestRow();
            $cols = PHPExcel_Cell::columnIndexFromString($objWorksheet->getHighestColumn());
            if ($toRow == -1)
                $toRow = $rows;
            if ($toCol == -1)
                $toCol = $cols;

            $key = array();
            $columnName = array();
            $getColumnAName = false;

            if ($toCol == $totalCols) {
                for ($row = $fromRow; $row <= $rows; $row++) {
                    for ($i = $fromCol; $i < $cols; $i++) {
                        $columnName[$i] = "column_" . $i;
                        if (isset($columnName[$i])) {
                            if (PHPExcel_Shared_Date::isDateTime($objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row))) {
                                $tmp = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();

                                if (is_numeric($tmp)) {
                                    $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'YYYY-MM-DD');
                                } else {
                                    $key[$row][$i]['value'] = substr($tmp, 6, 4) . "-" . substr($tmp, 3, 2) . "-" . substr($tmp, 0, 2);
                                }
//                                $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'DD-MMM-YYYY');
                            } else {
//                                $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();
                                $check = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();
                                if (substr($check, 0, 1) == "=") {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getCalculatedValue();
                                } else {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();
                                }
                            }
                        }
                    }
                }

                $getColumnAName = true;
            } else {
                return 'FAIL|Template is wrong.';
            }
        }

        if ($getColumnAName) {
            $temporaryTable = '';
            $temporaryTableWarning = '';
            $temporaryTableDuplicate = '';
            $fieldNames = '';

            foreach ($columnName as $i => $names) {
                if (trim($names) != '') {
                    $temporaryTable .= (($temporaryTable == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableWarning .= (($temporaryTableWarning == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableDuplicate .= (($temporaryTableDuplicate == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $fieldNames .= (($fieldNames == '') ? '' : ', ') . "`" . trim($names) . "`";
                }
            }

            $tempTable = '`tmp_general_vendor_' . uniqid() . '`';
//            $temporaryTable = 'CREATE TEMPORARY TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableWarning = '`jb_sdw_' . uniqid() . '`';
//            $temporaryTableWarning = 'CREATE TEMPORARY TABLE ' . $tempTableWarning . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableWarning . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableDuplicate = '`jb_sdd_' . uniqid() . '`';
//            $temporaryTableDuplicate = 'CREATE TEMPORARY TABLE ' . $tempTableDuplicate . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableDuplicate . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
            $temporaryTable = 'CREATE TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';

//            return "0|". $temporaryTable;

            $result = $myDatabase->query($temporaryTable, MYSQLI_STORE_RESULT);
            if ($result === false) {
                return 'FAIL|error create table ' . $myDatabase->errorMessage;
            }

            $insertInto = '';
            foreach ($key as $row => $colData) {
                if ($colData[1] != null) {
                    $insertIntoCol = '';
                    foreach ($colData as $col => $colDatas) {
                        if (strpos($colDatas['value'], "NULL") !== false || $colDatas['value'] == '')
                            $insertIntoCol .= (($insertIntoCol == '') ? '' : ', ') . "NULL";
                        else {
                            $insertIntoCol .= (($insertIntoCol == '') ? '' : ', ') . "'" . $colDatas['value'] . "'";
                        }
                    }
                    $insertInto .= (($insertInto == '') ? '' : ', ') . "(" . $insertIntoCol . ")";
//                die("INSERT INTO $temp_table ($fieldnames) VALUES " . $insertinto . ";");
                }
            }

            $insertIntoTemp = "INSERT INTO $tempTable ($fieldNames) VALUES " . $insertInto . ";";

            $result = $myDatabase->query($insertIntoTemp, MYSQLI_STORE_RESULT);
            if ($result === false) {
                return 'FAIL|error insert table ' . $myDatabase->errorMessage;
            }
//		}
//	}
//}

//            return 'OK|Table created.';

//            $insertIntoWarning = "INSERT INTO $tempTableWarning ($fieldNames) VALUES " . $insertInto . ";";
//
//            $resultWarning = $myDatabase->query($insertIntoWarning, MYSQLI_STORE_RESULT);
//            if($resultWarning === false) {
//                return 'FAIL|error insert warning table '. $myDatabase->errorMessage;
//            }
//
//            $insertIntoDuplicate = "INSERT INTO $tempTableDuplicate ($fieldNames) VALUES " . $insertInto . ";";
//
//            $resultDuplicate = $myDatabase->query($insertIntoDuplicate, MYSQLI_STORE_RESULT);
//            if($resultDuplicate === false) {
//                return 'FAIL|error insert duplicate table '. $myDatabase->errorMessage;
//            }

//            return "0|". $temporaryTable;

            $sqlSelect = "SELECT a.* FROM $tempTable a ORDER BY id ASC;";
            $resultSelect = $myDatabase->query($sqlSelect, MYSQLI_STORE_RESULT);
            $successRow = 0;
            $errorRow = 0;
            $warningRow = 0;
            $counterRow = 1;
            $errorMessage = '';
            $shipmentError = 0;
            $categoryError = 0;
            $rateError = 0;
            $currencyError = 0;
            $insuredError = 0;
            $countryFromError = 0;
            $countryToError = 0;
            $duplicateError = 0;
            $duplicateQuotation = '';
            $shipmentQuotation = '';
            $categoryQuotation = '';
            $rateQuotation = '';
            $currencyQuotation = '';
            $insuredQuotation = '';
            $countryFromQuotation = '';
            $countryToQuotation = '';

            date_default_timezone_set('Asia/Jakarta');

            $date = new DateTime();
            $currentDate = $date->format('d/m/Y H:i:s');

            $sqlStockpile = "SELECT * FROM stockpile WHERE stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sqlStockpile, MYSQLI_STORE_RESULT);
            $rowStockpile = $resultStockpile->fetch_object();
            //$freightWeightRule = $rowStockpile->freight_weight_rule;
            //$curahWeightRule = $rowStockpile->curah_weight_rule;
            $stockpileCode = $rowStockpile->stockpile_code;
            $stockpileId = $rowStockpile->stockpile_id;

            while ($importedData = $resultSelect->fetch_object()) {
                if ($counterRow >= $readStartAtRow) {
                    $generalVendorName = $importedData->column_2;
                    $generalVendorAddress = 'NULL';
                    $npwp = 'NULL';
                    $npwpName = 'NULL';
                    $npwpAddress = 'NULL';
                    $bankName = 'NULL';
                    $branch = 'NULL';
                    $accountNo = 'NULL';
                    $beneficiary = 'NULL';
                    $swiftCode = 'NULL';
                    $ppnTaxId = 0;
                    $pphTaxId = 0;
                    $ppnTax = 0;
                    $pphTax = 0;


                    if ($importedData->column_3 != '0' && strtoupper($importedData->column_3) != 'NONE' && $importedData->column_3 != '' && $importedData->column_3 != '-' && $importedData->column_3 != null) {
                        $accountNo = $importedData->column_3;
                    }
                    if ($importedData->column_4 != '0' && strtoupper($importedData->column_4) != 'NONE' && $importedData->column_4 != '' && $importedData->column_4 != '-' && $importedData->column_4 != null) {
                        $generalVendorAddress = $importedData->column_4;
                    }
                    if ($importedData->column_5 != '0' && strtoupper($importedData->column_5) != 'NONE' && $importedData->column_5 != '' && $importedData->column_5 != '-' && $importedData->column_5 != null) {
                        $beneficiary = $importedData->column_5;
                    }
                    if ($importedData->column_6 != '0' && strtoupper($importedData->column_6) != 'NONE' && $importedData->column_6 != '' && $importedData->column_6 != '-' && $importedData->column_6 != null) {
                        $bankName = $importedData->column_6;
                    }
                    if ($importedData->column_7 != '0' && strtoupper($importedData->column_7) != 'NONE' && $importedData->column_7 != '' && $importedData->column_7 != '-' && $importedData->column_7 != null) {
                        $branch = $importedData->column_7;
                    }
                    if ($importedData->column_8 != '0' && strtoupper($importedData->column_8) != 'NONE' && $importedData->column_8 != '' && $importedData->column_8 != '-' && $importedData->column_8 != null) {
                        $swiftCode = $importedData->column_8;
                    }
                    if ($importedData->column_9 != '0' && strtoupper($importedData->column_9) != 'NONE' && $importedData->column_9 != '' && $importedData->column_9 != '-' && $importedData->column_9 != null) {
                        $npwp = $importedData->column_9;
                    }
                    if ($importedData->column_10 != '0' && strtoupper($importedData->column_10) != 'NONE' && $importedData->column_10 != '' && $importedData->column_10 != '-' && $importedData->column_10 != null) {
                        $npwpName = $importedData->column_10;
                    }
                    if ($importedData->column_11 != '0' && strtoupper($importedData->column_11) != 'NONE' && $importedData->column_11 != '' && $importedData->column_11 != '-' && $importedData->column_11 != null) {
                        $npwpAddress = $importedData->column_11;
                    }


                    if ($importedData->column_12 != '0' && strtoupper($importedData->column_12) != 'NONE' && $importedData->column_12 != '' && $importedData->column_12 != '-' && $importedData->column_12 != null) {
                        $sql = "SELECT * FROM `tax` WHERE UPPER(tax_name) = UPPER('{$importedData->column_12}') LIMIT 1";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($result->num_rows == 1) {
                            $row = $result->fetch_object();
                            $ppnTaxId = $row->tax_id;
                            $ppnTax = $row->tax_value;
                        }
                    }

                    if ($importedData->column_13 != '0' && strtoupper($importedData->column_13) != 'NONE' && $importedData->column_13 != '' && $importedData->column_13 != '-' && $importedData->column_13 != null) {
                        $sql = "SELECT * FROM `tax` WHERE UPPER(tax_name) = UPPER('{$importedData->column_13}') LIMIT 1";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($result->num_rows == 1) {
                            $row = $result->fetch_object();
                            $pphTaxId = $row->tax_id;
                            $pphTax = $row->tax_value;
                        }
                    }


                    // insert into transaction
                    $sql = "select max(general_vendor_code) as maxCode from general_vendor";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $row = $result->fetch_array();
                    $generalVendorCode = $row['maxCode'];
                    $noUrut = (int)substr($generalVendorCode, 3, 5);
                    $noUrut++;
                    $char = "GV-";
                    $generalVendorCode = $char . sprintf("%05s", $noUrut);
                    $sql = "INSERT INTO `general_vendor` (general_vendor_code,general_vendor_name, general_vendor_address, npwp, npwp_name, npwp_address, bank_name, branch, account_no, beneficiary, swift_code, ppn_tax_id, pph_tax_id, ppn, pph, stockpile_id, active, entry_by, entry_date)
                                    VALUES ('{$generalVendorCode}','{$generalVendorName}', '{$generalVendorAddress}', '{$npwp}', '{$npwpName}', '{$npwpAddress}', '{$bankName}', '{$branch}', '{$accountNo}', '{$beneficiary}', '{$swiftCode}', '{$ppnTaxId}', '{$pphTaxId}', '{$ppnTax}', '{$pphTax}', {$stockpileId}, 1, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    if ($result !== false) {
                        $successRow = $successRow + 1;


                        $sql = "DELETE FROM {$tempTable} WHERE column_0 = {$importedData->column_0}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


                    } else {
                        $errorRow = $errorRow + 1;
                    }


                    // </editor-fold>


                }
                $counterRow++;
            }

            if (($successRow + $warningRow) == ($counterRow - 1) && $errorRow == 0) {
                $result = $myDatabase->query("COMMIT", MYSQLI_STORE_RESULT);

                $sql = "DROP TABLE {$tempTable}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


                return "OK|" . $successRow . " Row(s) import successfully, " . $warningRow . " Row(s) failed with warning. " . $errorMessage;
            } else {
                $result = $myDatabase->query("ROLLBACK", MYSQLI_STORE_RESULT);
                echo $sql;
                return "FAIL|Import failed. " . $errorRow . " Rows(s) can not be imported. Please contact administrator. ";
            }
        }
    } else {
        return 'FAIL|File not exists.';
    }
    // </editor-fold>
}

function excelImportJurnal($myDatabase, $fileName = "", $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1)
{

    if (file_exists(realpath($fileName))) {
        $fileNameRealPath = realpath($fileName);

        require_once './assets/extensions/PHPExcel.php';
        require_once './assets/extensions/PHPExcel/IOFactory.php';
        require_once './assets/extensions/PHPExcel/Cell/AdvancedValueBinder.php';

        $objReader = PHPExcel_IOFactory::createReader('Excel5');

        $objPHPExcel = $objReader->load($fileNameRealPath);

        $readStartAtRow = 1;
        $totalCols = 17;

        $result = $myDatabase->query("START JURNAL", MYSQLI_STORE_RESULT);

//        $sheetCount = $objPHPExcel->getSheetCount();
        $sheetCount = 1;
        for ($onSheet; $onSheet < $sheetCount; $onSheet++) {
            $objPHPExcel->setActiveSheetIndex($onSheet);
            $objWorksheet = $objPHPExcel->getActiveSheet();

            $rows = $objWorksheet->getHighestRow();
            $cols = PHPExcel_Cell::columnIndexFromString($objWorksheet->getHighestColumn());
            if ($toRow == -1)
                $toRow = $rows;
            if ($toCol == -1)
                $toCol = $cols;

            $key = array();
            $columnName = array();
            $getColumnAName = false;

            if ($toCol == $totalCols) {
                for ($row = $fromRow; $row <= $rows; $row++) {
                    for ($i = $fromCol; $i < $cols; $i++) {
                        $columnName[$i] = "column_" . $i;
                        if (isset($columnName[$i])) {
                            if (PHPExcel_Shared_Date::isDateTime($objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row))) {
                                $tmp = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();

                                if (is_numeric($tmp)) {
                                    $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'YYYY-MM-DD');
                                } else {
                                    $key[$row][$i]['value'] = substr($tmp, 6, 4) . "-" . substr($tmp, 3, 2) . "-" . substr($tmp, 0, 2);
                                }
//                                $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'DD-MMM-YYYY');
                            } else {
//                                $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();
                                $check = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();
                                if (substr($check, 0, 1) == "=") {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getCalculatedValue();
                                } else {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();
                                }
                            }
                        }
                    }
                }

                $getColumnAName = true;
            } else {
                return 'FAIL|Template is wrong.';
            }
        }

        if ($getColumnAName) {
            $temporaryTable = '';
            $temporaryTableWarning = '';
            $temporaryTableDuplicate = '';
            $fieldNames = '';

            foreach ($columnName as $i => $names) {
                if (trim($names) != '') {
                    $temporaryTable .= (($temporaryTable == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableWarning .= (($temporaryTableWarning == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableDuplicate .= (($temporaryTableDuplicate == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $fieldNames .= (($fieldNames == '') ? '' : ', ') . "`" . trim($names) . "`";
                }
            }

            $tempTable = '`tmp_jurnal_' . uniqid() . '`';
//            $temporaryTable = 'CREATE TEMPORARY TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableWarning = '`jb_sdw_' . uniqid() . '`';
//            $temporaryTableWarning = 'CREATE TEMPORARY TABLE ' . $tempTableWarning . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableWarning . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableDuplicate = '`jb_sdd_' . uniqid() . '`';
//            $temporaryTableDuplicate = 'CREATE TEMPORARY TABLE ' . $tempTableDuplicate . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableDuplicate . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
            $temporaryTable = 'CREATE TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';

//            return "0|". $temporaryTable;

            $result = $myDatabase->query($temporaryTable, MYSQLI_STORE_RESULT);
            if ($result === false) {
                return 'FAIL|error create table ' . $myDatabase->errorMessage;
            }

            $insertInto = '';
            foreach ($key as $row => $colData) {
                if ($colData[1] != null) {
                    $insertIntoCol = '';
                    foreach ($colData as $col => $colDatas) {
                        if (strpos($colDatas['value'], "NULL") !== false || $colDatas['value'] == '')
                            $insertIntoCol .= (($insertIntoCol == '') ? '' : ', ') . "NULL";
                        else {
                            $insertIntoCol .= (($insertIntoCol == '') ? '' : ', ') . "'" . $colDatas['value'] . "'";
                        }
                    }
                    $insertInto .= (($insertInto == '') ? '' : ', ') . "(" . $insertIntoCol . ")";
//                die("INSERT INTO $temp_table ($fieldnames) VALUES " . $insertinto . ";");
                }
            }
            $sqlCek = "select payment_no from rpt_upload where payment_no = '{$colData[1]['value']}'";
            $resultNew = $myDatabase->query($sqlCek, MYSQLI_STORE_RESULT);
            $rowNew = $resultNew->fetch_object();
            $paymentNo = $rowNew->payment_no;

            //closingDate
            $transactionDate = $colData[11]['value'];
            // $stockpileCD = $colData[12]['value'];
            $checkClosingDate = explode('-', closingDate($transactionDate, 'Configuration - Jurnal Memorial'));
            $boolClosing = $checkClosingDate[0];
            $closingDate = $checkClosingDate[1];

            if ($boolClosing) {
                if ($paymentNo != $colData[1]['value']) {
                    $insertIntoTemp = "INSERT INTO $tempTable ($fieldNames) VALUES " . $insertInto . ";";
                    $result = $myDatabase->query($insertIntoTemp, MYSQLI_STORE_RESULT);
                    if ($result === false) {
                        return 'FAIL|error insert table ' . $myDatabase->errorMessage;
                    }
                } else {
                    $sql = "DROP TABLE {$tempTable}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    return "FAIL|Import failed. " . $colData[1]['value'] . " already uploaded on the system. ";
                }
            } else {
                $sql = "DROP TABLE {$tempTable}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                echo $closingDate;
                die();
            }

            $sqlSelect = "SELECT a.* FROM $tempTable a ORDER BY a.id ASC, a.column_1 ASC;";
            $resultSelect = $myDatabase->query($sqlSelect, MYSQLI_STORE_RESULT);
            $successRow = 0;
            $errorRow = 0;
            $warningRow = 0;
            $counterRow = 1;
            $errorMessage = '';
            $shipmentError = 0;
            $categoryError = 0;
            $rateError = 0;
            $currencyError = 0;
            $insuredError = 0;
            $countryFromError = 0;
            $countryToError = 0;
            $duplicateError = 0;
            $duplicateQuotation = '';
            $shipmentQuotation = '';
            $categoryQuotation = '';
            $rateQuotation = '';
            $currencyQuotation = '';
            $insuredQuotation = '';
            $countryFromQuotation = '';
            $countryToQuotation = '';
            $boolContinue = true;

            date_default_timezone_set('Asia/Jakarta');

            $date = new DateTime();
            $currentDate = $date->format('d/m/Y H:i:s');
            $currentYearMonth = $date->format('ym');

            while ($importedData = $resultSelect->fetch_object()) {
                if ($counterRow >= $readStartAtRow) {

                    $sql = "INSERT INTO `rpt_upload` (gl_module, payment_no, slip_no, supplier_name, supplier_code,contract_no, po_no, invoice_no, shipment_code, quantity, price, gl_date, stockpile_name, account_no, account_name, amounts, description,entry_date,entry_by) "
                        . "VALUES ('{$importedData->column_0}', '{$importedData->column_1}', '{$importedData->column_2}', '{$importedData->column_3}', '{$importedData->column_4}', '{$importedData->column_5}', '{$importedData->column_6}', '{$importedData->column_7}', '{$importedData->column_8}', '{$importedData->column_9}', '{$importedData->column_10}', '{$importedData->column_11}', '{$importedData->column_12}', '{$importedData->column_13}', '{$importedData->column_14}', '{$importedData->column_15}', '{$importedData->column_16}',STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']})";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($result !== false) {
                        $successRow = $successRow + 1;

                        $rpt_upload_id = $myDatabase->insert_id;


                        $sql = "DELETE FROM {$tempTable} WHERE column_0 = {$importedData->column_0}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                        //insertReportGL_JurnalMemorial($myDatabase, 'JURNAL MEMORIAL', "NULL", "NULL", "NULL", "NULL", "NULL", $rpt_upload_id);
                        insertReportGL_JurnalMemorial($myDatabase, 'JURNAL MEMORIAL', "NULL", "NULL", "NULL", "NULL", "NULL", $rpt_upload_id);

                        //  insertGeneralLedger($myDatabase, 'JURNAL MEMORIAL', "NULL", "NULL", "NULL", "NULL", "NULL", $jurnalId);
                    } else {
                        $errorRow = $errorRow + 1;
                        echo 'FALSE4';
                    }
                }
                $counterRow++;
            }

            if (($successRow + $warningRow) == ($counterRow - 1) && $errorRow == 0) {
                $result = $myDatabase->query("COMMIT", MYSQLI_STORE_RESULT);

                $sql = "DROP TABLE {$tempTable}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


                return "OK|" . $successRow . " Row(s) import successfully, " . $warningRow . " Row(s) failed with warning. " . $errorMessage;
            } else {
                $result = $myDatabase->query("ROLLBACK", MYSQLI_STORE_RESULT);

                return "FAIL|Import failed. " . $errorRow . " Rows(s) can not be imported. Please contact administrator. ";
            }
        }
    } else {
        return 'FAIL|File not exists.';
    }
    // </editor-fold>
}

function excelImportTimbangan($myDatabase, $fileName = "", $stockpileId = 0, $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1)
{
    // <editor-fold defaultstate="collapsed" desc="excelImportContract($myDatabase, $fileName = "", $stockpileId = 0, $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1)">
    if (file_exists(realpath($fileName))) {
        $fileNameRealPath = realpath($fileName);

        require_once './assets/extensions/PHPExcel.php';
        require_once './assets/extensions/PHPExcel/IOFactory.php';
        require_once './assets/extensions/PHPExcel/Cell/AdvancedValueBinder.php';

        $objReader = PHPExcel_IOFactory::createReader('Excel5');

        $objPHPExcel = $objReader->load($fileNameRealPath);

        $readStartAtRow = 1;
        $totalCols = 18;

        $result = $myDatabase->query("START TRANSACTION", MYSQLI_STORE_RESULT);

//        $sheetCount = $objPHPExcel->getSheetCount();
        $sheetCount = 1;
        for ($onSheet; $onSheet < $sheetCount; $onSheet++) {
            $objPHPExcel->setActiveSheetIndex($onSheet);
            $objWorksheet = $objPHPExcel->getActiveSheet();

            $rows = $objWorksheet->getHighestRow();
            $cols = PHPExcel_Cell::columnIndexFromString($objWorksheet->getHighestColumn());
            if ($toRow == -1)
                $toRow = $rows;
            if ($toCol == -1)
                $toCol = $cols;

            $key = array();
            $columnName = array();
            $getColumnAName = false;

            if ($toCol == $totalCols) {
                for ($row = $fromRow; $row <= $rows; $row++) {
                    for ($i = $fromCol; $i < $cols; $i++) {
                        $columnName[$i] = "column_" . $i;
                        if (isset($columnName[$i])) {
                            if (PHPExcel_Shared_Date::isDateTime($objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row))) {
                                $tmp = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();

                                if (is_numeric($tmp)) {
                                    $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'YYYY-MM-DD');
                                } else {
                                    $key[$row][$i]['value'] = substr($tmp, 6, 4) . "-" . substr($tmp, 3, 2) . "-" . substr($tmp, 0, 2);
                                }
//                                $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'DD-MMM-YYYY');
                            } else {
//                                $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();
                                $check = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();
                                if (substr($check, 0, 1) == "=") {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getCalculatedValue();
                                } else {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();
                                }
                            }
                        }
                    }
                }

                $getColumnAName = true;
            } else {
                return 'FAIL|Template is wrong.';
            }
        }

        if ($getColumnAName) {
            $temporaryTable = '';
            $temporaryTableWarning = '';
            $temporaryTableDuplicate = '';
            $fieldNames = '';

            foreach ($columnName as $i => $names) {
                if (trim($names) != '') {
                    $temporaryTable .= (($temporaryTable == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableWarning .= (($temporaryTableWarning == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableDuplicate .= (($temporaryTableDuplicate == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $fieldNames .= (($fieldNames == '') ? '' : ', ') . "`" . trim($names) . "`";
                }
            }

            $tempTable = '`tmp_timbangan_' . uniqid() . '`';
//            $temporaryTable = 'CREATE TEMPORARY TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableWarning = '`jb_sdw_' . uniqid() . '`';
//            $temporaryTableWarning = 'CREATE TEMPORARY TABLE ' . $tempTableWarning . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableWarning . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableDuplicate = '`jb_sdd_' . uniqid() . '`';
//            $temporaryTableDuplicate = 'CREATE TEMPORARY TABLE ' . $tempTableDuplicate . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableDuplicate . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
            $temporaryTable = 'CREATE TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';

//            return "0|". $temporaryTable;

            $result = $myDatabase->query($temporaryTable, MYSQLI_STORE_RESULT);
            if ($result === false) {
                return 'FAIL|error create table ' . $myDatabase->errorMessage;
            }

            $insertInto = '';
            foreach ($key as $row => $colData) {
                if ($colData[1] != null) {
                    $insertIntoCol = '';
                    foreach ($colData as $col => $colDatas) {
                        if (strpos($colDatas['value'], "NULL") !== false || $colDatas['value'] == '')
                            $insertIntoCol .= (($insertIntoCol == '') ? '' : ', ') . "NULL";
                        else {
                            $insertIntoCol .= (($insertIntoCol == '') ? '' : ', ') . "'" . $colDatas['value'] . "'";
                        }
                    }
                    $insertInto .= (($insertInto == '') ? '' : ', ') . "(" . $insertIntoCol . ")";
//                die("INSERT INTO $temp_table ($fieldnames) VALUES " . $insertinto . ";");
                }
            }

            $insertIntoTemp = "INSERT INTO $tempTable ($fieldNames) VALUES " . $insertInto . ";";

            $result = $myDatabase->query($insertIntoTemp, MYSQLI_STORE_RESULT);
            if ($result === false) {
                return 'FAIL|error insert table ' . $myDatabase->errorMessage;
            }

            $sql = "DELETE FROM $tempTable WHERE column_0 IS NULL";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            //return 'OK|Table created.';

            $sqlSelect = "SELECT  a.* FROM $tempTable a WHERE a.column_0 IS NOT NULL;";
            $resultSelect = $myDatabase->query($sqlSelect, MYSQLI_STORE_RESULT);
            $successRow = 0;
            $errorRow = 0;
            $warningRow = 0;
            $counterRow = 1;
            $errorMessage = '';

            date_default_timezone_set('Asia/Jakarta');

            $date = new DateTime();
            $currentDate = $date->format('d/m/Y H:i:s');
            $currentYear = $date->format('y');
            $currentYearMonth = $date->format('ym');

            while ($importedData = $resultSelect->fetch_object()) {
                if ($counterRow >= $readStartAtRow) {
                    // check Vendor
                    /*$boolInsertVendor = false;
                    $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$importedData->column_2}')";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($result !== false && $result->num_rows > 0) {
                        $rowVendor = $result->fetch_object();
                        $vendorId = $rowVendor->vendor_id;
                        $boolInsertVendor = true;
                    } elseif($result !== false && $result->num_rows == 0) {
                        $ppn = 0;
                        $pph = 0;
                        $ppnValue = 0;
                        $pphValue = 0;

                        if(strtoupper($importedData->column_4) == 'PPN') {
                            $ppn = 1;
                            $ppnValue = 10;
                        }

                        if($importedData->column_5 != '') {
                            $sqlPPh = "SELECT * FROM tax WHERE UPPER(tax_name) = UPPER({$importedData->column_4})";
                            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                                $rowPPh = $resultPPh->fetch_object();
                                $pph = $rowPPh->tax_id;
                                $pphValue = $rowPPh->tax_value;
                            }
                        }

                        $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                                . "UPPER('{$importedData->column_2}'), UPPER('{$importedData->column_3}'), '', '', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                        if($result !== false) {
                            $vendorId = $myDatabase->insert_id;
                            $boolInsertVendor = true;
                        }
                    }*/

                    /*if($boolInsertVendor) {
                        $sql = "SELECT * FROM contract WHERE UPPER(contract_no) = UPPER('{$importedData->column_7}')";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if($result !== false && $result->num_rows == 0) {
                            if($importedData->column_1 == '-' || $importedData->column_1 == '' || $importedData->column_1 == null) {
                                $checkPoNo = $importedData->contract_type .'-'. $importedData->column_2 .'-'. $currentYearMonth;
                                $sql = "SELECT po_no FROM contract WHERE company_id = {$_SESSION['companyId']} AND po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
                                $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if($resultPo->num_rows == 1) {
                                    $rowPo = $resultPo->fetch_object();
                                    $splitPoNo = explode('-', $rowPo->po_no);
                                    $nextPoNo = ((float) $splitPoNo[3]) + 1;
                                    $poNo = $checkPoNo .'-'. $nextPoNo;
                                } else {
                                    $poNo = $checkPoNo .'-1';
                                }
                            } else {
                                $poNo = $importedData->column_1;
                            }
                            */
                    if ($importedData->column_11 == '-' || $importedData->column_11 == '' || $importedData->column_11 == null) {
                        $potPercen = 0;
                    } else {
                        $potPercen = $importedData->column_11;
                    }
                    if ($importedData->column_12 == '-' || $importedData->column_12 == '' || $importedData->column_12 == null) {
                        $potKg = 0;
                    } else {
                        $potKg = $importedData->column_12;
                    }


                    $sql = "INSERT INTO `transaction_upload` (stockpile_id, no_slip, tgl_masuk, tgl_keluar, no_kendaraan, nama_barang, nama_customer, no_do, "
                        . "supir, timbang1, timbang2, bruto, pot_percen, pot_kg, netto, keterangan, user_input, cetakan, editBy, upload_by, upload_date) VALUES ("
                        . "{$stockpileId}, '{$importedData->column_0}', '{$importedData->column_1}','{$importedData->column_2}', '{$importedData->column_3}', '{$importedData->column_4}', '{$importedData->column_5}', '{$importedData->column_6}', '{$importedData->column_7}', {$importedData->column_8}, {$importedData->column_9}, {$importedData->column_10}, {$potPercen}, {$potKg}, {$importedData->column_13}, '{$importedData->column_14}',"
                        . "'{$importedData->column_15}', '{$importedData->column_16}', '{$importedData->column_17}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    if ($result !== false) {
                        /*  $contractId = $myDatabase->insert_id;

                                $sql = "SELECT * FROM `stockpile` WHERE UPPER(stockpile_name) = UPPER('{$importedData->column_10}')";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if($result !== false && $result->num_rows > 0) {
                                    $rowSP = $result->fetch_object();
                                    $stockpileId = $rowSP->stockpile_id;

                                    $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                                            . "{$stockpileId}, {$contractId}, {$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                } else {
                                    $warningRow = $warningRow + 1;
                                }*/

                        // insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", $contractId);

                        $successRow = $successRow + 1;
                    } else {
                        $errorRow = $errorRow + 1;
                    }
                    /*} else {
                            $warningRow = $warningRow + 1;
                        }
                    } else {
                        $errorRow = $errorRow + 1;
                    }*/
                }
                $counterRow++;
            }

            if (($successRow + $warningRow) >= ($counterRow - 1) && $errorRow == 0) {
                $result = $myDatabase->query("COMMIT", MYSQLI_STORE_RESULT);

                $sql = "DROP TABLE {$tempTable}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                $sql = "DELETE FROM transaction_upload WHERE no_slip = ''";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


                return "OK|" . $successRow . " Row(s) import successfully, " . $warningRow . " Row(s) failed with warning. " . $errorMessage;
            } else {
                $result = $myDatabase->query("ROLLBACK", MYSQLI_STORE_RESULT);

                return "FAIL|Import failed. " . $errorRow . " Rows(s) can not be imported. Please contact administrator. " . $sql . "";
            }

        }
    } else {
        return 'FAIL|File not exists.';
    }
    // </editor-fold>
}

function excelImportTransactionBACKUP($myDatabase, $fileName = "", $stockpileId = 0, $vendorId = 0, $stockpileContractId = 0, $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1)
{
    // <editor-fold defaultstate="collapsed" desc="function excelImportTransaction($myDatabase, $fileName = "", $stockpileId = 0, $vendorId = 0, $stockpileContractId = 0, $onSheet = 0, $fromRow = 1, $toRow = -1, $fromCol = 0, $toCol = -1)">
    if (file_exists(realpath($fileName))) {
        $fileNameRealPath = realpath($fileName);

        require_once './assets/extensions/PHPExcel.php';
        require_once './assets/extensions/PHPExcel/IOFactory.php';
        require_once './assets/extensions/PHPExcel/Cell/AdvancedValueBinder.php';

        $objReader = PHPExcel_IOFactory::createReader('Excel5');

        $objPHPExcel = $objReader->load($fileNameRealPath);

        $readStartAtRow = 1;
        $totalCols = 28;

        $result = $myDatabase->query("START TRANSACTION", MYSQLI_STORE_RESULT);

//        $sheetCount = $objPHPExcel->getSheetCount();
        $sheetCount = 1;
        for ($onSheet; $onSheet < $sheetCount; $onSheet++) {
            $objPHPExcel->setActiveSheetIndex($onSheet);
            $objWorksheet = $objPHPExcel->getActiveSheet();

            $rows = $objWorksheet->getHighestRow();
            $cols = PHPExcel_Cell::columnIndexFromString($objWorksheet->getHighestColumn());
            if ($toRow == -1)
                $toRow = $rows;
            if ($toCol == -1)
                $toCol = $cols;

            $key = array();
            $columnName = array();
            $getColumnAName = false;

            if ($toCol == $totalCols) {
                for ($row = $fromRow; $row <= $rows; $row++) {
                    for ($i = $fromCol; $i < $cols; $i++) {
                        $columnName[$i] = "column_" . $i;
                        if (isset($columnName[$i])) {
                            if (PHPExcel_Shared_Date::isDateTime($objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row))) {
                                $tmp = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();

                                if (is_numeric($tmp)) {
                                    $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'YYYY-MM-DD');
                                } else {
                                    $key[$row][$i]['value'] = substr($tmp, 6, 4) . "-" . substr($tmp, 3, 2) . "-" . substr($tmp, 0, 2);
                                }
//                                $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'DD-MMM-YYYY');
                            } else {
//                                $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();
                                $check = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();
                                if (substr($check, 0, 1) == "=") {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getCalculatedValue();
                                } else {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue();
                                }
                            }
                        }
                    }
                }

                $getColumnAName = true;
            } else {
                return 'FAIL|Template is wrong.';
            }
        }

        if ($getColumnAName) {
            $temporaryTable = '';
            $temporaryTableWarning = '';
            $temporaryTableDuplicate = '';
            $fieldNames = '';

            foreach ($columnName as $i => $names) {
                if (trim($names) != '') {
                    $temporaryTable .= (($temporaryTable == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableWarning .= (($temporaryTableWarning == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableDuplicate .= (($temporaryTableDuplicate == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $fieldNames .= (($fieldNames == '') ? '' : ', ') . "`" . trim($names) . "`";
                }
            }

            $tempTable = '`tmp_transaction_' . uniqid() . '`';
//            $temporaryTable = 'CREATE TEMPORARY TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableWarning = '`jb_sdw_' . uniqid() . '`';
//            $temporaryTableWarning = 'CREATE TEMPORARY TABLE ' . $tempTableWarning . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableWarning . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableDuplicate = '`jb_sdd_' . uniqid() . '`';
//            $temporaryTableDuplicate = 'CREATE TEMPORARY TABLE ' . $tempTableDuplicate . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableDuplicate . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
            $temporaryTable = 'CREATE TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';

//            return "0|". $temporaryTable;

            $result = $myDatabase->query($temporaryTable, MYSQLI_STORE_RESULT);
            if ($result === false) {
                return 'FAIL|error create table ' . $myDatabase->errorMessage;
            }

            $insertInto = '';
            foreach ($key as $row => $colData) {
                if ($colData[1] != null) {
                    $insertIntoCol = '';
                    foreach ($colData as $col => $colDatas) {
                        if (strpos($colDatas['value'], "NULL") !== false || $colDatas['value'] == '')
                            $insertIntoCol .= (($insertIntoCol == '') ? '' : ', ') . "NULL";
                        else {
                            $insertIntoCol .= (($insertIntoCol == '') ? '' : ', ') . "'" . $colDatas['value'] . "'";
                        }
                    }
                    $insertInto .= (($insertInto == '') ? '' : ', ') . "(" . $insertIntoCol . ")";
//                die("INSERT INTO $temp_table ($fieldnames) VALUES " . $insertinto . ";");
                }
            }

            $insertIntoTemp = "INSERT INTO $tempTable ($fieldNames) VALUES " . $insertInto . ";";

            $result = $myDatabase->query($insertIntoTemp, MYSQLI_STORE_RESULT);
            if ($result === false) {
                return 'FAIL|error insert table ' . $myDatabase->errorMessage;
            }

//            return 'OK|Table created.';

//            $insertIntoWarning = "INSERT INTO $tempTableWarning ($fieldNames) VALUES " . $insertInto . ";";
//
//            $resultWarning = $myDatabase->query($insertIntoWarning, MYSQLI_STORE_RESULT);
//            if($resultWarning === false) {
//                return 'FAIL|error insert warning table '. $myDatabase->errorMessage;
//            }
//
//            $insertIntoDuplicate = "INSERT INTO $tempTableDuplicate ($fieldNames) VALUES " . $insertInto . ";";
//
//            $resultDuplicate = $myDatabase->query($insertIntoDuplicate, MYSQLI_STORE_RESULT);
//            if($resultDuplicate === false) {
//                return 'FAIL|error insert duplicate table '. $myDatabase->errorMessage;
//            }

//            return "0|". $temporaryTable;

            $sqlSelect = "SELECT a.*, DATE_FORMAT(a.column_2, '%y') AS trans_year FROM $tempTable a ORDER BY column_0 ASC;";
            $resultSelect = $myDatabase->query($sqlSelect, MYSQLI_STORE_RESULT);
            $successRow = 0;
            $errorRow = 0;
            $warningRow = 0;
            $counterRow = 0;
            $errorMessage = '';
            $shipmentError = 0;
            $categoryError = 0;
            $rateError = 0;
            $currencyError = 0;
            $insuredError = 0;
            $countryFromError = 0;
            $countryToError = 0;
            $duplicateError = 0;
            $duplicateQuotation = '';
            $shipmentQuotation = '';
            $categoryQuotation = '';
            $rateQuotation = '';
            $currencyQuotation = '';
            $insuredQuotation = '';
            $countryFromQuotation = '';
            $countryToQuotation = '';

            date_default_timezone_set('Asia/Jakarta');

            $date = new DateTime();
            $currentDate = $date->format('d/m/Y H:i:s');

            $sqlStockpile = "SELECT * FROM stockpile WHERE stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sqlStockpile, MYSQLI_STORE_RESULT);
            $rowStockpile = $resultStockpile->fetch_object();
            $freightWeightRule = $rowStockpile->freight_weight_rule;
            $stockpileCode = $rowStockpile->stockpile_code;

            while ($importedData = $resultSelect->fetch_object()) {
                if ($counterRow >= $readStartAtRow) {

                    if (strtoupper($importedData->column_12) == 'IN') {
                        // <editor-fold defaultstate="collapsed" desc="IN">

                        // <editor-fold defaultstate="collapsed" desc="check vendor and supplier">
                        if ($importedData->column_9 != '0' || $importedData->column_9 != 'NONE' || $importedData->column_9 != '' || $importedData->column_9 != '-') {
                            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_name) = UPPER('{$importedData->column_9}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $vendorId = $row->vendor_id;
                                $vendorCode = $row->vendor_code;
                            } else {
                                if ($importedData->column_8 != '0' || $importedData->column_8 != 'NONE' || $importedData->column_8 != '' || $importedData->column_8 != '-') {
                                    $vendorCode = strtoupper(substr($importedData->column_8, 2, 3));
                                } else {
                                    $vendorCode = strtoupper(substr($importedData->column_9, 0, 3));
                                }

                                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, entry_by, entry_date) VALUES ("
                                    . "'{$vendorCode}', '{$importedData->column_9}', "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $vendorId = $myDatabase->insert_id;
                            }
                        }

                        if ($importedData->column_10 != '0' || $importedData->column_10 != 'NONE' || $importedData->column_10 != '' || $importedData->column_10 != '-') {
                            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_name) = UPPER('{$importedData->column_10}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $supplierId = $row->vendor_id;
                            } else {
                                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, entry_by, entry_date) VALUES ("
                                    . "'" . strtoupper(substr($importedData->column_10, 0, 3)) . "', '{$importedData->column_10}', "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $supplierId = $myDatabase->insert_id;
                            }
                        }

                        if ($vendorId == "") {
                            $vendorId = $supplierId;
                        }

                        if ($supplierId == "") {
                            $supplierId = 'NULL';
                        }

                        // </editor-fold>

                        // <editor-fold defaultstate="collapsed" desc="check vehicle and unloading cost">
                        if ($importedData->column_4 != '0' || $importedData->column_4 != 'NONE' || $importedData->column_4 != '' || $importedData->column_4 != '-') {
                            $sql = "SELECT * FROM `vehicle` WHERE UPPER(vehicle_name) = UPPER('{$importedData->column_4}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $vehicleId = $row->vehicle_id;
                            } else {
                                $sql = "INSERT INTO `vehicle` (vehicle_name, entry_by, entry_date) VALUES ("
                                    . "'{$importedData->column_4}', "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $vehicleId = $myDatabase->insert_id;
                            }
                        }

                        if (($importedData->column_22 != '' || $importedData->column_22 != '0' || $importedData->column_22 != '-') && $vehicleId != '') {
                            $sql = "SELECT * FROM unloading_cost WHERE vehicle_id = {$vehicleId} AND stockpile_id = {$stockpileId} AND price_converted = {$importedData->column_22} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $unloadingCostId = $row->unloading_cost_id;
                            } else {
                                $sql = "INSERT INTO `unloading_cost` (vehicle_id, stockpile_id, currency_id, exchange_rate, price, price_converted, entry_by, entry_date) VALUES ("
                                    . "{$vehicleId}, {$stockpileId}, 1, 1, {$importedData->column_22}, {$importedData->column_22}, "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $unloadingCostId = $myDatabase->insert_id;
                            }
                        }

                        if ($vehicleId == "") {
                            $unloadingCostId = 'NULL';
                        }

                        // </editor-fold>

                        // <editor-fold defaultstate="collapsed" desc="check freight and freight cost">
                        if ($importedData->column_6 != '0' || $importedData->column_6 != 'NONE' || $importedData->column_6 != '' || $importedData->column_6 != '-') {
                            $sql = "SELECT * FROM `freight` WHERE UPPER(freight_supplier) = UPPER('{$importedData->column_6}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $freightId = $row->freight_id;
                            } else {
                                $sql = "INSERT INTO `freight` (freight_code, freight_supplier, entry_by, entry_date) VALUES ("
                                    . "'" . strtoupper(substr($importedData->column_6, 0, 3)) . "', '{$importedData->column_6}', "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $freightId = $myDatabase->insert_id;
                            }
                        }

                        if (($importedData->column_21 != '' || $importedData->column_21 != '0' || $importedData->column_21 != '-') && $freightId != '') {
                            // get freight weight
                            if ($freightWeightRule == 0) {
                                if ((float)$importedData->column_16 < (float)$importedData->column_13) {
                                    $freightQuantity = (float)$importedData->column_16;
                                } elseif ((float)$importedData->column_16 > (float)$importedData->column_13) {
                                    $freightQuantity = (float)$importedData->column_13;
                                } else {
                                    $freightQuantity = (float)$importedData->column_13;
                                }
                            } elseif ($freightWeightRule == 1) {
                                $freightQuantity = (float)$importedData->column_13;
                            } elseif ($freightWeightRule == 2) {
                                $freightQuantity = (float)$importedData->column_16;
                            } else {
                                $freightQuantity = (float)$importedData->column_13;
                            }

                            $freightPrice = (float)$importedData->column_21 / $freightQuantity;

                            $sql = "SELECT * FROM freight_cost WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId} AND vendor_id = {$vendorId} AND price_converted = {$freightPrice} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $freightCostId = $row->freight_cost_id;
                            } else {
                                $sql = "INSERT INTO `freight_cost` (freight_id, stockpile_id, vendor_id, currency_id, exchange_rate, price, price_converted, entry_by, entry_date) VALUES ("
                                    . "{$freightId}, {$stockpileId}, {$vendorId}, 1, 1, {$freightPrice}, {$freightPrice}, "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $freightCostId = $myDatabase->insert_id;
                            }
                        }

                        if ($freightId == "") {
                            $freightCostId = 'NULL';
                        }

                        // </editor-fold>

                        //curah
                        $boolNewContract = false;
                        if (strtoupper($importedData->column_24) == 'CURAH') {
                            $contractType = 'C';

                            $totalSend = (float)$importedData->column_13;
                            $totalNetto = (float)$importedData->column_16;
                            $boolNewContract = true;
                        } elseif (strtoupper($importedData->column_24) == 'PKS') {
                            $contractType = 'P';

                            if (($importedData->column_8 != '' || $importedData->column_8 != '0' || $importedData->column_8 != '-' && $importedData->column_8 != 'NONE') &&
                                $importedData->column_11 != '' || $importedData->column_11 != '0' || $importedData->column_11 != '-' && $importedData->column_11 != 'NONE') {
                                $sqlContract = "SELECT * FROM contract WHERE contract_type = '{$contractType}' AND contract_no = '{$importedData->column_11}' AND vendor_id = {$vendorId}";
                                $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);
                                if ($resultContract->num_rows == 1) {
                                    $rowContract = $resultContract->fetch_object();
                                    $contractId = $rowContract->contract_id;

                                    $sqlStockpileContract = "SELECT * FROM stockpile_contract WHERE contract_id = {$contractId} AND stockpile_id = {$stockpileId}";
                                    $resultStockpileContract = $myDatabase->query($sqlStockpileContract, MYSQLI_STORE_RESULT);
                                    if ($resultStockpileContract->num_rows == 1) {
                                        $rowStockpileContract = $resultStockpileContract->fetch_object();
                                        $stockpileContractId = $rowStockpileContract->stockpile_contract_id;
                                    }
                                } else {
                                    $sqlTemp = "SELECT SUM(column_13) AS total_send, SUM(column_16) AS total_netto FROM {$tempTable} WHERE column_8 = '{$importedData->column_8}' "
                                        . "AND column_11 = '{$importedData->column_11}' AND UPPER(column_12) = UPPER('{$importedData->column_12}')";
                                    $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
                                    $rowTemp = $resultTemp->fetch_object();

                                    $totalSend = $rowTemp->total_send;
                                    $totalNetto = $rowTemp->total_netto;
                                    $boolNewContract = true;
                                }
                            } else {
                                $totalSend = (float)$importedData->column_13;
                                $totalNetto = (float)$importedData->column_16;
                                $boolNewContract = true;
                            }
                        }

                        $boolContinue = true;
                        if ($boolNewContract) {
                            $checkPoNo = $contractType . '-' . $vendorCode . '-' . $importedData->trans_year;
                            $sql = "SELECT po_no FROM contract WHERE po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
                            $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($resultPo->num_rows == 1) {
                                $rowPo = $resultPo->fetch_object();
                                $splitPoNo = explode('-', $rowPo->po_no);
                                $nextPoNo = ((float)$splitPoNo[3]) + 1;
                                $poNo = $checkPoNo . '-' . $nextPoNo;
                            } else {
                                $poNo = $checkPoNo . '-1';
                            }

                            if ($totalNetto < $totalSend) {
                                $quantity = $totalNetto;
                            } elseif ($totalNetto > $totalSend) {
                                $quantity = $totalSend;
                            } else {
                                $quantity = $totalSend;
                            }

                            $sql = "INSERT INTO contract (contract_type, po_no, contract_no, vendor_id, currency_id, exchange_rate, "
                                . "price, price_converted, quantity, entry_by, entry_date) VALUES ("
                                . "'{$contractType}', '{$poNo}', '{$importedData->column_11}', {$vendorId}, 1, 1, "
                                . "{$importedData->column_27}, {$importedData->column_27}, {$quantity}, "
                                . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                            if ($result === false) {
                                $boolContinue = false;
                            } else {
                                $contractId = $myDatabase->insert_id;
                                $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                                    . "{$stockpileId}, {$contractId}, {$quantity}, "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if ($result === false) {
                                    $boolContinue = false;
                                } else {
                                    $stockpileContractId = $myDatabase->insert_id;
                                }
                            }
                        }

                        if ($boolContinue) {
                            $shrink = 0;
                            if ((float)$importedData->column_16 < (float)$importedData->column_13) {
                                $quantity = (float)$importedData->column_16;
                                $shrink = $quantity - (float)$importedData->column_13;
                            } elseif ((float)$importedData->column_16 > (float)$importedData->column_13) {
                                $quantity = (float)$importedData->column_13;
                            } else {
                                $quantity = (float)$importedData->column_13;
                            }

                            // get next slip no
                            $checkSlipNo = $stockpileCode . '-' . $importedData->trans_year;
                            $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($resultSlip->num_rows == 0) {
                                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM transaction LIMIT 1";
                                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }

                            $rowSlipNo = $resultSlip->fetch_object();
                            $nextSlipNo = $rowSlipNo->next_id;
                            $slipNo = $checkSlipNo . '-' . $nextSlipNo;

                            // get freight cost
                            if ($freightCostId == 'NULL') {
                                $freightPrice = 0;
                            }

                            // get unloading cost
                            if ($unloadingCostId == 'NULL') {
                                $unloadingPrice = 0;
                            } else {
                                $unloadingPrice = $importedData->column_22;
                            }

                            $unitPrice = $importedData->column_27;

                            // get inventory value
                            $inventoryValue = ($freightQuantity * $freightPrice) + $unloadingPrice + ($quantity * $unitPrice);

                            // insert into transaction
                            $sql = "INSERT INTO `transaction` (slip_no, stockpile_contract_id, transaction_date, loading_date, vehicle_no, labor_id, unloading_cost_id, "
                                . "unloading_date, freight_cost_id, permit_no, transaction_type, vendor_id, send_weight, bruto_weight, tarra_weight, "
                                . "netto_weight, notes, driver, freight_quantity, quantity, shrink, freight_price, unloading_price, unit_price, "
                                . "inventory_value, block, entry_by, entry_date) "
                                . "VALUES ('{$slipNo}', {$stockpileContractId}, STR_TO_DATE('{$importedData->column_2}', '%Y-%m-%d'), STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), "
                                . "'{$importedData->column_3}', 1, {$unloadingCostId}, STR_TO_DATE('{$importedData->column_2}', '%Y-%m-%d'), {$freightCostId}, '{$importedData->column_7}', "
                                . "1, {$supplierId}, {$importedData->column_13}, {$importedData->column_14}, {$importedData->column_15}, {$importedData->column_16}, '{$importedData->column_17}', "
                                . "'{$importedData->column_18}', {$freightQuantity}, {$quantity}, {$shrink}, {$freightPrice}, {$unloadingPrice}, {$unitPrice}, {$inventoryValue}, 'NONE', "
                                . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                            if ($result !== false) {
                                $successRow = $successRow + 1;
                            } else {
                                $errorRow = $errorRow + 1;
                            }
                        } else {
                            $errorRow = $errorRow + 1;
                        }

                        // </editor-fold>
                    } elseif (strtoupper($importedData->column_12) == 'OUT') {
                        // <editor-fold defaultstate="collapsed" desc="OUT">
                        if (($importedData->column_10 != '0' || $importedData->column_10 != 'NONE' || $importedData->column_10 != '' || $importedData->column_10 != '-') &&
                            ($importedData->column_27 != '0' || $importedData->column_27 != 'NONE' || $importedData->column_27 != '' || $importedData->column_27 != '-')) {
                            $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$importedData->column_10}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $customerId = $row->customer_id;
                            } else {
                                $sql = "INSERT INTO `customer` (customer_name, entry_by, entry_date) VALUES ("
                                    . "'{$importedData->column_10}', "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $customerId = $myDatabase->insert_id;
                            }
                        }

                        if ($customerId != '') {
                            $salesNo = strtoupper(str_replace(' ', '', substr($importedData->column_10, 0, 5)));

                            $sql = "SELECT * FROM sales WHERE UPPER(sales_no) = '{$salesNo}' AND customer_id = {$customerId} AND stockpile_id = {$stockpileId} "
                                . "AND currency_id = 1 AND price = {$importedData->column_27} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $salesId = $row->sales_id;
                                $salesBalance = $row->quantity;
                            } else {
                                $sqlTemp = "SELECT count(1) AS total_shipment FROM {$tempTable} WHERE UPPER(column_10) = UPPER('{$importedData->column_10}') "
                                    . "AND UPPER(column_12) = UPPER('{$importedData->column_12}') AND column_27 = {$importedData->column_27}";
                                $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
                                $rowTemp = $resultTemp->fetch_object();
                                $totalShipment = $rowTemp->total_shipment;

                                $sqlTemp = "SELECT MIN(column_5) AS sales_date, SUM(column_13) AS total_quantity FROM {$tempTable} WHERE UPPER(column_10) = UPPER('{$importedData->column_10}') "
                                    . "AND UPPER(column_12) = UPPER('{$importedData->column_12}') AND column_27 = {$importedData->column_27}";
                                $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
                                $rowTemp = $resultTemp->fetch_object();
                                $salesDate = $rowTemp->sales_date;
                                $totalQuantity = $rowTemp->total_quantity;
                                $salesBalance = $totalQuantity;

                                $sql = "INSERT INTO sales (sales_no, sales_date, sales_type, customer_id, stockpile_id, currency_id, exchange_rate, "
                                    . "price, price_converted, quantity, total_shipment, entry_by, entry_date) VALUES ("
                                    . "'{$salesNo}', STR_TO_DATE('{$salesDate}', '%Y-%m-%d'), 1, {$customerId}, {$stockpileId}, 1, 1, "
                                    . "{$importedData->column_27}, {$importedData->column_27}, {$totalQuantity}, {$totalShipment}, "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                $boolContinue = true;
                                if ($result !== false) {
                                    $salesId = $myDatabase->insert_id;

                                    for ($i = 1; $i <= $totalShipment; $i++) {
                                        $shipmentCode = $salesNo . '-' . $i;

                                        $sql = "INSERT INTO `shipment` (shipment_code, sales_id, entry_by, entry_date) VALUES ("
                                            . "'{$shipmentCode}', {$salesId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    }
                                } else {
                                    $boolContinue = false;
                                }
                            }

                            if ($boolContinue) {
                                $sql = "SELECT shipment_id FROM shipment WHERE shipment_code LIKE '{$salesNo}%' AND shipment_status = 0 ORDER BY shipment_code ASC LIMIT 1";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if ($result->num_rows == 1) {
                                    $row = $result->fetch_object();
                                    $shipmentId = $row->shipment_id;

                                    $shrink = (float)$importedData->column_13 - (float)$importedData->column_16;

                                    // get next slip no
                                    $checkSlipNo = $stockpileCode . '-' . $importedData->trans_year;
                                    $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if ($resultSlip->num_rows == 0) {
                                        $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM transaction LIMIT 1";
                                        $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    }

                                    $rowSlipNo = $resultSlip->fetch_object();
                                    $nextSlipNo = $rowSlipNo->next_id;
                                    $slipNo = $checkSlipNo . '-' . $nextSlipNo;

                                    $sql = "INSERT INTO `transaction` (slip_no, product_id, shipment_id, transaction_date, vehicle_no, transaction_type, "
                                        . "send_weight, quantity, shrink, entry_by, entry_date) VALUES ('{$slipNo}', 1, "
                                        . "{$shipmentId}, STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), '{$importedData->column_9}', 2, "
                                        . "{$importedData->column_13}, {$importedData->column_16}, {$shrink}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                    if ($result !== false) {
                                        $transactionId = $myDatabase->insert_id;

                                        // insert into delivery
                                        $sql = "SELECT t.* 
                                                FROM transaction t 
                                                WHERE t.stockpile_contract_id IN (
                                                    SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                                                ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                                                ORDER BY t.unloading_date ASC";
                                        $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        $totalInventoryValue = 0;
                                        if ($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                                            $balanceLeft = (float)$importedData->column_13;
                                            while ($rowDelivery = $resultDelivery->fetch_object()) {
                                                if ($balanceLeft > 0) {
                                                    if ($rowDelivery->delivery_status == 0) {
                                                        if ($balanceLeft >= $rowDelivery->quantity) {
                                                            $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                                            $quantityTaken = $rowDelivery->quantity;
                                                            $percentTaken = 1;
                                                            $deliveryStatus = 1;
                                                        } elseif ($balanceLeft < $rowDelivery->quantity) {
                                                            $quantityTaken = $balanceLeft;
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $balanceLeft = 0;
                                                            $deliveryStatus = 2;
                                                        }
                                                    } elseif ($rowDelivery->delivery_status == 2) {
                                                        $totalTaken = 0;
                                                        $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                                        $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                                        if ($resultTaken !== false && $resultTaken->num_rows == 1) {
                                                            $rowTaken = $resultTaken->fetch_object();
                                                            $totalTaken = $rowTaken->total_taken;
                                                        }

                                                        if ($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                                            $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                                            $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $deliveryStatus = 1;
                                                        } elseif ($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                                            $quantityTaken = $balanceLeft;
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $balanceLeft = 0;
                                                            $deliveryStatus = 2;
                                                        }
                                                    }

                                                    $deliveryValue = $quantityTaken * (float)$importedData->column_27;
                                                    $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                                    $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                                    $percentTaken = $percentTaken * 100;

                                                    $sql = "INSERT INTO delivery (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                                        . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), {$percentTaken}, "
                                                        . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                                    $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                                }
                                            }
                                        }

                                        //$updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                                        $updateInventoryValue = $totalInventoryValue;

                                        $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                        // update shipment
                                        $cogsAmount = $updateInventoryValue;
                                        $invoiceAmount = (float)$importedData->column_16 * (float)$importedData->column_27;
                                        $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), "
                                            . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$importedData->column_16}, shipment_status = 1 "
                                            . "WHERE shipment_id = {$shipmentId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                        $sql = "SELECT COALESCE(SUM(quantity), 0) AS delivered_balance FROM `transaction` 
                                                WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                                                AND transaction_type = 2
                                                AND transaction_id <> {$transactionId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        $row = $result->fetch_object();
                                        $deliveredBalance = $row->delivered_balance;

                                        // update sales
                                        $boolUpdateSales = false;
                                        if ((float)$importedData->column_13 == ($salesBalance - $deliveredBalance)) {
                                            $salesStatus = 1;
                                            $boolUpdateSales = true;
                                        } elseif ((float)$importedData->column_13 < ($salesBalance - $deliveredBalance)) {
                                            $salesStatus = 2;
                                            $boolUpdateSales = true;
                                        }

                                        if ($boolUpdateSales) {
                                            $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        }

                                        $successRow = $successRow + 1;
                                    } else {
                                        $errorRow = $errorRow + 1;
                                    }
                                } else {
                                    $errorRow = $errorRow + 1;
                                }
                            }
                        }

                        // </editor-fold>
                    }

//                    // <editor-fold defaultstate="collapsed" desc="validate shipment date">
//                    $shipmentDate = "";
//                    if(validateDate($importedData->column_2, 'Y-m-d')) {
//                        $shipmentDate = $importedData->column_2;
//                        $shipmentDate2 = $importedData->column_2.' 23:59:59';
//                    } else {
//                        $shipmentError = $shipmentError + 1;
//                        if($shipmentQuotation == '') {
//                            $shipmentQuotation = "'". $importedData->column_1 ."'";
//                        } else {
//                            $shipmentQuotation .= ",'". $importedData->column_1 ."'";
//                        }
//                        $warningRow = $warningRow + 1;
//                        $counterRow++;
//                        continue;
//                    }
//                    // </editor-fold>
//
//                    // <editor-fold defaultstate="collapsed" desc="get insured details">
//                    $insuredName = '';
//                    $insuredAddress = '';
//                    $sql = "SELECT i.*,
//                                CONCAT(CASE WHEN i.title=1 THEN 'Mr. ' WHEN i.title=2 THEN 'Ms. ' WHEN i.title=3 THEN 'Mrs. ' WHEN i.title=4 THEN 'PT. ' WHEN i.title=5 THEN 'CV. ' ELSE '' END  , i.insured_name) as insured_name2
//                            FROM insured i
//                            WHERE i.insured_id = {$insuredId}";
//                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                    if($result !== false && $result->num_rows == 1) {
//                        $row = $result->fetch_object();
//                        $insuredName = $row->insured_name;
//                        $insuredAddress = $row->address1;
//                    } else {
//                        $insuredError = $insuredError + 1;
//                        if($insuredQuotation == '') {
//                            $insuredQuotation = "'". $importedData->column_1 ."'";
//                        } else {
//                            $insuredQuotation .= ",'". $importedData->column_1 ."'";
//                        }
//                        $warningRow = $warningRow + 1;
//                        $counterRow++;
//                        continue;
//                    }
//                    // </editor-fold>
//
//                    // <editor-fold defaultstate="collapsed" desc="get currency id">
//                    $currencyId = "";
//                    $sql = "SELECT cur.currency_id
//                            FROM currency cur
//                            WHERE UPPER(cur.currency_code) = UPPER('{$importedData->column_6}')";
//                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                    if($result !== false && $result->num_rows == 1) {
//                        $row = $result->fetch_object();
//                        $currencyId = $row->currency_id;
//
//                        // <editor-fold defaultstate="collapsed" desc="get exchange rate to company">
//
//                        if($currencyId == $companyCurrencyId) {
//                            $exchangeRate = 1;
//                            $operatorSign = '*';
//                        } else {
//                            $returnExchgRate = getExchangeRateGlobal($currencyId, $companyCurrencyId, $shipmentDate2);
//                            $returnExchgRate = explode("|", $returnExchgRate);
//
//                            $exchangeRate = $returnExchgRate[0];
//                            $operatorSign = $returnExchgRate[1];
//                        }
//
//                        // </editor-fold>
//
//                        // <editor-fold defaultstate="collapsed" desc="get exchange rate to report">
//
//                        if($currencyId == $companyCurrencyIdReport) {
//                            $exchangeRate2Report = 1;
//                            $operatorSign2Report = '*';
//                        } else {
//                            $returnExchgRate = getExchangeRateGlobal($currencyId, $companyCurrencyIdReport, $shipmentDate2);
//                            $returnExchgRate = explode("|", $returnExchgRate);
//
//                            $exchangeRate2Report = $returnExchgRate[0];
//                            $operatorSign2Report = $returnExchgRate[1];
//                        }
//
//                        // </editor-fold>
//                    } else {
//                        $currencyError = $currencyError + 1;
//                        if($currencyQuotation == '') {
//                            $currencyQuotation = "'". $importedData->column_1 ."'";
//                        } else {
//                            $currencyQuotation .= ",'". $importedData->column_1 ."'";
//                        }
//                        $warningRow = $warningRow + 1;
//                        $counterRow++;
//                        continue;
//                    }
//                    // </editor-fold>
//
//                    // <editor-fold defaultstate="collapsed" desc="get category id & rate">
//                    $categoryId = "";
//                    $rate = "";
//                    $sql = "SELECT cat.category_id
//                            FROM category cat
//                            WHERE cat.appl_id = {$_SESSION['appID']} AND cat.category_module = 1
//                            AND UPPER(cat.category_name) = UPPER('{$importedData->column_10}')";
//                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                    if($result !== false && $result->num_rows == 1) {
//                        $row = $result->fetch_object();
//                        $categoryId = $row->category_id;
//
//                        //get rate & premium
//                        if($currencyId != '') {
//                            $sql2 = "SELECT copcr.rate, copcr.currency_id
//                                    FROM client_op_category_rate copcr
//                                    INNER JOIN client_open_policy cop
//                                        ON cop.client_op_id = copcr.client_op_id
//                                    WHERE copcr.client_op_id = {$clientOpId} AND copcr.category_id = {$categoryId}";
//                            $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
//                            if($result2 !== false && $result2->num_rows == 1) {
//                                $rowCatRate = $result2->fetch_object();
//                                $rate = $rowCatRate->rate;
//                                $maxCurrencyId = $rowCatRate->currency_id;
//
//                                // <editor-fold defaultstate="collapsed" desc="get exchange rate to max si">
//
//                                if($currencyId == $maxCurrencyId) {
//                                    $maxExchangeRate = 1;
//                                    $maxOperatorSign = '*';
//                                } else {
//                                    $returnExchgRate = getExchangeRateGlobal($currencyId, $maxCurrencyId);
//                                    $returnExchgRate = explode("|", $returnExchgRate);
//
//                                    $maxExchangeRate = $returnExchgRate[0];
//                                    $maxOperatorSign = $returnExchgRate[1];
//                                }
//
//                                // </editor-fold>
//                            } else {
//                                $rateError = $rateError + 1;
//                                if($rateQuotation == '') {
//                                    $rateQuotation = "'". $importedData->column_1 ."'";
//                                } else {
//                                    $rateQuotation .= ",'". $importedData->column_1 ."'";
//                                }
//                                $warningRow = $warningRow + 1;
//                                $counterRow++;
//                                continue;
//                            }
//                        }
//                    } else {
//                        $categoryError = $categoryError + 1;
//                        if($categoryQuotation == '') {
//                            $categoryQuotation = "'". $importedData->column_1 ."'";
//                        } else {
//                            $categoryQuotation .= ",'". $importedData->column_1 ."'";
//                        }
//                        $warningRow = $warningRow + 1;
//                        $counterRow++;
//                        continue;
//                    }
//                    // </editor-fold>
//
//                    // <editor-fold defaultstate="collapsed" desc="get country id">
//                    $countryFrom = "";
//                    $sql = "SELECT c.country_id
//                            FROM country c
//                            WHERE UPPER(c.name_of_country) = UPPER('{$importedData->column_12}')";
//                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                    if($result !== false && $result->num_rows == 1) {
//                        $row = $result->fetch_object();
//                        $countryFrom = $row->country_id;
//                    } else {
//                        $countryFromError = $countryFromError + 1;
//                        if($countryFromQuotation == '') {
//                            $countryFromQuotation = "'". $importedData->column_1 ."'";
//                        } else {
//                            $countryFromQuotation .= ",'". $importedData->column_1 ."'";
//                        }
//                        $warningRow = $warningRow + 1;
//                        $counterRow++;
//                        continue;
//                    }
//
//                    $countryTo = "";
//                    $sql = "SELECT c.country_id
//                            FROM country c
//                            WHERE UPPER(c.name_of_country) = UPPER('{$importedData->column_14}')";
//                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                    if($result !== false && $result->num_rows == 1) {
//                        $row = $result->fetch_object();
//                        $countryTo = $row->country_id;
//                    } else {
//                        $countryToError = $countryToError + 1;
//                        if($countryToQuotation == '') {
//                            $countryToQuotation = "'". $importedData->column_1 ."'";
//                        } else {
//                            $countryToQuotation .= ",'". $importedData->column_1 ."'";
//                        }
//                        $warningRow = $warningRow + 1;
//                        $counterRow++;
//                        continue;
//                    }
//                    // </editor-fold>
//
//                    if($shipmentDate != '' && $categoryId != '' && $rate != '' && $insuredName != '' && $insuredAddress != '' && $currencyId != '' &&
//                            $countryFrom != '' && $countryTo != '') {
//
//                        // Check duplication
//
//                        $sql = "SELECT * FROM jb_policy WHERE UPPER(quotation_no) = UPPER('{$importedData->column_1}')";
//                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//                        if($result !== false && $result->num_rows == 0) {
//                            // <editor-fold defaultstate="collapsed" desc="Insert new row to next_folio_no">
//                            $folioNo = "";
//                            $sql = "INSERT INTO next_folio_no (entry_date) VALUES (STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
//                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//                            if($result !== false) {
//                                $folioNo = $myDatabase->insert_id;
//                            }
//                            // </editor-fold>
//
//                            $netPremium = round(((float) $importedData->column_11 * ($rate/100)), 2);
//
//                            $sql = "INSERT INTO jb_policy (op_id, quotation_no, policy_folio, business_type, cover_type, client_id, account_executive_id, "
//                                    . "category_id, insured_id, insured_name, insured_address, period_from, period_to, currency_id, exchange_rate, operator_sign, "
//                                    . "exchange_rate_2_report, operator_sign_2_report, brokerage, net_premium_client, closing_date, user_id, entry_date) VALUES ("
//                                    . "$opId, '{$importedData->column_1}', {$folioNo}, 1, {$coverType}, {$clientId}, {$aeId}, {$categoryId}, {$insuredId}, "
//                                    . "'{$insuredName}', '{$insuredAddress}', '{$opPeriodFrom}', '{$opPeriodTo}', {$currencyId}, {$exchangeRate}, '{$operatorSign}', "
//                                    . "{$exchangeRate2Report}, '{$operatorSign2Report}', {$brokerage}, {$netPremium}, '{$shipmentDate}', "
//                                    . "{$_SESSION['userID']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
//                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//                            if($result !== false) {
//                                $jbId = $myDatabase->insert_id;
//
//                                // <editor-fold defaultstate="collapsed" desc="Query Insert to jb_policy_underwriter">
//
//                                $sql = "INSERT INTO jb_policy_underwriter (jb_id, type, underwriter_id, share) "
//                                        . "SELECT {$jbId}, type, underwriter_id, share FROM open_policy_underwriter "
//                                        . "WHERE op_id = (SELECT op_id FROM client_open_policy WHERE client_op_id = {$clientOpId})";
//                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//                                // </editor-fold>
//
//
//                                $sql = "INSERT INTO jb_policy_detail (jb_id, shipment_date, country_of_origin, city_of_origin, country_of_destination, "
//                                        . "city_of_destination, invoice_no, awb_no, mawb_no, taken_from, original_currency, exchange_rate, "
//                                        . "operator_sign, exchg_rate_max_si, operator_sign_max_si, total_shipment_value, primary_insurance_value, "
//                                        . "howden_insured_value, rate, premium, notes) VALUES ("
//                                        . "{$jbId}, '{$shipmentDate}', {$countryFrom}, '{$importedData->column_13}', {$countryTo}, '{$importedData->column_15}', "
//                                        . "'{$importedData->column_4}', '{$importedData->column_3}', '{$importedData->column_5}', '{$importedData->column_8}', "
//                                        . "{$currencyId}, {$exchangeRate}, '{$operatorSign}', {$maxExchangeRate}, '{$maxOperatorSign}', "
//                                        . "{$importedData->column_7}, {$importedData->column_9}, {$importedData->column_11}, {$rate}, {$netPremium}, "
//                                        . "'{$importedData->column_16}')";
//                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//                                if($result !== false) {
//                                    // Insert to general_progress
//                                    $sql = "INSERT INTO general_progress (jb_id, progress_id, entry_by, entry_date) VALUES ("
//                                            . "{$jbId}, (SELECT progress_id FROM progress WHERE progress_code = '710' AND appl_id = ". $_SESSION['appID'] ." AND progress_module = 1), ". $_SESSION['userID'] .", STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
//                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//                                    $successRow = $successRow + 1;
//                                } else {
//                                    $sql = "DELETE FROM jb_policy WHERE jb_id = {$jbId}";
//                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                                    $sql = "DELETE FROM jb_policy_underwriter WHERE jb_id = {$jbId}";
//                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                                    $errorRow = $errorRow + 1;
//                                }
//                            } else {
//                                $errorRow = $errorRow + 1;
//                            }
//                        } else {
//                            $duplicateError = $duplicateError + 1;
//                            $warningRow = $warningRow + 1;
//                            if($duplicateQuotation == '') {
//                                $duplicateQuotation = "'". $importedData->column_1 ."'";
//                            } else {
//                                $duplicateQuotation .= ",'". $importedData->column_1 ."'";
//                            }
//                        }
//
//                    }
                }
                $counterRow++;
            }

            if (($successRow + $warningRow) == ($counterRow - 1) && $errorRow == 0) {
                $result = $myDatabase->query("COMMIT", MYSQLI_STORE_RESULT);

                $sql = "DROP TABLE {$tempTable}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

//                if($duplicateError > 0) {
//                    $errorMessage .= '<br/>'. $duplicateError . ' Row(s) failed to be import due to duplication data.';
//                }
//                if($shipmentError > 0) {
//                    $errorMessage .= '<br/>'. $shipmentError . ' Row(s)failed to be import due to invalid shipment date.';
//                }
//                if($categoryError > 0) {
//                    $errorMessage .= '<br/>'. $categoryError .' Row(s) failed to be import due to coverage information was not identify.';
//                }
//                if($rateError > 0) {
//                    $errorMessage .= '<br/>'. $rateError .' Row(s) failed to be import due to rate was not identify.';
//                }
//                if($currencyError > 0) {
//                    $errorMessage .= '<br/>'. $currencyError .' Row(s) failed to be import due to currency information was not identify.';
//                }
//                if($insuredError > 0) {
//                    $errorMessage .= '<br/>'. $insuredError .' Row(s) failed to be import due to insured information was not identify.';
//                }
//                if($countryFromError > 0) {
//                    $errorMessage .= '<br/>'. $countryFromError .' Row(s) failed to be import due to country information was not identify.';
//                }
//                if($countryToError > 0) {
//                    $errorMessage .= '<br/>'. $countryToError .' Row(s) failed to be import due to country information was not identify.';
//                }
//
//                // prepare warning data
//                $fileLink = '';
//                if($warningRow > 0 || $duplicateError > 0) {
//                    // <editor-fold defaultstate="collapsed" desc="Define Style for excel">
//                    $styleArray = array(
//                        'font' => array(
//                            'bold' => true
//                        ),
//                        'alignment' => array(
//                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
//                        ),
//                        'borders' => array(
//                            'top' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            )
//                        ),
//                        'fill' => array(
//                            'type' => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
//                            'rotation' => 90,
//                            'startcolor' => array(
//                                'argb' => 'FFA0A0A0'
//                            ),
//                            'endcolor' => array(
//                                'argb' => 'FFFFFFFF'
//                            )
//                        )
//                    );
//
//                    $styleArray1 = array(
//                        'alignment' => array(
//                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
//                        )
//                    );
//
//                    $styleArray2 = array(
//                        'font' => array(
//                            'bold' => true,
//                            'size' => 14
//                        ),
//                        'alignment' => array(
//                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
//                        )
//                    );
//
//                    $styleArray3 = array(
//                        'font' => array(
//                            'bold' => true
//                        )
//                    );
//
//                    $styleArray4 = array(
//                        'font' => array(
//                            'bold' => true
//                        ),
//                        'alignment' => array(
//                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
//                        ),
//                        'borders' => array(
//                            'top' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'left' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'right' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'bottom' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            )
//                        )
//                    );
//
//                    $styleArray5 = array(
//                        'alignment' => array(
//                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT
//                        ),
//                        'borders' => array(
//                            'top' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'left' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'right' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'bottom' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            )
//                        )
//                    );
//
//                    $styleArray6 = array(
//                        'alignment' => array(
//                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
//                        ),
//                        'borders' => array(
//                            'top' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'left' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'right' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'bottom' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            )
//                        )
//                    );
//
//                    $styleArray7 = array(
//                        'alignment' => array(
//                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
//                        ),
//                        'borders' => array(
//                            'top' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'left' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'right' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'bottom' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            )
//                        )
//                    );
//
//                    $styleArray8 = array(
//                        'font' => array(
//                            'bold' => true
//                        ),
//                        'alignment' => array(
//                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
//                        )
//                    );
//
//                    $styleArray9 = array(
//                        'fill' => array(
//                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
//                            'color' => array('rgb' => 'FFFF00')
//                        )
//                    );
//                    // </editor-fold>
//
//                    $fileName = "JB Warning Import " . str_replace(" ", "-", $_SESSION['userName']) . " " . date("Ymd-His") . ".xls";
//                    $onSheet = 0;
//                    $lastColumn = "Q";
//
//                    // <editor-fold defaultstate="collapsed" desc="Create Excel and Define Warning Data's Header">
//                    $objPHPExcel2 = new PHPExcel();
//                    PHPExcel_Cell::setValueBinder(new PHPExcel_Cell_AdvancedValueBinder());
//
//                    $objPHPExcel2->setActiveSheetIndex($onSheet);
//                    $objPHPExcel2->getActiveSheet()->getSheetView()->setZoomScale(75);
//                    $objPHPExcel2->getActiveSheet()->getPageSetup()->setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);
//                    $objPHPExcel2->getDefaultStyle()->getFont()->setName('Arial');
//                    $objPHPExcel2->getDefaultStyle()->getFont()->setSize(12);
//                    $objPHPExcel2->getActiveSheet()->getDefaultRowDimension()->setRowHeight(15);
//
//                    $objPHPExcel2->getActiveSheet()->setTitle("Import Warning");
//
//                    $rowActive = 1;
//                    $headerRow = $rowActive;
//                    $bodyRowEnd = 0;
//                    $objPHPExcel2->getActiveSheet()->setCellValue("A{$rowActive}", "No");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("B{$rowActive}", "Ref. No.");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("C{$rowActive}", "Date");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("D{$rowActive}", "AWB No.");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("E{$rowActive}", "Invoice No.");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("F{$rowActive}", "Delivery No. (MAWB No.)");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("G{$rowActive}", "Currency");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("H{$rowActive}", "Total Value");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("I{$rowActive}", "Carrier");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("J{$rowActive}", "Primary Insurance with Carrier");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("K{$rowActive}", "Coverage");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("L{$rowActive}", "Insured Value");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("M{$rowActive}", "Country From");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("N{$rowActive}", "City From");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("O{$rowActive}", "Country To");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("P{$rowActive}", "City To");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("Q{$rowActive}", "Remarks");
//    //                $objPHPExcel2->getActiveSheet()->setCellValue("R{$rowActive}", "Warning Notes");
//
//                    $objPHPExcel2->getActiveSheet()->getStyle("A{$rowActive}:{$lastColumn}{$rowActive}")->applyFromArray($styleArray4);
//
//                    // </editor-fold>
//
//                    // <editor-fold defaultstate="collapsed" desc="Query warning data">
//                    $sqlWarning = "";
//                    $conditionWarning = "";
//                    if($shipmentQuotation != '') {
//                        $conditionWarning .= $shipmentQuotation;
//                    }
//
//                    if($categoryQuotation != '') {
//                        if($conditionWarning != '') {
//                            $conditionWarning .= " , ";
//                        }
//                        $conditionWarning .= $categoryQuotation;
//                    }
//
//                    if($rateQuotation != '') {
//                        if($conditionWarning != '') {
//                            $conditionWarning .= " , ";
//                        }
//                        $conditionWarning .= $rateQuotation;
//                    }
//
//                    if($currencyQuotation != '') {
//                        if($conditionWarning != '') {
//                            $conditionWarning .= " , ";
//                        }
//                        $conditionWarning .= $currencyQuotation;
//                    }
//
//                    if($insuredQuotation != '') {
//                        if($conditionWarning != '') {
//                            $conditionWarning .= " , ";
//                        }
//                        $conditionWarning .= $insuredQuotation;
//                    }
//
//                    if($countryFromQuotation != '') {
//                        if($conditionWarning != '') {
//                            $conditionWarning .= " , ";
//                        }
//                        $conditionWarning .= $countryFromQuotation;
//                    }
//
//                    if($countryToQuotation != '') {
//                        if($conditionWarning != '') {
//                            $conditionWarning .= " , ";
//                        }
//                        $conditionWarning .= $countryToQuotation;
//                    }
//                    // </editor-fold>
//
//                    if($conditionWarning != '') {
//                        // <editor-fold defaultstate="collapsed" desc="Create Excel Warning Data Body">
//
//                        $sqlWarning = "SELECT * FROM $tempTable WHERE column_1 IN ({$conditionWarning})";
//                        $resultWarning = $myDatabase->query($sqlWarning, MYSQLI_STORE_RESULT);
//
//                        $rowNo = 1;
//                        while($rowWarning = $resultWarning->fetch_object()) {
//                            $rowActive++;
//                            $objPHPExcel2->getActiveSheet()->setCellValue("A{$rowActive}", $rowNo);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("B{$rowActive}", $rowWarning->column_1);
//        //                    $objPHPExcel2->getActiveSheet()->setCellValue("C{$rowActive}", $rowWarning->column_2);
//                            $objPHPExcel2->getActiveSheet()->getCell("C{$rowActive}")->setValueExplicit(PHPExcel_Shared_Date::stringToExcel($rowWarning->column_2), PHPExcel_Cell_DataType::TYPE_NUMERIC);
//                            $checkShipmentDate = strpos($shipmentQuotation, $rowWarning->column_1);
//                            if($checkShipmentDate !== false) {
//                                $objPHPExcel2->getActiveSheet()->getStyle("C{$rowActive}")->applyFromArray($styleArray9);
//                            }
//                            $objPHPExcel2->getActiveSheet()->setCellValue("D{$rowActive}", $rowWarning->column_3);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("E{$rowActive}", $rowWarning->column_4);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("F{$rowActive}", $rowWarning->column_5);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("G{$rowActive}", $rowWarning->column_6);
//                            $checkCurrency = strpos($currencyQuotation, $rowWarning->column_1);
//                            if($checkCurrency !== false) {
//                                $objPHPExcel2->getActiveSheet()->getStyle("G{$rowActive}")->applyFromArray($styleArray9);
//                            }
//                            $objPHPExcel2->getActiveSheet()->setCellValue("H{$rowActive}", $rowWarning->column_7);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("I{$rowActive}", $rowWarning->column_8);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("J{$rowActive}", $rowWarning->column_9);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("K{$rowActive}", $rowWarning->column_10);
//                            $checkCoverage = strpos($categoryQuotation, $rowWarning->column_1);
//                            if($checkCoverage !== false) {
//                                $objPHPExcel2->getActiveSheet()->getStyle("K{$rowActive}")->applyFromArray($styleArray9);
//                            }
//                            $checkRate = strpos($rateQuotation, $rowWarning->column_1);
//                            if($checkRate !== false) {
//                                $objPHPExcel2->getActiveSheet()->getStyle("K{$rowActive}")->applyFromArray($styleArray9);
//                            }
//                            $objPHPExcel2->getActiveSheet()->setCellValue("L{$rowActive}", $rowWarning->column_11);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("M{$rowActive}", $rowWarning->column_12);
//                            $checkFrom = strpos($countryFromQuotation, $rowWarning->column_1);
//                            if($checkFrom !== false) {
//                                $objPHPExcel2->getActiveSheet()->getStyle("M{$rowActive}")->applyFromArray($styleArray9);
//                            }
//                            $objPHPExcel2->getActiveSheet()->setCellValue("N{$rowActive}", $rowWarning->column_13);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("O{$rowActive}", $rowWarning->column_14);
//                            $checkTo = strpos($countryToQuotation, $rowWarning->column_1);
//                            if($checkTo !== false) {
//                                $objPHPExcel2->getActiveSheet()->getStyle("O{$rowActive}")->applyFromArray($styleArray9);
//                            }
//                            $objPHPExcel2->getActiveSheet()->setCellValue("P{$rowActive}", $rowWarning->column_15);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("Q{$rowActive}", $rowWarning->column_16);
//
//                            $rowNo++;
//                        }
//                        $bodyRowEnd = $rowActive;
//
//                        // </editor-fold>
//                    }
//
//                    // <editor-fold defaultstate="collapsed" desc="Formating Excel Warning data">
//                    // Set column width
//                    for ($temp = ord("A"); $temp <= ord("Z"); $temp++) {
//                        $objPHPExcel2->getActiveSheet()->getColumnDimension(chr($temp))->setAutoSize(true);
//                        $objPHPExcel2->getActiveSheet()->getColumnDimension(chr($temp))->setAutoSize(true);
//                    }
//
//                    // Set format date in cell
//                    if ($bodyRowEnd > $headerRow) {
//                        $objPHPExcel2->getActiveSheet()->getStyle("C" . ($headerRow + 1) . ":C{$bodyRowEnd}")->getNumberFormat()->setFormatCode("M/D/YYYY");
//                    }
//
//                    // Set number format for Amount
//                    $objPHPExcel2->getActiveSheet()->getStyle("H" . ($headerRow + 1) . ":H{$bodyRowEnd}")->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED1);
//                    $objPHPExcel2->getActiveSheet()->getStyle("J" . ($headerRow + 1) . ":J{$bodyRowEnd}")->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED1);
//                    $objPHPExcel2->getActiveSheet()->getStyle("L" . ($headerRow + 1) . ":L{$bodyRowEnd}")->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED1);
//
//                    // Set border for table
//                    $objPHPExcel2->getActiveSheet()->getStyle("A" . ($headerRow) . ":{$lastColumn}{$bodyRowEnd}")->getBorders()->getAllBorders()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
//
//                    // </editor-fold>
//
//                    // <editor-fold defaultstate="collapsed" desc="Create Excel and Define Duplication Data's Header">
//
//                    $objPHPExcel2->createSheet(1);
//                    // Rename sheet
////                    $objPHPExcel2->getSheet(1)->setTitle('Duplication');
//                    $objPHPExcel2->setActiveSheetIndex(1);
//                    $objPHPExcel2->getActiveSheet()->getSheetView()->setZoomScale(75);
//                    $objPHPExcel2->getActiveSheet()->getPageSetup()->setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);
//                    $objPHPExcel2->getDefaultStyle()->getFont()->setName('Arial');
//                    $objPHPExcel2->getDefaultStyle()->getFont()->setSize(12);
//                    $objPHPExcel2->getActiveSheet()->getDefaultRowDimension()->setRowHeight(15);
//
//                    $objPHPExcel2->getActiveSheet()->setTitle("Duplication");
//
//                    $rowActive = 1;
//                    $headerRow = $rowActive;
//                    $bodyRowEnd = 0;
//                    $objPHPExcel2->getActiveSheet()->setCellValue("A{$rowActive}", "No");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("B{$rowActive}", "Ref. No.");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("C{$rowActive}", "Date");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("D{$rowActive}", "AWB No.");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("E{$rowActive}", "Invoice No.");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("F{$rowActive}", "Delivery No. (MAWB No.)");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("G{$rowActive}", "Currency");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("H{$rowActive}", "Total Value");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("I{$rowActive}", "Carrier");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("J{$rowActive}", "Primary Insurance with Carrier");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("K{$rowActive}", "Coverage");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("L{$rowActive}", "Insured Value");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("M{$rowActive}", "Country From");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("N{$rowActive}", "City From");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("O{$rowActive}", "Country To");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("P{$rowActive}", "City To");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("Q{$rowActive}", "Remarks");
//    //                $objPHPExcel2->getActiveSheet()->setCellValue("R{$rowActive}", "Warning Notes");
//
//                    $objPHPExcel2->getActiveSheet()->getStyle("A{$rowActive}:{$lastColumn}{$rowActive}")->applyFromArray($styleArray4);
//
//                    // </editor-fold>
//
//                    // <editor-fold defaultstate="collapsed" desc="Query duplication data">
//                    $sqlDuplicate = "";
//                    if($duplicateQuotation != '') {
//                        $sqlDuplicate .= "SELECT * FROM $tempTable WHERE column_1 IN ({$duplicateQuotation})";
//                    }
//                    // </editor-fold>
//
//                    if($sqlDuplicate != '') {
//                        // <editor-fold defaultstate="collapsed" desc="Create Excel Duplication Data Body">
//
//                        $resultDuplicate = $myDatabase->query($sqlDuplicate, MYSQLI_STORE_RESULT);
//
//                        $rowNo = 1;
//                        while($rowDuplicate = $resultDuplicate->fetch_object()) {
//                            $rowActive++;
//                            $objPHPExcel2->getActiveSheet()->setCellValue("A{$rowActive}", $rowNo);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("B{$rowActive}", $rowDuplicate->column_1);
//        //                    $objPHPExcel2->getActiveSheet()->setCellValue("C{$rowActive}", $rowDuplicate->column_2);
//                            $objPHPExcel2->getActiveSheet()->getCell("C{$rowActive}")->setValueExplicit(PHPExcel_Shared_Date::stringToExcel($rowDuplicate->column_2), PHPExcel_Cell_DataType::TYPE_NUMERIC);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("D{$rowActive}", $rowDuplicate->column_3);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("E{$rowActive}", $rowDuplicate->column_4);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("F{$rowActive}", $rowDuplicate->column_5);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("G{$rowActive}", $rowDuplicate->column_6);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("H{$rowActive}", $rowDuplicate->column_7);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("I{$rowActive}", $rowDuplicate->column_8);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("J{$rowActive}", $rowDuplicate->column_9);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("K{$rowActive}", $rowDuplicate->column_10);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("L{$rowActive}", $rowDuplicate->column_11);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("M{$rowActive}", $rowDuplicate->column_12);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("N{$rowActive}", $rowDuplicate->column_13);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("O{$rowActive}", $rowDuplicate->column_14);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("P{$rowActive}", $rowDuplicate->column_15);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("Q{$rowActive}", $rowDuplicate->column_16);
//
//                            $rowNo++;
//                        }
//                        $bodyRowEnd = $rowActive;
//
//                        // </editor-fold>
//                    }
//
//                    // <editor-fold defaultstate="collapsed" desc="Formating Excel Duplication data">
//                    // Set column width
//                    for ($temp = ord("A"); $temp <= ord("Z"); $temp++) {
//                        $objPHPExcel2->getActiveSheet()->getColumnDimension(chr($temp))->setAutoSize(true);
//                        $objPHPExcel2->getActiveSheet()->getColumnDimension(chr($temp))->setAutoSize(true);
//                    }
//
//                    // Set format date in cell
//                    if ($bodyRowEnd > $headerRow) {
//                        $objPHPExcel2->getActiveSheet()->getStyle("C" . ($headerRow + 1) . ":C{$bodyRowEnd}")->getNumberFormat()->setFormatCode("M/D/YYYY");
//                    }
//
//                    // Set number format for Amount
//                    $objPHPExcel2->getActiveSheet()->getStyle("H" . ($headerRow + 1) . ":H{$bodyRowEnd}")->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED1);
//                    $objPHPExcel2->getActiveSheet()->getStyle("J" . ($headerRow + 1) . ":J{$bodyRowEnd}")->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED1);
//                    $objPHPExcel2->getActiveSheet()->getStyle("L" . ($headerRow + 1) . ":L{$bodyRowEnd}")->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED1);
//
//                    // Set border for table
//                    $objPHPExcel2->getActiveSheet()->getStyle("A" . ($headerRow) . ":{$lastColumn}{$bodyRowEnd}")->getBorders()->getAllBorders()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
//
//                    // </editor-fold>
//
//                    $objPHPExcel2->setActiveSheetIndex($onSheet);
//
//                    // <editor-fold defaultstate="collapsed" desc="Save Excel and share link">
//                    ob_end_clean();
//                    header('Content-Type: application/vnd.ms-excel');
//                    header('Content-Disposition: attachment;filename="' . $fileName . '"');
//                    header('Cache-Control: max-age=0');
//                    $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel2, 'Excel5');
//                    $objWriter->save('./import/'.$fileName);
//                    $fileLink = './import/'.$fileName;
//                    // </editor-fold>
//                }
//
//                if($fileLink != '') {
//                    $errorMessage .= '<br/>For more detail failed import data, please click this <a href="'. $fileLink .'" target="_blank" style="font-weight: bold; color: red;">link</a> to download and overview it again.';
//                }

                return "OK|" . $successRow . " Row(s) import successfully, " . $warningRow . " Row(s) failed with warning. " . $errorMessage;
            } else {
                $result = $myDatabase->query("ROLLBACK", MYSQLI_STORE_RESULT);

                return "FAIL|Import failed. " . $errorRow . " Rows(s) can not be imported. Please contact administrator. ";
            }
        }
    } else {
        return 'FAIL|File not exists.';
    }
    // </editor-fold>
}

function validateDate($date, $format = 'Y-m-d H:i:s')
{
    $d = DateTime::createFromFormat($format, $date);
    return $d && $d->format($format) == $date;
}
function insertReportGL_payment($myDatabase, $source, $invoiceId = "NULL", $invoiceNotimId = "NULL", $i_id = "NULL", $contractId = "NULL", $transactionId = "NULL", $paymentId = "NULL", $jurnalId = "NULL", $accrueId = "NULL", $returnId = "NULL")
{
//echo 'BB';
    $whereCondition = '';
	$adjustmentId = "NULL";

    if ($accrueId != 'NULL') {
		
		$boolReverse = false;
		$sqlReverse = "SELECT * FROM invoice_detail WHERE prediction_detail_id = {$accrueId} ";
				$resultReverse = $myDatabase->query($sqlReverse, MYSQLI_STORE_RESULT);
			if ($resultReverse->num_rows == 1) {
                   $boolReverse = true;
              }
			  
		$sqlCancel = "SELECT * FROM accrue_prediction_detail WHERE prediction_detail_id = {$accrueId} ";
				$resultCancel = $myDatabase->query($sqlCancel, MYSQLI_STORE_RESULT);
			if ($resultCancel->num_rows == 1) {
				$rowCancel = $resultCancel->fetch_object();
                   $journalStatus = $rowCancel->journal_status;
              }
			  
		if(!$boolReverse && $journalStatus != 2){
			$sqlDelete = "UPDATE gl_report SET regenerate = 1 WHERE accrue_id = {$accrueId} AND general_ledger_module = 'JURNAL ACCRUE'";
			$result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);
		}
		
		if($boolReverse){
            $whereCondition .= "AND gl.accrue_id = {$accrueId} AND gl.general_ledger_module = 'JURNAL ACCRUE' AND gl.description = 'Reverse Journal'";
		}else if ($journalStatus == 2){
		    $whereCondition .= "AND gl.accrue_id = {$accrueId} AND gl.general_ledger_module = 'JURNAL ACCRUE' AND gl.description = 'Cancel Journal'";	
		}else{
		    $whereCondition .= "AND gl.accrue_id = {$accrueId} AND gl.general_ledger_module = 'JURNAL ACCRUE'";	
		}
		

    }else if ($contractId != 'NULL' && $source != 'STOCK TRANSIT' && $source == 'CONTRACT ADJUSTMENT') {
		
		
		$sql = "SELECT * FROM contract_adjustment WHERE adj_id = {$contractId}";
        $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($resultTaken !== false && $resultTaken->num_rows == 1) {
            $rowTaken = $resultTaken->fetch_object();

            $contractId = $rowTaken->contract_id;
            $adjustmentId = $rowTaken->adj_id;


        }

        $sqlDelete = "DELETE FROM gl_report WHERE contract_id = {$contractId} AND general_ledger_module = 'CONTRACT ADJUSTMENT'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.contract_id = {$contractId} AND gl.general_ledger_module = 'CONTRACT ADJUSTMENT'";

    } elseif ($contractId != 'NULL' && $source == 'STOCK TRANSIT' && $source != 'CONTRACT ADJUSTMENT') {

        $sqlDelete = "DELETE FROM gl_report WHERE contract_id = {$contractId} AND general_ledger_module = 'STOCK TRANSIT'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.contract_id = {$contractId} AND gl.general_ledger_module = 'STOCK TRANSIT'";

    } elseif ($contractId != 'NULL' && $source != 'STOCK TRANSIT' && $source != 'CONTRACT ADJUSTMENT') {

        $sqlDelete = "DELETE FROM gl_report WHERE contract_id = {$contractId} AND general_ledger_module = 'CONTRACT'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.contract_id = {$contractId} AND gl.general_ledger_module = 'CONTRACT'";

    } elseif ($jurnalId != 'NULL') {

        $sqlDelete = "DELETE FROM gl_report WHERE jurnal_id = {$jurnalId} AND general_ledger_module = 'JURNAL MEMORIAL'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.jurnal_id = {$jurnalId} AND gl.general_ledger_module = 'JURNAL MEMORIAL'";

    } elseif ($invoiceId != 'NULL' && $source == 'RETURN INVOICE') {

        $sqlDelete = "DELETE FROM gl_report WHERE invoice_id = {$invoiceId} AND general_ledger_module = 'RETURN INVOICE'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.invoice_id = {$invoiceId} AND gl.general_ledger_module = 'RETURN INVOICE'";

    } elseif ($invoiceId != 'NULL' && $source == 'INVOICE DETAIL') {

        $sqlDelete = "DELETE FROM gl_report WHERE invoice_id = {$invoiceId} AND general_ledger_module = 'INVOICE DETAIL'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.invoice_id = {$invoiceId} AND gl.general_ledger_module = 'INVOICE DETAIL'";

    } elseif ($transactionId != 'NULL' && $source == 'NOTA TIMBANG2') {

        $sqlDelete = "DELETE FROM gl_report WHERE transaction_id = {$transactionId} AND general_ledger_module = 'NOTA TIMBANG2'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.transaction_id = {$transactionId} AND gl.general_ledger_module = 'NOTA TIMBANG2'";

    } elseif ($transactionId != 'NULL' && $source == 'NOTA TIMBANG') {

        $sqlDelete = "DELETE FROM gl_report WHERE transaction_id = {$transactionId} AND general_ledger_module = 'NOTA TIMBANG'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        // $procedure  = "CALL GLreport_NotaTimbang({$transactionId}, 'NOTA TIMBANG')";
        // $resultYE = $myDatabase->query($procedure, MYSQLI_STORE_RESULT);
        $whereCondition .= "AND gl.transaction_id = {$transactionId} AND gl.general_ledger_module = 'NOTA TIMBANG'";

    } elseif ($paymentId != 'NULL' && $source == 'PAYMENT') {

        $sqlDelete = "DELETE FROM gl_report WHERE payment_id = {$paymentId} AND general_ledger_module = 'PAYMENT'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.payment_id = {$paymentId} AND gl.general_ledger_module = 'PAYMENT'";

    } elseif ($paymentId != 'NULL' && $source == 'PAYMENT ADMIN') {

        $sqlDelete = "DELETE FROM gl_report WHERE payment_id = {$paymentId} AND general_ledger_module = 'PAYMENT ADMIN'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.payment_id = {$paymentId} AND gl.general_ledger_module = 'PAYMENT ADMIN'";

    } elseif ($paymentId != 'NULL' && $source == 'PETTY CASH') {

        $sqlDelete = "DELETE FROM gl_report WHERE payment_id = {$paymentId} AND general_ledger_module = 'PETTY CASH'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.payment_id = {$paymentId} AND gl.general_ledger_module = 'PETTY CASH'";

    } elseif ($paymentId != 'NULL' && $source == 'RETURN PAYMENT') {

        $sqlDelete = "DELETE FROM gl_report WHERE payment_id = {$paymentId} AND general_ledger_module = 'RETURN PAYMENT'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.payment_id = {$paymentId} AND gl.general_ledger_module = 'RETURN PAYMENT'";

    } elseif ($invoiceNotimId != 'NULL' && $source == 'INVOICE NOTIM') {
		//echo 'AA';
        $sqlDelete = "DELETE FROM gl_report WHERE invoice_notim_id = {$invoiceNotimId} AND general_ledger_module = 'INVOICE NOTIM'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.invoice_notim_id = {$invoiceNotimId} AND gl.general_ledger_module = 'INVOICE NOTIM'";

    } elseif ($invoiceNotimId != 'NULL' && $source == 'RETURN INVOICE NOTIM') {
		//echo 'AA';
        $sqlDelete = "DELETE FROM gl_report WHERE invoice_notim_id = {$invoiceNotimId} AND general_ledger_module = 'RETURN INVOICE NOTIM'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.invoice_notim_id = {$invoiceNotimId} AND gl.general_ledger_module = 'RETURN INVOICE NOTIM'";

    }
//  if($invoiceNotimId == 1000){
    $sqla = "SELECT gl.*,
            (SELECT `amount` FROM  payment p WHERE p.payment_id = gl.payment_id  ) AS amountPayment , 
            (SELECT `pph_journal` FROM  payment p WHERE p.payment_id = gl.payment_id  ) AS pph_journal ,
            (SELECT `ppn_journal` FROM  payment p WHERE p.payment_id = gl.payment_id  ) AS ppn_journal,
            (SELECT `account_no` FROM  account a WHERE a.account_id = gl.account_id) AS account_no,
            (SELECT `account_name` FROM  account a WHERE a.account_id = gl.account_id) AS account_name,
            
            CASE WHEN gl.general_ledger_transaction_type = 1 THEN 'IN'
                WHEN gl.general_ledger_transaction_type = 2 THEN 'OUT'
                ELSE '' END AS general_ledger_transaction_type2,
                        
            CASE WHEN gl.general_ledger_for = 1 THEN 'PKS Kontrak'
                WHEN gl.general_ledger_for = 2 THEN 'PKS Curah'
                WHEN gl.general_ledger_for = 3 THEN 'Freight Cost'
                WHEN gl.general_ledger_for = 4 THEN 'Unloading Cost'
                WHEN gl.general_ledger_for = 5 THEN 'Other'
                WHEN gl.general_ledger_for = 6 THEN 'Internal Transfer'
                WHEN gl.general_ledger_for = 7 THEN 'Retur'
                WHEN gl.general_ledger_for = 8 THEN 'Umum, HO'
                WHEN gl.general_ledger_for = 9 THEN 'Sales'
                WHEN gl.general_ledger_for = 10 THEN 'Invoice'
                WHEN gl.general_ledger_for = 11 THEN 'Jurnal Memorial'
                WHEN gl.general_ledger_for = 13 THEN 'Handling Cost'
                WHEN gl.general_ledger_for = 14 THEN 'Freight Cost Shrink'
                WHEN gl.general_ledger_for = 15 THEN 'Job Costing'
                ELSE '' END AS general_ledger_for2,
                
            CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT s.stockpile_name FROM stockpile_contract sc INNER JOIN stockpile s ON s.stockpile_id = sc.stockpile_id
        WHERE sc.contract_id = gl.contract_id AND sc.quantity > 0 ORDER BY sc.`stockpile_contract_id` ASC LIMIT 1)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT s.stockpile_name FROM stockpile s LEFT JOIN invoice i ON i.stockpileId = s.stockpile_id LEFT JOIN invoice_detail id ON i.`invoice_id` = id.`invoice_id` WHERE id.invoice_detail_id = gl.invoice_id)
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) !=0 THEN (SELECT s.stockpile_name FROM stockpile s WHERE s.stockpile_code = (SELECT SUBSTR(slip_no,1,3) FROM TRANSACTION WHERE transaction_id = gl.transaction_id))
                WHEN gl.transaction_id IS NOT NULL AND gl.account_id != 8 AND gl.account_id != 51 AND gl.general_ledger_for = 2 AND (SELECT return_shipment FROM contract c WHERE c.contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id  = (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.transaction_id)))
                THEN (SELECT stockpile_name FROM stockpile WHERE stockpile_id = 
                    (SELECT stockpile_id FROM sales WHERE sales_id = (SELECT sales_id FROM shipment WHERE shipment_id = 
                    (SELECT return_shipment_id FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = 
                    (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.transaction_id))))))
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14)
                THEN (SELECT s.stockpile_name FROM stockpile_contract sc INNER JOIN stockpile s ON s.stockpile_id = sc.stockpile_id INNER JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id WHERE gl.transaction_id = t.transaction_id)
                
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT s.stockpile_name FROM stockpile s INNER JOIN sales sl ON s.stockpile_id = sl.stockpile_id INNER JOIN shipment sh ON sh.sales_id = sl.sales_id INNER JOIN `transaction` t ON t.shipment_id = sh.shipment_id WHERE gl.transaction_id = t.transaction_id) 
                WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 5 OR gl.general_ledger_for = 6 OR gl.general_ledger_for = 8 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 10 OR gl.general_ledger_for = 12 OR gl.general_ledger_for = 13) THEN (SELECT s.stockpile_name FROM 					stockpile s INNER JOIN payment p ON p.stockpile_location = s.stockpile_id WHERE gl.payment_id = p.payment_id)
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT s.stockpile_name FROM stockpile s LEFT JOIN gl_detail jd ON jd.stockpile_id = s.stockpile_id WHERE jd.gl_detail_id = gl.jurnal_id) 
                WHEN gl.accrue_id IS NOT NULL THEN (SELECT a.stockpile_name FROM stockpile a LEFT JOIN accrue_prediction b ON a.stockpile_id = b.stockpile_id LEFT JOIN accrue_prediction_detail c ON b.prediction_id = c.prediction_id WHERE c.prediction_detail_id = gl.accrue_id LIMIT 1)
                WHEN gl.invoice_notim_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13) 
                        THEN (SELECT s.stockpile_name FROM stockpile s INNER JOIN pengajuan_payment sl ON s.stockpile_id = sl.stockpile_id INNER JOIN invoice_notim sh ON sh.idpp = sl.idpp WHERE sh.inv_notim_id = gl.invoice_notim_id) 
                ELSE '' END AS stockpile_name2,
                    
            CASE WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) 
                THEN (SELECT t.slip_no FROM `transaction` t WHERE t.transaction_id = gl.transaction_id)
                WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13)
                THEN (SELECT t.slip_no FROM `transaction` t WHERE t.transaction_id = gl.t_id)
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT t.slip_no FROM `transaction` t LEFT JOIN gl_add jm ON jm.transaction_id = t.transaction_id LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id) 
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT t.slip_no FROM `transaction` t LEFT JOIN payment_cash pc ON pc.transaction_id = t.transaction_id WHERE pc.payment_cash_id = gl.cash_id)
             WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 2 
                        THEN (SELECT t.slip_no FROM TRANSACTION t 
                INNER JOIN payment_curah pc ON pc.transaction_id = t.transaction_id WHERE pc.transaction_id = gl.t_id)    
			WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 3 
                        THEN (SELECT t.slip_no FROM TRANSACTION t 
                INNER JOIN payment_oa po ON po.transaction_id = t.transaction_id WHERE po.transaction_id = gl.t_id)   
			WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 4
                        THEN (SELECT t.slip_no FROM TRANSACTION t 
                INNER JOIN payment_ob pb ON pb.transaction_id = t.transaction_id WHERE pb.transaction_id = gl.t_id)  
			WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 13
                        THEN (SELECT t.slip_no FROM TRANSACTION t 
                INNER JOIN payment_handling ph ON ph.transaction_id = t.transaction_id WHERE ph.transaction_id = gl.t_id)                  
            ELSE '' END AS slip_no, 
                                    
            CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT vendor_name FROM vendor WHERE vendor_id = (SELECT vendor_id FROM contract WHERE contract_id = gl.contract_id))
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) != 0 THEN 'ADJUSTMENT AUDIT'	
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2) THEN (SELECT vendor_name FROM vendor WHERE vendor_id = (SELECT c.vendor_id FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id WHERE t.transaction_id = gl.transaction_id))
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 3 OR gl.general_ledger_for = 14) THEN (SELECT `freight_supplier` FROM freight f WHERE f.freight_id = (SELECT freight_id FROM freight_cost WHERE freight_cost_id = (SELECT freight_cost_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`)))
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT vh.`vendor_handling_name` FROM vendor_handling vh WHERE vh.vendor_handling_id = (SELECT vendor_handling_id FROM vendor_handling_cost WHERE handling_cost_id = (SELECT handling_cost_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`)))
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT labor_name FROM labor WHERE labor_id = (SELECT labor_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`))
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT cust.customer_name FROM customer cust WHERE customer_id = (SELECT customer_id FROM sales WHERE sales_id = (SELECT sales_id FROM shipment WHERE shipment_id = (SELECT shipment_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`))))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT vendor_name FROM vendor WHERE vendor_id = (SELECT c.vendor_id FROM contract c LEFT JOIN stockpile_contract sc ON c.`contract_id` = sc.`contract_id` LEFT JOIN payment p ON sc.`stockpile_contract_id` = p.`stockpile_contract_id` WHERE p.`payment_id` = gl.payment_id))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 2 THEN (SELECT vendor_name FROM vendor WHERE vendor_id = (SELECT vendor_id FROM payment WHERE payment_id = gl.payment_id))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT `freight_supplier` FROM freight f WHERE f.freight_id = (SELECT freight_id FROM payment WHERE payment_id = gl.`payment_id`))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT vh.`vendor_handling_name` FROM vendor_handling vh WHERE vh.vendor_handling_id = (SELECT vendor_handling_id FROM payment WHERE payment_id = gl.`payment_id`))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT labor_name FROM labor WHERE labor_id = (SELECT labor_id FROM `payment` WHERE payment_id = gl.`payment_id`))   
                WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 5 OR gl.general_ledger_for = 8) THEN (SELECT gv.general_vendor_name FROM general_vendor gv WHERE gv.general_vendor_id = (SELECT p.general_vendor_id FROM payment p WHERE p.payment_id = gl.payment_id))                
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 6 THEN (SELECT ap.account_name FROM account ap WHERE ap.account_id = (SELECT p.account_id FROM payment p WHERE p.payment_id = gl.payment_id ))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT cust.customer_name FROM customer cust WHERE customer_id = (SELECT customer_id FROM sales WHERE sales_id = (SELECT sales_id FROM payment  WHERE payment_id = gl.payment_id)))				
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT DISTINCT(gv.general_vendor_name) FROM general_vendor gv LEFT JOIN invoice_detail id ON gv.general_vendor_id = id.general_vendor_id LEFT JOIN invoice i ON i.invoice_id = id.invoice_id LEFT JOIN payment p ON p.invoice_id = i.invoice_id WHERE p.payment_id = gl.payment_id LIMIT 1)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT DISTINCT(gv.general_vendor_name) FROM general_vendor gv LEFT JOIN payment_cash pc ON gv.general_vendor_id = pc.general_vendor_id WHERE pc.payment_id = gl.payment_id LIMIT 1)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT general_vendor_name FROM general_vendor  WHERE general_vendor_id = (SELECT general_vendor_id FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id))
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 AND (SELECT general_vendor_id FROM gl_add WHERE gl_add_id = (SELECT gl_add_id FROM gl_detail WHERE gl_detail_id = gl.jurnal_id)) IS NOT NULL THEN (SELECT general_vendor_name FROM general_vendor  WHERE general_vendor_id = (SELECT general_vendor_id FROM payment  WHERE payment_id = gl.payment_id))
                WHEN gl.accrue_id IS NOT NULL THEN (SELECT a.general_vendor_name FROM general_vendor a LEFT JOIN accrue_prediction_detail b ON a.general_vendor_id = b.general_vendor_id WHERE b.prediction_detail_id = gl.accrue_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 2 THEN (SELECT vendor_name FROM vendor WHERE vendor_id = (SELECT vendor_id FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id))
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT `freight_supplier` FROM freight f WHERE f.freight_id = (SELECT freightId FROM invoice_notim WHERE inv_notim_id = gl.`invoice_notim_id`))
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT vh.`vendor_handling_name` FROM vendor_handling vh WHERE vh.vendor_handling_id = (SELECT vendorHandlingId FROM invoice_notim WHERE inv_notim_id = gl.`invoice_notim_id`))
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT labor_name FROM labor WHERE labor_id = (SELECT laborId FROM `invoice_notim` WHERE inv_notim_id = gl.`invoice_notim_id`))   
                ELSE '' END AS supplier_name,
                
                CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT vendor_code FROM vendor WHERE vendor_id = (SELECT vendor_id FROM contract WHERE contract_id = gl.contract_id))
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) != 0 THEN 'ADJ'	
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2) THEN (SELECT vendor_code FROM vendor WHERE vendor_id = (SELECT c.vendor_id FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id WHERE t.transaction_id = gl.transaction_id))
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 3 OR gl.general_ledger_for = 14) THEN (SELECT `freight_code` FROM freight f WHERE f.freight_id = (SELECT freight_id FROM freight_cost WHERE freight_cost_id = (SELECT freight_cost_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`)))
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT vh.`vendor_handling_code` FROM vendor_handling vh WHERE vh.vendor_handling_id = (SELECT vendor_handling_id FROM vendor_handling_cost WHERE handling_cost_id = (SELECT handling_cost_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`)))
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT labor_code FROM labor WHERE labor_id = (SELECT labor_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`))
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT cust.customer_code FROM customer cust WHERE customer_id = (SELECT customer_id FROM sales WHERE sales_id = (SELECT sales_id FROM shipment WHERE shipment_id = (SELECT shipment_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`))))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT vendor_code FROM vendor WHERE vendor_id = (SELECT c.vendor_id FROM contract c LEFT JOIN stockpile_contract sc ON c.`contract_id` = sc.`contract_id` LEFT JOIN payment p ON sc.`stockpile_contract_id` = p.`stockpile_contract_id` WHERE p.`payment_id` = gl.payment_id))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 2 THEN (SELECT vendor_code FROM vendor WHERE vendor_id = (SELECT vendor_id FROM payment WHERE payment_id = gl.payment_id))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT `freight_code` FROM freight f WHERE f.freight_id = (SELECT freight_id FROM payment WHERE payment_id = gl.`payment_id`))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT vh.`vendor_handling_code` FROM vendor_handling vh WHERE vh.vendor_handling_id = (SELECT vendor_handling_id FROM payment WHERE payment_id = gl.`payment_id`))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT labor_code FROM labor WHERE labor_id = (SELECT labor_id FROM `payment` WHERE payment_id = gl.`payment_id`))   
                WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 5 OR gl.general_ledger_for = 8) THEN (SELECT gv.general_vendor_code FROM general_vendor gv WHERE gv.general_vendor_id = (SELECT p.general_vendor_id FROM payment p WHERE p.payment_id = gl.payment_id))                
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 6 THEN (SELECT ap.account_name FROM account ap WHERE ap.account_id = (SELECT p.account_id FROM payment p WHERE p.payment_id = gl.payment_id ))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT cust.customer_code FROM customer cust WHERE customer_id = (SELECT customer_id FROM sales WHERE sales_id = (SELECT sales_id FROM payment  WHERE payment_id = gl.payment_id)))				
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT DISTINCT(gv.general_vendor_code) FROM general_vendor gv LEFT JOIN invoice_detail id ON gv.general_vendor_id = id.general_vendor_id LEFT JOIN invoice i ON i.invoice_id = id.invoice_id LEFT JOIN payment p ON p.invoice_id = i.invoice_id WHERE p.payment_id = gl.payment_id LIMIT 1)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT DISTINCT(gv.general_vendor_code) FROM general_vendor gv LEFT JOIN payment_cash pc ON gv.general_vendor_id = pc.general_vendor_id WHERE pc.payment_id = gl.payment_id LIMIT 1)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT general_vendor_code FROM general_vendor  WHERE general_vendor_id = (SELECT general_vendor_id FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id))
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 AND (SELECT general_vendor_id FROM gl_add WHERE gl_add_id = (SELECT gl_add_id FROM gl_detail WHERE gl_detail_id = gl.jurnal_id)) IS NOT NULL THEN (SELECT general_vendor_code FROM general_vendor  WHERE general_vendor_id = (SELECT general_vendor_id FROM payment  WHERE payment_id = gl.payment_id))
                WHEN gl.accrue_id IS NOT NULL THEN (SELECT a.general_vendor_code FROM general_vendor a LEFT JOIN accrue_prediction_detail b ON a.general_vendor_id = b.general_vendor_id WHERE b.prediction_detail_id = gl.accrue_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 2 THEN (SELECT vendor_code FROM vendor WHERE vendor_id = (SELECT vendor_id FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id))
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT freight_code FROM freight WHERE freight_id = (SELECT freightId FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id))
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT labor_code FROM labor WHERE labor_id = (SELECT laborId FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id))
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT vendor_handling_code FROM vendor_handling WHERE vendor_handling_id = (SELECT vendorHandlingId FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id))                    
                ELSE '' END AS supplier_code,
                        
            CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT contract_no FROM contract WHERE contract_id = gl.contract_id)
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14)
                THEN  (SELECT contract_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.transaction_id))) 
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT sales_no FROM sales WHERE sales_id = (SELECT sales_id FROM shipment WHERE shipment_id = (SELECT shipment_id FROM `transaction` WHERE transaction_id = gl.transaction_id)))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 1 THEN  (SELECT contract_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM payment WHERE payment_id = gl.payment_id))) 
                WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 13) THEN (SELECT contract_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.t_id)))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT c.contract_no FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id LEFT JOIN payment_cash pc ON pc.transaction_id = t.transaction_id WHERE pc.payment_cash_id = gl.cash_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 4 THEN  (SELECT contract_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM payment WHERE payment_id = gl.payment_id))) 
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT sales_no FROM sales WHERE sales_id = (SELECT sales_id FROM shipment WHERE shipment_id = (SELECT shipment_id FROM `transaction` WHERE transaction_id = gl.transaction_id)))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT i.entry_date FROM invoice i LEFT JOIN payment p ON i.invoice_id = p.invoice_id WHERE p.payment_id = gl.payment_id), '%Y-%m-%d') < '2018-09-24' THEN (SELECT c.contract_no FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN invoice i ON i.`po_id` = sc.`stockpile_contract_id` LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT i.entry_date FROM invoice i LEFT JOIN payment p ON i.invoice_id = p.invoice_id WHERE p.payment_id = gl.payment_id), '%Y-%m-%d') >= '2018-09-24' THEN (SELECT c.contract_no FROM contract c LEFT JOIN invoice_detail id ON c.contract_id = id.poId LEFT JOIN invoice i ON i.invoice_id = id.invoice_id LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id LIMIT 1)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT entry_date FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id), '%Y-%m-%d') < '2018-09-24'  THEN (SELECT c.contract_no FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN invoice i ON i.`po_id` = sc.`stockpile_contract_id` LEFT JOIN invoice_detail id ON i.`invoice_id` = id.invoice_id WHERE id.`invoice_detail_id` = gl.invoice_id)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT entry_date FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id), '%Y-%m-%d') >= '2018-09-24' THEN (SELECT c.contract_no FROM contract c LEFT JOIN invoice_detail id ON c.contract_id = id.poId WHERE id.`invoice_detail_id` = gl.invoice_id)
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT c.contract_no FROM contract c LEFT JOIN gl_add jm ON jm.contract_id = c.contract_id LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13) THEN (SELECT contract_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.t_id)))
                ELSE '' END AS contract_no,

            CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT po_no FROM contract WHERE contract_id = gl.contract_id)
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14)
                THEN (SELECT po_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.transaction_id))) 
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT po_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM payment WHERE payment_id = gl.payment_id)))
                WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 13) THEN (SELECT po_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.t_id)))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT c.po_no FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id LEFT JOIN payment_cash pc ON pc.transaction_id = t.transaction_id WHERE pc.payment_cash_id = gl.cash_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT po_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM payment WHERE payment_id = gl.payment_id)))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT i.entry_date FROM invoice i LEFT JOIN payment p ON i.invoice_id = p.invoice_id WHERE p.payment_id = gl.payment_id), '%Y-%m-%d') < '2018-09-24' THEN (SELECT c.po_no FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN invoice i ON i.`po_id` = sc.`stockpile_contract_id` LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT i.entry_date FROM invoice i LEFT JOIN payment p ON i.invoice_id = p.invoice_id WHERE p.payment_id = gl.payment_id), '%Y-%m-%d') >= '2018-09-24' THEN (SELECT c.po_no FROM contract c LEFT JOIN invoice_detail id ON c.contract_id = id.poId LEFT JOIN invoice i ON i.invoice_id = id.invoice_id LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id LIMIT 1)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT entry_date FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id), '%Y-%m-%d') < '2018-09-24'  THEN (SELECT c.po_no FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN invoice i ON i.`po_id` = sc.`stockpile_contract_id` LEFT JOIN invoice_detail id ON i.`invoice_id` = id.invoice_id WHERE id.`invoice_detail_id` = gl.invoice_id)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT entry_date FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id), '%Y-%m-%d') >= '2018-09-24' THEN (SELECT c.po_no FROM contract c LEFT JOIN invoice_detail id ON c.contract_id = id.poId WHERE id.`invoice_detail_id` = gl.invoice_id)
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT c.po_no FROM contract c LEFT JOIN gl_add jm ON jm.contract_id = c.contract_id LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
                ELSE '' END AS po_no,
                    
            CASE WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 12 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) THEN (SELECT invoice_no FROM payment WHERE payment_id = gl.payment_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.invoice_no FROM invoice i LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.invoice_no FROM invoice i LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id)
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT i.invoice_no FROM invoice i LEFT JOIN gl_add jm ON jm.invoice_id = i.invoice_id LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 )THEN (SELECT i.inv_notim_no FROM invoice_notim i WHERE i.inv_notim_id = gl.invoice_notim_id)
                ELSE '' END AS invoice_no,
                    
            CASE WHEN gl.payment_id IS NOT NULL THEN (SELECT tax_invoice FROM payment WHERE payment_id = gl.payment_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.invoice_tax FROM invoice i LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.invoice_tax FROM invoice i LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id
                WHERE id.invoice_detail_id = gl.invoice_id ORDER BY id.invoice_detail_id DESC LIMIT 1)
                WHEN gl.invoice_notim_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 )THEN (SELECT pp.tax_invoice  FROM  pengajuan_payment pp INNER JOIN invoice_notim i ON i.idpp = pp.idpp WHERE i.inv_notim_id = gl.invoice_notim_id)
                ELSE '' END AS tax_invoice,
                        
            CASE WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 12 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) THEN (SELECT invoice_no FROM payment WHERE payment_id = gl.payment_id)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.invoice_no2 FROM invoice i LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id
                WHERE id.invoice_detail_id = gl.invoice_id ORDER BY id.invoice_detail_id DESC LIMIT 1)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.invoice_no2 FROM invoice i LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT i.invoice_no2 FROM invoice i LEFT JOIN gl_add jm ON jm.invoice_id = i.invoice_id LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 )THEN (SELECT pp.invoice_no  FROM  pengajuan_payment pp INNER JOIN invoice_notim i ON i.idpp = pp.idpp WHERE i.inv_notim_id = gl.invoice_notim_id)
                ELSE '' END AS invoice_no_2,
                        
            CASE WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 ) THEN (SELECT i.status_payment FROM invoice_notim i WHERE i.inv_notim_id = gl.invoice_id)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.payment_status FROM invoice i LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id
                WHERE id.invoice_detail_id = gl.invoice_id)
                ELSE '' END AS invoice_payment,
                    
            CASE WHEN gl.payment_id IS NOT NULL THEN (SELECT cheque_no FROM payment WHERE payment_id = gl.payment_id)
                ELSE '' END AS cheque_no,
                        
            CASE WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 5 OR gl.general_ledger_for = 8) THEN  (SELECT shipment_no FROM shipment WHERE shipment_id = (SELECT shipment_id FROM payment WHERE payment_id = gl.payment_id)) 
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT GROUP_CONCAT(sh2.shipment_no) FROM payment_detail pd2 LEFT JOIN shipment sh2 ON sh2.shipment_id = pd2.shipment_id WHERE pd2.payment_id = gl.payment_id GROUP BY pd2.payment_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT DISTINCT(sh.shipment_no) FROM shipment sh LEFT JOIN invoice_detail id ON sh.shipment_id = id.shipment_id LEFT JOIN invoice i ON i.invoice_id = id.invoice_id LEFT JOIN payment p ON p.invoice_id = i.invoice_id WHERE p.payment_id = gl.payment_id LIMIT 1)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT DISTINCT(sh.shipment_no) FROM shipment sh LEFT JOIN payment_cash pc ON sh.shipment_id = pc.shipment_id WHERE pc.payment_cash_id = gl.cash_id LIMIT 1)
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) !=0 THEN (SELECT sh.shipment_no FROM shipment sh LEFT JOIN adjustment_audit aa ON sh.shipment_id = aa.shipment_id LEFT JOIN `transaction` t ON t.adjustmentAudit_id = audit_id WHERE t.transaction_id = gl.transaction_id)
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT mutasi_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT mh.kode_mutasi FROM mutasi_header mh LEFT JOIN TRANSACTION t ON t.mutasi_id = mh.mutasi_header_id WHERE t.transaction_id = gl.transaction_id)
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT c.return_shipment FROM contract c LEFT JOIN stockpile_contract sc ON c.`contract_id` = sc.`contract_id` LEFT JOIN TRANSACTION t ON t.`stockpile_contract_id` = sc.`stockpile_contract_id` WHERE t.`transaction_id` = gl.transaction_id LIMIT 1) IS NOT NULL THEN (SELECT sh.shipment_no FROM shipment sh LEFT JOIN contract c ON sh.shipment_id = c.return_shipment_id LEFT JOIN stockpile_contract sc ON sc.contract_id = c.contract_id LEFT JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id WHERE t.transaction_id = gl.transaction_id LIMIT 1)
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT shipment_no FROM shipment WHERE shipment_id = (SELECT shipment_id FROM `transaction` WHERE transaction_id = gl.transaction_id ))
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 AND (SELECT mutasi_detail_id FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id) IS NOT NULL THEN (SELECT mh.kode_mutasi FROM mutasi_header mh LEFT JOIN mutasi_detail md ON mh.mutasi_header_id = md.mutasi_header_id LEFT JOIN invoice_detail id ON id.mutasi_detail_id = md.mutasi_detail_id WHERE id.invoice_detail_id = gl.invoice_id LIMIT 1)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT shipment_no FROM shipment WHERE shipment_id = (SELECT shipment_id FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id))
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT sh.shipment_no FROM shipment sh LEFT JOIN gl_add jm ON jm.shipment_id = sh.shipment_id LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
                WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT mh.kode_mutasi FROM mutasi_header mh LEFT JOIN mutasi_contract mc ON mh.mutasi_header_id = mc.mutasi_header_id LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = mc.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)  
                WHEN gl.accrue_id IS NOT NULL THEN (SELECT a.shipment_no FROM shipment a LEFT JOIN accrue_prediction b ON a.shipment_id = b.shipment_id LEFT JOIN accrue_prediction_detail c ON b.prediction_id = c.prediction_id WHERE c.prediction_detail_id = gl.accrue_id LIMIT 1)	
                ELSE '' END AS shipment_code,
                        
            CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.general_ledger_module = 'CONTRACT ADJUSTMENT' THEN (SELECT adjustment FROM contract_adjustment WHERE adj_id = gl.description)
                WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT quantity FROM contract WHERE contract_id = gl.contract_id) 
                WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.general_ledger_module = 'STOCK TRANSIT' THEN (SELECT st.send_weight FROM stock_transit st LEFT JOIN stockpile_contract sc ON st.stockpile_contract_id = sc.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.account_id = 8 THEN (SELECT quantity FROM `transaction` WHERE transaction_id = gl.transaction_id)
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.account_id = 52 THEN (SELECT shrink FROM `transaction` WHERE transaction_id = gl.transaction_id) 
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.account_id = 147 THEN (SELECT send_weight FROM `transaction` WHERE transaction_id = gl.transaction_id) 
                WHEN gl.transaction_id IS NOT NULL AND(gl.general_ledger_for = 2 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 9) THEN (SELECT quantity FROM `transaction` WHERE transaction_id = gl.transaction_id)
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT freight_quantity FROM `transaction` WHERE transaction_id = gl.transaction_id) 
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT handling_quantity FROM `transaction` WHERE transaction_id = gl.transaction_id) 
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT pc.qty FROM payment_cash pc WHERE pc.`payment_cash_id` = gl.cash_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT quantity FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM payment WHERE payment_id = gl.payment_id ))) 
                WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 4) THEN (SELECT COALESCE(SUM(t2.quantity), 0) FROM `transaction` t2 WHERE t2.transaction_id = gl.t_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT COALESCE(SUM(t2.freight_quantity), 0) FROM `transaction` t2 WHERE t2.transaction_id = gl.t_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT COALESCE(SUM(t2.handling_quantity), 0) FROM `transaction` t2 WHERE t2.hc_payment_id = gl.payment_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT COALESCE(SUM(sh2.quantity), 0) FROM payment_detail pd2 LEFT JOIN shipment sh2 ON sh2.shipment_id = pd2.shipment_id WHERE pd2.payment_id = gl.payment_id)
                WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 5 OR gl.general_ledger_for = 6 OR gl.general_ledger_for = 8) THEN (SELECT qty FROM payment WHERE payment_id = gl.payment_id ) 
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT jm.quantity FROM gl_add jm LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT qty FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id)
                WHEN gl.accrue_id IS NOT NULL THEN (SELECT b.qty FROM accrue_prediction_detail b WHERE b.prediction_detail_id = gl.accrue_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 2 THEN (SELECT qty FROM payment_curah WHERE transaction_id = gl.t_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT qty FROM payment_oa WHERE transaction_id = gl.t_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT qty FROM payment_handling WHERE transaction_id = gl.t_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT qty FROM payment_ob WHERE transaction_id = gl.t_id)
                ELSE '' END AS quantity,
                        
            CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT price_converted FROM contract WHERE contract_id = gl.contract_id) 
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 9) THEN (SELECT unit_price FROM `transaction` WHERE transaction_id = gl.transaction_id) 
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT freight_price FROM `transaction` WHERE transaction_id = gl.transaction_id)  
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT GROUP_CONCAT(vhc.price_converted) FROM vendor_handling_cost vhc LEFT JOIN `transaction` t ON vhc.handling_cost_id = t.handling_cost_id WHERE t.transaction_id = gl.transaction_id)  
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT unloading_price FROM `transaction` WHERE transaction_id = gl.transaction_id) 
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT pc.price FROM payment_cash pc WHERE pc.`payment_cash_id` = gl.cash_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT GROUP_CONCAT(vhc.price_converted) FROM vendor_handling_cost vhc LEFT JOIN vendor_handling vh ON vh.vendor_handling_id = vhc.vendor_handling_id LEFT JOIN payment p ON p.vendor_handling_id = vh.vendor_handling_id WHERE p.payment_id = gl.payment_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT GROUP_CONCAT(t2.freight_price) FROM `transaction` t2 WHERE t2.transaction_id = gl.t_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 2 THEN (SELECT GROUP_CONCAT(t2.unit_price) FROM `transaction` t2 WHERE t2.transaction_id = gl.t_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT price_converted FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM payment WHERE payment_id = gl.payment_id ))) 
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT GROUP_CONCAT(t2.unit_price) FROM `transaction` t2 WHERE t2.payment_id = gl.payment_id GROUP BY t2.payment_id)
                WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 5 OR gl.general_ledger_for = 6 OR gl.general_ledger_for = 8) THEN (SELECT price FROM payment WHERE payment_id = gl.payment_id )
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT price FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id) 
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT jm.price FROM gl_add jm LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
                WHEN gl.accrue_id IS NOT NULL THEN (SELECT b.priceMT FROM accrue_prediction_detail b WHERE b.prediction_detail_id = gl.accrue_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 2 THEN (SELECT price FROM payment_curah WHERE transaction_id = gl.t_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT price FROM payment_oa WHERE transaction_id = gl.t_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT price FROM payment_handling WHERE transaction_id = gl.t_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT price FROM payment_ob WHERE transaction_id = gl.t_id)                    
                ELSE '' END AS price,
                        
            CASE WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT notes FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.remarks FROM invoice i LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT pc.notes FROM payment_cash pc WHERE pc.`payment_cash_id` = gl.cash_id)
                WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_module = 'CONTRACT ADJUSTMENT' THEN (SELECT adjustment_notes FROM contract_adjustment WHERE adj_id = gl.description) 
                WHEN gl.contract_id IS NOT NULL THEN (SELECT notes FROM contract WHERE contract_id = gl.contract_id) 
                WHEN gl.transaction_id IS NOT NULL THEN (SELECT CONCAT(slip_retur,' - ',notes) FROM `transaction` WHERE transaction_id = gl.transaction_id)    
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT jd.notes FROM gl_detail jd WHERE jd.gl_detail_id = gl.jurnal_id)
                WHEN gl.accrue_id IS NOT NULL THEN (SELECT b.cost_name FROM accrue_prediction_detail b WHERE b.prediction_detail_id = gl.accrue_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 )
                            THEN (SELECT pp.remarks  FROM  pengajuan_payment pp INNER JOIN invoice_notim i ON i.idpp = pp.idpp WHERE i.inv_notim_id = gl.invoice_notim_id)
                ELSE (SELECT remarks FROM payment WHERE payment_id = gl.payment_id )  END AS remarks,
                                            
            CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.general_ledger_module = 'CONTRACT ADJUSTMENT' THEN DATE_FORMAT((SELECT adjustment_date FROM contract_adjustment WHERE adj_id = gl.description), '%Y-%m-%d')
                WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 AND (SELECT contract_status FROM contract WHERE contract_id = gl.contract_id) = 2 THEN DATE_FORMAT((SELECT reject_date FROM contract WHERE contract_id = gl.contract_id), '%Y-%m-%d')
                WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN DATE_FORMAT((SELECT entry_date FROM contract WHERE contract_id = gl.contract_id), '%Y-%m-%d')
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) 
                            THEN (SELECT unloading_date FROM `transaction` WHERE transaction_id = gl.transaction_id)
                WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 5 OR gl.general_ledger_for = 6 OR gl.general_ledger_for = 7 OR gl.general_ledger_for = 8 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 10 OR gl.general_ledger_for = 12 OR gl.general_ledger_for = 13) 
                            AND gl.general_ledger_module = 'RETURN PAYMENT' THEN DATE_FORMAT((SELECT edit_date FROM payment WHERE payment_id = gl.payment_id),'%Y-%m-%d')
                WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 5 OR gl.general_ledger_for = 6 OR gl.general_ledger_for = 7 OR gl.general_ledger_for = 8 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 10 OR gl.general_ledger_for = 12 OR gl.general_ledger_for = 13) 
                                THEN (SELECT payment_date FROM payment WHERE payment_id = gl.payment_id )
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT DATE_FORMAT(i.input_date, '%Y-%m-%d') FROM invoice i LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 AND gl.general_ledger_module = 'RETURN INVOICE' THEN (SELECT DATE_FORMAT(i.sync_date, '%Y-%m-%d') FROM invoice i LEFT JOIN invoice_detail id ON id.invoice_id = i.invoice_id WHERE id.invoice_detail_id = gl.invoice_id)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT DATE_FORMAT(i.invoice_date, '%Y-%m-%d') FROM invoice i LEFT JOIN invoice_detail id ON id.invoice_id = i.invoice_id WHERE id.invoice_detail_id = gl.invoice_id)
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT DATE_FORMAT(jm.gl_add_date, '%Y-%m-%d') FROM gl_add jm LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
                WHEN gl.accrue_id IS NOT NULL AND gl.description = 'Reverse Journal' THEN (SELECT a.invoice_date FROM invoice a LEFT JOIN invoice_detail b ON a.`invoice_id` = b.`invoice_id` LEFT JOIN accrue_prediction_detail c ON b.`prediction_detail_id` = c.`prediction_detail_id` WHERE c.`prediction_detail_id` = gl.accrue_id LIMIT 1)
                WHEN gl.accrue_id IS NOT NULL AND gl.description = 'Cancel Journal' THEN (SELECT cancel_jurnal_date FROM accrue_prediction_detail WHERE prediction_detail_id = gl.accrue_id)
                WHEN gl.accrue_id IS NOT NULL THEN (SELECT LAST_DAY(b.PEB_Date) FROM accrue_prediction b LEFT JOIN accrue_prediction_detail c ON b.prediction_id = c.prediction_id WHERE c.prediction_detail_id = gl.accrue_id LIMIT 1)
                WHEN gl.invoice_notim_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13) AND gl.general_ledger_module = 'INVOICE NOTIM' 
                                THEN (SELECT DATE_FORMAT(pp.invoice_date, '%Y-%m-%d') FROM pengajuan_payment pp 
                                    INNER JOIN invoice_notim ino ON pp.idpp = ino.idpp WHERE ino.inv_notim_id = gl.invoice_notim_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13) AND gl.general_ledger_module = 'RETURN INVOICE NOTIM' 
                                THEN (SELECT DATE_FORMAT(inv.return_date, '%Y-%m-%d') FROM invoice_notim inv WHERE inv.inv_notim_id = gl.invoice_notim_id)                    
                ELSE '' END AS gl_date,
                        
            CASE WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 5 OR gl.general_ledger_for = 6 OR gl.general_ledger_for = 7 OR gl.general_ledger_for = 8 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 10 OR gl.general_ledger_for = 12 OR gl.general_ledger_for = 13) THEN (SELECT exchange_rate FROM payment WHERE payment_id = gl.payment_id )
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT exchange_rate FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id)
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT jd.exchange_rate FROM gl_detail jd WHERE jd.gl_detail_id = gl.jurnal_id)
                ELSE '' END AS exchange_rate,
                    
            CASE WHEN gl.payment_id IS NOT NULL THEN (SELECT bank_code FROM bank WHERE bank_id = (SELECT bank_id FROM payment WHERE payment_id = gl.payment_id ))
                WHEN gl.invoice_id IS NOT NULL THEN (SELECT b.bank_code FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN invoice i ON i.invoice_id = p.invoice_id LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id AND p.payment_status = 0 LIMIT 1)
                WHEN gl.contract_id IS NOT NULL THEN (SELECT b.bank_code FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = p.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)
                WHEN gl.transaction_id IS NOT NULL AND (SELECT payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT b.bank_code FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN TRANSACTION t ON t.payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS bank_code,
                        
            CASE WHEN gl.payment_id IS NOT NULL THEN (SELECT bank_type FROM bank WHERE bank_id = (SELECT bank_id FROM payment WHERE payment_id = gl.payment_id )) 
                WHEN gl.invoice_id IS NOT NULL THEN (SELECT b.bank_type FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN invoice i ON i.invoice_id = p.invoice_id LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id AND p.payment_status = 0 LIMIT 1)
                WHEN gl.contract_id IS NOT NULL THEN (SELECT b.bank_type FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = p.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)
                WHEN gl.transaction_id IS NOT NULL AND (SELECT payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT b.bank_type FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN TRANSACTION t ON t.payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS bank_type,
                        
            CASE WHEN gl.payment_id IS NOT NULL THEN (SELECT currency_code FROM currency WHERE currency_id = (SELECT currency_id FROM payment WHERE payment_id = gl.payment_id))
                WHEN gl.invoice_id IS NOT NULL THEN (SELECT pcur.currency_code FROM currency pcur LEFT JOIN payment p ON p.currency_id = pcur.currency_id LEFT JOIN invoice i ON i.invoice_id = p.invoice_id LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id AND p.payment_status = 0 LIMIT 1)
                WHEN gl.contract_id IS NOT NULL THEN (SELECT pcur.currency_code FROM currency pcur LEFT JOIN payment p ON p.currency_id = pcur.currency_id LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = p.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)		
                WHEN gl.transaction_id IS NOT NULL AND (SELECT payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT pcur.currency_code FROM currency pcur LEFT JOIN payment p ON p.currency_id = pcur.currency_id LEFT JOIN TRANSACTION t ON t.payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS pcur_currency_code,
                        
            CASE WHEN (SELECT payment_location FROM payment WHERE payment_id = gl.payment_id ) = 0 THEN 'HOF'
                WHEN gl.invoice_id IS NOT NULL THEN (SELECT CASE WHEN p.payment_location = 0 THEN 'HOF'
                ELSE sp.stockpile_code END AS sc FROM payment p LEFT JOIN stockpile sp ON p.payment_location = sp.stockpile_id LEFT JOIN invoice i ON i.invoice_id = p.invoice_id LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id AND p.payment_status = 0 LIMIT 1)
                WHEN gl.contract_id IS NOT NULL THEN (SELECT CASE WHEN p.payment_location = 0 THEN 'HOF'
                ELSE sp.stockpile_code END AS sc FROM payment p LEFT JOIN stockpile sp ON p.payment_location = sp.stockpile_id LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = p.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)
                WHEN gl.transaction_id IS NOT NULL AND (SELECT payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN 'HOF'
                ELSE (SELECT stockpile_code FROM stockpile WHERE stockpile_id = (SELECT payment_location FROM payment WHERE payment_id = gl.payment_id )) END AS payment_location2,
                        
            CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_module = 'STOCK TRANSIT' THEN (SELECT st.kode_stock_transit FROM stock_transit st LEFT JOIN stockpile_contract sc ON st.stockpile_contract_id = sc.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)
                WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_module = 'CONTRACT ADJUSTMENT' THEN (SELECT CONCAT(po_no,'-A') FROM contract WHERE contract_id = gl.contract_id) 
                WHEN gl.contract_id IS NOT NULL THEN (SELECT po_no FROM contract WHERE contract_id = gl.contract_id) 
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_module = 'RETURN INVOICE' THEN (SELECT CONCAT(i.invoice_no,'-RET') FROM invoice i LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_module = 'INVOICE DETAIL' THEN (SELECT i.invoice_no FROM invoice i LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id)
            
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_module = 'RETURN INVOICE NOTIM' THEN (SELECT CONCAT(i.inv_notim_no,'-RET') FROM invoice_notim i WHERE i.inv_notim_id = gl.invoice_notim_id)
            WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_module = 'INVOICE NOTIM' THEN (SELECT id.inv_notim_no FROM  invoice_notim id WHERE id.inv_notim_id = gl.invoice_notim_id)

                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_module = 'RETURN PAYMENT' THEN (SELECT CONCAT(payment_no,'-RET') FROM payment WHERE payment_id = gl.payment_id)
                WHEN gl.payment_id IS NOT NULL THEN (SELECT payment_no FROM payment WHERE payment_id = gl.payment_id ) 
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT jm.gl_add_no FROM gl_add jm LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
                WHEN gl.transaction_id IS NOT NULL THEN (SELECT slip_no FROM TRANSACTION WHERE transaction_id = gl.transaction_id)
                WHEN gl.accrue_id IS NOT NULL AND gl.description = 'Reverse Journal' THEN (SELECT CONCAT(b.prediction_code,'-',c.prediction_detail_id,'-RVS') FROM accrue_prediction b LEFT JOIN accrue_prediction_detail c ON b.prediction_id = c.prediction_id WHERE c.prediction_detail_id = gl.accrue_id LIMIT 1)
                WHEN gl.accrue_id IS NOT NULL AND gl.description = 'Cancel Journal' THEN (SELECT CONCAT(b.prediction_code,'-',c.prediction_detail_id,'-RET') FROM accrue_prediction b LEFT JOIN accrue_prediction_detail c ON b.prediction_id = c.prediction_id WHERE c.prediction_detail_id = gl.accrue_id LIMIT 1)
                WHEN gl.accrue_id IS NOT NULL THEN (SELECT CONCAT(b.prediction_code,'-',c.prediction_detail_id) FROM accrue_prediction b LEFT JOIN accrue_prediction_detail c ON b.prediction_id = c.prediction_id WHERE c.prediction_detail_id = gl.accrue_id LIMIT 1)
                ELSE '' END AS payment_no,
                
            CASE WHEN gl.contract_id IS NOT NULL THEN (SELECT p.payment_no FROM payment p LEFT JOIN stockpile_contract sc ON p.stockpile_contract_id = sc.stockpile_contract_id LEFT JOIN contract c ON c.contract_id = sc.contract_id WHERE c.contract_id = gl.contract_id AND p.payment_status = 0 LIMIT 1)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT p.payment_no FROM payment p LEFT JOIN invoice i ON i.invoice_id = p.invoice_id LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id AND p.payment_status = 0 LIMIT 1 )
                WHEN gl.payment_id IS NOT NULL THEN (SELECT payment_no FROM payment WHERE payment_id = gl.payment_id ) 
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT jm.gl_add_no FROM gl_add jm LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
                WHEN gl.transaction_id IS NOT NULL AND (SELECT payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT p.payment_no FROM payment p LEFT JOIN TRANSACTION t ON t.payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS payment_no2,
                
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT fc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT b.bank_code FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN TRANSACTION t ON t.fc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS bank_code_fc,
            
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT uc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT b.bank_code FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN TRANSACTION t ON t.uc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS bank_code_uc,
            
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT hc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT b.bank_code FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN TRANSACTION t ON t.hc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS bank_code_hc,
                
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT fc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT b.bank_type FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN TRANSACTION t ON t.fc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS bank_type_fc,
                
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT uc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT b.bank_type FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN TRANSACTION t ON t.uc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS bank_type_uc,
                
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT hc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT b.bank_type FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN TRANSACTION t ON t.hc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS bank_type_hc,
            
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT fc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT pcur.currency_code FROM currency pcur LEFT JOIN payment p ON p.currency_id = pcur.currency_id LEFT JOIN TRANSACTION t ON t.fc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS pcur_currency_code_fc,
            
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT uc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT pcur.currency_code FROM currency pcur LEFT JOIN payment p ON p.currency_id = pcur.currency_id LEFT JOIN TRANSACTION t ON t.uc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS pcur_currency_code_uc,
            
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT hc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT pcur.currency_code FROM currency pcur LEFT JOIN payment p ON p.currency_id = pcur.currency_id LEFT JOIN TRANSACTION t ON t.hc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS pcur_currency_code_hc,
            
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT fc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT CASE WHEN p.payment_location = 0 THEN 'HOF'
                ELSE sp.stockpile_code END AS sc FROM payment p LEFT JOIN stockpile sp ON p.payment_location = sp.stockpile_id LEFT JOIN TRANSACTION t ON t.fc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS payment_location_fc,
            
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT uc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT CASE WHEN p.payment_location = 0 THEN 'HOF'
                ELSE sp.stockpile_code END AS sc FROM payment p LEFT JOIN stockpile sp ON p.payment_location = sp.stockpile_id LEFT JOIN TRANSACTION t ON t.uc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS payment_location_uc,
            
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT hc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT CASE WHEN p.payment_location = 0 THEN 'HOF'
                ELSE sp.stockpile_code END AS sc FROM payment p LEFT JOIN stockpile sp ON p.payment_location = sp.stockpile_id LEFT JOIN TRANSACTION t ON t.hc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS payment_location_hc,
            
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT fc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT p.payment_no FROM payment p LEFT JOIN TRANSACTION t ON t.fc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS payment_no_fc,
                
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT uc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT p.payment_no FROM payment p LEFT JOIN TRANSACTION t ON t.uc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS payment_no_uc,
                
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT hc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT p.payment_no FROM payment p LEFT JOIN TRANSACTION t ON t.hc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS payment_no_hc,
                
            CASE WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT freight_id FROM payment WHERE payment_id = gl.payment_id) 
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT freightId FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id) 
            ELSE '' END AS freight_id,
            
            CASE WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 13 THEN  (SELECT vendor_handling_id FROM payment WHERE payment_id = gl.payment_id) 
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 13 THEN  (SELECT vendorHandlingId FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id)
            ELSE '' END AS vendor_handling_id, 
            
            CASE WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT labor_id FROM payment WHERE payment_id = gl.payment_id) 
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT laborId FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id)	    
            ELSE '' END AS labor_id, 

            (SELECT payment_status FROM payment WHERE payment_id = gl.payment_id) AS payment_status, 
            (SELECT payment_date FROM payment WHERE payment_id = gl.payment_id) AS payment_date,
            
            CASE WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT tax_category FROM tax WHERE tax_id = (SELECT pph_tax_id FROM freight WHERE freight_id = (SELECT freight_id FROM payment WHERE payment_id = gl.payment_id ))) 
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT tax_category FROM tax WHERE tax_id = (SELECT pph_tax_id FROM freight WHERE freight_id = (SELECT freightId FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id)))
            ELSE '' END AS fc_tax_category,
            
            CASE WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 3 THEN 
                    (SELECT tax_value FROM tax WHERE tax_id = (SELECT pph_tax_id FROM freight WHERE freight_id = (SELECT freight_id FROM payment WHERE payment_id = gl.payment_id ))) 
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 3 THEN
                    (SELECT tax_value FROM tax WHERE tax_id = (SELECT pph_tax_id FROM freight WHERE freight_id = (SELECT freightId FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id ))) 
            ELSE '' END AS fc_tax,

            CASE WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 13 THEN 
                    (SELECT tax_category FROM tax WHERE tax_id = (SELECT pph_tax_id FROM vendor_handling WHERE vendor_handling_id = (SELECT vendor_handling_id FROM payment WHERE payment_id = gl.payment_id ))) 
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 13 THEN 
                    (SELECT tax_category FROM tax WHERE tax_id = (SELECT pph_tax_id FROM vendor_handling WHERE vendor_handling_id = (SELECT vendor_handling_id FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id ))) 
            ELSE '' END AS vhc_tax_category, 

            CASE WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 13 THEN 
                    (SELECT tax_value FROM tax WHERE tax_id = (SELECT pph_tax_id FROM vendor_handling WHERE vendor_handling_id = (SELECT vendor_handling_id FROM payment WHERE payment_id = gl.payment_id )))   
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 13 THEN 
                    (SELECT tax_value FROM tax WHERE tax_id = (SELECT pph_tax_id FROM vendor_handling WHERE vendor_handling_id = (SELECT vendor_handling_id FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id )))
            ELSE ''  END AS vhc_tax,  
            
            (SELECT general_vendor_id FROM payment WHERE payment_id = gl.payment_id )  AS gv_id,
            (SELECT t.fc_tax_id FROM `transaction` t WHERE t.transaction_id = gl.transaction_id) AS fc_tax_id,
            (SELECT vh.pph_tax_id FROM vendor_handling vh LEFT JOIN vendor_handling_cost vhc ON vhc.vendor_handling_id = vh.vendor_handling_id LEFT JOIN TRANSACTION t ON t.handling_cost_id = vhc.handling_cost_id WHERE t.transaction_id = gl.transaction_id) AS vhc_tax_id, 
            (SELECT tax_category FROM tax WHERE tax_id = (SELECT fc_tax_id FROM `transaction` WHERE transaction_id = gl.transaction_id))  AS tf_tax_category,
            (SELECT tax_category FROM tax WHERE tax_id = (SELECT pph_tax_id FROM vendor_handling WHERE vendor_handling_id = (SELECT vendor_handling_id FROM vendor_handling_cost WHERE handling_cost_id = (SELECT handling_cost_id FROM `transaction` WHERE transaction_id = gl.transaction_id))))  AS tvh_tax_category,
            (SELECT pph_tax_id FROM general_vendor WHERE general_vendor_id = (SELECT general_vendor_id FROM payment WHERE payment_id = gl.payment_id )) AS gv_pph_id, 
            (SELECT ppn_tax_id FROM general_vendor WHERE general_vendor_id = (SELECT general_vendor_id FROM payment WHERE payment_id = gl.payment_id ))  AS gv_ppn_id, 
            (SELECT tax_category FROM tax WHERE tax_id = (SELECT pph_tax_id FROM general_vendor WHERE general_vendor_id = (SELECT general_vendor_id FROM payment WHERE payment_id = gl.payment_id )))  AS gv_pph_category, 
            CASE WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 3 THEN  
                        (SELECT tax_category FROM tax WHERE tax_id = (SELECT ppn_tax_id FROM freight WHERE freight_id = (SELECT freight_id FROM payment WHERE payment_id = gl.payment_id ))) 
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 3 THEN 		
                        (SELECT tax_category FROM tax WHERE tax_id = (SELECT ppn_tax_id FROM freight WHERE freight_id = (SELECT freightId FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id ))) 
            ELSE '' END AS gv_ppn_category, 
            (SELECT account_type FROM account WHERE account_id = gl.account_id) AS  account_type, 
            (SELECT tax_value FROM tax WHERE tax_id = (SELECT fc_tax_id FROM `transaction` t WHERE t.transaction_id = gl.transaction_id)) AS fc_tax_value,
            (SELECT tax_value FROM tax WHERE tax_id = (SELECT pph_tax_id FROM vendor_handling WHERE vendor_handling_id = (SELECT vendor_handling_id FROM vendor_handling_cost WHERE handling_cost_id = (SELECT handling_cost_id FROM `transaction` WHERE transaction_id = gl.transaction_id))))  AS vhc_tax_value,
            (SELECT general_vendor_id FROM gl_add WHERE gl_add_id = (SELECT gl_add_id FROM gl_detail WHERE gl_detail_id= gl.jurnal_id )) AS general_vendor_id, 
            (SELECT vendor_id FROM gl_add WHERE gl_add_id = (SELECT gl_add_id FROM gl_detail WHERE gl_detail_id= gl.jurnal_id )) AS vendor_id, 
            (SELECT payment_method FROM payment WHERE payment_id = gl.payment_id ) AS payment_method,
            (SELECT payment_type FROM payment WHERE payment_id = gl.payment_id ) AS payment_type
        FROM general_ledger gl  WHERE  gl.amount > 0 {$whereCondition}";
    //    echo " querya " . $sqla;
    $resulta = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);
    while ($row = $resulta->fetch_object()) {

        $sql2 = "SELECT s.stockpile_name FROM stockpile s INNER JOIN stockpile_contract sc ON s.`stockpile_id` = sc.`stockpile_id` 
                 INNER JOIN contract c ON sc.`contract_id` = c.`contract_id` WHERE sc.`quantity` > 0 AND c.`contract_no` = '$row->contract_no'";
        $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
        while ($row2 = $result2->fetch_object()) {
            $stockpileName2 = $row2->stockpile_name;
        }

        //$rowActive++;
        if ($row->transaction_id != NULL && $row->account_id == 147 && $row->general_ledger_for == 1) {
            $stockpileName = $stockpileName2;
        } else {
            $stockpileName = $row->stockpile_name2;
        }


        if ($row->general_ledger_id == '' && $row->amount < 0) {
            $credit_amount = $row->amount * -1;
            $debit_amount = 0;
        } elseif ($row->general_ledger_id == '' && $row->amount > 0) {
            $debit_amount = $row->amount;
            $credit_amount = 0;
        }

        if ($row->general_ledger_id != '' && ($row->general_ledger_module == 'NOTA TIMBANG' || ($row->general_ledger_module == 'CONTRACT' && ($row->general_ledger_for == 1 || $row->general_ledger_for == 2)) 
            || $row->general_ledger_module == 'STOCK TRANSIT' || $row->general_ledger_module == 'CONTRACT ADJUSTMENT' || $row->general_ledger_module == 'JURNAL MEMORIAL' 
            || $row->general_ledger_module == 'INVOICE NOTIM' || $row->general_ledger_module == 'RETURN INVOICE NOTIM' || $row->general_ledger_module == 'JURNAL ACCRUE')) {
            $debit_amount = $row->amount;
            $credit_amount = $row->amount;
        }

        //INVOICE NOTIM 
        
        //FREIGHT
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'INVOICE NOTIM' && $row->general_ledger_for == 3 && $row->invoice_notim_id != 0) {
            $credit_amount = $row->amount;
        }

        //END INVOICE NOTIM

        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'INVOICE DETAIL' && $row->general_ledger_for == 10 && $row->invoice_id != 0) {
            $credit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN INVOICE' && $row->general_ledger_for == 10 && $row->invoice_id != 0) {
            $credit_amount = $row->amount;
        }
        //==CREDIT NOTIM==//
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 
            && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13 || $row->general_ledger_for == 14) && $row->account_no == 230204) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 
            && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13 || $row->general_ledger_for == 14) && $row->account_no == 210103) {
            $credit_amount = $row->amount;
        }
        //==END CREDIT NOTIM==//

        //==DEBIT NOTIM==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 
        && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13) && $row->account_no == 140000) {
            $debit_amount = $row->amount * ((100 - $row->tf_tax_value) / 100);
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 
        && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13) && $row->account_no == 230204 && $row->quantity < 0) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 
            && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13) && $row->account_no == 230204) {
            $debit_amount = 0;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 && ($row->general_ledger_for == 14) && $row->account_no == 230204) {
            $debit_amount = $row->amount;;
        }
        //==END DEBIT NOTIM==//

        //==PAYMENT CREDIT===//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 1) {
            $debit_amount = $row->amount;
        //redit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 1) {
        //$debit_amount = $row->amount;
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 1) {
            $debit_amount = $row->amount;
//$credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 1) {
//$debit_amount = $row->amount;
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PETTY CASH' && $row->general_ledger_for == 12) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT ADMIN') {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 12) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 12) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 10 && $row->payment_id != 0) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 10 && $row->payment_id != 0) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->labor_id != 0 && $row->pph_journal != 0 && $row->payment_status != 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = $row->pph_journal;
        }

    //==FREIGHT==//
        if ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3 && $row->payment_method == 2) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->account_id == 5 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 0 && ($row->account_no == 210103 || $row->account_no == 130003)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && ($row->account_no == 210103 || $row->account_no == 130003)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->payment_method == 2 && $row->freight_id != 0 && $row->pph_journal != 0 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->payment_method == 1 && $row->freight_id != 0 && $row->ppn_journal != 0 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && ($row->account_no == 150410)) {
            $credit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->general_ledger_method == 'DP' && $row->payment_status == 1 && ($row->fc_tax_category == 0 || $row->fc_tax_category == 1) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->fc_tax_category == 0 && $row->payment_status == 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = 0;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->fc_tax_category == 1 && $row->payment_status == 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = 0;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->general_ledger_method == 'Down Payment' && $row->freight_id != 0 && ($row->account_no == 210103 || $row->account_no == 130003) && $row->payment_status == 1) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->fc_tax_category == 0 && $row->amountPayment < 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount ;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->payment_status == 1 && $row->fc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->payment_status == 1 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->fc_tax_category == 0 && ($row->account_no == 210103 || $row->account_no == 130003) && $row->payment_status == 1) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && ($row->account_no == 210103 || $row->account_no == 130003) && $row->payment_status == 1) {
            $credit_amount = $row->amount;
        }
    //==END FREIGHT==//

    //==VENDOR HANDLING==//
        if ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13 && $row->payment_method == 2) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->account_id == 397 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->payment_method == 2 && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $credit_amount = $row->amount ;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $credit_amount = $row->amount;
        }


        if ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->general_ledger_method == 'DP' && $row->payment_status == 1 && ($row->vhc_tax_category == 0 || $row->vhc_tax_category == 1) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->vhc_tax_category == 0 && $row->payment_status == 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = 0;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->vhc_tax_category == 1 && $row->payment_status == 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = 0;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->general_ledger_method == 'Down Payment' && $row->vendor_handling_id != 0 && ($row->account_no == 210106 || $row->account_no == 130006) && $row->payment_status == 1) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->payment_status == 1 && $row->vhc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->payment_status == 1 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 0 && ($row->account_no == 210106 || $row->account_no == 130006) && $row->payment_status == 1) {
            $credit_amount = $row->amount ;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && ($row->account_no == 210106 || $row->account_no == 130003) && $row->payment_status == 1) {
            $credit_amount = $row->amount;
        }
    //==END VENDOR HANDLING==//

    //==GENERAL VENDOR==//
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0 && ($row->account_no == 150410 || $row->account_no == 230100)) {
            $credit_amount = $row->ppn_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_transaction_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->ppn_journal != 0) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->account_type == 7 && $row->gv_pph_id == 21 && $row->gv_id != 0 && $row->pph_journal != 0 && $row->ppn_journal != 0) {
            $credit_amount = $row->amount + $row->ppn_journal + $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->ppn_journal != 0) {
            $credit_amount = ($row->amount + $row->ppn_journal) - $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0) {
            $credit_amount = $row->amount + $row->ppn_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->account_type == 7) {
            $credit_amount = $row->amount - $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0) {
            $credit_amount = $row->amount;
        }
        //elseif($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT'){
        //$credit_amount = $row->amount;
        //}

        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201 || $row->account_no == 150440) && $row->pph_journal != 0) {
            $credit_amount = $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_transaction_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->gv_pph_id == 21 && $row->ppn_journal != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8)) {
            $credit_amount = ($row->amount + $row->ppn_journal + $row->ppn_journal) + $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_transaction_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8)) {
            $credit_amount = ($row->amount + $row->ppn_journal + $row->ppn_journal) - $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8)) {
            $credit_amount = $row->amount + $row->ppn_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->gv_pph_id == 21 && $row->pph_journal != 0 && $row->account_type == 7) {
            $credit_amount = $row->amount + $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->account_type == 7) {
            $credit_amount = $row->amount - $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0) {
            $credit_amount = $row->amount;
        }
        //elseif($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT'){
        //$credit_amount = $row->amount;
        //}
        //==END GENERAL VENDOR==//

        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->payment_status != 1 && $row->account_type == 7 && ($row->general_ledger_for == 1)) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->payment_status != 1 && $row->account_no == 150410 && $row->general_ledger_for == 1) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 4 && $row->account_type == 7 && $row->payment_status != 1) {
            $credit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 6 && $row->account_type == 7 && $row->general_ledger_for2 == 'Internal Transfer') {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 6 && $row->account_type == 7 && $row->general_ledger_for2 == 'Internal Transfer') {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->payment_status != 1 && $row->account_no == 130001 && $row->general_ledger_for == 1) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->account_type == 7 && $row->pph_journal != 0 && $row->ppn_journal != 0 && $row->payment_status != 1 && $row->general_ledger_method == 'Down Payment') {
            $credit_amount = $row->amount + $row->ppn_journal - $row->pph_journal;
        }

        //==UNLOADING COST==//
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for2 == 'Unloading Cost' && $row->account_type == 7) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && ($row->account_no == 210104 || $row->account_no == 230207 || $row->account_no == 230204)) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->account_no == 130004) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && ($row->account_no == 210104 || $row->account_no == 230207 || $row->account_no == 230204)) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->account_no == 130004) {
            $credit_amount = $row->amount;
        }
        //==END UNLOADING COST==//

        //==CURAH==//
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 2 && ($row->account_no == 210101 || $row->account_no == 130002)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 2 && $row->account_type == 7) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 2) {
            $credit_amount = $row->amount;
        }
        //==END CURAH==//

        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && ($row->general_ledger_for == 5)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && ($row->general_ledger_for == 5)) {
            $credit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && ($row->general_ledger_for == 5)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && ($row->general_ledger_for == 5)) {
            $debit_amount = $row->amount;
        }
        //==END PAYMENT CREDIT===//

        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'INVOICE DETAIL' && $row->general_ledger_for == 10 && $row->invoice_id != 0) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN INVOICE' && $row->general_ledger_for == 10 && $row->invoice_id != 0) {
            $debit_amount = $row->amount;
        }

        //==PAYMENT DEBIT==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PETTY CASH' && $row->general_ledger_for == 12) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT ADMIN') {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 12) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 12) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 10 && $row->payment_id != 0) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 10 && $row->payment_id != 0) {
            $debit_amount = $row->amount;
        }
        //==FREIGHT==//

        if ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->general_ledger_method == 'DP' && ($row->fc_tax_category == 0 || $row->fc_tax_category == 1) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->fc_tax_category == 0 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = 0;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->fc_tax_category == 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = 0;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->general_ledger_method == 'Down Payment' && $row->freight_id != 0 && ($row->account_no == 210103 || $row->account_no == 130003)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 0 && $row->amountPayment < 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount ;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 0 && ($row->account_no == 210103 || $row->account_no == 130003)) {
            $debit_amount = $row->amount ;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && ($row->account_no == 210103 || $row->account_no == 130003)) {
            $debit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && ($row->account_no == 150410)) {
            $debit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->payment_status == 1 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3 && $row->payment_method == 2) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->payment_status == 1 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->payment_status == 1 && $row->fc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->payment_status == 1 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->payment_status == 1 && $row->account_id == 5 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->payment_method == 2 && $row->freight_id != 0 && $row->pph_journal != 0 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } /*elseif($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->payment_method == 2 && $row->freight_id != 0 && $row->payment_status == 1 && $row->pph_journal != 0 && $row->general_ledger_for == 3){
        $debit_amount = $row->amount ;
        }
        elseif($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->payment_method == 1 && $row->freight_id != 0 && $row->payment_status == 1 && $row->ppn_journal != 0 && $row->general_ledger_for == 3){
        $debit_amount = $row->amount;
        }*/
        elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->fc_tax_category == 0 && ($row->account_no == 210103 || $row->account_no == 130003) && $row->payment_status == 1) {
            $debit_amount = $row->amount ;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && ($row->account_no == 210103 || $row->account_no == 130003) && $row->payment_status == 1) {
            $debit_amount = $row->amount;
        }
        //==END FREIGHT==//

        //==VENDOR HANDLING==//
        if ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->general_ledger_method == 'DP' && ($row->vhc_tax_category == 0 || $row->vhc_tax_category == 1) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->vhc_tax_category == 0 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = 0;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->vhc_tax_category == 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = 0;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->general_ledger_method == 'Down Payment' && $row->vendor_handling_id != 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $debit_amount = $row->amount ;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $debit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->payment_status == 1 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13 && $row->payment_method == 2) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->payment_status == 1 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->payment_status == 1 && $row->vhc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->payment_status == 1 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->payment_status == 1 && $row->account_id == 397 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->payment_method == 2 && $row->vendor_handling_id != 0 && $row->payment_status == 1 && $row->pph_journal != 0 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $debit_amount = $row->amount * ((100 - $row->vhc_tax) / 100);
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $debit_amount = $row->amount;
        }
        //==END VENDOR HANDLING==//

        //==UC==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for2 == 'Unloading Cost' && $row->account_type == 7 /*&& $row->payment_status != 1*/) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && ($row->account_no == 210104 || $row->account_no == 230207 || $row->account_no == 230204)) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->account_no == 130004) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && ($row->account_no == 210104 || $row->account_no == 230207 || $row->account_no == 230204)) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->account_no == 130004) {
            $debit_amount = $row->amount;
        }
        //==END UC==//

        //==PKS KONTRAK//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->account_no == 210102 && $row->payment_status != 1) {
            $debit_amount = $row->amount;
        }
        //==END PKS KONTRAK//

        //==GENERAL VENDOR==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201 || $row->account_no == 150440) && $row->pph_journal != 0) {
            $debit_amount = $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_transaction_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->gv_pph_id == 21 && $row->ppn_journal != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8)) {
            $debit_amount = ($row->amount + $row->ppn_journal + $row->ppn_journal) + $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_transaction_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8)) {
            $debit_amount = ($row->amount + $row->ppn_journal + $row->ppn_journal) - $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8)) {
            $debit_amount = $row->amount + $row->ppn_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->gv_pph_id == 21 && $row->pph_journal != 0 && $row->account_type == 7) {
            $debit_amount = $row->amount + $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->account_type == 7) {
            $debit_amount = $row->amount - $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0) {
            $debit_amount = $row->amount;
        }
        //elseif($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT'){
        //$debit_amount = $row->amount;
        //}

        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0 && ($row->account_no == 150410 || $row->account_no == 230100)) {
            $debit_amount = $row->ppn_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_transaction_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->ppn_journal != 0) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->account_type == 7 && $row->gv_pph_id == 21 && $row->gv_id != 0 && $row->pph_journal != 0 && $row->ppn_journal != 0) {
            $debit_amount = $row->amount + $row->ppn_journal + $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->ppn_journal != 0) {
            $debit_amount = ($row->amount + $row->ppn_journal) - $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0) {
            $debit_amount = $row->amount + $row->ppn_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->account_type == 7) {
            $debit_amount = $row->amount - $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0) {
            $debit_amount = $row->amount;
        }
        //elseif($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT'){
        //$debit_amount = $row->amount;
        //}
        //==END GENERAL VENDOR==//

        //==CURAH==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 2) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 2 && ($row->account_no == 210101 || $row->account_no == 130002)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 2 && $row->account_type == 7) {
            $debit_amount = $row->amount;
        }

        //ND CURAH==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->payment_status != 1 && ($row->account_no == 150410 || $row->account_no == 230100)) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->account_type == 7 && $row->general_ledger_for == 6 && $row->general_ledger_for2 == 'Internal Transfer') {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->account_type == 7 && $row->general_ledger_for == 6 && $row->general_ledger_for2 == 'Internal Transfer') {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->payment_status != 1 && $row->account_no == 130001 && $row->general_ledger_for == 1) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->payment_status != 1 && $row->supplier_name == 'Kas Negara' && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = $row->amount;
        }

        //==SALES==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 9 && $row->payment_status != 1) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 9 && $row->payment_status != 1) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 9 && $row->payment_status == 1) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 9 && $row->payment_status == 1) {
            $credit_amount = $row->amount;
        }
        //==END SALES==//

        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 10 && $row->payment_status != 1) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 10 && $row->payment_status != 1) {
            $credit_amount = $row->amount;
        }
        if ($row->payment_status == 1 && $row->gl_date < '2018-04-01') {
            $debit_amount = 'RETURN';
            $credit_amount = 'RETURN';
        }
        if ($row->invoice_payment == 2 && $row->gl_date < '2018-04-01') {
            $debit_amount = 'RETURN';
            $credit_amount = 'RETURN';
        }

        //$general_ledger_id = $row->general_ledger_id;

        $voucherNo = "";
        $paymentNo = "";
        if ($row->contract_id != '' && $row->general_ledger_module == 'CONTRACT ADJUSTMENT') {
            $voucherNo = $row->payment_no;
            $paymentNo = 'JV-PO-' . $row->payment_no2;
        } elseif ($row->contract_id != '' && $row->general_ledger_module != 'CONTRACT ADJUSTMENT') {
            $voucherCode = $row->payment_location2 . '/' . $row->bank_code . '/' . $row->pcur_currency_code;


            if ($row->bank_type == 1) {
                $voucherCode .= ' - B';
            } elseif ($row->bank_type == 2) {
                $voucherCode .= ' - P';
            } elseif ($row->bank_type == 3) {
                $voucherCode .= ' - CAS';
            }

            if ($row->bank_type != 3) {
                if ($row->payment_type == 1) {
                    $voucherCode .= 'RV';
                } else {
                    $voucherCode .= 'PV';
                }
            }


            $voucherNo = $row->payment_no;
            $paymentNo = $voucherCode . ' # ' . $row->payment_no2;
        } elseif ($row->payment_id != '') {


            $voucherCode = $row->payment_location2 . '/' . $row->bank_code . '/' . $row->pcur_currency_code;


            if ($row->bank_type == 1) {
                $voucherCode .= ' - B';
            } elseif ($row->bank_type == 2) {
                $voucherCode .= ' - P';
            } elseif ($row->bank_type == 3) {
                $voucherCode .= ' - CAS';
            }

            if ($row->bank_type != 3) {
                if ($row->payment_type == 1) {
                    $voucherCode .= 'RV';
                } else {
                    $voucherCode .= 'PV';
                }
            }

            $voucherNo = $voucherCode . ' # ' . $row->payment_no;
            $paymentNo = $voucherCode . ' # ' . $row->payment_no2;

        } elseif ($row->invoice_id != '') {


            $voucherCode = $row->payment_location2 . '/' . $row->bank_code . '/' . $row->pcur_currency_code;


            if ($row->bank_type == 1) {
                $voucherCode .= ' - B';
            } elseif ($row->bank_type == 2) {
                $voucherCode .= ' - P';
            } elseif ($row->bank_type == 3) {
                $voucherCode .= ' - CAS';
            }

            if ($row->bank_type != 3) {
                if ($row->payment_type == 1) {
                    $voucherCode .= 'RV';
                } else {
                    $voucherCode .= 'PV';
                }
            }

            $voucherNo = $row->payment_no;
            $paymentNo = $voucherCode . ' # ' . $row->payment_no2;
        } else {
            $voucherNo = $row->payment_no;
            $paymentNo = $row->payment_no2;
        }

        $general_ledger_id = $row->general_ledger_id;
        $stockpile = $row->stockpile_name2;
        $gl_date = $row->gl_date;
        $general_ledger_module = $row->general_ledger_module;
        $general_ledger_method = $row->general_ledger_method;
        $general_ledger_transaction_type2 = $row->general_ledger_transaction_type2;
        $supplier_name = $row->supplier_name;
        $supplier_code = $row->supplier_code;
        $po_no = $row->po_no;
        $contract_no = $row->contract_no;
        $slip_no = $row->slip_no;
        $invoice_no = $row->invoice_no;
        $invoice_no_2 = $row->invoice_no_2;
        $tax_invoice = $row->tax_invoice;
        $cheque_no = $row->cheque_no;
        $remarks = $row->remarks;
        $shipment_code = $row->shipment_code;
        $quantity = $row->quantity;
        $price = $row->price;
        $account_no = $row->account_no;
        $account_name = $row->account_name;
        $exchange_rate = $row->exchange_rate;

        $date = new DateTime();
        $currentDate = $date->format('d/m/Y H:i:s');

        $debitAmount = 0;
        if ($row->general_ledger_type == 1) {
            $debitAmount = $debit_amount;
        } elseif ($row->general_ledger_type == '') {
            $debitAmount = $debit_amount;
        }

        $creditAmount = 0;
        if ($row->general_ledger_type == 2) {
            $creditAmount = $credit_amount;
        } elseif ($row->general_ledger_type == '') {
            $creditAmount = $credit_amount;
        }

        $sqlb = "INSERT INTO gl_report(general_ledger_id, contract_id, invoice_id, invoice_notim_id, transaction_id, jurnal_id, 
                                accrue_id, payment_id, source, stockpile,gl_date, jurnal_no, general_ledger_module, 
                                general_ledger_method, general_ledger_transaction_type2, supplier_code,supplier_name, 
                                po_no, contract_no, slip_no, invoice_no, invoice_no_2, tax_invoice, cheque_no,
                                 remarks, shipment_code,quantity,price,account_no,account_name,exchange_rate,
                                 debitAmount,creditAmount, entry_date, entry_by, adj) 
                                 VALUES ({$general_ledger_id}, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 
                                 {$jurnalId}, {$accrueId},{$paymentId}, 'GL', '{$stockpile}','{$gl_date}','{$voucherNo}', 
                                 '{$general_ledger_module}', '{$general_ledger_method}', 
                                 '{$general_ledger_transaction_type2}', '{$supplier_code}','{$supplier_name}', 
                                 '{$po_no}', '{$contract_no}', '{$slip_no}', '{$invoice_no}', '{$invoice_no_2}', 
                                 '{$tax_invoice}', '{$cheque_no}', '{$remarks}', '{$shipment_code}','{$quantity}',
                                 '{$price}','{$account_no}','{$account_name}','{$exchange_rate}',{$debitAmount},
                                 {$creditAmount}, STR_TO_DATE('{$currentDate}', '%d/%m/%Y %H:%i:%s'),
                                 {$_SESSION['userId']},{$adjustmentId})";
        $resultb = $myDatabase->query($sqlb, MYSQLI_STORE_RESULT);
         echo "</br> " . $sqlb . "</br> ";
        }
    // } 

}

function insertGeneralLedger_payment($myDatabase, $source, $invoiceId = "NULL", $invoiceNotimId = "NULL", $i_id = "NULL", $contractId = "NULL", $transactionId = "NULL", $paymentId = "NULL", $jurnalId = "NULL", $accrueId = "NULL" , $returnId = "NULL" )
{
    
    $insertValues = "";
    $boolContinue = true;
    
    if ($accrueId != 'NULL') {
        // <editor-fold defaultstate="collapsed" desc="accrueId">
		$boolReverse = false;
		$sqlReverse = "SELECT * FROM invoice_detail WHERE prediction_detail_id = {$accrueId} ";
				$resultReverse = $myDatabase->query($sqlReverse, MYSQLI_STORE_RESULT);
			if ($resultReverse->num_rows == 1) {
                   $boolReverse = true;
              }
		$sqlCancel = "SELECT * FROM accrue_prediction_detail WHERE prediction_detail_id = {$accrueId} ";
				$resultCancel = $myDatabase->query($sqlCancel, MYSQLI_STORE_RESULT);
			if ($resultCancel->num_rows == 1) {
				$rowCancel = $resultCancel->fetch_object();
                   $journalStatus = $rowCancel->journal_status;
              }
		
		
		if($boolReverse){
			$sql = "DELETE FROM general_ledger WHERE accrue_id = {$accrueId} AND description = 'Reverse Journal'";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		}else if ($journalStatus == 2){
			$sql = "DELETE FROM general_ledger WHERE accrue_id = {$accrueId} AND description = 'Cancel Journal'";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		}else{
			$sql = "DELETE FROM general_ledger WHERE accrue_id = {$accrueId}";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		}
		
		
        $sql = "SELECT a.*,b.*, d.`account_no` FROM accrue_prediction_detail a
                LEFT JOIN accrue_prediction b ON a.prediction_id = b.prediction_id
                LEFT JOIN account d ON d.`account_id` = a.`account_id`
                WHERE a.prediction_detail_id = {$accrueId} ";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
			
			$accountNo = $row->account_no;
			$totalAmount = $row->total_amount * $row->exchange_rate;  //ini exchange rate punya PEB
			$journal_status = $row->journal_status;

                
				$sqlAccount1 = "SELECT account_id, account_no, account_name FROM account WHERE account_type = 6 AND account_no IN (220100, {$accountNo})";
                $resultAccount1 = $myDatabase->query($sqlAccount1, MYSQLI_STORE_RESULT);

                if ($resultAccount1 !== false && $resultAccount1->num_rows > 0) {
                    while ($rowAccount1 = $resultAccount1->fetch_object()) {
                        if ($insertValues != "") {
                            $insertValues .= ", ";
                        }
						
						if($boolReverse){
						
                        if ($totalAmount != 0 && $totalAmount != '') {
                            if ($rowAccount1->account_no == $accountNo) {
                                if ($totalAmount < 0) {
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 15, {$contractId}, {$invoiceId}, NULL, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId},0, 0,{$rowAccount1->account_id}, 'Reverse Journal', {$totalAmount})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 15, {$contractId}, {$invoiceId}, NULL, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId},0, 0,{$rowAccount1->account_id}, 'Reverse Journal', {$totalAmount})";
                                }
                            } elseif ($rowAccount1->account_no == 220100) {
                                if ($totalAmount < 0) {
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 15, {$contractId}, {$invoiceId}, NULL, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId},0, 0,{$rowAccount1->account_id}, 'Reverse Journal', {$totalAmount})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 15, {$contractId}, {$invoiceId}, NULL, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId},0, 0,{$rowAccount1->account_id}, 'Reverse Journal', {$totalAmount})";
                                }
                            } 
                        }
					}else{
						if ($totalAmount != 0 && $totalAmount != '') {
							if($journal_status == 2){
                            if ($rowAccount1->account_no == $accountNo) {
                                if ($totalAmount < 0) {
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 15, {$contractId}, {$invoiceId}, NULL, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId},0, 0,{$rowAccount1->account_id}, 'Cancel Journal', {$totalAmount})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 15, {$contractId}, {$invoiceId}, NULL, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId},0, 0,{$rowAccount1->account_id}, 'Cancel Journal', {$totalAmount})";
                                }
                            } elseif ($rowAccount1->account_no == 220100) {
                                if ($totalAmount < 0) {
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 15, {$contractId}, {$invoiceId}, NULL, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId},0, 0,{$rowAccount1->account_id}, 'Cancel Journal', {$totalAmount})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 15, {$contractId}, {$invoiceId}, NULL, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId},0, 0,{$rowAccount1->account_id}, 'Cancel Journal', {$totalAmount})";
                                }
                            }
						}else{
							if ($rowAccount1->account_no == $accountNo) {
                                if ($totalAmount < 0) {
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 15, {$contractId}, {$invoiceId}, NULL, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId},0, 0,{$rowAccount1->account_id}, NULL, {$totalAmount})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 15, {$contractId}, {$invoiceId}, NULL, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId},0, 0,{$rowAccount1->account_id}, NULL, {$totalAmount})";
                                }
                            } elseif ($rowAccount1->account_no == 220100) {
                                if ($totalAmount < 0) {
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 15, {$contractId}, {$invoiceId}, NULL, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId},0, 0,{$rowAccount1->account_id}, NULL, {$totalAmount})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 15, {$contractId}, {$invoiceId}, NULL, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId},0, 0,{$rowAccount1->account_id}, NULL, {$totalAmount})";
                                }
                            }
						}
                        }
						
					}

                    }
                } else {
                    $boolContinue = false;
                    echo 'FALSE1';
                }
            
        } else {
            $boolContinue = false;
            echo 'FALSE3';
        }

        // </editor-fold>
    }else if($contractId != 'NULL' && $source != 'STOCK TRANSIT' && $source == 'CONTRACT ADJUSTMENT') {
        // <editor-fold defaultstate="collapsed" desc="contract">
        $sql = "DELETE FROM general_ledger WHERE general_ledger_module = 'CONTRACT ADJUSTMENT' AND contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
       	$adjustment = 0;
		$ppn = 0;
		$totalAdjustment = 0;
		$adjustment1 = 0;
		$ppn1 = 0;
		$totalAdjustment1 = 0;
        $sql = "SELECT con.*, v.*, a.account_no FROM contract con 
                LEFT JOIN vendor v ON con.`vendor_id` = v.`vendor_id` LEFT JOIN account a ON a.account_id = con.adjustment_acc WHERE con.contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            
            if($row->contract_type == 'P') {
			
			$adjustment = $row->price_converted * $row->adjustment;
			if($row->adjustment_ppn == 1){
				$ppn = $adjustment * ($row->ppn/100);
			}else{
				$ppn = 0;
			}
			$totalAdjustment = $adjustment + $ppn;
			$totalAdjustment1 = $totalAdjustment;
			if($adjustment < 0 ){
				$adjustment1 = $adjustment * -1;
				$totalAdjustment1 = $totalAdjustment * -1;
				$ppn1 = $ppn * -1;
			}
			$accountNo = $row->account_no;	
			
			$sqlAccount1 = "SELECT account_id, account_no, account_name FROM account WHERE account_type = 1 AND account_no IN (130100, 150410, $accountNo)";
                $resultAccount1 = $myDatabase->query($sqlAccount1, MYSQLI_STORE_RESULT);
                
                if($resultAccount1 !== false && $resultAccount1->num_rows > 0) {
                    while($rowAccount1 = $resultAccount1->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
				if($adjustment != 0 && $adjustment != ''){
							if($rowAccount1->account_no == 130100) {
							if($adjustment < 0){
                            $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$adjustment1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$adjustment})";	
							}
							} elseif($rowAccount1->account_no == 150410) {
							if($adjustment < 0){
                            $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$ppn1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$ppn})";	
							}		
                        	} elseif($rowAccount1->account_no == 210102) {
							if($adjustment < 0){
							$insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$totalAdjustment1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$totalAdjustment1})";
							}
							} elseif($rowAccount1->account_no == 520100) {
                           if($adjustment < 0){
							$insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$totalAdjustment1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$totalAdjustment1})";
							}
							}elseif($rowAccount1->account_no == 150120) {
                           if($adjustment < 0){
							$insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$totalAdjustment1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$totalAdjustment1})";
							}
							}
						}
				
					}
					}else {
                    $boolContinue = false;
					echo 'FALSE1';
                }
			}else {
                $boolContinue = false;
				echo 'FALSE2';
            }
        } else {
            $boolContinue = false;
			echo 'FALSE3';
        }
        
        // </editor-fold>
    }elseif($contractId != 'NULL' && $source == 'STOCK TRANSIT' && $source != 'CONTRACT ADJUSTMENT') {

        // <editor-fold defaultstate="collapsed" desc="contract">
		
       $sql = "DELETE FROM general_ledger WHERE general_ledger_module = 'STOCK TRANSIT' AND contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
       
        $sql = "SELECT a.*, (c.`price_converted` * a.send_weight) AS amt_stock_transit FROM stock_transit a 
                LEFT JOIN stockpile_contract b ON a.`stockpile_contract_id` = b.`stockpile_contract_id`
                LEFT JOIN contract c ON b.`contract_id` = c.`contract_id` WHERE c.contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            
            $amt_stock_transit = $row->amt_stock_transit;
			//$amt_ospks = $row->amt_ospks;
			
			$sqlAccount1 = "SELECT account_id, account_no, account_name FROM account WHERE account_type = 1 AND account_no IN (130100,141000)";
                $resultAccount1 = $myDatabase->query($sqlAccount1, MYSQLI_STORE_RESULT);
                
                if($resultAccount1 !== false && $resultAccount1->num_rows > 0) {
                    while($rowAccount1 = $resultAccount1->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
				if($amt_stock_transit != 0 && $amt_stock_transit != ''){
							if($rowAccount1->account_no == 130100) {
							if($amt_stock_transit < 0){
                            $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$amt_stock_transit})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$amt_stock_transit})";	
							}
							} elseif($rowAccount1->account_no == 141000) {
							if($amt_stock_transit < 0){
                            $insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$amt_stock_transit})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$amt_stock_transit})";	
							}		
                        	} 
						}
				
					}
					}else {
                    $boolContinue = false;
					echo 'FALSE1';
                }
			
        } else {
            $boolContinue = false;
			echo 'FALSE3';
			echo $sql;
        }
        
        // </editor-fold>
    }elseif($contractId != 'NULL' && $source != 'STOCK TRANSIT' && $source != 'CONTRACT ADJUSTMENT') {
        // <editor-fold defaultstate="collapsed" desc="contract">
        
		   //update surya-----------------------------------------------------------------------------------------------------
        $sql = "SELECT contract_status FROM contract
       WHERE contract_id = {$contractId}";
       $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

       if($result !== false && $result->num_rows == 1) {
           $row = $result->fetch_object();
           
               $contractStatus = $row->contract_status;}
        //----------------------------------------------------------------------------------------------------------------------------------


		 if($contractStatus !=2){
          $sql = "DELETE FROM general_ledger WHERE contract_id = {$contractId}";
          $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        }
		
        $sql = "SELECT con.*, v.* FROM contract con 
                LEFT JOIN vendor v ON con.`vendor_id` = v.`vendor_id`  WHERE con.contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            
           
			
			
			if($row->contract_type == 'P') {
                
                $amount = $row->price_converted * $row->quantity;
				
				if($row->ppn != 0){
				$totalAmount = $amount * 1.1;
				}else{
				$totalAmount = $amount;
				}
				$ppn = $totalAmount - $amount;
				
				
				
                $sqlAccount = "SELECT account_id, account_no, account_name FROM account WHERE account_type = 1 AND account_no IN (130100, 210102, 150410)";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
						
                        if($contractStatus !=2){
                          if($rowAccount->account_no == 130100) {
                              $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Kontrak beli cangkang kontrak', {$amount})";
                          } elseif($rowAccount->account_no == 210102) {
                              $insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalAmount})";
                          } elseif($rowAccount->account_no == 150410) {
                              $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";
                          }
                        }else {
                          if($rowAccount->account_no == 130100) {
                              $insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'cancel kontrak', {$amount})";
                          } elseif($rowAccount->account_no == 210102) {
                              $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalAmount})";
                          } elseif($rowAccount->account_no == 150410) {
                              $insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";
                          }
                        }
                    }
                } else {
                    $boolContinue = false;
					echo 'FALSE1';
                }
            } else {
                $boolContinue = false;
				echo 'FALSE2';
            }
        } else {
            $boolContinue = false;
			echo 'FALSE3';
        }
        
        // </editor-fold>
    }  elseif($jurnalId != 'NULL') {
        // <editor-fold defaultstate="collapsed" desc="contract">
				
        $sql = "DELETE FROM general_ledger WHERE jurnal_id = {$jurnalId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
				
		
        $sql = "SELECT * FROM gl_detail WHERE gl_detail_id = {$jurnalId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            
				
				$sqlAccount = "SELECT account_id, account_no, account_name FROM account WHERE account_id = {$row->account_id}";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
                        
                        if($row->gl_type == 1) {
							$insertValues .= "(1, '{$source}', NULL, NULL, 11, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_converted})";
                        } elseif($row->gl_type == 2) {
                            $insertValues .= "(2, '{$source}', NULL, NULL, 11, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_converted})";
                        }
					}
                } else {
                    $boolContinue = false;
				}
				
				
				
            
        } else {
            $boolContinue = false;
			echo 'FALSE3';
			echo $jurnalId;
        }
        
        // </editor-fold>
    }elseif($invoiceId != 'NULL' && $source == 'RETURN INVOICE') {
        // <editor-fold defaultstate="collapsed" desc="invoiceDetail">
		$sql = "DELETE FROM general_ledger WHERE invoice_id = {$invoiceId} AND general_ledger_module = 'RETURN INVOICE'";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
      /// echo 'test';
		$sql88 = "SELECT invoice_detail_id FROM invoice_detail WHERE invoice_detail_id IN ({$invoiceId})";
		$result88 = $myDatabase->query($sql88, MYSQLI_STORE_RESULT);
        if($result88 !== false && $result88->num_rows >= 0) {
			while($row88 = $result88->fetch_object()) {
				$invoiceId = $row88->invoice_detail_id;
                $sql = "SELECT id.*,i.*,  a.`account_no`, a.`account_type`, apph.`account_no` AS a_pph FROM invoice_detail id
                        LEFT JOIN invoice i ON i.`invoice_id` = id.`invoice_id`
                        LEFT JOIN account a ON id.`account_id` = a.`account_id`
                        LEFT JOIN tax txpph ON id.`pphID` = txpph.`tax_id`
                        LEFT JOIN tax txppn ON id.`ppnID` = txppn.`tax_id`
                        LEFT JOIN account apph ON apph.`account_id` = txpph.`account_id` 
                        WHERE id.invoice_detail_id = {$invoiceId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
                if($result !== false && $result->num_rows == 1) {
                    $row = $result->fetch_object();
            
                        $amount = $row->amount_converted;
                        $ppn = $row->ppn_converted;
                        $pph = $row->pph_converted;
                        $totalAmount = $row->tamount_converted;
                        $account_no = $row->account_no;
                        $invoiceMethod = $row->invoice_method_detail;
                        $gvId = $row->general_vendor_id;
                        $paymentStatus = $row->payment_status;
                        $invoiceStatus = $row->invoice_status;
                    
                    if($invoiceMethod = 1){/* DP ADMIN BANK*/
                        $sql9 = "SELECT idp.*, id.invoice_id, aid.`account_no` AS accNo, adp.`account_no` AS acc_pph, dptx.tax_value AS pph_dp, id.pph AS dpPPh,
                            adpppn.`account_no` AS acc_ppn, dpppn.tax_value AS ppn_dp, id.ppn AS dpPPn FROM invoice_dp idp
                            LEFT JOIN invoice_detail id ON id.`invoice_detail_id` = idp.invoice_detail_dp
                            LEFT JOIN tax dptx ON id.`pphID` = dptx.`tax_id`
                            LEFT JOIN account adp ON dptx.`account_id` = adp.`account_id`
                            LEFT JOIN tax dpppn ON id.`ppnID` = dpppn.`tax_id`
                            LEFT JOIN account adpppn ON dpppn.`account_id` = adpppn.`account_id`  
                            LEFT JOIN account aid ON aid.`account_id` = id.`account_id`       
                            WHERE idp.invoice_detail_id = {$invoiceId} AND aid.`account_no` = 700080 ORDER BY id.invoice_id ASC";
                        $result9 = $myDatabase->query($sql9, MYSQLI_STORE_RESULT);
                
                        if($result9 !== false && $result9->num_rows >= 0) {
                            while($row9 = $result9->fetch_object()) {
                                //echo 'test2';
                                $tamount2 = $row9->amount_payment;
                                $i_id2 = $row9->invoice_id;
                                $accNo2 = $row9->accNo;
                                    //$accountNo = $row8->accNo;
                                    //$ppnDP = $row8->ppn_converted;
                                    //$pphDP = $row8->pph_converted;
                                $acc_ppn2 = $row9->acc_ppn;
                                $acc_pph2 = $row9->acc_pph;
                                if($row9->dpPPn == 0){
                                    $ppnDP2 = 0;	
                                }else{
                                    $ppnDP2 = $tamount2 * ($row9->ppn_dp/100);
                                }
                                if($row9->dpPPh == 0){
                                    $pphDP2 = 0;	
                                }else{
                                    $pphDP2 = $tamount2 * ($row9->pph_dp/100);
                                }

                                $sqlAccountDP2 = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in ('{$acc_pph2}', 150410 , 700080)";
                                $resultAccountDP2 = $myDatabase->query($sqlAccountDP2, MYSQLI_STORE_RESULT);
                                        
                                if($resultAccountDP2 !== false && $resultAccountDP2->num_rows > 0) {
                                    while($rowAccountDP2 = $resultAccountDP2->fetch_object()) {
                                        if($insertValues != "") {
                                            $insertValues .= ", ";
                                        }
                                                
                                        if($rowAccountDP2->account_no == 700080) {
                                                    
                                            $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, {$i_id2}, 0, {$rowAccountDP2->account_id}, NULL, {$tamount2})";
                                                    
                                        }elseif($rowAccountDP2->account_no == 150410) {
                                                    
                                            $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, {$i_id2}, 0, {$rowAccountDP2->account_id}, NULL, {$ppnDP2})";	
                                                    
                                        }
                                        elseif($rowAccountDP2->account_no == $acc_pph2) {
                                                    
                                            $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, {$i_id2}, 0, {$rowAccountDP2->account_id}, NULL, {$pphDP2})";	 
                                                    
                                        }
                                    }
                                }
                            }
                        }else {
                            $boolContinue = false;			
                        }
                    }
                    
                    if($invoiceMethod = 1){
                        $totalAmountDp = 0;
                        $sql8 = "SELECT idp.*, id.invoice_id, aid.`account_no` AS accNo, adp.`account_no` AS acc_pph, dptx.tax_value AS pph_dp, id.pph AS dpPPh,
                                adpppn.`account_no` AS acc_ppn, dpppn.tax_value AS ppn_dp, id.ppn AS dpPPn FROM invoice_dp idp
                                LEFT JOIN invoice_detail id ON id.`invoice_detail_id` = idp.invoice_detail_dp
                                LEFT JOIN tax dptx ON id.`pphID` = dptx.`tax_id`
                                LEFT JOIN account adp ON dptx.`account_id` = adp.`account_id`
                                LEFT JOIN tax dpppn ON id.`ppnID` = dpppn.`tax_id`
                                LEFT JOIN account adpppn ON dpppn.`account_id` = adpppn.`account_id`  
                                LEFT JOIN account aid ON aid.`account_id` = id.`account_id`       
                                WHERE idp.invoice_detail_id = {$invoiceId} AND aid.`account_no` != 700080 ORDER BY id.invoice_id ASC";
                        $result8 = $myDatabase->query($sql8, MYSQLI_STORE_RESULT);
                
                        if($result8 !== false && $result8->num_rows >= 0) {
                            while($row8 = $result8->fetch_object()) {
                                //echo 'test2';
                                    $tamount = $row8->amount_payment;
                                    $i_id = $row8->invoice_id;
                                    $accNo = $row8->accNo;
                                    $acc_ppn = $row8->acc_ppn;
                                    $acc_pph = $row8->acc_pph;
                                    if($row8->dpPPn == 0){
                                    $ppnDP = 0;	
                                    }else{
                                    $ppnDP = $tamount * ($row8->ppn_dp/100);
                                    }
                                    if($row8->dpPPh == 0){
                                    $pphDP = 0;	
                                    }else{
                                    $pphDP = $tamount * ($row8->pph_dp/100);
                                    }
                                    echo $accNo;
                                    
                                    $amountDp = ($tamount + $ppnDP) - $pphDP;
                                    $totalAmountDp = $totalAmountDp + $amountDp;
                                    
                        
                                $sqlAccountDP = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in ('{$acc_pph}', 150410 ,'{$accNo}')";
                                $resultAccountDP = $myDatabase->query($sqlAccountDP, MYSQLI_STORE_RESULT);
                                
                                if($resultAccountDP !== false && $resultAccountDP->num_rows > 0) {
                                    while($rowAccountDP = $resultAccountDP->fetch_object()) {
                                        if($insertValues != "") {
                                            $insertValues .= ", ";
                                        }
                                        
                                        if($rowAccountDP->account_no == $accNo) {
                                            
                                            $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$tamount})";
                                            
                                        }elseif($rowAccountDP->account_no == 150410) {
                                            
                                            $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$ppnDP})";	
                                            
                                        }
                                        elseif($rowAccountDP->account_no == $acc_pph) {
                                            
                                            $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$pphDP})";	 
                                            
                                        }
                                    }
                                }
                            }
                        }else {
                            $boolContinue = false;			
                        }
                    }
                    
                    
                    if($invoiceMethod = 1){
                            
                        if($pph == 0){
                            $a_pph = 0;
                        }else{
                            $a_pph = $row->a_pph;
                        }
                        
                        //echo $row->account_type;
                        //echo $account_no;
                        //echo $a_pph;
                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in (210105, 150410, '{$account_no}', '{$a_pph}')";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                        
                        if($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while($rowAccount = $resultAccount->fetch_object()) {
                                if($insertValues != "") {
                                    $insertValues .= ", ";
                                }
                                if($rowAccount->account_no == $account_no) {
                                    if($invoiceStatus == 2){
                                    // $amount1 = $amount * -1;
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";	
                                    }else{
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                    }
                                    
                                }  elseif($rowAccount->account_no == 210105) {
                                    $totalAmount = $totalAmount - $totalAmountDp;
                                    if($invoiceStatus == 2){
                                       // $totalAmount1 = $totalAmount * -1;
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
                                    }else{
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
                                    }
                                    
                                }
                                elseif($rowAccount->account_no == 150410) {
                                    if($invoiceStatus == 2){
                                       // $ppn1 = $ppn * -1;
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";	 
                                    }else{
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";	
                                    } 
                                }
                                elseif($rowAccount->account_no == $a_pph) {
                                    if($invoiceStatus == 2){
                                       // $pph1 = $pph * -1; 
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph})";	 
                                    }else{
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph})";	
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                    }elseif($invoiceMethod = 2){
                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in (210105, 150410, '{$account_no}', '{$a_pph}')";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                        
                        if($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while($rowAccount = $resultAccount->fetch_object()) {
                                if($insertValues != "") {
                                    $insertValues .= ", ";
                                }
                                
                                if($rowAccount->account_no == $account_no) {
                                    
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                    
                                } elseif($rowAccount->account_no == 210105) {
                                    
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
                                    
                                }
                                elseif($rowAccount->account_no == 150410) {
                                    
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";
                                    
                                }
                                elseif($rowAccount->account_no == $a_pph) {
                                    
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph})";
                                    
                                } 
                            }
                        } else {
                            $boolContinue = false;
                        }
                    }
                        
                } else {
                    $boolContinue = false;
                }
	        }
	    }	
        // </editor-fold>
    }elseif($invoiceId != 'NULL' && $source == 'INVOICE DETAIL' ) {
        // <editor-fold defaultstate="collapsed" desc="invoiceDetail">
        
        $sql = "DELETE FROM general_ledger WHERE invoice_id = {$invoiceId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
         $sql = "SELECT id.*,i.*, a.`account_no`, a.`account_type`, apph.`account_no` AS a_pph FROM invoice_detail id
				LEFT JOIN invoice i ON i.`invoice_id` = id.`invoice_id`
				LEFT JOIN account a ON id.`account_id` = a.`account_id`
				LEFT JOIN tax txpph ON id.`pphID` = txpph.`tax_id`
				LEFT JOIN tax txppn ON id.`ppnID` = txppn.`tax_id`
				LEFT JOIN account apph ON apph.`account_id` = txpph.`account_id` 
				WHERE id.invoice_detail_id = {$invoiceId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
			
				/*if($row->amount_converted == 0 && $row->amount == 0 && $row->pph_converted == 0 && $row->ppn_converted != 0){
					$amount = $row->tamount_converted;
				}else{*/
					$amount = $row->amount_converted;
				//}
				$ppn = $row->ppn_converted;
                $pph = $row->pph_converted;
				$totalAmount = $row->tamount_converted;
				$account_no = $row->account_no;
				$invoiceMethod = $row->invoice_method_detail;
				$gvId = $row->general_vendor_id;
				$paymentStatus = $row->payment_status;
				$invoiceStatus = $row->invoice_status;
				
				if($invoiceMethod = 1){/* DP ADMIN BANK*/
					
			
				$sql9 = "SELECT idp.*, id.invoice_id, aid.`account_no` AS accNo, adp.`account_no` AS acc_pph, dptx.tax_value AS pph_dp, id.pph AS dpPPh,
                        adpppn.`account_no` AS acc_ppn, dpppn.tax_value AS ppn_dp, id.ppn AS dpPPn FROM invoice_dp idp
                        LEFT JOIN invoice_detail id ON id.`invoice_detail_id` = idp.invoice_detail_dp
                        LEFT JOIN tax dptx ON id.`pphID` = dptx.`tax_id`
                        LEFT JOIN account adp ON dptx.`account_id` = adp.`account_id`
                        LEFT JOIN tax dpppn ON id.`ppnID` = dpppn.`tax_id`
                        LEFT JOIN account adpppn ON dpppn.`account_id` = adpppn.`account_id`  
                        LEFT JOIN account aid ON aid.`account_id` = id.`account_id`       
                        WHERE idp.invoice_detail_id = {$invoiceId} AND aid.`account_no` = 700080 ORDER BY id.invoice_id ASC";
				$result9 = $myDatabase->query($sql9, MYSQLI_STORE_RESULT);
        
				if($result9 !== false && $result9->num_rows >= 0) {
				while($row9 = $result9->fetch_object()) {
					//echo 'test2';
			   			$tamount2 = $row9->amount_payment;
						$i_id2 = $row9->invoice_id;
						$accNo2 = $row9->accNo;
						//$accountNo = $row8->accNo;
						//$ppnDP = $row8->ppn_converted;
						//$pphDP = $row8->pph_converted;
						$acc_ppn2 = $row9->acc_ppn;
						$acc_pph2 = $row9->acc_pph;
						if($row9->dpPPn == 0){
						$ppnDP2 = 0;	
						}else{
						$ppnDP2 = $tamount2 * ($row9->ppn_dp/100);
						}
						if($row9->dpPPh == 0){
						$pphDP2 = 0;	
						}else{
						$pphDP2 = $tamount2 * ($row9->pph_dp/100);
						}
						echo $accNo2;
						
			
			$sqlAccountDP2 = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in ('{$acc_pph2}', 150410 , 700080)";
                $resultAccountDP2 = $myDatabase->query($sqlAccountDP2, MYSQLI_STORE_RESULT);
                
                if($resultAccountDP2 !== false && $resultAccountDP2->num_rows > 0) {
                    while($rowAccountDP2 = $resultAccountDP2->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
						
			 			if($rowAccountDP2->account_no == 700080) {
							
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, {$i_id2}, 0, {$rowAccountDP2->account_id}, NULL, {$tamount2})";
							
                        }elseif($rowAccountDP2->account_no == 150410) {
							
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, {$i_id2}, 0, {$rowAccountDP2->account_id}, NULL, {$ppnDP2})";	
							
                        }
						 elseif($rowAccountDP2->account_no == $acc_pph2) {
							 
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, {$i_id2}, 0, {$rowAccountDP2->account_id}, NULL, {$pphDP2})";	 
							 
						 }
			}
		}
	  }
	}else {
                    $boolContinue = false;
			
				echo 'FALSE2';
				echo $gvId;
			
                }
			}
			
			if($invoiceMethod = 1){
					
			
				$sql8 = "SELECT idp.*, id.invoice_id, aid.`account_no` AS accNo, adp.`account_no` AS acc_pph, dptx.tax_value AS pph_dp, id.pph AS dpPPh,
                        adpppn.`account_no` AS acc_ppn, dpppn.tax_value AS ppn_dp, id.ppn AS dpPPn FROM invoice_dp idp
                        LEFT JOIN invoice_detail id ON id.`invoice_detail_id` = idp.invoice_detail_dp
                        LEFT JOIN tax dptx ON id.`pphID` = dptx.`tax_id`
                        LEFT JOIN account adp ON dptx.`account_id` = adp.`account_id`
                        LEFT JOIN tax dpppn ON id.`ppnID` = dpppn.`tax_id`
                        LEFT JOIN account adpppn ON dpppn.`account_id` = adpppn.`account_id`  
                        LEFT JOIN account aid ON aid.`account_id` = id.`account_id`       
                        WHERE idp.invoice_detail_id = {$invoiceId} AND aid.`account_no` != 700080 ORDER BY id.invoice_id ASC";
				$result8 = $myDatabase->query($sql8, MYSQLI_STORE_RESULT);
        
				if($result8 !== false && $result8->num_rows >= 0) {
				while($row8 = $result8->fetch_object()) {
					//echo 'test2';
			   			$tamount = $row8->amount_payment;
						$i_id = $row8->invoice_id;
						$accNo = $row8->accNo;
						//$accountNo = $row8->accNo;
						//$ppnDP = $row8->ppn_converted;
						//$pphDP = $row8->pph_converted;
						$acc_ppn = $row8->acc_ppn;
						$acc_pph = $row8->acc_pph;
						if($row8->dpPPn == 0){
						$ppnDP = 0;	
						}else{
						$ppnDP = $tamount * ($row8->ppn_dp/100);
						}
						if($row8->dpPPh == 0){
						$pphDP = 0;	
						}else{
						$pphDP = $tamount * ($row8->pph_dp/100);
						}
						echo $accNo;
						
						$amountDp = ($tamount + $ppnDP) - $pphDP;
						$totalAmountDp = $totalAmountDp + $amountDp;
						
			
			$sqlAccountDP = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in ('{$acc_pph}', 150410 ,'{$accNo}')";
                $resultAccountDP = $myDatabase->query($sqlAccountDP, MYSQLI_STORE_RESULT);
                
                if($resultAccountDP !== false && $resultAccountDP->num_rows > 0) {
                    while($rowAccountDP = $resultAccountDP->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
						
			 			if($rowAccountDP->account_no == $accNo) {
							
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$tamount})";
							
                        }elseif($rowAccountDP->account_no == 150410) {
							
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$ppnDP})";	
							
                        }
						 elseif($rowAccountDP->account_no == $acc_pph) {
							 
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$pphDP})";	 
							 
						 }
			}
		}
	  }
	}else {
                    $boolContinue = false;
			
				echo 'FALSE3';
				echo $gvId;
			
                }
			}
			
			
			if($invoiceMethod = 1){
					
				if($pph == 0){
					$a_pph = 0;
				}else{
					$a_pph = $row->a_pph;
				}
				
				//echo $row->account_type;
				//echo $account_no;
				//echo $a_pph;
                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in (210105, 150410, '{$account_no}', '{$a_pph}')";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
                        
                        if($rowAccount->account_no == $account_no) {
							if($amount < 0){
								$amount1 = $amount ;
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";	
							}else{
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
							}
							
                        }  elseif($rowAccount->account_no == 210105) {
							// $totalAmount = $totalAmount - $totalAmountDp;
							if($totalAmount < 0){
								$totalAmount1 = $totalAmount;
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
							}
							
                        }
						 elseif($rowAccount->account_no == 150410) {
							if($ppn < 0){
								$ppn1 = $ppn ;
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn1})";	 
							}else{
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";	
							} 
                        }
						 elseif($rowAccount->account_no == $a_pph) {
							if($pph < 0){
								$pph1 = $pph; 
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph1})";	 
							}else{
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph})";	
							}
                        }
                    }
                } else {
                    $boolContinue = false;
                }
			}elseif($invoiceMethod = 2){
				$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in (210105, 150410, '{$account_no}', '{$a_pph}')";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
                        
                        if($rowAccount->account_no == $account_no) {
							
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";	
							
                        } elseif($rowAccount->account_no == 210105) {
							
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";	
							
                        }
						 elseif($rowAccount->account_no == 150410) {
							
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";	 
							 
                        }
						 elseif($rowAccount->account_no == $a_pph) {
							 
							 $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph})";	 
							 
                        } 
                    }
                } else {
                    $boolContinue = false;
                }
			}
				
        } else {
            $boolContinue = false;
        }
		
        // </editor-fold>
    } elseif($invoiceNotimId != 'NULL' && ($source == 'INVOICE NOTIM' || $source == 'RETURN INVOICE NOTIM' )) {
        // <editor-fold defaultstate="collapsed" desc="invoiceDetail">
        // echo 'Y';
        if($source == 'INVOICE NOTIM'){
            $sql = "DELETE FROM general_ledger WHERE invoice_notim_id = {$invoiceNotimId} AND general_ledger_module = 'INVOICE NOTIM'";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            echo " delete " . $sql;

        }else if($source == 'RETURN INVOICE NOTIM'){
            $sql = "DELETE FROM general_ledger WHERE invoice_notim_id = {$invoiceNotimId} AND general_ledger_module = 'RETURN INVOICE NOTIM'";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);    
        }

        $sql = "SELECT pp.payment_method, pp.total_dpp as original_amount2, 
                        pp.grand_total as amount2, inv.* FROM invoice_notim inv
                LEFT JOIN pengajuan_payment pp ON pp.`idPP` = inv.`idPP`
                WHERE inv.`inv_notim_id` = {$invoiceNotimId}";

        echo $sql;
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
			$invoiceStatus = $row->invoice_status;
         

            if($row->freightId != 'NULL' && $row->freightId != '' && $row->freightId != 0){ //FREIGHT
                if($invoiceStatus == 2){
                    $wherePropertyA = "pa.old_inv_id";
                }else{
                    $wherePropertyA = "pa.inv_notim_id";
                }
                if ($row->payment_method == 3 && $row->amount2 == 0){ //settle
                    $sqlDP = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph, appn.`account_no` AS a_ppn, ppd.`dpp_dp_settle` as dpp, 
                                    ppd.`dp_pph_value` as pph_amount, ppd.`dp_ppn_value` as ppn_amount, 
                                    (ppd.settle_amount) AS amount
                            FROM invoice_notim inv
                            INNER JOIN pengajuan_payment_dp ppd ON ppd.inv_notim_id = inv.inv_notim_id
                            LEFT JOIN freight f ON f.`freight_id` = inv.`freightId`
                            LEFT JOIN tax fpph ON fpph.`tax_id` = f.`pph_tax_id`
                            LEFT JOIN account apph ON apph.`account_id` = fpph.`account_id`
                            LEFT JOIN tax fppn ON fppn.`tax_id` = f.`ppn_tax_id`
                            LEFT JOIN account appn ON appn.`account_id` = fppn.`account_id`
                            WHERE inv.`inv_notim_id`= {$invoiceNotimId}";
                    $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                    // echo $sqlDP;       
                    if($resultDP !== false && $resultDP->num_rows > 0) {
                        while($rowDP = $resultDP->fetch_object()) {                
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (130003, 210103 , '{$rowDP->a_pph}', '{$rowDP->a_ppn}')";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if($rowAccount->account_no == 130003) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->dpp})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->dpp})";	
                                        }
                                    }elseif($rowAccount->account_no == $rowDP->a_pph) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(2, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->pph_amount})";	 
                                        }else{
                                            $insertValues .= "(1, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->pph_amount})";	 
                                        }
                                    } elseif($rowAccount->account_no == $rowDP->a_ppn) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(1, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->ppn_amount})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->ppn_amount})";	
                                        }
                                    }elseif($rowAccount->account_no == 210103) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(2, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->amount})";	
                                        }else{
                                            $insertValues .= "(1, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->amount})";	
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                            }	         
                        }
                    }

                    $sqlAccount2 = "SELECT inv.inv_notim_id, pa.`transaction_id`, t.`freight_price`, t.`freight_quantity`, pa.pph_id, 
                                            f.`freight_rule`, af.`account_no` AS aFreight, t.send_weight, 
                                            pa.`ppn_id` AS fppn , appn.`account_no` AS appn, pa.`ppn_value`, pa.pph_value, pa.total_amount, pa.shrink, pa.dpp, (pa.dpp - pa.shrink) as amount
                                    FROM invoice_notim inv
                                    LEFT JOIN payment_oa pa ON {$wherePropertyA} = inv.inv_notim_id
                                    LEFT JOIN `transaction` t ON t.`transaction_id` = pa.`transaction_id`
                                    LEFT JOIN freight_cost fc ON fc.`freight_cost_id` = t.`freight_cost_id`
                                    LEFT JOIN freight f ON f.`freight_id` = fc.`freight_id`
                                    LEFT JOIN tax ftx ON ftx.`tax_id` = t.`fc_tax_id`
                                    LEFT JOIN account af ON af.`account_id` = ftx.`account_id`
                                    LEFT JOIN tax fppn ON fppn.`tax_id` = f.`ppn_tax_id`
                                    LEFT JOIN account appn ON appn.`account_id` = fppn.`account_id`
                                    WHERE inv.`inv_notim_id` = {$invoiceNotimId}";
                        $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                        //  echo $sqlAccount2;
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {	
                            $totalFreightPrice = 0; $totalDpp = 0; $totalShrink = 0; $creditFreightPrice = 0;
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 2 AND account_no in (123456, 520100, '{$rowAccount2->aFreight}', '{$rowAccount2->appn}', 210103)";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                            //$taxValue = 0;
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                if($rowAccount2->fppn != '' || $rowAccount2->fppn != 0){
                                    $taxPPN = $rowAccount2->ppn_value;
                                }else{
                                    $taxPPN = 0;
                                }
                                if($rowAccount2->pph_id != '' || $rowAccount2->pph_id != 0){
                                    $taxValue = $rowAccount2->pph_value;
                                }else{
                                    $taxValue = 0;
                                }

                                if($rowAccount2->freight_price != '' && $rowAccount2->freight_price > 0) {
                                    $totalDpp = $rowAccount2->dpp;
                                    $totalShrink =  $rowAccount2->shrink;
                                    $totalFreightPrice =  $rowAccount2->amount;
                                    $creditFreightPrice = $totalFreightPrice + ($totalFreightPrice * ($taxPPN/100)) - ($totalFreightPrice * ($taxValue/100));
                                }else {
                                    $totalFreightPrice = 0;
                                    $creditFreightPrice = 0;
                                }
                                
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if($rowAccount->account_no == 123456) { //Unbilled Goods OA
                                        if($invoiceStatus == 2){ //2 = credit
                                            // $totalFreightPrice1 = $totalDpp * -1;
                                            $totalFreightPrice1 = $totalDpp;
                                            $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, 'Return Journal', {$totalFreightPrice1})";
                                        }else{ //1 = debit
                                            $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalDpp})";
                                        }
                                    }elseif($rowAccount->account_no == 520100) {  //SHRINK
                                        if($invoiceStatus == 2){ //2 = debit
                                           // $totalShrink1 = $totalShrink * -1;
                                            $totalShrink1 = $totalShrink;
                                            $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, 'Return Journal', {$totalShrink1})";
                                        }else{ 
                                            $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalShrink})";
                                        }
                                    }elseif($rowAccount->account_no == $rowAccount2->aFreight) { //pph
                                        $amount = $totalFreightPrice * ($taxValue / 100);
                                        if($invoiceStatus == 2){
                                            // $amount1 = $amount * -1;
                                            $amount1 = $amount;
                                            $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amount1})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                        }
                                    } elseif($rowAccount->account_no == $rowAccount2->appn) { //PPn/VAT
                                        $amountPPN = $totalFreightPrice * ($taxPPN / 100);
                                        if($invoiceStatus == 2){
                                            // $amountPPN1 = $amountPPN * -1;
                                            $amountPPN1 = $amountPPN;
                                            $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amountPPN1})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
                                        }
                                    }elseif($rowAccount->account_no == 210103) { //Account Payable OA (hutang dagang)
                                        if($invoiceStatus == 2){
                                            // $creditFreightPrice1 = $creditFreightPrice * -1;
                                            $creditFreightPrice1 = $creditFreightPrice;
                                            $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$creditFreightPrice1})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$creditFreightPrice})";
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                                echo 'e';
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }

                }else if (($row->payment_method == 1 || $row->payment_method == 3) && $row->amount2 > 0){//payment	oa

                    if($row->payment_method == 3){ //SETTLE TAPI ADA PAYMENT
                        $sqlDP = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph, appn.`account_no` AS a_ppn, ppd.`dpp_dp_settle` as dpp, 
                                    ppd.`dp_pph_value` as pph_amount, ppd.`dp_ppn_value` as ppn_amount, 
                                    (ppd.settle_amount) AS amount
                            FROM invoice_notim inv
                            INNER JOIN pengajuan_payment_dp ppd ON ppd.inv_notim_id = inv.inv_notim_id
                            LEFT JOIN freight f ON f.`freight_id` = inv.`freightId`
                            LEFT JOIN tax fpph ON fpph.`tax_id` = f.`pph_tax_id`
                            LEFT JOIN account apph ON apph.`account_id` = fpph.`account_id`
                            LEFT JOIN tax fppn ON fppn.`tax_id` = f.`ppn_tax_id`
                            LEFT JOIN account appn ON appn.`account_id` = fppn.`account_id`
                            WHERE inv.`inv_notim_id`= {$invoiceNotimId}";
                        $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                    // echo $sqlDP;       
                        if($resultDP !== false && $resultDP->num_rows > 0) {
                            while($rowDP = $resultDP->fetch_object()) {                
                                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (130003, 210103 , '{$rowDP->a_pph}', '{$rowDP->a_ppn}')";
                                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                    while($rowAccount = $resultAccount->fetch_object()) {
                                        if($insertValues != "") {
                                            $insertValues .= ", ";
                                        }

                                        if($rowAccount->account_no == 130003) {
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->dpp})";	
                                            }else{
                                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->dpp})";	
                                            }
                                        }  elseif($rowAccount->account_no == $rowDP->a_pph) {
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(2, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->pph_amount})";	
                                            }else{
                                                $insertValues .= "(1, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->pph_amount})";	
                                            }
                                        } elseif($rowAccount->account_no == $rowDP->a_ppn) {
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(1, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->ppn_amount})";	
                                            }else{
                                                $insertValues .= "(2, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->ppn_amount})";	 
                                            }
                                        }elseif($rowAccount->account_no == 210103) {
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(2, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->amount})";	
                                            }else{
                                                $insertValues .= "(1, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->amount})";	
                                            }
                                        }
                                    }
                                } else {
                                    $boolContinue = false;
                                }	         
                            }
                        }
                    }

                    $sqlAccount2 = "SELECT inv.inv_notim_id, pa.`transaction_id`, t.`freight_price`, t.`freight_quantity`, pa.pph_id, 
                                f.`freight_rule`, af.`account_no` AS aFreight, t.send_weight, 
                                pa.`ppn_id` AS fppn , appn.`account_no` AS appn, pa.`ppn_value`, pa.pph_value, pa.total_amount, pa.shrink, pa.dpp, (pa.dpp - pa.shrink) as amount
                                FROM invoice_notim inv
                                LEFT JOIN payment_oa pa ON {$wherePropertyA} = inv.inv_notim_id
                                LEFT JOIN `transaction` t ON t.`transaction_id` = pa.`transaction_id`
                                LEFT JOIN freight_cost fc ON fc.`freight_cost_id` = t.`freight_cost_id`
                                LEFT JOIN freight f ON f.`freight_id` = fc.`freight_id`
                                LEFT JOIN tax ftx ON ftx.`tax_id` = t.`fc_tax_id`
                                LEFT JOIN account af ON af.`account_id` = ftx.`account_id`
                                LEFT JOIN tax fppn ON fppn.`tax_id` = f.`ppn_tax_id`
                                LEFT JOIN account appn ON appn.`account_id` = fppn.`account_id`
                                WHERE inv.`inv_notim_id` = {$invoiceNotimId}";
                        $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                        //  echo $sqlAccount2;
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {	
                            $totalFreightPrice = 0; $totalDpp = 0; $totalShrink = 0; $creditFreightPrice = 0;
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 2 AND account_no in (123456, 520100, '{$rowAccount2->aFreight}', '{$rowAccount2->appn}', 210103)";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                            //$taxValue = 0;
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                if($rowAccount2->fppn != '' || $rowAccount2->fppn != 0){
                                    $taxPPN = $rowAccount2->ppn_value;
                                }else{
                                    $taxPPN = 0;
                                }
                                if($rowAccount2->pph_id != '' || $rowAccount2->pph_id != 0){
                                    $taxValue = $rowAccount2->pph_value;
                                }else{
                                    $taxValue = 0;
                                }

                                if($rowAccount2->freight_price != '' && $rowAccount2->freight_price > 0) {
                                    $totalDpp = $rowAccount2->dpp;
                                    $totalShrink =  $rowAccount2->shrink;
                                    $totalFreightPrice =  $rowAccount2->amount;
                                    $creditFreightPrice = $totalFreightPrice + ($totalFreightPrice * ($taxPPN/100)) - ($totalFreightPrice * ($taxValue/100));
                                }else {
                                    $totalFreightPrice = 0;
                                    $creditFreightPrice = 0;
                                }
                                
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if($rowAccount->account_no == 123456) { //Unbilled Goods OA
                                        if($invoiceStatus == 2){ //2 = credit
                                            // $totalFreightPrice1 = $totalDpp * -1;
                                            $totalFreightPrice1 = $totalDpp;
                                            $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, 'Return Journal', {$totalFreightPrice1})";
                                        }else{ //1 = debit
                                            $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalDpp})";
                                        }
                                    }elseif($rowAccount->account_no == 520100) {  //SHRINK
                                        if($invoiceStatus == 2){ //2 = debit
                                            // $totalShrink1 = $totalShrink * -1;
                                            $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, 'Return Journal', {$totalShrink})";
                                        }else{ //1 = credit
                                            $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalShrink})";
                                        }
                                    }elseif($rowAccount->account_no == $rowAccount2->aFreight) { //pph
                                        $amount = $totalFreightPrice * ($taxValue / 100);
                                        if($invoiceStatus == 2){
                                            // $amount1 = $amount * -1;
                                            $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amount})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                        }
                                    } elseif($rowAccount->account_no == $rowAccount2->appn) { //PPn/VAT
                                        $amountPPN = $totalFreightPrice * ($taxPPN / 100);
                                        if($invoiceStatus == 2){
                                            // $amountPPN1 = $amountPPN * -1;
                                            $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amountPPN})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
                                        }
                                    }elseif($rowAccount->account_no == 210103) { //Account Payable OA (hutang dagang)
                                        if($invoiceStatus == 2){
                                            // $creditFreightPrice1 = $creditFreightPrice * -1;
                                            $creditFreightPrice1 = $creditFreightPrice;
                                            $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$creditFreightPrice1})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$creditFreightPrice})";
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                                echo 'e';
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }elseif ($row->payment_method == 2){ //Downpayment
                    $sql = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph, appn.`account_no` AS a_ppn,pp.`total_dpp` as dpp, 
                                    pp.`total_pph_amount` as pph_amount, pp.`total_ppn_amount` as ppn_amount, 
                                    (pp.grand_total) AS amount
                            FROM invoice_notim inv
                            LEFT JOIN freight f ON f.`freight_id` = inv.`freightId`
                            LEFT JOIN tax fpph ON fpph.`tax_id` = f.`pph_tax_id`
                            LEFT JOIN account apph ON apph.`account_id` = fpph.`account_id`
                            LEFT JOIN tax fppn ON fppn.`tax_id` = f.`ppn_tax_id`
                            LEFT JOIN account appn ON appn.`account_id` = fppn.`account_id`
                            LEFT JOIN pengajuan_payment pp ON pp.`idPP` = inv.`idPP`
                            WHERE inv.`inv_notim_id`= {$invoiceNotimId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    // echo $sql;
                    if($result !== false && $result->num_rows == 1) {
                    $row = $result->fetch_object();
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (130003, 210103 , '{$row->a_pph}', '{$row->a_ppn}')";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                        if($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while($rowAccount = $resultAccount->fetch_object()) {
                                if($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if($rowAccount->account_no == 130003) {
                                    if($invoiceStatus == 2){
                                        $insertValues .= "(2, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->dpp})";	
                                    }else{
                                        $insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->dpp})";	
                                    }
                                }  elseif($rowAccount->account_no == $row->a_pph) {
                                    if($invoiceStatus == 2){
                                        $insertValues .= "(1, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->pph_amount})";	
                                    }else{
                                        $insertValues .= "(2, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_amount})";	
                                    }
                                } elseif($rowAccount->account_no == $row->a_ppn) {
                                    if($invoiceStatus == 2){
                                        $insertValues .= "(2, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->ppn_amount})";	
                                    }else{
                                        $insertValues .= "(1, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_amount})";	
                                    }
                                }elseif($rowAccount->account_no == 210103) {
                                    if($invoiceStatus == 2){
                                        $insertValues .= "(1, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->amount})";	
                                    }else{
                                        $insertValues .= "(2, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount})";	
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                    }
                }
            } else if($row->laborId != 'NULL' && $row->laborId != '' && $row->laborId != 0){ //UNLOADING
                if($invoiceStatus == 2){
                    $wherePropertyA = "pb.old_inv_id";
                }else{
                    $wherePropertyA = "pb.inv_notim_id";
                }
                if ($row->payment_method == 3 && $row->amount2 == 0){ //settle
                    //----------------------------- DP YG DIPAKE -------------------------
                    $sqlDP = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph, appn.`account_no` AS a_ppn, ppd.`dpp_dp_settle` as dpp, 
                                        ppd.`dp_pph_value` as pph_amount, ppd.`dp_ppn_value` as ppn_amount, (ppd.settle_amount) AS amount
                                FROM invoice_notim inv
                                INNER JOIN pengajuan_payment_dp ppd ON ppd.inv_notim_id = inv.inv_notim_id
                                LEFT JOIN labor l ON l.`labor_id` = inv.`laborId`
                                LEFT JOIN tax lpph ON lpph.`tax_id` = l.`pph_tax_id`
                                LEFT JOIN account apph ON apph.`account_id` = lpph.`account_id`
                                LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
                                LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
                                WHERE inv.`inv_notim_id`= {$invoiceNotimId}";
                    $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                        
                    if($resultDP !== false && $resultDP->num_rows > 0) {
                        while($rowDP = $resultDP->fetch_object()) {					
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (3, 7) AND account_no in (130004, 210104, '{$rowDP->a_pph}', '{$rowDP->a_ppn}')";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }
                                    if($rowAccount->account_no == 130004) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->dpp})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->dpp})";	
                                        }
                                    }  elseif($rowAccount->account_no == $rowDP->a_pph) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->pph_amount})";	
                                        }else{
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->pph_amount})";	
                                        }
                                    } elseif($rowAccount->account_no == $rowDP->a_ppn) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->ppn_amount})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->ppn_amount})";	
                                        }
                                    }elseif($rowAccount->account_no == 210104) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->amount})";	
                                        }else{
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->amount})";	
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                            }		
                        }
                    }

                    //----------------------- NILAI PENGAJUAN YG DIPAKE ---------------------------
                    $sqlAccount2 = "SELECT inv.*, pb.`transaction_id`, t.`unloading_price`, 
                                            t.`quantity`, t.`uc_tax_id`, al.`account_no` AS aLabor, t.send_weight, 
                                            pb.`pph_id` , pb.`pph_id` AS lppn, appn.`account_no` AS appn, pb.`ppn_value`, 
                                            pb.pph_value, pb.total_amount,
                                            pb.dpp as amount
                                    FROM invoice_notim inv
                                    LEFT JOIN payment_ob pb ON {$wherePropertyA} = inv.inv_notim_id
                                    LEFT JOIN `transaction` t ON t.`transaction_id` = pb.`transaction_id`
                                    LEFT JOIN unloading_cost uc ON uc.`unloading_cost_id` = t.`unloading_cost_id`
                                    LEFT JOIN labor l ON l.`labor_id` = t.`labor_id`
                                    LEFT JOIN tax ltx ON ltx.`tax_id` = t.`uc_tax_id`
                                    LEFT JOIN account al ON al.`account_id` = ltx.`account_id`
                                    LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
                                    LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
                                    WHERE inv.`inv_notim_id` = {$invoiceNotimId}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);

                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {	
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 3 AND account_no in (123457, '{$rowAccount2->aLabor}', '{$rowAccount2->appn}', 210104)";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            //$taxValue = 0;
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                if($rowAccount2->lppn != '' && $rowAccount2->lppn != 0){
                                    $taxPPN = $rowAccount2->ppn_value;
                                }else{
                                    $taxPPN = 0;
                                }

                                if($rowAccount2->pph_id != '' || $rowAccount2->pph_id != 0){
                                    $taxValue = $rowAccount2->pph_value;
                                }else{
                                    $taxValue = 0;
                                }

                                if($rowAccount2->unloading_price != '' && $rowAccount2->unloading_price > 0) {
                                    $totalDpp = $rowAccount2->amount;
                                    $totalUnloadingPrice =  $rowAccount2->amount;
                                    $creditUnloadingPrice = $totalUnloadingPrice + ($totalUnloadingPrice * ($taxPPN/100)) - ($totalUnloadingPrice * ($taxValue/100));
                                }else {
                                    $totalUnloadingPrice = 0;
                                    $creditUnloadingPrice = 0;
                                }
                                
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if($rowAccount->account_no == 123457) { //unbilled goods
                                        if($invoiceStatus == 2){
                                            $totalUnloadingPrice1 = $totalUnloadingPrice;
                                             $insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, 'Return Journal', {$totalUnloadingPrice1})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalUnloadingPrice})";
                                        }
                                    } elseif($rowAccount->account_no == $rowAccount2->aLabor) {
                                        $amount = $totalUnloadingPrice * ($taxValue / 100);
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amount})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                        }
                                    } elseif($rowAccount->account_no == $rowAccount2->appn) {
                                        $amountPPN = $totalUnloadingPrice * ($taxPPN / 100);
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amountPPN})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
                                        }
                                    }elseif($rowAccount->account_no == 210104) {
                                        if($invoiceStatus == 2){
                                            $creditUnloadingPrice1 = $creditUnloadingPrice;
                                            $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$creditUnloadingPrice1})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$creditUnloadingPrice})";
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                            }         
                        }
                    } else {
                        $boolContinue = false;
                    }
                } else if (($row->payment_method == 1 || $row->payment_method == 3) && $row->amount2 > 0){ //PAYMENT	
                    
                    if($row->payment_method == 3){
                        //----------------------------- SETTLE TAPI ADA PAYMENT -------------------------
                        $sqlDP = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph, appn.`account_no` AS a_ppn, ppd.`dpp_dp_settle` as dpp, 
                                        ppd.`dp_pph_value` as pph_amount, ppd.`dp_ppn_value` as ppn_amount, (ppd.settle_amount) AS amount
                            FROM invoice_notim inv
                            INNER JOIN pengajuan_payment_dp ppd ON ppd.inv_notim_id = inv.inv_notim_id
                            LEFT JOIN labor l ON l.`labor_id` = inv.`laborId`
                            LEFT JOIN tax lpph ON lpph.`tax_id` = l.`pph_tax_id`
                            LEFT JOIN account apph ON apph.`account_id` = lpph.`account_id`
                            LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
                            LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
                            WHERE inv.`inv_notim_id`= {$invoiceNotimId}";
                        $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);

                        if($resultDP !== false && $resultDP->num_rows > 0) {
                            while($rowDP = $resultDP->fetch_object()) {					
                                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (3, 7) AND account_no in (130004, 210104, '{$rowDP->a_pph}', '{$rowDP->a_ppn}')";
                                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                    while($rowAccount = $resultAccount->fetch_object()) {
                                        if($insertValues != "") {
                                            $insertValues .= ", ";
                                        }
                                        if($rowAccount->account_no == 130004) {
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->dpp})";	
                                            }else{
                                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->dpp})";	
                                            }
                                        }  elseif($rowAccount->account_no == $rowDP->a_pph) {
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->pph_amount})";	
                                            }else{
                                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->pph_amount})";	
                                            }
                                        } elseif($rowAccount->account_no == $rowDP->a_ppn) {
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->ppn_amount})";	
                                            }else{
                                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->ppn_amount})";	
                                            }
                                        }elseif($rowAccount->account_no == 210104) {
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->amount})";	
                                            }else{
                                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->amount})";	
                                            }
                                        }
                                    }
                                } else {
                                    $boolContinue = false;
                                }		
                            }
                        }
                    }
                    
                    $sqlAccount2 = "SELECT inv.*, pb.`transaction_id`, t.`unloading_price`, 
                                    t.`quantity`, t.`uc_tax_id`, al.`account_no` AS aLabor, t.send_weight, 
                                    pb.`pph_id` , pb.`pph_id` AS lppn, appn.`account_no` AS appn, pb.`ppn_value`, 
                                    pb.pph_value, pb.total_amount,
                                    pb.dpp as amount
                                    FROM invoice_notim inv
                                    LEFT JOIN payment_ob pb ON  {$wherePropertyA} = inv.inv_notim_id
                                    LEFT JOIN `transaction` t ON t.`transaction_id` = pb.`transaction_id`
                                    LEFT JOIN unloading_cost uc ON uc.`unloading_cost_id` = t.`unloading_cost_id`
                                    LEFT JOIN labor l ON l.`labor_id` = t.`labor_id`
                                    LEFT JOIN tax ltx ON ltx.`tax_id` = t.`uc_tax_id`
                                    LEFT JOIN account al ON al.`account_id` = ltx.`account_id`
                                    LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
                                    LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
                                    WHERE inv.`inv_notim_id` = {$invoiceNotimId}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                    // echo " --- LABOR --- " . $sqlAccount2;
                        
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {	
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 3 AND account_no in (123457, '{$rowAccount2->aLabor}', '{$rowAccount2->appn}', 210104)";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            //$taxValue = 0;
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                if($rowAccount2->lppn != '' && $rowAccount2->lppn != 0){
                                    $taxPPN = $rowAccount2->ppn_value;
                                }else{
                                    $taxPPN = 0;
                                }

                                if($rowAccount2->pph_id != '' || $rowAccount2->pph_id != 0){
                                    $taxValue = $rowAccount2->pph_value;
                                }else{
                                    $taxValue = 0;
                                }

                                if($rowAccount2->unloading_price != '' && $rowAccount2->unloading_price > 0) {
                                    $totalDpp = $rowAccount2->amount;
                                    $totalUnloadingPrice =  $rowAccount2->amount;
                                    $creditUnloadingPrice = $totalUnloadingPrice + ($totalUnloadingPrice * ($taxPPN/100)) - ($totalUnloadingPrice * ($taxValue/100));
                                }else {
                                    $totalUnloadingPrice = 0;
                                    $creditUnloadingPrice = 0;
                                }
                                
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if($rowAccount->account_no == 123457) { //unbilled goods
                                        if($invoiceStatus == 2){
                                            $totalUnloadingPrice1 = $totalUnloadingPrice;
                                        $insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, 'Return Journal', {$totalUnloadingPrice1})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalUnloadingPrice})";
                                        }
                                    } elseif($rowAccount->account_no == $rowAccount2->aLabor) {
                                        $amount = $totalUnloadingPrice * ($taxValue / 100);
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amount})";
                                        }else{
                                             $insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                        }
                                    } elseif($rowAccount->account_no == $rowAccount2->appn) {
                                        $amountPPN = $totalUnloadingPrice * ($taxPPN / 100);
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amountPPN})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
                                        }
                                    }elseif($rowAccount->account_no == 210104) {
                                        if($invoiceStatus == 2){
                                            $creditUnloadingPrice1 = $creditUnloadingPrice;
                                            $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$creditUnloadingPrice1})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$creditUnloadingPrice})";
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                                // echo 'e';
                            }         
                        }
                    } else {
                        $boolContinue = false;
                    }
                    
                }else if ($row->payment_method == 2){ //Down Payment
                    $sql = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph, appn.`account_no` AS a_ppn, pp.`total_dpp` as dpp, 
                                pp.`total_pph_amount` as pph_amount, pp.`total_ppn_amount` as ppn_amount, (pp.grand_total) AS amount
                            FROM invoice_notim inv
                            LEFT JOIN labor l ON l.`labor_id` = inv.`laborId`
                            LEFT JOIN tax lpph ON lpph.`tax_id` = l.`pph_tax_id`
                            LEFT JOIN account apph ON apph.`account_id` = lpph.`account_id`
                            LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
                            LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
                            LEFT JOIN pengajuan_payment pp ON pp.`idPP` = inv.`idPP`
                            WHERE inv.`inv_notim_id`= {$invoiceNotimId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    if($result !== false && $result->num_rows == 1) {
                    $row = $result->fetch_object();
                    //echo 'ZZ';
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (3, 7) AND account_no in (130004 , '{$row->a_pph}', '{$row->a_ppn}', 210104)";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if($rowAccount->account_no == 130004) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->dpp})";	
                                        }else{
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->dpp})";	
                                        }
                                    } elseif($rowAccount->account_no == $row->a_pph) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(1, '{$source}',  'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->pph_amount})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}',  'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_amount})";	
                                        }
                                    } elseif($rowAccount->account_no == $row->a_ppn) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(2, '{$source}',  'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->ppn_amount})";	
                                        }else{
                                            $insertValues .= "(1, '{$source}',  'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_amount})";	
                                        }
                                    }elseif($rowAccount->account_no == 210104) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(1, '{$source}',  'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->amount})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}',  'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount})";	
                                        }
                                    } 
                                }
                            } else {
                                $boolContinue = false;
                            }
                        }
                    }
            
            }else if($row->vendorHandlingId != 'NULL' && $row->vendorHandlingId != '' && $row->vendorHandlingId != 0){ //HANDLING
                if($invoiceStatus == 2){
                    $wherePropertyA = "ph.old_inv_id";
                }else{
                    $wherePropertyA = "ph.inv_notim_id";
                }
                if ($row->payment_method == 3 && $row->amount2 == 0){ //settlement1
                    $sqlDP = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph,appn.`account_no` AS a_ppn,  ppd.`dpp_dp_settle` as dpp, 
                            ppd.`dp_pph_value` as pph_amount,  ppd.`dp_ppn_value` as ppn_amount,  (ppd.settle_amount) AS amount
                                FROM invoice_notim inv
                                INNER JOIN pengajuan_payment_dp ppd ON ppd.inv_notim_id = inv.`inv_notim_id`
                                LEFT JOIN vendor_handling l ON l.`vendor_handling_id` = inv.`vendorHandlingId`
                                LEFT JOIN tax lpph ON lpph.`tax_id` = l.`pph_tax_id`
                                LEFT JOIN account apph ON apph.`account_id` = lpph.`account_id`
                                LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
                                LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
                                WHERE inv.`inv_notim_id`= {$invoiceNotimId}";
                    $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                    // echo "DO " . $sqlDP;
                        
                    if($resultDP !== false && $resultDP->num_rows > 0) {
                        while($rowDP = $resultDP->fetch_object()) {				
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (9, 7) AND account_no in (210106, 130006, '{$rowDP->a_pph}', '{$rowDP->a_ppn}')";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }
        
                                    if($rowAccount->account_no == 130006) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->dpp})";	
                                        }else{
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->dpp})";	
                                        }   
                                    }  elseif($rowAccount->account_no == $rowDP->a_pph) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(2, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->pph_amount})";	
                                        }else{
                                            $insertValues .= "(1, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->pph_amount})";	
                                        }
                                    } elseif($rowAccount->account_no == $rowDP->a_ppn) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(1, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->ppn_amount})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->ppn_amount})";	
                                        }
                                    }elseif($rowAccount->account_no == 210106) {   
                                        if($invoiceStatus == 2){     
                                            $insertValues .= "(1, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->amount})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->amount})";	
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                            }	
                                
                                
                        }
                    }

                    $sqlAccount2 = "SELECT inv.*, ph.`transaction_id`, t.`handling_price`, t.`handling_quantity`, ph.`pph_id`, 
                                            vh.`vendor_handling_rule`, avh.`account_no` AS aVendorHandling, t.send_weight, 
                                            ph.`ppn_id` AS vhppn , appn.`account_no` AS appn, ph.`ppn_value`, ph.pph_value, ph.total_amount as amount,
                                            ph.dpp
                                    FROM invoice_notim inv
                                    LEFT JOIN payment_handling ph ON{$wherePropertyA} = inv.inv_notim_id
                                    LEFT JOIN `transaction` t ON t.`transaction_id` = ph.`transaction_id`
                                    LEFT JOIN vendor_handling vh ON vh.`vendor_handling_id` = inv.`vendorHandlingId`
                                    LEFT JOIN tax vhtx ON vhtx.`tax_id` = vh.`pph_tax_id`
                                    LEFT JOIN account avh ON avh.`account_id` = vhtx.`account_id`
                                    LEFT JOIN tax vhppn ON vhppn.`tax_id` = vh.`ppn_tax_id`
                                    LEFT JOIN account appn ON appn.`account_id` = vhppn.`account_id`
                                    WHERE inv.`inv_notim_id` = {$invoiceNotimId}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 9 AND account_no in (123458, '{$rowAccount2->aVendorHandling}', '{$rowAccount2->appn}', 210106)";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                if($rowAccount2->vhppn != '' && $rowAccount2->vhppn != 0){
                                    $taxPPN = $rowAccount2->ppn_value;
                                }else{
                                    $taxPPN = 0;
                                }

                                if($rowAccount2->pph_id != '' || $rowAccount2->pph_id != 0){
                                    $taxValue = $rowAccount2->pph_value;
                                }else{
                                    $taxValue = 0;
                                }

                                if($rowAccount2->handling_price != '' && $rowAccount2->handling_price > 0) {
                                    $totalDpp = $rowAccount2->dpp;
                                    $totalHandlingPrice =  $rowAccount2->amount;
                                    $creditHandlingPrice = $totalHandlingPrice + ($totalHandlingPrice * ($taxPPN/100)) - ($totalHandlingPrice * ($taxValue/100)) ;
                                }else {
                                    $totalHandlingPrice = 0;
                                    $creditHandlingPrice = 0;
                                    $taxValue = 0;
                                }
                                
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if($rowAccount->account_no == 123458) {
                                        if($invoiceStatus == 2){     
                                            $totalHandlingPrice1 = $totalHandlingPrice;
                                            $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, 'Return Journal', {$totalHandlingPrice1})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalHandlingPrice})";
                                        }
                                    } elseif($rowAccount->account_no == $rowAccount2->aVendorHandling) {
                                        $amount = $totalHandlingPrice * ($taxValue / 100);
                                        if($invoiceStatus == 2){     
                                            $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amount})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                        }
                                    } elseif($rowAccount->account_no == $rowAccount2->appn) {
                                        $amountPPN = $totalHandlingPrice * ($taxPPN / 100);
                                        if($invoiceStatus == 2){     
                                            $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amountPPN})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
                                        }
                                    }elseif($rowAccount->account_no == 210106) {
                                        if($invoiceStatus == 2){     
                                            $creditHandlingPrice1 = $creditHandlingPrice;
                                            $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$creditHandlingPrice1})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$creditHandlingPrice})";
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                            }	    
                        }
                    } else {
                        $boolContinue = false;
                    }

                }else if (($row->payment_method == 1 || $row->payment_method == 3) && $row->amount2 > 0){			
                    if($row->payment_method == 3){
                        $sqlDP = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph,appn.`account_no` AS a_ppn,ppd.`dpp_dp_settle` as dpp, 
                                    ppd.`dp_pph_value` as pph_amount,ppd.`dp_ppn_value` as ppn_amount,  (ppd.settle_amount) AS amount
                                    FROM invoice_notim inv
                                    INNER JOIN pengajuan_payment_dp ppd ON ppd.inv_notim_id = inv.inv_notim_id
                                    LEFT JOIN vendor_handling l ON l.`vendor_handling_id` = inv.`vendorHandlingId`
                                    LEFT JOIN tax lpph ON lpph.`tax_id` = l.`pph_tax_id`
                                    LEFT JOIN account apph ON apph.`account_id` = lpph.`account_id`
                                    LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
                                    LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
                                    WHERE inv.`inv_notim_id`= {$invoiceNotimId}";
                        $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);


                        if($resultDP !== false && $resultDP->num_rows > 0) {
                            while($rowDP = $resultDP->fetch_object()) {				
                                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (9, 7) AND account_no in (210106, '{$rowDP->a_pph}', '{$rowDP->a_ppn}', 130006)";
                                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                                
                                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                    while($rowAccount = $resultAccount->fetch_object()) {
                                        if($insertValues != "") {
                                            $insertValues .= ", ";
                                        }
            
                                        if($rowAccount->account_no == 130006) {
                                            if($invoiceStatus == 2){     
                                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->dpp})";	
                                            } else{
                                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->dpp})";	
                                            } 
                                        }  elseif($rowAccount->account_no == $rowDP->a_pph) {
                                            if($invoiceStatus == 2){   
                                                $insertValues .= "(2, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->pph_amount})";	
                                            }else{
                                                $insertValues .= "(1, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->pph_amount})";	
                                            }
                                        } elseif($rowAccount->account_no == $rowDP->a_ppn) {
                                            if($invoiceStatus == 2){   
                                                $insertValues .= "(1, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->ppn_amount})";	
                                            }else{
                                                $insertValues .= "(2, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->ppn_amount})";	
                                            }
                                        }elseif($rowAccount->account_no == 210106) {  
                                            if($invoiceStatus == 2){        
                                                $insertValues .= "(1, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->amount})";	
                                            }else{
                                                $insertValues .= "(2, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->amount})";	
                                            }
                                        }
                                    }
                                } else {
                                    $boolContinue = false;
                                }	
                                    
                                    
                            }
                        }
                    }

                    $sqlAccount2 = "SELECT inv.*, ph.`transaction_id`, t.`handling_price`, t.`handling_quantity`, ph.`pph_id`, 
                                            vh.`vendor_handling_rule`, avh.`account_no` AS aVendorHandling, t.send_weight, 
                                            ph.`ppn_id` AS vhppn , appn.`account_no` AS appn, ph.`ppn_value`, ph.pph_value, ph.total_amount as amount,
                                            ph.dpp
                                    FROM invoice_notim inv
                                    LEFT JOIN payment_handling ph ON {$wherePropertyA} = inv.inv_notim_id
                                    LEFT JOIN `transaction` t ON t.`transaction_id` = ph.`transaction_id`
                                    LEFT JOIN vendor_handling vh ON vh.`vendor_handling_id` = inv.`vendorHandlingId`
                                    LEFT JOIN tax vhtx ON vhtx.`tax_id` = vh.`pph_tax_id`
                                    LEFT JOIN account avh ON avh.`account_id` = vhtx.`account_id`
                                    LEFT JOIN tax vhppn ON vhppn.`tax_id` = vh.`ppn_tax_id`
                                    LEFT JOIN account appn ON appn.`account_id` = vhppn.`account_id`
                                    WHERE inv.`inv_notim_id` = {$invoiceNotimId}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                        
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 9 AND account_no in (123458, '{$rowAccount2->aVendorHandling}', '{$rowAccount2->appn}', 210106)";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                if($rowAccount2->vhppn != '' && $rowAccount2->vhppn != 0){
                                    $taxPPN = $rowAccount2->ppn_value;
                                }else{
                                    $taxPPN = 0;
                                }

                                if($rowAccount2->pph_id != '' || $rowAccount2->pph_id != 0){
                                    $taxValue = $rowAccount2->pph_value;
                                }else{
                                    $taxValue = 0;
                                }

                                if($rowAccount2->handling_price != '' && $rowAccount2->handling_price > 0) {
                                    $totalDpp = $rowAccount2->dpp;
                                    $totalHandlingPrice =  $rowAccount2->amount;
                                    $creditHandlingPrice = $totalHandlingPrice + ($totalHandlingPrice * ($taxPPN/100)) - ($totalHandlingPrice * ($taxValue/100)) ;
                                }else {
                                    $totalHandlingPrice = 0;
                                    $creditHandlingPrice = 0;
                                    $taxValue = 0;
                                }
                                
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if($rowAccount->account_no == 123458) {
                                        if($invoiceStatus == 2){        
                                            $totalHandlingPrice1 = $totalHandlingPrice;
                                            $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, 'Return Journal', {$totalHandlingPrice1})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalHandlingPrice})";
                                        }
                                    } elseif($rowAccount->account_no == $rowAccount2->aVendorHandling) {
                                        $amount = $totalHandlingPrice * ($taxValue / 100);
                                        if($invoiceStatus == 2){        
                                            $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amount})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                        }
                                    } elseif($rowAccount->account_no == $rowAccount2->appn) {
                                        $amountPPN = $totalHandlingPrice * ($taxPPN / 100);
                                        if($invoiceStatus == 2){        
                                            $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amountPPN})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
                                        }
                                    }elseif($rowAccount->account_no == 210106) {
                                        if($invoiceStatus == 2){        
                                            $creditHandlingPrice1 = $creditHandlingPrice;
                                            $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$creditHandlingPrice1})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$creditHandlingPrice})";
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                            }	    
                        }
                    } else {
                        $boolContinue = false;
                    }
                }else if ($row->payment_method == 2){
                    $sql = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph,appn.`account_no` AS a_ppn,pp.`total_dpp` as dpp, 
                            pp.`total_pph_amount` as pph_amount, pp.`total_ppn_amount` as ppn_amount, (pp.grand_total) AS amount
                            FROM invoice_notim inv
                            LEFT JOIN vendor_handling l ON l.`vendor_handling_id` = inv.`vendorHandlingId`
                            LEFT JOIN tax lpph ON lpph.`tax_id` = l.`pph_tax_id`
                            LEFT JOIN account apph ON apph.`account_id` = lpph.`account_id`
                            LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
                            LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
                            LEFT JOIN pengajuan_payment pp ON pp.`idPP` = inv.`idPP`
                            WHERE inv.`inv_notim_id`= {$invoiceNotimId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($result !== false && $result->num_rows == 1) {
                        $row = $result->fetch_object();
                        //echo 'ZZ';
                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (9, 7) AND account_no in (130006, '{$row->a_pph}', '{$row->a_ppn}', 210106)";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                                
                        if($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while($rowAccount = $resultAccount->fetch_object()) {
                                if($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if($rowAccount->account_no == 130006) {
                                    if($invoiceStatus == 2){        
                                        $insertValues .= "(2, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->dpp})";	
                                    }else{
                                        $insertValues .= "(1, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->dpp})";	
                                    }  
                                }  elseif($rowAccount->account_no == $row->a_pph) {
                                    if($invoiceStatus == 2){
                                        $insertValues .= "(1, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->pph_amount})";	
                                    }else{
                                        $insertValues .= "(2, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_amount})";	
                                    }
                                } elseif($rowAccount->account_no == $row->a_ppn) {
                                    if($invoiceStatus == 2){
                                        $insertValues .= "(2, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->ppn_amount})";	
                                    }else{
                                        $insertValues .= "(1, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_amount})";	
                                    }
                                }elseif($rowAccount->account_no == 210106) {    
                                    if($invoiceStatus == 2){    
                                        $insertValues .= "(1, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->amount})";	
                                    }else{
                                        $insertValues .= "(2, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount})";	
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                    }
                }
            }else if($row->vendor_id != 'NULL' && $row->vendor_id != '' && $row->vendor_id != 0){ //CURAH
                if($invoiceStatus == 2){
                    $wherePropertyA = "pc.old_inv_id";
                }else{
                    $wherePropertyA = "pc.inv_notim_id";
                }
                if ($row->payment_method == 3 && $row->amount2 == 0){ //SETLLE
                    $sqlDP = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph, appn.`account_no` AS a_ppn, ppd.`dpp_dp_settle` as dpp, ppd.`dp_pph_value` as pph_amount, 
                                    ppd.`dp_ppn_value` as ppn_amount, (ppd.settle_amount) AS amount
                                FROM invoice_notim inv
                                INNER JOIN pengajuan_payment_dp ppd ON ppd.inv_notim_id = inv.inv_notim_id
                                LEFT JOIN vendor v ON v.`vendor_id` = inv.`vendor_id`
                                LEFT JOIN tax vpph ON vpph.`tax_id` = v.`pph_tax_id`
                                LEFT JOIN account apph ON apph.`account_id` = vpph.`account_id`
                                LEFT JOIN tax vppn ON vppn.`tax_id` = v.`ppn_tax_id`
                                LEFT JOIN account appn ON appn.`account_id` = vppn.`account_id`
                                WHERE inv.`inv_notim_id`= {$invoiceNotimId}";
                    $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                            
                    if($resultDP !== false && $resultDP->num_rows > 0) {
                        while($rowDP = $resultDP->fetch_object()) {
                                                
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (130002 , 150410, 210101)"; // {$rowDP->a_ppn} => 150410
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }
        
                                    if($rowAccount->account_no == 130002) {
                                        if($invoiceStatus == 2){    
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->dpp})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->dpp})";	
                                        }
                                    }  elseif($rowAccount->account_no == 150410) {
                                        if($invoiceStatus == 2){    
                                            $insertValues .= "(1, '{$source}',  'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->ppn_amount})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}',  'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->ppn_amount})";	
                                        }
                                    } elseif($rowAccount->account_no == 210101) {
                                        if($invoiceStatus == 2){    
                                            $insertValues .= "(2, '{$source}',  'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->amount})";	
                                        }else{
                                            $insertValues .= "(1, '{$source}',  'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->amount})";	
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                            }
                        }
                    }


                    $sqlAccount2 = "SELECT inv.*, pc.`transaction_id`, t.`unit_price`, t.`quantity`, pc.`pph_id`, av.`account_no` AS aVendor, t.send_weight, 
                                    pc.`ppn_id` AS vppn , appn.`account_no` AS appn, pc.`ppn_value`, pc.pph_value, pc.total_amount as amount,  pc.dpp
                                    FROM invoice_notim inv
                                    LEFT JOIN payment_curah pc ON {$wherePropertyA} = inv.inv_notim_id
                                    LEFT JOIN `transaction` t ON t.`transaction_id` = pc.`transaction_id`
                                    LEFT JOIN vendor v ON v.`vendor_id` = inv.`vendor_id`
                                    LEFT JOIN tax vtx ON vtx.`tax_id` = v.`pph_tax_id`
                                    LEFT JOIN account av ON av.`account_id` = vtx.`account_id`
                                    LEFT JOIN tax vppn ON vppn.`tax_id` = v.`ppn_tax_id`
                                    LEFT JOIN account appn ON appn.`account_id` = vppn.`account_id`
                                    WHERE inv.`inv_notim_id` = {$invoiceNotimId}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type in (1, 7) AND account_no in (123459, 150410, 210101)"; // {$rowDP->a_ppn} => 150410 
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                                //$taxValue = 0;
                                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                    if($rowAccount2->vppn != '' && $rowAccount2->vppn != 0){
                                        $taxPPN = $rowAccount2->ppn_value;
                                    }else{
                                        $taxPPN = 0;
                                    }

                                    if($rowAccount2->pph_id != '' || $rowAccount2->pph_id != 0){
                                        $taxValue = $rowAccount2->pph_value;
                                    }else{
                                        $taxValue = 0;
                                    }

                                    if($rowAccount2->amount != '' && $rowAccount2->amount > 0) {
                                        echo " CC ";
                                        $totalDpp = $rowAccount2->dpp;
                                        $totalCurahPrice = $rowAccount2->amount;
                                        $creditCurahPrice = $totalCurahPrice + (($totalCurahPrice * ($taxPPN / 100)) - ($totalCurahPrice * ($taxValue/100)));
                                    }else {
                                        echo " BB AA ";
                                        $totalCurahPrice = 0;
                                        $creditCurahPrice = 0;
                                    }
                                    
                                    while($rowAccount = $resultAccount->fetch_object()) {
                                        if($insertValues != "") {
                                            $insertValues .= ", ";
                                        }

                                        if($rowAccount->account_no == 123459) {
                                            if($invoiceStatus == 2){
                                                $totalCurahPrice1 = $totalCurahPrice;
                                                $insertValues .= "(2, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, 'Return Journal', {$totalCurahPrice1})";
                                            }else{
                                                 $insertValues .= "(1, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalCurahPrice})";
                                            }
                                        }elseif($rowAccount->account_no ==150410) { // {$rowDP->a_ppn} => 150410 
                                            $amountPPN = $totalCurahPrice * ($taxPPN / 100);
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(2, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amountPPN})";
                                            }else{
                                                $insertValues .= "(1, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
                                            }
                                        } elseif($rowAccount->account_no == 210101) {
                                            if($invoiceStatus == 2){
                                                $creditCurahPrice1 = $creditCurahPrice;
                                                $insertValues .= "(1, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$creditCurahPrice1})";
                                            }else{
                                                $insertValues .= "(2, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$creditCurahPrice})";
                                            }
                                        }
                                    }
                                } else {
                                    $boolContinue = false;
                                    echo 'e';
                                }             
                        }
                    } else {
                        $boolContinue = false;
                    }
                }else if (($row->payment_method == 1 || $row->payment_method == 3) &&  $row->amount2 > 0){
                    if($row->payment_method == 3){
                        $sqlDP = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph,appn.`account_no` AS a_ppn, ppd.`dpp_dp_settle` as dpp, ppd.`dp_pph_value` as pph_amount, 
                                        ppd.`dp_ppn_value` as ppn_amount, (ppd.settle_amount) AS amount
                                FROM invoice_notim inv
                                INNER JOIN pengajuan_payment_dp ppd ON ppd.inv_notim_id = inv.inv_notim_id
                                LEFT JOIN vendor v ON v.`vendor_id` = inv.`vendor_id`
                                LEFT JOIN tax vpph ON vpph.`tax_id` = v.`pph_tax_id`
                                LEFT JOIN account apph ON apph.`account_id` = vpph.`account_id`
                                LEFT JOIN tax vppn ON vppn.`tax_id` = v.`ppn_tax_id`
                                LEFT JOIN account appn ON appn.`account_id` = vppn.`account_id`
                                WHERE inv.`inv_notim_id`= {$invoiceNotimId}";
                        $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                        if($resultDP !== false && $resultDP->num_rows > 0) {
                            while($rowDP = $resultDP->fetch_object()) {
                                                    
                                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (130002 , 150410, 210101)"; // {$rowDP->a_ppn} => 150410 
                                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                    while($rowAccount = $resultAccount->fetch_object()) {
                                        if($insertValues != "") {
                                            $insertValues .= ", ";
                                        }
            
                                        if($rowAccount->account_no == 130002) {
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->dpp})";	
                                            }else{
                                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->dpp})";	
                                            }
                                        } elseif($rowAccount->account_no == 150410) { //{$rowDP->a_ppn} => 150410
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(1, '{$source}',  'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->ppn_amount})";	
                                            }else{
                                                $insertValues .= "(2, '{$source}',  'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->ppn_amount})";	
                                            }
                                        } elseif($rowAccount->account_no == 210101) {
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(2, '{$source}',  'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->amount})";	
                                            }else{
                                                $insertValues .= "(1, '{$source}',  'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->amount})";	
                                            }
                                        }
                                    }
                                } else {
                                    $boolContinue = false;
                                }
                            }
                        }
                    }

                    $sqlAccount2 = "SELECT inv.*, pc.`transaction_id`, t.`unit_price`, t.`quantity`, pc.`pph_id`, av.`account_no` AS aVendor, t.send_weight, 
                                    pc.`ppn_id` AS vppn , appn.`account_no` AS appn, pc.`ppn_value`, pc.pph_value, pc.total_amount as amount,  pc.dpp
                                    FROM invoice_notim inv
                                    LEFT JOIN payment_curah pc ON {$wherePropertyA} = inv.inv_notim_id
                                    LEFT JOIN `transaction` t ON t.`transaction_id` = pc.`transaction_id`
                                    LEFT JOIN vendor v ON v.`vendor_id` = inv.`vendor_id`
                                    LEFT JOIN tax vtx ON vtx.`tax_id` = v.`pph_tax_id`
                                    LEFT JOIN account av ON av.`account_id` = vtx.`account_id`
                                    LEFT JOIN tax vppn ON vppn.`tax_id` = v.`ppn_tax_id`
                                    LEFT JOIN account appn ON appn.`account_id` = vppn.`account_id`
                                    WHERE inv.`inv_notim_id` = {$invoiceNotimId}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);


                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type in (1,7) AND account_no in (123459, 150410, 210101)"; // {$rowDP->a_ppn} => 150410 
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            // echo " -- CURAH -- " . $sqlAccount;

                            //$taxValue = 0;
                                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                    if($rowAccount2->vppn != '' && $rowAccount2->vppn != 0){
                                        $taxPPN = $rowAccount2->ppn_value;
                                    }else{
                                        $taxPPN = 0;
                                    }

                                    if($rowAccount2->pph_id != '' || $rowAccount2->pph_id != 0){
                                        $taxValue = $rowAccount2->pph_value;
                                    }else{
                                        $taxValue = 0;
                                    }

                                    if($rowAccount2->amount != '' && $rowAccount2->amount > 0) {
                                        echo " CC ";
                                        $totalDpp = $rowAccount2->dpp;
                                        $totalCurahPrice = $rowAccount2->amount;
                                        $creditCurahPrice = $totalCurahPrice + (($totalCurahPrice * ($taxPPN / 100)) - ($totalCurahPrice * ($taxValue/100)));
                                    }else {
                                        echo " BB AA ";
                                        $totalCurahPrice = 0;
                                        $creditCurahPrice = 0;
                                    }
                                    
                                    while($rowAccount = $resultAccount->fetch_object()) {
                                        if($insertValues != "") {
                                            $insertValues .= ", ";
                                        }

                                        if($rowAccount->account_no == 123459) {
                                            if($invoiceStatus == 2){
                                                $totalCurahPrice1 = $totalCurahPrice;
                                                $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, 'Return Journal', {$totalCurahPrice1})";
                                            }else{
                                                 $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalCurahPrice})";
                                            }
                                        }elseif($rowAccount->account_no == 150410) {  //{$rowDP->a_ppn} => 150410 
                                            $amountPPN = $totalCurahPrice * ($taxPPN / 100);
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amountPPN})";
                                            }else{
                                                $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
                                            }
                                        } elseif($rowAccount->account_no == 210101) {
                                            if($invoiceStatus == 2){
                                                $creditCurahPrice1 = $creditCurahPrice;
                                                $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$creditCurahPrice})";
                                            }else{
                                                $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$creditCurahPrice})";
                                            }
                                        }
                                    }
                                } else {
                                    $boolContinue = false;
                                    // echo 'e';
                                }             
                        }
                    } else {
                        $boolContinue = false;
                    }
                    
            }elseif ($row->payment_method == 2){ //DOWNPAYMENT
                $sql = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph,appn.`account_no` AS a_ppn, pp.`total_dpp` as dpp, pp.`total_pph_amount` as pph_amount, 
                                pp.`total_ppn_amount` as ppn_amount,(pp.grand_total) AS amount
                        FROM invoice_notim inv
                        LEFT JOIN vendor v ON v.`vendor_id` = inv.`vendor_id`
                        LEFT JOIN tax vpph ON vpph.`tax_id` = v.`pph_tax_id`
                        LEFT JOIN account apph ON apph.`account_id` = vpph.`account_id`
                        LEFT JOIN tax vppn ON vppn.`tax_id` = v.`ppn_tax_id`
                        LEFT JOIN account appn ON appn.`account_id` = vppn.`account_id`
                        LEFT JOIN pengajuan_payment pp ON pp.idPP  = inv.idPP
                        WHERE inv.`inv_notim_id`= {$invoiceNotimId}";
                        // echo $sql;
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($result !== false && $result->num_rows == 1) {
                $row = $result->fetch_object();
                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (130002 ,  150410, 210101)"; //{$rowDP->a_ppn} => 150410 
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                        if($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while($rowAccount = $resultAccount->fetch_object()) {
                                if($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if($rowAccount->account_no == 130002) {
                                    if($invoiceStatus == 2){
                                        $insertValues .= "(2, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->dpp})";	
                                    }else{
                                        $insertValues .= "(1, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->dpp})";	
                                    }
                                } elseif($rowAccount->account_no ==150410) { //{$rowDP->a_ppn} => 150410 
                                    if($invoiceStatus == 2){
                                        $insertValues .= "(2, '{$source}',  'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->ppn_amount})";	
                                    }else{
                                        $insertValues .= "(1, '{$source}',  'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_amount})";	
                                    }
                                } elseif($rowAccount->account_no == 210101) {
                                    if($invoiceStatus == 2){
                                        $insertValues .= "(1, '{$source}',  'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->amount})";	
                                    }else{
                                        $insertValues .= "(2, '{$source}',  'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount})";	
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                    }
                }
            
            }
	    }	
}
/*elseif($invoiceId != 'NULL' && $source == 'RETURN INVOICE NOTIM' ) {
        //echo 'YZZZ';
        $sql = "DELETE FROM general_ledger WHERE invoice_id = {$invoiceId} AND general_ledger_module = 'RETURN INVOICE NOTIM'";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
        
        $sql = "SELECT pp.payment_method, pp.grand_total AS amount, pp.total_amount AS dpp, inv.inv_notim_id,
                        inv.freightId FROM invoice_notim inv
                     LEFT JOIN pengajuan_payment pp ON pp.`idPP` = inv.`idPP`
                WHERE inv.`inv_notim_id` = {$invoiceId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        //  echo $sql;
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
			

		if($row->freightId != 'NULL' && $row->freightId != '' && $row->freightId != 0){
            // echo 'XY';
            if (($row->payment_method == 1 || $row->payment_method == 3) && $row->amount < 0){ //settlement
                // echo 'XY';
                $sqlDP = "SELECT inv.*, (pp.original_amount - pp.amount) AS downPayment, f.`pph`, apph.`account_no` AS apph, f.`ppn`, appn.`account_no` AS appn
                            FROM invoice_notim inv
                            LEFT JOIN pengajuan_payment pp ON inv.`idPP` = pp.`idPP`
                            LEFT JOIN freight f ON f.`freight_id` = inv.`freightId`
                            LEFT JOIN tax fpph ON fpph.`tax_id` = f.`pph_tax_id`
                            LEFT JOIN account apph ON apph.`account_id` = fpph.`account_id`
                            LEFT JOIN tax fppn ON fppn.`tax_id` = f.`ppn_tax_id`
                            LEFT JOIN account appn ON appn.`account_id` = fppn.`account_id`
                            WHERE inv.`inv_notim_id` = {$invoiceId}";
                $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                    
                    if($resultDP !== false && $resultDP->num_rows > 0) {
                        while($rowDP = $resultDP->fetch_object()) {
                                            
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (210103, 130003, '{$rowDP->apph}', '{$rowDP->appn}')";
                                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                                
                                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                    while($rowAccount = $resultAccount->fetch_object()) {
                                        if($insertValues != "") {
                                            $insertValues .= ", ";
                                        }

                                        if($rowAccount->account_no == 130003) {
                                            
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->downPayment})";	
                                            
                                        } elseif($rowAccount->account_no == 210103) {
                                            $amount = $rowDP->downPayment + ($rowDP->downPayment * ($rowDP->ppn / 100)) - ($rowDP->downPayment * ($rowDP->pph / 100));
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";	
                                            
                                        } elseif($rowAccount->account_no == $rowDP->apph) {
                                            $pphDP = $rowDP->downPayment * ($rowDP->pph / 100);
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pphDP})";	
                                            
                                        } elseif($rowAccount->account_no == $rowDP->appn) {
                                            $ppnDP = $rowDP->downPayment * ($rowDP->ppn / 100);
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppnDP})";	
                                            
                                        }
                                    }
                                } else {
                                    $boolContinue = false;
                                }		
                            }
                        }
            }else if (($row->payment_method == 1 || $row->payment_method == 3) && $row->amount > 0){			
                $sqlAccount2 = "SELECT inv.inv_notim_id, t.`transaction_id`, t.`freight_price`, t.`freight_quantity`, pa.pph_id, 
                                    f.`freight_rule`, af.`account_no` AS aFreight, t.send_weight, 
                                    pa.`pph_id` AS fppn , appn.`account_no` AS appn, pa.`ppn_value`, pa.pph_value, pa.total_amount, pa.shrink, pa.dpp, (pa.dpp - pa.shrink) as amount
                            FROM invoice_notim inv
                            LEFT JOIN payment_oa pa ON pa.inv_notim_id = inv.inv_notim_id
                            LEFT JOIN `transaction` t ON t.`transaction_id` = pa.`transaction_id`
                            LEFT JOIN freight_cost fc ON fc.`freight_cost_id` = t.`freight_cost_id`
                            LEFT JOIN freight f ON f.`freight_id` = fc.`freight_id`
                            LEFT JOIN tax ftx ON ftx.`tax_id` = t.`fc_tax_id`
                            LEFT JOIN account af ON af.`account_id` = ftx.`account_id`
                            LEFT JOIN tax fppn ON fppn.`tax_id` = f.`ppn_tax_id`
                            LEFT JOIN account appn ON appn.`account_id` = fppn.`account_id`
                            WHERE inv.`inv_notim_id` = {$invoiceId}";
                $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                // echo $sqlAccount2;
                if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                    while($rowAccount2 = $resultAccount2->fetch_object()) {
                        //if($rowAccount2->freightId != 'NULL'){
                        $totalFreightPrice = 0; $totalDpp = 0; $totalShrink = 0; $creditFreightPrice = 0;
                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 2 AND account_no in (123456, 520100, '{$rowAccount2->aFreight}', '{$rowAccount2->appn}', 210103)";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                                //$taxValue = 0;
                        if($resultAccount !== false && $resultAccount->num_rows > 0) {
                            if($rowAccount2->fppn != '' && $rowAccount2->fppn != 0){
                                $taxPPN = $rowAccount2->ppn;
                            }else{
                                $taxPPN = 0;
                            }
                            if($rowAccount2->pph_id != '' && $rowAccount2->pph_id != 0) {
                                $taxValue = $rowAccount2->pph_value;
                            } else {
                                $taxValue = 0;
                            }
                            
                            if($rowAccount2->freight_price != '' && $rowAccount2->freight_price > 0) {
                                $totalDpp = $rowAccount2->dpp;
                                $totalShrink =  $rowAccount2->shrink;
                                $totalFreightPrice =  $rowAccount2->amount;
                                $creditFreightPrice = $totalFreightPrice + ($totalFreightPrice * ($taxPPN/100)) - ($totalFreightPrice * ($taxValue/100)) ;
                            }else {
                                $totalFreightPrice = 0;
                                $creditFreightPrice = 0;
                            }
                                    
                            while($rowAccount = $resultAccount->fetch_object()) {
                                if($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if($rowAccount->account_no == 123456) {
                                    if($rowAccount2->send_weight < 0){
                                        $totalFreightPrice1 = $totalFreightPrice * -1; //debit
                                        $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId},NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalFreightPrice1})";
                                        }else{ //credit
                                            $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalFreightPrice})";
                                        }
                                }elseif($rowAccount->account_no == 520100) {
                                    if($rowAccount2->send_weight < 0){ //2 = credit
                                        $totalShrink1 = $totalShrink * -1;
                                        $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalShrink1})";
                                    }else{ //1 = debit
                                        $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalShrink})";
                                    }
                                } elseif($rowAccount->account_no == $rowAccount2->aFreight) {
                                    $amount = $totalFreightPrice * ($taxValue / 100);
                                    if($rowAccount2->send_weight < 0){
                                        $amount1 = $amount * -1;
                                        $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                    }else{
                                        $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                    }
                                } elseif($rowAccount->account_no == $rowAccount2->appn) {
                                    $amountPPN = $totalFreightPrice * ($taxPPN / 100);
                                    if($rowAccount2->send_weight < 0){
                                        $amountPPN1 = $amountPPN * -1;
                                        $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN1})";
                                    }else{
                                        $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
                                    }
                                }elseif($rowAccount->account_no == 210103) {
                                    if($rowAccount2->send_weight < 0){
                                        $creditFreightPrice1 = $creditFreightPrice * -1;
                                        $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$creditFreightPrice1})";
                                    }else{
                                        $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$creditFreightPrice})";
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                            echo 'e';
                        }
                    }
                } else {
                    $boolContinue = false;
                }	
            }elseif ($row->payment_method == 2){
                // echo 'XY11';
                $sql = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph,appn.`account_no` AS a_ppn, pp.`total_dpp` as dpp, pp.total_pph_amount as pph_amount, pp. total_ppn_amount as ppn_amount, ((pp.`total_dpp` + pp.`total_ppn_amount`) - pp.`total_pph_amount`) AS amount
                        FROM invoice_notim inv
                        LEFT JOIN freight f ON f.`freight_id` = inv.`freightId`
                        LEFT JOIN tax fpph ON fpph.`tax_id` = f.`pph_tax_id`
                        LEFT JOIN account apph ON apph.`account_id` = fpph.`account_id`
                        LEFT JOIN tax fppn ON fppn.`tax_id` = f.`ppn_tax_id`
                        LEFT JOIN account appn ON appn.`account_id` = fppn.`account_id`
                        LEFT JOIN pengajuan_payment pp ON pp.`idPP` = inv.`idPP`
                        WHERE inv.`inv_notim_id`= {$invoiceId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($result !== false && $result->num_rows == 1) {
                $row = $result->fetch_object();
                //echo 'ZZ';
                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (130003, 210103 , '{$row->a_pph}', '{$row->a_ppn}')";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                        
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130003) {
                                    
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->dpp})";	
                                    
                            } elseif($rowAccount->account_no == 210103) {
                                    
                                $insertValues .= "(1, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount})";	
                                    
                            } elseif($rowAccount->account_no == $row->a_pph) {
                                    
                                $insertValues .= "(1, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_amount})";	
                                    
                            } elseif($rowAccount->account_no == $row->a_ppn) {
                                    
                                $insertValues .= "(2, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_amount})";	
                                
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
            }
	    } else if($row->laborId != 'NULL' && $row->laborId != '' && $row->laborId != 0){
			
		if ($row->idPP == 0){ //settlement
			
			$sqlDP = "SELECT inv.*,l.`pph`, apph.`account_no` AS apph, l.`ppn`, appn.`account_no` AS appn,
(SELECT SUM(amount) FROM payment_ob WHERE inv_notim_id = inv.`inv_notim_id`) AS downPayment
FROM invoice_notim inv
LEFT JOIN labor l ON l.`labor_id` = inv.`laborId`
LEFT JOIN tax lpph ON lpph.`tax_id` = l.`pph_tax_id`
LEFT JOIN account apph ON apph.`account_id` = lpph.`account_id`
LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
WHERE inv.`inv_notim_id` = {$invoiceId}";
			 $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                    
                    if($resultDP !== false && $resultDP->num_rows > 0) {
                        while($rowDP = $resultDP->fetch_object()) {
										
				$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (3, 7) AND account_no in (210104, 130004, '{$rowDP->apph}', '{$rowDP->appn}')";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130004) {
								
								 $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->downPayment})";	
								
                            } elseif($rowAccount->account_no == 210104) {
								$amount = $rowDP->downPayment + ($rowDP->downPayment * ($rowDP->ppn / 100)) - ($rowDP->downPayment * ($rowDP->pph / 100));
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";	
								
                            } elseif($rowAccount->account_no == $rowDP->apph) {
								$pphDP = $rowDP->downPayment * ($rowDP->pph / 100);
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pphDP})";	
								
                            } elseif($rowAccount->account_no == $rowDP->appn) {
								$ppnDP = $rowDP->downPayment * ($rowDP->ppn / 100);
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppnDP})";	
								
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }	
							
							
						}
					}
		}	
			
		else if (($row->payment_method == 1 || $row->payment_method == 3) && $row->amount < $row->original_amount){
			echo 'XY';
			$sqlDP = "SELECT inv.*, (pp.original_amount - pp.amount) AS downPayment, l.`pph`, apph.`account_no` AS apph, l.`ppn`, appn.`account_no` AS appn
FROM invoice_notim inv
LEFT JOIN pengajuan_payment pp ON inv.`idPP` = pp.`idPP`
LEFT JOIN labor l ON l.`labor_id` = inv.`laborId`
LEFT JOIN tax lpph ON lpph.`tax_id` = l.`pph_tax_id`
LEFT JOIN account apph ON apph.`account_id` = lpph.`account_id`
LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
WHERE inv.`inv_notim_id` = {$invoiceId}";
			 $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                    
                    if($resultDP !== false && $resultDP->num_rows > 0) {
                        while($rowDP = $resultDP->fetch_object()) {
										
				$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (3, 7) AND account_no in (130004, 210104, '{$rowDP->apph}', '{$rowDP->appn}')";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130004) {
								
								 $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->downPayment})";	
								
                            } elseif($rowAccount->account_no == 210104) {
								$amount = $rowDP->downPayment + ($rowDP->downPayment * ($rowDP->ppn / 100)) - ($rowDP->downPayment * ($rowDP->pph / 100));
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";	
								
                            } elseif($rowAccount->account_no == $rowDP->apph) {
								$pphDP = $rowDP->downPayment * ($rowDP->pph / 100);
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pphDP})";	
								
                            } elseif($rowAccount->account_no == $rowDP->appn) {
								$ppnDP = $rowDP->downPayment * ($rowDP->ppn / 100);
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppnDP})";	
								
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }	
							
							
						}
					}
		}
			
		if ($row->idPP == 0){ //settlement			
                    
                    $sqlAccount2 = "SELECT inv.*, t.`transaction_id`, t.`unloading_price`, t.`quantity`, t.`uc_tax_id`, al.`account_no` AS aLabor, t.send_weight, 
lppn.`tax_id` AS lppn , appn.`account_no` AS appn, l.`ppn`, pb.amount
FROM invoice_notim inv
LEFT JOIN payment_ob pb ON pb.inv_notim_id = inv.inv_notim_id
LEFT JOIN `transaction` t ON t.`transaction_id` = pb.`transaction_id`
LEFT JOIN unloading_cost uc ON uc.`unloading_cost_id` = t.`unloading_cost_id`
LEFT JOIN labor l ON l.`labor_id` = t.`labor_id`
LEFT JOIN tax ltx ON ltx.`tax_id` = t.`uc_tax_id`
LEFT JOIN account al ON al.`account_id` = ltx.`account_id`
LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
WHERE inv.`inv_notim_id` = {$invoiceId}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {
							
		//if($rowAccount2->freightId != 'NULL'){
		$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 3 AND account_no in (210108, '{$rowAccount2->aLabor}', 210104, '{$rowAccount2->appn}')";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
				//$taxValue = 0;
                 if($resultAccount !== false && $resultAccount->num_rows > 0) {
					if($rowAccount2->lppn != '' && $rowAccount2->lppn != 0){
						$taxPPN = $rowAccount2->ppn;
					}else{
						$taxPPN = 0;
					}
                    if($rowAccount2->uc_tax_id != '' && $rowAccount2->uc_tax_id != 0 && $rowAccount2->unloading_price != '' && $rowAccount2->unloading_price > 0) {
                        $sqlTax = "SELECT * FROM tax WHERE tax_id = {$rowAccount2->uc_tax_id}";
                        $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
                        
                        if($resultTax !== false && $resultTax->num_rows > 0) {
                            $rowTax = $resultTax->fetch_object();
                            $taxValue = $rowTax->tax_value;
                            
                           
								$totalUnloading_Price = $rowAccount2->amount;
								
							
                            if($rowTax->tax_category == 1) {
                                $totalUnloadingPrice = ($totalUnloading_Price) / ((100 - $taxValue) / 100);
                                $creditUnloadingPrice = $totalUnloading_Price;
                            } else {
                                $totalUnloadingPrice = $totalUnloading_Price;
                                $creditUnloadingPrice = $totalUnloading_Price + (($totalUnloading_Price) * ($taxPPN / 100)) - (($totalUnloading_Price) * ($taxValue / 100));
                            }
                        } else {
                            $totalUnloadingPrice = $totalUnloading_Price;
                            $creditUnloadingPrice = $totalUnloading_Price + ($totalUnloading_Price * ($taxPPN / 100)) - ($totalUnloading_Price * ($taxValue / 100)) ;
                            $taxValue = 0;
                        }
                    } else if($rowAccount2->unloading_price != '' && $rowAccount2->unloading_price > 0) {
						
								$totalUnloading_Price = $rowAccount2->amount;
                        
								$totalUnloadingPrice = $totalUnloading_Price;
								$creditUnloadingPrice = $totalUnloadingPrice;
							
                        $taxValue = 0;
                    }else {
                        $totalUnloadingPrice = 0;
                        $creditUnloadingPrice = 0;
                        $taxValue = 0;
                    }
                    
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 210108) {
							if($rowAccount2->send_weight < 0){
								$totalUnloadingPrice1 = $totalUnloadingPrice * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalUnloadingPrice1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalUnloadingPrice})";
							}
                        } elseif($rowAccount->account_no == $rowAccount2->aLabor) {
                            $amount = $totalUnloadingPrice * ($taxValue / 100);
							if($rowAccount2->send_weight < 0){
								$amount1 = $amount * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
							}
                        } elseif($rowAccount->account_no == $rowAccount2->appn) {
                            $amountPPN = $totalUnloadingPrice * ($taxPPN / 100);
							if($rowAccount2->send_weight < 0){
								$amountPPN1 = $amountPPN * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
							}
                        }elseif($rowAccount->account_no == 210104) {
							if($rowAccount2->send_weight < 0){
								$creditUnloadingPrice1 = $creditUnloadingPrice * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditUnloadingPrice1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditUnloadingPrice})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
					echo 'e';
                }
						//}
						
                           
						    
                        }
                    } else {
                        $boolContinue = false;
                    }
				
		}else if ($row->payment_method == 1 || $row->payment_method == 3){			
                    echo 'A';
                    $sqlAccount2 = "SELECT inv.*, t.`transaction_id`, t.`unloading_price`, t.`quantity`, t.`uc_tax_id`, al.`account_no` AS aLabor, t.send_weight, 
lppn.`tax_id` AS lppn , appn.`account_no` AS appn, l.`ppn`,pb.amount
FROM invoice_notim inv
LEFT JOIN payment_ob pb ON pb.inv_notim_id = inv.inv_notim_id
LEFT JOIN `transaction` t ON t.`transaction_id` = pb.`transaction_id`
LEFT JOIN unloading_cost uc ON uc.`unloading_cost_id` = t.`unloading_cost_id`
LEFT JOIN labor l ON l.`labor_id` = t.`labor_id`
LEFT JOIN tax ltx ON ltx.`tax_id` = t.`uc_tax_id`
LEFT JOIN account al ON al.`account_id` = ltx.`account_id`
LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
WHERE inv.`inv_notim_id` = {$invoiceId}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {
							
		//if($rowAccount2->freightId != 'NULL'){
		$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 3 AND account_no in (210108, '{$rowAccount2->aLabor}', 210104, '{$rowAccount2->appn}')";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
				//$taxValue = 0;
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
					if($rowAccount2->lppn != '' && $rowAccount2->lppn != 0){
						$taxPPN = $rowAccount2->ppn;
					}else{
						$taxPPN = 0;
					}
                    if($rowAccount2->uc_tax_id != '' && $rowAccount2->uc_tax_id != 0 && $rowAccount2->unloading_price != '' && $rowAccount2->unloading_price > 0) {
                        $sqlTax = "SELECT * FROM tax WHERE tax_id = {$rowAccount2->uc_tax_id}";
                        $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
                        
                        if($resultTax !== false && $resultTax->num_rows > 0) {
                            $rowTax = $resultTax->fetch_object();
                            $taxValue = $rowTax->tax_value;
                            
                           
								$totalUnloading_Price = $rowAccount2->amount;
								
							
                            if($rowTax->tax_category == 1) {
                                $totalUnloadingPrice = ($totalUnloading_Price) / ((100 - $taxValue) / 100);
                                $creditUnloadingPrice = $totalUnloading_Price;
                            } else {
                                $totalUnloadingPrice = $totalUnloading_Price;
                                $creditUnloadingPrice = $totalUnloading_Price + (($totalUnloading_Price) * ($taxPPN / 100)) - (($totalUnloading_Price) * ($taxValue / 100));
                            }
                        } else {
                            $totalUnloadingPrice = $totalUnloading_Price;
                            $creditUnloadingPrice = $totalUnloading_Price + ($totalUnloading_Price * ($taxPPN / 100)) - ($totalUnloading_Price * ($taxValue / 100)) ;
                            $taxValue = 0;
                        }
                    } else if($rowAccount2->unloading_price != '' && $rowAccount2->unloading_price > 0) {
						
								$totalUnloading_Price = $rowAccount2->amount;
                        
								$totalUnloadingPrice = $totalUnloading_Price;
								$creditUnloadingPrice = $totalUnloadingPrice;
							
                        $taxValue = 0;
                    }else {
                        $totalUnloadingPrice = 0;
                        $creditUnloadingPrice = 0;
                        $taxValue = 0;
                    }
                    
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 210108) {
							if($rowAccount2->send_weight < 0){
								$totalUnloadingPrice1 = $totalUnloadingPrice * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalUnloadingPrice1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalUnloadingPrice})";
							}
                        } elseif($rowAccount->account_no == $rowAccount2->aLabor) {
                            $amount = $totalUnloadingPrice * ($taxValue / 100);
							if($rowAccount2->send_weight < 0){
								$amount1 = $amount * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
							}
                        } elseif($rowAccount->account_no == $rowAccount2->appn) {
                            $amountPPN = $totalUnloadingPrice * ($taxPPN / 100);
							if($rowAccount2->send_weight < 0){
								$amountPPN1 = $amountPPN * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
							}
                        }elseif($rowAccount->account_no == 210104) {
							if($rowAccount2->send_weight < 0){
								$creditUnloadingPrice1 = $creditUnloadingPrice * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditUnloadingPrice1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditUnloadingPrice})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
					echo 'e';
                }
						//}
						
                           
						    
                        }
                    } else {
                        $boolContinue = false;
                    }
				
		}else if ($row->payment_method == 2){
			//echo 'XYZ';
			$sql = "SELECT inv.*, apph.`account_no` AS a_pph,appn.`account_no` AS a_ppn,pp.`dpp`, pp.`pph_amount`, pp.`ppn_amount`, ((pp.`dpp` + pp.`ppn_amount`) - pp.`pph_amount`) AS amount
					FROM invoice_notim inv
					LEFT JOIN labor l ON l.`labor_id` = inv.`laborId`
					LEFT JOIN tax lpph ON lpph.`tax_id` = l.`pph_tax_id`
					LEFT JOIN account apph ON apph.`account_id` = lpph.`account_id`
					LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
					LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
					LEFT JOIN pengajuan_payment pp ON pp.`idPP` = inv.`idPP`
					WHERE inv.`inv_notim_id`= {$invoiceId}";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
			//echo 'ZZ';
			 $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (3, 7) AND account_no in (130004, 210104 , '{$row->a_pph}', '{$row->a_ppn}')";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130004) {
								
								 $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->dpp})";	
								
                            } elseif($rowAccount->account_no == 210104) {
								
								$insertValues .= "(1, '{$source}',  'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount})";	
								
                            } elseif($rowAccount->account_no == $row->a_pph) {
								
								$insertValues .= "(1, '{$source}',  'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_amount})";	
								
                            } elseif($rowAccount->account_no == $row->a_ppn) {
								
								$insertValues .= "(2, '{$source}',  'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_amount})";	
								
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
				}
			}
		
		}else if($row->vendorHandlingId != 'NULL' && $row->vendorHandlingId != '' && $row->vendorHandlingId != 0){
			
		if ($row->idPP == 0){ //settlement
			
			$sqlDP = "SELECT inv.*,vh.`pph`, apph.`account_no` AS apph, vh.`ppn`, appn.`account_no` AS appn,
(SELECT SUM(amount) FROM payment_handling WHERE inv_notim_id = inv.`inv_notim_id`) AS downPayment
FROM invoice_notim inv
LEFT JOIN vendor_handling vh ON vh.`vendor_handling_id` = inv.`vendorHandlingId`
LEFT JOIN tax vhpph ON vhpph.`tax_id` = vh.`pph_tax_id`
LEFT JOIN account apph ON apph.`account_id` = vhpph.`account_id`
LEFT JOIN tax vhppn ON vhppn.`tax_id` = vh.`ppn_tax_id`
LEFT JOIN account appn ON appn.`account_id` = vhppn.`account_id`
WHERE inv.`inv_notim_id` = {$invoiceId}";
			 $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                    
                    if($resultDP !== false && $resultDP->num_rows > 0) {
                        while($rowDP = $resultDP->fetch_object()) {
										
				$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (9, 7) AND account_no in (210106, 130006, '{$rowDP->apph}', '{$rowDP->appn}')";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130006) {
								
								 $insertValues .= "(1, '{$source}', 'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->downPayment})";	
								
                            } elseif($rowAccount->account_no == 210106) {
								$amount = $rowDP->downPayment + ($rowDP->downPayment * ($rowDP->ppn / 100)) - ($rowDP->downPayment * ($rowDP->pph / 100));
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";	
								
                            } elseif($rowAccount->account_no == $rowDP->apph) {
								$pphDP = $rowDP->downPayment * ($rowDP->pph / 100);
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pphDP})";	
								
                            } elseif($rowAccount->account_no == $rowDP->appn) {
								$ppnDP = $rowDP->downPayment * ($rowDP->ppn / 100);
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppnDP})";	
								
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }	
							
							
						}
					}
		}	
			
		else if (($row->payment_method == 1 || $row->payment_method == 3) && $row->amount < $row->original_amount){
			//echo 'XY';
			$sqlDP = "SELECT inv.*, (pp.original_amount - pp.amount) AS downPayment, vh.`pph`, apph.`account_no` AS apph, vh.`ppn`, appn.`account_no` AS appn
FROM invoice_notim inv
LEFT JOIN pengajuan_payment pp ON inv.`idPP` = pp.`idPP`
LEFT JOIN vendor_handling vh ON vh.`vendor_handling_id` = inv.`vendorHandlingId`
LEFT JOIN tax vhpph ON vhpph.`tax_id` = vh.`pph_tax_id`
LEFT JOIN account apph ON apph.`account_id` = vhpph.`account_id`
LEFT JOIN tax vhppn ON vhppn.`tax_id` = vh.`ppn_tax_id`
LEFT JOIN account appn ON appn.`account_id` = vhppn.`account_id`
WHERE inv.`inv_notim_id` =  {$invoiceId}";
			 $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                    
                    if($resultDP !== false && $resultDP->num_rows > 0) {
                        while($rowDP = $resultDP->fetch_object()) {
										
				$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (9, 7) AND account_no in (210106, 130006, '{$rowDP->apph}', '{$rowDP->appn}')";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130006) {
								
								 $insertValues .= "(1, '{$source}', 'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->downPayment})";	
								
                            } elseif($rowAccount->account_no == 210106) {
								$amount = $rowDP->downPayment + ($rowDP->downPayment * ($rowDP->ppn / 100)) - ($rowDP->downPayment * ($rowDP->pph / 100));
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";	
								
                            } elseif($rowAccount->account_no == $rowDP->apph) {
								$pphDP = $rowDP->downPayment * ($rowDP->pph / 100);
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pphDP})";	
								
                            } elseif($rowAccount->account_no == $rowDP->appn) {
								$ppnDP = $rowDP->downPayment * ($rowDP->ppn / 100);
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppnDP})";	
								
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }	
							
							
						}
					}
		}
			
		if ($row->idPP == 0){ //settlement			
                    
                    $sqlAccount2 = "SELECT inv.*, t.`transaction_id`, t.`handling_price`, t.`handling_quantity`, vh.`pph_tax_id`, vh.`vendor_handling_rule`, avh.`account_no` AS aVendorHandling, t.send_weight, 
vhppn.`tax_id` AS vhppn , appn.`account_no` AS appn, vh.`ppn`,ph.amount
FROM invoice_notim inv
LEFT JOIN payment_handling ph ON ph.inv_notim_id = inv.inv_notim_id
LEFT JOIN `transaction` t ON t.`transaction_id` = ph.`transaction_id`
LEFT JOIN vendor_handling vh ON vh.`vendor_handling_id` = inv.`vendorHandlingId`
LEFT JOIN tax vhtx ON vhtx.`tax_id` = vh.`pph_tax_id`
LEFT JOIN account avh ON avh.`account_id` = vhtx.`account_id`
LEFT JOIN tax vhppn ON vhppn.`tax_id` = vh.`ppn_tax_id`
LEFT JOIN account appn ON appn.`account_id` = vhppn.`account_id`
WHERE inv.`inv_notim_id` = {$invoiceId}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {
							
		//if($rowAccount2->freightId != 'NULL'){
		$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 9 AND account_no in (210109, '{$rowAccount2->aVendorHandling}', 210106, '{$rowAccount2->appn}')";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
				//$taxValue = 0;
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
					if($rowAccount2->vhppn != '' && $rowAccount2->vhppn != 0){
						$taxPPN = $rowAccount2->ppn;
					}else{
						$taxPPN = 0;
					}
                    if($rowAccount2->pph_tax_id != '' && $rowAccount2->pph_tax_id != 0 && $rowAccount2->handling_price != '' && $rowAccount2->handling_price > 0) {
                        $sqlTax = "SELECT * FROM tax WHERE tax_id = {$rowAccount2->pph_tax_id}";
                        $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
                        
                        if($resultTax !== false && $resultTax->num_rows > 0) {
                            $rowTax = $resultTax->fetch_object();
                            $taxValue = $rowTax->tax_value;
                            
                           if($rowAccount2->vendor_handling_rule == 1){
								$totalHandling_Price = $rowAccount2->amount;
								
							}else{
								$totalHandling_Price = $rowAccount2->amount;
								
							}
                            if($rowTax->tax_category == 1) {
                                $totalHandlingPrice = ($totalHandling_Price) / ((100 - $taxValue) / 100);
                                $creditHandlingPrice = $totalHandling_Price;
                            } else {
                                $totalHandlingPrice = $totalHandling_Price;
                                $creditHandlingPrice = $totalHandling_Price + (($totalHandling_Price) * ($taxPPN / 100)) - (($totalHandling_Price) * ($taxValue / 100));
                            }
                        } else {
                            $totalHandlingPrice = $rowAccount2->amount;
                            $creditHandlingPrice = ($rowAccount2->amount) + (($rowAccount2->amount) * ($taxPPN / 100)) - (($rowAccount2->amount) * ($taxValue / 100)) ;
                            $taxValue = 0;
                        }
                    } else if($rowAccount2->handling_price != '' && $rowAccount2->handling_price > 0) {
                        if($rowAccount2->vendor_handling_rule == 1){
								$totalHandlingPrice = $rowAccount2->amount;
								$creditHandlingPrice = $totalHandlingPrice;
							}else{
								$totalHandlingPrice = $rowAccount2->amount;
								$creditHandlingPrice = $totalHandlingPrice;
							}
                        $taxValue = 0;
                    }else {
                        $totalHandlingPrice = 0;
                        $creditHandlingPrice = 0;
                        $taxValue = 0;
                    }
                    
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 210109) {
							if($rowAccount2->send_weight < 0){
								$totalHandlingPrice1 = $totalHandlingPrice * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalHandlingPrice1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalHandlingPrice})";
							}
                        } elseif($rowAccount->account_no == $rowAccount2->aVendorHandling) {
                            $amount = $totalHandlingPrice * ($taxValue / 100);
							if($rowAccount2->send_weight < 0){
								$amount1 = $amount * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
							}
                        } elseif($rowAccount->account_no == $rowAccount2->appn) {
                            $amountPPN = $totalHandlingPrice * ($taxPPN / 100);
							if($rowAccount2->send_weight < 0){
								$amountPPN1 = $amountPPN * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
							}
                        }elseif($rowAccount->account_no == 210106) {
							if($rowAccount2->send_weight < 0){
								$creditHandlingPrice1 = $creditHandlingPrice * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditHandlingPrice1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditHandlingPrice})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
					echo 'e';
                }
						//}
						
                           
						    
                        }
                    } else {
                        $boolContinue = false;
                    }
				
		}else if ($row->payment_method == 1 || $row->payment_method == 3){			
                    echo 'A';
                    $sqlAccount2 = "SELECT inv.*, t.`transaction_id`, t.`handling_price`, t.`handling_quantity`, vh.`pph_tax_id`, vh.`vendor_handling_rule`, avh.`account_no` AS aVendorHandling, t.send_weight, 
vhppn.`tax_id` AS vhppn , appn.`account_no` AS appn, vh.`ppn`, ph.amount
FROM invoice_notim inv
LEFT JOIN payment_handling ph ON ph.inv_notim_id = inv.inv_notim_id
LEFT JOIN `transaction` t ON t.`transaction_id` = ph.`transaction_id`
LEFT JOIN vendor_handling vh ON vh.`vendor_handling_id` = inv.`vendorHandlingId`
LEFT JOIN tax vhtx ON vhtx.`tax_id` = vh.`pph_tax_id`
LEFT JOIN account avh ON avh.`account_id` = vhtx.`account_id`
LEFT JOIN tax vhppn ON vhppn.`tax_id` = vh.`ppn_tax_id`
LEFT JOIN account appn ON appn.`account_id` = vhppn.`account_id`
WHERE inv.`inv_notim_id` = {$invoiceId}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {
							
		//if($rowAccount2->freightId != 'NULL'){
		$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 9 AND account_no in (210109, '{$rowAccount2->aVendorHandling}', 210106, '{$rowAccount2->appn}')";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
				//$taxValue = 0;
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
					if($rowAccount2->vhppn != '' && $rowAccount2->vhppn != 0){
						$taxPPN = $rowAccount2->ppn;
					}else{
						$taxPPN = 0;
					}
                    if($rowAccount2->pph_tax_id != '' && $rowAccount2->pph_tax_id != 0 && $rowAccount2->handling_price != '' && $rowAccount2->handling_price > 0) {
                        $sqlTax = "SELECT * FROM tax WHERE tax_id = {$rowAccount2->pph_tax_id}";
                        $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
                        
                        if($resultTax !== false && $resultTax->num_rows > 0) {
                            $rowTax = $resultTax->fetch_object();
                            $taxValue = $rowTax->tax_value;
                            
                           if($rowAccount2->vendor_handling_rule == 1){
								$totalHandling_Price = $rowAccount2->amount;
								
							}else{
								$totalHandling_Price = $rowAccount2->amount;
								
							}
                            if($rowTax->tax_category == 1) {
                                $totalHandlingPrice = ($totalHandling_Price) / ((100 - $taxValue) / 100);
                                $creditHandlingPrice = $totalHandling_Price;
                            } else {
                                $totalHandlingPrice = $totalHandling_Price;
                                $creditHandlingPrice = $totalHandling_Price + (($totalHandling_Price) * ($taxPPN / 100)) - (($totalHandling_Price) * ($taxValue / 100));
                            }
                        } else {
                            $totalHandlingPrice = $rowAccount2->amount;
                            $creditHandlingPrice = ($rowAccount2->amount) + (($rowAccount2->amount) * ($taxPPN / 100)) - (($rowAccount2->amount) * ($taxValue / 100)) ;
                            $taxValue = 0;
                        }
                    } else if($rowAccount2->handling_price != '' && $rowAccount2->handling_price > 0) {
                        if($rowAccount2->vendor_handling_rule == 1){
								$totalHandlingPrice = $rowAccount2->amount;
								$creditHandlingPrice = $totalHandlingPrice;
							}else{
								$totalHandlingPrice = $rowAccount2->amount;
								$creditHandlingPrice = $totalHandlingPrice;
							}
                        $taxValue = 0;
                    }else {
                        $totalHandlingPrice = 0;
                        $creditHandlingPrice = 0;
                        $taxValue = 0;
                    }
                    
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 210109) {
							if($rowAccount2->send_weight < 0){
								$totalHandlingPrice1 = $totalHandlingPrice * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalHandlingPrice1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalHandlingPrice})";
							}
                        } elseif($rowAccount->account_no == $rowAccount2->aVendorHandling) {
                            $amount = $totalHandlingPrice * ($taxValue / 100);
							if($rowAccount2->send_weight < 0){
								$amount1 = $amount * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
							}
                        } elseif($rowAccount->account_no == $rowAccount2->appn) {
                            $amountPPN = $totalHandlingPrice * ($taxPPN / 100);
							if($rowAccount2->send_weight < 0){
								$amountPPN1 = $amountPPN * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
							}
                        }elseif($rowAccount->account_no == 210106) {
							if($rowAccount2->send_weight < 0){
								$creditHandlingPrice1 = $creditHandlingPrice * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditHandlingPrice1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditHandlingPrice})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
					echo 'e';
                }
						//}
						
                           
						    
                        }
                    } else {
                        $boolContinue = false;
                    }
				
		}else if ($row->payment_method == 2){
			echo 'XYZ';
			$sql = "SELECT inv.*, apph.`account_no` AS a_pph,appn.`account_no` AS a_ppn,pp.`dpp`, pp.`pph_amount`, pp.`ppn_amount`, ((pp.`dpp` + pp.`ppn_amount`) - pp.`pph_amount`) AS amount
					FROM invoice_notim inv
					LEFT JOIN vendor_handling l ON l.`vendor_handling_id` = inv.`vendorHandlingId`
					LEFT JOIN tax lpph ON lpph.`tax_id` = l.`pph_tax_id`
					LEFT JOIN account apph ON apph.`account_id` = lpph.`account_id`
					LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
					LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
					LEFT JOIN pengajuan_payment pp ON pp.`idPP` = inv.`idPP`
					WHERE inv.`inv_notim_id`= {$invoiceId}";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
			//echo 'ZZ';
			 $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (9, 7) AND account_no in (130006, 210106 , '{$row->a_pph}', '{$row->a_ppn}')";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130006) {
								
								 $insertValues .= "(2, '{$source}', 'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->dpp})";	
								
                            } elseif($rowAccount->account_no == 210106) {
								
								$insertValues .= "(1, '{$source}',  'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount})";	
								
                            } elseif($rowAccount->account_no == $row->a_pph) {
								
								$insertValues .= "(1, '{$source}',  'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_amount})";	
								
                            } elseif($rowAccount->account_no == $row->a_ppn) {
								
								$insertValues .= "(2, '{$source}',  'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_amount})";	
								
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
				}
			}
		
		}else if($row->vendor_id != 'NULL' && $row->vendor_id != '' && $row->vendor_id != 0){
			
		if ($row->idPP == 0){ //settlement
			
			$sqlDP = "SELECT inv.*,f.`pph`, apph.`account_no` AS apph, f.`ppn`, appn.`account_no` AS appn,
(SELECT SUM(amount) FROM payment_oa WHERE inv_notim_id = inv.`inv_notim_id`) AS downPayment
FROM invoice_notim inv
LEFT JOIN freight f ON f.`freight_id` = inv.`freightId`
LEFT JOIN tax fpph ON fpph.`tax_id` = f.`pph_tax_id`
LEFT JOIN account apph ON apph.`account_id` = fpph.`account_id`
LEFT JOIN tax fppn ON fppn.`tax_id` = f.`ppn_tax_id`
LEFT JOIN account appn ON appn.`account_id` = fppn.`account_id`
WHERE inv.`inv_notim_id` = {$invoiceId}";
			 $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                    
                    if($resultDP !== false && $resultDP->num_rows > 0) {
                        while($rowDP = $resultDP->fetch_object()) {
										
				$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (210103, 130003, '{$rowDP->apph}', '{$rowDP->appn}')";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130003) {
								
								 $insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->downPayment})";	
								
                            } elseif($rowAccount->account_no == 210103) {
								$amount = $rowDP->downPayment + ($rowDP->downPayment * ($rowDP->ppn / 100)) - ($rowDP->downPayment * ($rowDP->pph / 100));
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";	
								
                            } elseif($rowAccount->account_no == $rowDP->apph) {
								$pphDP = $rowDP->downPayment * ($rowDP->pph / 100);
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pphDP})";	
								
                            } elseif($rowAccount->account_no == $rowDP->appn) {
								$ppnDP = $rowDP->downPayment * ($rowDP->ppn / 100);
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppnDP})";	
								
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }	
							
							
						}
					}
		}	
			
		else if (($row->payment_method == 1 || $row->payment_method == 3) && $row->amount < $row->original_amount){
			//echo 'XY';
			$sqlDP = "SELECT inv.*, (pp.original_amount - pp.amount) AS downPayment, v.`pph`, apph.`account_no` AS apph, v.`ppn`, appn.`account_no` AS appn
FROM invoice_notim inv
LEFT JOIN pengajuan_payment pp ON inv.`idPP` = pp.`idPP`
LEFT JOIN vendor v ON v.`vendor_id` = inv.`vendor_id`
LEFT JOIN tax vpph ON vpph.`tax_id` = v.`pph_tax_id`
LEFT JOIN account apph ON apph.`account_id` = vpph.`account_id`
LEFT JOIN tax vppn ON vppn.`tax_id` = v.`ppn_tax_id`
LEFT JOIN account appn ON appn.`account_id` = vppn.`account_id`
WHERE inv.`inv_notim_id` =  {$invoiceId}";
			 $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                    
                    if($resultDP !== false && $resultDP->num_rows > 0) {
                        while($rowDP = $resultDP->fetch_object()) {
										
				$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (0, 7) AND account_no in (210101, 130002, '{$rowDP->apph}', '{$rowDP->appn}')";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130002) {
								
								 $insertValues .= "(1, '{$source}', 'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->downPayment})";	
								
                            } elseif($rowAccount->account_no == 210101) {
								$amount = $rowDP->downPayment + ($rowDP->downPayment * ($rowDP->ppn / 100)) - ($rowDP->downPayment * ($rowDP->pph / 100));
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";	
								
                            } elseif($rowAccount->account_no == $rowDP->apph) {
								$pphDP = $rowDP->downPayment * ($rowDP->pph / 100);
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pphDP})";	
								
                            } elseif($rowAccount->account_no == $rowDP->appn) {
								$ppnDP = $rowDP->downPayment * ($rowDP->ppn / 100);
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppnDP})";	
								
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }	
							
							
						}
					}
		}
			
		if ($row->idPP == 0){ //settlement			
                    
                    $sqlAccount2 = "SELECT inv.*, t.`transaction_id`, t.`freight_price`, t.`freight_quantity`, t.`fc_tax_id`, f.`freight_rule`, af.`account_no` AS aFreight, t.send_weight, 
fppn.`tax_id` AS fppn , appn.`account_no` AS appn, f.`ppn`
FROM invoice_notim inv
LEFT JOIN payment_oa pa ON pa.inv_notim_id = inv.inv_notim_id
LEFT JOIN `transaction` t ON t.`transaction_id` = pa.`transaction_id`
LEFT JOIN freight_cost fc ON fc.`freight_cost_id` = t.`freight_cost_id`
LEFT JOIN freight f ON f.`freight_id` = fc.`freight_id`
LEFT JOIN tax ftx ON ftx.`tax_id` = t.`fc_tax_id`
LEFT JOIN account af ON af.`account_id` = ftx.`account_id`
LEFT JOIN tax fppn ON fppn.`tax_id` = f.`ppn_tax_id`
LEFT JOIN account appn ON appn.`account_id` = fppn.`account_id`
WHERE inv.`inv_notim_id` = {$invoiceId}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {
							
		//if($rowAccount2->freightId != 'NULL'){
		$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 2 AND account_no in (210110, '{$rowAccount2->aFreight}', 210103, '{$rowAccount2->appn}')";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
				//$taxValue = 0;
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
					if($rowAccount2->fppn != '' && $rowAccount2->fppn != 0){
						$taxPPN = $rowAccount2->ppn;
					}else{
						$taxPPN = 0;
					}
                    if($rowAccount2->fc_tax_id != '' && $rowAccount2->fc_tax_id != 0 && $rowAccount2->freight_price != '' && $rowAccount2->freight_price > 0) {
                        $sqlTax = "SELECT * FROM tax WHERE tax_id = {$rowAccount2->fc_tax_id}";
                        $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
                        
                        if($resultTax !== false && $resultTax->num_rows > 0) {
                            $rowTax = $resultTax->fetch_object();
                            $taxValue = $rowTax->tax_value;
                            
                           if($rowAccount2->freight_rule == 1){
								$totalFreight_Price = $rowAccount2->freight_price * $rowAccount2->send_weight;
								
							}else{
								$totalFreight_Price = $rowAccount2->freight_price * $rowAccount2->freight_quantity;
								
							}
                            if($rowTax->tax_category == 1) {
                                $totalFreightPrice = ($totalFreight_Price) / ((100 - $taxValue) / 100);
                                $creditFreightPrice = $totalFreight_Price;
                            } else {
                                $totalFreightPrice = $totalFreight_Price;
                                $creditFreightPrice = $totalFreight_Price + (($totalFreight_Price) * ($taxPPN / 100)) - (($totalFreight_Price) * ($taxValue / 100));
                            }
                        } else {
                            $totalFreightPrice = $rowAccount2->freight_price * $rowAccount2->freight_quantity;
                            $creditFreightPrice = ($rowAccount2->freight_price * $rowAccount2->freight_quantity) + (($rowAccount2->freight_price * $rowAccount2->freight_quantity) * ($taxPPN / 100)) - (($rowAccount2->freight_price * $rowAccount2->freight_quantity) * ($taxValue / 100)) ;
                            $taxValue = 0;
                        }
                    } else if($rowAccount2->freight_price != '' && $rowAccount2->freight_price > 0) {
                        if($rowAccount2->freight_rule == 1){
								$totalFreightPrice = $rowAccount2->freight_price * $rowAccount2->send_weight;
								$creditFreightPrice = $totalFreightPrice;
							}else{
								$totalFreightPrice = $rowAccount2->freight_price * $rowAccount2->freight_quantity;
								$creditFreightPrice = $totalFreightPrice;
							}
                        $taxValue = 0;
                    }else {
                        $totalFreightPrice = 0;
                        $creditFreightPrice = 0;
                        $taxValue = 0;
                    }
                    
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 210110) {
							if($rowAccount2->send_weight < 0){
								$totalFreightPrice1 = $totalFreightPrice * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalFreightPrice1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalFreightPrice})";
							}
                        } elseif($rowAccount->account_no == $rowAccount2->aFreight) {
                            $amount = $totalFreightPrice * ($taxValue / 100);
							if($rowAccount2->send_weight < 0){
								$amount1 = $amount * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
							}
                        } elseif($rowAccount->account_no == $rowAccount2->appn) {
                            $amountPPN = $totalFreightPrice * ($taxPPN / 100);
							if($rowAccount2->send_weight < 0){
								$amountPPN1 = $amountPPN * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
							}
                        }elseif($rowAccount->account_no == 210103) {
							if($rowAccount2->send_weight < 0){
								$creditFreightPrice1 = $creditFreightPrice * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditFreightPrice1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditFreightPrice})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
					echo 'e';
                }
						//}
						
                           
						    
                        }
                    } else {
                        $boolContinue = false;
                    }
				
		}else if ($row->payment_method == 1 || $row->payment_method == 3){			
                    echo 'A';
                    $sqlAccount2 = "SELECT inv.*, t.`transaction_id`, t.`unit_price`, t.`quantity`, v.`pph_tax_id`, av.`account_no` AS aVendor, t.send_weight, 
vppn.`tax_id` AS vppn , appn.`account_no` AS appn, v.`ppn`
FROM invoice_notim inv
LEFT JOIN payment_curah pc ON pc.inv_notim_id = inv.inv_notim_id
LEFT JOIN `transaction` t ON t.`transaction_id` = pc.`transaction_id`
LEFT JOIN vendor v ON v.`vendor_id` = inv.`vendor_id`
LEFT JOIN tax vtx ON vtx.`tax_id` = v.`pph_tax_id`
LEFT JOIN account av ON av.`account_id` = vtx.`account_id`
LEFT JOIN tax vppn ON vppn.`tax_id` = v.`ppn_tax_id`
LEFT JOIN account appn ON appn.`account_id` = vppn.`account_id`
WHERE inv.`inv_notim_id` = {$invoiceId}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {
							
		//if($rowAccount2->freightId != 'NULL'){
		$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 0 AND account_no in (210111, '{$rowAccount2->aVendor}', 210101, '{$rowAccount2->appn}')";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
				//$taxValue = 0;
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
					if($rowAccount2->vppn != '' && $rowAccount2->vppn != 0){
						$taxPPN = $rowAccount2->ppn;
					}else{
						$taxPPN = 0;
					}
                    if($rowAccount2->pph_tax_id != '' && $rowAccount2->pph_tax_id != 0 && $rowAccount2->unit_price != '' && $rowAccount2->unit_price > 0) {
                        $sqlTax = "SELECT * FROM tax WHERE tax_id = {$rowAccount2->pph_tax_id}";
                        $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
                        
                        if($resultTax !== false && $resultTax->num_rows > 0) {
                            $rowTax = $resultTax->fetch_object();
                            $taxValue = $rowTax->tax_value;
                            
                          
								$totalCurah_Price = $rowAccount2->unit_price * $rowAccount2->quantity;
								
							
                            if($rowTax->tax_category == 1) {
                                $totalCurahPrice = ($totalCurah_Price) / ((100 - $taxValue) / 100);
                                $creditCurahPrice = $totalCurah_Price;
                            } else {
                                $totalCurahPrice = $totalCurah_Price;
                                $creditCurahPrice = $totalCurah_Price + (($totalCurah_Price) * ($taxPPN / 100)) - (($totalCurah_Price) * ($taxValue / 100));
                            }
                        } else {
                            $totalCurahPrice = $rowAccount2->unit_price * $rowAccount2->quantity;
                            $creditCurahPrice = ($rowAccount2->unit_price * $rowAccount2->quantity) + (($rowAccount2->unit_price * $rowAccount2->quantity) * ($taxPPN / 100)) - (($rowAccount2->quantity * $rowAccount2->quantity) * ($taxValue / 100)) ;
                            $taxValue = 0;
                        }
                    } else if($rowAccount2->unit_price != '' && $rowAccount2->unit_price > 0) {
                       
								$totalCurahPrice = $rowAccount2->unit_price * $rowAccount2->quantity;
								$creditCurahPrice = $totalCurahPrice + (($rowAccount2->unit_price * $rowAccount2->quantity) * ($taxPPN / 100));
						        $taxValue = 0;
                    }else {
                        $totalCurahPrice = 0;
                        $creditCurahPrice = 0;
                        $taxValue = 0;
                    }
                    
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 210111) {
							if($rowAccount2->send_weight < 0){
								$totalCurahPrice1 = $totalCurahPrice * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCurahPrice1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCurahPrice})";
							}
                        } elseif($rowAccount->account_no == $rowAccount2->aVendor) {
                            $amount = $totalCurahPrice * ($taxValue / 100);
							if($rowAccount2->send_weight < 0){
								$amount1 = $amount * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
							}
                        } elseif($rowAccount->account_no == $rowAccount2->appn) {
                            $amountPPN = $totalCurahPrice * ($taxPPN / 100);
							if($rowAccount2->send_weight < 0){
								$amountPPN1 = $amountPPN * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
							}
                        }elseif($rowAccount->account_no == 210101) {
							if($rowAccount2->send_weight < 0){
								$creditCurahPrice1 = $creditCurahPrice * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditCurahPrice1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditCurahPrice})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
					echo 'e';
                }
						//}
						
                           
						    
                        }
                    } else {
                        $boolContinue = false;
                    }
				
		}else if ($row->payment_method == 2){
			echo 'XYZ';
			$sql = "SELECT inv.*, apph.`account_no` AS a_pph,appn.`account_no` AS a_ppn,pp.`dpp`, pp.`pph_amount`, pp.`ppn_amount`, ((pp.`dpp` + pp.`ppn_amount`) - pp.`pph_amount`) AS amount
					FROM invoice_notim inv
					LEFT JOIN vendor v ON v.`vendor_id` = inv.`vendor_id`
					LEFT JOIN tax vpph ON vpph.`tax_id` = v.`pph_tax_id`
					LEFT JOIN account apph ON apph.`account_id` = vpph.`account_id`
					LEFT JOIN tax vppn ON vppn.`tax_id` = v.`ppn_tax_id`
					LEFT JOIN account appn ON appn.`account_id` = vppn.`account_id`
					LEFT JOIN pengajuan_payment pp ON pp.`idPP` = inv.`idPP`
					WHERE inv.`inv_notim_id`= {$invoiceId}";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
			//echo 'ZZ';
			 $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (9, 7) AND account_no in (130006, 210106 , '{$row->a_pph}', '{$row->a_ppn}')";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130002) {
								
								 $insertValues .= "(2, '{$source}', 'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->dpp})";	
								
                            } elseif($rowAccount->account_no == 210101) {
								
								$insertValues .= "(1, '{$source}',  'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount})";	
								
                            } elseif($rowAccount->account_no == $row->a_pph) {
								
								$insertValues .= "(1, '{$source}',  'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_amount})";	
								
                            } elseif($rowAccount->account_no == $row->a_ppn) {
								
								$insertValues .= "(2, '{$source}',  'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_amount})";	
								
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
				}
			}
		
		}
	}	
				
                // </editor-fold>
            
		
        // </editor-fold>
}
*/elseif($transactionId != 'NULL' && $source == 'NOTA TIMBANG2') {
		
		$sql = "DELETE FROM general_ledger WHERE account_id IN (8,52,147) AND transaction_id = {$transactionId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
		
		
		$sql = "SELECT t.*, con.contract_type, fc.freight_id, a.`account_no` AS sales_account, sl.`price_converted` AS sales_price_converted
,sh.`shipment_code`, cust.ppn AS ppn_buyer, sl.price, sl.exchange_rate, f.freight_rule, vh.vendor_handling_rule
					FROM `transaction` t 
					LEFT JOIN stockpile_contract sc
						ON sc.stockpile_contract_id = t.stockpile_contract_id
					LEFT JOIN contract con
						ON con.contract_id = sc.contract_id
					LEFT JOIN freight_cost fc
						ON t.`freight_cost_id` = fc.`freight_cost_id`
					LEFT JOIN shipment sh
						ON t.`shipment_id` = sh.`shipment_id`
					LEFT JOIN sales sl
						ON sh.`sales_id` = sl.`sales_id`
					LEFT JOIN customer cust
						ON sl.`customer_id` = cust.`customer_id`
					LEFT JOIN account a
						ON sl.`account_id` = a.`account_id`
					LEFT JOIN freight f
						ON fc.freight_id = f.freight_id
					LEFT JOIN vendor_handling_cost vhc
						ON vhc.handling_cost_id = t.handling_cost_id
					LEFT JOIN vendor_handling vh
						ON vh.vendor_handling_id = vhc.vendor_handling_id
					WHERE t.transaction_id = {$transactionId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
			
			if($row->contract_type == 'P') {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (140000, 520100, 130100)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
					if($rowAccount->account_no == 140000) {
                                if($row->netto_weight < $row->send_weight) {
                                    $amount = $row->quantity * $row->unit_price;
                                } else {
                                    $amount = $row->send_weight * $row->unit_price;
                                }
								if($row->send_weight < 0){
									$amount1 = $amount * -1;
								$insertValues .= "(2, 'NOTA TIMBANG', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";	
								}else{
                                $insertValues .= "(1, 'NOTA TIMBANG', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
								}
                            } elseif($rowAccount->account_no == 520100) {
                                if($row->netto_weight < $row->send_weight) {
                                    $amount = $row->shrink * $row->unit_price;
                                } else {
                                    $amount = 0;
                                }
								if($row->send_weight < 0){
									$amount1 = $amount * -1;
                                $insertValues .= "(2, 'NOTA TIMBANG', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
								}else{
								$insertValues .= "(1, 'NOTA TIMBANG', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
								}
                            } elseif($rowAccount->account_no == 130100) {
                                $amount = $row->send_weight * $row->unit_price;
								if($row->send_weight < 0){
									$amount1 = $amount * -1;
                                $insertValues .= "(1, 'NOTA TIMBANG', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
								}else{
								$insertValues .= "(2, 'NOTA TIMBANG', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
			}
		
		} else {
            $boolContinue = false;
        }
		
	}elseif($transactionId != 'NULL') {
        // <editor-fold defaultstate="collapsed" desc="transaction">
       /*if($transactionId != 257943){
		$sqlCek = "SELECT transaction_type FROM `transaction` WHERE transaction_id = {$transactionId}";
		$resultCek = $myDatabase->query($sqlCek, MYSQLI_STORE_RESULT);
        if($resultCek !== false && $resultCek->num_rows == 1) {
            $rowCek = $resultCek->fetch_object();
		
		if($rowCek->transaction_type != 2){*/
        $sql = "DELETE FROM general_ledger WHERE transaction_id = {$transactionId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
		//}
			//}
		//}
		echo 'a';
		$aFreight = '';
        $sql = "SELECT t.*, con.contract_type, fc.freight_id, a.`account_no` AS sales_account, sl.`price_converted` AS sales_price_converted
                    ,sh.`shipment_code`, cust.ppn AS ppn_buyer, sl.price, sl.exchange_rate, f.freight_rule, vh.vendor_handling_rule,sl.`sales_status`,
                    af.`account_no` AS aFreight,con.`return_shipment`, con.`contract_id`,sl.`sales_type`
					FROM `transaction` t 
					LEFT JOIN stockpile_contract sc
						ON sc.stockpile_contract_id = t.stockpile_contract_id
					LEFT JOIN contract con
						ON con.contract_id = sc.contract_id
					LEFT JOIN freight_cost fc
						ON t.`freight_cost_id` = fc.`freight_cost_id`
					LEFT JOIN shipment sh
						ON t.`shipment_id` = sh.`shipment_id`
					LEFT JOIN sales sl
						ON sh.`sales_id` = sl.`sales_id`
					LEFT JOIN customer cust
						ON sl.`customer_id` = cust.`customer_id`
					LEFT JOIN account a
						ON sl.`account_id` = a.`account_id`
					LEFT JOIN freight f
						ON fc.freight_id = f.freight_id
					LEFT JOIN vendor_handling_cost vhc
						ON vhc.handling_cost_id = t.handling_cost_id
					LEFT JOIN vendor_handling vh
						ON vh.vendor_handling_id = vhc.vendor_handling_id
					LEFT JOIN tax ftx ON ftx.`tax_id` = t.`fc_tax_id`
					LEFT JOIN account af ON af.`account_id` = ftx.`account_id`
					WHERE t.transaction_id = {$transactionId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
           
			if($row->adjustmentAudit_id != '' && $row->adjustmentAudit_id != 'NULL'){
				//$totalCogsPrice = 0;
                $totalCogsHandling = 0;
                $totalCogsFC = 0;
                $totalCogsUC = 0;
                $totalCogsStock = 0;
                $sqlCogs1 = "SELECT SUM(a.cogs_pks) AS cogs_pks, SUM(a.cogs_oa) AS cogs_oa, SUM(a.cogs_ob) AS cogs_ob, SUM(a.cogs_handling) AS cogs_handling,
                             SUM(a.total_amount) AS total_amount FROM adjustment_audit_qty a WHERE a.`audit_id` =  {$row->adjustmentAudit_id}";
                $resultCogs1 = $myDatabase->query($sqlCogs1, MYSQLI_STORE_RESULT);
                
                if($resultCogs1 !== false && $resultCogs1->num_rows > 0) {
                    while($rowCogs1 = $resultCogs1->fetch_object()) {
						
                        $totalCogsHandling = $rowCogs1->cogs_handling ;
                        $totalCogsFC = $rowCogs1->cogs_oa;
                        $totalCogsUC = $rowCogs1->cogs_ob;
                        $totalCogsStock = $rowCogs1->cogs_pks;
                        $totalCogs = $rowCogs1->total_amount;
				
                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (510101, 510102, 510103, 510104, 140000)";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                        if($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while($rowAccount = $resultAccount->fetch_object()) {
                                if($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if($rowAccount->account_no == 510101) {
                                    if($row->send_weight < 0){
                                        //$total_pks21 = $total_pks2 * -1;
                                        $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId},  {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogsStock})";
                                    }else{
                                        $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId},  {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogsStock})";
                                    }
                                } /*elseif($rowAccount->account_no == 510201) {
                                    if($qty < 0){
                                        //$shrink1 = $shrink * -1;
                                    $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$shrink})";
                                    }else{
                                    $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$shrink})";
                                    }
                                } */elseif($rowAccount->account_no == 510102) {
                                    if($row->send_weight < 0){
                                        //$total_fc1 = $total_fc * -1;
                                    $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogsFC})";
                                    }else{
                                    $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogsFC})";
                                    }
                                } elseif($rowAccount->account_no == 510103) {
                                    if($row->send_weight < 0){
                                        //$total_uc1 = $total_uc * -1;
                                    $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogsUC})";
                                    }else{
                                    $insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogsUC})";
                                    }
                                } elseif($rowAccount->account_no == 510104) {
                                    if($row->send_weight < 0){
                                        //$total_hc1 = $total_hc * -1;
                                    $insertValues .= "(1, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogsHandling})";
                                    }else{
                                    $insertValues .= "(2, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogsHandling})";
                                    }
                                } elseif($rowAccount->account_no == 140000) {
                                    if($row->send_weight < 0){
                                        //$total_cogs1 = $total_cogs * -1;
                                    $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogs})";
                                    }else{
                                    $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogs})";
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                
			        }
                }else{
                    echo 'mm';
                }
			
			}elseif($row->stock_transit_id != 0 && $row->stock_transit_id != 'NULL'){                        
				$amt_stock = $row->unit_cost * $row->netto_weight;
                $amt_stock_transit = $row->unit_cost * $row->netto_weight;

                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (141000, 140000)";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 140000) {
							
                            $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$amt_stock})";
							
                        } elseif($rowAccount->account_no == 141000) {
							
                            $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$amt_stock_transit})";
							
                        } 
                    }
                } else {
                    $boolContinue = false;
                }
                
			
				
			}else{
                if($row->transaction_type == 1) {
                    $aFreight = $row->aFreight;
                    // <editor-fold defaultstate="collapsed" desc="nota timbang">
                    if($row->contract_type == 'P') {
                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (140000, 520100, 130100)";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                        if($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while($rowAccount = $resultAccount->fetch_object()) {
                                if($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if($rowAccount->account_no == 140000) {
                                    if($row->netto_weight < $row->send_weight) {
                                        $amount = $row->quantity * $row->unit_price;
                                    } else {
                                        $amount = $row->send_weight * $row->unit_price;
                                    }
                                    if($row->send_weight < 0){
                                        $amount1 = ($row->quantity * $row->unit_price) * -1;
                                    $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";	
                                    }else{
                                    $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                    }
                                } elseif($rowAccount->account_no == 520100) {
                                    if($row->netto_weight < $row->send_weight) {
                                        $amount = $row->shrink * $row->unit_price;
                                    } else {
                                        $amount = 0;
                                    }
                                    if($row->send_weight < 0){
                                        $amount1 = ($row->shrink * $row->unit_price) * -1;
                                    $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                    }else{
                                    $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                    }
                                } elseif($rowAccount->account_no == 130100) {
                                    $amount = $row->send_weight * $row->unit_price;
                                    if($row->send_weight < 0){
                                        $amount1 = $amount * -1;
                                    $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                    }else{
                                    $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                            echo 'b';
                        }
                    } elseif($row->contract_type == 'C') { 
                        // echo " -- CURAh -- | " ;
                       if($row->return_shipment == 0){ //UNBILLED GOODS
                            // $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (140000, 123459)"; //210101
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (140000, 210101)"; //210101
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                $amount = $row->quantity * $row->unit_price;
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if($rowAccount->account_no == 140000) { //stock
                                        if($row->send_weight < 0){
                                            $amount1 = $amount * -1;
                                            $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})"; //28
                                        }
                                    } elseif($rowAccount->account_no == 123459) { //unbilled goods
                                        if($row->send_weight < 0){
                                            $amount1 = $amount * -1;
                                            $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})"; //29
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                                echo 'c';
                            } 
                        } 
                       /* if ($row->return_shipment == 0) { //HUTANG DAGANG
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (140000, 210101)";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            echo " CURAH -  " . $sqlAccount; 
                            if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                                $amount = $row->quantity * $row->unit_price;
                                $amountOA = $row->freight_quantity * $row->freight_price;
                                $amountOB = $row->unloading_price;
                                $amountHandling = $row->handling_quantity * $row->handling_price;

                                while ($rowAccount = $resultAccount->fetch_object()) {
                                    if ($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if ($rowAccount->account_no == 140000) {
                                        if ($row->send_weight < 0) {
                                            $amount1 = $amount * -1;
                                            $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                        } else {
                                            $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                        }
                                    } elseif ($rowAccount->account_no == 210101) {
                                        if ($row->send_weight < 0) {
                                            $amount1 = $amount * -1;
                                            $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                        } else {
                                            $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                                echo 'c';
                            }

                        } */
                        else{ 
                            $sqlA = "SELECT sl.*, a.account_no AS shipmentAccount, cust.`ppn` AS ppn_buyer  FROM account a
                                    LEFT JOIN sales sl ON a.`account_id` = sl.`account_id`
                                    LEFT JOIN shipment sh ON sh.`sales_id` = sl.`sales_id`
                                    LEFT JOIN contract c ON c.`return_shipment_id` = sh.`shipment_id`
                                    LEFT JOIN customer cust ON cust.`customer_id` = sl.`customer_id`
                                    WHERE c.`contract_id` = {$row->contract_id}
                                    LIMIT 1";
                            $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                            if($resultA !== false && $resultA->num_rows > 0) {
                                    $rowA = $resultA->fetch_object();
                                    $shipmentAccount = $rowA->shipmentAccount;
                                    $newSalesPriceA = round($rowA->price * $row->send_weight,2);
                                    $newSalesPriceB = round($newSalesPriceA * $rowA->exchange_rate,0);
                            //$salesPrice = $row->quantity * $row->sales_price_converted;
                                    $taxValueA = ($rowA->ppn_buyer / 100 * $newSalesPriceB);
                                    $totalSalesPriceA = $newSalesPriceB + $taxValueA;
                            }
                            
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (0,1) AND account_no in (120000, 230100, {$shipmentAccount}) GROUP BY account_no";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if($rowAccount->account_no == 120000) {
                                        if($row->quantity < 0){
                                            $totalSalesPrice11 = $totalSalesPriceA *-1;
                                        $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalSalesPrice1})";
                                        }else{
                                        $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalSalesPriceA})";
                                        }
                                    } elseif($rowAccount->account_no == 230100) {
                                        if($row->quantity < 0){
                                            $taxValue11 = $taxValueA *-1;
                                        $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$taxValue11})";
                                        }else{
                                        $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$taxValueA})";
                                        }
                                    } elseif($rowAccount->account_no == $shipmentAccount) {
                                        if($row->quantity < 0){
                                            $newSalesPriceB1 = $newSalesPriceB *-1;
                                        $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$newSalesPriceB1})";
                                        }else{
                                        $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$newSalesPriceB})";
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                            }
                            
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1) AND account_no in (510100, 140000)";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            $amount = $row->quantity * $row->unit_price;
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if($rowAccount->account_no == 140000) {
                                        if($row->send_weight < 0){
                                            $amount1 = $amount * -1;
                                            $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                        }
                                    } elseif($rowAccount->account_no == 510100) {
                                        if($row->send_weight < 0){
                                            $amount1 = $amount * -1;
                                            $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                            }
                        }
                    } else {
                        $boolContinue = false; //FREIGHT
                        echo 'd';
                    } 

                    // echo " -- FREIGHT -- | " ;
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 2 AND account_no in (140000, 123456)";
                    // $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 2 AND account_no in (140000, '{$aFreight}', 210103)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    //$taxValue = 0;
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        if($row->fc_tax_id != '' && $row->fc_tax_id != 0 && $row->freight_price != '' && $row->freight_price > 0) {
                            $sqlTax = "SELECT * FROM tax WHERE tax_id = {$row->fc_tax_id}";
                            $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
                            
                            if($resultTax !== false && $resultTax->num_rows > 0) {
                                $rowTax = $resultTax->fetch_object();
                                $taxValue = $rowTax->tax_value;
                                
                            if($row->freight_rule == 1){
                                    $totalFreight_Price = $row->freight_price * $row->send_weight;
                                    
                                }else{
                                    $totalFreight_Price = $row->freight_price * $row->freight_quantity;
                                    
                                }
                                if($rowTax->tax_category == 1) {
                                    $totalFreightPrice = ($totalFreight_Price) / ((100 - $taxValue) / 100);
                                    $creditFreightPrice = $totalFreight_Price;
                                } else {
                                    $totalFreightPrice = $totalFreight_Price;
                                    $creditFreightPrice = $totalFreight_Price - ($totalFreight_Price) * ($taxValue / 100);
                                }
                            } else {
                                $totalFreightPrice = $row->freight_price * $row->freight_quantity;
                                $creditFreightPrice = ($row->freight_price * $row->freight_quantity) - (($row->freight_price * $row->freight_quantity) * ($taxValue / 100)) ;
                                $taxValue = 0;
                            }
                        } else if($row->freight_price != '' && $row->freight_price > 0) {
                            if($row->freight_rule == 1){
                                    $totalFreightPrice = $row->freight_price * $row->send_weight;
                                    $creditFreightPrice = $totalFreightPrice;
                                }else{
                                    $totalFreightPrice = $row->freight_price * $row->freight_quantity;
                                    $creditFreightPrice = $totalFreightPrice;
                                }
                            $taxValue = 0;
                        }else {
                            $totalFreightPrice = 0;
                            $creditFreightPrice = 0;
                            $taxValue = 0;
                        }
                        
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 140000) {
                                if($row->send_weight < 0){
                                    $totalFreightPrice1 = $totalFreightPrice * -1;
                                $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalFreightPrice1})";
                                }else{
                                $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalFreightPrice})";
                                }
                            } elseif($rowAccount->account_no == $aFreight) {
                                $amount = $totalFreightPrice * ($taxValue / 100);
                                if($row->send_weight < 0){
                                    $amount1 = $amount * -1;
                                $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                }else{
                                $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                }
                            } 
                            // elseif($rowAccount->account_no == 210103) {
                            //     if($row->send_weight < 0){
                            //         $creditFreightPrice1 = $creditFreightPrice * -1;
                            //     $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditFreightPrice1})";
                            //     }else{
                            //     $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditFreightPrice})";
                            //     }
                            // }
                            elseif($rowAccount->account_no == 123456) {
                                if($row->send_weight < 0){ //Retur Debit
                                    $totalFreightPrice1 = $totalFreightPrice * -1;
                                $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalFreightPrice1})";
                                }else{ //Credit
                                    $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalFreightPrice})";
                                }
                            } 
                        }
                    } else {
                        $boolContinue = false;
                        echo 'e';
                    } //FREIGHT SHRINK

                    // $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 2 AND account_no in (140000, 210103)";
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 2 AND account_no in (140000, '{$aFreight}', 210103)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        //if($row->fc_tax_id != '') {
                        $sqlTax = "SELECT a.*, c.`tax_category`, c.`tax_value`,
                                    COALESCE(ROUND(CASE WHEN c.tax_category = 1 THEN a.amt_claim / ((100 - COALESCE(c.tax_value,0))/100) ELSE a.amt_claim END,10),0) AS freight_susut_credit,
                                    COALESCE(ROUND(CASE WHEN c.tax_category = 1 THEN a.amt_claim  ELSE a.amt_claim - (a.amt_claim * (COALESCE(c.tax_value,0)/100)) END,10),0) AS freight_susut_debit,
                                    COALESCE(ROUND((CASE WHEN c.tax_category = 1 THEN a.amt_claim / ((100 - COALESCE(c.tax_value,0))/100) ELSE a.amt_claim END) - 
                                    (CASE WHEN c.tax_category = 1 THEN a.amt_claim  ELSE a.amt_claim - (a.amt_claim * (COALESCE(c.tax_value,0)/100)) END),10),0) AS tax_susut_debit,
                                    b.`freight_cost_id`,
                                    b.`fc_tax_id`
                                    FROM transaction_shrink_weight a
                                    LEFT JOIN `transaction` b ON a.`transaction_id` = b.`transaction_id`
                                    LEFT JOIN tax c ON c.`tax_id` = b.`fc_tax_id`  
                                   WHERE a.`transaction_id` = {$transactionId}";
                        $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
                            
                        if($resultTax !== false && $resultTax->num_rows > 0) {
                            $rowTax = $resultTax->fetch_object();
                                
                            if($rowTax->freight_cost_id != ''){
                                $totalFreightShrink = $rowTax->freight_susut_debit;
                                $creditFreightShrink = $rowTax->freight_susut_credit;
                                $taxShrink = $rowTax->tax_susut_debit;
                            }else{
                                $totalFreightShrink = 0;
                                $creditFreightShrink = 0;
                                $taxShrink = 0;
                            }
                        } else {
                            $totalFreightShrink = 0;
                            $creditFreightShrink = 0;
                            $taxShrink = 0;
                        }
                        
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 140000) {
                                if($row->send_weight < 0){ //credit
                                    $creditFreightShrink1 = $creditFreightShrink * -1;
                                    $insertValues .= "(1, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$creditFreightShrink1})";
                                }else{ //debit
                                    $insertValues .= "(2, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$creditFreightShrink})";
                                }
                            } elseif($rowAccount->account_no == $aFreight) {
                                //$amount = $totalFreightPrice * ($taxValue / 100);
                                if($row->send_weight < 0){
                                    $taxShrink1 = $taxShrink * -1;
                                $insertValues .= "(2, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$taxShrink1})";
                                }else{
                                $insertValues .= "(1, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$taxShrink})";
                                }
                            } 
                            elseif($rowAccount->account_no == 210103) {
                                if($row->send_weight < 0){
                                    $totalFreightShrink1 = $totalFreightShrink * -1;
                                $insertValues .= "(2, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalFreightShrink1})";
                                }else{
                                $insertValues .= "(1, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalFreightShrink})";
                                }
                            }
                            // elseif($rowAccount->account_no == 123456) {
                            //     if($row->send_weight < 0){
                            //         $creditFreightShrink1 = $creditFreightShrink * -1;
                            //         $insertValues .= "(2, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditFreightShrink1})";
                            //     }else{
                            //         $insertValues .= "(1, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditFreightShrink})";
                            //     }
                            // } 
                        }
                    } else {
                        $boolContinue = false;
                        echo 'f';
                    } //SUSUT LUAR BIASA
                    
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 2 AND account_no in (520100, '{$aFreight}', 210103)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        //if($row->fc_tax_id != '') {
                        $sqlTax = "SELECT a.*, c.`tax_category`, c.`tax_value`,
                                    COALESCE(ROUND(CASE WHEN c.tax_category = 1 THEN a.amt_claim / ((100 - COALESCE(c.tax_value,0))/100) ELSE a.amt_claim END,10),0) AS freight_susut_credit,
                                    COALESCE(ROUND(CASE WHEN c.tax_category = 1 THEN a.amt_claim  ELSE a.amt_claim - (a.amt_claim * (COALESCE(c.tax_value,0)/100)) END,10),0) AS freight_susut_debit,
                                    COALESCE(ROUND((CASE WHEN c.tax_category = 1 THEN a.amt_claim / ((100 - COALESCE(c.tax_value,0))/100) ELSE a.amt_claim END) - 
                                    (CASE WHEN c.tax_category = 1 THEN a.amt_claim  ELSE a.amt_claim - (a.amt_claim * (COALESCE(c.tax_value,0)/100)) END),10),0) AS tax_susut_debit,
                                    b.`freight_cost_id`,
                                    b.`fc_tax_id`
                                    FROM transaction_additional_shrink a
                                    LEFT JOIN `transaction` b ON a.`transaction_id` = b.`transaction_id`
                                    LEFT JOIN tax c ON c.`tax_id` = b.`fc_tax_id`  
                                    WHERE a.`transaction_id` = {$transactionId}";
                        $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);

                        if ($resultTax !== false && $resultTax->num_rows > 0) {
                            $rowTax = $resultTax->fetch_object();

                            if ($rowTax->freight_cost_id != '') {
                                $totalFreightShrink = $rowTax->freight_susut_debit;
                                $creditFreightShrink = $rowTax->freight_susut_credit;
                                $taxShrink = $rowTax->tax_susut_debit;
                            } else {
                                $totalFreightShrink = 0;
                                $creditFreightShrink = 0;
                                $taxShrink = 0;
                            }
                        } else {
                            $totalFreightShrink = 0;
                            $creditFreightShrink = 0;
                            $taxShrink = 0;
                        }

                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount->account_no == 520100) {
                                if ($row->send_weight < 0) {
                                    $creditFreightShrink1 = $creditFreightShrink * -1;
                                    $insertValues .= "(1, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, 'add_shrink_fc', {$creditFreightShrink1})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, 'add_shrink_fc', {$creditFreightShrink})";
                                }
                            } elseif ($rowAccount->account_no == $aFreight) {
                                //$amount = $totalFreightPrice * ($taxValue / 100);
                                if ($row->send_weight < 0) {
                                    $taxShrink1 = $taxShrink * -1;
                                    $insertValues .= "(2, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'add_shrink_fc', {$taxShrink1})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId},  {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'add_shrink_fc', {$taxShrink})";
                                }
                            } elseif ($rowAccount->account_no == 210103) {
                                if ($row->send_weight < 0) {
                                    $totalFreightShrink1 = $totalFreightShrink * -1;
                                    $insertValues .= "(2, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'add_shrink_fc', {$totalFreightShrink1})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'add_shrink_fc', {$totalFreightShrink})";
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                        echo 'f';
                    }//HANDLING
                    // echo " -- HANDLING -- | " ;
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 9 AND account_no in (140000, 1245678)";
                    // $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 9 AND account_no in (140000, '{$aHandling}', 210106)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        if($row->handling_cost_id != '') {
                            $sqlTax = "SELECT tx.* FROM tax tx
                            LEFT JOIN vendor_handling vh ON vh.`pph_tax_id` = tx.`tax_id`
                            LEFT JOIN vendor_handling_cost vhc ON vhc.`vendor_handling_id` = vh.`vendor_handling_id`
                            WHERE vhc.`handling_cost_id` = {$row->handling_cost_id}";
                            $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
                            
                            if($resultTax !== false && $resultTax->num_rows > 0) {
                                $rowTax = $resultTax->fetch_object();
                                $taxValue = $rowTax->tax_value;
                                
                            if($row->vendor_handling_rule == 1){
                                    $totalHandling_Price = $row->handling_price * $row->send_weight;
                                    
                                }else{
                                    $totalHandling_Price = $row->handling_price * $row->handling_quantity;
                                    
                                }
                                if($rowTax->tax_category == 1) {
                                    $totalHandlingPrice = ($totalHandling_Price) / ((100 - $taxValue) / 100);
                                    $creditHandlingPrice = $totalHandling_Price;
                                } else {
                                    $totalHandlingPrice = $totalHandling_Price;
                                    $creditHandlingPrice = $totalHandling_Price - ($totalHandling_Price) * ($taxValue / 100);
                                }
                            } else {
                                $totalHandlingPrice = $row->handling_price * $row->handling_quantity;
                                $creditHandlingPrice = ($row->handling_price * $row->handling_quantity) - (($row->handling_price * $row->handling_quantity) * ($taxValue / 100)) ;
                                $taxValue = 0;
                            }
                        } else {
                            $totalHandlingPrice = 0;
                            $creditHandlingPrice = 0;
                            $taxValue = 0;
                        }
                        
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 140000) { //stock
                                if($row->send_weight < 0){
                                    $totalHandlingPrice1 = $totalHandlingPrice * -1;
                                $insertValues .= "(2, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalHandlingPrice1})";
                                }else{
                                $insertValues .= "(1, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalHandlingPrice})";
                                }
                            } elseif($rowAccount->account_no == 230204) {
                                $amount = $totalHandlingPrice * ($taxValue / 100);
                                if($row->send_weight < 0){
                                    $amount1 = $amount * -1;
                                $insertValues .= "(1, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                }else{
                                $insertValues .= "(2, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                }
                            } 
                            // elseif($rowAccount->account_no == 210106) {
                            //     if($row->send_weight < 0){
                            //         $creditHandlingPrice1 = $creditHandlingPrice * -1;
                            //     $insertValues .= "(1, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditHandlingPrice1})";
                            //     }else{
                            //     $insertValues .= "(2, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditHandlingPrice})";
                            //     }
                            // }
                            elseif($rowAccount->account_no == 1245678) { //unbilled Handling
                                if($row->send_weight < 0){
                                    $totalHandlingPrice1 = $totalHandlingPrice * -1;
                                $insertValues .= "(1, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalHandlingPrice1})";
                                }else{
                                $insertValues .= "(2, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalHandlingPrice})";
                                }
                            } 
                        }
                    } else {
                        echo 'test2';
                        $boolContinue = false; //UNLOADING
                    }
                    // echo " -- UNLOADING -- | " ;
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 3 AND account_no in (140000, 1234567)";
                    // $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (6,3) AND account_no in (140000, '{$aUnloading}', 210104)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        if($row->uc_tax_id != '') {
                            $sqlTax = "SELECT * FROM tax WHERE tax_id = {$row->uc_tax_id}";
                            $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
                            
                            if($resultTax !== false && $resultTax->num_rows > 0) {
                                $rowTax = $resultTax->fetch_object();
                                $taxValue = 0;
                                
                                if($rowTax->tax_category == 1) {
                                    $totalUnloadingPrice = $row->unloading_price / ((100 - $taxValue) / 100);
                                    $creditUnloadingPrice = $row->unloading_price;
                                } else {
                                    $totalUnloadingPrice = $row->unloading_price;
                                    $creditUnloadingPrice = $row->unloading_price - $row->unloading_price * ($taxValue / 100);
                                }
                            } else {
                                $totalUnloadingPrice = $row->unloading_price;
                                $creditUnloadingPrice = $row->unloading_price;
                                $taxValue = 0;
                            }
                        } else {
                            $totalUnloadingPrice = 0;
                            $creditUnloadingPrice = 0;
                            $taxValue = 0;
                        }
                        
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 140000) { //Stock
                                //echo 'betul betul';
                                if($row->send_weight < 0){
                                    $totalUnloadingPrice1 = $totalUnloadingPrice * -1;
                                $insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalUnloadingPrice1})";
                                }else{
                                $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalUnloadingPrice})";
                                }
                            } elseif($rowAccount->account_no == 230203) {
                                $amount = $totalUnloadingPrice * ($taxValue / 100);
                                if($row->send_weight < 0){
                                    $amount1 = $amount * -1;
                                $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$amount1})";
                                }else{
                                $insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$amount})";
                                }
                            } 
                            // elseif($rowAccount->account_no == 210104) {
                            //     if($row->send_weight < 0){
                            //         $creditUnloadingPrice1 = $creditUnloadingPrice * -1;
                            //     $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$creditUnloadingPrice1})";
                            //     }else{
                            //     $insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$creditUnloadingPrice})";
                            //     }
                            // }
                            elseif($rowAccount->account_no == 1234567) {  //Unbilled
                                if($row->send_weight < 0){
                                    $totalUnloadingPrice1 = $totalUnloadingPrice * -1;
                                $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalUnloadingPrice1})";
                                }else{
                                $insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalUnloadingPrice})";
                                }
                            } 
                        }
                    } else {
                        $boolContinue = false;
                        echo 'g';
                    }

                    // </editor-fold>
                    
                } elseif($row->transaction_type == 2) { //OUT
                
				if($row->sales_status == 3){
                $shipment_code = $row->shipment_code;
					$shipment_code1 = '-S-';
				    $pos1 = strpos($shipment_code, $shipment_code1);
                // <editor-fold defaultstate="collapsed" desc="nota timbang">
                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (0,1) AND account_no in (120000, 230100, {$row->sales_account}) GROUP BY account_no";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
					 if($pos1 !== FALSE){
					
					$newSalesPrice2 = 0;
                    $taxValue = 0;
                    $totalSalesPrice = 0;
					
					 }else{
                    $newSalesPrice1 = round($row->price * $row->quantity,2);
					$newSalesPrice2 = round($newSalesPrice1 * $row->exchange_rate,0);
					//$salesPrice = $row->quantity * $row->sales_price_converted;
                    $taxValue = ($row->ppn_buyer / 100 * $newSalesPrice2);
                    $totalSalesPrice = $newSalesPrice2 + $taxValue;
					 }
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 120000) {
							if($row->quantity < 0){
								$totalSalesPrice1 = $totalSalesPrice *-1;
                            $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalSalesPrice1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalSalesPrice})";
							}
                        } elseif($rowAccount->account_no == 230100) {
							if($row->quantity < 0){
								$taxValue1 = $taxValue *-1;
                            $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$taxValue1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$taxValue})";
							}
                        } elseif($rowAccount->account_no == $row->sales_account) {
							if($row->quantity < 0){
								$newSalesPrice21 = $newSalesPrice2 *-1;
                            $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$newSalesPrice21})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$newSalesPrice2})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
                }
			}  
                // </editor-fold>
                
                // <editor-fold defaultstate="collapsed" desc="cogs">
                
                $totalCogsPrice = 0;
                $totalCogsShrink = 0;
                $totalCogsFC = 0;
                $totalCogsUC = 0;
                $totalCogsStock = 0;
                $sqlCogs = "SELECT d.*, c.price_converted, t.shrink, t.freight_quantity, t.freight_price, t.unloading_price, t.handling_quantity, vhc.price_converted,
			f.ppn_tax_id AS fc_ppn_tax_id, f.ppn AS fc_ppn, fctxppn.tax_category AS fc_ppn_tax_category, t2.shrink AS susut,
            f.pph_tax_id AS fc_pph_tax_id, f.pph AS fc_pph, fctxpph.tax_category AS fc_pph_tax_category,
            l.ppn_tax_id AS uc_ppn_tax_id, l.ppn AS uc_ppn, uctxppn.tax_category AS uc_ppn_tax_category,
            l.pph_tax_id AS uc_pph_tax_id, l.pph AS uc_pph, uctxpph.tax_category AS uc_pph_tax_category,
			vh.ppn_tax_id AS vh_ppn_tax_id, vh.ppn AS vh_ppn, vhtxppn.tax_category AS vh_ppn_tax_category,
            vh.pph_tax_id AS vh_pph_tax_id, vh.pph AS vh_pph, vhtxpph.tax_category AS vh_pph_tax_category,
			d.quantity * c.price_converted AS cogs_amount,
			CASE WHEN t.delivery_status = 2 THEN (d.percent_taken / 100) * (t.quantity * t.freight_price)
			ELSE (d.percent_taken / 100) * (t.freight_quantity * t.freight_price) END AS freight_total,
			CASE WHEN t.delivery_status = 2 AND t.freight_cost_id IS NOT NULL THEN (d.quantity/t.freight_quantity) * COALESCE((SELECT amt_claim FROM transaction_shrink_weight WHERE transaction_id = d.transaction_id),0)
	    WHEN t.freight_cost_id IS NOT NULL THEN (d.percent_taken / 100) * COALESCE((SELECT amt_claim FROM transaction_shrink_weight WHERE transaction_id = d.transaction_id),0) ELSE 0 END AS freight_shrink,
			(d.percent_taken / 100) * t.unloading_price AS unloading_total, sh.shipment_code, (d.percent_taken / 100) * (t.handling_quantity * vhc.price_converted) AS handling_total, t2.quantity AS bl
            FROM `transaction` t2
                LEFT JOIN `delivery` d 
                    ON d.shipment_id = t2.shipment_id
				LEFT JOIN shipment sh
					ON d.shipment_id = sh.shipment_id
                LEFT JOIN `transaction` t
                    ON t.transaction_id = d.transaction_id
                LEFT JOIN stockpile_contract sc
					ON sc.`stockpile_contract_id` = t.`stockpile_contract_id`
			    LEFT JOIN contract c
					ON c.`contract_id` = sc.`contract_id`
			    LEFT JOIN freight_cost fc
					ON fc.`freight_cost_id` = t.`freight_cost_id`
			    LEFT JOIN freight f
					ON fc.`freight_id` = f.`freight_id`
			    LEFT JOIN labor l
					ON l.`labor_id` = t.`labor_id`
			    LEFT JOIN tax fctxpph
					ON fctxpph.tax_id = f.pph_tax_id
			    LEFT JOIN tax fctxppn
					ON fctxppn.tax_id = f.ppn_tax_id
			    LEFT JOIN tax uctxpph
			        ON uctxpph.tax_id = l.pph_tax_id
			    LEFT JOIN tax uctxppn
					ON uctxppn.tax_id = l.ppn_tax_id
				LEFT JOIN vendor_handling_cost vhc
					ON vhc.handling_cost_id = t.handling_cost_id
				LEFT JOIN vendor_handling vh
					ON vh.vendor_handling_id = vhc.vendor_handling_id
				LEFT JOIN tax vhtxpph
					ON vhtxpph.tax_id = vh.pph_tax_id
				LEFT JOIN tax vhtxppn
					ON vhtxppn.tax_id = vh.ppn_tax_id
				
                WHERE t2.transaction_id =  {$transactionId}";
                $resultCogs = $myDatabase->query($sqlCogs, MYSQLI_STORE_RESULT);
                
                if($resultCogs !== false && $resultCogs->num_rows > 0) {
                    while($rowCogs = $resultCogs->fetch_object()) {
						
					$shipmentCode11 = $rowCogs->shipment_code;
					$shipmentCode12 = '-S-';
				    $pos12 = strpos($shipmentCode11, $shipmentCode12);	
						
					if($rowCogs->fc_pph_tax_category == 1 && $rowCogs->fc_pph_tax_id != ''){
			         $pphfc2 = ($rowCogs->freight_total / ((100 - $rowCogs->fc_pph) / 100)) - $rowCogs->freight_total;
					 $pphfcShrink2 = ($rowCogs->freight_shrink / ((100 - $rowCogs->fc_pph) / 100)) - $rowCogs->freight_shrink;
				 
				 }elseif($rowCogs->fc_pph_tax_category == 0 && $rowCogs->fc_pph_tax_id != ''){
					  $pphfc2 =  0;
					  $pphfcShrink2 = 0;
					 //$pphfc =  $row->freight_total - ($row->freight_total * ((100 - $fc_pph) / 100));
				 }else{
				 	$pphfc2 = 0;
					$pphfcShrink2 = 0;
				 }
				 
				 $freightTotal2 = ($rowCogs->freight_total + $ppnfc2 + $pphfc2) - ($rowCogs->freight_shrink + $pphfcShrink2);
				 
				 if($rowCogs->vh_pph_tax_category == 1 && $rowCogs->vh_pph_tax_id != ''){
			         $pphvh2 = ($rowCogs->handling_total / ((100 - $rowCogs->vh_pph) / 100)) - $rowCogs->handling_total;
				 
				 }elseif($rowCogs->vh_pph_tax_category == 0 && $rowCogs->vh_pph_tax_id != ''){
					  $pphvh2 =  0;  
					 //$pphfc =  $row->freight_total - ($row->freight_total * ((100 - $fc_pph) / 100));
				 }else{
				 	$pphvh2 = 0;
				 }
				 
				 $handlingTotal2 = $rowCogs->handling_total + $pphvh2;
				 
				 if($rowCogs->uc_pph_tax_category == 1 &&$rowCogs->uc_pph_tax_id != ''){
			         $pphuc2 = ($rowCogs->unloading_total / ((100 - $rowCogs->uc_pph) / 100)) - $rowCogs->unloading_total;
					 
				 }elseif($rowCogs->uc_pph_tax_category == 0 && $rowCogs->uc_pph_tax_id != ''){
					 $pphuc2 =  0;
					 //$pphuc =  $row->unloading_total - ($row->unloading_total * ((100 - $row->uc_pph) / 100));
				 }else{
				 	$pphuc2 = 0;
				 }
				 
				 $unloadingTotal2 = $rowCogs->unloading_total + $ppnuc2 + $pphuc2;	
    
                $totalCogs2 = $rowCogs->cogs_amount + $freightTotal2 + $unloadingTotal2 + $handlingTotal2;
                
                $quantity_total= $rowCogs->quantity;
                $total_quantity = $quantity_total+$total_quantity;
                
                $pks_total = $rowCogs->cogs_amount;
                $total_pks = $pks_total+$total_pks;
                
                $fc_total = $freightTotal2;
                $total_fc = $fc_total+$total_fc;
                
                $uc_total = $unloadingTotal2;
                $total_uc = $uc_total+$total_uc;
                
                $hc_total = $handlingTotal2;
                $total_hc = $hc_total+$total_hc;
                
                $cogs_total = $totalCogs2;
                $total_cogs = $cogs_total+$total_cogs;
                
                
                $amtUnit = $total_cogs / $total_quantity;
                $shrink = $amtUnit * $rowCogs->susut;
                $total_pks2 = $total_pks - $shrink;
                                
                $qty = $rowCogs->bl;					
                    }
                }
                
			if($pos12 !== FALSE){
				
				$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1) AND account_no in (510201, 140000)";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 510201) {
							if($qty < 0){
								//$total_cogs1 = $total_cogs *-1;
                            $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}
                        } elseif($rowAccount->account_no == 140000) {
							if($qty < 0){
								//$total_cogs1 = $total_cogs * -1;
                            $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
                }
			}else if($row->sales_type == 3){
				
				$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1) AND account_no in (141000, 140000)";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 141000) {
							if($qty < 0){
								//$total_cogs1 = $total_cogs *-1;
                            $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}
                        } elseif($rowAccount->account_no == 140000) {
							if($qty < 0){
								//$total_cogs1 = $total_cogs * -1;
                            $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
                }
			}else{
				
                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (510101, 510201, 510102, 510103, 510104, 140000)";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 510101) {
							if($qty < 0){
								//$total_pks21 = $total_pks2 * -1;
                            $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_pks2})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_pks2})";
							}
                        } elseif($rowAccount->account_no == 510201) {
							if($qty < 0){
								//$shrink1 = $shrink * -1;
                            $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$shrink})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$shrink})";
							}
                        } elseif($rowAccount->account_no == 510102) {
							if($qty < 0){
								//$total_fc1 = $total_fc * -1;
                            $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_fc})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_fc})";
							}
                        } elseif($rowAccount->account_no == 510103) {
							if($qty < 0){
								//$total_uc1 = $total_uc * -1;
                            $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_uc})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_uc})";
							}
                        } elseif($rowAccount->account_no == 510104) {
							if($qty < 0){
								//$total_hc1 = $total_hc * -1;
                            $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_hc})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_hc})";
							}
                        } elseif($rowAccount->account_no == 140000) {
							if($qty < 0){
								//$total_cogs1 = $total_cogs * -1;
                            $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
                }
                
			}  // </editor-fold>
            }
		}
            
        } else {
            $boolContinue = false;
        }
        
        // </editor-fold>
    } elseif($paymentId != 'NULL') {
        // <editor-fold defaultstate="collapsed" desc="payment">
        if($source == 'PAYMENT' || $source == 'PETTY CASH' || $source == 'PAYMENT ADMIN'){
            $sql = "DELETE FROM general_ledger WHERE payment_id = {$paymentId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        }elseif($source == 'RETURN PAYMENT'){
            $sql = "DELETE FROM general_ledger WHERE payment_id = {$paymentId} AND general_ledger_module = 'RETURN PAYMENT'";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		//echo 'benar';
		}
        $sql = "SELECT p.*, a.account_no, ap.account_type AS ap_account_type, ap.account_no AS ap_account_no,
                        b.currency_id AS b_currency_id, ta.account_no AS gv_account_no, gv.pph_tax_id AS gv_pph_tax_id, ta.account_no AS at_account_no,
                        f.pph_tax_id AS f_pph_tax_id, f.pph AS f_pph_tax, f.ppn AS f_ppn_tax, atf.account_no AS f_account_no, u.pph_tax_id AS u_pph_tax_id, 
                        atu.account_no AS u_account_no, tfc.tax_category AS fc_tax_category,
                        vh.pph_tax_id AS vh_pph_tax_id, vh.pph AS vh_pph_tax, atvh.account_no AS vh_account_no, tvhc.tax_category AS vhc_tax_category
                FROM payment p 
                INNER JOIN bank b
                    ON b.bank_id = p.bank_id
                INNER JOIN account a
                    ON a.account_id = b.account_id
                INNER JOIN account ap
                    ON ap.account_id = p.account_id 
                LEFT JOIN general_vendor gv
                    ON gv.general_vendor_id = p.general_vendor_id
                LEFT JOIN tax t
                    ON t.tax_id = gv.pph_tax_id
                LEFT JOIN account ta
                    ON ta.account_id = t.account_id	
                LEFT JOIN freight f
                    ON f.freight_id = p.freight_id
                LEFT JOIN tax tfc
                    ON tfc.tax_id = f.pph_tax_id
                LEFT JOIN account atf
                    ON atf.account_id = tfc.account_id
                LEFT JOIN labor u
                    ON u.labor_id = p.labor_id
                LEFT JOIN tax tu
                    ON tu.tax_id = u.pph_tax_id
                LEFT JOIN account atu
                    ON atu.account_id = tu.account_id
                LEFT JOIN vendor_handling vh
                    ON vh.vendor_handling_id = p.vendor_handling_id
                LEFT JOIN tax tvhc
                    ON tvhc.tax_id = vh.pph_tax_id
                LEFT JOIN account atvh
                    ON atvh.account_id = tvhc.account_id
                WHERE p.payment_id = {$paymentId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        // echo $sql;
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            
			$paymentStatus = $row->payment_status;
			$payment_type = $row->payment_type;
			
            if($row->stockpile_contract_id != '') { //PKS
                if($row->payment_method == 1) {
                    $totalContractAmount = 0;
                    $totalContractDP = 0;
                    
                    $sqlContract = "SELECT sc.*, con.price_converted, con.quantity, 
                                        (
                                            SELECT COALESCE(SUM(amount_journal), 0) FROM payment
                                            WHERE stockpile_contract_id = sc.stockpile_contract_id
                                            AND payment_method = 2 AND payment_status = 0
                                        ) AS total_dp,
                                        (
                                            SELECT COALESCE(SUM(ppn_journal), 0) FROM payment
                                            WHERE stockpile_contract_id = sc.stockpile_contract_id
                                            AND payment_method = 2 AND payment_status = 0
                                        ) AS total_ppn,
										(
                                            SELECT a.account_no FROM account a LEFT JOIN payment p
											ON p.account_id = a.account_id
                                            WHERE p.stockpile_contract_id = sc.stockpile_contract_id
                                            AND p.payment_method = 2 AND p.payment_status = 0 LIMIT 1
                                        ) AS account_no
                                    FROM stockpile_contract sc
                                    INNER JOIN contract con
                                        ON con.contract_id = sc.contract_id
                                    WHERE sc.stockpile_contract_id = {$row->stockpile_contract_id}";
                    $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);
                    
                    if($resultContract !== false && $resultContract->num_rows == 1) {
                        $rowContract = $resultContract->fetch_object();
                        
                        $totalContractAmount = ceil($rowContract->price_converted * $rowContract->quantity);
                        $totalContractPPN = $rowContract->total_ppn;
						if($rowContract->account_no == 210102){
						    $totalContractDP = 0;
						}else{
						    $totalContractDP = $rowContract->total_dp - $totalContractPPN;
						}
						
                    }
                    
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (0, 7) AND account_no in (210102, 130001, {$row->account_no}, 230204)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 210102) {
								$amountJournal = $row->amount_journal + $totalContractDP;
								if($paymentStatus == 1){
									if($payment_type == 1){
									$insertValues .= "(1, '{$source}', 'Payment', 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountJournal})";	
									}else{
									$insertValues .= "(2, '{$source}', 'Payment', 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountJournal})";
									}
								}else{
									if($payment_type == 1){
									$insertValues .= "(2, '{$source}', 'Payment', 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountJournal})";
									}else{
									$insertValues .= "(1, '{$source}', 'Payment', 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountJournal})";
									}
								}
                            } elseif($rowAccount->account_no == 150410) {
								if($paymentStatus == 1){
									if($payment_type == 1){
									$insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->ppn_journal}), (1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}else{
									$insertValues .= "(2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->ppn_journal}), (1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";	
									}
								}else{
									if($payment_type == 1){
									$insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->ppn_journal}), (2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}else{
									$insertValues .= "(1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->ppn_journal}), (2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}
								}
							} elseif($rowAccount->account_no == 150410) {
								if($paymentStatus == 1){
									if($payment_type == 1){
									$insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}else{
									$insertValues .= "(1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}
								}else{
									if($payment_type == 1){
									$insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}else{
									$insertValues .= "(2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}
								}
                            } elseif($rowAccount->account_no == 130001) {
								if($paymentStatus == 1){
									if($payment_type == 1){
									$insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalContractDP})";
									}else{
									$insertValues .= "(1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalContractDP})";	
									}
								}else{
									if($payment_type == 1){
									$insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalContractDP})";
									}else{
									$insertValues .= "(2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalContractDP})";
									}
								}
                            }  elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
									if($payment_type == 1){
									$insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_journal})";
									}else{
									$insertValues .= "(1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_journal})";
									}
								}else{
									if($payment_type == 1){
									$insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_journal})";
									}else{
									$insertValues .= "(2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_journal})";
									}
								}
                            } elseif($rowAccount->account_no == 230204) {
								if($paymentStatus == 1){
									if($payment_type == 1){
									$insertValues .= "(1, '{$source}', NULL, 1, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->pph_journal})";
									}else{
									$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->pph_journal})";
									}
								}else{
									if($payment_type == 1){
									$insertValues .= "(2, '{$source}', NULL, 1, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->pph_journal})";
									}else{
									$insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->pph_journal})";
									}
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                } elseif($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (0, 7) AND account_no in ({$row->ap_account_no}, 150410, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == $row->ap_account_no) {
								$amountJournal = $row->amount_journal - $row->ppn_journal;
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountJournal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountJournal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == 150410) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->ppn_journal})";
								}else{
								$insertValues .= "(1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->ppn_journal})";	
								}
							}
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            }
			elseif($row->payment_cash_id != '') { 
				echo 'blt';
                // <editor-fold defaultstate="collapsed" desc="payment PKS kontrak">
				if($row->payment_method == 1) {
					
					$cashId = 0;
					$pc_id = 0;
					$acc_dp_pph = 'NULL';
					$acc_dp_ppn = 'NULL';
				  	$sqlcashDP = "SELECT pcdp.payment_cash_id, pcdp.payment_cash_dp, pcdp.`amount_payment` AS down_payment,
                                    (SELECT gv.ppn FROM general_vendor gv LEFT JOIN payment_cash pc ON gv.general_vendor_id = pc.general_vendor_id WHERE pc.payment_cash_id = pcdp.payment_cash_dp) AS gv_ppn,
                                    (SELECT gv.pph FROM general_vendor gv LEFT JOIN payment_cash pc ON gv.general_vendor_id = pc.general_vendor_id WHERE pc.payment_cash_id = pcdp.payment_cash_dp) AS gv_pph,
                                    (SELECT account_id FROM payment_cash WHERE payment_cash_id = pcdp.payment_cash_dp) AS account_id,
                                    (SELECT tx.account_id FROM tax tx LEFT JOIN payment_cash pc ON pc.ppnID = tx.tax_id WHERE pc.payment_cash_id = pcdp.payment_cash_dp) AS acc_dp_ppn,
                                    (SELECT tx.account_id FROM tax tx LEFT JOIN payment_cash pc ON pc.pphID = tx.tax_id WHERE pc.payment_cash_id = pcdp.payment_cash_dp) AS acc_dp_pph,  
                                    (SELECT pph FROM payment_cash WHERE payment_cash_id = pcdp.payment_cash_dp) AS pph,
                                    (SELECT ppn FROM payment_cash WHERE payment_cash_id = pcdp.payment_cash_dp) AS ppn,
                                    (SELECT `type` FROM payment_cash WHERE payment_cash_id = pcdp.payment_cash_dp) AS `type`
                                    FROM payment_cash_dp pcdp 
                                    LEFT JOIN payment_cash pc ON pc.`payment_cash_id` = pcdp.`payment_cash_id` 
                                    WHERE pc.payment_id = {$paymentId}";
					$resultCashDP = $myDatabase->query($sqlcashDP, MYSQLI_STORE_RESULT);
                    
                   if($resultCashDP !== false && $resultCashDP->num_rows > 0) {
						$dp_type = array();
						while($rowCashDP = mysqli_fetch_array($resultCashDP)){

							$accountDP = $rowCashDP['account_id'];
							
							if($rowCashDP['acc_dp_ppn'] != ''){
							$acc_dp_ppn = $rowCashDP['acc_dp_ppn'];
							}else{
							$acc_dp_ppn = 'NULL';
							}
							
							//$acc_dp_ppn = $rowCashDP['acc_dp_ppn'];
							if($rowCashDP['acc_dp_pph'] != ''){
							$acc_dp_pph = $rowCashDP['acc_dp_pph'];
							}else{
							$acc_dp_pph = 'NULL';
							}
							$ppn_dp = $rowCashDP['gv_ppn'];
							$pph_dp = $rowCashDP['gv_pph'];
							$ppn = $rowCashDP['ppn'];
							$pph = $rowCashDP['pph'];
							$cashId = $rowCashDP['payment_cash_dp'];
							$down_payment = $rowCashDP['down_payment'];
							$dp_type[] = $rowCashDP['type'];	 	
							$pc_dp_type =  implode(', ', $dp_type);	
					
							
							if($ppn == 0){
								$dpPPN = 0;	
							}else{
								$dpPPN = $down_payment * ($ppn_dp/100);
							}
							if($pph == 0){
								$dpPPh = 0;	
							}else{
								$dpPPh = $down_payment * ($pph_dp/100);
							}
								//$downPayment = ($down_payment + $dpPPN) - $dpPPh;
							
						
						
				
				if($acc_dp_ppn != '' || $acc_dp_ppn != 0 || $acc_dp_ppn != 'NULL') {
					$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$pc_dp_type}) AND account_no IN (150410)";
					$resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                   if($resultAccount !== false && $resultAccount->num_rows == 1) {
                        $rowAccount = $resultAccount->fetch_object();
							$accountId_dp = $rowAccount->account_id;
							
						}
					}
                
          
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
						
						
							if($cashId != '' || $cashId != 0 || $cashId != 'NULL') {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$accountDP}, NULL, {$down_payment}),";
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$acc_dp_pph}, NULL, {$dpPPh}),";
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$accountId_dp}, NULL,  {$dpPPN})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$accountDP}, NULL, {$down_payment}),";
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$acc_dp_pph}, NULL, {$dpPPh}),";
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$accountId_dp}, NULL,  {$dpPPN})";	
								}
                            }  
			
						}
				   }
			    }
				
                if($row->payment_method == 1) {
                    $totalCashAmount = 0;
                    $totalCashtDP = 0;
					
                    
                    $sqlPC = "SELECT pc.*, a.account_no, a.account_name, apph.account_id AS apph_id, apph.account_no AS apph_no, apph.account_name AS apph_name
							  FROM payment_cash pc
								LEFT JOIN account a ON a.`account_id` = pc.`account_id` 
								LEFT JOIN tax txpph ON txpph.`tax_id` = pc.`pphID`
								LEFT JOIN account apph ON apph.`account_id` = txpph.`account_id`
								WHERE pc.`payment_id` = {$paymentId}";
                    $resultPC = $myDatabase->query($sqlPC, MYSQLI_STORE_RESULT);
           			
						
						if($resultPC !== false && $resultPC->num_rows > 0) {
                        while($rowPC = $resultPC->fetch_object()) {
							
						$cashId = $rowPC->payment_cash_id;
						$amountConv = $rowPC->amount_converted;
						
						if($rowPC->apph_id == '' || $rowPC->apph_id == 0 || $rowPC->apph_id == 'NULL'){
							$apph_id = 'NULL';
						}else{
							$apph_id = $rowPC->apph_id;
						}
						
						if($rowPC->ppnID != '' || $rowPC->ppnID != 0 || $rowPC->ppnID != 'NULL') {
							$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$rowPC->type}) AND account_no IN (150410)";
							$resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                   if($resultAccount !== false && $resultAccount->num_rows == 1) {
                        $rowAccount = $resultAccount->fetch_object();
							$accountId = $rowAccount->account_id;
							
						}
					}
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
							if($row->payment_type == 1){
								if($rowPC->payment_cash_id != '' || $rowPC->payment_cash_id != 0 || $rowPC->payment_cash_id != 'NULL') {
								if($paymentStatus == 1){
								if($rowPC->amount_converted < 0){
									$amount_converted1 = $rowPC->amount_converted * -1;
									$pph_converted1 = $rowPC->pph_converted * -1;
                                $insertValues .= "(2, '{$source}', NULL, 1, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$amount_converted1}),";
								$insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$apph_id}, NULL, {$pph_converted1})";
								}else{
								$insertValues .= "(1, '{$source}', NULL, 1, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}),";
								$insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted})";	
								}
								}else{
									if($rowPC->amount_converted < 0){
									$amount_converted1 = $rowPC->amount_converted * -1;
									$pph_converted1 = $rowPC->pph_converted * -1;
								$insertValues .= "(1, '{$source}', NULL, 1, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$amount_converted1}),";
								$insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$apph_id}, NULL, {$pph_converted1})";
									}else{
								$insertValues .= "(2, '{$source}', NULL, 1, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}),";
								$insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted})";
									}								
								}
								}
							}else{
                           if($rowPC->payment_cash_id != '' || $rowPC->payment_cash_id != 0 || $rowPC->payment_cash_id != 'NULL') {
							   if($paymentStatus == 1){
								if($rowPC->amount_converted < 0){
									$amount_converted1 = $rowPC->amount_converted * -1;
									$pph_converted1 = $rowPC->pph_converted * -1;
									$ppn_converted1 = $rowPC->ppn_converted * -1;
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$amount_converted1}),";
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$apph_id}, NULL, {$pph_converted1}),";
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$accountId}, NULL,  {$ppn_converted1})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}),";
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted}),";
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$accountId}, NULL,  {$rowPC->ppn_converted})";	
								}
							   }else{
								 if($rowPC->amount_converted < 0){
									$amount_converted1 = $rowPC->amount_converted * -1;
									$pph_converted1 = $rowPC->pph_converted * -1;
									$ppn_converted1 = $rowPC->ppn_converted * -1;
								$insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$amount_converted1}),";
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$apph_id}, NULL, {$pph_converted1}),";
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$accountId}, NULL,  {$ppn_converted1})";  
								 
								 }else{
								$insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}),";
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted}),";
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$accountId}, NULL,  {$rowPC->ppn_converted})";  
								 }
							   }
                            }  
							}
						}	
                    } else {
                        $boolContinue = false;
                    }
						
				}
				if($row->payment_method == 1) {
                    $sqlPayment = "SELECT b.account_id, amount_journal FROM payment p LEFT JOIN bank b ON p.bank_id = b.bank_id WHERE p.payment_id = {$paymentId}";
                    $resultPayment = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT);
           			
						if($resultPayment !== false && $resultPayment->num_rows > 0) {
                        while($rowPayment = $resultPayment->fetch_object()) {
							
						
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
						   if($row->payment_type ==1){
							   if($rowPayment->account_id != '' || $rowPayment->account_id != 0 || $rowPayment->account_id != 'NULL') {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Payment', 1, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$rowPayment->amount_journal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Payment', 1, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$rowPayment->amount_journal})";	
								}
                            }
						   }else{
						   
						   if(($rowPayment->account_id != '' || $rowPayment->account_id != 0 || $rowPayment->account_id != 'NULL') && $row->amount_journal < 0) {
								$amountJournal = $row->amount_journal * -1;
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Payment', 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$amountJournal})";
								}else{
								 $insertValues .= "(1, '{$source}', 'Payment', 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$amountJournal})";	
								}
                            } 
                           elseif($rowPayment->account_id != '' || $rowPayment->account_id != 0 || $rowPayment->account_id != 'NULL') {
							   if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', 'Payment', 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$rowPayment->amount_journal})";
							   }else{
								$insertValues .= "(2, '{$source}', 'Payment', 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$rowPayment->amount_journal})";   
							   }
                            }
						   }
						}	
                    } else {
                        $boolContinue = false;
                    }
						
				}
				
				 if($row->payment_method == 2) {
                    $totalCashAmount = 0;
                    $totalCashtDP = 0;

                    $sqlPC = "SELECT pc.*, a.account_no, a.account_name, apph.account_id AS apph_id, apph.account_no AS apph_no, apph.account_name AS apph_name
							  FROM payment_cash pc
								LEFT JOIN account a ON a.`account_id` = pc.`account_id` 
								LEFT JOIN tax txpph ON txpph.`tax_id` = pc.`pphID`
								LEFT JOIN account apph ON apph.`account_id` = txpph.`account_id`
								WHERE pc.`payment_id` = {$paymentId}";
                    $resultPC = $myDatabase->query($sqlPC, MYSQLI_STORE_RESULT);
						
						if($resultPC !== false && $resultPC->num_rows > 0) {
                        while($rowPC = $resultPC->fetch_object()) {
							
						$cashId = $rowPC->payment_cash_id;
						$amountConv = $rowPC->amount_converted;
						
						if($rowPC->apph_id == '' || $rowPC->apph_id == 0 || $rowPC->apph_id == 'NULL'){
							$apph_id = 'NULL';
						}else{
							$apph_id = $rowPC->apph_id;
						}
						
						if($rowPC->ppnID != '' || $rowPC->ppnID != 0 || $rowPC->ppnID != 'NULL') {
							$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$rowPC->type}) AND account_no IN (150410)";
							$resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                   if($resultAccount !== false && $resultAccount->num_rows == 1) {
                        $rowAccount = $resultAccount->fetch_object();
							$accountId = $rowAccount->account_id;
							
						}
					}
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
							
                           if($rowPC->payment_cash_id != '' || $rowPC->payment_cash_id != 0 || $rowPC->payment_cash_id != 'NULL') {
							   if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}),";
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted}),";
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$accountId}, NULL,  {$rowPC->ppn_converted})";
							   }else{
								$insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}),";
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted}),";
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$accountId}, NULL,  {$rowPC->ppn_converted})";   
							   }
                            }  
							
						}	
                    } else {
                        $boolContinue = false;
                    }
						
				}
				 if($row->payment_method == 2) {
                   
                    
                    $sqlPayment = "SELECT b.account_id, amount_journal FROM payment p LEFT JOIN bank b ON p.bank_id = b.bank_id WHERE p.payment_id = {$paymentId}";
                    $resultPayment = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT);
           			
						if($resultPayment !== false && $resultPayment->num_rows > 0) {
                        while($rowPayment = $resultPayment->fetch_object()) {
							
						
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
						   
                           if($rowPayment->account_id != '' || $rowPayment->account_id != 0 || $rowPayment->account_id != 'NULL') {
							   if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$rowPayment->amount_journal})";
							   }else{
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$rowPayment->amount_journal})";   
							   }
                            }
						   
						}	
                    } else {
                        $boolContinue = false;
                    }
						
				}
					
            } elseif($row->invoice_id != '') { //GENERAL
                // <editor-fold defaultstate="collapsed" desc="payment PKS kontrak">
                if($row->payment_method == 1) {
                    $totalInvoiceAmount = 0;
                    $totalInvoicetDP = 0;
                    
                    $sqlInvoice = "SELECT i.*,
                                        (
                                            SELECT COALESCE(SUM(amount_journal), 0) FROM payment
                                            WHERE invoice_id = i.invoice_id
                                            AND payment_method = 2 AND payment_status = 0
                                        ) AS total_dp
                                    FROM invoice i
                                    WHERE i.invoice_id = {$row->invoice_id}";
                    $resultInvoice = $myDatabase->query($sqlInvoice, MYSQLI_STORE_RESULT);
                    
                    if($resultInvoice !== false && $resultInvoice->num_rows == 1) {
                        $rowInvoice = $resultInvoice->fetch_object();
                        
                       // $totalInvoiceAmount = $rowInvoice->amount;
                       // $totalContractPPN = $rowContract->total_ppn;
						$totalInvoiceDP = $rowInvoice->total_dp;
						
                    }else {
                    echo 'false1';
                    }
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}, 7) AND account_no in ({$row->account_no},{$row->ap_account_no}, 130005)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
                            //1 = Dr
                            //2 = Cr
                            if($rowAccount->account_no == $row->account_no && $row->amount_converted < 0) {
								$amountConverted = $row->amount_converted * -1;
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Payment', 1, 10, {$contractId},  {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL,  {$amountConverted})";
								}else{
								 $insertValues .= "(1, '{$source}', 'Payment', 1, 10, {$contractId},  {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountConverted})";	
								}
                            }  elseif($rowAccount->account_no == $row->ap_account_no && $row->amount_journal < 0 ) {
								$amountJournal = $row->amount_journal * -1;
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 1, 10, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL,  {$amountJournal})";
								}else{
								 $insertValues .= "(2, '{$source}', NULL, 1, 10, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL,    {$amountJournal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 10, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_converted})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 10, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL,    {$row->amount_converted})";	
								}
                            } elseif($rowAccount->account_no == $row->ap_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 10, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL,   {$row->amount_journal})";
								}else{
								 $insertValues .= "(1, '{$source}', NULL, 2, 10, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL,  {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == 130005) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 10, {$contractId},  {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL,  {$totalInvoiceDP})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 10, {$contractId},  {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},{$accrueId}, 0, 0, {$rowAccount->account_id}, NULL,  {$totalInvoiceDP})";	
								}
                            }  
                        }
                    } else {
                        $boolContinue = false;
						echo 'false2';
                    }
                } elseif($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}, 7) AND account_no in ({$row->ap_account_no}, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
                            //1 = Dr
                            //2 = Cr
                            if($rowAccount->account_no == $row->ap_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 10, {$contractId},  {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL,  {$row->amount_journal})";
								}else{
								 $insertValues .= "(1, '{$source}', 'Down Payment', 2, 10, {$contractId},  {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL,  {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 10, {$contractId},  {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL,  {$row->amount_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 10, {$contractId},  {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL,   {$row->amount_journal})";	
								}
                            } 
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            }  
			elseif($row->vendor_id != '') { //CURAH
           
                if($row->payment_method == 1) {
                    $totalAmount = 0;
                    $totaDP = 0;

                    $debitCurahPrice = 0;
                    $creditCurahPrice = 0;
                    $sqlInv = "SELECT SUBSTRING(inv_notim_no, 1, 2) as methodText FROM invoice_notim WHERE payment_id = {$paymentId}";
                    $resultInv = $myDatabase->query($sqlInv, MYSQLI_STORE_RESULT);
                    if($resultInv !== false){
                        $rowInv= $resultInv->fetch_object();
                        if($rowInv->methodText == 'FP'){
                            $boolNew = true;
                        }
                    }
                    if($boolNew){  //SETTLE TAPI ADA PAYMENT
                        //DP
                        $sqlAccountDp = "SELECT inv.inv_notim_id, SUM(ppd.dpp_dp_settle) AS amountDp, apph.`account_no` AS a_pph,appn.`account_no` AS a_ppn, 
                                         v.`ppn` AS vppn, v.pph AS vpph
                                        FROM invoice_notim inv
                                        INNER JOIN pengajuan_payment_dp ppd ON ppd.inv_notim_id = inv.inv_notim_id
                                        LEFT JOIN vendor v ON v.`vendor_id` = inv.`vendor_id`
                                        LEFT JOIN tax vpph ON vpph.`tax_id` = v.`pph_tax_id`
                                        LEFT JOIN account apph ON apph.`account_id` = vpph.`account_id`
                                        LEFT JOIN tax vppn ON vppn.`tax_id` = v.`ppn_tax_id`
                                        LEFT JOIN account appn ON appn.`account_id` = vppn.`account_id` 
                                        WHERE inv.`payment_id` = {$paymentId} GROUP BY ppd.inv_notim_id";
                        // echo " Curah => " . $sqlAccountDp;
                        $resultAccountDP = $myDatabase->query($sqlAccountDp, MYSQLI_STORE_RESULT);

                        if($resultAccountDP !== false){
                            $rowAccountDp = $resultAccountDP->fetch_object();
                            $creditCurahPrice = $rowAccountDp->amountDp;
                            $ppnVal = $creditCurahPrice * ($rowAccountDp->vppn/100);
                            $pphVal = $creditCurahPrice * ($rowAccountDp->vpph/100);

                            $sqlAccountB = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (210101, 210101, 150410)";
                            $resultAccountB = $myDatabase->query($sqlAccountB, MYSQLI_STORE_RESULT);

                            if($resultAccountB !== false && $resultAccountB->num_rows > 0) {
                                while($rowAccountB = $resultAccountB->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }
                                //1 = Dr
                                //2 = Cr
                                    if($rowAccountB->account_no == 210101) { //payment
                                        if($paymentStatus == 1){
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$creditCurahPrice})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$creditCurahPrice})";	
                                        }
                                    }elseif($rowAccountB->account_no == 210101) {
                                        if($paymentStatus == 1){
                                            $insertValues .= "(2, '{$source}',  'DP', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, 'Return Journal', {$pphVal})";	 
                                        }else{
                                            $insertValues .= "(1, '{$source}',  'DP', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$pphVal})";	 
                                        }
                                    } elseif($rowAccountB->account_no == 150410) {
                                        if($paymentStatus == 1){
                                            $insertValues .= "(1, '{$source}',  'DP', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, 'Return Journal', {$ppnVal})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}',  'DP', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$ppnVal})";	
                                        }
                                    }

            
                                }
                            } else {
                                $boolContinue = false;
                            }
                        }

                        //PAYMENT
                        $sqlAccount2 = "SELECT inv.inv_notim_id, pa.dpp  as amount, pa.`ppn_id`, pa.`ppn_value`,
                                                pa.pph_id, pa.pph_value, pa.transaction_id
                                        FROM invoice_notim inv
                                        LEFT JOIN payment_curah pa ON pa.inv_notim_id = inv.inv_notim_id
                                        WHERE inv.`payment_id` = {$paymentId}";
                        $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                        if($resultAccount2 !== false){
                            while($rowAccount2 = $resultAccount2->fetch_object()) {	
                                if($rowAccount2->ppn_id != '' || $rowAccount2->ppn_id != 0){
                                    $taxPPN = $rowAccount2->ppn_value;
                                }else{
                                    $taxPPN = 0;
                                }
                                if($rowAccount2->pph_id != '' || $rowAccount2->pph_id != 0){
                                    $taxValue = $rowAccount2->pph_value;
                                }else{
                                    $taxValue = 0;
                                }

                                if($rowAccount2->amount > 0) {
                                    $debitCurahPrice = $rowAccount2->amount + ($rowAccount2->amount  * ($taxPPN/100)) - ($rowAccount2->amount  * ($taxValue/100));
                                }
                            }

                            $sqlAccountA = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (210101, {$row->account_no})";
                            $resultAccountA = $myDatabase->query($sqlAccountA, MYSQLI_STORE_RESULT);
            
                            if($resultAccountA !== false && $resultAccountA->num_rows > 0) {
                                while($rowAccountA = $resultAccountA->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }
                                    //1 = Dr
                                    //2 = Cr
                                    if($rowAccountA->account_no == 210101) { //payment
                                        if($paymentStatus == 1){
                                            $insertValues .= "(2, '{$source}', 'Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountA->account_id}, NULL, {$debitCurahPrice})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', 'Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountA->account_id}, NULL, {$debitCurahPrice})";	
                                        }
                                    }elseif($rowAccountA->account_no == $row->account_no) { //bANK
                                        if($paymentStatus == 1){
                                        $insertValues .= "(1, '{$source}', 'Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountA->account_id}, NULL, {$row->amount_journal})";
                                        }else{
                                        $insertValues .= "(2, '{$source}', 'Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountA->account_id}, NULL, {$row->amount_journal})";	
                                        }
                                    }

            
                                }
                            } else {
                                $boolContinue = false;
                            }
                        }
                    }else{ //PAYMENT BIASA
                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (210101, {$row->account_no})";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                        if($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while($rowAccount = $resultAccount->fetch_object()) {
                                if($insertValues != "") {
                                    $insertValues .= ", ";
                                }
                            //1 = Dr
                            //2 = Cr                               

                            if($rowAccount->account_no == $row->account_no) {
                                if($paymentStatus == 1){
                                    $insertValues .= "(1, '{$source}', 'Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->original_amount_converted})";
                                }else{
                                    $insertValues .= "(2, '{$source}', 'Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->original_amount_converted})";   
                                }
                                } elseif($rowAccount->account_no == 210101) {
                                    if($paymentStatus == 1){
                                    $insertValues .= "(2, '{$source}', 'Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->original_amount_converted})";
                                    }else{
                                    $insertValues .= "(1, '{$source}', 'Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->original_amount_converted})";	
                                    }
                                } 
                            }
                        } else {
                            $boolContinue = false;
                        }
                    }
                }elseif($row->payment_method == 2) { //DOWN PAYMENT
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (210101, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
                        //1 = Dr
                        //2 = Cr
                            if($rowAccount->account_no == 210101) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            } elseif($row->freight_id != '') { //FREIGHT
				 if($row->payment_method == 1) {
                     $boolNew = false;
                     $debitFreightPrice = 0;
                     $creditFreightPrice = 0;
					
                    $sqlInv = "SELECT SUBSTRING(inv_notim_no, 1, 2) as methodText FROM invoice_notim WHERE payment_id = {$paymentId}";
                    $resultInv = $myDatabase->query($sqlInv, MYSQLI_STORE_RESULT);
                    if($resultInv !== false){
                        $rowInv= $resultInv->fetch_object();
                        if($rowInv->methodText == 'FP'){
                            $boolNew = true;
                        }
                    }
                  

                    if($boolNew){  //SETTLE TAPI ADA PAYMENT
                        //DP
                        $sqlAccountDp = "SELECT inv.inv_notim_id, SUM(ppd.dpp_dp_settle) AS amountDp, 
                                                f.pph AS fpph, f.ppn AS fppn,
                                                apph.`account_no` AS a_pph, appn.`account_no` AS a_ppn
                                        FROM invoice_notim inv
                                        INNER JOIN pengajuan_payment_dp ppd ON ppd.inv_notim_id = inv.inv_notim_id
                                        LEFT JOIN freight f ON f.`freight_id` = inv.`freightId` 
                                        LEFT JOIN tax fpph ON fpph.`tax_id` = f.`pph_tax_id`
                                        LEFT JOIN account apph ON apph.`account_id` = fpph.`account_id`
                                        LEFT JOIN tax fppn ON fppn.`tax_id` = f.`ppn_tax_id`
                                        LEFT JOIN account appn ON appn.`account_id` = fppn.`account_id`
                                        WHERE inv.`payment_id` = {$paymentId} GROUP BY ppd.inv_notim_id";
                        $resultAccountDP = $myDatabase->query($sqlAccountDp, MYSQLI_STORE_RESULT);
                    //   echo " test 1 => " . $sqlAccountDp . "<br";
                        if($resultAccountDP !== false){
                            $rowAccountDp = $resultAccountDP->fetch_object();
                            $creditFreightPrice = $rowAccountDp->amountDp; //DPP Downpayment
                            $ppnVal = $creditFreightPrice * ($rowAccountDp->fppn/100);
                            $pphVal = $creditFreightPrice * ($rowAccountDp->fpph/100);
                            // echo " pph val => " . $pphVal . "<br>";
                            

                            $sqlAccountB = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (210103, '{$rowAccountDp->a_pph}', '{$rowAccountDp->a_ppn}')";
                            $resultAccountB = $myDatabase->query($sqlAccountB, MYSQLI_STORE_RESULT);
                            if($resultAccountB !== false && $resultAccountB->num_rows > 0) {
                                while($rowAccountB = $resultAccountB->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                 //1 = Dr
                                //2 = Cr  
                                     if($rowAccountB->account_no == 210103) { //payment
                                        if($paymentStatus == 1){
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, 'Return Journal', {$creditFreightPrice})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$creditFreightPrice})";	
                                        }
                                    } elseif($rowAccountB->account_no == $rowAccountDp->a_pph) {
                                        if($paymentStatus == 1){
                                            $insertValues .= "(2, '{$source}',  'DP', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, 'Return Journal', {$pphVal})";	 
                                        }else{
                                            $insertValues .= "(1, '{$source}',  'DP', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$pphVal})";	 
                                        }
                                    } elseif($rowAccountB->account_no == $rowAccountDp->a_ppn) {
                                        if($paymentStatus == 1){
                                            $insertValues .= "(1, '{$source}',  'DP', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, 'Return Journal', {$ppnVal})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}',  'DP', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$ppnVal})";	
                                        }
                                    }
                                    // echo " TE => " . $rowAccountB->account_no . " | " . $rowAccountDp->a_pph;
            
                                }
                            } else {
                                $boolContinue = false;
                            }
                        }

                        //PAYMENT
                        $sqlAccount2 = "SELECT inv.inv_notim_id, (pa.dpp - (pa.shrink + pa.additional_shrink)) as amount, pa.`ppn_id`, pa.`ppn_value`,
                                                pa.pph_id, pa.pph_value
                                        FROM invoice_notim inv
                                        LEFT JOIN payment_oa pa ON pa.inv_notim_id = inv.inv_notim_id
                                        WHERE inv.`payment_id` = {$paymentId}";
                        $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                        if($resultAccount2 !== false){
                            $totalAmount = 0;
                            while($rowAccount2 = $resultAccount2->fetch_object()) {	
                                if($rowAccount2->ppn_id != '' || $rowAccount2->ppn_id != 0){
                                    $taxPPN = $rowAccount2->ppn_value;
                                }else{
                                    $taxPPN = 0;
                                }
                                if($rowAccount2->pph_id != '' || $rowAccount2->pph_id != 0){
                                    $taxValue = $rowAccount2->pph_value;
                                }else{
                                    $taxValue = 0;
                                }

                                if($rowAccount2->amount > 0) {
                                    $totalAmount = $totalAmount + $rowAccount2->amount;
                                    $debitFreightPrice = $totalAmount + ($totalAmount  * ($taxPPN/100)) - ($totalAmount  * ($taxValue/100));
                                    // echo " test nilai debit => " . $debitFreightPrice . " | " . $taxValue . " | " . $totalAmount;
                                }
                            }

                            $sqlAccountA = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (210103,{$row->account_no})";
                            $resultAccountA = $myDatabase->query($sqlAccountA, MYSQLI_STORE_RESULT);
	
                            if($resultAccountA !== false && $resultAccountA->num_rows > 0) {
                                while($rowAccountA = $resultAccountA->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }
                                //1 = Dr
                                //2 = Cr
                                    if($rowAccountA->account_no == 210103) { //payment
                                        if($paymentStatus == 1){
                                            $insertValues .= "(2, '{$source}', 'Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountA->account_id}, NULL, {$debitFreightPrice})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', 'Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountA->account_id}, NULL, {$debitFreightPrice})";	
                                        }
                                    }elseif($rowAccountA->account_no == $row->account_no) { //bANK
                                        if($paymentStatus == 1){
                                        $insertValues .= "(1, '{$source}', 'Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountA->account_id}, NULL, {$row->amount_journal})";
                                        }else{
                                        $insertValues .= "(2, '{$source}', 'Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountA->account_id}, NULL, {$row->amount_journal})";	
                                        }
                                    }

            
                                }
                            } else {
                                $boolContinue = false;
                            }
                        }
                    }else{ //PAYMENT BIASA
                       
                        $debitFreightPrice = $row->amount_journal;
                        $sqlAccountA = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (210103,{$row->account_no})";
                        $resultAccountA = $myDatabase->query($sqlAccountA, MYSQLI_STORE_RESULT);
                        if($resultAccountA !== false && $resultAccountA->num_rows > 0) {
                            while($rowAccount = $resultAccountA->fetch_object()) {
                                if($insertValues != "") {
                                    $insertValues .= ", ";
                                }
                            //1 = Dr
                            //2 = Cr
                                if($rowAccount->account_no == 210103) { //payment
                                    if($paymentStatus == 1){
                                        $insertValues .= "(2, '{$source}', 'Payment', 2, 3, {$contractId}, {$invoiceId},  {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$debitFreightPrice})";
                                    }else{
                                        $insertValues .= "(1, '{$source}', 'Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$debitFreightPrice})";	
                                    }
                                }elseif($rowAccount->account_no == $row->account_no) { //bANK
                                    if($paymentStatus == 1){
                                    $insertValues .= "(1, '{$source}', 'Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                    }else{
                                    $insertValues .= "(2, '{$source}', 'Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                    }			
                }elseif($row->payment_method == 2) {
						 
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (210103, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
                            //1 = Dr
                            //2 = Cr
                            if($rowAccount->account_no == 210103) {
								// $f_amountJournal = ($row->amount_journal + $row->ppn_journal) - $row->pph_journal;
                                $f_amountJournal = $row->amount_journal;
                                // echo $row->ppn_journal;
								if($paymentStatus == 1){
									$f_amountJournal1 = $f_amountJournal1;
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$f_amountJournal})";
								}else{
								 $insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$f_amountJournal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								// $f_Journal = $row->amount_journal + $row->ppn_journal - $row->pph_journal;
                                $f_Journal = $row->amount_journal;
								if($paymentStatus == 1){
									$f_Journal1 = $f_Journal;
                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$f_Journal1})";
								}else{
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$f_Journal})";	
								}
                            } 
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            } elseif($row->vendor_handling_id != 0) { //HANDLING
				 if($row->payment_method == 1) {
                    $boolNew = false;
                    $debitHandlingPrice = 0;
                    $creditHandlingPrice = 0;

                    $sqlInv = "SELECT SUBSTRING(inv_notim_no, 1, 2) as methodText FROM invoice_notim WHERE payment_id = {$paymentId}";
                    $resultInv = $myDatabase->query($sqlInv, MYSQLI_STORE_RESULT);
                    if($resultInv !== false){
                        $rowInv= $resultInv->fetch_object();
                        if($rowInv->methodText == 'FP'){
                            $boolNew = true;
                        }
                    }
                    
                    if($boolNew){  //SETTLE TAPI ADA PAYMENT
                        //DP
                        $sqlAccountDp = "SELECT inv.inv_notim_id, SUM(ppd.dpp_dp_settle) AS amountDp, l.`pph` AS vhpph , l.ppn AS vhppn,
                                        apph.`account_no` AS a_pph, appn.`account_no` AS a_ppn
                                        FROM invoice_notim inv
                                        INNER JOIN pengajuan_payment_dp ppd ON ppd.inv_notim_id = inv.inv_notim_id
                                        LEFT JOIN vendor_handling l ON l.`vendor_handling_id` = inv.`vendorHandlingId`
                                        LEFT JOIN tax lpph ON lpph.`tax_id` = l.`pph_tax_id`
                                        LEFT JOIN account apph ON apph.`account_id` = lpph.`account_id`
                                        LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
                                        LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
                                        WHERE inv.`payment_id` = {$paymentId} GROUP BY ppd.inv_notim_id";
                        $resultAccountDP = $myDatabase->query($sqlAccountDp, MYSQLI_STORE_RESULT);
                        // echo "A  " . $sqlAccountDp;

                        if($resultAccountDP !== false){
                            $rowAccountDp = $resultAccountDP->fetch_object();
                            $creditHandlingPrice = $rowAccountDp->amountDp;
                            $ppnVal = $creditHandlingPrice * ($rowAccountDp->vhppn/100);
                            $pphVal = $creditHandlingPrice * ($rowAccountDp->vhpph/100);


                            $sqlAccountB = "SELECT account_id, account_no FROM account WHERE account_type IN (2,7) AND account_no in (210106, '{$rowAccountDp->a_pph}', '{$rowAccountDp->a_ppn}')";
                            $resultAccountB = $myDatabase->query($sqlAccountB, MYSQLI_STORE_RESULT);
                            if($resultAccountB !== false && $resultAccountB->num_rows > 0) {
                                while($rowAccountB = $resultAccountB->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }
                                //1 = Dr
                                //2 = Cr
                                    if($rowAccountB->account_no == 210106) { //payment
                                        if($paymentStatus == 1){
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$creditHandlingPrice})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$creditHandlingPrice})";	
                                        }
                                    }elseif($rowAccountB->account_no == $rowAccountDp->a_pph) {
                                        if($paymentStatus == 1){
                                            $insertValues .= "(2, '{$source}',  'DP', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, 'Return Journal', {$pphVal})";	 
                                        }else{
                                            $insertValues .= "(1, '{$source}',  'DP', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$pphVal})";	 
                                        }
                                    } elseif($rowAccountB->account_no == $rowAccountDp->a_ppn) {
                                        if($paymentStatus == 1){
                                            $insertValues .= "(1, '{$source}',  'DP', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, 'Return Journal', {$ppnVal})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}',  'DP', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$ppnVal})";	
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                            }
                        }

                        //PAYMENT
                        $sqlAccount2 = "SELECT inv.inv_notim_id, ph.dpp  as amount, ph.`ppn_id`, ph.`ppn_value`,
                                                ph.pph_id, ph.pph_value
                                        FROM invoice_notim inv
                                        LEFT JOIN payment_handling ph ON ph.inv_notim_id = inv.inv_notim_id
                                        WHERE inv.`payment_id` = {$paymentId}";
                        $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);

                        if($resultAccount2 !== false){
                            $totalAmount = 0;
                            while($rowAccount2 = $resultAccount2->fetch_object()) {	
                                if($rowAccount2->ppn_id != '' || $rowAccount2->ppn_id != 0){
                                    $taxPPN = $rowAccount2->ppn_value;
                                }else{
                                    $taxPPN = 0;
                                }
                                if($rowAccount2->pph_id != '' || $rowAccount2->pph_id != 0){
                                    $taxValue = $rowAccount2->pph_value;
                                }else{
                                    $taxValue = 0;
                                }

                                if($rowAccount2->amount > 0) {
                                    $totalAmount = $totalAmount + $rowAccount2->amount;
                                    $debitHandlingPrice =  $totalAmount + ($totalAmount  * ($taxPPN/100)) - ($totalAmount  * ($taxValue/100));
                                }
                            }

                            $sqlAccountA = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (210106,{$row->account_no})";
                            $resultAccountA = $myDatabase->query($sqlAccountA, MYSQLI_STORE_RESULT);

                            if($resultAccountA !== false && $resultAccountA->num_rows > 0) {
                                while($rowAccountA = $resultAccountA->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if($rowAccountA->account_no == 210106) { //payment
                                        if($paymentStatus == 1){
                                            $insertValues .= "(2, '{$source}', 'Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountA->account_id}, NULL, {$debitHandlingPrice})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', 'Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountA->account_id}, NULL, {$debitHandlingPrice})";	
                                        }
                                    }elseif($rowAccountA->account_no == $row->account_no) { //bANK
                                        if($paymentStatus == 1){
                                        $insertValues .= "(1, '{$source}', 'Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountA->account_id}, NULL, {$row->amount_journal})";
                                        }else{
                                        $insertValues .= "(2, '{$source}', 'Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountA->account_id}, NULL, {$row->amount_journal})";	
                                        }
                                    }

            
                                }
                            } else {
                                $boolContinue = false;
                            }
                        }
                    }else { //PAYMENT BIASA

                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (9, 7) AND account_no in (210106, {$row->account_no})";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                        if($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while($rowAccount = $resultAccount->fetch_object()) {
                                if($insertValues != "") {
                                    $insertValues .= ", ";
                                }
                                if($rowAccount->account_no == 210106) {
                                    if($paymentStatus == 1){
                                    $insertValues .= "(2, '{$source}', 'Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                    }else{
                                    $insertValues .= "(1, '{$source}', 'Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
                                    }
                                }elseif($rowAccount->account_no == $row->account_no) {
                                    if($paymentStatus == 1){
                                    $insertValues .= "(1, '{$source}', 'Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                    }else{
                                    $insertValues .= "(2, '{$source}', 'Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                    }
                }elseif($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (9, 7) AND account_no in (210106, {$row->account_no} , {$row->vh_account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {

                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 210106) {
								// $vh_amountJournal = $row->amount_journal - $row->pph_journal;
                                $vh_amountJournal = $row->amount_journal ;

								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								 $insertValues .= "(1, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
                                $vh_amountJournal = $row->amount_journal;
								if($vh_amountJournal == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$f_amountJournal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$vh_amountJournal})";	
								}
                            } elseif($rowAccount->account_no == $row->vh_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
								}else{
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";	
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            }elseif($row->labor_id != '') { //UNLOADING
                if($row->payment_method == 1) {
                    $boolNew = false;
                     $debitUnloadingPrice = 0;
                     $creditUnloadingPrice = 0;
                    $totaDP = 0;

                    if($row->u_account_no == '' || $row->u_account_no == 'NULL'){
						  $u_account_no = 0;
					}else{
				     	$u_account_no = $row->u_account_no;
					}

                    $sqlInv = "SELECT SUBSTRING(inv_notim_no, 1, 2) as methodText FROM invoice_notim WHERE payment_id = {$paymentId}";
                    $resultInv = $myDatabase->query($sqlInv, MYSQLI_STORE_RESULT);
                    if($resultInv !== false){
                        $rowInv= $resultInv->fetch_object();
                        if($rowInv->methodText == 'FP'){
                            $boolNew = true;
                        }
                    }

                    if($boolNew){  //SETTLE TAPI ADA PAYMENT

                        //DOWNPAYMENT
                        $sqlAccountDp = "SELECT inv.inv_notim_id, SUM(ppd.dpp_dp_settle) AS amountDp,
                                        apph.`account_no` AS a_pph, appn.`account_no` AS a_ppn, l.ppn AS lppn, l.pph AS lpph
                                        FROM invoice_notim inv
                                        INNER JOIN pengajuan_payment_dp ppd ON ppd.inv_notim_id = inv.inv_notim_id
                                        LEFT JOIN labor l ON l.`labor_id` = inv.`laborId`
                                        LEFT JOIN tax lpph ON lpph.`tax_id` = l.`pph_tax_id`
                                        LEFT JOIN account apph ON apph.`account_id` = lpph.`account_id`
                                        LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
                                        LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`                                        
                                        WHERE inv.`payment_id` = {$paymentId} GROUP BY ppd.inv_notim_id";
                        $resultAccountDP = $myDatabase->query($sqlAccountDp, MYSQLI_STORE_RESULT);
                        if($resultAccountDP !== false){
                            $rowAccountDp = $resultAccountDP->fetch_object();
                            $creditUnloadingPrice = $rowAccountDp->amountDp;
                            $ppnVal = $creditUnloadingPrice * ($rowAccountDp->lppn/100);
                            $pphVal = $creditUnloadingPrice * ($rowAccountDp->lpph/100);

                            $sqlAccountB = "SELECT account_id, account_no FROM account WHERE account_type IN (3, 7) AND account_no in (210104, '{$rowAccountDp->a_pph}', '{$rowAccountDp->a_ppn}')";
                            $resultAccountB = $myDatabase->query($sqlAccountB, MYSQLI_STORE_RESULT);
                            if($resultAccountB !== false && $resultAccountB->num_rows > 0) {
                                $totalAmount = 0;
                                while($rowAccountB = $resultAccountB->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }
                                    //1 = Dr
                                    //2 = Cr
                                    if($rowAccountB->account_no == 210104) { //payment
                                        if($paymentStatus == 1){
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$creditUnloadingPrice})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$creditUnloadingPrice})";	
                                        }
                                    }elseif($rowAccountB->account_no == $rowAccountDp->a_pph) {
                                        if($paymentStatus == 1){
                                            $insertValues .= "(2, '{$source}',  'DP', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, 'Return Journal', {$pphVal})";	 
                                        }else{
                                            $insertValues .= "(1, '{$source}',  'DP', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$pphVal})";	 
                                        }
                                    } elseif($rowAccountB->account_no == $rowAccountDp->a_ppn) {
                                        if($paymentStatus == 1){
                                            $insertValues .= "(1, '{$source}',  'DP', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, 'Return Journal', {$ppnVal})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}',  'DP', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$ppnVal})";	
                                        }
                                    }


                                }
                            } else {
                                $boolContinue = false;
                            }
                        }
                        //PAYMENT
                        $sqlAccount2 = "SELECT inv.inv_notim_id, pb.dpp as amount, pb.`ppn_id`, pb.`ppn_value`,
                                                pb.pph_id, pb.pph_value
                                        FROM invoice_notim inv
                                        LEFT JOIN payment_ob pb ON pb.inv_notim_id = inv.inv_notim_id
                                        WHERE inv.`payment_id` = {$paymentId}";
                        $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);

                        if($resultAccount2 !== false){
                            while($rowAccount2 = $resultAccount2->fetch_object()) {	
                                if($rowAccount2->ppn_id != '' || $rowAccount2->ppn_id != 0){
                                    $taxPPN = $rowAccount2->ppn_value;
                                }else{
                                    $taxPPN = 0;
                                }
                                if($rowAccount2->pph_id != '' || $rowAccount2->pph_id != 0){
                                    $taxValue = $rowAccount2->pph_value;
                                }else{
                                    $taxValue = 0;
                                }

                                if($rowAccount2->amount != '' && $rowAccount2->amount > 0) {
                                    $totalAmount = $rowAccount2->amount;
                                    $debitUnloadingPrice = $totalAmount + ($totalAmount  * ($taxPPN/100)) - ($totalAmount  * ($taxValue/100));
                                }
                            }

                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (3, 7) AND account_no in (210104, {$row->account_no})";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }
                                        //1 = Dr
                                        //2 = Cr
                                    if($rowAccount->account_no == 210104) {
                                        if($paymentStatus == 1){
                                        $insertValues .= "(2, '{$source}', 'Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$debitUnloadingPrice})";
                                        }else{
                                        $insertValues .= "(1, '{$source}', 'Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$debitUnloadingPrice})";	
                                        }
                                    } elseif($rowAccount->account_no == $row->account_no) {
                                        if($paymentStatus == 1){
                                        $insertValues .= "(1, '{$source}', 'Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                        }else{
                                         $insertValues .= "(2, '{$source}', 'Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                            }
                        }
                    }else{ //Payment BIASA

                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (3, 7) AND account_no in (210104, {$row->account_no})";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                        $totalDP = $row->amount - $row->amount_journal;
                        
                        if($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while($rowAccount = $resultAccount->fetch_object()) {
                                if($insertValues != "") {
                                    $insertValues .= ", ";
                                }
                            //1 = Dr
                            //2 = Cr   
                                if($rowAccount->account_no == 210104) {
                                    if($paymentStatus == 1){
                                    $insertValues .= "(2, '{$source}', 'Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                    }else{
                                    $insertValues .= "(1, '{$source}', 'Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
                                    }
                                } elseif($rowAccount->account_no == $row->account_no) {
                                    if($paymentStatus == 1){
                                    $insertValues .= "(1, '{$source}', 'Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                    }else{
                                     $insertValues .= "(2, '{$source}', 'Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                    }

                } elseif($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (3, 7) AND account_no in (210104, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
                        //1 = Dr
                        //2 = Cr
                            if($rowAccount->account_no == 210104) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            } elseif($row->sales_id != '') {
                // <editor-fold defaultstate="collapsed" desc="payment Sales">
               if($row->payment_method == 1) {
                    $totalSalesAmount = 0;
                    $totalSalesDP = 0;
                    
                    $sqlContract = "SELECT sh.quantity, sl.price_converted, 
                                        (
                                            SELECT COALESCE(SUM(amount_journal), 0) FROM payment_detail
                                            WHERE shipment_id = pd.shipment_id
                                            AND payment_id <> {$paymentId}
                                        ) AS total_dp
                                    FROM payment_detail pd
                                    INNER JOIN shipment sh
                                        ON sh.shipment_id = pd.shipment_id
                                    INNER JOIN sales sl
                                        ON sl.sales_id = sh.sales_id
                                    WHERE pd.payment_id = {$paymentId}";
                    $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);
                    
                    if($resultContract !== false && $resultContract->num_rows == 1) {
                        $rowContract = $resultContract->fetch_object();
                      
						
						if($row->ppn_journal !== 0){
                        $totalSalesDP = $rowContract->total_dp /1.1;
						}else{
						$totalSalesDP = $rowContract->total_dp;
                    }
                    }
                    
					
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (210200, 230100,{$row->ap_account_no},  {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
                        //1 = Dr
                        //2 = Cr
						if($row->ppn_journal != 0){
                        $totalSalesAmount = $row->amount_journal /1.1;
						}else{
						$totalSalesAmount = $row->amount_journal;
						}
                            if($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Payment', 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Payment', 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == 210200) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalSalesDP})";
								}else{
								$insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalSalesDP})";	
								}
                            } elseif($rowAccount->account_no == $row->ap_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalSalesAmount})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalSalesAmount})";	
								}
                            } elseif($rowAccount->account_no == 230100) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";	
								}
                            } 
                        }
                    } else {
                        $boolContinue = false;
                    }
                }  elseif($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (230100, 210200, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    $amountJournalDP = $row->amount_journal - $row->ppn_journal;
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Down Payment', 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == 210200) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournalDP})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournalDP})";	
								}
                            }elseif($rowAccount->account_no == 230100) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";	
								}
                            } 
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
			} elseif($row->ap_account_type == 7 && $row->stockpile_contract_id == '' && $row->vendor_id == '' && $row->freight_id == '' && $row->labor_id == '' && $row->general_vendor_id == '' && $row->sales_id == '') {
                // <editor-fold defaultstate="collapsed" desc="internal transfer">
			echo $row->ap_account_type;
                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 7 AND account_no in ({$row->ap_account_no}, {$row->account_no})";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
                          //1 = Dr
                            //2 = Cr
                        if($rowAccount->account_no == $row->ap_account_no) {
							if($paymentStatus == 1){
                            $insertValues .= "(2, '{$source}', 'Payment', 2, 6, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
							}else{
							$insertValues .= "(1, '{$source}', 'Payment', 2, 6, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
							}
                        } 
						if($rowAccount->account_no == $row->account_no) {
							if($paymentStatus == 1){
                            $insertValues .= "(1, '{$source}', NULL, 2, 6, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 2, 6, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
							}
                        }
                    }
                } else {
                    $boolContinue = false;
                }
                //</editor-fold>
            } 
			
		elseif($row->payment_type == 1 && $row->ap_account_type != 7 && $row->sales_id == '') {
                // <editor-fold defaultstate="collapsed" desc="in umum ho">
				echo 'test2';
				if($row->gv_account_no == '' || $row->gv_account_no == 'NULL'){
						  $gv_account_no = 0;
					  }elseif($row->gv_account_no != '' || $row->gv_account_no != 'NULL'){
						  $gv_account_no = $row->gv_account_no;
					  }
                $sqlAccount = "SELECT a.* FROM 
				(SELECT account_id, account_no FROM account WHERE account_type in ({$row->ap_account_type}, 7) AND account_no in ({$row->ap_account_no}, {$row->account_no}) UNION ALL SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}) AND account_no in ({$gv_account_no}, 150410))
				 a GROUP BY a.account_no";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
						
						$totalAmount = $row->amount_journal - $row->ppn_journal;
						
						if( $row->ppn_journal != 0 &&  $row->pph_journal == 0 ){
							$amountJ = $row->amount_journal - $row->ppn_journal;
						}else{
							$amountJ = $row->amount_journal;
						}
                            //1 = Dr
                            //2 = Cr
                        if($rowAccount->account_no == $row->account_no) {
							if($paymentStatus == 1){
                            $insertValues .= "(2, '{$source}', 'Payment', 1, 8, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
							}else{
							$insertValues .= "(1, '{$source}', 'Payment', 1, 8, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";	
							}
                        } elseif($rowAccount->account_no == $row->ap_account_no) {
							if($paymentStatus == 1){
                            $insertValues .= "(1, '{$source}', NULL, 1, 8, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJ})";
							}else{
							 $insertValues .= "(2, '{$source}', NULL, 1, 8, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJ})";	
							}
                        } elseif($rowAccount->account_no == 150410) {
							if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";	
							}
                        } elseif($rowAccount->account_no == $gv_account_no  && $row->ap_account_no != $gv_account_no ) {
							if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";	
							}
                        }elseif($rowAccount->account_no == $gv_account_no && $row->ap_account_no == $gv_account_no) {
							if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, 0)";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, 0)";	
							}
                            }  
                    }
                } else {
                    $boolContinue = false;
                }
                // </editor-fold>
            }elseif($row->payment_type == 2 && $row->stockpile_contract_id == '' && $row->vendor_id == '' && $row->freight_id == '' && $row->labor_id == '' && $row->general_vendor_id != '') {
                // <editor-fold defaultstate="collapsed" desc="out other with general vendor">
				
                if($row->payment_method == 1) {  
					
					if($row->gv_account_no == '' || $row->gv_account_no == 'NULL'){
						  $gv_account_no = 0;
					  }elseif($row->gv_account_no != '' || $row->gv_account_no != 'NULL'){
						  $gv_account_no = $row->gv_account_no;
					  }
					  
					  $account_no = $row->account_no;
					  $ap_account_no = $row->ap_account_no;
					  $ppn_journal = $row->ppn_journal;
					  $pph_journal = $row->pph_journal;
					  $amount_journal = $row->amount_journal;
					  $ap_account_type = $row->ap_account_type;
					  $totalAmount = 0;
					  $totaDP = 0;
                      //$totalAll = $row->amount;
					  
                    $sqlAccount = "SELECT a.* FROM (SELECT account_id, account_no FROM account WHERE account_type IN ({$ap_account_type}, 7) AND account_no IN (130005, {$account_no}, {$ap_account_no})
					UNION ALL SELECT account_id, account_no FROM account WHERE account_type IN ({$ap_account_type}) AND account_no IN ({$gv_account_no}, 150410))a GROUP BY a.account_no";
					
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($row->b_currency_id == $row->currency_id && $row->currency_id != 1) {
                        // USD - USD - IDR	
                        $totalAll = $row->amount * $row->exchange_rate;
                    } elseif($row->b_currency_id != $row->currency_id && $row->currency_id != 1) {
                        // IDR - USD - IDR
                        $totalAll = $row->amount;
                    } elseif($row->b_currency_id != $row->currency_id && $row->currency_id == 1) {
                        // USD - IDR - IDR
                        $totalAll = $row->amount * $row->exchange_rate;
                    } else {
                        $totalAll = $row->amount;
                    }  
                    
                    $totalAmount = $totalAll - $ppn_journal;
                    $totalDP = 0;
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
                            //1 = Dr
                            //2 = Cr
                           if($rowAccount->account_no == $ap_account_no) {
							   if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Payment', 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
							   }else{
								$insertValues .= "(1, '{$source}', 'Payment', 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";   
							   }
                            } elseif($rowAccount->account_no == 130005) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalDP})";
								}else{
								 $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalDP})";	
								}
                            } elseif($rowAccount->account_no == $account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount_journal})";	
								}
                            } elseif($rowAccount->account_no == 150410) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId},{$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn_journal})";
								}else{
								$insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId},{$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn_journal})";	
								}
                            } elseif($rowAccount->account_no == $gv_account_no && $gv_account_no != $ap_account_no && $rowAccount->gv_pph_tax_id == 21) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph_journal})";
								}else{
								$insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph_journal})";	
								}
							} elseif($rowAccount->account_no == $gv_account_no && $gv_account_no != $ap_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph_journal})";	
								}
                            }elseif($rowAccount->account_no == $gv_account_no && $gv_account_no == $ap_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, 0)";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, 0)";	
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
						echo 'FALSE 2';
                    }
                } 
				elseif($row->payment_method == 2) {
					if($row->gv_account_no == '' || $row->gv_account_no == 'NULL'){
						  $gv_account_no = 0;
					  }elseif($row->gv_account_no != '' || $row->gv_account_no != 'NULL'){
						  $gv_account_no = $row->gv_account_no;
					  }
                    $sqlAccount = "SELECT a.* FROM (SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}, 7) AND account_no IN ({$row->account_no}, {$row->ap_account_no})
					UNION ALL SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}) AND account_no IN ({$gv_account_no}, 150410)) a GROUP BY a.account_no";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
                        //1 = Dr
                        //2 = Cr
                            if($rowAccount->account_no == $row->ap_account_no) {
								$amountJournal = $row->amount_journal - $row->ppn_journal;
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}
                            } elseif($rowAccount->account_no == 150410) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
								}else{
								 $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";	
								}
                            } elseif($rowAccount->account_no == $gv_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
								}
                            } 
                        }
                    } else {
                        $boolContinue = false;
						 

                    }
                }
                // </editor-fold>
            } elseif($row->payment_type == 2 && $row->stockpile_contract_id == '' && $row->vendor_id == '' && $row->freight_id == '' && 
                    $row->labor_id == '' && $row->general_vendor_id == '') {
                // <editor-fold defaultstate="collapsed" desc="out other without general vendor">
                if($row->payment_method == 1) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}, 7) AND account_no in ({$row->account_no}, {$row->ap_account_no}) GROUP BY account_no";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    $totalAmount = ceil($row->amount_journal - $row->ppn_journal);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
                            //1 = Dr
                            //2 = Cr
                            if($rowAccount->account_no == $row->ap_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Payment', 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
								}else{
								$insertValues .= "(1, '{$source}', 'Payment', 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                } elseif($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}, 7) AND account_no in (130005, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
                            //1 = Dr
                            //2 = Cr
                            if($rowAccount->account_no == 130005) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            } else {
                $boolContinue = false;
            }
        } else {
            $boolContinue = false;
        }
                
            
        
        // </editor-fold>
    
    //1 = Dr
   //2 = Cr
    } elseif($returnId != 'NULL') {
        // <editor-fold defaultstate="collapsed" desc="return payment">
        
        $sql = "SELECT p.*, a.account_no, ap.account_type AS ap_account_type, ap.account_no AS ap_account_no,
                    b.currency_id AS b_currency_id
                FROM payment p 
                INNER JOIN bank b
                    ON b.bank_id = p.bank_id
                INNER JOIN account a
                    ON a.account_id = b.account_id
                INNER JOIN account ap
                    ON ap.account_id = p.account_id 		   
                WHERE p.payment_id = {$returnId} AND payment_status = 0";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            
            // <editor-fold defaultstate="collapsed" desc="in return">
            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 7 AND account_no in ({$row->account_no})";
            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                while($rowAccount = $resultAccount->fetch_object()) {
                    if($insertValues != "") {
                        $insertValues .= ", ";
                    }

                    if($rowAccount->account_no == $row->account_no) {
                        $insertValues .= "(1, '{$source}', 'Payment', 1, 7, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$returnId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                    } 
                }
                
                if($insertValues != "") {
                    $insertValues .= ", ";
                }
                
                $insertValues .= "(2, '{$source}', NULL, 1, 7, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$returnId}, {$jurnalId}, 0, 0, {$row->account_id}, NULL, {$row->amount_journal})";
            } else {
                $boolContinue = false;
            }
            // </editor-fold>
        } else {
            $boolContinue = false;
        }
        
        // </editor-fold>
    }
    
    if($boolContinue) { // insert into general_ledger
        // INSERT 
        $sql = "INSERT INTO general_ledger (general_ledger_type, general_ledger_module, 
                            general_ledger_method, 
                            general_ledger_transaction_type, general_ledger_for, contract_id, 
                            invoice_id, invoice_notim_id, 
                            transaction_id, t_id, payment_id, jurnal_id,accrue_id, 
                            i_id, cash_id, account_id, 
                description, amount) VALUES {$insertValues}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        // echo " --- SPASI ---" .$sql;

		if($result === false){
            echo "FALSE";
            //echo $insertValues;
			echo $sql . "</br>";

		}else{
			echo 'TRUE';
            echo $insertValues;
			echo $sql;
		//$general_ledger_id = $myDatabase->insert_id;
		
		}
    }
}

function insertGeneralLedger($myDatabase, $source, $invoiceId = "NULL", $i_id = "NULL", $contractId = "NULL", $transactionId = "NULL", $paymentId = "NULL", $jurnalId = "NULL", $returnId = "NULL")
{

    $insertValues = "";
    $boolContinue = true;

    if ($contractId != 'NULL' && $source == 'CONTRACT') {
        // <editor-fold defaultstate="collapsed" desc="contract">

        //update surya-----------------------------------------------------------------------------------------------------
        $sql = "SELECT contract_status FROM contract
       WHERE contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();

            $contractStatus = $row->contract_status;
        }
        //----------------------------------------------------------------------------------------------------------------------------------


        if ($contractStatus != 2) {
            $sql = "DELETE FROM general_ledger WHERE contract_id = {$contractId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        }

        $sql = "SELECT con.*, v.* FROM contract con 
LEFT JOIN vendor v ON con.`vendor_id` = v.`vendor_id`  WHERE con.contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();


            if ($row->contract_type == 'P') {

                $amount = $row->price_converted * $row->quantity;

                if ($row->ppn != 0) {
                    $totalAmount = $amount * (100+$row->ppn)/100;
                } else {
                    $totalAmount = $amount;
                }
                $ppn = $totalAmount - $amount;


                $sqlAccount = "SELECT account_id, account_no, account_name FROM account WHERE account_type = 1 AND account_no IN (130100, 210102, 150410)";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while ($rowAccount = $resultAccount->fetch_object()) {
                        if ($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if ($contractStatus != 2) {
                            if ($rowAccount->account_no == 130100) {
                                $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, 'Kontrak beli cangkang kontrak', {$amount})";
                            } elseif ($rowAccount->account_no == 210102) {
                                $insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalAmount})";
                            } elseif ($rowAccount->account_no == 150410) {
                                $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";
                            }
                        } else {
                            if ($rowAccount->account_no == 130100) {
                                $insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, 'cancel kontrak', {$amount})";
                            } elseif ($rowAccount->account_no == 210102) {
                                $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, 'cancel kontrak', {$totalAmount})";
                            } elseif ($rowAccount->account_no == 150410) {
                                $insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, 'cancel kontrak', {$ppn})";
                            }
                        }
                    }
                } else {
                    $boolContinue = false;
                    echo 'FALSE1';
                }
            } else {
                $boolContinue = false;
                echo 'FALSE2';
            }
        } else {
            $boolContinue = false;
            echo 'FALSE3';
        }

        // </editor-fold>
    }else if ($contractId != 'NULL' && $source == 'CONTRACT ADJUSTMENT') {
        // <editor-fold defaultstate="collapsed" desc="contract">

        $sql = "SELECT * FROM contract_adjustment WHERE adj_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();

            $adjId = $row->adj_id;
            $conId = $row->contract_id;

            $sql = "DELETE FROM general_ledger WHERE contract_id = {$conId} AND general_ledger_module = 'CONTRACT ADJUSTMENT' AND description = '{$adjId}'";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        }


        $adjustment = 0;
        $ppn = 0;
        $totalAdjustment = 0;
        $adjustment1 = 0;
        $ppn1 = 0;
        $totalAdjustment1 = 0;
        $sql = "SELECT adj.*,con.contract_type, con.`price_converted`, v.`ppn`, a.account_no 
FROM contract_adjustment adj
LEFT JOIN contract con ON adj.`contract_id` = con.`contract_id`
LEFT JOIN vendor v ON con.`vendor_id` = v.`vendor_id` 
LEFT JOIN account a ON a.account_id = adj.adjustment_acc
WHERE adj.adj_id = {$adjId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();

            $contract_id = $row->contract_id;

            if ($row->contract_type == 'P') {

                $adjustment = $row->price_converted * $row->adjustment;
                if ($row->adjustment_ppn == 1) {
                    $ppn = $adjustment * ($row->ppn / 100);
                } else {
                    $ppn = 0;
                }
                $totalAdjustment = $adjustment + $ppn;
                $totalAdjustment1 = $totalAdjustment;
                if ($adjustment < 0) {
                    $adjustment1 = $adjustment * -1;
                    $totalAdjustment1 = $totalAdjustment * -1;
                    $ppn1 = $ppn * -1;
                }
                $accountNo = $row->account_no;

                $sqlAccount1 = "SELECT account_id, account_no, account_name FROM account WHERE account_type = 1 AND account_no IN (130100, 150410, {$accountNo})";
                $resultAccount1 = $myDatabase->query($sqlAccount1, MYSQLI_STORE_RESULT);

                if ($resultAccount1 !== false && $resultAccount1->num_rows > 0) {
                    while ($rowAccount1 = $resultAccount1->fetch_object()) {
                        if ($insertValues != "") {
                            $insertValues .= ", ";
                        }
                        if ($adjustment != 0 && $adjustment != '') {
                            if ($rowAccount1->account_no == 130100) {
                                if ($adjustment < 0) {
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contract_id}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, '{$adjId}', {$adjustment1})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contract_id}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, '{$adjId}', {$adjustment})";
                                }
                            } elseif ($rowAccount1->account_no == 150410) {
                                if ($adjustment < 0) {
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contract_id}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, '{$adjId}', {$ppn1})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contract_id}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, '{$adjId}', {$ppn})";
                                }
                            } elseif ($rowAccount1->account_no == 210102) {
                                if ($adjustment < 0) {
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contract_id}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, '{$adjId}', {$totalAdjustment1})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contract_id}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, '{$adjId}', {$totalAdjustment1})";
                                }
                            } elseif ($rowAccount1->account_no == 520100) {
                                if ($adjustment < 0) {
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contract_id}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, '{$adjId}', {$totalAdjustment1})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contract_id}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, '{$adjId}', {$totalAdjustment1})";
                                }
                            } elseif ($rowAccount1->account_no == 150120) {
                                if ($adjustment < 0) {
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contract_id}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, '{$adjId}', {$totalAdjustment1})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contract_id}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, '{$adjId}', {$totalAdjustment1})";
                                }
                            } elseif ($rowAccount1->account_no == 510101) {
                                if ($adjustment < 0) {
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contract_id}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, '{$adjId}', {$totalAdjustment1})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contract_id}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, '{$adjId}', {$totalAdjustment1})";
                                }
                            }
                        }

                    }
                } else {
                    $boolContinue = false;
                    echo 'FALSE1';
                }
            } else {
                $boolContinue = false;
                echo 'FALSE2';
            }
        } else {
            $boolContinue = false;
            echo 'FALSE3';
        }

        // </editor-fold>
    } elseif ($contractId != 'NULL' && $source == 'STOCK TRANSIT') {

        echo 'TRANSIT';
        $sqlNew = "SELECT * FROM stock_transit st
        LEFT JOIN stockpile_contract sc ON sc.`stockpile_contract_id` = st.`stockpile_contract_id`
        LEFT JOIN contract c ON c.`contract_id` = sc.`contract_id`
        WHERE st.`stock_transit_id` = {$contractId}";
        $result1 = $myDatabase->query($sqlNew, MYSQLI_STORE_RESULT);
        if($result1 !== false && $result1->num_rows == 1) {
        $row1 = $result1->fetch_object();
        $contractId1 = $row1->contract_id; 
    }
        // <editor-fold defaultstate="collapsed" desc="contract">

        $sql = "DELETE FROM general_ledger WHERE general_ledger_module = 'STOCK TRANSIT' AND contract_id = {$contractId1} and description = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


        $sql = "SELECT a.*, (c.`price_converted` * a.send_weight) AS amt_stock_transit 
        FROM stock_transit a 
        LEFT JOIN stockpile_contract b ON a.`stockpile_contract_id` = b.`stockpile_contract_id`
        LEFT JOIN contract c ON b.`contract_id` = c.`contract_id` WHERE c.contract_id = {$contractId1} 
        and a.stock_transit_id = {$contractId} ORDER BY b.`stockpile_contract_id` desc limit 1";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows > 0) {
            $row = $result->fetch_object();

            $amt_stock_transit = $row->amt_stock_transit;
            //$amt_ospks = $row->amt_ospks;

            $sqlAccount1 = "SELECT account_id, account_no, account_name FROM account WHERE account_type = 1 AND account_no IN (130100,141000)";
            $resultAccount1 = $myDatabase->query($sqlAccount1, MYSQLI_STORE_RESULT);

            if ($resultAccount1 !== false && $resultAccount1->num_rows > 0) {
                while ($rowAccount1 = $resultAccount1->fetch_object()) {
                    if ($insertValues != "") {
                        $insertValues .= ", ";
                    }
                    if ($amt_stock_transit != 0 && $amt_stock_transit != '') {
                        if ($rowAccount1->account_no == 130100) {
                            if ($amt_stock_transit < 0) {
                                $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId1}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, {$contractId}, {$amt_stock_transit})";
                            } else {
                                $insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId1}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, {$contractId}, {$amt_stock_transit})";
                            }
                        } elseif ($rowAccount1->account_no == 141000) {
                            if ($amt_stock_transit < 0) {
                                $insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId1}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, {$contractId}, {$amt_stock_transit})";
                            } else {
                                $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId1}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, {$contractId}, {$amt_stock_transit})";
                            }
                        }
                    }

                }
            } else {
                $boolContinue = false;
                echo 'FALSE1';
            }

        } else {
            $boolContinue = false;
            echo 'FALSE3';
            echo $sql;
        }

        // </editor-fold>
    }  elseif ($jurnalId != 'NULL') {
        // <editor-fold defaultstate="collapsed" desc="contract">

        $sql = "DELETE FROM general_ledger WHERE jurnal_id = {$jurnalId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


        $sql = "SELECT * FROM gl_detail WHERE gl_detail_id = {$jurnalId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();


            $sqlAccount = "SELECT account_id, account_no, account_name FROM account WHERE account_id = {$row->account_id}";
            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

            if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                while ($rowAccount = $resultAccount->fetch_object()) {
                    if ($insertValues != "") {
                        $insertValues .= ", ";
                    }

                    if ($row->gl_type == 1) {
                        $insertValues .= "(1, '{$source}', NULL, NULL, 11, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_converted})";
                    } elseif ($row->gl_type == 2) {
                        $insertValues .= "(2, '{$source}', NULL, NULL, 11, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_converted})";
                    }
                }
            } else {
                $boolContinue = false;
            }


        } else {
            $boolContinue = false;
            echo 'FALSE3';
            echo $jurnalId;
        }

        // </editor-fold>
    } elseif ($invoiceId != 'NULL' && $source == 'RETURN INVOICE') {
        // <editor-fold defaultstate="collapsed" desc="invoiceDetail">
        $sql = "DELETE FROM general_ledger WHERE invoice_id = {$invoiceId} AND general_ledger_module = 'RETURN INVOICE'";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        /// echo 'test';
        $sql88 = "SELECT invoice_detail_id FROM invoice_detail WHERE invoice_detail_id IN ({$invoiceId})";
        $result88 = $myDatabase->query($sql88, MYSQLI_STORE_RESULT);
        if ($result88 !== false && $result88->num_rows >= 0) {
            while ($row88 = $result88->fetch_object()) {

                $invoiceId = $row88->invoice_detail_id;


                $sql = "SELECT id.*,i.*, a.`account_no`, a.`account_type`, apph.`account_no` AS a_pph FROM invoice_detail id
				LEFT JOIN invoice i ON i.`invoice_id` = id.`invoice_id`
				LEFT JOIN account a ON id.`account_id` = a.`account_id`
				LEFT JOIN tax txpph ON id.`pphID` = txpph.`tax_id`
				LEFT JOIN tax txppn ON id.`ppnID` = txppn.`tax_id`
				LEFT JOIN account apph ON apph.`account_id` = txpph.`account_id` 
				WHERE id.invoice_detail_id = {$invoiceId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false && $result->num_rows == 1) {
                    $row = $result->fetch_object();

                    $amount = $row->amount_converted;
                    $ppn = $row->ppn_converted;
                    $pph = $row->pph_converted;
                    $totalAmount = $row->tamount_converted;
                    $account_no = $row->account_no;
                    $invoiceMethod = $row->invoice_method_detail;
                    $gvId = $row->general_vendor_id;
                    $paymentStatus = $row->payment_status;
                    $invoiceStatus = $row->invoice_status;
                    /*
				if($invoiceMethod = 1){

				$sql8 = "SELECT id.*, i.*, adp.`account_no`, aid.`account_no` AS accNo FROM invoice_detail id
						 LEFT JOIN invoice i ON i.`invoice_id` = id.`invoice_id`
						 LEFT JOIN tax dptx ON id.`pphID` = dptx.`tax_id`
						 LEFT JOIN account adp ON dptx.`account_id` = adp.`account_id`
						 LEFT JOIN account aid ON aid.`account_id` = id.`account_id`
                         WHERE id.general_vendor_id = {$gvId} AND id.invoice_method_detail = 2 AND id.invoice_detail_dp = {$invoiceId} ORDER BY i.invoice_id ASC";
				$result8 = $myDatabase->query($sql8, MYSQLI_STORE_RESULT);

				if($result8 !== false && $result8->num_rows >= 0) {
				while($row8 = $result8->fetch_object()) {
			   			$tamount = $row8->amount_converted;
						$i_id = $row8->invoice_id;
						$accNo = $row8->account_no;
						$accountNo = $row8->accNo;
						$ppnDP = $row8->ppn_converted;
						$pphDP = $row8->pph_converted;

			$sqlAccountDP = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in ('{$accountNo}', 150410 ,'{$accNo}')";
                $resultAccountDP = $myDatabase->query($sqlAccountDP, MYSQLI_STORE_RESULT);

                if($resultAccountDP !== false && $resultAccountDP->num_rows > 0) {
                    while($rowAccountDP = $resultAccountDP->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
			 			if($rowAccountDP->account_no == $accountNo) {

			 				$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$tamount})";

                        }elseif($rowAccountDP->account_no == 150410) {

                            $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$ppnDP})";

                        }
						 elseif($rowAccountDP->account_no == $accNo) {

                            $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$pphDP})";

						 }
			}
		}
	  }
	}else {
                    $boolContinue = false;

				echo 'FALSE2';
				echo $gvId;

                }
			}*/

                    if ($invoiceMethod = 1) {/* DP ADMIN BANK*/


                        $sql9 = "SELECT idp.*, id.invoice_id, aid.`account_no` AS accNo, adp.`account_no` AS acc_pph, dptx.tax_value AS pph_dp, id.pph AS dpPPh,
adpppn.`account_no` AS acc_ppn, dpppn.tax_value AS ppn_dp, id.ppn AS dpPPn FROM invoice_dp idp
LEFT JOIN invoice_detail id ON id.`invoice_detail_id` = idp.invoice_detail_dp
LEFT JOIN tax dptx ON id.`pphID` = dptx.`tax_id`
LEFT JOIN account adp ON dptx.`account_id` = adp.`account_id`
LEFT JOIN tax dpppn ON id.`ppnID` = dpppn.`tax_id`
LEFT JOIN account adpppn ON dpppn.`account_id` = adpppn.`account_id`  
LEFT JOIN account aid ON aid.`account_id` = id.`account_id`       
WHERE idp.invoice_detail_id = {$invoiceId} AND aid.`account_no` = 700080 ORDER BY id.invoice_id ASC";
                        $result9 = $myDatabase->query($sql9, MYSQLI_STORE_RESULT);

                        if ($result9 !== false && $result9->num_rows >= 0) {
                            while ($row9 = $result9->fetch_object()) {
                                //echo 'test2';
                                $tamount2 = $row9->amount_payment;
                                $i_id2 = $row9->invoice_id;
                                $accNo2 = $row9->accNo;
                                //$accountNo = $row8->accNo;
                                //$ppnDP = $row8->ppn_converted;
                                //$pphDP = $row8->pph_converted;
                                $acc_ppn2 = $row9->acc_ppn;
                                $acc_pph2 = $row9->acc_pph;
                                if ($row9->dpPPn == 0) {
                                    $ppnDP2 = 0;
                                } else {
                                    $ppnDP2 = $tamount2 * ($row9->ppn_dp / 100);
                                }
                                if ($row9->dpPPh == 0) {
                                    $pphDP2 = 0;
                                } else {
                                    $pphDP2 = $tamount2 * ($row9->pph_dp / 100);
                                }
                                echo $accNo2;


                                $sqlAccountDP2 = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in ('{$acc_pph2}', 150410 , 700080)";
                                $resultAccountDP2 = $myDatabase->query($sqlAccountDP2, MYSQLI_STORE_RESULT);

                                if ($resultAccountDP2 !== false && $resultAccountDP2->num_rows > 0) {
                                    while ($rowAccountDP2 = $resultAccountDP2->fetch_object()) {
                                        if ($insertValues != "") {
                                            $insertValues .= ", ";
                                        }

                                        if ($rowAccountDP2->account_no == 700080) {

                                            $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id2}, 0, {$rowAccountDP2->account_id}, NULL, {$tamount2})";

                                        } elseif ($rowAccountDP2->account_no == 150410) {

                                            $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id2}, 0, {$rowAccountDP2->account_id}, NULL, {$ppnDP2})";

                                        } elseif ($rowAccountDP2->account_no == $acc_pph2) {

                                            $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id2}, 0, {$rowAccountDP2->account_id}, NULL, {$pphDP2})";

                                        }
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;

                            echo 'FALSE2';
                            echo $gvId;

                        }
                    }

                    if ($invoiceMethod = 1) {

                        $totalAmountDp = 0;
                        $sql8 = "SELECT idp.*, id.invoice_id, aid.`account_no` AS accNo, adp.`account_no` AS acc_pph, dptx.tax_value AS pph_dp, id.pph AS dpPPh,
adpppn.`account_no` AS acc_ppn, dpppn.tax_value AS ppn_dp, id.ppn AS dpPPn FROM invoice_dp idp
LEFT JOIN invoice_detail id ON id.`invoice_detail_id` = idp.invoice_detail_dp
LEFT JOIN tax dptx ON id.`pphID` = dptx.`tax_id`
LEFT JOIN account adp ON dptx.`account_id` = adp.`account_id`
LEFT JOIN tax dpppn ON id.`ppnID` = dpppn.`tax_id`
LEFT JOIN account adpppn ON dpppn.`account_id` = adpppn.`account_id`  
LEFT JOIN account aid ON aid.`account_id` = id.`account_id`       
WHERE idp.invoice_detail_id = {$invoiceId} AND aid.`account_no` != 700080 ORDER BY id.invoice_id ASC";
                        $result8 = $myDatabase->query($sql8, MYSQLI_STORE_RESULT);

                        if ($result8 !== false && $result8->num_rows >= 0) {
                            while ($row8 = $result8->fetch_object()) {
                                //echo 'test2';
                                $tamount = $row8->amount_payment;
                                $i_id = $row8->invoice_id;
                                $accNo = $row8->accNo;
                                //$accountNo = $row8->accNo;
                                //$ppnDP = $row8->ppn_converted;
                                //$pphDP = $row8->pph_converted;
                                $acc_ppn = $row8->acc_ppn;
                                $acc_pph = $row8->acc_pph;
                                if ($row8->dpPPn == 0) {
                                    $ppnDP = 0;
                                } else {
                                    $ppnDP = $tamount * ($row8->ppn_dp / 100);
                                }
                                if ($row8->dpPPh == 0) {
                                    $pphDP = 0;
                                } else {
                                    $pphDP = $tamount * ($row8->pph_dp / 100);
                                }
                                echo $accNo;

                                $amountDp = ($tamount + $ppnDP) - $pphDP;
                                $totalAmountDp = $totalAmountDp + $amountDp;


                                $sqlAccountDP = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in ('{$acc_pph}', 150410 ,'{$accNo}')";
                                $resultAccountDP = $myDatabase->query($sqlAccountDP, MYSQLI_STORE_RESULT);

                                if ($resultAccountDP !== false && $resultAccountDP->num_rows > 0) {
                                    while ($rowAccountDP = $resultAccountDP->fetch_object()) {
                                        if ($insertValues != "") {
                                            $insertValues .= ", ";
                                        }

                                        if ($rowAccountDP->account_no == $accNo) {

                                            $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$tamount})";

                                        } elseif ($rowAccountDP->account_no == 150410) {

                                            $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$ppnDP})";

                                        } elseif ($rowAccountDP->account_no == $acc_pph) {

                                            $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$pphDP})";

                                        }
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;

                            echo 'FALSE3';
                            echo $gvId;

                        }
                    }


                    if ($invoiceMethod = 1) {

                        if ($pph == 0) {
                            $a_pph = 0;
                        } else {
                            $a_pph = $row->a_pph;
                        }

                        //echo $row->account_type;
                        //echo $account_no;
                        //echo $a_pph;
                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in (210105, 150410, '{$account_no}', '{$a_pph}')";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                        if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while ($rowAccount = $resultAccount->fetch_object()) {
                                if ($insertValues != "") {
                                    $insertValues .= ", ";
                                }
                                if ($rowAccount->account_no == $account_no) {
                                    if ($amount < 0) {
                                        $amount1 = $amount * -1;
                                        $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                    }

                                } elseif ($rowAccount->account_no == 210105) {
                                    $totalAmount = $totalAmount - $totalAmountDp;
                                    if ($totalAmount < 0) {
                                        $totalAmount1 = $totalAmount * -1;
                                        $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount1})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
                                    }

                                } elseif ($rowAccount->account_no == 150410) {
                                    if ($ppn < 0) {
                                        $ppn1 = $ppn * -1;
                                        $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn1})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";
                                    }
                                } elseif ($rowAccount->account_no == $a_pph) {
                                    if ($pph < 0) {
                                        $pph1 = $pph * -1;
                                        $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph1})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph})";
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                    } elseif ($invoiceMethod = 2) {
                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in (210105, 150410, '{$account_no}', '{$a_pph}')";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                        if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while ($rowAccount = $resultAccount->fetch_object()) {
                                if ($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if ($rowAccount->account_no == $account_no) {

                                    $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";

                                } elseif ($rowAccount->account_no == 210105) {

                                    $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";

                                } elseif ($rowAccount->account_no == 150410) {

                                    $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";

                                } elseif ($rowAccount->account_no == $a_pph) {

                                    $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph})";

                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                    }

                } else {
                    $boolContinue = false;
                }
            }
        }

        // </editor-fold>
    } elseif ($invoiceId != 'NULL' && $source == 'INVOICE DETAIL') {
        // <editor-fold defaultstate="collapsed" desc="invoiceDetail">

        $sql = "DELETE FROM general_ledger WHERE invoice_id = {$invoiceId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "SELECT id.*,i.*, a.`account_no`, a.`account_type`, apph.`account_no` AS a_pph FROM invoice_detail id
				LEFT JOIN invoice i ON i.`invoice_id` = id.`invoice_id`
				LEFT JOIN account a ON id.`account_id` = a.`account_id`
				LEFT JOIN tax txpph ON id.`pphID` = txpph.`tax_id`
				LEFT JOIN tax txppn ON id.`ppnID` = txppn.`tax_id`
				LEFT JOIN account apph ON apph.`account_id` = txpph.`account_id` 
				WHERE id.invoice_detail_id = {$invoiceId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();

            $amount = $row->amount_converted;
            $ppn = $row->ppn_converted;
            $pph = $row->pph_converted;
            $totalAmount = $row->tamount_converted;
            $account_no = $row->account_no;
            $invoiceMethod = $row->invoice_method_detail;
            $gvId = $row->general_vendor_id;
            $paymentStatus = $row->payment_status;
            $invoiceStatus = $row->invoice_status;

            if ($invoiceMethod = 1) {/* DP ADMIN BANK*/


                $sql9 = "SELECT idp.*, id.invoice_id, aid.`account_no` AS accNo, adp.`account_no` AS acc_pph, dptx.tax_value AS pph_dp, id.pph AS dpPPh,
adpppn.`account_no` AS acc_ppn, dpppn.tax_value AS ppn_dp, id.ppn AS dpPPn FROM invoice_dp idp
LEFT JOIN invoice_detail id ON id.`invoice_detail_id` = idp.invoice_detail_dp
LEFT JOIN tax dptx ON id.`pphID` = dptx.`tax_id`
LEFT JOIN account adp ON dptx.`account_id` = adp.`account_id`
LEFT JOIN tax dpppn ON id.`ppnID` = dpppn.`tax_id`
LEFT JOIN account adpppn ON dpppn.`account_id` = adpppn.`account_id`  
LEFT JOIN account aid ON aid.`account_id` = id.`account_id`       
WHERE idp.status = 0 AND idp.invoice_detail_id = {$invoiceId} AND aid.`account_no` = 700080 ORDER BY id.invoice_id ASC";
                $result9 = $myDatabase->query($sql9, MYSQLI_STORE_RESULT);

                if ($result9 !== false && $result9->num_rows >= 0) {
                    while ($row9 = $result9->fetch_object()) {
                        //echo 'test2';
                        $tamount2 = $row9->amount_payment;
                        $i_id2 = $row9->invoice_id;
                        $accNo2 = $row9->accNo;
                        //$accountNo = $row8->accNo;
                        //$ppnDP = $row8->ppn_converted;
                        //$pphDP = $row8->pph_converted;
                        $acc_ppn2 = $row9->acc_ppn;
                        $acc_pph2 = $row9->acc_pph;
                        if ($row9->dpPPn == 0) {
                            $ppnDP2 = 0;
                        } else {
                            $ppnDP2 = $tamount2 * ($row9->ppn_dp / 100);
                        }
                        if ($row9->dpPPh == 0) {
                            $pphDP2 = 0;
                        } else {
                            $pphDP2 = $tamount2 * ($row9->pph_dp / 100);
                        }
                        echo $accNo2;


                        $sqlAccountDP2 = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in ('{$acc_pph2}', 150410 , 700080)";
                        $resultAccountDP2 = $myDatabase->query($sqlAccountDP2, MYSQLI_STORE_RESULT);

                        if ($resultAccountDP2 !== false && $resultAccountDP2->num_rows > 0) {
                            while ($rowAccountDP2 = $resultAccountDP2->fetch_object()) {
                                if ($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if ($rowAccountDP2->account_no == 700080) {

                                    $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id2}, 0, {$rowAccountDP2->account_id}, NULL, {$tamount2})";

                                } elseif ($rowAccountDP2->account_no == 150410) {

                                    $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id2}, 0, {$rowAccountDP2->account_id}, NULL, {$ppnDP2})";

                                } elseif ($rowAccountDP2->account_no == $acc_pph2) {

                                    $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id2}, 0, {$rowAccountDP2->account_id}, NULL, {$pphDP2})";

                                }
                            }
                        }
                    }
                } else {
                    $boolContinue = false;

                    echo 'FALSE2';
                    //echo $gvId;

                }
            }

            if ($invoiceMethod = 1) {


                $sql8 = "SELECT idp.*, id.invoice_id, aid.`account_no` AS accNo, adp.`account_no` AS acc_pph, dptx.tax_value AS pph_dp, id.pph AS dpPPh,
adpppn.`account_no` AS acc_ppn, dpppn.tax_value AS ppn_dp, id.ppn AS dpPPn FROM invoice_dp idp
LEFT JOIN invoice_detail id ON id.`invoice_detail_id` = idp.invoice_detail_dp
LEFT JOIN tax dptx ON id.`pphID` = dptx.`tax_id`
LEFT JOIN account adp ON dptx.`account_id` = adp.`account_id`
LEFT JOIN tax dpppn ON id.`ppnID` = dpppn.`tax_id`
LEFT JOIN account adpppn ON dpppn.`account_id` = adpppn.`account_id`  
LEFT JOIN account aid ON aid.`account_id` = id.`account_id`       
WHERE idp.status = 0 AND idp.invoice_detail_id = {$invoiceId} AND aid.`account_no` != 700080 ORDER BY id.invoice_id ASC";
                $result8 = $myDatabase->query($sql8, MYSQLI_STORE_RESULT);

                if ($result8 !== false && $result8->num_rows >= 0) {
                    while ($row8 = $result8->fetch_object()) {
                        //echo 'test2';
                        $tamount = $row8->amount_payment;
                        $i_id = $row8->invoice_id;
                        $accNo = $row8->accNo;
                        //$accountNo = $row8->accNo;
                        //$ppnDP = $row8->ppn_converted;
                        //$pphDP = $row8->pph_converted;
                        $acc_ppn = $row8->acc_ppn;
                        $acc_pph = $row8->acc_pph;
                        if ($row8->dpPPn == 0) {
                            $ppnDP = 0;
                        } else {
                            $ppnDP = $tamount * ($row8->ppn_dp / 100);
                        }
                        if ($row8->dpPPh == 0) {
                            $pphDP = 0;
                        } else {
                            $pphDP = $tamount * ($row8->pph_dp / 100);
                        }
                        //echo $accNo;

                        $amountDp = ($tamount + $ppnDP) - $pphDP;
                        $totalAmountDp = $totalAmountDp + $amountDp;


                        $sqlAccountDP = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in ('{$acc_pph}', 150410 ,'{$accNo}')";
                        $resultAccountDP = $myDatabase->query($sqlAccountDP, MYSQLI_STORE_RESULT);

                        if ($resultAccountDP !== false && $resultAccountDP->num_rows > 0) {
                            while ($rowAccountDP = $resultAccountDP->fetch_object()) {
                                if ($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if ($rowAccountDP->account_no == $accNo) {
                                    if ($tamount < 0) {
                                        $tamount1 = $tamount * -1;
                                        $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$tamount1})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$tamount})";
                                    }

                                } elseif ($rowAccountDP->account_no == 150410) {

                                    $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$ppnDP})";

                                } elseif ($rowAccountDP->account_no == $acc_pph) {

                                    $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$pphDP})";

                                }
                            }
                        }
                    }
                } else {
                    $boolContinue = false;

                    echo 'FALSE3';
                    //echo $gvId;

                }
            }


            if ($invoiceMethod = 1) {

                if ($pph == 0) {
                    $a_pph = 0;
                } else {
                    $a_pph = $row->a_pph;
                }

                //echo $row->account_type;
                //echo $account_no;
                //echo $a_pph;
                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in (210105, 150410, '{$account_no}', '{$a_pph}')";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while ($rowAccount = $resultAccount->fetch_object()) {
                        if ($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if ($rowAccount->account_no == $account_no) {
                            if ($amount < 0) {
                                $amount1 = $amount * -1;
                                $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                            } else {
                                $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                            }

                        } elseif ($rowAccount->account_no == 210105) {
                            $totalAmount = $totalAmount - $totalAmountDp;
                            if ($totalAmount < 0) {
                                $totalAmount1 = $totalAmount * -1;
                                $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount1})";
                            } else {
                                $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
                            }

                        } elseif ($rowAccount->account_no == 150410) {
                            if ($ppn < 0) {
                                $ppn1 = $ppn * -1;
                                $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn1})";
                            } else {
                                $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";
                            }
                        } elseif ($rowAccount->account_no == $a_pph) {
                            if ($pph < 0) {
                                $pph1 = $pph * -1;
                                $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph1})";
                            } else {
                                $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph})";
                            }
                        }
                    }
                } else {
                    $boolContinue = false;
                }
            } elseif ($invoiceMethod = 2) {
                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in (210105, 150410, '{$account_no}', '{$a_pph}')";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while ($rowAccount = $resultAccount->fetch_object()) {
                        if ($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if ($rowAccount->account_no == $account_no) {

                            $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";

                        } elseif ($rowAccount->account_no == 210105) {

                            $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";

                        } elseif ($rowAccount->account_no == 150410) {

                            $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";

                        } elseif ($rowAccount->account_no == $a_pph) {

                            $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph})";

                        }
                    }
                } else {
                    $boolContinue = false;
                }
            }

        } else {
            $boolContinue = false;
        }

        // </editor-fold>
    } elseif ($invoiceId != 'NULL' && $source == 'INVOICE SALES') {
        // <editor-fold defaultstate="collapsed" desc="invoiceDetail">

        $sql = "DELETE FROM general_ledger WHERE invoice_id = {$invoiceId} AND general_ledger_module = 'INVOICE SALES'";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "SELECT a.*, g.`account_no` FROM invoice_sales a
LEFT JOIN pengajuan_sales b ON a.`inv_notim_id` = b.`inv_notim_id`
LEFT JOIN TRANSACTION c ON c.`transaction_id` = b.`transaction_id`
LEFT JOIN shipment e ON e.`shipment_id` = c.`shipment_id`
LEFT JOIN sales f ON f.`sales_id` = e.`sales_id`
LEFT JOIN account g ON g.`account_id` = f.`account_id`
WHERE a.`inv_notim_id` = {$invoiceId}
GROUP BY a.`inv_notim_id`";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();

            $sqlAccountSales = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (230100, 120000 ,'{$row->account_no}')";
                        $resultAccountSales = $myDatabase->query($sqlAccountSales, MYSQLI_STORE_RESULT);

                        if ($resultAccountSales !== false && $resultAccountSales->num_rows > 0) {
                            while ($rowAccountSales = $resultAccountSales->fetch_object()) {
                                if ($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if ($rowAccountSales->account_no == $row->account_no) {
                                    
                                        $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id}, 0, {$rowAccountSales->account_id}, NULL, {$row->dpp})";
                                    

                                } elseif ($rowAccountSales->account_no == 120000) {

                                    $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountSales->account_id}, NULL, {$row->amount_converted})";

                                } elseif ($rowAccountSales->account_no == 230100) {

                                    $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountSales->account_id}, NULL, {$row->total_ppn})";

                                }
                            }
                        }
						
						$sql8a = "SELECT a.*,t.*, t.transaction_id AS tr_id
FROM pengajuan_sales a
LEFT JOIN TRANSACTION t ON t.`transaction_id` = a.`transaction_id`
WHERE a.`inv_notim_id` = {$invoiceId}";
                $result8a = $myDatabase->query($sql8a, MYSQLI_STORE_RESULT);

                if ($result8a !== false && $result8a->num_rows >= 0) {
                    while ($row8a = $result8a->fetch_object()) {
							$tr_id =$row8a->tr_id;
								
						
					$totalCogsPrice = 0;
                    $totalCogsShrink = 0;
                    $totalCogsFC = 0;
                    $totalCogsUC = 0;
                    $totalCogsStock = 0;
					$total_pks2 = 0;
					$total_pks = 0;
					$total_fc = 0;
					$total_uc = 0;
					$total_hc = 0;
					$totalGoods = 0;
					
                    $sqlCogs = "SELECT d.*, c.price_converted, t.shrink, t.freight_quantity, t.freight_price, t.unloading_price, t.handling_quantity, vhc.price_converted,
			f.ppn_tax_id AS fc_ppn_tax_id, f.ppn AS fc_ppn, fctxppn.tax_category AS fc_ppn_tax_category, t2.shrink,
            f.pph_tax_id AS fc_pph_tax_id, f.pph AS fc_pph, fctxpph.tax_category AS fc_pph_tax_category,
            l.ppn_tax_id AS uc_ppn_tax_id, l.ppn AS uc_ppn, uctxppn.tax_category AS uc_ppn_tax_category,
            l.pph_tax_id AS uc_pph_tax_id, l.pph AS uc_pph, uctxpph.tax_category AS uc_pph_tax_category,
			vh.ppn_tax_id AS vh_ppn_tax_id, vh.ppn AS vh_ppn, vhtxppn.tax_category AS vh_ppn_tax_category,
            vh.pph_tax_id AS vh_pph_tax_id, vh.pph AS vh_pph, vhtxpph.tax_category AS vh_pph_tax_category,
			CASE WHEN t.mutasi_id IS NOT NULL AND t.mutasi_id <> 0 THEN d.quantity * t.unit_cost
			WHEN t.adjustmentAudit_id IS NOT NULL THEN d.quantity * t.unit_price
			ELSE d.quantity * c.price_converted END AS cogs_amount,
			CASE WHEN t.delivery_status = 2 THEN (d.percent_taken / 100) * (t.freight_quantity * t.freight_price)
			ELSE (d.percent_taken / 100) * (t.freight_quantity * t.freight_price) END AS freight_total,
			CASE WHEN t.delivery_status = 2 AND t.freight_cost_id IS NOT NULL THEN (d.quantity/t.freight_quantity) * COALESCE((SELECT amt_claim FROM transaction_shrink_weight WHERE transaction_id = d.transaction_id),0)
	    WHEN t.freight_cost_id IS NOT NULL THEN (d.percent_taken / 100) * COALESCE((SELECT amt_claim FROM transaction_shrink_weight WHERE transaction_id = d.transaction_id),0) ELSE 0 END AS freight_shrink,
			(d.percent_taken / 100) * t.unloading_price AS unloading_total, sh.shipment_code, (d.percent_taken / 100) * (t.handling_quantity * vhc.price_converted) AS handling_total, t2.quantity AS bl
            FROM `transaction` t2
                LEFT JOIN `delivery` d 
                    ON d.shipment_id = t2.shipment_id
				LEFT JOIN shipment sh
					ON d.shipment_id = sh.shipment_id
                LEFT JOIN `transaction` t
                    ON t.transaction_id = d.transaction_id
                LEFT JOIN stockpile_contract sc
					ON sc.`stockpile_contract_id` = t.`stockpile_contract_id`
			    LEFT JOIN contract c
					ON c.`contract_id` = sc.`contract_id`
			    LEFT JOIN freight_cost fc
					ON fc.`freight_cost_id` = t.`freight_cost_id`
			    LEFT JOIN freight f
					ON fc.`freight_id` = f.`freight_id`
			    LEFT JOIN labor l
					ON l.`labor_id` = t.`labor_id`
			    LEFT JOIN tax fctxpph
					ON fctxpph.tax_id = f.pph_tax_id
			    LEFT JOIN tax fctxppn
					ON fctxppn.tax_id = f.ppn_tax_id
			    LEFT JOIN tax uctxpph
			        ON uctxpph.tax_id = l.pph_tax_id
			    LEFT JOIN tax uctxppn
					ON uctxppn.tax_id = l.ppn_tax_id
				LEFT JOIN vendor_handling_cost vhc
					ON vhc.handling_cost_id = t.handling_cost_id
				LEFT JOIN vendor_handling vh
					ON vh.vendor_handling_id = vhc.vendor_handling_id
				LEFT JOIN tax vhtxpph
					ON vhtxpph.tax_id = vh.pph_tax_id
				LEFT JOIN tax vhtxppn
					ON vhtxppn.tax_id = vh.ppn_tax_id
				
                WHERE t2.transaction_id =  {$tr_id}";
                    $resultCogs = $myDatabase->query($sqlCogs, MYSQLI_STORE_RESULT);

                    if ($resultCogs !== false && $resultCogs->num_rows > 0) {
                        while ($rowCogs = $resultCogs->fetch_object()) {

                            $shipmentCode11 = $rowCogs->shipment_code;
                            $shipmentCode12 = '-S-';
                            $pos12 = strpos($shipmentCode11, $shipmentCode12);

                            if ($rowCogs->fc_pph_tax_category == 1 && $rowCogs->fc_pph_tax_id != '') {
                                $pphfc2 = ($rowCogs->freight_total / ((100 - $rowCogs->fc_pph) / 100)) - $rowCogs->freight_total;
                                $pphfcShrink2 = ($rowCogs->freight_shrink / ((100 - $rowCogs->fc_pph) / 100)) - $rowCogs->freight_shrink;

                            } elseif ($rowCogs->fc_pph_tax_category == 0 && $rowCogs->fc_pph_tax_id != '') {
                                $pphfc2 = 0;
                                $pphfcShrink2 = 0;
                                //$pphfc =  $row->freight_total - ($row->freight_total * ((100 - $fc_pph) / 100));
                            } else {
                                $pphfc2 = 0;
                                $pphfcShrink2 = 0;
                            }

                            $freightTotal2 = ($rowCogs->freight_total + $ppnfc2 + $pphfc2) - ($rowCogs->freight_shrink + $pphfcShrink2);

                            if ($rowCogs->vh_pph_tax_category == 1 && $rowCogs->vh_pph_tax_id != '') {
                                $pphvh2 = ($rowCogs->handling_total / ((100 - $rowCogs->vh_pph) / 100)) - $rowCogs->handling_total;

                            } elseif ($rowCogs->vh_pph_tax_category == 0 && $rowCogs->vh_pph_tax_id != '') {
                                $pphvh2 = 0;
                                //$pphfc =  $row->freight_total - ($row->freight_total * ((100 - $fc_pph) / 100));
                            } else {
                                $pphvh2 = 0;
                            }

                            $handlingTotal2 = $rowCogs->handling_total + $pphvh2;

                            if ($rowCogs->uc_pph_tax_category == 1 && $rowCogs->uc_pph_tax_id != '') {
                                $pphuc2 = ($rowCogs->unloading_total / ((100 - $rowCogs->uc_pph) / 100)) - $rowCogs->unloading_total;

                            } elseif ($rowCogs->uc_pph_tax_category == 0 && $rowCogs->uc_pph_tax_id != '') {
                                $pphuc2 = 0;
                                //$pphuc =  $row->unloading_total - ($row->unloading_total * ((100 - $row->uc_pph) / 100));
                            } else {
                                $pphuc2 = 0;
                            }

                            $unloadingTotal2 = $rowCogs->unloading_total + $ppnuc2 + $pphuc2;

                            $totalCogs2 = $rowCogs->cogs_amount + $freightTotal2 + $unloadingTotal2 + $handlingTotal2;

                            $quantity_total = $rowCogs->quantity;
                            $total_quantity = $quantity_total + $total_quantity;

                            $pks_total = $rowCogs->cogs_amount;
							//$total_pks = 0;
                            $total_pks = $pks_total + $total_pks;

                            $fc_total = $freightTotal2;
                            $total_fc = $fc_total + $total_fc;

                            $uc_total = $unloadingTotal2;
                            $total_uc = $uc_total + $total_uc;

                            $hc_total = $handlingTotal2;
                            $total_hc = $hc_total + $total_hc;

                            $cogs_total = $totalCogs2;
                            $total_cogs = $cogs_total + $total_cogs;

                            $shrink = 0;
                            $total_pks2 = $total_pks - $shrink;

                            $qty = $rowCogs->bl;
							$tId = $rowCogs->transaction_id;
							$totalGoods = $total_pks2 + $total_fc + $total_uc + $total_hc;
							
							

                        }
                    }
					
					
					
					
	
					
					$sqlAccountDP = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (510101, 510102,510103 ,510104,160100)";
                        $resultAccountDP = $myDatabase->query($sqlAccountDP, MYSQLI_STORE_RESULT);

                        if ($resultAccountDP !== false && $resultAccountDP->num_rows > 0) {
                            while ($rowAccountDP = $resultAccountDP->fetch_object()) {
                                if ($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if ($rowAccountDP->account_no == 510101) {
                                    
                                        $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$tId}, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$total_pks2})";
                                    

                                } elseif ($rowAccountDP->account_no == 510102) {

                                    $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$tId}, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$total_fc})";

                                } elseif ($rowAccountDP->account_no == 510103) {

                                    $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$tId}, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$total_uc})";

                                }elseif ($rowAccountDP->account_no == 510104) {

                                    $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$tId}, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$total_hc})";

                                }elseif ($rowAccountDP->account_no == 160100) {

                                    $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$tId}, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$totalGoods})";

                                }
                            }
                        }
				
				}
				}	
          

						
						$sql8 = "SELECT a.*,t.*, t.transaction_id AS tr_id
FROM pengajuan_sales a
LEFT JOIN TRANSACTION t ON t.`transaction_id` = a.`transaction_id`
WHERE a.`inv_notim_id` = {$invoiceId}";
                $result8 = $myDatabase->query($sql8, MYSQLI_STORE_RESULT);

                if ($result8 !== false && $result8->num_rows >= 0) {
                    while ($row8 = $result8->fetch_object()) {
						
					

                
                        
						$tId = $row8->transaction_id;
						$pks_amount =  $row8->unit_price * $row8->qty;
						$oa_amount = $row8->freight_quantity * $row8->freight_price;

                        $sqlAccountDP = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (510105,160200)";
                        $resultAccountDP = $myDatabase->query($sqlAccountDP, MYSQLI_STORE_RESULT);

                        if ($resultAccountDP !== false && $resultAccountDP->num_rows > 0) {
                            while ($rowAccountDP = $resultAccountDP->fetch_object()) {
                                if ($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                /*if ($rowAccountDP->account_no == 510101) {
                                    
                                        $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$tId}, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$pks_amount})";
                                    

                                } else*/if ($rowAccountDP->account_no == 510105) {

                                    $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$tId}, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$oa_amount})";

                                }elseif ($rowAccountDP->account_no == 160200) {

                                    $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$tId}, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$oa_amount})";

                                }
                            }
                        }
                    }
                } else {
                    $boolContinue = false;

                    echo 'FALSE3';
                    //echo $gvId;

                }
            



        } else {
            $boolContinue = false;
        }

        // </editor-fold>
    } elseif ($invoiceId != 'NULL' && $source == 'RETURN INVOICE SALES') {
        // <editor-fold defaultstate="collapsed" desc="invoiceDetail">

        $sql = "DELETE FROM general_ledger WHERE invoice_id = {$invoiceId} AND general_ledger_module = 'RETURN INVOICE SALES'";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "SELECT a.*, g.`account_no` FROM invoice_sales a
LEFT JOIN pengajuan_sales b ON a.`inv_notim_id` = b.`inv_notim_id`
LEFT JOIN TRANSACTION c ON c.`transaction_id` = b.`transaction_id`
LEFT JOIN shipment e ON e.`shipment_id` = c.`shipment_id`
LEFT JOIN sales f ON f.`sales_id` = e.`sales_id`
LEFT JOIN account g ON g.`account_id` = f.`account_id`
WHERE a.`inv_notim_id` = {$invoiceId}
GROUP BY a.`inv_notim_id`";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();

            $sqlAccountSales = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (230100, 120000 ,'{$row->account_no}')";
                        $resultAccountSales = $myDatabase->query($sqlAccountSales, MYSQLI_STORE_RESULT);

                        if ($resultAccountSales !== false && $resultAccountSales->num_rows > 0) {
                            while ($rowAccountSales = $resultAccountSales->fetch_object()) {
                                if ($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if ($rowAccountSales->account_no == $row->account_no) {
                                    
                                        $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountSales->account_id}, NULL, {$row->dpp})";
                                    

                                } elseif ($rowAccountSales->account_no == 120000) {

                                    $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountSales->account_id}, NULL, {$row->amount_converted})";

                                } elseif ($rowAccountSales->account_no == 230100) {

                                    $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountSales->account_id}, NULL, {$row->total_ppn})";

                                }
                            }
                        }

          


                $sql8 = "SELECT a.*,t.*
FROM pengajuan_sales a
LEFT JOIN TRANSACTION t ON t.`transaction_id` = a.`transaction_id`
WHERE a.`inv_notim_id` = {$invoiceId}";
                $result8 = $myDatabase->query($sql8, MYSQLI_STORE_RESULT);

                if ($result8 !== false && $result8->num_rows >= 0) {
                    while ($row8 = $result8->fetch_object()) {
                        
						$tId = $row8->transaction_id;
						$pks_amount =  $row8->unit_price * $row8->qty;
						$oa_amount = $row8->freight_quantity * $row8->freight_price;

                        $sqlAccountDP = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (510102, 160100,160200 ,510101)";
                        $resultAccountDP = $myDatabase->query($sqlAccountDP, MYSQLI_STORE_RESULT);

                        if ($resultAccountDP !== false && $resultAccountDP->num_rows > 0) {
                            while ($rowAccountDP = $resultAccountDP->fetch_object()) {
                                if ($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if ($rowAccountDP->account_no == 510101) {
                                    
                                        $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$tId}, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$pks_amount})";
                                    

                                } elseif ($rowAccountDP->account_no == 160100) {

                                    $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$tId}, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$pks_amount})";

                                } elseif ($rowAccountDP->account_no == 510102) {

                                    $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$tId}, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$oa_amount})";

                                }elseif ($rowAccountDP->account_no == 160200) {

                                    $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$tId}, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$oa_amount})";

                                }
                            }
                        }
                    }
                } else {
                    $boolContinue = false;

                    echo 'FALSE3';
                    //echo $gvId;

                }
            



        } else {
            $boolContinue = false;
        }

        // </editor-fold>
    }elseif ($invoiceId != 'NULL' && $source == 'INVOICE SALES OA') {
        // <editor-fold defaultstate="collapsed" desc="invoiceDetail">

        $sql = "DELETE FROM general_ledger WHERE invoice_id = {$invoiceId} AND general_ledger_module = 'INVOICE SALES OA'";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
          

                $sql8 = "SELECT a.*,t.*
FROM pengajuan_sales_oa a
LEFT JOIN TRANSACTION t ON t.`transaction_id` = a.`transaction_id`
WHERE a.`inv_notim_id` = {$invoiceId}";
                $result8 = $myDatabase->query($sql8, MYSQLI_STORE_RESULT);

                if ($result8 !== false && $result8->num_rows >= 0) {
                    while ($row8 = $result8->fetch_object()) {
                        
						$tId = $row8->transaction_id;
						$pks_amount = $row8->total_amount;
						$oa_amount = $row8->freight_quantity * $row8->freight_price;

                        $sqlAccountDP = "SELECT account_id, account_no,account_name FROM account WHERE account_type = 2 AND account_no IN (210108)";
                        $resultAccountDP = $myDatabase->query($sqlAccountDP, MYSQLI_STORE_RESULT);

                        if ($resultAccountDP !== false && $resultAccountDP->num_rows > 0) {
                            while ($rowAccountDP = $resultAccountDP->fetch_object()) {
                                if ($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if ($rowAccountDP->account_no == 210108) {
                                    
                                        $insertValues .= "(1, '{$source}', NULL, 2, 16, {$contractId}, {$invoiceId}, {$transactionId}, {$tId}, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$oa_amount})";
                                    

                                } 
                            }
                        }
                    }
                } else {
                    $boolContinue = false;

                    echo 'FALSE3';
                    //echo $gvId;

                }
				 $sql = "SELECT a.*, b.pph_tax_id,d.account_no FROM invoice_sales_oa a 
LEFT JOIN freight_local_sales b ON b.freight_id = a.`freightId` 
LEFT JOIN tax c ON c.tax_id = b.pph_tax_id
LEFT JOIN account d ON d.account_id = c.account_id
WHERE a.`inv_notim_id` = {$invoiceId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();

            $sqlAccountSales = "SELECT account_id, account_no,account_name FROM account WHERE account_type = 2 AND account_no IN (210103, 150410 ,'{$row->account_no}')";
                        $resultAccountSales = $myDatabase->query($sqlAccountSales, MYSQLI_STORE_RESULT);

                        if ($resultAccountSales !== false && $resultAccountSales->num_rows > 0) {
                            while ($rowAccountSales = $resultAccountSales->fetch_object()) {
                                if ($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if ($rowAccountSales->account_no == $row->account_no) {
                                    
                                        $insertValues .= "(2, '{$source}', NULL, 2, 16, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountSales->account_id}, NULL, {$row->total_pph})";
                                    

                                } elseif ($rowAccountSales->account_no == 150410) {

                                    $insertValues .= "(1, '{$source}', NULL, 2, 16, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountSales->account_id}, NULL, {$row->total_ppn})";

                                } elseif ($rowAccountSales->account_no == 210103) {

                                    $insertValues .= "(2, '{$source}', NULL, 2, 16, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountSales->account_id}, NULL, {$row->amount_converted})";

                                }
                            }
                        }
            



        } else {
            $boolContinue = false;
        }

        // </editor-fold>
    }elseif ($invoiceId != 'NULL' && $source == 'RETURN INVOICE SALES OA') {
        // <editor-fold defaultstate="collapsed" desc="invoiceDetail">

        $sql = "DELETE FROM general_ledger WHERE invoice_id = {$invoiceId} AND general_ledger_module = 'RETURN INVOICE SALES OA'";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
          

                $sql8 = "SELECT a.*,t.*
FROM pengajuan_sales_oa a
LEFT JOIN TRANSACTION t ON t.`transaction_id` = a.`transaction_id`
WHERE a.`inv_notim_id` = {$invoiceId}";
                $result8 = $myDatabase->query($sql8, MYSQLI_STORE_RESULT);

                if ($result8 !== false && $result8->num_rows >= 0) {
                    while ($row8 = $result8->fetch_object()) {
                        
						$tId = $row8->transaction_id;
						$pks_amount = $row8->total_amount;
						$oa_amount = $row8->freight_quantity * $row8->freight_price;

                        $sqlAccountDP = "SELECT account_id, account_no,account_name FROM account WHERE account_type = 2 AND account_no IN (210108)";
                        $resultAccountDP = $myDatabase->query($sqlAccountDP, MYSQLI_STORE_RESULT);

                        if ($resultAccountDP !== false && $resultAccountDP->num_rows > 0) {
                            while ($rowAccountDP = $resultAccountDP->fetch_object()) {
                                if ($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if ($rowAccountDP->account_no == 210108) {
                                    
                                        $insertValues .= "(2, '{$source}', NULL, 2, 16, {$contractId}, {$invoiceId}, {$transactionId}, {$tId}, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$oa_amount})";
                                    

                                } 
                            }
                        }
                    }
                } else {
                    $boolContinue = false;

                    echo 'FALSE3';
                    //echo $gvId;

                }
				 $sql = "SELECT a.*, b.pph_tax_id,d.account_no FROM invoice_sales_oa a 
LEFT JOIN freight_local_sales b ON b.freight_id = a.`freightId` 
LEFT JOIN tax c ON c.tax_id = b.pph_tax_id
LEFT JOIN account d ON d.account_id = c.account_id
WHERE a.`inv_notim_id` = {$invoiceId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();

            $sqlAccountSales = "SELECT account_id, account_no,account_name FROM account WHERE account_type = 2 AND account_no IN (210103, 150410 ,'{$row->account_no}')";
                        $resultAccountSales = $myDatabase->query($sqlAccountSales, MYSQLI_STORE_RESULT);

                        if ($resultAccountSales !== false && $resultAccountSales->num_rows > 0) {
                            while ($rowAccountSales = $resultAccountSales->fetch_object()) {
                                if ($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if ($rowAccountSales->account_no == $row->account_no) {
                                    
                                        $insertValues .= "(1, '{$source}', NULL, 2, 16, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountSales->account_id}, NULL, {$row->total_pph})";
                                    

                                } elseif ($rowAccountSales->account_no == 150410) {

                                    $insertValues .= "(2, '{$source}', NULL, 2, 16, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountSales->account_id}, NULL, {$row->total_ppn})";

                                } elseif ($rowAccountSales->account_no == 210103) {

                                    $insertValues .= "(1, '{$source}', NULL, 2, 16, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  {$i_id}, 0, {$rowAccountSales->account_id}, NULL, {$row->amount_converted})";

                                }
                            }
                        }
            



        } else {
            $boolContinue = false;
        }

        // </editor-fold>
    }elseif ($transactionId != 'NULL' && $source == 'NOTA TIMBANG2') {

        $sql = "DELETE FROM general_ledger WHERE account_id IN (8,52,147) AND transaction_id = {$transactionId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "SELECT t.*, con.contract_type, fc.freight_id, a.`account_no` AS sales_account, sl.`price_converted` AS sales_price_converted
,sh.`shipment_code`, cust.ppn AS ppn_buyer, sl.price, sl.exchange_rate, f.freight_rule, vh.vendor_handling_rule
					FROM `transaction` t 
					LEFT JOIN stockpile_contract sc
						ON sc.stockpile_contract_id = t.stockpile_contract_id
					LEFT JOIN contract con
						ON con.contract_id = sc.contract_id
					LEFT JOIN freight_cost fc
						ON t.`freight_cost_id` = fc.`freight_cost_id`
					LEFT JOIN shipment sh
						ON t.`shipment_id` = sh.`shipment_id`
					LEFT JOIN sales sl
						ON sh.`sales_id` = sl.`sales_id`
					LEFT JOIN customer cust
						ON sl.`customer_id` = cust.`customer_id`
					LEFT JOIN account a
						ON sl.`account_id` = a.`account_id`
					LEFT JOIN freight f
						ON fc.freight_id = f.freight_id
					LEFT JOIN vendor_handling_cost vhc
						ON vhc.handling_cost_id = t.handling_cost_id
					LEFT JOIN vendor_handling vh
						ON vh.vendor_handling_id = vhc.vendor_handling_id
					WHERE t.transaction_id = {$transactionId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();

            if ($row->contract_type == 'P') {
                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (140000, 520100, 130100)";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while ($rowAccount = $resultAccount->fetch_object()) {
                        if ($insertValues != "") {
                            $insertValues .= ", ";
                        }
                        if ($rowAccount->account_no == 140000) {
                            if ($row->netto_weight < $row->send_weight) {
                                $amount = $row->quantity * $row->unit_price;
                            } else {
                                $amount = $row->send_weight * $row->unit_price;
                            }
                            if ($row->send_weight < 0) {
                                $amount1 = $amount * -1;
                                $insertValues .= "(2, 'NOTA TIMBANG', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                            } else {
                                $insertValues .= "(1, 'NOTA TIMBANG', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                            }
                        } elseif ($rowAccount->account_no == 520100) {
                            if ($row->netto_weight < $row->send_weight) {
                                $amount = $row->shrink * $row->unit_price;
                            } else {
                                $amount = 0;
                            }
                            if ($row->send_weight < 0) {
                                $amount1 = $amount * -1;
                                $insertValues .= "(2, 'NOTA TIMBANG', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                            } else {
                                $insertValues .= "(1, 'NOTA TIMBANG', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                            }
                        } elseif ($rowAccount->account_no == 130100) {
                            $amount = $row->send_weight * $row->unit_price;
                            if ($row->send_weight < 0) {
                                $amount1 = $amount * -1;
                                $insertValues .= "(1, 'NOTA TIMBANG', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                            } else {
                                $insertValues .= "(2, 'NOTA TIMBANG', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                            }
                        }
                    }
                } else {
                    $boolContinue = false;
                }
            }

        } else {
            $boolContinue = false;
        }

    } elseif ($transactionId != 'NULL') {
        // <editor-fold defaultstate="collapsed" desc="transaction">
        /*if($transactionId != 257943){
		$sqlCek = "SELECT transaction_type FROM `transaction` WHERE transaction_id = {$transactionId}";
		$resultCek = $myDatabase->query($sqlCek, MYSQLI_STORE_RESULT);
        if($resultCek !== false && $resultCek->num_rows == 1) {
            $rowCek = $resultCek->fetch_object();

		if($rowCek->transaction_type != 2){*/
        $sql = "DELETE FROM general_ledger WHERE transaction_id = {$transactionId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        //}
        //}
        //}
        echo 'a';
        $aFreight = '';
        $aHandling = '';
        $sql = "SELECT t.*, con.contract_type, fc.freight_id, a.`account_no` AS sales_account, sl.`price_converted` AS sales_price_converted
,sh.`shipment_code`, cust.ppn AS ppn_buyer, sl.price, sl.exchange_rate, f.freight_rule, vh.vendor_handling_rule,sl.`sales_status`,
af.`account_no` AS aFreight, ah.`account_no` AS aHandling,con.`return_shipment`, con.`contract_id`,au.`account_no` AS aUnloading,sl.`sales_type`, con.qty_rule, con.quantity_rule, sl.`localSales`
					FROM `transaction` t 
					LEFT JOIN stockpile_contract sc
						ON sc.stockpile_contract_id = t.stockpile_contract_id
					LEFT JOIN contract con
						ON con.contract_id = sc.contract_id
					LEFT JOIN freight_cost fc
						ON t.`freight_cost_id` = fc.`freight_cost_id`
					LEFT JOIN shipment sh
						ON t.`shipment_id` = sh.`shipment_id`
					LEFT JOIN sales sl
						ON sh.`sales_id` = sl.`sales_id`
					LEFT JOIN customer cust
						ON sl.`customer_id` = cust.`customer_id`
					LEFT JOIN account a
						ON sl.`account_id` = a.`account_id`
					LEFT JOIN freight f
						ON fc.freight_id = f.freight_id
					LEFT JOIN vendor_handling_cost vhc
						ON vhc.handling_cost_id = t.handling_cost_id
					LEFT JOIN vendor_handling vh
						ON vh.vendor_handling_id = vhc.vendor_handling_id
					LEFT JOIN tax ftx ON ftx.`tax_id` = t.`fc_tax_id`
					LEFT JOIN account af ON af.`account_id` = ftx.`account_id`
					LEFT JOIN tax htx ON htx.`tax_id` = vh.`pph_tax_id`
					LEFT JOIN account ah ON ah.`account_id` = htx.`account_id`
					LEFT JOIN labor l ON l.`labor_id` = t.`labor_id`
					LEFT JOIN tax utx ON utx.`tax_id` = t.`uc_tax_id`
					LEFT JOIN account au ON au.`account_id` = utx.`account_id`
					WHERE t.transaction_id = {$transactionId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();

            if ($row->adjustmentAudit_id != '' && $row->adjustmentAudit_id != 'NULL' && $row->adjustmentAudit_id != 0) {
                //$totalCogsPrice = 0;
                $totalCogsHandling = 0;
                $totalCogsFC = 0;
                $totalCogsUC = 0;
                $totalCogsStock = 0;
                $sqlCogs1 = "SELECT SUM(a.cogs_pks) AS cogs_pks, SUM(a.cogs_oa) AS cogs_oa, SUM(a.cogs_ob) AS cogs_ob, SUM(a.cogs_handling) AS cogs_handling, SUM(a.total_amount) AS total_amount FROM adjustment_audit_qty a WHERE a.`audit_id` =  {$row->adjustmentAudit_id}";
                $resultCogs1 = $myDatabase->query($sqlCogs1, MYSQLI_STORE_RESULT);

                if ($resultCogs1 !== false && $resultCogs1->num_rows > 0) {
                    while ($rowCogs1 = $resultCogs1->fetch_object()) {

                        $totalCogsHandling = $rowCogs1->cogs_handling;
                        $totalCogsFC = $rowCogs1->cogs_oa;
                        $totalCogsUC = $rowCogs1->cogs_ob;
                        $totalCogsStock = $rowCogs1->cogs_pks;
                        $totalCogs = $rowCogs1->total_amount;

                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (510101, 510102, 510103, 510104, 140000)";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                        if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while ($rowAccount = $resultAccount->fetch_object()) {
                                if ($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if ($rowAccount->account_no == 510101) {
                                    if ($row->send_weight < 0) {
                                        //$total_pks21 = $total_pks2 * -1;
                                        $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogsStock})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogsStock})";
                                    }
                                } /*elseif($rowAccount->account_no == 510201) {
							if($qty < 0){
								//$shrink1 = $shrink * -1;
                            $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$shrink})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$shrink})";
							}
                        } */ elseif ($rowAccount->account_no == 510102) {
                                    if ($row->send_weight < 0) {
                                        //$total_fc1 = $total_fc * -1;
                                        $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogsFC})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogsFC})";
                                    }
                                } elseif ($rowAccount->account_no == 510103) {
                                    if ($row->send_weight < 0) {
                                        //$total_uc1 = $total_uc * -1;
                                        $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogsUC})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogsUC})";
                                    }
                                } elseif ($rowAccount->account_no == 510104) {
                                    if ($row->send_weight < 0) {
                                        //$total_hc1 = $total_hc * -1;
                                        $insertValues .= "(1, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogsHandling})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogsHandling})";
                                    }
                                } elseif ($rowAccount->account_no == 140000) {
                                    if ($row->send_weight < 0) {
                                        //$total_cogs1 = $total_cogs * -1;
                                        $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogs})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogs})";
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }

                    }
                } else {
                    echo 'mm';
                }

            } elseif ($row->stock_transit_id != 0 && $row->stock_transit_id != 'NULL' && $row->stock_transit_id != '') {


                $amt_stock = $row->unit_cost * $row->netto_weight;
                $amt_stock_transit = $row->unit_cost * $row->netto_weight;


                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (141000, 140000)";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while ($rowAccount = $resultAccount->fetch_object()) {
                        if ($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if ($rowAccount->account_no == 140000) {
                            if ($row->send_weight < 0) {
                                $amt_stock1 = $amt_stock * -1;
                                $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amt_stock1})";
                            } else {
                                $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amt_stock})";
                            }

                        } elseif ($rowAccount->account_no == 141000) {
                            if ($row->send_weight < 0) {
                                $amt_stock_transit1 = $amt_stock_transit * -1;
                                $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amt_stock_transit1})";
                            } else {

                                $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amt_stock_transit})";
                            }
                        }
                    }
                } else {
                    $boolContinue = false;
                }


            } else {

                if ($row->transaction_type == 1) {
                    $aFreight = $row->aFreight;
                    $aHandling = $row->aHandling;
                    $aUnloading = $row->aUnloading;
                    // <editor-fold defaultstate="collapsed" desc="nota timbang">

                    if ($row->contract_type == 'P') {
                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_id in (8,52,147) AND account_no in (140000, 520100, 130100)";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                        if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while ($rowAccount = $resultAccount->fetch_object()) {
                                if ($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                /*if($rowAccount->account_no == 140000) {
                                if($row->netto_weight < $row->send_weight) {
                                    $amount = $row->quantity * $row->unit_price;
                                } else {
                                    $amount = $row->send_weight * $row->unit_price;
                                }
                                $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                            } elseif($rowAccount->account_no == 520100) {
                                if($row->netto_weight < $row->send_weight) {
                                    $amount = $row->shrink * $row->unit_price;
                                } else {
                                    $amount = 0;
                                }
                                $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                            } elseif($rowAccount->account_no == 130100) {
                                $amount = $row->send_weight * $row->unit_price;
                                $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                            }*/
                                if ($rowAccount->account_no == 140000) {
                                    echo($row->unit_price * $row->quantity);
                                    if ($row->netto_weight < $row->send_weight) {
                                        $amount = $row->quantity * $row->unit_price;
                                    } else {
                                        $amount = $row->send_weight * $row->unit_price;
                                    }
                                    if ($row->send_weight < 0) {
                                        $amount1 = ($row->quantity * $row->unit_price) * -1;
                                        $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                    }
                                } elseif ($rowAccount->account_no == 520100) {
                                    if ($row->netto_weight < $row->send_weight) {
                                        $amount = $row->shrink * $row->unit_price;
                                    } else {
                                        $amount = 0;
                                    }
                                    if ($row->send_weight < 0) {
                                        $amount1 = ($row->shrink * $row->unit_price) * -1;
                                        $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                    }
                                } elseif ($rowAccount->account_no == 130100) {
                                    $amount = $row->send_weight * $row->unit_price;
                                    if ($row->send_weight < 0) {
                                        $amount1 = $amount * -1;
                                        $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                            echo 'b';
                        }
                    } elseif ($row->contract_type == 'C') {

                        if ($row->return_shipment == 0) {
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_id in (8,27,52) AND account_no in (140000, 210101,520100)";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                            if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                                $amount = $row->quantity * $row->unit_price;
                                $amountOA = $row->freight_quantity * $row->freight_price;
                                $amountOB = $row->unloading_price;
                                $amountHandling = $row->handling_quantity * $row->handling_price;
								$amountc = $row->send_weight * $row->unit_price;
								if($row->quantity_rule == 1){
									$amountc = $row->send_weight * $row->unit_price;
									$susutc = 0;
								}else{
									//$amountc = $row->quantity * $row->unit_price;
									$susutc = $amountc - $amount;
								}

                                while ($rowAccount = $resultAccount->fetch_object()) {
                                    if ($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    /*if($rowAccount->account_no == 140000) { gggg
                                $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                            } elseif($rowAccount->account_no == 210101) {
                                $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                            }*/
                                    if ($rowAccount->account_no == 140000) {
                                        if ($row->send_weight < 0) {
                                            $amount1 = $amount * -1;
                                            $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                        } else {
                                            $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                        }
                                    } if ($rowAccount->account_no == 520100) {
                                        if ($row->send_weight < 0) {
                                            $susutc1 = $susutc * -1;
                                            $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$susutc1})";
                                        } else {
                                            $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$susutc})";
                                        }
                                    }elseif ($rowAccount->account_no == 210101) {
                                        if ($row->send_weight < 0) {
                                            $amountc1 = $amountc * -1;
                                            $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountc1})";
                                        } else {
                                            $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountc})";
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                                echo 'c';
                            }

                        } else {

                            $sqlA = "SELECT sl.*, a.account_no AS shipmentAccount, cust.`ppn` AS ppn_buyer  FROM account a
							LEFT JOIN sales sl ON a.`account_id` = sl.`account_id`
							LEFT JOIN shipment sh ON sh.`sales_id` = sl.`sales_id`
							LEFT JOIN contract c ON c.`return_shipment_id` = sh.`shipment_id`
							LEFT JOIN customer cust ON cust.`customer_id` = sl.`customer_id`
							WHERE c.`contract_id` = {$row->contract_id}
							LIMIT 1";
                            $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                            if ($resultA !== false && $resultA->num_rows > 0) {
                                $rowA = $resultA->fetch_object();
                                $shipmentAccount = $rowA->shipmentAccount;
                                $newSalesPriceA = round($rowA->price * $row->send_weight, 2);
                                $newSalesPriceB = round($newSalesPriceA * $rowA->exchange_rate, 0);
                                //$salesPrice = $row->quantity * $row->sales_price_converted;
                                $taxValueA = ($rowA->ppn_buyer / 100 * $newSalesPriceB);
                                $totalSalesPriceA = $newSalesPriceB + $taxValueA;
                            }

                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (0,1) AND account_no in (120000, 230100, {$shipmentAccount}) GROUP BY account_no";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                                while ($rowAccount = $resultAccount->fetch_object()) {

                                    if ($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if ($rowAccount->account_no == 120000) {
                                        if ($row->quantity < 0) {
                                            $totalSalesPrice11 = $totalSalesPriceA * -1;
                                            $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalSalesPrice11})";
                                        } else {
                                            $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalSalesPriceA})";
                                        }
                                    } elseif ($rowAccount->account_no == 230100) {
                                        if ($row->quantity < 0) {
                                            $taxValue11 = $taxValueA * -1;
                                            $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$taxValue11})";
                                        } else {
                                            $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$taxValueA})";
                                        }
                                    } elseif ($rowAccount->account_no == $shipmentAccount) {
                                        if ($row->quantity < 0) {
                                            $newSalesPriceB1 = $newSalesPriceB * -1;
                                            $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$newSalesPriceB1})";
                                        } else {
                                            $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$newSalesPriceB})";
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                            }

                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (510101, 510102, 510103, 510104, 140000)";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                            if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                                while ($rowAccount = $resultAccount->fetch_object()) {
                                    if ($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if ($rowAccount->account_no == 510101) {
                                        if ($row->send_weight < 0) {
                                            $amount1 = $amount * -1;
                                            $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amount1})";
                                        } else {
                                            $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amount})";
                                        }
                                    } /*elseif($rowAccount->account_no == 510102) {
							if($row->send_weight < 0){
								$amountOA1 = $amountOA * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountOA1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountOA})";
							}
                        } elseif($rowAccount->account_no == 510103) {
							if($row->send_weight < 0){
								$amountOB1 = $amountOB * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountOB1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountOB})";
							}
                        } elseif($rowAccount->account_no == 510104) {
							if($row->send_weight < 0){
								$amountHandling1 = $amountHandling * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountHandling1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountHandling})";
							}
                        }*/ elseif ($rowAccount->account_no == 140000) {
                                        if ($row->send_weight < 0) {
                                            $amount1 = $amount * -1;
                                            $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amount1})";
                                        } else {
                                            $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amount})";
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                            }


                        }

                    } else {
                        $boolContinue = false;
                        echo 'd';
                    }

                    // </editor-fold>

                    // <editor-fold defaultstate="collapsed" desc="fc">
                    //echo $aFreight;
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 2 AND account_id in (9,29,148) and account_no in (140000, '{$aFreight}', 210103)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    //$taxValue = 0;
                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        if ($row->fc_tax_id != '' && $row->fc_tax_id != 0 && $row->freight_price != '' && $row->freight_price > 0) {
                            $sqlTax = "SELECT * FROM tax WHERE tax_id = {$row->fc_tax_id}";
                            $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);

                            if ($resultTax !== false && $resultTax->num_rows > 0) {
                                $rowTax = $resultTax->fetch_object();
                                $taxValue = $rowTax->tax_value;

                                if ($row->freight_rule == 1) {
                                    $totalFreight_Price = $row->freight_price * $row->send_weight;

                                } else {
                                    $totalFreight_Price = $row->freight_price * $row->freight_quantity;

                                }
                                if ($rowTax->tax_category == 1) {
                                    $totalFreightPrice = ($totalFreight_Price) / ((100 - $taxValue) / 100);
                                    $creditFreightPrice = $totalFreight_Price;
                                } else {
                                    $totalFreightPrice = $totalFreight_Price;
                                    $creditFreightPrice = $totalFreight_Price - ($totalFreight_Price) * ($taxValue / 100);
                                }
                            } else {
                                $totalFreightPrice = $row->freight_price * $row->freight_quantity;
                                $creditFreightPrice = ($row->freight_price * $row->freight_quantity) - (($row->freight_price * $row->freight_quantity) * ($taxValue / 100));
                                $taxValue = 0;
                            }
                        } else if ($row->freight_price != '' && $row->freight_price > 0) {
                            if ($row->freight_rule == 1) {
                                $totalFreightPrice = $row->freight_price * $row->send_weight;
                                $creditFreightPrice = $totalFreightPrice;
                            } else {
                                $totalFreightPrice = $row->freight_price * $row->freight_quantity;
                                $creditFreightPrice = $totalFreightPrice;
                            }
                            $taxValue = 0;
                        } else {
                            $totalFreightPrice = 0;
                            $creditFreightPrice = 0;
                            $taxValue = 0;
                        }

                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount->account_no == 140000) {
                                if ($row->send_weight < 0) {
                                    $totalFreightPrice1 = $totalFreightPrice * -1;
                                    $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalFreightPrice1})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalFreightPrice})";
                                }
                            } elseif ($rowAccount->account_no == $aFreight) {
                                $amount = $totalFreightPrice * ($taxValue / 100);
                                if ($row->send_weight < 0) {
                                    $amount1 = $amount * -1;
                                    $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                }
                            } elseif ($rowAccount->account_no == 210103) {
                                if ($row->send_weight < 0) {
                                    $creditFreightPrice1 = $creditFreightPrice * -1;
                                    $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditFreightPrice1})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditFreightPrice})";
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                        echo 'e';
                    }

                    // <editor-fold defaultstate="collapsed" desc="fc shrink">
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 2 AND account_no in (140000, '{$aFreight}', 210103)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        //if($row->fc_tax_id != '') {
                        $sqlTax = "SELECT a.*, c.`tax_category`, c.`tax_value`,
COALESCE(ROUND(CASE WHEN c.tax_category = 1 THEN a.amt_claim / ((100 - COALESCE(c.tax_value,0))/100) ELSE a.amt_claim END,10),0) AS freight_susut_credit,
COALESCE(ROUND(CASE WHEN c.tax_category = 1 THEN a.amt_claim  ELSE a.amt_claim - (a.amt_claim * (COALESCE(c.tax_value,0)/100)) END,10),0) AS freight_susut_debit,
COALESCE(ROUND((CASE WHEN c.tax_category = 1 THEN a.amt_claim / ((100 - COALESCE(c.tax_value,0))/100) ELSE a.amt_claim END) - 
(CASE WHEN c.tax_category = 1 THEN a.amt_claim  ELSE a.amt_claim - (a.amt_claim * (COALESCE(c.tax_value,0)/100)) END),10),0) AS tax_susut_debit,
b.`freight_cost_id`,
b.`fc_tax_id`
FROM transaction_shrink_weight a
LEFT JOIN `transaction` b ON a.`transaction_id` = b.`transaction_id`
LEFT JOIN tax c ON c.`tax_id` = b.`fc_tax_id`  
WHERE a.`transaction_id` = {$transactionId}";
                        $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);

                        if ($resultTax !== false && $resultTax->num_rows > 0) {
                            $rowTax = $resultTax->fetch_object();

                            if ($rowTax->freight_cost_id != '') {
                                $totalFreightShrink = $rowTax->freight_susut_debit;
                                $creditFreightShrink = $rowTax->freight_susut_credit;
                                $taxShrink = $rowTax->tax_susut_debit;
                            } else {
                                $totalFreightShrink = 0;
                                $creditFreightShrink = 0;
                                $taxShrink = 0;
                            }
                        } else {
                            $totalFreightShrink = 0;
                            $creditFreightShrink = 0;
                            $taxShrink = 0;
                        }

                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount->account_no == 140000) {
                                if ($row->send_weight < 0) {
                                    $creditFreightShrink1 = $creditFreightShrink * -1;
                                    $insertValues .= "(1, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$creditFreightShrink1})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$creditFreightShrink})";
                                }
                            } elseif ($rowAccount->account_no == $aFreight) {
                                //$amount = $totalFreightPrice * ($taxValue / 100);
                                if ($row->send_weight < 0) {
                                    $taxShrink1 = $taxShrink * -1;
                                    $insertValues .= "(2, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$taxShrink1})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$taxShrink})";
                                }
                            } elseif ($rowAccount->account_no == 210103) {
                                if ($row->send_weight < 0) {
                                    $totalFreightShrink1 = $totalFreightShrink * -1;
                                    $insertValues .= "(2, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalFreightShrink1})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalFreightShrink})";
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                        echo 'f';
                    }
					
					// <editor-fold defaultstate="collapsed" desc="fc susut luar biasa">
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 2 AND account_no in (140000, '{$aFreight}', 210103)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        //if($row->fc_tax_id != '') {
                        $sqlTax = "SELECT a.*, c.`tax_category`, c.`tax_value`,
COALESCE(ROUND(CASE WHEN c.tax_category = 1 THEN a.amt_claim / (COALESCE(100 - c.tax_value,0)/100)  ELSE a.amt_claim END,10),0) AS freight_susut_credit,
COALESCE(ROUND(CASE WHEN c.tax_category = 1 THEN a.amt_claim ELSE a.amt_claim - (a.amt_claim * (COALESCE(c.tax_value,0)/100)) END,10),0) AS freight_susut_debit,
COALESCE(ROUND((CASE WHEN c.tax_category = 1 THEN a.amt_claim / (COALESCE(100 - c.tax_value,0)/100) ELSE a.amt_claim END) - 
(CASE WHEN c.tax_category = 1 THEN a.amt_claim  ELSE a.amt_claim - (a.amt_claim * (COALESCE(c.tax_value,0)/100)) END),10),0) AS tax_susut_debit,
b.`freight_cost_id`,
b.`fc_tax_id`
FROM transaction_additional_shrink a
LEFT JOIN `transaction` b ON a.`transaction_id` = b.`transaction_id`
LEFT JOIN tax c ON c.`tax_id` = b.`fc_tax_id` 
WHERE a.`transaction_id` = {$transactionId}";
                        $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);

                        if ($resultTax !== false && $resultTax->num_rows > 0) {
                            $rowTax = $resultTax->fetch_object();

                            if ($rowTax->freight_cost_id != '') {
                                $totalFreightShrink = $rowTax->freight_susut_debit;
                                $creditFreightShrink = $rowTax->freight_susut_credit;
                                $taxShrink = $rowTax->tax_susut_debit;
                            } else {
                                $totalFreightShrink = 0;
                                $creditFreightShrink = 0;
                                $taxShrink = 0;
                            }
                        } else {
                            $totalFreightShrink = 0;
                            $creditFreightShrink = 0;
                            $taxShrink = 0;
                        }

                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount->account_no == 140000) {
                                if ($rowTax->qty_add_shrink < 0) {
                                    $creditFreightShrink1 = $creditFreightShrink * -1;
                                    $insertValues .= "(1, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, 'add_shrink_fc', {$creditFreightShrink1})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, 'add_shrink_fc', {$creditFreightShrink})";
                                }
                            } elseif ($rowAccount->account_no == $aFreight) {
                                //$amount = $totalFreightPrice * ($taxValue / 100);
                                if ($rowTax->qty_add_shrink < 0) {
                                    $taxShrink1 = $taxShrink * -1;
                                    $insertValues .= "(2, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, 'add_shrink_fc', {$taxShrink1})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, 'add_shrink_fc', {$taxShrink})";
                                }
                            } elseif ($rowAccount->account_no == 210103) {
                                if ($rowTax->qty_add_shrink < 0) {
                                    $totalFreightShrink1 = $totalFreightShrink * -1;
                                    $insertValues .= "(2, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, 'add_shrink_fc', {$totalFreightShrink1})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, 'add_shrink_fc', {$totalFreightShrink})";
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                        echo 'f';
                    }
                    // </editor-fold>
                    // <editor-fold defaultstate="collapsed" desc="hc">
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 9 AND account_no in (140000, '{$aHandling}', 210106)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        if ($row->handling_cost_id != '') {
                            $sqlTax = "SELECT tx.* FROM tax tx
LEFT JOIN vendor_handling vh ON vh.`pph_tax_id` = tx.`tax_id`
LEFT JOIN vendor_handling_cost vhc ON vhc.`vendor_handling_id` = vh.`vendor_handling_id`
WHERE vhc.`handling_cost_id` = {$row->handling_cost_id}";
                            $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);

                            if ($resultTax !== false && $resultTax->num_rows > 0) {
                                $rowTax = $resultTax->fetch_object();
                                $taxValue = $rowTax->tax_value;

                                if ($row->vendor_handling_rule == 1) {
                                    $totalHandling_Price = $row->handling_price * $row->send_weight;

                                } else {
                                    $totalHandling_Price = $row->handling_price * $row->handling_quantity;

                                }
                                if ($rowTax->tax_category == 1) {
                                    $totalHandlingPrice = ($totalHandling_Price) / ((100 - $taxValue) / 100);
                                    $creditHandlingPrice = $totalHandling_Price;
                                } else {
                                    $totalHandlingPrice = $totalHandling_Price;
                                    $creditHandlingPrice = $totalHandling_Price - ($totalHandling_Price) * ($taxValue / 100);
                                }
                            } else {
                                $totalHandlingPrice = $row->handling_price * $row->handling_quantity;
                                $creditHandlingPrice = ($row->handling_price * $row->handling_quantity) - (($row->handling_price * $row->handling_quantity) * ($taxValue / 100));
                                $taxValue = 0;
                            }
                        } else {
                            $totalHandlingPrice = 0;
                            $creditHandlingPrice = 0;
                            $taxValue = 0;
                        }

                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount->account_no == 140000) {
                                if ($row->handling_quantity < 0) {
                                    $totalHandlingPrice1 = $totalHandlingPrice * -1;
                                    $insertValues .= "(2, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalHandlingPrice1})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalHandlingPrice})";
                                }
                            } elseif ($rowAccount->account_no == $aHandling) {
                                $amount = $totalHandlingPrice * ($taxValue / 100);
                                if ($row->handling_quantity < 0) {
                                    $amount1 = $amount * -1;
                                    $insertValues .= "(1, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                }
                            } elseif ($rowAccount->account_no == 210106) {
                                if ($row->handling_quantity < 0) {
                                    $creditHandlingPrice1 = $creditHandlingPrice * -1;
                                    $insertValues .= "(1, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditHandlingPrice1})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditHandlingPrice})";
                                }
                            }
                        }
                    } else {
                        echo 'test2';
                        $boolContinue = false;
                    }

                    // </editor-fold>

                    // <editor-fold defaultstate="collapsed" desc="uc">
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (6,3) and account_id in (10,30,261,262) AND account_no in (140000, '{$aUnloading}', 210104)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        if ($row->uc_tax_id != '') {
                            $sqlTax = "SELECT * FROM tax WHERE tax_id = {$row->uc_tax_id}";
                            $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);

                            if ($resultTax !== false && $resultTax->num_rows > 0) {
                                $rowTax = $resultTax->fetch_object();
                                $taxValue = 0;

                                if ($rowTax->tax_category == 1) {
                                    $totalUnloadingPrice = $row->unloading_price / ((100 - $taxValue) / 100);
                                    $creditUnloadingPrice = $row->unloading_price;
                                } else {
                                    $totalUnloadingPrice = $row->unloading_price;
                                    $creditUnloadingPrice = $row->unloading_price - $row->unloading_price * ($taxValue / 100);
                                }
                            } else {
                                $totalUnloadingPrice = $row->unloading_price;
                                $creditUnloadingPrice = $row->unloading_price;
                                $taxValue = 0;
                            }
                        } else {
                            $totalUnloadingPrice = 0;
                            $creditUnloadingPrice = 0;
                            $taxValue = 0;
                        }

                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount->account_no == 140000) {
                                //echo 'betul betul';
                                if ($row->send_weight < 0) {
                                    $totalUnloadingPrice1 = $totalUnloadingPrice * -1;
                                    $insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalUnloadingPrice1})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalUnloadingPrice})";
                                }
                            } elseif ($rowAccount->account_no == $aUnloading) {
                                $amount = $totalUnloadingPrice * ($taxValue / 100);
                                if ($row->send_weight < 0) {
                                    $amount1 = $amount * -1;
                                    $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amount1})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amount})";
                                }
                            } elseif ($rowAccount->account_no == 210104) {
                                if ($row->send_weight < 0) {
                                    $creditUnloadingPrice1 = $creditUnloadingPrice * -1;
                                    $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$creditUnloadingPrice1})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$creditUnloadingPrice})";
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                        echo 'g';
                    }

                    // </editor-fold>

                } elseif ($row->transaction_type == 2 && $row->localSales == 1) {

                    
                    // </editor-fold>

                    // <editor-fold defaultstate="collapsed" desc="cogs">
					$sales_oa = $row->freight_price * $row->freight_quantity;

                    $totalCogsPrice = 0;
                    $totalCogsShrink = 0;
                    $totalCogsFC = 0;
                    $totalCogsUC = 0;
                    $totalCogsStock = 0;
                    $sqlCogs = "SELECT d.*, c.price_converted, t.shrink, t.freight_quantity, t.freight_price, t.unloading_price, t.handling_quantity, vhc.price_converted,
			f.ppn_tax_id AS fc_ppn_tax_id, f.ppn AS fc_ppn, fctxppn.tax_category AS fc_ppn_tax_category, t2.shrink,
            f.pph_tax_id AS fc_pph_tax_id, f.pph AS fc_pph, fctxpph.tax_category AS fc_pph_tax_category,
            l.ppn_tax_id AS uc_ppn_tax_id, l.ppn AS uc_ppn, uctxppn.tax_category AS uc_ppn_tax_category,
            l.pph_tax_id AS uc_pph_tax_id, l.pph AS uc_pph, uctxpph.tax_category AS uc_pph_tax_category,
			vh.ppn_tax_id AS vh_ppn_tax_id, vh.ppn AS vh_ppn, vhtxppn.tax_category AS vh_ppn_tax_category,
            vh.pph_tax_id AS vh_pph_tax_id, vh.pph AS vh_pph, vhtxpph.tax_category AS vh_pph_tax_category,
			CASE WHEN t.mutasi_id IS NOT NULL AND t.mutasi_id <> 0 THEN d.quantity * t.unit_cost
			WHEN t.adjustmentAudit_id IS NOT NULL THEN d.quantity * t.unit_price
			ELSE d.quantity * c.price_converted END AS cogs_amount,
			CASE WHEN t.delivery_status = 2 THEN (d.percent_taken / 100) * (t.freight_quantity * t.freight_price)
			ELSE (d.percent_taken / 100) * (t.freight_quantity * t.freight_price) END AS freight_total,
			CASE WHEN t.delivery_status = 2 AND t.freight_cost_id IS NOT NULL THEN (d.quantity/t.freight_quantity) * COALESCE((SELECT amt_claim FROM transaction_shrink_weight WHERE transaction_id = d.transaction_id),0)
	    WHEN t.freight_cost_id IS NOT NULL THEN (d.percent_taken / 100) * COALESCE((SELECT amt_claim FROM transaction_shrink_weight WHERE transaction_id = d.transaction_id),0) ELSE 0 END AS freight_shrink,
			(d.percent_taken / 100) * t.unloading_price AS unloading_total, sh.shipment_code, (d.percent_taken / 100) * (t.handling_quantity * vhc.price_converted) AS handling_total, t2.quantity AS bl
            FROM `transaction` t2
                LEFT JOIN `delivery` d 
                    ON d.shipment_id = t2.shipment_id
				LEFT JOIN shipment sh
					ON d.shipment_id = sh.shipment_id
                LEFT JOIN `transaction` t
                    ON t.transaction_id = d.transaction_id
                LEFT JOIN stockpile_contract sc
					ON sc.`stockpile_contract_id` = t.`stockpile_contract_id`
			    LEFT JOIN contract c
					ON c.`contract_id` = sc.`contract_id`
			    LEFT JOIN freight_cost fc
					ON fc.`freight_cost_id` = t.`freight_cost_id`
			    LEFT JOIN freight f
					ON fc.`freight_id` = f.`freight_id`
			    LEFT JOIN labor l
					ON l.`labor_id` = t.`labor_id`
			    LEFT JOIN tax fctxpph
					ON fctxpph.tax_id = f.pph_tax_id
			    LEFT JOIN tax fctxppn
					ON fctxppn.tax_id = f.ppn_tax_id
			    LEFT JOIN tax uctxpph
			        ON uctxpph.tax_id = l.pph_tax_id
			    LEFT JOIN tax uctxppn
					ON uctxppn.tax_id = l.ppn_tax_id
				LEFT JOIN vendor_handling_cost vhc
					ON vhc.handling_cost_id = t.handling_cost_id
				LEFT JOIN vendor_handling vh
					ON vh.vendor_handling_id = vhc.vendor_handling_id
				LEFT JOIN tax vhtxpph
					ON vhtxpph.tax_id = vh.pph_tax_id
				LEFT JOIN tax vhtxppn
					ON vhtxppn.tax_id = vh.ppn_tax_id
				
                WHERE t2.transaction_id =  {$transactionId}";
                    $resultCogs = $myDatabase->query($sqlCogs, MYSQLI_STORE_RESULT);

                    if ($resultCogs !== false && $resultCogs->num_rows > 0) {
                        while ($rowCogs = $resultCogs->fetch_object()) {

                            $shipmentCode11 = $rowCogs->shipment_code;
                            $shipmentCode12 = '-S-';
                            $pos12 = strpos($shipmentCode11, $shipmentCode12);

                            if ($rowCogs->fc_pph_tax_category == 1 && $rowCogs->fc_pph_tax_id != '') {
                                $pphfc2 = ($rowCogs->freight_total / ((100 - $rowCogs->fc_pph) / 100)) - $rowCogs->freight_total;
                                $pphfcShrink2 = ($rowCogs->freight_shrink / ((100 - $rowCogs->fc_pph) / 100)) - $rowCogs->freight_shrink;

                            } elseif ($rowCogs->fc_pph_tax_category == 0 && $rowCogs->fc_pph_tax_id != '') {
                                $pphfc2 = 0;
                                $pphfcShrink2 = 0;
                                //$pphfc =  $row->freight_total - ($row->freight_total * ((100 - $fc_pph) / 100));
                            } else {
                                $pphfc2 = 0;
                                $pphfcShrink2 = 0;
                            }

                            $freightTotal2 = ($rowCogs->freight_total + $ppnfc2 + $pphfc2) - ($rowCogs->freight_shrink + $pphfcShrink2);

                            if ($rowCogs->vh_pph_tax_category == 1 && $rowCogs->vh_pph_tax_id != '') {
                                $pphvh2 = ($rowCogs->handling_total / ((100 - $rowCogs->vh_pph) / 100)) - $rowCogs->handling_total;

                            } elseif ($rowCogs->vh_pph_tax_category == 0 && $rowCogs->vh_pph_tax_id != '') {
                                $pphvh2 = 0;
                                //$pphfc =  $row->freight_total - ($row->freight_total * ((100 - $fc_pph) / 100));
                            } else {
                                $pphvh2 = 0;
                            }

                            $handlingTotal2 = $rowCogs->handling_total + $pphvh2;

                            if ($rowCogs->uc_pph_tax_category == 1 && $rowCogs->uc_pph_tax_id != '') {
                                $pphuc2 = ($rowCogs->unloading_total / ((100 - $rowCogs->uc_pph) / 100)) - $rowCogs->unloading_total;

                            } elseif ($rowCogs->uc_pph_tax_category == 0 && $rowCogs->uc_pph_tax_id != '') {
                                $pphuc2 = 0;
                                //$pphuc =  $row->unloading_total - ($row->unloading_total * ((100 - $row->uc_pph) / 100));
                            } else {
                                $pphuc2 = 0;
                            }

                            $unloadingTotal2 = $rowCogs->unloading_total + $ppnuc2 + $pphuc2;

                            $totalCogs2 = $rowCogs->cogs_amount + $freightTotal2 + $unloadingTotal2 + $handlingTotal2;

                            $quantity_total = $rowCogs->quantity;
                            $total_quantity = $quantity_total + $total_quantity;

                            $pks_total = $rowCogs->cogs_amount;
                            $total_pks = $pks_total + $total_pks;

                            $fc_total = $freightTotal2;
                            $total_fc = $fc_total + $total_fc;

                            $uc_total = $unloadingTotal2;
                            $total_uc = $uc_total + $total_uc;

                            $hc_total = $handlingTotal2;
                            $total_hc = $hc_total + $total_hc;

                            $cogs_total = $totalCogs2;
                            $total_cogs = $cogs_total + $total_cogs;

                            $shrink = 0;
                            $total_pks2 = $total_pks - $shrink;

                            $qty = $rowCogs->bl;
                        }
                    }

                    /*if ($pos12 !== FALSE && $row->sales_type == 3) {
                        echo 'aaaaa';

                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1) AND account_no in (141000, 140000)";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                        if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while ($rowAccount = $resultAccount->fetch_object()) {
                                if ($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if ($rowAccount->account_no == 141000) {
                                    if ($qty < 0) {
                                        //$total_cogs1 = $total_cogs *-1;
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    }
                                } elseif ($rowAccount->account_no == 140000) {
                                    if ($qty < 0) {
                                        //$total_cogs1 = $total_cogs * -1;
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                    } elseif ($row->sales_type == 3) {
                        echo 'aaaaa';

                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1) AND account_no in (141000, 140000)";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                        if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while ($rowAccount = $resultAccount->fetch_object()) {
                                if ($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if ($rowAccount->account_no == 141000) {
                                    if ($qty < 0) {
                                        //$total_cogs1 = $total_cogs *-1;
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    }
                                } elseif ($rowAccount->account_no == 140000) {
                                    if ($qty < 0) {
                                        //$total_cogs1 = $total_cogs * -1;
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                    }elseif ($pos12 !== FALSE) {

                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1) AND account_no in (510201, 140000)";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                        if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while ($rowAccount = $resultAccount->fetch_object()) {
                                if ($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if ($rowAccount->account_no == 510201) {
                                    if ($qty < 0) {
                                        //$total_cogs1 = $total_cogs *-1;
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    }
                                } elseif ($rowAccount->account_no == 140000) {
                                    if ($qty < 0) {
                                        //$total_cogs1 = $total_cogs * -1;
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                    }  else {*/

                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_id in (544,545,546,547,548,549,550)";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                        if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while ($rowAccount = $resultAccount->fetch_object()) {
                                if ($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if ($rowAccount->account_no == 140000 && $rowAccount->account_id == 546) {
                                    if ($qty < 0) {
                                        //$total_pks21 = $total_pks2 * -1;
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_pks2})
                                        ";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_pks2})";
                                    }
                                } elseif ($rowAccount->account_no == 140000 && $rowAccount->account_id == 545) {
                                    if ($qty < 0) {
                                        //$total_fc1 = $total_fc * -1;
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_fc})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_fc})";
                                    }
                                } elseif ($rowAccount->account_no == 140000 && $rowAccount->account_id == 547) {
                                    if ($qty < 0) {
                                        //$total_uc1 = $total_uc * -1;
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  0, 0,{$rowAccount->account_id}, NULL, {$total_uc})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  0, 0,{$rowAccount->account_id}, NULL, {$total_uc})";
                                    }
                                } elseif ($rowAccount->account_no == 140000 && $rowAccount->account_id == 548) {
                                    if ($qty < 0) {
                                        //$total_hc1 = $total_hc * -1;
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  0, 0,{$rowAccount->account_id}, NULL, {$total_hc})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  0, 0,{$rowAccount->account_id}, NULL, {$total_hc})";
                                    }
                                } elseif ($rowAccount->account_no == 160100) {
                                    if ($qty < 0) {
                                        //$total_cogs1 = $total_cogs * -1;
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    }
                                } elseif ($rowAccount->account_no == 160200) {
                                    if ($qty < 0) {
                                        //$total_cogs1 = $total_cogs * -1;
                                        $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  0, 0,{$rowAccount->account_id}, NULL, {$sales_oa})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  0, 0,{$rowAccount->account_id}, NULL, {$sales_oa})";
                                    }
                                } elseif ($rowAccount->account_no == 210108) {
                                    if ($qty < 0) {
                                        //$total_cogs1 = $total_cogs * -1;
                                        $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  0, 0,{$rowAccount->account_id}, NULL, {$sales_oa})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  0, 0,{$rowAccount->account_id}, NULL, {$sales_oa})";
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }

                  // }  // </editor-fold>
                }elseif ($row->transaction_type == 2) {

                    if ($row->sales_status == 3) {
                        $shipment_code = $row->shipment_code;
                        $shipment_code1 = '-S-';
                        $pos1 = strpos($shipment_code, $shipment_code1);
                        // <editor-fold defaultstate="collapsed" desc="nota timbang">
                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (0,1) AND account_no in (120000, 230100, {$row->sales_account}) GROUP BY account_no";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                        if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                            if ($pos1 !== FALSE) {

                                $newSalesPrice2 = 0;
                                $taxValue = 0;
                                $totalSalesPrice = 0;

                            } else {
                                $newSalesPrice1 = round($row->price * $row->quantity, 2);
                                $newSalesPrice2 = round($newSalesPrice1 * $row->exchange_rate, 0);
                                //$salesPrice = $row->quantity * $row->sales_price_converted;
                                $taxValue = ($row->ppn_buyer / 100 * $newSalesPrice2);
                                $totalSalesPrice = $newSalesPrice2 + $taxValue;
                            }
                            while ($rowAccount = $resultAccount->fetch_object()) {
                                if ($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if ($rowAccount->account_no == 120000) {
                                    if ($row->quantity < 0) {
                                        $totalSalesPrice1 = $totalSalesPrice * -1;
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalSalesPrice1})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalSalesPrice})";
                                    }
                                } elseif ($rowAccount->account_no == 230100) {
                                    if ($row->quantity < 0) {
                                        $taxValue1 = $taxValue * -1;
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$taxValue1})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$taxValue})";
                                    }
                                } elseif ($rowAccount->account_no == $row->sales_account) {
                                    if ($row->quantity < 0) {
                                        $newSalesPrice21 = $newSalesPrice2 * -1;
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$newSalesPrice21})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$newSalesPrice2})";
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                    }
                    // </editor-fold>

                    // <editor-fold defaultstate="collapsed" desc="cogs">

                    $totalCogsPrice = 0;
                    $totalCogsShrink = 0;
                    $totalCogsFC = 0;
                    $totalCogsUC = 0;
                    $totalCogsStock = 0;
                    $sqlCogs = "SELECT d.*, c.price_converted, t.shrink, t.freight_quantity, t.freight_price, t.unloading_price, t.handling_quantity, vhc.price_converted,
			f.ppn_tax_id AS fc_ppn_tax_id, f.ppn AS fc_ppn, fctxppn.tax_category AS fc_ppn_tax_category, t2.shrink,
            f.pph_tax_id AS fc_pph_tax_id, f.pph AS fc_pph, fctxpph.tax_category AS fc_pph_tax_category,
            l.ppn_tax_id AS uc_ppn_tax_id, l.ppn AS uc_ppn, uctxppn.tax_category AS uc_ppn_tax_category,
            l.pph_tax_id AS uc_pph_tax_id, l.pph AS uc_pph, uctxpph.tax_category AS uc_pph_tax_category,
			vh.ppn_tax_id AS vh_ppn_tax_id, vh.ppn AS vh_ppn, vhtxppn.tax_category AS vh_ppn_tax_category,
            vh.pph_tax_id AS vh_pph_tax_id, vh.pph AS vh_pph, vhtxpph.tax_category AS vh_pph_tax_category,
			CASE WHEN t.mutasi_id IS NOT NULL AND t.mutasi_id <> 0 THEN d.quantity * t.unit_cost
			WHEN t.adjustmentAudit_id IS NOT NULL THEN d.quantity * t.unit_price
			ELSE d.quantity * c.price_converted END AS cogs_amount,
			CASE WHEN t.delivery_status = 2 THEN (d.percent_taken / 100) * (t.freight_quantity * t.freight_price)
			ELSE (d.percent_taken / 100) * (t.freight_quantity * t.freight_price) END AS freight_total,
			CASE WHEN t.delivery_status = 2 AND t.freight_cost_id IS NOT NULL THEN (d.quantity/t.freight_quantity) * COALESCE((SELECT amt_claim FROM transaction_shrink_weight WHERE transaction_id = d.transaction_id),0)
	    WHEN t.freight_cost_id IS NOT NULL THEN (d.percent_taken / 100) * COALESCE((SELECT amt_claim FROM transaction_shrink_weight WHERE transaction_id = d.transaction_id),0) ELSE 0 END AS freight_shrink,
			(d.percent_taken / 100) * t.unloading_price AS unloading_total, sh.shipment_code, (d.percent_taken / 100) * (t.handling_quantity * vhc.price_converted) AS handling_total, t2.quantity AS bl
            FROM `transaction` t2
                LEFT JOIN `delivery` d 
                    ON d.shipment_id = t2.shipment_id
				LEFT JOIN shipment sh
					ON d.shipment_id = sh.shipment_id
                LEFT JOIN `transaction` t
                    ON t.transaction_id = d.transaction_id
                LEFT JOIN stockpile_contract sc
					ON sc.`stockpile_contract_id` = t.`stockpile_contract_id`
			    LEFT JOIN contract c
					ON c.`contract_id` = sc.`contract_id`
			    LEFT JOIN freight_cost fc
					ON fc.`freight_cost_id` = t.`freight_cost_id`
			    LEFT JOIN freight f
					ON fc.`freight_id` = f.`freight_id`
			    LEFT JOIN labor l
					ON l.`labor_id` = t.`labor_id`
			    LEFT JOIN tax fctxpph
					ON fctxpph.tax_id = f.pph_tax_id
			    LEFT JOIN tax fctxppn
					ON fctxppn.tax_id = f.ppn_tax_id
			    LEFT JOIN tax uctxpph
			        ON uctxpph.tax_id = l.pph_tax_id
			    LEFT JOIN tax uctxppn
					ON uctxppn.tax_id = l.ppn_tax_id
				LEFT JOIN vendor_handling_cost vhc
					ON vhc.handling_cost_id = t.handling_cost_id
				LEFT JOIN vendor_handling vh
					ON vh.vendor_handling_id = vhc.vendor_handling_id
				LEFT JOIN tax vhtxpph
					ON vhtxpph.tax_id = vh.pph_tax_id
				LEFT JOIN tax vhtxppn
					ON vhtxppn.tax_id = vh.ppn_tax_id
				
                WHERE t2.transaction_id =  {$transactionId}";
                    $resultCogs = $myDatabase->query($sqlCogs, MYSQLI_STORE_RESULT);

                    if ($resultCogs !== false && $resultCogs->num_rows > 0) {
                        while ($rowCogs = $resultCogs->fetch_object()) {

                            $shipmentCode11 = $rowCogs->shipment_code;
                            $shipmentCode12 = '-S-';
                            $pos12 = strpos($shipmentCode11, $shipmentCode12);

                            if ($rowCogs->fc_pph_tax_category == 1 && $rowCogs->fc_pph_tax_id != '') {
                                $pphfc2 = ($rowCogs->freight_total / ((100 - $rowCogs->fc_pph) / 100)) - $rowCogs->freight_total;
                                $pphfcShrink2 = ($rowCogs->freight_shrink / ((100 - $rowCogs->fc_pph) / 100)) - $rowCogs->freight_shrink;

                            } elseif ($rowCogs->fc_pph_tax_category == 0 && $rowCogs->fc_pph_tax_id != '') {
                                $pphfc2 = 0;
                                $pphfcShrink2 = 0;
                                //$pphfc =  $row->freight_total - ($row->freight_total * ((100 - $fc_pph) / 100));
                            } else {
                                $pphfc2 = 0;
                                $pphfcShrink2 = 0;
                            }

                            $freightTotal2 = ($rowCogs->freight_total + $ppnfc2 + $pphfc2) - ($rowCogs->freight_shrink + $pphfcShrink2);

                            if ($rowCogs->vh_pph_tax_category == 1 && $rowCogs->vh_pph_tax_id != '') {
                                $pphvh2 = ($rowCogs->handling_total / ((100 - $rowCogs->vh_pph) / 100)) - $rowCogs->handling_total;

                            } elseif ($rowCogs->vh_pph_tax_category == 0 && $rowCogs->vh_pph_tax_id != '') {
                                $pphvh2 = 0;
                                //$pphfc =  $row->freight_total - ($row->freight_total * ((100 - $fc_pph) / 100));
                            } else {
                                $pphvh2 = 0;
                            }

                            $handlingTotal2 = $rowCogs->handling_total + $pphvh2;

                            if ($rowCogs->uc_pph_tax_category == 1 && $rowCogs->uc_pph_tax_id != '') {
                                $pphuc2 = ($rowCogs->unloading_total / ((100 - $rowCogs->uc_pph) / 100)) - $rowCogs->unloading_total;

                            } elseif ($rowCogs->uc_pph_tax_category == 0 && $rowCogs->uc_pph_tax_id != '') {
                                $pphuc2 = 0;
                                //$pphuc =  $row->unloading_total - ($row->unloading_total * ((100 - $row->uc_pph) / 100));
                            } else {
                                $pphuc2 = 0;
                            }

                            $unloadingTotal2 = $rowCogs->unloading_total + $ppnuc2 + $pphuc2;

                            $totalCogs2 = $rowCogs->cogs_amount + $freightTotal2 + $unloadingTotal2 + $handlingTotal2;

                            $quantity_total = $rowCogs->quantity;
                            $total_quantity = $quantity_total + $total_quantity;

                            $pks_total = $rowCogs->cogs_amount;
                            $total_pks = $pks_total + $total_pks;

                            $fc_total = $freightTotal2;
                            $total_fc = $fc_total + $total_fc;

                            $uc_total = $unloadingTotal2;
                            $total_uc = $uc_total + $total_uc;

                            $hc_total = $handlingTotal2;
                            $total_hc = $hc_total + $total_hc;

                            $cogs_total = $totalCogs2;
                            $total_cogs = $cogs_total + $total_cogs;

                            $shrink = 0;
                            $total_pks2 = $total_pks - $shrink;

                            $qty = $rowCogs->bl;
                        }
                    }

                    if ($pos12 !== FALSE && $row->sales_type == 3) {
                        echo 'aaaaa';

                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1) AND account_no in (141000, 140000) GROUP BY account_no";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                        if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while ($rowAccount = $resultAccount->fetch_object()) {
                                if ($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if ($rowAccount->account_no == 141000) {
                                    if ($qty < 0) {
                                        //$total_cogs1 = $total_cogs *-1;
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    }
                                } elseif ($rowAccount->account_no == 140000) {
                                    if ($qty < 0) {
                                        //$total_cogs1 = $total_cogs * -1;
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                    } elseif ($row->sales_type == 3) {
                        echo 'aaaaa';

                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1) AND account_no in (141000, 140000) GROUP BY account_no";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                        if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while ($rowAccount = $resultAccount->fetch_object()) {
                                if ($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if ($rowAccount->account_no == 141000) {
                                    if ($qty < 0) {
                                        //$total_cogs1 = $total_cogs *-1;
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    }
                                } elseif ($rowAccount->account_no == 140000) {
                                    if ($qty < 0) {
                                        //$total_cogs1 = $total_cogs * -1;
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                    }elseif ($pos12 !== FALSE) {

                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1) AND account_no in (510201, 140000) GROUP BY account_no";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                        if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while ($rowAccount = $resultAccount->fetch_object()) {
                                if ($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if ($rowAccount->account_no == 510201) {
                                    if ($qty < 0) {
                                        //$total_cogs1 = $total_cogs *-1;
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    }
                                } elseif ($rowAccount->account_no == 140000) {
                                    if ($qty < 0) {
                                        //$total_cogs1 = $total_cogs * -1;
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                    }  else {

                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (510101, 510201, 510102, 510103, 510104, 140000) GROUP BY account_no";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                        if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while ($rowAccount = $resultAccount->fetch_object()) {
                                if ($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if ($rowAccount->account_no == 510101) {
                                    if ($qty < 0) {
                                        //$total_pks21 = $total_pks2 * -1;
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_pks2})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_pks2})";
                                    }
                                } elseif ($rowAccount->account_no == 510201) {
                                    if ($qty < 0) {
                                        //$shrink1 = $shrink * -1;
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$shrink})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$shrink})";
                                    }
                                } elseif ($rowAccount->account_no == 510102) {
                                    if ($qty < 0) {
                                        //$total_fc1 = $total_fc * -1;
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_fc})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_fc})";
                                    }
                                } elseif ($rowAccount->account_no == 510103) {
                                    if ($qty < 0) {
                                        //$total_uc1 = $total_uc * -1;
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_uc})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_uc})";
                                    }
                                } elseif ($rowAccount->account_no == 510104) {
                                    if ($qty < 0) {
                                        //$total_hc1 = $total_hc * -1;
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_hc})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_hc})";
                                    }
                                } elseif ($rowAccount->account_no == 140000) {
                                    if ($qty < 0) {
                                        //$total_cogs1 = $total_cogs * -1;
                                        $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }

                    }  // </editor-fold>
                }

            }


        } else {
            $boolContinue = false;
        }

        // </editor-fold>
    } elseif ($paymentId != 'NULL') {
        // <editor-fold defaultstate="collapsed" desc="payment">
        if ($source == 'PAYMENT' || $source == 'PETTY CASH' || $source == 'PAYMENT ADMIN') {
            $sql = "DELETE FROM general_ledger WHERE payment_id = {$paymentId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        } elseif ($source == 'RETURN PAYMENT') {
            $sql = "DELETE FROM general_ledger WHERE payment_id = {$paymentId} AND general_ledger_module = 'RETURN PAYMENT'";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            //echo 'benar';
        }
        $sql = "SELECT p.*, a.account_no, ap.account_type AS ap_account_type, ap.account_no AS ap_account_no,
					b.currency_id AS b_currency_id, ta.account_no AS gv_account_no, gv.pph_tax_id AS gv_pph_tax_id, ta.account_no AS at_account_no,
					f.pph_tax_id AS f_pph_tax_id, f.pph AS f_pph_tax, f.ppn AS f_ppn_tax, atf.account_no AS f_account_no, u.pph_tax_id AS u_pph_tax_id, atu.account_no AS u_account_no, tfc.tax_category AS fc_tax_category,
					vh.pph_tax_id AS vh_pph_tax_id, vh.pph AS vh_pph_tax, atvh.account_no AS vh_account_no, tvhc.tax_category AS vhc_tax_category
                FROM payment p 
                INNER JOIN bank b
                    ON b.bank_id = p.bank_id
                INNER JOIN account a
                    ON a.account_id = b.account_id
                INNER JOIN account ap
                    ON ap.account_id = p.account_id 
                LEFT JOIN general_vendor gv
                    ON gv.general_vendor_id = p.general_vendor_id
                LEFT JOIN tax t
                    ON t.tax_id = gv.pph_tax_id
                LEFT JOIN account ta
                    ON ta.account_id = t.account_id	
                LEFT JOIN freight f
                    ON f.freight_id = p.freight_id
                LEFT JOIN tax tfc
                    ON tfc.tax_id = f.pph_tax_id
                LEFT JOIN account atf
                    ON atf.account_id = tfc.account_id
                LEFT JOIN labor u
                    ON u.labor_id = p.labor_id
                LEFT JOIN tax tu
                    ON tu.tax_id = u.pph_tax_id
                LEFT JOIN account atu
                    ON atu.account_id = tu.account_id
                LEFT JOIN vendor_handling vh
                    ON vh.vendor_handling_id = p.vendor_handling_id
                LEFT JOIN tax tvhc
                    ON tvhc.tax_id = vh.pph_tax_id
                LEFT JOIN account atvh
                    ON atvh.account_id = tvhc.account_id
                WHERE p.payment_id = {$paymentId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();

            $paymentStatus = $row->payment_status;
            $payment_type = $row->payment_type;

            if ($row->invoice_sales_id != '') {
                // <editor-fold defaultstate="collapsed" desc="payment PKS kontrak">
                if ($row->payment_method == 1) {
                    $totalInvoiceAmount = 0;
                    $totalInvoicetDP = 0;

                   
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}, 7) AND account_no in ({$row->account_no},{$row->ap_account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount->account_no == $row->account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', NULL, 1, 15, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  0, 0, {$rowAccount->account_id}, NULL,  {$row->amount_journal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 1, 15, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  0, 0, {$rowAccount->account_id}, NULL,  {$row->amount_journal})";
                                }
                            } elseif ($rowAccount->account_no == $row->ap_account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 1, 15, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  0, 0, {$rowAccount->account_id}, NULL,  {$row->amount_journal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 1, 15, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  0, 0, {$rowAccount->account_id}, NULL,  {$row->amount_journal})";
                                }
                            } 
                        }
                    } else {
                        $boolContinue = false;
                        echo 'false2';
                    }
                } 
                // </editor-fold>
            }else if ($row->invoice_sales_oa_id != '') {
                // <editor-fold defaultstate="collapsed" desc="payment PKS kontrak">
                if ($row->payment_method == 1) {
                    $totalInvoiceAmount = 0;
                    $totalInvoicetDP = 0;

                   
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}, 7) AND account_no in ({$row->account_no},{$row->ap_account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount->account_no == $row->account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 16, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  0, 0, {$rowAccount->account_id}, NULL,  {$row->amount_journal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 16, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  0, 0, {$rowAccount->account_id}, NULL,  {$row->amount_journal})";
                                }
                            } elseif ($rowAccount->account_no == $row->ap_account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 16, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  0, 0, {$rowAccount->account_id}, NULL,  {$row->amount_journal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 16, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},  0, 0, {$rowAccount->account_id}, NULL,  {$row->amount_journal})";
                                }
                            } 
                        }
                    } else {
                        $boolContinue = false;
                        echo 'false2';
                    }
                } 
                // </editor-fold>
            }else if ($row->stockpile_contract_id != '') {
                // <editor-fold defaultstate="collapsed" desc="payment PKS kontrak">
                if ($row->payment_method == 1) {
                    $totalContractAmount = 0;
                    $totalContractDP = 0;

                    $sqlContract = "SELECT sc.*, con.price_converted, con.quantity, 
                                        (
                                            SELECT COALESCE(SUM(amount_journal), 0) FROM payment
                                            WHERE stockpile_contract_id = sc.stockpile_contract_id
                                            AND payment_method = 2 AND payment_status = 0
                                        ) AS total_dp,
                                        (
                                            SELECT COALESCE(SUM(ppn_journal), 0) FROM payment
                                            WHERE stockpile_contract_id = sc.stockpile_contract_id
                                            AND payment_method = 2 AND payment_status = 0
                                        ) AS total_ppn,
										(
                                            SELECT a.account_no FROM account a LEFT JOIN payment p
											ON p.account_id = a.account_id
                                            WHERE p.stockpile_contract_id = sc.stockpile_contract_id
                                            AND p.payment_method = 2 AND p.payment_status = 0 LIMIT 1
                                        ) AS account_no
                                    FROM stockpile_contract sc
                                    INNER JOIN contract con
                                        ON con.contract_id = sc.contract_id
                                    WHERE sc.stockpile_contract_id = {$row->stockpile_contract_id}";
                    $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);

                    if ($resultContract !== false && $resultContract->num_rows == 1) {
                        $rowContract = $resultContract->fetch_object();
                        if ($row->payment_method == 1 && $row->payment_type == 1) {
                            $total_ppn = 0;
                            $total_dp = 0;
                        } else {
                            $total_ppn = $rowContract->total_ppn;
                            $total_dp = $rowContract->total_dp;
                        }

                        $totalContractAmount = ceil($rowContract->price_converted * $rowContract->quantity);
                        $totalContractPPN = $total_ppn;
                        if ($rowContract->account_no == 210102) {
                            $totalContractDP = 0;
                        } else {
                            $totalContractDP = $total_dp - $totalContractPPN;
                        }//*benerin

                    }

                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (0, 7) AND account_no in ({$row->ap_account_no}, 150410,130001, {$row->account_no}, 230204)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount->account_no == $row->ap_account_no) {
                                if ($totalContractDP > 0) {
                                    $amountJournal = $row->amount_converted;
                                } else {
                                    $amountJournal = $row->amount_journal + $totalContractDP;
                                }
                                if ($paymentStatus == 1) {
                                    if ($payment_type == 1) {
                                        $insertValues .= "(1, '{$source}', 'Payment', 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountJournal})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', 'Payment', 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountJournal})";
                                    }
                                } else {
                                    if ($payment_type == 1) {
                                        $insertValues .= "(2, '{$source}', 'Payment', 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountJournal})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', 'Payment', 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountJournal})";
                                    }
                                }
                            } /*elseif($rowAccount->account_no == 150410) {
								if($paymentStatus == 1){
									if($payment_type == 1){
									$insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->ppn_journal}), (1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}else{
									$insertValues .= "(2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->ppn_journal}), (1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}
								}else{
									if($payment_type == 1){
									$insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->ppn_journal}), (2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}else{
									$insertValues .= "(1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->ppn_journal}), (2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}
								}
							}*/ elseif ($rowAccount->account_no == 150410 && $totalContractDP >= 0) {
                                if ($paymentStatus == 1) {
                                    if ($payment_type == 1) {
                                        $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
                                    }
                                } else {
                                    if ($payment_type == 1) {
                                        $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
                                    }
                                }
                            } elseif ($rowAccount->account_no == 130001) {
                                if ($paymentStatus == 1) {
                                    if ($payment_type == 1) {
                                        $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalContractDP})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalContractDP})";
                                    }
                                } else {
                                    if ($payment_type == 1) {
                                        $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalContractDP})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalContractDP})";
                                    }
                                }
                            } elseif ($rowAccount->account_no == $row->account_no) {
                                if ($paymentStatus == 1) {
                                    if ($payment_type == 1) {
                                        $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                    }
                                } else {
                                    if ($payment_type == 1) {
                                        $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                    }
                                }
                            } elseif ($rowAccount->account_no == 230204) {
                                if ($paymentStatus == 1) {
                                    if ($payment_type == 1) {
                                        $insertValues .= "(1, '{$source}', NULL, 1, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->pph_journal})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->pph_journal})";
                                    }
                                } else {
                                    if ($payment_type == 1) {
                                        $insertValues .= "(2, '{$source}', NULL, 1, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->pph_journal})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->pph_journal})";
                                    }
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                } elseif ($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (0, 7) AND account_no in ({$row->ap_account_no}, 150410, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount->account_no == $row->ap_account_no) {
                                $amountJournal = $row->amount_journal - $row->ppn_journal;
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', 'Down Payment', 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountJournal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', 'Down Payment', 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountJournal})";
                                }
                            } elseif ($rowAccount->account_no == $row->account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                }
                            } elseif ($rowAccount->account_no == 150410) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->ppn_journal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->ppn_journal})";
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            } elseif ($row->payment_cash_id != '') {
                echo 'blt';
                // <editor-fold defaultstate="collapsed" desc="payment PKS kontrak">
                if ($row->payment_method == 1) {

                    $cashId = 0;
                    $pc_id = 0;
                    $acc_dp_pph = 'NULL';
                    $acc_dp_ppn = 'NULL';
                    $sqlcashDP = "SELECT pcdp.payment_cash_id, pcdp.payment_cash_dp, pcdp.`amount_payment` AS down_payment,
(SELECT gv.ppn FROM general_vendor gv LEFT JOIN payment_cash pc ON gv.general_vendor_id = pc.general_vendor_id WHERE pc.payment_cash_id = pcdp.payment_cash_dp) AS gv_ppn,
(SELECT gv.pph FROM general_vendor gv LEFT JOIN payment_cash pc ON gv.general_vendor_id = pc.general_vendor_id WHERE pc.payment_cash_id = pcdp.payment_cash_dp) AS gv_pph,
(SELECT account_id FROM payment_cash WHERE payment_cash_id = pcdp.payment_cash_dp) AS account_id,
(SELECT tx.account_id FROM tax tx LEFT JOIN payment_cash pc ON pc.ppnID = tx.tax_id WHERE pc.payment_cash_id = pcdp.payment_cash_dp) AS acc_dp_ppn,
(SELECT tx.account_id FROM tax tx LEFT JOIN payment_cash pc ON pc.pphID = tx.tax_id WHERE pc.payment_cash_id = pcdp.payment_cash_dp) AS acc_dp_pph,  
(SELECT pph FROM payment_cash WHERE payment_cash_id = pcdp.payment_cash_dp) AS pph,
(SELECT ppn FROM payment_cash WHERE payment_cash_id = pcdp.payment_cash_dp) AS ppn,
(SELECT `type` FROM payment_cash WHERE payment_cash_id = pcdp.payment_cash_dp) AS `type`
FROM payment_cash_dp pcdp 
LEFT JOIN payment_cash pc ON pc.`payment_cash_id` = pcdp.`payment_cash_id` 
WHERE pc.payment_id = {$paymentId}";
                    $resultCashDP = $myDatabase->query($sqlcashDP, MYSQLI_STORE_RESULT);

                    if ($resultCashDP !== false && $resultCashDP->num_rows > 0) {
                        $dp_type = array();
                        while ($rowCashDP = mysqli_fetch_array($resultCashDP)) {

                            $accountDP = $rowCashDP['account_id'];

                            if ($rowCashDP['acc_dp_ppn'] != '') {
                                $acc_dp_ppn = $rowCashDP['acc_dp_ppn'];
                            } else {
                                $acc_dp_ppn = 'NULL';
                            }

                            //$acc_dp_ppn = $rowCashDP['acc_dp_ppn'];
                            if ($rowCashDP['acc_dp_pph'] != '') {
                                $acc_dp_pph = $rowCashDP['acc_dp_pph'];
                            } else {
                                $acc_dp_pph = 'NULL';
                            }
                            $ppn_dp = $rowCashDP['gv_ppn'];
                            $pph_dp = $rowCashDP['gv_pph'];
                            $ppn = $rowCashDP['ppn'];
                            $pph = $rowCashDP['pph'];
                            $cashId = $rowCashDP['payment_cash_dp'];
                            $down_payment = $rowCashDP['down_payment'];
                            $dp_type[] = $rowCashDP['type'];
                            $pc_dp_type = implode(', ', $dp_type);


                            if ($ppn == 0) {
                                $dpPPN = 0;
                            } else {
                                $dpPPN = $down_payment * ($ppn_dp / 100);
                            }
                            if ($pph == 0) {
                                $dpPPh = 0;
                            } else {
                                $dpPPh = $down_payment * ($pph_dp / 100);
                            }
                            //$downPayment = ($down_payment + $dpPPN) - $dpPPh;


                            if ($acc_dp_ppn != '' || $acc_dp_ppn != 0 || $acc_dp_ppn != 'NULL') {
                                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$pc_dp_type}) AND account_no IN (150410)";
                                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                                if ($resultAccount !== false && $resultAccount->num_rows == 1) {
                                    $rowAccount = $resultAccount->fetch_object();
                                    $accountId_dp = $rowAccount->account_id;

                                }
                            }


                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }


                            if ($cashId != '' || $cashId != 0 || $cashId != 'NULL') {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$accountDP}, NULL, {$down_payment}),";
                                    $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$acc_dp_pph}, NULL, {$dpPPh}),";
                                    $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$accountId_dp}, NULL,  {$dpPPN})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$accountDP}, NULL, {$down_payment}),";
                                    $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$acc_dp_pph}, NULL, {$dpPPh}),";
                                    $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$accountId_dp}, NULL,  {$dpPPN})";
                                }
                            }

                        }
                    }
                    /*}else {
                   // $boolContinue = false;

				echo 'FALSE2';
				//echo '</br>';
				//echo $payment_cash_id;
				//echo '</br>';
				//echo $PCashDP;
				//echo '</br>';
				//echo $pc_id;

                }*/
                }

                if ($row->payment_method == 1) {
                    $totalCashAmount = 0;
                    $totalCashtDP = 0;


                    $sqlPC = "SELECT pc.*, a.account_no, a.account_name, apph.account_id AS apph_id, apph.account_no AS apph_no, apph.account_name AS apph_name
							  FROM payment_cash pc
								LEFT JOIN account a ON a.`account_id` = pc.`account_id` 
								LEFT JOIN tax txpph ON txpph.`tax_id` = pc.`pphID`
								LEFT JOIN account apph ON apph.`account_id` = txpph.`account_id`
								WHERE pc.`payment_id` = {$paymentId}";
                    $resultPC = $myDatabase->query($sqlPC, MYSQLI_STORE_RESULT);


                    if ($resultPC !== false && $resultPC->num_rows > 0) {
                        while ($rowPC = $resultPC->fetch_object()) {

                            $cashId = $rowPC->payment_cash_id;
                            $amountConv = $rowPC->amount_converted;

                            if ($rowPC->apph_id == '' || $rowPC->apph_id == 0 || $rowPC->apph_id == 'NULL') {
                                $apph_id = 'NULL';
                            } else {
                                $apph_id = $rowPC->apph_id;
                            }

                            if ($rowPC->ppnID != '' || $rowPC->ppnID != 0 || $rowPC->ppnID != 'NULL') {
                                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$rowPC->type}) AND account_no IN (150410)";
                                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                                if ($resultAccount !== false && $resultAccount->num_rows == 1) {
                                    $rowAccount = $resultAccount->fetch_object();
                                    $accountId = $rowAccount->account_id;

                                }
                            }
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }
                            if ($row->payment_type == 1) {
                                if ($rowPC->payment_cash_id != '' || $rowPC->payment_cash_id != 0 || $rowPC->payment_cash_id != 'NULL') {
                                    if ($paymentStatus == 1) {
                                        if ($rowPC->amount_converted < 0) {
                                            $amount_converted1 = $rowPC->amount_converted * -1;
                                            $pph_converted1 = $rowPC->pph_converted * -1;
                                            $insertValues .= "(2, '{$source}', NULL, 1, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$amount_converted1}),";
                                            $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$apph_id}, NULL, {$pph_converted1})";
                                        } else {
                                            $insertValues .= "(1, '{$source}', NULL, 1, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}),";
                                            $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted})";
                                        }
                                    } else {
                                        if ($rowPC->amount_converted < 0) {
                                            $amount_converted1 = $rowPC->amount_converted * -1;
                                            $pph_converted1 = $rowPC->pph_converted * -1;
                                            $insertValues .= "(1, '{$source}', NULL, 1, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$amount_converted1}),";
                                            $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$apph_id}, NULL, {$pph_converted1})";
                                        } else {
                                            $insertValues .= "(2, '{$source}', NULL, 1, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}),";
                                            $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted})";
                                        }
                                    }
                                }
                            } else {
                                if ($rowPC->payment_cash_id != '' || $rowPC->payment_cash_id != 0 || $rowPC->payment_cash_id != 'NULL') {
                                    if ($paymentStatus == 1) {
                                        if ($rowPC->amount_converted < 0) {
                                            $amount_converted1 = $rowPC->amount_converted * -1;
                                            $pph_converted1 = $rowPC->pph_converted * -1;
                                            $ppn_converted1 = $rowPC->ppn_converted * -1;
                                            $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$amount_converted1}),";
                                            $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$apph_id}, NULL, {$pph_converted1}),";
                                            $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$accountId}, NULL,  {$ppn_converted1})";
                                        } else {
                                            $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}),";
                                            $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted}),";
                                            $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$accountId}, NULL,  {$rowPC->ppn_converted})";
                                        }
                                    } else {
                                        if ($rowPC->amount_converted < 0) {
                                            $amount_converted1 = $rowPC->amount_converted * -1;
                                            $pph_converted1 = $rowPC->pph_converted * -1;
                                            $ppn_converted1 = $rowPC->ppn_converted * -1;
                                            $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$amount_converted1}),";
                                            $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$apph_id}, NULL, {$pph_converted1}),";
                                            $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$accountId}, NULL,  {$ppn_converted1})";

                                        } else {
                                            $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}),";
                                            $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted}),";
                                            $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$accountId}, NULL,  {$rowPC->ppn_converted})";
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }

                }
                if ($row->payment_method == 1) {


                    $sqlPayment = "SELECT b.account_id, amount_journal FROM payment p LEFT JOIN bank b ON p.bank_id = b.bank_id WHERE p.payment_id = {$paymentId}";
                    $resultPayment = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT);

                    if ($resultPayment !== false && $resultPayment->num_rows > 0) {
                        while ($rowPayment = $resultPayment->fetch_object()) {


                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }
                            if ($row->payment_type == 1) {
                                if ($rowPayment->account_id != '' || $rowPayment->account_id != 0 || $rowPayment->account_id != 'NULL') {
                                    if ($paymentStatus == 1) {
                                        $insertValues .= "(2, '{$source}', 'Payment', 1, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$rowPayment->amount_journal})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', 'Payment', 1, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$rowPayment->amount_journal})";
                                    }
                                }
                            } else {

                                if (($rowPayment->account_id != '' || $rowPayment->account_id != 0 || $rowPayment->account_id != 'NULL') && $row->amount_journal < 0) {
                                    $amountJournal = $row->amount_journal * -1;
                                    if ($paymentStatus == 1) {
                                        $insertValues .= "(2, '{$source}', 'Payment', 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$amountJournal})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', 'Payment', 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$amountJournal})";
                                    }
                                } elseif ($rowPayment->account_id != '' || $rowPayment->account_id != 0 || $rowPayment->account_id != 'NULL') {
                                    if ($paymentStatus == 1) {
                                        $insertValues .= "(1, '{$source}', 'Payment', 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$rowPayment->amount_journal})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', 'Payment', 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$rowPayment->amount_journal})";
                                    }
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }

                }

                if ($row->payment_method == 2) {
                    $totalCashAmount = 0;
                    $totalCashtDP = 0;


                    $sqlPC = "SELECT pc.*, a.account_no, a.account_name, apph.account_id AS apph_id, apph.account_no AS apph_no, apph.account_name AS apph_name
							  FROM payment_cash pc
								LEFT JOIN account a ON a.`account_id` = pc.`account_id` 
								LEFT JOIN tax txpph ON txpph.`tax_id` = pc.`pphID`
								LEFT JOIN account apph ON apph.`account_id` = txpph.`account_id`
								WHERE pc.`payment_id` = {$paymentId}";
                    $resultPC = $myDatabase->query($sqlPC, MYSQLI_STORE_RESULT);

                    if ($resultPC !== false && $resultPC->num_rows > 0) {
                        while ($rowPC = $resultPC->fetch_object()) {

                            $cashId = $rowPC->payment_cash_id;

                            $amountConv = $rowPC->amount_converted;

                            if ($rowPC->apph_id == '' || $rowPC->apph_id == 0 || $rowPC->apph_id == 'NULL') {
                                $apph_id = 'NULL';
                            } else {
                                $apph_id = $rowPC->apph_id;
                            }

                            if ($rowPC->ppnID != '' || $rowPC->ppnID != 0 || $rowPC->ppnID != 'NULL') {
                                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$rowPC->type}) AND account_no IN (150410)";
                                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                                if ($resultAccount !== false && $resultAccount->num_rows == 1) {
                                    $rowAccount = $resultAccount->fetch_object();
                                    $accountId = $rowAccount->account_id;

                                }
                            }
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowPC->payment_cash_id != '' || $rowPC->payment_cash_id != 0 || $rowPC->payment_cash_id != 'NULL') {
                                if ($paymentStatus == 1) {
                                    if ($rowPC->amount < 0) {
                                        $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}*-1),";
                                        $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted}*-1),";
                                        $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$accountId}, NULL,  {$rowPC->ppn_converted}*-1)";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}),";
                                        $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted}),";
                                        $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$accountId}, NULL,  {$rowPC->ppn_converted})";
                                    }
                                } else {
                                    if ($rowPC->amount < 0) {
                                        $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}*-1),";
                                        $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted}*-1),";
                                        $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$accountId}, NULL,  {$rowPC->ppn_converted}*-1)";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}),";
                                        $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted}),";
                                        $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$accountId}, NULL,  {$rowPC->ppn_converted})";
                                    }
                                }
                            }

                        }
                    } else {
                        $boolContinue = false;
                    }

                }
                if ($row->payment_method == 2) {


                    $sqlPayment = "SELECT b.account_id, amount_journal FROM payment p LEFT JOIN bank b ON p.bank_id = b.bank_id WHERE p.payment_id = {$paymentId}";
                    $resultPayment = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT);

                    if ($resultPayment !== false && $resultPayment->num_rows > 0) {
                        while ($rowPayment = $resultPayment->fetch_object()) {


                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowPayment->account_id != '' || $rowPayment->account_id != 0 || $rowPayment->account_id != 'NULL') {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', 'Down Payment', 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$rowPayment->amount_journal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', 'Down Payment', 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$rowPayment->amount_journal})";
                                }
                            }

                        }
                    } else {
                        $boolContinue = false;
                    }

                }

            } elseif ($row->invoice_id != '') {
                // <editor-fold defaultstate="collapsed" desc="payment PKS kontrak">
                if ($row->payment_method == 1) {
                    $totalInvoiceAmount = 0;
                    $totalInvoicetDP = 0;

                    $sqlInvoice = "SELECT i.*,
                                        (
                                            SELECT COALESCE(SUM(amount_journal), 0) FROM payment
                                            WHERE invoice_id = i.invoice_id
                                            AND payment_method = 2 AND payment_status = 0
                                        ) AS total_dp
                                    FROM invoice i
                                    WHERE i.invoice_id = {$row->invoice_id}";
                    $resultInvoice = $myDatabase->query($sqlInvoice, MYSQLI_STORE_RESULT);

                    if ($resultInvoice !== false && $resultInvoice->num_rows == 1) {
                        $rowInvoice = $resultInvoice->fetch_object();

                        // $totalInvoiceAmount = $rowInvoice->amount;
                        // $totalContractPPN = $rowContract->total_ppn;
                        $totalInvoiceDP = $rowInvoice->total_dp;

                    } else {
                        echo 'false1';
                    }
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}, 7) AND account_no in ({$row->account_no},{$row->ap_account_no}, 130005)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount->account_no == $row->account_no && $row->amount_converted < 0) {
                                $amountConverted = $row->amount_converted * -1;
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', 'Payment', 1, 10, {$contractId},  {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountConverted})";
                                } else {
                                    $insertValues .= "(1, '{$source}', 'Payment', 1, 10, {$contractId},  {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountConverted})";
                                }
                            } elseif ($rowAccount->account_no == $row->ap_account_no && $row->amount_journal < 0) {
                                $amountJournal = $row->amount_journal * -1;
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 1, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL,  {$amountJournal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 1, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL,  {$amountJournal})";
                                }
                            } elseif ($rowAccount->account_no == $row->account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL,  {$row->amount_converted})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL,  {$row->amount_converted})";
                                }
                            } elseif ($rowAccount->account_no == $row->ap_account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL,  {$row->amount_journal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL,  {$row->amount_journal})";
                                }
                            } elseif ($rowAccount->account_no == 130005) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 10, {$contractId},  {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalInvoiceDP})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 10, {$contractId},  {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalInvoiceDP})";
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                        echo 'false2';
                    }
                } elseif ($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}, 7) AND account_no in ({$row->ap_account_no}, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount->account_no == $row->ap_account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', 'Down Payment', 2, 10, {$contractId},  {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', 'Down Payment', 2, 10, {$contractId},  {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                }
                            } elseif ($rowAccount->account_no == $row->account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 10, {$contractId},  {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 10, {$contractId},  {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            } elseif ($row->vendor_id != '') {
                // <editor-fold defaultstate="collapsed" desc="payment PKS curah">
                if ($row->payment_method == 1) {
                    // $totalAmount = 0;
                    //  $totaDP = 0;

                    $sqlAccount2 = "SELECT t.transaction_id, a.account_id, a.account_no,
CASE WHEN c.qty_rule = 0 THEN (t.unit_price * t.send_weight) ELSE (t.unit_price * t.quantity) END AS total_amount
                FROM `transaction` t 
                LEFT JOIN payment p
                    ON t.payment_id = p.payment_id
                 LEFT JOIN account a ON a.account_id = p.account_id
                 LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                 LEFT JOIN contract c ON c.contract_id = sc.contract_id
                               WHERE p.payment_id = {$row->payment_id}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);

                    if ($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while ($rowAccount2 = $resultAccount2->fetch_object()) {

                            /*	if($row->b_currency_id == $row->currency_id && $row->currency_id != 1) {
				                // USD - USD - IDR
				                $totalAll2 = ceil($rowAccount2->amount * $row->exchange_rate);
				            } elseif($row->b_currency_id != $row->currency_id && $row->currency_id != 1) {
				                // IDR - USD - IDR
				                $totalAll2 = $rowAccount2->amount;
				            } elseif($row->b_currency_id != $row->currency_id && $row->currency_id == 1) {
				                // USD - IDR - IDR
				                $totalAll2 = ceil($rowAccount2->amount * $row->exchange_rate);
				            } else {
				                $totalAll2 = $rowAccount2->amount;
				            }
                    */
                            // $totalAmount2 = ceil($totalAll2 - $row->ppn_journal);
                            //$totalDP = $totalAmount - $row->amount_journal;

                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount2->account_no == 210101) {
                                if ($paymentStatus == 1) {
                                    if ($rowAccount2->total_amount < 0) {
                                        $tAmount = $rowAccount2->total_amount * -1;
                                        $insertValues .= "(1, '{$source}', 'Payment', 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount2->account_id}, NULL, {$tAmount})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', 'Payment', 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount2->account_id}, NULL, {$rowAccount2->total_amount})";
                                    }
                                } else {
                                    if ($rowAccount2->total_amount < 0) {
                                        $tAmount = $rowAccount2->total_amount * -1;
                                        $insertValues .= "(2, '{$source}', 'Payment', 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount2->account_id}, NULL, {$tAmount})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', 'Payment', 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount2->account_id}, NULL, {$rowAccount2->total_amount})";
                                    }
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                if ($row->payment_method == 1) {
                    $totalAmount = 0;
                    $totaDP = 0;

                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (150410, 130002, {$row->account_no}, 230204)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if ($row->b_currency_id == $row->currency_id && $row->currency_id != 1) {
                        // USD - USD - IDR
                        $totalAll = $row->amount * $row->exchange_rate;
                    } elseif ($row->b_currency_id != $row->currency_id && $row->currency_id != 1) {
                        // IDR - USD - IDR
                        $totalAll = $row->amount;
                    } elseif ($row->b_currency_id != $row->currency_id && $row->currency_id == 1) {
                        // USD - IDR - IDR
                        $totalAll = $row->amount * $row->exchange_rate;
                    } else {
                        $totalAll = $row->amount;
                    }

                    $totalAmount = $totalAll - $row->ppn_journal;
                    $totalDP = ($totalAll - $row->amount_journal) * -1;

                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount->account_no == 150410) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
                                }
                            } elseif ($rowAccount->account_no == 130002) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalDP})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalDP})";
                                }
                            } elseif ($rowAccount->account_no == $row->account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                }
                            } elseif ($rowAccount->account_no == 230204) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                } elseif ($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (130002, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount->account_no == 130002) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                }
                            } elseif ($rowAccount->account_no == $row->account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            } elseif ($row->freight_id != '') {
                // <editor-fold defaultstate="collapsed" desc="payment FC">
                //alaaaan
                if ($row->payment_method == 1) {


                    $sqlAccount1 = "SELECT t.transaction_id, a.account_id, a.account_no, fc.freight_id, tx.tax_category,
ROUND((CASE WHEN f.freight_rule = 1 THEN t.freight_price * t.send_weight
ELSE t.freight_price * t.freight_quantity END) - COALESCE(ts.amt_claim,0) - (CASE WHEN tx.tax_category = 1 THEN COALESCE(hsw.amt_claim,0)
ELSE COALESCE(hsw.amt_claim,0) END),10) AS total_amount
                FROM `transaction` t
                LEFT JOIN payment p
                    ON t.fc_payment_id = p.payment_id
                 LEFT JOIN account a
                 ON a.account_id = p.account_id
                 LEFT JOIN freight_cost fc
                 ON t.`freight_cost_id` = fc.`freight_cost_id`
		LEFT JOIN freight f
		ON fc.freight_id = f.freight_id
		LEFT JOIN transaction_shrink_weight ts
		ON t.transaction_id = ts.transaction_id
		LEFT JOIN transaction_additional_shrink hsw
				            ON t.transaction_id = hsw.transaction_id
		LEFT JOIN tax tx ON tx.tax_id = f.pph_tax_id
                               WHERE p.payment_id = {$row->payment_id}";
                    $resultAccount1 = $myDatabase->query($sqlAccount1, MYSQLI_STORE_RESULT);


                    if ($resultAccount1 !== false && $resultAccount1->num_rows > 0) {
                        while ($rowAccount1 = $resultAccount1->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount1->account_no == 210103) {
                                if ($paymentStatus == 1) {
                                    if ($rowAccount1->total_amount < 0) {
                                        $tAmount = $rowAccount1->total_amount * -1;
                                        $insertValues .= "(1, '{$source}', 'Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount1->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount1->account_id}, NULL, {$tAmount})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', 'Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount1->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount1->account_id}, NULL, {$rowAccount1->total_amount})";
                                    }
                                } else {
                                    if ($rowAccount1->total_amount < 0) {
                                        $tAmount = $rowAccount1->total_amount * -1;
                                        $insertValues .= "(2, '{$source}', 'Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount1->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount1->account_id}, NULL, {$tAmount})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', 'Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount1->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount1->account_id}, NULL, {$rowAccount1->total_amount})";
                                    }
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }

                if ($row->payment_method == 1) {
                    $totalDP = 0;
                    $totalPPN_dp = 0;
                    $totalPPhDP = 0;
                    if ($row->f_account_no == '' || $row->f_account_no == 'NULL') {
                        $f_account_no = 0;
                    } else {
                        $f_account_no = $row->f_account_no;
                    }

                    /*$sqlFDP = "SELECT
IFNULL((SELECT SUM(amount_journal) FROM payment WHERE freight_id = p.freight_id AND payment_method = 2 AND payment_status = 0 AND payment_date > '2016-07-31' AND amount_converted < original_amount),0) AS dp,
IFNULL((SELECT SUM(ppn_journal) FROM payment WHERE freight_id = p.freight_id AND payment_method = 2 AND payment_status = 0 AND payment_date > '2016-07-31' AND amount_converted < original_amount),0) AS dp_ppn,
IFNULL((SELECT SUM(pph_journal) FROM payment WHERE freight_id = p.freight_id AND payment_method = 2 AND payment_status = 0 AND payment_date > '2016-07-31' AND amount_converted < original_amount),0) AS dp_pph
FROM payment p WHERE p.payment_id = {$row->payment_id}";
					$resultFDP = $myDatabase->query($sqlFDP, MYSQLI_STORE_RESULT);*/

                    /*$sqlFDP = "SELECT ((p.amount_converted - p.original_amount_converted) / ((100 - f.pph)/100)) AS dp, 
((p.amount_converted - p.original_amount_converted) / ((100 - f.pph)/100)) - (p.amount_converted - p.original_amount_converted) AS dp_pph,
0 AS dp_ppn,tx.tax_category, p.original_amount
FROM payment p 
LEFT JOIN freight f ON f.`freight_id` = p.`freight_id`
LEFT JOIN tax tx ON tx.`tax_id` = f.`pph_tax_id`
WHERE p.payment_id = {$row->payment_id}";*/
                    $sqlFDP = "SELECT ((p.amount_converted - p.original_amount_converted)) AS dp, 
((p.amount_converted - p.original_amount_converted) / ((100 - f.pph)/100)) - (p.amount_converted - p.original_amount_converted) AS dp_pph,
0 AS dp_ppn,tx.tax_category, p.original_amount, p.freightDP, f.ppn, f.pph
FROM payment p 
LEFT JOIN freight f ON f.`freight_id` = p.`freight_id`
LEFT JOIN tax tx ON tx.`tax_id` = f.`pph_tax_id`
WHERE p.payment_id = {$row->payment_id}";
                    $resultFDP = $myDatabase->query($sqlFDP, MYSQLI_STORE_RESULT);

                    if ($resultFDP !== false && $resultFDP->num_rows > 0) {
                        while ($rowFDP = $resultFDP->fetch_object()) {


                            /*if ($rowFDP->tax_category == 0) {

                                $dp = $rowFDP->dp;
                                $dp_ppn = $rowFDP->dp_ppn;
                                $dp_pph = $rowFDP->dp_pph;

                            } else {
                                $dp = $rowFDP->dp;
                                $dp_ppn = $rowFDP->dp_ppn;
                                $dp_pph = $rowFDP->dp_pph;
                            }*/


                            /*$dp_pph = $row->pph_journal;

                            if($row->ppn_journal > 0){
                                $dp_ppn = $row->ppn_journal;
                            }else{
                                $dp_ppn = 0;
                            }

                            $dp = $rowFDP->dp + $dp_pph - $dp_ppn;*/


                            $dp = $rowFDP->freightDP;
                            $dp_pph = $rowFDP->freightDP * (($rowFDP->pph) / 100);
                            $dp_ppn = $rowFDP->freightDP * (($rowFDP->ppn) / 100);
                            $ppnoa = $rowFDP->ppn;


                            /*if($row->original_amount == 0){
                                $dp_ppn =  0;
                                $ppn_journal = 0;
                            }else{
                                $dp_ppn =  $rowFDP->freightDP * (($rowFDP->ppn)/100);
                                $ppn_journal = $row->ppn_journal;
                            }*/

                        }
                    }

                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (150410)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }
                            if ($rowAccount->account_no == 150410) {
                                $ppnTotal = $row->amount * ($ppnoa / 100);
                                //$ppnTotal = $dp_ppn;
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppnTotal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppnTotal})";
                                }
                            }

                        }
                    }

                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (150410, 130003, {$row->account_no},{$f_account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    /*if($row->original_amount <= 0 && $row->amount >= 0){
					$totalDP = ($row->amount - $row->ppn_journal) + $row->pph_journal;
					$totalPPhDP = $row->pph_journal;
					$totalPPN_dp = $row->ppn_journal;
					}elseif($row->amount >= 0){
					$totalDP = (($row->amount - $row->original_amount)/((100 - $row->f_pph_tax)/100));
					$totalPPhDP = $totalDP - ($row->amount - $row->original_amount);
					$totalPPN_dp = $totalDP * ($row->f_ppn_tax/100);
					}*/

                    /*if($row->fc_tax_category == 0 && $row->ppn_journal > 0 && $totalDP > 0){
					$amountJournal = (($row->amount - $row->ppn_journal) + $row->pph_journal) - $totalDP;
					}elseif($row->fc_tax_category == 0 && $totalDP > 0 && $totalPPN_dp > 0){
					$amountJournal = ($row->original_amount + $row->pph_journal) - $totalPPN_dp;
					}elseif($totalDP > 0 && $totalPPN_dp > 0){
					$amountJournal = $row->original_amount - $totalPPN_dp;
					}elseif($row->fc_tax_category == 0){
					$amountJournal = ($row->original_amount + $row->pph_journal);
					}else{
					$amountJournal = $row->original_amount;
					}*/

                    if ($row->fc_tax_category == 0 && $row->original_amount > 0 && $row->freightDP > 0) {

                        $amountJournal = ($row->original_amount + $row->pph_journal);
                    }elseif ($row->fc_tax_category == 0 && $row->original_amount > 0) {

                        $amountJournal = ($row->original_amount + $row->pph_journal);
                    }elseif ($row->freightDP > 0) {

                        $amountJournal = ($row->original_amount);
                    }else {
                        $amountJournal = $row->original_amount;
                    }
					//aaaa
					
                    //echo $sqlAccount;

                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }
                            if ($rowAccount->account_no == 150410) {
                                //$ppnTotal = $row->ppn_journal - $dp_ppn;
                                $ppnTotal = $dp_ppn;
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppnTotal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppnTotal})";
                                }
                            } elseif ($rowAccount->account_no == 130003) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', 'DP', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$dp})";
                                } else {
                                    $insertValues .= "(2, '{$source}', 'DP', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$dp})";
                                }
                            } elseif ($rowAccount->account_no == $f_account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', 'DP', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$dp_pph})";
                                } else {
                                    $insertValues .= "(1, '{$source}', 'DP', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$dp_pph})";
                                }
                            } elseif ($rowAccount->account_no == $row->account_no && $amountJournal < 0) {
                                $amountJournalIN = $amountJournal * -1;
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournalIN})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournalIN})";
                                }
                            } elseif ($rowAccount->account_no == $row->account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournal})";
                                }
                            } elseif ($rowAccount->account_no == $f_account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                } elseif ($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (130003, {$row->account_no} , {$row->f_account_no}, 150410)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount->account_no == 130003) {
                                $f_amountJournal = ($row->amount_journal + $row->ppn_journal) - $row->pph_journal;
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                }
                            } elseif ($rowAccount->account_no == $row->account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$f_amountJournal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$f_amountJournal})";
                                }
                            } elseif ($rowAccount->account_no == $row->f_account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
                                }
                            } elseif ($rowAccount->account_no == 150410) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            } elseif ($row->vendor_handling_id != '') {
                // <editor-fold defaultstate="collapsed" desc="payment HC">
                if ($row->payment_method == 1) {

                    $sqlAccount1 = "SELECT t.transaction_id, a.account_id, a.account_no, vhc.vendor_handling_id,
vhc.price_converted * t.handling_quantity AS total_amount

                FROM `transaction` t 
                LEFT JOIN payment p
                    ON t.hc_payment_id = p.payment_id
                 LEFT JOIN account a
                 ON a.account_id = p.account_id
                 LEFT JOIN vendor_handling_cost vhc
                 ON t.`handling_cost_id` = vhc.`handling_cost_id`
				 LEFT JOIN vendor_handling vh 
				 ON vhc.vendor_handling_id = vh.vendor_handling_id
                               WHERE p.payment_id = {$row->payment_id}";
                    $resultAccount1 = $myDatabase->query($sqlAccount1, MYSQLI_STORE_RESULT);


                    if ($resultAccount1 !== false && $resultAccount1->num_rows > 0) {
                        while ($rowAccount1 = $resultAccount1->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount1->account_no == 210106) {
                                if ($paymentStatus == 1) {
                                    if ($rowAccount1->total_amount < 0) {
                                        $totAmount = $rowAccount1->total_amount * -1;
                                        $insertValues .= "(1, '{$source}', 'Payment', 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount1->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount1->account_id}, NULL, {$totAmount})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', 'Payment', 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount1->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount1->account_id}, NULL, {$rowAccount1->total_amount})";
                                    }
                                } else {
                                    if ($rowAccount1->total_amount < 0) {
                                        $totAmount = $rowAccount1->total_amount * -1;
                                        $insertValues .= "(2, '{$source}', 'Payment', 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount1->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount1->account_id}, NULL, {$totAmount})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', 'Payment', 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount1->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount1->account_id}, NULL, {$rowAccount1->total_amount})";
                                    }
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }

                if ($row->payment_method == 1) {
                    $totaDP = 0;
                    $totalPPhDP = 0;
                    if ($row->vh_account_no == '' || $row->vh_account_no == 'NULL') {
                        $vh_account_no = 0;
                    } else {
                        $vh_account_no = $row->vh_account_no;
                    }
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (9, 7) AND account_no in (150410, 130006, {$row->account_no},{$vh_account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if ($row->amount_journal < 0) {
                        $totalDP = $row->handlingDP;
                        $totalPPhDP = ($totalDP * (($row->vh_pph_tax) / 100)) /*/ (100 - $row->vh_pph_tax / 100)) - $totalDP*/
                        ;
                    } else {
                        $totalDP = $row->handlingDP;/*/ ((100 - $row->vh_pph_tax) / 100));*/
                        $totalPPhDP = $totalDP * (($row->vh_pph_tax) / 100) /*- ($row->amount - $row->amount_journal)*/
                        ;
                    }

                    if ($row->vhc_tax_category == 0) {
                        $amountJournal = $row->original_amount + $row->pph_journal;
                    } else {
                        $amountJournal = $row->original_amount;
                    }


                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }
                            if ($rowAccount->account_no == 150410) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
                                }
                            } elseif ($rowAccount->account_no == 130006 && $totalDP !== 0) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', 'DP', 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalDP})";
                                } else {
                                    $insertValues .= "(2, '{$source}', 'DP', 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalDP})";
                                }
                            } elseif ($rowAccount->account_no == $vh_account_no && $totalPPhDP !== 0) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', 'DP', 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalPPhDP})";
                                } else {
                                    $insertValues .= "(1, '{$source}', 'DP', 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalPPhDP})";
                                }
                            } elseif ($rowAccount->account_no == $row->account_no && $amountJournal < 0) {
                                $amountJournalIN = $amountJournal * -1;
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournalIN})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournalIN})";
                                }
                            } elseif ($rowAccount->account_no == $row->account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournal})";
                                }
                            } elseif ($rowAccount->account_no == $vh_account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                } elseif ($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (9, 7) AND account_no in (130006, {$row->account_no} , {$row->vh_account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount->account_no == 130006) {
                                $vh_amountJournal = $row->amount_journal - $row->pph_journal;
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                }
                            } elseif ($rowAccount->account_no == $row->account_no) {
                                $vh_amountJournal = $row->amount_journal - $row->pph_journal;
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$vh_amountJournal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$vh_amountJournal})";
                                }
                            } elseif ($rowAccount->account_no == $row->vh_account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            } elseif ($row->labor_id != '') {
                // <editor-fold defaultstate="collapsed" desc="payment UC">
                if ($row->payment_method == 1) {

                    $sqlAccount1 = "SELECT t.transaction_id, a.account_id, a.account_no, t.unloading_price AS total_amount
                FROM `transaction` t 
                LEFT JOIN payment p
                    ON t.uc_payment_id = p.payment_id
                 LEFT JOIN account a
                 ON a.account_id = p.account_id
                               WHERE p.payment_id = {$row->payment_id}";
                    $resultAccount1 = $myDatabase->query($sqlAccount1, MYSQLI_STORE_RESULT);


                    if ($resultAccount1 !== false && $resultAccount1->num_rows > 0) {
                        while ($rowAccount1 = $resultAccount1->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount1->account_no == 210104) {

                                if ($paymentStatus == 1) {
                                    if ($rowAccount1->total_amount < 0) {
                                        $totalAmt = $rowAccount1->total_amount * -1;
                                        $insertValues .= "(1, '{$source}', 'Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount1->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount1->account_id}, NULL, {$totalAmt})";
                                    } else {
                                        $totAmount = $rowAccount1->total_amount * -1;
                                        $insertValues .= "(2, '{$source}', 'Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount1->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount1->account_id}, NULL, {$rowAccount1->total_amount})";
                                    }
                                } else {
                                    if ($rowAccount1->total_amount < 0) {
                                        $totalAmt = $rowAccount1->total_amount * -1;
                                        $insertValues .= "(2, '{$source}', 'Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount1->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount1->account_id}, NULL, {$totalAmt})";
                                    } else {

                                        $insertValues .= "(1, '{$source}', 'Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount1->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount1->account_id}, NULL, {$rowAccount1->total_amount})";
                                    }
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                if ($row->payment_method == 1) {
                    // $totalAmount = 0;
                    $totaDP = 0;
                    if ($row->u_account_no == '' || $row->u_account_no == 'NULL') {
                        $u_account_no = 0;
                    } else {
                        $u_account_no = $row->u_account_no;
                    }
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (3, 7) AND account_no in ( 150410, 130004, {$row->account_no}, {$u_account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    /* if($row->b_currency_id == $row->currency_id && $row->currency_id != 1) {
				                // USD - USD - IDR
				                $totalAll = ceil($row->amount * $row->exchange_rate);
				            } elseif($row->b_currency_id != $row->currency_id && $row->currency_id != 1) {
				                // IDR - USD - IDR
				                $totalAll = $row->amount;
				            } elseif($row->b_currency_id != $row->currency_id && $row->currency_id == 1) {
				                // USD - IDR - IDR
				                $totalAll = ceil($row->amount * $row->exchange_rate);
				            } else {
				                $totalAll = $row->amount;
				            }
                    */
                    //$totalAmount = ceil($totalAll - $row->ppn_journal);
                    $totalDP = $row->amount - $row->amount_journal;

                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount->account_no == 150410) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
                                }
                            } elseif ($rowAccount->account_no == 130004) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalDP})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalDP})";
                                }
                            } elseif ($rowAccount->account_no == $row->account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                }
                            } elseif ($rowAccount->account_no == $u_account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                } elseif ($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (3, 7) AND account_no in (130004, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount->account_no == 130004) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                }
                            } elseif ($rowAccount->account_no == $row->account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            } elseif ($row->sales_id != '') {
                // <editor-fold defaultstate="collapsed" desc="payment Sales">
                if ($row->payment_method == 1) {
                    $totalSalesAmount = 0;
                    $totalSalesDP = 0;

                    $sqlContract = "SELECT sh.quantity, sl.price_converted, ((100 + cus.`ppn`)/100) AS ppn,
                                        sh.`dp_amount` AS total_dp
                                    FROM payment_detail pd
                                    INNER JOIN shipment sh
                                        ON sh.shipment_id = pd.shipment_id
                                    INNER JOIN sales sl
                                        ON sl.sales_id = sh.sales_id
                                    LEFT JOIN customer cus ON cus.`customer_id` = sl.`customer_id`
                                    WHERE pd.payment_id = {$paymentId}";
                    $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);

                    if ($resultContract !== false && $resultContract->num_rows == 1) {
                        $rowContract = $resultContract->fetch_object();
	
						$amountSales = $rowContract->quantity * $rowContract->price_converted;
						$ppnSales = $rowContract->ppn;
						
                        if ($row->ppn_journal !== 0) {
                            $totalSalesDP = $rowContract->total_dp * $rowContract->ppn;
                        } else {
                            $totalSalesDP = $rowContract->total_dp;
                        }
                    }


                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (210200, 230100,{$row->ap_account_no},  {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($row->ppn_journal != 0) {
                                $totalSalesAmount = $amountSales * $ppnSales;
								//$ppnSales = $amountSales * 0.1;
								$ppnSales = 0;
                            } else {
                                $totalSalesAmount = $amountSales;
                            }
                            if ($rowAccount->account_no == $row->account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', 'Payment', 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', 'Payment', 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                }
                            } elseif ($rowAccount->account_no == 210200) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalSalesDP})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalSalesDP})";
                                }
                            } elseif ($rowAccount->account_no == $row->ap_account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalSalesAmount})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalSalesAmount})";
                                }
                            } elseif ($rowAccount->account_no == 230100) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppnSales})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppnSales})";
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                } elseif ($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (230100, {$row->ap_account_no}, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    $amountJournalDP = $row->amount_journal - $row->ppn_journal;
                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount->account_no == $row->account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', 'Down Payment', 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', 'Down Payment', 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                }
                            } elseif ($rowAccount->account_no == $row->ap_account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournalDP})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournalDP})";
                                }
                            } elseif ($rowAccount->account_no == 230100) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            } elseif ($row->ap_account_type == 7 && $row->stockpile_contract_id == '' && $row->vendor_id == '' && $row->freight_id == '' && $row->labor_id == '' && $row->general_vendor_id == '' && $row->sales_id == '') {
                // <editor-fold defaultstate="collapsed" desc="internal transfer">
                echo $row->ap_account_type;
                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 7 AND account_no in ({$row->ap_account_no}, {$row->account_no})";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while ($rowAccount = $resultAccount->fetch_object()) {
                        if ($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if ($rowAccount->account_no == $row->ap_account_no) {
                            if ($paymentStatus == 1) {
                                $insertValues .= "(2, '{$source}', 'Payment', 2, 6, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                            } else {
                                $insertValues .= "(1, '{$source}', 'Payment', 2, 6, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                            }
                        }
                        if ($rowAccount->account_no == $row->account_no) {
                            if ($paymentStatus == 1) {
                                $insertValues .= "(1, '{$source}', NULL, 2, 6, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                            } else {
                                $insertValues .= "(2, '{$source}', NULL, 2, 6, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                            }
                        }
                    }
                } else {
                    $boolContinue = false;
                }
                //</editor-fold>
            } elseif ($row->payment_type == 1 && $row->ap_account_type != 7 && $row->sales_id == '') {
                // <editor-fold defaultstate="collapsed" desc="in umum ho">
                echo 'test2';
                if ($row->gv_account_no == '' || $row->gv_account_no == 'NULL') {
                    $gv_account_no = 0;
                } elseif ($row->gv_account_no != '' || $row->gv_account_no != 'NULL') {
                    $gv_account_no = $row->gv_account_no;
                }
                $sqlAccount = "SELECT a.* FROM 
				(SELECT account_id, account_no FROM account WHERE account_type in ({$row->ap_account_type}, 7) AND account_no in ({$row->ap_account_no}, {$row->account_no}) UNION ALL SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}) AND account_no in ({$gv_account_no}, 150410))
				 a GROUP BY a.account_no";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while ($rowAccount = $resultAccount->fetch_object()) {
                        if ($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        $totalAmount = $row->amount_journal - $row->ppn_journal;

                        if ($row->ppn_journal != 0 && $row->pph_journal == 0) {
                            $amountJ = $row->amount_journal - $row->ppn_journal;
                        } else {
                            $amountJ = $row->amount_journal;
                        }

                        if ($rowAccount->account_no == $row->account_no) {
                            if ($paymentStatus == 1) {
                                $insertValues .= "(2, '{$source}', 'Payment', 1, 8, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
                            } else {
                                $insertValues .= "(1, '{$source}', 'Payment', 1, 8, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
                            }
                        } elseif ($rowAccount->account_no == $row->ap_account_no) {
                            if ($paymentStatus == 1) {
                                $insertValues .= "(1, '{$source}', NULL, 1, 8, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJ})";
                            } else {
                                $insertValues .= "(2, '{$source}', NULL, 1, 8, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJ})";
                            }
                        } elseif ($rowAccount->account_no == 150410) {
                            if ($paymentStatus == 1) {
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
                            } else {
                                $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
                            }
                        } elseif ($rowAccount->account_no == $gv_account_no && $row->ap_account_no != $gv_account_no) {
                            if ($paymentStatus == 1) {
                                $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
                            } else {
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
                            }
                        } elseif ($rowAccount->account_no == $gv_account_no && $row->ap_account_no == $gv_account_no) {
                            if ($paymentStatus == 1) {
                                $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, 0)";
                            } else {
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, 0)";
                            }
                        }
                    }
                } else {
                    $boolContinue = false;
                }
                // </editor-fold>
            } elseif ($row->payment_type == 2 && $row->stockpile_contract_id == '' && $row->vendor_id == '' && $row->freight_id == '' && $row->labor_id == '' && $row->general_vendor_id != '') {
                // <editor-fold defaultstate="collapsed" desc="out other with general vendor">

                if ($row->payment_method == 1) {

                    if ($row->gv_account_no == '' || $row->gv_account_no == 'NULL') {
                        $gv_account_no = 0;
                    } elseif ($row->gv_account_no != '' || $row->gv_account_no != 'NULL') {
                        $gv_account_no = $row->gv_account_no;
                    }

                    $account_no = $row->account_no;
                    $ap_account_no = $row->ap_account_no;
                    $ppn_journal = $row->ppn_journal;
                    $pph_journal = $row->pph_journal;
                    $amount_journal = $row->amount_journal;
                    $ap_account_type = $row->ap_account_type;
                    $totalAmount = 0;
                    $totaDP = 0;
                    //$totalAll = $row->amount;

                    $sqlAccount = "SELECT a.* FROM (SELECT account_id, account_no FROM account WHERE account_type IN ({$ap_account_type}, 7) AND account_no IN (130005, {$account_no}, {$ap_account_no})
					UNION ALL SELECT account_id, account_no FROM account WHERE account_type IN ({$ap_account_type}) AND account_no IN ({$gv_account_no}, 150410))a GROUP BY a.account_no";

                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if ($row->b_currency_id == $row->currency_id && $row->currency_id != 1) {
                        // USD - USD - IDR
                        $totalAll = $row->amount * $row->exchange_rate;
                    } elseif ($row->b_currency_id != $row->currency_id && $row->currency_id != 1) {
                        // IDR - USD - IDR
                        $totalAll = $row->amount;
                    } elseif ($row->b_currency_id != $row->currency_id && $row->currency_id == 1) {
                        // USD - IDR - IDR
                        $totalAll = $row->amount * $row->exchange_rate;
                    } else {
                        $totalAll = $row->amount;
                    }

                    $totalAmount = $totalAll - $ppn_journal;
                    $totalDP = 0;

                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount->account_no == $ap_account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', 'Payment', 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
                                } else {
                                    $insertValues .= "(1, '{$source}', 'Payment', 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
                                }
                            } elseif ($rowAccount->account_no == 130005) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalDP})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalDP})";
                                }
                            } elseif ($rowAccount->account_no == $account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount_journal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount_journal})";
                                }
                            } elseif ($rowAccount->account_no == 150410) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId},{$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn_journal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId},{$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn_journal})";
                                }
                            } elseif ($rowAccount->account_no == $gv_account_no && $gv_account_no != $ap_account_no && $rowAccount->gv_pph_tax_id == 21) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph_journal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph_journal})";
                                }
                            } elseif ($rowAccount->account_no == $gv_account_no && $gv_account_no != $ap_account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph_journal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph_journal})";
                                }
                            } elseif ($rowAccount->account_no == $gv_account_no && $gv_account_no == $ap_account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, 0)";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, 0)";
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                        echo 'FALSE 2';
                    }
                } elseif ($row->payment_method == 2) {
                    if ($row->gv_account_no == '' || $row->gv_account_no == 'NULL') {
                        $gv_account_no = 0;
                    } elseif ($row->gv_account_no != '' || $row->gv_account_no != 'NULL') {
                        $gv_account_no = $row->gv_account_no;
                    }
                    $sqlAccount = "SELECT a.* FROM (SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}, 7) AND account_no IN ({$row->account_no}, {$row->ap_account_no})
					UNION ALL SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}) AND account_no IN ({$gv_account_no}, 150410)) a GROUP BY a.account_no";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount->account_no == $row->ap_account_no) {
                                $amountJournal = $row->amount_journal - $row->ppn_journal;
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', 'Down Payment', 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', 'Down Payment', 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournal})";
                                }
                            } elseif ($rowAccount->account_no == $row->account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                }
                            } elseif ($rowAccount->account_no == 150410) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
                                }
                            } elseif ($rowAccount->account_no == $gv_account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;


                    }
                }
                // </editor-fold>
            } elseif ($row->payment_type == 2 && $row->stockpile_contract_id == '' && $row->vendor_id == '' && $row->freight_id == '' &&
                $row->labor_id == '' && $row->general_vendor_id == '') {
                // <editor-fold defaultstate="collapsed" desc="out other without general vendor">
                if ($row->payment_method == 1) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}, 7) AND account_no in ({$row->account_no}, {$row->ap_account_no}) GROUP BY account_no";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    $totalAmount = ceil($row->amount_journal - $row->ppn_journal);

                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount->account_no == $row->ap_account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', 'Payment', 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
                                } else {
                                    $insertValues .= "(1, '{$source}', 'Payment', 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
                                }
                            } elseif ($rowAccount->account_no == $row->account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                } elseif ($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}, 7) AND account_no in (130005, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount->account_no == 130005) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(2, '{$source}', 'Down Payment', 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                } else {
                                    $insertValues .= "(1, '{$source}', 'Down Payment', 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                }
                            } elseif ($rowAccount->account_no == $row->account_no) {
                                if ($paymentStatus == 1) {
                                    $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            } else {
                $boolContinue = false;
            }
        } else {
            $boolContinue = false;
        }


        // </editor-fold>
    } elseif ($returnId != 'NULL') {
        // <editor-fold defaultstate="collapsed" desc="return payment">

        $sql = "SELECT p.*, a.account_no, ap.account_type AS ap_account_type, ap.account_no AS ap_account_no,
                    b.currency_id AS b_currency_id
                FROM payment p 
                INNER JOIN bank b
                    ON b.bank_id = p.bank_id
                INNER JOIN account a
                    ON a.account_id = b.account_id
                INNER JOIN account ap
                    ON ap.account_id = p.account_id 		   
                WHERE p.payment_id = {$returnId} AND payment_status = 0";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();

            // <editor-fold defaultstate="collapsed" desc="in return">
            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 7 AND account_no in ({$row->account_no})";
            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

            if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                while ($rowAccount = $resultAccount->fetch_object()) {
                    if ($insertValues != "") {
                        $insertValues .= ", ";
                    }

                    if ($rowAccount->account_no == $row->account_no) {
                        $insertValues .= "(1, '{$source}', 'Payment', 1, 7, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$returnId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                    }
                }

                if ($insertValues != "") {
                    $insertValues .= ", ";
                }

                $insertValues .= "(2, '{$source}', NULL, 1, 7, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$returnId}, {$jurnalId}, 0, 0, {$row->account_id}, NULL, {$row->amount_journal})";
            } else {
                $boolContinue = false;
            }
            // </editor-fold>
        } else {
            $boolContinue = false;
        }

        // </editor-fold>
    }

    if ($boolContinue) {
        // INSERT
        $sql = "INSERT INTO general_ledger (general_ledger_type, general_ledger_module, general_ledger_method, general_ledger_transaction_type, general_ledger_for, contract_id, invoice_id, transaction_id, t_id, payment_id, jurnal_id, i_id, cash_id, account_id, description, amount) VALUES {$insertValues}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result === false) {
            echo 'FALSE';
            echo '</br>';
            echo $insertValues;
            echo '</br>';

        } else {
            echo 'TRUE';
            echo $sql;
        }
    }

}

function insertReportGL($myDatabase, $source, $invoiceId = "NULL", $i_id = "NULL", $contractId = "NULL", $transactionId = "NULL", $paymentId = "NULL", $jurnalId = "NULL", $returnId = "NULL")
{

    $whereCondition = '';


    $adjustmentId = "NULL";
    if ($contractId != 'NULL' && $source != 'STOCK TRANSIT' && $source == 'CONTRACT ADJUSTMENT') {


        $sql = "SELECT * FROM contract_adjustment WHERE adj_id = {$contractId}";
        $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($resultTaken !== false && $resultTaken->num_rows == 1) {
            $rowTaken = $resultTaken->fetch_object();

            $contractId = $rowTaken->contract_id;
            $adjustmentId = $rowTaken->adj_id;


        }

        $sqlDelete = "UPDATE gl_report SET regenerate = 1 WHERE contract_id = {$contractId} AND general_ledger_module = 'CONTRACT ADJUSTMENT' AND adj = {$adjustmentId}";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.contract_id = {$contractId} AND gl.general_ledger_module = 'CONTRACT ADJUSTMENT' AND description = '{$adjustmentId}'";

    } elseif ($contractId != 'NULL' && $source == 'STOCK TRANSIT' && $source != 'CONTRACT ADJUSTMENT') {
        $sqlNew = "SELECT * FROM stock_transit st
        LEFT JOIN stockpile_contract sc ON sc.`stockpile_contract_id` = st.`stockpile_contract_id`
        LEFT JOIN contract c ON c.`contract_id` = sc.`contract_id`
        WHERE st.`stock_transit_id` = {$contractId}";
        $result1 = $myDatabase->query($sqlNew, MYSQLI_STORE_RESULT);
        if($result1 !== false && $result1->num_rows == 1) {
        $row1 = $result1->fetch_object();
        $contractId1 = $row1->contract_id;
		$kodeStockTransit = $row1->kode_stock_transit;
    }
        $sqlDelete = "UPDATE gl_report SET regenerate = 1 WHERE contract_id = {$contractId1} AND general_ledger_module = 'STOCK TRANSIT' and jurnal_no = {$kodeStockTransit}";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.contract_id = {$contractId1} and description = {$contractId} AND gl.general_ledger_module = 'STOCK TRANSIT'";

    } elseif ($contractId != 'NULL' && $source != 'STOCK TRANSIT' && $source != 'CONTRACT ADJUSTMENT') {
		
	$sql = "SELECT contract_status FROM contract  WHERE contract_id = {$contractId}";
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    echo $sql;

	if ($result->num_rows == 1) {
        $row = $result->fetch_object();
		$contract_status = $row->contract_status;
		
        
    }	if($contract_status == 2){
        $whereCondition .= "AND gl.contract_id = {$contractId} AND gl.general_ledger_module = 'CONTRACT' AND gl.description = 'cancel kontrak' ";
		
	}else{
		$sqlDelete = "UPDATE gl_report SET regenerate = 1 WHERE contract_id = {$contractId} AND general_ledger_module = 'CONTRACT'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.contract_id = {$contractId} AND gl.general_ledger_module = 'CONTRACT'";
		 
	}

    } elseif ($jurnalId != 'NULL') {

        $sqlDelete = "UPDATE gl_report SET regenerate = 1 WHERE jurnal_id = {$jurnalId} AND general_ledger_module = 'JURNAL MEMORIAL'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.jurnal_id = {$jurnalId} AND gl.general_ledger_module = 'JURNAL MEMORIAL'";

    } elseif ($invoiceId != 'NULL' && $source == 'RETURN INVOICE') {

        $sqlDelete = "UPDATE gl_report SET regenerate = 1 WHERE invoice_id = {$invoiceId} AND general_ledger_module = 'RETURN INVOICE'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.invoice_id = {$invoiceId} AND gl.general_ledger_module = 'RETURN INVOICE'";

    } elseif ($invoiceId != 'NULL' && $source == 'INVOICE DETAIL') {

        $sqlDelete = "UPDATE gl_report SET regenerate = 1 WHERE invoice_id = {$invoiceId} AND general_ledger_module = 'INVOICE DETAIL'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.invoice_id = {$invoiceId} AND gl.general_ledger_module = 'INVOICE DETAIL'";

    } elseif ($invoiceId != 'NULL' && $source == 'INVOICE SALES') {

        $sqlDelete = "UPDATE gl_report SET regenerate = 1 WHERE invoice_id = {$invoiceId} AND general_ledger_module = 'INVOICE SALES'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.invoice_id = {$invoiceId} AND gl.general_ledger_module = 'INVOICE SALES'";

    } elseif ($invoiceId != 'NULL' && $source == 'RETURN INVOICE SALES') {

        $sqlDelete = "UPDATE gl_report SET regenerate = 1 WHERE invoice_id = {$invoiceId} AND general_ledger_module = 'RETURN INVOICE SALES'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.invoice_id = {$invoiceId} AND gl.general_ledger_module = 'RETURN INVOICE SALES'";

    } elseif ($invoiceId != 'NULL' && $source == 'INVOICE SALES OA') {

        $sqlDelete = "UPDATE gl_report SET regenerate = 1 WHERE invoice_id = {$invoiceId} AND general_ledger_module = 'INVOICE SALES OA'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.invoice_id = {$invoiceId} AND gl.general_ledger_module = 'INVOICE SALES OA'";

    } elseif ($invoiceId != 'NULL' && $source == 'RETURN INVOICE SALES OA') {

        $sqlDelete = "UPDATE gl_report SET regenerate = 1 WHERE invoice_id = {$invoiceId} AND general_ledger_module = 'RETURN INVOICE SALES OA'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.invoice_id = {$invoiceId} AND gl.general_ledger_module = 'RETURN INVOICE SALES OA'";

    }elseif ($transactionId != 'NULL' && $source == 'NOTA TIMBANG2') {

        $sqlDelete = "UPDATE gl_report SET regenerate = 1 WHERE transaction_id = {$transactionId} AND general_ledger_module = 'NOTA TIMBANG2'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.transaction_id = {$transactionId} AND gl.general_ledger_module = 'NOTA TIMBANG2'";

    } elseif ($transactionId != 'NULL' && $source == 'NOTA TIMBANG') {

        $sqlDelete = "UPDATE gl_report SET regenerate = 1 WHERE transaction_id = {$transactionId} AND general_ledger_module = 'NOTA TIMBANG'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.transaction_id = {$transactionId} AND gl.general_ledger_module = 'NOTA TIMBANG'";

    } elseif ($paymentId != 'NULL' && $source == 'PAYMENT') {

        $sqlDelete = "UPDATE gl_report SET regenerate = 1 WHERE payment_id = {$paymentId} AND general_ledger_module = 'PAYMENT'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.payment_id = {$paymentId} AND gl.general_ledger_module = 'PAYMENT'";

    } elseif ($paymentId != 'NULL' && $source == 'PAYMENT ADMIN') {

        $sqlDelete = "UPDATE gl_report SET regenerate = 1 WHERE payment_id = {$paymentId} AND general_ledger_module = 'PAYMENT ADMIN'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.payment_id = {$paymentId} AND gl.general_ledger_module = 'PAYMENT ADMIN'";

    } elseif ($paymentId != 'NULL' && $source == 'PETTY CASH') {

        $sqlDelete = "UPDATE gl_report SET regenerate = 1 WHERE payment_id = {$paymentId} AND general_ledger_module = 'PETTY CASH'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.payment_id = {$paymentId} AND gl.general_ledger_module = 'PETTY CASH'";

    } elseif ($paymentId != 'NULL' && $source == 'RETURN PAYMENT') {

        $sqlDelete = "UPDATE gl_report SET regenerate = 1 WHERE payment_id = {$paymentId} AND general_ledger_module = 'RETURN PAYMENT'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.payment_id = {$paymentId} AND gl.general_ledger_module = 'RETURN PAYMENT'";

    }

    $sqla = "SELECT gl.*,
    (SELECT `amount` FROM  payment p WHERE p.payment_id = gl.payment_id  ) AS amountPayment , 
    (SELECT `pph_journal` FROM  payment p WHERE p.payment_id = gl.payment_id  ) AS pph_journal ,
    (SELECT `ppn_journal` FROM  payment p WHERE p.payment_id = gl.payment_id  ) AS ppn_journal,
    (SELECT `account_no` FROM  account a WHERE a.account_id = gl.account_id) AS account_no,
    (SELECT `account_name` FROM  account a WHERE a.account_id = gl.account_id) AS account_name,
        
        CASE WHEN gl.general_ledger_transaction_type = 1 THEN 'IN'
            WHEN gl.general_ledger_transaction_type = 2 THEN 'OUT'
            ELSE '' END AS general_ledger_transaction_type2,
                    
        CASE WHEN gl.general_ledger_for = 1 THEN 'PKS Kontrak'
            WHEN gl.general_ledger_for = 2 THEN 'PKS Curah'
            WHEN gl.general_ledger_for = 3 THEN 'Freight Cost'
            WHEN gl.general_ledger_for = 4 THEN 'Unloading Cost'
            WHEN gl.general_ledger_for = 5 THEN 'Other'
            WHEN gl.general_ledger_for = 6 THEN 'Internal Transfer'
            WHEN gl.general_ledger_for = 7 THEN 'Retur'
            WHEN gl.general_ledger_for = 8 THEN 'Umum, HO'
            WHEN gl.general_ledger_for = 9 THEN 'Sales'
            WHEN gl.general_ledger_for = 10 THEN 'Invoice'
            WHEN gl.general_ledger_for = 11 THEN 'Jurnal Memorial'
            WHEN gl.general_ledger_for = 13 THEN 'Handling Cost'
            WHEN gl.general_ledger_for = 14 THEN 'Freight Cost Shrink'
            ELSE '' END AS general_ledger_for2,
            
        CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT s.stockpile_name FROM stockpile_contract sc INNER JOIN stockpile s ON s.stockpile_id = sc.stockpile_id
     WHERE sc.contract_id = gl.contract_id AND sc.quantity > 0 ORDER BY sc.`stockpile_contract_id` ASC LIMIT 1)
            
            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES' OR gl.general_ledger_module = 'RETURN INVOICE SALES') THEN (SELECT s.stockpile_name FROM stockpile s LEFT JOIN pengajuan_payment_sales a ON a.stockpile_id = s.stockpile_id LEFT JOIN invoice_sales b ON b.idPP = a.idPP WHERE b.inv_notim_id = gl.invoice_id)

            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES OA' OR gl.general_ledger_module = 'RETURN INVOICE SALES OA') THEN (SELECT s.stockpile_name FROM stockpile s LEFT JOIN pengajuan_payment_sales_oa a ON a.stockpile_location = s.stockpile_id LEFT JOIN invoice_sales_oa b ON b.idPP = a.idPP WHERE b.inv_notim_id = gl.invoice_id)

            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT s.stockpile_name FROM stockpile s LEFT JOIN invoice i ON i.stockpileId = s.stockpile_id LEFT JOIN invoice_detail id ON i.`invoice_id` = id.`invoice_id` WHERE id.invoice_detail_id = gl.invoice_id)
            WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) !=0 THEN (SELECT s.stockpile_name FROM stockpile s WHERE s.stockpile_code = (SELECT SUBSTR(slip_no,1,3) FROM TRANSACTION WHERE transaction_id = gl.transaction_id))
            WHEN gl.transaction_id IS NOT NULL AND gl.account_id != 8 AND gl.account_id != 51 AND gl.general_ledger_for = 2 AND (SELECT return_shipment FROM contract c WHERE c.contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id  = (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.transaction_id)))
            THEN (SELECT stockpile_name FROM stockpile WHERE stockpile_id = 
                (SELECT stockpile_id FROM sales WHERE sales_id = (SELECT sales_id FROM shipment WHERE shipment_id = 
                (SELECT return_shipment_id FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = 
                (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.transaction_id))))))

            WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 3) AND (SELECT shipment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL
            THEN (SELECT s.stockpile_name FROM stockpile s LEFT JOIN sales sl ON s.stockpile_id = sl.stockpile_id LEFT JOIN shipment sh ON sl.sales_id = sh.sales_id LEFT JOIN `transaction` t ON t.shipment_id = sh.shipment_id WHERE gl.transaction_id = t.transaction_id)

            WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14)
            THEN (SELECT s.stockpile_name FROM stockpile_contract sc INNER JOIN stockpile s ON s.stockpile_id = sc.stockpile_id INNER JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id WHERE gl.transaction_id = t.transaction_id)
            
            WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT s.stockpile_name FROM stockpile s INNER JOIN sales sl ON s.stockpile_id = sl.stockpile_id INNER JOIN shipment sh ON sh.sales_id = sl.sales_id INNER JOIN `transaction` t ON t.shipment_id = sh.shipment_id WHERE gl.transaction_id = t.transaction_id) 
            WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 5 OR gl.general_ledger_for = 6 OR gl.general_ledger_for = 8 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 10 OR gl.general_ledger_for = 12 OR gl.general_ledger_for = 13) THEN (SELECT s.stockpile_name FROM 					stockpile s INNER JOIN payment p ON p.stockpile_location = s.stockpile_id WHERE gl.payment_id = p.payment_id)
            WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT s.stockpile_name FROM stockpile s LEFT JOIN gl_detail jd ON jd.stockpile_id = s.stockpile_id WHERE jd.gl_detail_id = gl.jurnal_id) 
            ELSE '' END AS stockpile_name2,

                
        CASE WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) 
            THEN (SELECT t.slip_no FROM `transaction` t WHERE t.transaction_id = gl.transaction_id)
            WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13)
            THEN (SELECT t.slip_no FROM `transaction` t WHERE t.transaction_id = gl.t_id)
            WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT t.slip_no FROM `transaction` t LEFT JOIN gl_add jm ON jm.transaction_id = t.transaction_id LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id) 
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT t.slip_no FROM `transaction` t LEFT JOIN payment_cash pc ON pc.transaction_id = t.transaction_id WHERE pc.payment_cash_id = gl.cash_id)
           
            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES' OR gl.general_ledger_module = 'RETURN INVOICE SALES') THEN (SELECT t.slip_no FROM TRANSACTION t WHERE t.transaction_id = gl.t_id)
           
            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES OA' OR gl.general_ledger_module = 'RETURN INVOICE SALES OA') THEN (SELECT t.slip_no FROM TRANSACTION t WHERE t.transaction_id = gl.t_id)

            ELSE '' END AS slip_no,
                  
        CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT vendor_name FROM vendor WHERE vendor_id = (SELECT vendor_id FROM contract WHERE contract_id = gl.contract_id))
            WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) != 0 THEN 'ADJUSTMENT AUDIT'	
            
            WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 3) AND (SELECT shipment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL
            THEN (SELECT a.freight_supplier FROM freight_local_sales a LEFT JOIN freight_cost_local_sales b ON a.freight_id = b.freight_id LEFT JOIN `transaction` t ON t.freight_cost_id = b.freight_cost_id WHERE gl.transaction_id = t.transaction_id)

            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES' OR gl.general_ledger_module = 'RETURN INVOICE SALES') AND gl.general_ledger_for = 9 THEN (SELECT a.customer_name FROM customer a LEFT JOIN invoice_sales b ON a.customer_id = b.customer_id WHERE b.inv_notim_id = gl.invoice_id)
           
            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES' OR gl.general_ledger_module = 'RETURN INVOICE SALES') AND gl.general_ledger_for = 3 THEN (SELECT a.freight_supplier FROM freight_local_sales a LEFT JOIN freight_cost_local_sales b ON a.freight_id = b.freight_id LEFT JOIN TRANSACTION t ON t.freight_cost_id = b.freight_cost_id WHERE t.transaction_id = gl.t_id)
           
            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES OA' OR gl.general_ledger_module = 'RETURN INVOICE SALES OA') AND gl.general_ledger_for = 16 THEN (SELECT a.freight_supplier FROM freight_local_sales a LEFT JOIN invoice_sales_oa b ON a.freight_id = b.freightId WHERE b.inv_notim_id = gl.invoice_id)
            
            WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2) THEN (SELECT vendor_name FROM vendor WHERE vendor_id = (SELECT c.vendor_id FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id WHERE t.transaction_id = gl.transaction_id))
            WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 3 OR gl.general_ledger_for = 14) THEN (SELECT `freight_supplier` FROM freight f WHERE f.freight_id = (SELECT freight_id FROM freight_cost WHERE freight_cost_id = (SELECT freight_cost_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`)))
            WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT vh.`vendor_handling_name` FROM vendor_handling vh WHERE vh.vendor_handling_id = (SELECT vendor_handling_id FROM vendor_handling_cost WHERE handling_cost_id = (SELECT handling_cost_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`)))
            WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT labor_name FROM labor WHERE labor_id = (SELECT labor_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`))
            WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT cust.customer_name FROM customer cust WHERE customer_id = (SELECT customer_id FROM sales WHERE sales_id = (SELECT sales_id FROM shipment WHERE shipment_id = (SELECT shipment_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`))))
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT vendor_name FROM vendor WHERE vendor_id = (SELECT c.vendor_id FROM contract c LEFT JOIN stockpile_contract sc ON c.`contract_id` = sc.`contract_id` LEFT JOIN payment p ON sc.`stockpile_contract_id` = p.`stockpile_contract_id` WHERE p.`payment_id` = gl.payment_id))
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 2 THEN (SELECT vendor_name FROM vendor WHERE vendor_id = (SELECT vendor_id FROM payment WHERE payment_id = gl.payment_id))
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT `freight_supplier` FROM freight f WHERE f.freight_id = (SELECT freight_id FROM payment WHERE payment_id = gl.`payment_id`))
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT vh.`vendor_handling_name` FROM vendor_handling vh WHERE vh.vendor_handling_id = (SELECT vendor_handling_id FROM payment WHERE payment_id = gl.`payment_id`))
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT labor_name FROM labor WHERE labor_id = (SELECT labor_id FROM `payment` WHERE payment_id = gl.`payment_id`))   
            WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 5 OR gl.general_ledger_for = 8) THEN (SELECT gv.general_vendor_name FROM general_vendor gv WHERE gv.general_vendor_id = (SELECT p.general_vendor_id FROM payment p WHERE p.payment_id = gl.payment_id))                
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 6 THEN (SELECT ap.account_name FROM account ap WHERE ap.account_id = (SELECT p.account_id FROM payment p WHERE p.payment_id = gl.payment_id ))
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT cust.customer_name FROM customer cust WHERE customer_id = (SELECT customer_id FROM sales WHERE sales_id = (SELECT sales_id FROM payment  WHERE payment_id = gl.payment_id)))				
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT DISTINCT(gv.general_vendor_name) FROM general_vendor gv LEFT JOIN invoice_detail id ON gv.general_vendor_id = id.general_vendor_id LEFT JOIN invoice i ON i.invoice_id = id.invoice_id LEFT JOIN payment p ON p.invoice_id = i.invoice_id WHERE p.payment_id = gl.payment_id LIMIT 1)
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT DISTINCT(gv.general_vendor_name) FROM general_vendor gv LEFT JOIN payment_cash pc ON gv.general_vendor_id = pc.general_vendor_id WHERE pc.payment_id = gl.payment_id LIMIT 1)
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT general_vendor_name FROM general_vendor  WHERE general_vendor_id = (SELECT general_vendor_id FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id))
            WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 AND (SELECT general_vendor_id FROM gl_add WHERE gl_add_id = (SELECT gl_add_id FROM gl_detail WHERE gl_detail_id = gl.jurnal_id)) IS NOT NULL THEN (SELECT general_vendor_name FROM general_vendor  WHERE general_vendor_id = (SELECT general_vendor_id FROM payment  WHERE payment_id = gl.payment_id))
            ELSE '' END AS supplier_name,
            
            CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT vendor_code FROM vendor WHERE vendor_id = (SELECT vendor_id FROM contract WHERE contract_id = gl.contract_id))
            
            WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 3) AND (SELECT shipment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL
            THEN (SELECT a.freight_code FROM freight_local_sales a LEFT JOIN freight_cost_local_sales b ON a.freight_id = b.freight_id LEFT JOIN `transaction` t ON t.freight_cost_id = b.freight_cost_id WHERE gl.transaction_id = t.transaction_id)

            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES' OR gl.general_ledger_module = 'RETURN INVOICE SALES') AND gl.general_ledger_for = 9 THEN (SELECT a.customer_code FROM customer a LEFT JOIN invoice_sales b ON a.customer_id = b.customer_id WHERE b.inv_notim_id = gl.invoice_id)
            
            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES' OR gl.general_ledger_module = 'RETURN INVOICE SALES') AND gl.general_ledger_for = 3 THEN (SELECT a.freight_code FROM freight_local_sales a LEFT JOIN freight_cost_local_sales b ON a.freight_id = b.freight_id LEFT JOIN TRANSACTION t ON t.freight_cost_id = b.freight_cost_id WHERE t.transaction_id = gl.t_id)
            
            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES OA' OR gl.general_ledger_module = 'RETURN INVOICE SALES OA') AND gl.general_ledger_for = 16 THEN (SELECT a.freight_code FROM freight_local_sales a LEFT JOIN invoice_sales_oa b ON a.freight_id = b.freightId WHERE b.inv_notim_id = gl.invoice_id)

            WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) != 0 THEN 'ADJ'	
            WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2) THEN (SELECT vendor_code FROM vendor WHERE vendor_id = (SELECT c.vendor_id FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id WHERE t.transaction_id = gl.transaction_id))
            WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 3 OR gl.general_ledger_for = 14) THEN (SELECT `freight_code` FROM freight f WHERE f.freight_id = (SELECT freight_id FROM freight_cost WHERE freight_cost_id = (SELECT freight_cost_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`)))
            WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT vh.`vendor_handling_code` FROM vendor_handling vh WHERE vh.vendor_handling_id = (SELECT vendor_handling_id FROM vendor_handling_cost WHERE handling_cost_id = (SELECT handling_cost_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`)))
            WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT labor_code FROM labor WHERE labor_id = (SELECT labor_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`))
            WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT cust.customer_code FROM customer cust WHERE customer_id = (SELECT customer_id FROM sales WHERE sales_id = (SELECT sales_id FROM shipment WHERE shipment_id = (SELECT shipment_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`))))
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT vendor_code FROM vendor WHERE vendor_id = (SELECT c.vendor_id FROM contract c LEFT JOIN stockpile_contract sc ON c.`contract_id` = sc.`contract_id` LEFT JOIN payment p ON sc.`stockpile_contract_id` = p.`stockpile_contract_id` WHERE p.`payment_id` = gl.payment_id))
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 2 THEN (SELECT vendor_code FROM vendor WHERE vendor_id = (SELECT vendor_id FROM payment WHERE payment_id = gl.payment_id))
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT `freight_code` FROM freight f WHERE f.freight_id = (SELECT freight_id FROM payment WHERE payment_id = gl.`payment_id`))
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT vh.`vendor_handling_code` FROM vendor_handling vh WHERE vh.vendor_handling_id = (SELECT vendor_handling_id FROM payment WHERE payment_id = gl.`payment_id`))
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT labor_code FROM labor WHERE labor_id = (SELECT labor_id FROM `payment` WHERE payment_id = gl.`payment_id`))   
            WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 5 OR gl.general_ledger_for = 8) THEN (SELECT gv.general_vendor_code FROM general_vendor gv WHERE gv.general_vendor_id = (SELECT p.general_vendor_id FROM payment p WHERE p.payment_id = gl.payment_id))                
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 6 THEN (SELECT ap.account_name FROM account ap WHERE ap.account_id = (SELECT p.account_id FROM payment p WHERE p.payment_id = gl.payment_id ))
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT cust.customer_code FROM customer cust WHERE customer_id = (SELECT customer_id FROM sales WHERE sales_id = (SELECT sales_id FROM payment  WHERE payment_id = gl.payment_id)))				
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT DISTINCT(gv.general_vendor_code) FROM general_vendor gv LEFT JOIN invoice_detail id ON gv.general_vendor_id = id.general_vendor_id LEFT JOIN invoice i ON i.invoice_id = id.invoice_id LEFT JOIN payment p ON p.invoice_id = i.invoice_id WHERE p.payment_id = gl.payment_id LIMIT 1)
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT DISTINCT(gv.general_vendor_code) FROM general_vendor gv LEFT JOIN payment_cash pc ON gv.general_vendor_id = pc.general_vendor_id WHERE pc.payment_id = gl.payment_id LIMIT 1)
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT general_vendor_code FROM general_vendor  WHERE general_vendor_id = (SELECT general_vendor_id FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id))
            WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 AND (SELECT general_vendor_id FROM gl_add WHERE gl_add_id = (SELECT gl_add_id FROM gl_detail WHERE gl_detail_id = gl.jurnal_id)) IS NOT NULL THEN (SELECT general_vendor_code FROM general_vendor  WHERE general_vendor_id = (SELECT general_vendor_id FROM payment  WHERE payment_id = gl.payment_id))
            ELSE '' END AS supplier_code,
                     
        CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT contract_no FROM contract WHERE contract_id = gl.contract_id)

            WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 3) AND (SELECT shipment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL
            THEN (SELECT b.contract_pkhoa FROM freight_cost_local_sales b LEFT JOIN `transaction` t ON t.freight_cost_id = b.freight_cost_id WHERE gl.transaction_id = t.transaction_id)
            
            WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14)
            THEN  (SELECT contract_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.transaction_id))) 
            WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT sales_no FROM sales WHERE sales_id = (SELECT sales_id FROM shipment WHERE shipment_id = (SELECT shipment_id FROM `transaction` WHERE transaction_id = gl.transaction_id)))
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 1 THEN  (SELECT contract_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM payment WHERE payment_id = gl.payment_id))) 
            WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 13) THEN (SELECT contract_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.t_id)))
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT c.contract_no FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id LEFT JOIN payment_cash pc ON pc.transaction_id = t.transaction_id WHERE pc.payment_cash_id = gl.cash_id)
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 4 THEN  (SELECT contract_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM payment WHERE payment_id = gl.payment_id))) 
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT sales_no FROM sales WHERE sales_id = (SELECT sales_id FROM shipment WHERE shipment_id = (SELECT shipment_id FROM `transaction` WHERE transaction_id = gl.transaction_id)))
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT i.entry_date FROM invoice i LEFT JOIN payment p ON i.invoice_id = p.invoice_id WHERE p.payment_id = gl.payment_id), '%Y-%m-%d') < '2018-09-24' THEN (SELECT c.contract_no FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN invoice i ON i.`po_id` = sc.`stockpile_contract_id` LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT i.entry_date FROM invoice i LEFT JOIN payment p ON i.invoice_id = p.invoice_id WHERE p.payment_id = gl.payment_id), '%Y-%m-%d') >= '2018-09-24' THEN (SELECT c.contract_no FROM contract c LEFT JOIN invoice_detail id ON c.contract_id = id.poId LEFT JOIN invoice i ON i.invoice_id = id.invoice_id LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id LIMIT 1)
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT entry_date FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id), '%Y-%m-%d') < '2018-09-24'  THEN (SELECT c.contract_no FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN invoice i ON i.`po_id` = sc.`stockpile_contract_id` LEFT JOIN invoice_detail id ON i.`invoice_id` = id.invoice_id WHERE id.`invoice_detail_id` = gl.invoice_id)
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT entry_date FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id), '%Y-%m-%d') >= '2018-09-24' THEN (SELECT c.contract_no FROM contract c LEFT JOIN invoice_detail id ON c.contract_id = id.poId WHERE id.`invoice_detail_id` = gl.invoice_id)
            WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT c.contract_no FROM contract c LEFT JOIN gl_add jm ON jm.contract_id = c.contract_id LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
            ELSE '' END AS contract_no,
    
        CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT po_no FROM contract WHERE contract_id = gl.contract_id)
            WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14)
            THEN (SELECT po_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.transaction_id))) 
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT po_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM payment WHERE payment_id = gl.payment_id)))
            WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 13) THEN (SELECT po_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.t_id)))
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT c.po_no FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id LEFT JOIN payment_cash pc ON pc.transaction_id = t.transaction_id WHERE pc.payment_cash_id = gl.cash_id)
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT po_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM payment WHERE payment_id = gl.payment_id)))
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT i.entry_date FROM invoice i LEFT JOIN payment p ON i.invoice_id = p.invoice_id WHERE p.payment_id = gl.payment_id), '%Y-%m-%d') < '2018-09-24' THEN (SELECT c.po_no FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN invoice i ON i.`po_id` = sc.`stockpile_contract_id` LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT i.entry_date FROM invoice i LEFT JOIN payment p ON i.invoice_id = p.invoice_id WHERE p.payment_id = gl.payment_id), '%Y-%m-%d') >= '2018-09-24' THEN (SELECT c.po_no FROM contract c LEFT JOIN invoice_detail id ON c.contract_id = id.poId LEFT JOIN invoice i ON i.invoice_id = id.invoice_id LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id LIMIT 1)
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT entry_date FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id), '%Y-%m-%d') < '2018-09-24'  THEN (SELECT c.po_no FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN invoice i ON i.`po_id` = sc.`stockpile_contract_id` LEFT JOIN invoice_detail id ON i.`invoice_id` = id.invoice_id WHERE id.`invoice_detail_id` = gl.invoice_id)
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT entry_date FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id), '%Y-%m-%d') >= '2018-09-24' THEN (SELECT c.po_no FROM contract c LEFT JOIN invoice_detail id ON c.contract_id = id.poId WHERE id.`invoice_detail_id` = gl.invoice_id)
            WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT c.po_no FROM contract c LEFT JOIN gl_add jm ON jm.contract_id = c.contract_id LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
            ELSE '' END AS po_no,
                
        CASE WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 12 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) THEN (SELECT invoice_no FROM payment WHERE payment_id = gl.payment_id)
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.invoice_no FROM invoice i LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
            WHEN gl.invoice_id IS NOT NULL THEN (SELECT i.invoice_no FROM invoice i LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id)
            WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT i.invoice_no FROM invoice i LEFT JOIN gl_add jm ON jm.invoice_id = i.invoice_id LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
            ELSE '' END AS invoice_no,
                
        CASE WHEN gl.payment_id IS NOT NULL THEN (SELECT tax_invoice FROM payment WHERE payment_id = gl.payment_id)
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.invoice_tax FROM invoice i LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
            
            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES' OR gl.general_ledger_module = 'RETURN INVOICE SALES') THEN (SELECT a.tax_invoice FROM pengajuan_payment_sales a LEFT JOIN invoice_sales b ON a.idPP = b.idPP WHERE b.inv_notim_id = gl.invoice_id)
            
            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES OA' OR gl.general_ledger_module = 'RETURN INVOICE SALES OA') THEN (SELECT a.tax_invoice FROM pengajuan_payment_sales_oa a LEFT JOIN invoice_sales_oa b ON a.idPP = b.idPP WHERE b.inv_notim_id = gl.invoice_id)

            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.invoice_tax FROM invoice i LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id
            WHERE id.invoice_detail_id = gl.invoice_id ORDER BY id.invoice_detail_id DESC LIMIT 1)
            ELSE '' END AS tax_invoice,
                    
        CASE WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 12 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) THEN (SELECT invoice_no FROM payment WHERE payment_id = gl.payment_id)
            
            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES' OR gl.general_ledger_module = 'RETURN INVOICE SALES') THEN (SELECT a.invoice_no FROM pengajuan_payment_sales a LEFT JOIN invoice_sales b ON a.idPP = b.idPP WHERE b.inv_notim_id = gl.invoice_id)
           
            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES OA' OR gl.general_ledger_module = 'RETURN INVOICE SALES OA') THEN (SELECT a.invoice_no FROM pengajuan_payment_sales_oa a LEFT JOIN invoice_sales_oa b ON a.idPP = b.idPP WHERE b.inv_notim_id = gl.invoice_id)
            
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.invoice_no2 FROM invoice i LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id
            WHERE id.invoice_detail_id = gl.invoice_id ORDER BY id.invoice_detail_id DESC LIMIT 1)
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.invoice_no2 FROM invoice i LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
            WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT i.invoice_no2 FROM invoice i LEFT JOIN gl_add jm ON jm.invoice_id = i.invoice_id LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
            ELSE '' END AS invoice_no_2,
                    
        CASE WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.payment_status FROM invoice i LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id
            WHERE id.invoice_detail_id = gl.invoice_id)
            ELSE '' END AS invoice_payment,
                   
        CASE WHEN gl.payment_id IS NOT NULL THEN (SELECT cheque_no FROM payment WHERE payment_id = gl.payment_id)
            ELSE '' END AS cheque_no,
                    
        CASE WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 5 OR gl.general_ledger_for = 8) THEN  (SELECT shipment_no FROM shipment WHERE shipment_id = (SELECT shipment_id FROM payment WHERE payment_id = gl.payment_id)) 
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT GROUP_CONCAT(sh2.shipment_no) FROM payment_detail pd2 LEFT JOIN shipment sh2 ON sh2.shipment_id = pd2.shipment_id WHERE pd2.payment_id = gl.payment_id GROUP BY pd2.payment_id)
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT DISTINCT(sh.shipment_no) FROM shipment sh LEFT JOIN invoice_detail id ON sh.shipment_id = id.shipment_id LEFT JOIN invoice i ON i.invoice_id = id.invoice_id LEFT JOIN payment p ON p.invoice_id = i.invoice_id WHERE p.payment_id = gl.payment_id LIMIT 1)
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT DISTINCT(sh.shipment_no) FROM shipment sh LEFT JOIN payment_cash pc ON sh.shipment_id = pc.shipment_id WHERE pc.payment_cash_id = gl.cash_id LIMIT 1)

            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES' OR gl.general_ledger_module = 'RETURN INVOICE SALES') THEN (SELECT a.shipment_no FROM shipment a LEFT JOIN TRANSACTION t ON t.shipment_id = a.shipment_id LEFT JOIN pengajuan_sales b ON t.transaction_id = b.transaction_id WHERE b.inv_notim_id = gl.invoice_id LIMIT 1)
           
            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES OA' OR gl.general_ledger_module = 'RETURN INVOICE SALES OA') THEN (SELECT a.shipment_no FROM shipment a LEFT JOIN TRANSACTION t ON t.shipment_id = a.shipment_id LEFT JOIN pengajuan_sales_oa b ON t.transaction_id = b.transaction_id WHERE b.inv_notim_id = gl.invoice_id LIMIT 1)

            WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 3) AND (SELECT shipment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL
            THEN (SELECT a.shipment_no FROM shipment a LEFT JOIN `transaction` t ON t.shipment_id = a.shipment_id WHERE gl.transaction_id = t.transaction_id)

            WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) !=0 THEN (SELECT sh.shipment_no FROM shipment sh LEFT JOIN adjustment_audit aa ON sh.shipment_id = aa.shipment_id LEFT JOIN `transaction` t ON t.adjustmentAudit_id = audit_id WHERE t.transaction_id = gl.transaction_id)
            WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT mutasi_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT mh.kode_mutasi FROM mutasi_header mh LEFT JOIN TRANSACTION t ON t.mutasi_id = mh.mutasi_header_id WHERE t.transaction_id = gl.transaction_id)
            WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT c.return_shipment FROM contract c LEFT JOIN stockpile_contract sc ON c.`contract_id` = sc.`contract_id` LEFT JOIN TRANSACTION t ON t.`stockpile_contract_id` = sc.`stockpile_contract_id` WHERE t.`transaction_id` = gl.transaction_id LIMIT 1) IS NOT NULL THEN (SELECT sh.shipment_no FROM shipment sh LEFT JOIN contract c ON sh.shipment_id = c.return_shipment_id LEFT JOIN stockpile_contract sc ON sc.contract_id = c.contract_id LEFT JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id WHERE t.transaction_id = gl.transaction_id LIMIT 1)
            WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT shipment_no FROM shipment WHERE shipment_id = (SELECT shipment_id FROM `transaction` WHERE transaction_id = gl.transaction_id ))
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 AND (SELECT mutasi_detail_id FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id) IS NOT NULL THEN (SELECT mh.kode_mutasi FROM mutasi_header mh LEFT JOIN mutasi_detail md ON mh.mutasi_header_id = md.mutasi_header_id LEFT JOIN invoice_detail id ON id.mutasi_detail_id = md.mutasi_detail_id WHERE id.invoice_detail_id = gl.invoice_id LIMIT 1)
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT shipment_no FROM shipment WHERE shipment_id = (SELECT shipment_id FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id))
            WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT sh.shipment_no FROM shipment sh LEFT JOIN gl_add jm ON jm.shipment_id = sh.shipment_id LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
            WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT mh.kode_mutasi FROM mutasi_header mh LEFT JOIN mutasi_contract mc ON mh.mutasi_header_id = mc.mutasi_header_id LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = mc.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)  
            ELSE '' END AS shipment_code,
                    
        CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.general_ledger_module = 'CONTRACT ADJUSTMENT' THEN (SELECT adjustment FROM contract_adjustment WHERE adj_id = gl.description)
            WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT quantity FROM contract WHERE contract_id = gl.contract_id) 
            WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.general_ledger_module = 'STOCK TRANSIT' THEN (SELECT st.send_weight FROM stock_transit st LEFT JOIN stockpile_contract sc ON st.stockpile_contract_id = sc.stockpile_contract_id WHERE sc.contract_id = gl.contract_id AND gl.description = st.stock_transit_id LIMIT 1)
            WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.account_id = 8 THEN (SELECT quantity FROM `transaction` WHERE transaction_id = gl.transaction_id)
            WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.account_id = 52 THEN (SELECT shrink FROM `transaction` WHERE transaction_id = gl.transaction_id) 
            WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.account_id = 147 THEN (SELECT send_weight FROM `transaction` WHERE transaction_id = gl.transaction_id)
			WHEN gl.transaction_id IS NOT NULL AND(gl.general_ledger_for = 2 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 9) AND gl.account_id = 52 THEN (SELECT shrink FROM `transaction` WHERE transaction_id = gl.transaction_id)			
            WHEN gl.transaction_id IS NOT NULL AND(gl.general_ledger_for = 2 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 9) THEN (SELECT quantity FROM `transaction` WHERE transaction_id = gl.transaction_id)
            WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT freight_quantity FROM `transaction` WHERE transaction_id = gl.transaction_id) 
            WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT handling_quantity FROM `transaction` WHERE transaction_id = gl.transaction_id) 
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT pc.qty FROM payment_cash pc WHERE pc.`payment_cash_id` = gl.cash_id)
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT quantity FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM payment WHERE payment_id = gl.payment_id ))) 
            WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 4) THEN (SELECT COALESCE(SUM(t2.quantity), 0) FROM `transaction` t2 WHERE t2.transaction_id = gl.t_id)
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT COALESCE(SUM(t2.freight_quantity), 0) FROM `transaction` t2 WHERE t2.transaction_id = gl.t_id)
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT COALESCE(SUM(t2.handling_quantity), 0) FROM `transaction` t2 WHERE t2.hc_payment_id = gl.payment_id)
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT COALESCE(SUM(sh2.quantity), 0) FROM payment_detail pd2 LEFT JOIN shipment sh2 ON sh2.shipment_id = pd2.shipment_id WHERE pd2.payment_id = gl.payment_id)
            WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 5 OR gl.general_ledger_for = 6 OR gl.general_ledger_for = 8) THEN (SELECT qty FROM payment WHERE payment_id = gl.payment_id ) 
            WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT jm.quantity FROM gl_add jm LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)

            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 9 AND gl.t_id = 0 AND (gl.general_ledger_module = 'INVOICE SALES' OR gl.general_ledger_module = 'RETURN INVOICE SALES')THEN (SELECT SUM(qty) FROM pengajuan_sales WHERE inv_notim_id = gl.invoice_id)
           
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 9 AND gl.t_id != 0 AND (gl.general_ledger_module = 'INVOICE SALES' OR gl.general_ledger_module = 'RETURN INVOICE SALES')THEN (SELECT quantity FROM `transaction` WHERE transaction_id = gl.t_id)
           
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 16 AND gl.t_id != 0 AND (gl.general_ledger_module = 'INVOICE SALES OA' OR gl.general_ledger_module = 'RETURN INVOICE SALES OA')THEN (SELECT freight_quantity FROM `transaction` WHERE transaction_id = gl.t_id)
            
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 3 AND (gl.general_ledger_module = 'INVOICE SALES' OR gl.general_ledger_module = 'RETURN INVOICE SALES')THEN (SELECT freight_quantity FROM `transaction` WHERE transaction_id = gl.t_id)

            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT qty FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id)
            ELSE '' END AS quantity,
                    
         CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT price_converted FROM contract WHERE contract_id = gl.contract_id) 

            WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 9) AND (SELECT shipment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL
            THEN (SELECT unit_price FROM `transaction` WHERE transaction_id = gl.transaction_id)

            WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 9) THEN (SELECT unit_price FROM `transaction` WHERE transaction_id = gl.transaction_id) 
            WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT freight_price FROM `transaction` WHERE transaction_id = gl.transaction_id)  
            WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT GROUP_CONCAT(vhc.price_converted) FROM vendor_handling_cost vhc LEFT JOIN `transaction` t ON vhc.handling_cost_id = t.handling_cost_id WHERE t.transaction_id = gl.transaction_id)  
            WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT unloading_price FROM `transaction` WHERE transaction_id = gl.transaction_id) 
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT pc.price FROM payment_cash pc WHERE pc.`payment_cash_id` = gl.cash_id)
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT GROUP_CONCAT(vhc.price_converted) FROM vendor_handling_cost vhc LEFT JOIN vendor_handling vh ON vh.vendor_handling_id = vhc.vendor_handling_id LEFT JOIN payment p ON p.vendor_handling_id = vh.vendor_handling_id WHERE p.payment_id = gl.payment_id)
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT GROUP_CONCAT(t2.freight_price) FROM `transaction` t2 WHERE t2.transaction_id = gl.t_id)
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 2 THEN (SELECT GROUP_CONCAT(t2.unit_price) FROM `transaction` t2 WHERE t2.transaction_id = gl.t_id)
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT price_converted FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM payment WHERE payment_id = gl.payment_id ))) 
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT GROUP_CONCAT(t2.unit_price) FROM `transaction` t2 WHERE t2.payment_id = gl.payment_id GROUP BY t2.payment_id)
            WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 5 OR gl.general_ledger_for = 6 OR gl.general_ledger_for = 8) THEN (SELECT price FROM payment WHERE payment_id = gl.payment_id )

            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 9 AND gl.t_id = 0 AND (gl.general_ledger_module = 'INVOICE SALES' OR gl.general_ledger_module = 'RETURN INVOICE SALES')THEN (SELECT price FROM pengajuan_sales WHERE inv_notim_id = gl.invoice_id LIMIT 1)
            
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 9 AND gl.t_id != 0 AND (gl.general_ledger_module = 'INVOICE SALES' OR gl.general_ledger_module = 'RETURN INVOICE SALES')THEN (SELECT unit_price FROM `transaction` WHERE transaction_id = gl.t_id)
            
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 16 AND gl.t_id != 0 AND (gl.general_ledger_module = 'INVOICE SALES OA' OR gl.general_ledger_module = 'RETURN INVOICE SALES OA')THEN (SELECT freight_price FROM `transaction` WHERE transaction_id = gl.t_id)
            
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 3 AND (gl.general_ledger_module = 'INVOICE SALES' OR gl.general_ledger_module = 'RETURN INVOICE SALES')THEN (SELECT freight_price FROM `transaction` WHERE transaction_id = gl.t_id)

            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT price FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id) 
            WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT jm.price FROM gl_add jm LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
            ELSE '' END AS price,
                    
            CASE WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT REPLACE(notes,'''','') FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id)

            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES' OR gl.general_ledger_module = 'RETURN INVOICE SALES') THEN (SELECT a.remarks FROM pengajuan_payment_sales a LEFT JOIN invoice_sales b ON a.idPP = b.idPP WHERE b.inv_notim_id = gl.invoice_id)
            
            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES OA' OR gl.general_ledger_module = 'RETURN INVOICE SALES OA') THEN (SELECT a.remarks FROM pengajuan_payment_sales_oa a LEFT JOIN invoice_sales_oa b ON a.idPP = b.idPP WHERE b.inv_notim_id = gl.invoice_id)

            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT REPLACE(i.remarks,'''','') FROM invoice i LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT REPLACE(pc.notes,'''','') FROM payment_cash pc WHERE pc.`payment_cash_id` = gl.cash_id)
            WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_module = 'CONTRACT ADJUSTMENT' THEN (SELECT REPLACE(adjustment_notes,'''','') FROM contract_adjustment WHERE adj_id = gl.description) 
            WHEN gl.contract_id IS NOT NULL THEN (SELECT REPLACE(notes,'''','') FROM contract WHERE contract_id = gl.contract_id) 
            WHEN gl.transaction_id IS NOT NULL THEN (SELECT CONCAT(slip_retur,' - ',REPLACE(notes,'''','')) FROM `transaction` WHERE transaction_id = gl.transaction_id)    
            WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT REPLACE(jd.notes,'''','') FROM gl_detail jd WHERE jd.gl_detail_id = gl.jurnal_id)
            ELSE (SELECT REPLACE(remarks,'''','') FROM payment WHERE payment_id = gl.payment_id )  END AS remarks,
                                        
        CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.general_ledger_module = 'CONTRACT ADJUSTMENT' THEN DATE_FORMAT((SELECT adjustment_date FROM contract_adjustment WHERE adj_id = gl.description), '%Y-%m-%d')
            WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.general_ledger_module = 'STOCK TRANSIT' THEN DATE_FORMAT((SELECT loading_date FROM stock_transit a LEFT JOIN stockpile_contract b ON a.`stockpile_contract_id` = b.`stockpile_contract_id` WHERE b.`contract_id` = gl.contract_id AND a.stock_transit_id = gl.description), '%Y-%m-%d')
            WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 AND (SELECT contract_status FROM contract WHERE contract_id = gl.contract_id) = 2 THEN DATE_FORMAT((SELECT reject_date FROM contract WHERE contract_id = gl.contract_id), '%Y-%m-%d')

            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 15 THEN (SELECT payment_date FROM payment WHERE payment_id = gl.payment_id)
            
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 16 THEN (SELECT payment_date FROM payment WHERE payment_id = gl.payment_id)

            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_module = 'INVOICE SALES' THEN (SELECT a.due_date_inv FROM invoice_sales a WHERE a.inv_notim_id = gl.invoice_id)
            
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_module = 'RETURN INVOICE SALES' THEN (SELECT a.return_date FROM invoice_sales a WHERE a.inv_notim_id = gl.invoice_id)
            
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_module = 'INVOICE SALES OA' THEN (SELECT a.due_date_inv FROM invoice_sales_oa a WHERE a.inv_notim_id = gl.invoice_id)
            
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_module = 'RETURN INVOICE SALES OA' THEN (SELECT a.return_date FROM invoice_sales_oa a WHERE a.inv_notim_id = gl.invoice_id)

            WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN DATE_FORMAT((SELECT entry_date FROM contract WHERE contract_id = gl.contract_id), '%Y-%m-%d')
            WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) THEN (SELECT unloading_date FROM `transaction` WHERE transaction_id = gl.transaction_id)
            WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 5 OR gl.general_ledger_for = 6 OR gl.general_ledger_for = 7 OR gl.general_ledger_for = 8 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 10 OR gl.general_ledger_for = 12 OR gl.general_ledger_for = 13) AND gl.general_ledger_module = 'RETURN PAYMENT' THEN DATE_FORMAT((SELECT edit_date FROM payment WHERE payment_id = gl.payment_id),'%Y-%m-%d')
            WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 5 OR gl.general_ledger_for = 6 OR gl.general_ledger_for = 7 OR gl.general_ledger_for = 8 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 10 OR gl.general_ledger_for = 12 OR gl.general_ledger_for = 13) THEN (SELECT payment_date FROM payment WHERE payment_id = gl.payment_id )
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT DATE_FORMAT(i.input_date, '%Y-%m-%d') FROM invoice i LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 AND gl.general_ledger_module = 'RETURN INVOICE' THEN (SELECT DATE_FORMAT(i.sync_date, '%Y-%m-%d') FROM invoice i LEFT JOIN invoice_detail id ON id.invoice_id = i.invoice_id WHERE id.invoice_detail_id = gl.invoice_id)
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT DATE_FORMAT(i.invoice_date, '%Y-%m-%d') FROM invoice i LEFT JOIN invoice_detail id ON id.invoice_id = i.invoice_id WHERE id.invoice_detail_id = gl.invoice_id)
            WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT DATE_FORMAT(jm.gl_add_date, '%Y-%m-%d') FROM gl_add jm LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
            ELSE '' END AS gl_date,
                    
        CASE WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 5 OR gl.general_ledger_for = 6 OR gl.general_ledger_for = 7 OR gl.general_ledger_for = 8 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 10 OR gl.general_ledger_for = 12 OR gl.general_ledger_for = 13) THEN (SELECT exchange_rate FROM payment WHERE payment_id = gl.payment_id )
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT exchange_rate FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id)
            WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT jd.exchange_rate FROM gl_detail jd WHERE jd.gl_detail_id = gl.jurnal_id)
            ELSE '' END AS exchange_rate,
                   
        CASE WHEN gl.payment_id IS NOT NULL THEN (SELECT bank_code FROM bank WHERE bank_id = (SELECT bank_id FROM payment WHERE payment_id = gl.payment_id ))

            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES' OR gl.general_ledger_module = 'RETURN INVOICE SALES') THEN (SELECT b.bank_code FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN invoice_sales a ON a.inv_notim_id = p.invoice_sales_id WHERE a.inv_notim_id = gl.invoice_id LIMIT 1)
           
            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES OA' OR gl.general_ledger_module = 'RETURN INVOICE SALES OA') THEN (SELECT b.bank_code FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN invoice_sales_oa a ON a.inv_notim_id = p.invoice_sales_oa_id WHERE a.inv_notim_id = gl.invoice_id LIMIT 1)

            WHEN gl.invoice_id IS NOT NULL THEN (SELECT b.bank_code FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN invoice i ON i.invoice_id = p.invoice_id LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id AND p.payment_status = 0 LIMIT 1)
            WHEN gl.contract_id IS NOT NULL THEN (SELECT b.bank_code FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = p.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)
            WHEN gl.transaction_id IS NOT NULL AND (SELECT payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT b.bank_code FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN TRANSACTION t ON t.payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
            ELSE '' END AS bank_code,
                    
        CASE WHEN gl.payment_id IS NOT NULL THEN (SELECT bank_type FROM bank WHERE bank_id = (SELECT bank_id FROM payment WHERE payment_id = gl.payment_id ))

            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES' OR gl.general_ledger_module = 'RETURN INVOICE SALES') THEN (SELECT b.bank_type FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN invoice_sales a ON a.inv_notim_id = p.invoice_sales_id WHERE a.inv_notim_id = gl.invoice_id LIMIT 1)
           
            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES OA' OR gl.general_ledger_module = 'RETURN INVOICE SALES OA') THEN (SELECT b.bank_type FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN invoice_sales_oa a ON a.inv_notim_id = p.invoice_sales_oa_id WHERE a.inv_notim_id = gl.invoice_id LIMIT 1)

            WHEN gl.invoice_id IS NOT NULL THEN (SELECT b.bank_type FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN invoice i ON i.invoice_id = p.invoice_id LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id AND p.payment_status = 0 LIMIT 1)
            WHEN gl.contract_id IS NOT NULL THEN (SELECT b.bank_type FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = p.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)
            WHEN gl.transaction_id IS NOT NULL AND (SELECT payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT b.bank_type FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN TRANSACTION t ON t.payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
            ELSE '' END AS bank_type,
                    
        CASE WHEN gl.payment_id IS NOT NULL THEN (SELECT currency_code FROM currency WHERE currency_id = (SELECT currency_id FROM payment WHERE payment_id = gl.payment_id))

            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES' OR gl.general_ledger_module = 'RETURN INVOICE SALES') THEN (SELECT pcur.currency_code FROM currency pcur LEFT JOIN payment p ON p.currency_id = pcur.currency_id LEFT JOIN invoice_sales a ON a.inv_notim_id = p.invoice_sales_id WHERE a.inv_notim_id = gl.invoice_id LIMIT 1)
           
            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES OA' OR gl.general_ledger_module = 'RETURN INVOICE SALES OA') THEN (SELECT pcur.currency_code FROM currency pcur LEFT JOIN payment p ON p.currency_id = pcur.currency_id LEFT JOIN invoice_sales_oa a ON a.inv_notim_id = p.invoice_sales_oa_id WHERE a.inv_notim_id = gl.invoice_id LIMIT 1)

            WHEN gl.invoice_id IS NOT NULL THEN (SELECT pcur.currency_code FROM currency pcur LEFT JOIN payment p ON p.currency_id = pcur.currency_id LEFT JOIN invoice i ON i.invoice_id = p.invoice_id LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id AND p.payment_status = 0 LIMIT 1)
            WHEN gl.contract_id IS NOT NULL THEN (SELECT pcur.currency_code FROM currency pcur LEFT JOIN payment p ON p.currency_id = pcur.currency_id LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = p.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)		
            WHEN gl.transaction_id IS NOT NULL AND (SELECT payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT pcur.currency_code FROM currency pcur LEFT JOIN payment p ON p.currency_id = pcur.currency_id LEFT JOIN TRANSACTION t ON t.payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
            ELSE '' END AS pcur_currency_code,
                    
        CASE WHEN (SELECT payment_location FROM payment WHERE payment_id = gl.payment_id ) = 0 THEN 'HOF'

            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES' OR gl.general_ledger_module = 'RETURN INVOICE SALES') THEN (SELECT CASE WHEN p.payment_location = 0 THEN 'HOF'
            ELSE sp.stockpile_code END AS sc FROM payment p LEFT JOIN stockpile sp ON p.payment_location = sp.stockpile_id LEFT JOIN invoice_sales i ON i.inv_notim_id = p.invoice_sales_id WHERE i.inv_notim_id = gl.invoice_id LIMIT 1)
            
            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES OA' OR gl.general_ledger_module = 'RETURN INVOICE SALES OA') THEN (SELECT CASE WHEN p.payment_location = 0 THEN 'HOF'
            ELSE sp.stockpile_code END AS sc FROM payment p LEFT JOIN stockpile sp ON p.payment_location = sp.stockpile_id LEFT JOIN invoice_sales_oa i ON i.inv_notim_id = p.invoice_sales_oa_id WHERE i.inv_notim_id = gl.invoice_id LIMIT 1)

            WHEN gl.invoice_id IS NOT NULL THEN (SELECT CASE WHEN p.payment_location = 0 THEN 'HOF'
            ELSE sp.stockpile_code END AS sc FROM payment p LEFT JOIN stockpile sp ON p.payment_location = sp.stockpile_id LEFT JOIN invoice i ON i.invoice_id = p.invoice_id LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id AND p.payment_status = 0 LIMIT 1)
            WHEN gl.contract_id IS NOT NULL THEN (SELECT CASE WHEN p.payment_location = 0 THEN 'HOF'
            ELSE sp.stockpile_code END AS sc FROM payment p LEFT JOIN stockpile sp ON p.payment_location = sp.stockpile_id LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = p.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)
            WHEN gl.transaction_id IS NOT NULL AND (SELECT payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN 'HOF'
            ELSE (SELECT stockpile_code FROM stockpile WHERE stockpile_id = (SELECT payment_location FROM payment WHERE payment_id = gl.payment_id )) END AS payment_location2,
                    
        CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_module = 'STOCK TRANSIT' THEN (SELECT st.kode_stock_transit FROM stock_transit st LEFT JOIN stockpile_contract sc ON st.stockpile_contract_id = sc.stockpile_contract_id WHERE sc.contract_id = gl.contract_id AND gl.description = st.stock_transit_id LIMIT 1)
            WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_module = 'CONTRACT ADJUSTMENT' THEN (SELECT adj_no FROM contract_adjustment WHERE adj_id = gl.description) 
            WHEN gl.contract_id IS NOT NULL THEN (SELECT po_no FROM contract WHERE contract_id = gl.contract_id) 

            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_module = 'INVOICE SALES' THEN (SELECT inv_notim_no FROM invoice_sales WHERE inv_notim_id = gl.invoice_id)
            
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_module = 'RETURN INVOICE SALES' THEN (SELECT CONCAT(inv_notim_no,'-R') FROM invoice_sales WHERE inv_notim_id = gl.invoice_id)
            
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_module = 'INVOICE SALES OA' THEN (SELECT inv_notim_no FROM invoice_sales_oa WHERE inv_notim_id = gl.invoice_id)
            
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_module = 'RETURN INVOICE SALES OA' THEN (SELECT CONCAT(inv_notim_no,'-R') FROM invoice_sales_oa WHERE inv_notim_id = gl.invoice_id)

            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_module = 'RETURN INVOICE' THEN (SELECT CONCAT(i.invoice_no,'-R') FROM invoice i LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id)
            WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_module = 'INVOICE DETAIL' THEN (SELECT i.invoice_no FROM invoice i LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id)
            WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_module = 'RETURN PAYMENT' THEN (SELECT CONCAT(payment_no,'-R') FROM payment WHERE payment_id = gl.payment_id)
            WHEN gl.payment_id IS NOT NULL THEN (SELECT payment_no FROM payment WHERE payment_id = gl.payment_id ) 
            WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT jm.gl_add_no FROM gl_add jm LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
            WHEN gl.transaction_id IS NOT NULL THEN (SELECT slip_no FROM TRANSACTION WHERE transaction_id = gl.transaction_id)
            ELSE '' END AS payment_no,
            
        CASE WHEN gl.contract_id IS NOT NULL THEN (SELECT p.payment_no FROM payment p LEFT JOIN stockpile_contract sc ON p.stockpile_contract_id = sc.stockpile_contract_id LEFT JOIN contract c ON c.contract_id = sc.contract_id WHERE c.contract_id = gl.contract_id AND p.payment_status = 0 LIMIT 1)

            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES' OR gl.general_ledger_module = 'RETURN INVOICE SALES') THEN (SELECT p.payment_no FROM payment p LEFT JOIN invoice_sales a ON a.inv_notim_id = p.invoice_sales_id WHERE a.inv_notim_id = gl.invoice_id LIMIT 1)
            
            WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_module = 'INVOICE SALES OA' OR gl.general_ledger_module = 'RETURN INVOICE SALES OA') THEN (SELECT p.payment_no FROM payment p LEFT JOIN invoice_sales_oa a ON a.inv_notim_id = p.invoice_sales_oa_id WHERE a.inv_notim_id = gl.invoice_id LIMIT 1)

            WHEN gl.invoice_id IS NOT NULL THEN (SELECT p.payment_no FROM payment p LEFT JOIN invoice i ON i.invoice_id = p.invoice_id LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id AND p.payment_status = 0 LIMIT 1 )
            WHEN gl.payment_id IS NOT NULL THEN (SELECT payment_no FROM payment WHERE payment_id = gl.payment_id ) 
            WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT jm.gl_add_no FROM gl_add jm LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
            WHEN gl.transaction_id IS NOT NULL AND (SELECT payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT p.payment_no FROM payment p LEFT JOIN TRANSACTION t ON t.payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
            ELSE '' END AS payment_no2,
            
        CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT fc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT b.bank_code FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN TRANSACTION t ON t.fc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
            ELSE '' END AS bank_code_fc,
        
        CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT uc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT b.bank_code FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN TRANSACTION t ON t.uc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
            ELSE '' END AS bank_code_uc,
        
        CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT hc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT b.bank_code FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN TRANSACTION t ON t.hc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
            ELSE '' END AS bank_code_hc,
            
        CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT fc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT b.bank_type FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN TRANSACTION t ON t.fc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
            ELSE '' END AS bank_type_fc,
            
        CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT uc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT b.bank_type FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN TRANSACTION t ON t.uc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
            ELSE '' END AS bank_type_uc,
            
        CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT hc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT b.bank_type FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN TRANSACTION t ON t.hc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
            ELSE '' END AS bank_type_hc,
        
        CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT fc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT pcur.currency_code FROM currency pcur LEFT JOIN payment p ON p.currency_id = pcur.currency_id LEFT JOIN TRANSACTION t ON t.fc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
            ELSE '' END AS pcur_currency_code_fc,
        
        CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT uc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT pcur.currency_code FROM currency pcur LEFT JOIN payment p ON p.currency_id = pcur.currency_id LEFT JOIN TRANSACTION t ON t.uc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
            ELSE '' END AS pcur_currency_code_uc,
        
        CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT hc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT pcur.currency_code FROM currency pcur LEFT JOIN payment p ON p.currency_id = pcur.currency_id LEFT JOIN TRANSACTION t ON t.hc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
            ELSE '' END AS pcur_currency_code_hc,
        
        CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT fc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT CASE WHEN p.payment_location = 0 THEN 'HOF'
            ELSE sp.stockpile_code END AS sc FROM payment p LEFT JOIN stockpile sp ON p.payment_location = sp.stockpile_id LEFT JOIN TRANSACTION t ON t.fc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
            ELSE '' END AS payment_location_fc,
        
        CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT uc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT CASE WHEN p.payment_location = 0 THEN 'HOF'
            ELSE sp.stockpile_code END AS sc FROM payment p LEFT JOIN stockpile sp ON p.payment_location = sp.stockpile_id LEFT JOIN TRANSACTION t ON t.uc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
            ELSE '' END AS payment_location_uc,
        
        CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT hc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT CASE WHEN p.payment_location = 0 THEN 'HOF'
            ELSE sp.stockpile_code END AS sc FROM payment p LEFT JOIN stockpile sp ON p.payment_location = sp.stockpile_id LEFT JOIN TRANSACTION t ON t.hc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
            ELSE '' END AS payment_location_hc,
        
        CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT fc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT p.payment_no FROM payment p LEFT JOIN TRANSACTION t ON t.fc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
            ELSE '' END AS payment_no_fc,
            
        CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT uc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT p.payment_no FROM payment p LEFT JOIN TRANSACTION t ON t.uc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
            ELSE '' END AS payment_no_uc,
            
        CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT hc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT p.payment_no FROM payment p LEFT JOIN TRANSACTION t ON t.hc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
            ELSE '' END AS payment_no_hc,
            
    (SELECT freight_id FROM payment WHERE payment_id = gl.payment_id) AS freight_id,
    (SELECT vendor_handling_id FROM payment WHERE payment_id = gl.payment_id) AS vendor_handling_id,  
    (SELECT labor_id FROM payment WHERE payment_id = gl.payment_id) AS labor_id, 
    (SELECT payment_status FROM payment WHERE payment_id = gl.payment_id) AS payment_status, 
    (SELECT payment_date FROM payment WHERE payment_id = gl.payment_id) AS payment_date,
    (SELECT tax_category FROM tax WHERE tax_id = (SELECT pph_tax_id FROM freight WHERE freight_id = (SELECT freight_id FROM payment WHERE payment_id = gl.payment_id ))) AS fc_tax_category, 
    (SELECT tax_value FROM tax WHERE tax_id = (SELECT pph_tax_id FROM freight WHERE freight_id = (SELECT freight_id FROM payment WHERE payment_id = gl.payment_id ))) AS fc_tax,
    (SELECT tax_value FROM tax WHERE tax_id = (SELECT ppn_tax_id FROM freight WHERE freight_id = (SELECT freight_id FROM payment WHERE payment_id = gl.payment_id ))) AS fc_tax_ppn,
    (SELECT tax_category FROM tax WHERE tax_id = (SELECT pph_tax_id FROM vendor_handling WHERE vendor_handling_id = (SELECT vendor_handling_id FROM payment WHERE payment_id = gl.payment_id ))) AS vhc_tax_category, 
    (SELECT tax_value FROM tax WHERE tax_id = (SELECT pph_tax_id FROM vendor_handling WHERE vendor_handling_id = (SELECT vendor_handling_id FROM payment WHERE payment_id = gl.payment_id ))) AS vhc_tax,  
    (SELECT general_vendor_id FROM payment WHERE payment_id = gl.payment_id )  AS gv_id,
    (SELECT t.fc_tax_id FROM `transaction` t WHERE t.transaction_id = gl.transaction_id) AS fc_tax_id,
    (SELECT vh.pph_tax_id FROM vendor_handling vh LEFT JOIN vendor_handling_cost vhc ON vhc.vendor_handling_id = vh.vendor_handling_id LEFT JOIN TRANSACTION t ON t.handling_cost_id = vhc.handling_cost_id WHERE t.transaction_id = gl.transaction_id) AS vhc_tax_id, 
    (SELECT tax_category FROM tax WHERE tax_id = (SELECT fc_tax_id FROM `transaction` WHERE transaction_id = gl.transaction_id))  AS tf_tax_category,
    (SELECT tax_category FROM tax WHERE tax_id = (SELECT pph_tax_id FROM vendor_handling WHERE vendor_handling_id = (SELECT vendor_handling_id FROM vendor_handling_cost WHERE handling_cost_id = (SELECT handling_cost_id FROM `transaction` WHERE transaction_id = gl.transaction_id))))  AS tvh_tax_category,
    (SELECT pph_tax_id FROM general_vendor WHERE general_vendor_id = (SELECT general_vendor_id FROM payment WHERE payment_id = gl.payment_id )) AS gv_pph_id, 
    (SELECT ppn_tax_id FROM general_vendor WHERE general_vendor_id = (SELECT general_vendor_id FROM payment WHERE payment_id = gl.payment_id ))  AS gv_ppn_id, 
    (SELECT tax_category FROM tax WHERE tax_id = (SELECT pph_tax_id FROM general_vendor WHERE general_vendor_id = (SELECT general_vendor_id FROM payment WHERE payment_id = gl.payment_id )))  AS gv_pph_category, 
    (SELECT tax_category FROM tax WHERE tax_id = (SELECT ppn_tax_id FROM freight WHERE freight_id = (SELECT freight_id FROM payment WHERE payment_id = gl.payment_id ))) AS gv_ppn_category, 
    (SELECT account_type FROM account WHERE account_id = gl.account_id) AS  account_type, 
    (SELECT tax_value FROM tax WHERE tax_id = (SELECT fc_tax_id FROM `transaction` t WHERE t.transaction_id = gl.transaction_id)) AS fc_tax_value,
    (SELECT tax_value FROM tax WHERE tax_id = (SELECT pph_tax_id FROM vendor_handling WHERE vendor_handling_id = (SELECT vendor_handling_id FROM vendor_handling_cost WHERE handling_cost_id = (SELECT handling_cost_id FROM `transaction` WHERE transaction_id = gl.transaction_id))))  AS vhc_tax_value,
    (SELECT general_vendor_id FROM gl_add WHERE gl_add_id = (SELECT gl_add_id FROM gl_detail WHERE gl_detail_id= gl.jurnal_id )) AS general_vendor_id, 
    (SELECT vendor_id FROM gl_add WHERE gl_add_id = (SELECT gl_add_id FROM gl_detail WHERE gl_detail_id= gl.jurnal_id )) AS vendor_id, 
    (SELECT payment_method FROM payment WHERE payment_id = gl.payment_id ) AS payment_method,
    (SELECT payment_type FROM payment WHERE payment_id = gl.payment_id ) AS payment_type
     FROM general_ledger gl 
     WHERE gl.amount > 0 {$whereCondition}";
echo $invoiceId;
    $resulta = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);
    while ($row = $resulta->fetch_object()) {

        $sql2 = "SELECT s.stockpile_name FROM stockpile s INNER JOIN stockpile_contract sc ON s.`stockpile_id` = sc.`stockpile_id` 
INNER JOIN contract c ON sc.`contract_id` = c.`contract_id` WHERE sc.`quantity` > 0 AND c.`contract_no` = '$row->contract_no'";
        $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
        while ($row2 = $result2->fetch_object()) {
            $stockpileName2 = $row2->stockpile_name;
        }

        //$rowActive++;
        if ($row->transaction_id != NULL && $row->account_id == 147 && $row->general_ledger_for == 1) {
            $stockpileName = $stockpileName2;
        } else {
            $stockpileName = $row->stockpile_name2;
        }


        if ($row->general_ledger_id == '' && $row->amount < 0) {
            $credit_amount = $row->amount * -1;
            $debit_amount = 0;
        } elseif ($row->general_ledger_id == '' && $row->amount > 0) {
            $debit_amount = $row->amount;
            $credit_amount = 0;
        }
        if ($row->general_ledger_id != '' && ($row->general_ledger_module == 'NOTA TIMBANG' || ($row->general_ledger_module == 'CONTRACT' && ($row->general_ledger_for == 1 || $row->general_ledger_for == 2)) || $row->general_ledger_module == 'STOCK TRANSIT' || $row->general_ledger_module == 'CONTRACT ADJUSTMENT' || $row->general_ledger_module == 'JURNAL MEMORIAL' || $row->general_ledger_module == 'INVOICE SALES' || $row->general_ledger_module == 'RETURN INVOICE SALES' || $row->general_ledger_module == 'INVOICE SALES OA'|| $row->general_ledger_module == 'RETURN INVOICE SALES OA')) {
            $debit_amount = $row->amount;
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'INVOICE DETAIL' && $row->general_ledger_for == 10 && $row->invoice_id != 0) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN INVOICE' && $row->general_ledger_for == 10 && $row->invoice_id != 0) {
            $credit_amount = $row->amount;
        }
//==CREDIT NOTIM==//
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13 || $row->general_ledger_for == 14) && $row->account_no == 230204) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13 || $row->general_ledger_for == 14) && $row->account_no == 210103) {
            $credit_amount = $row->amount;
        }
//==END CREDIT NOTIM==//

//==DEBIT NOTIM==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13) && $row->account_no == 140000) {
            $debit_amount = $row->amount * ((100 - $row->tf_tax_value) / 100);
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13) && $row->account_no == 230204 && $row->quantity < 0) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13) && $row->account_no == 230204) {
            $debit_amount = 0;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 && ($row->general_ledger_for == 14) && $row->account_no == 230204) {
            $debit_amount = $row->amount;;
        }
//==END DEBIT NOTIM==//

//==PAYMENT CREDIT===//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && ($row->general_ledger_for == 1 || $row->general_ledger_for == 15 || $row->general_ledger_for == 16)) {
            $debit_amount = $row->amount;
//$credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && ($row->general_ledger_for == 1 || $row->general_ledger_for == 15 || $row->general_ledger_for == 16)) {
//$debit_amount = $row->amount;
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 1) {
            $debit_amount = $row->amount;
//$credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 1) {
//$debit_amount = $row->amount;
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PETTY CASH' && $row->general_ledger_for == 12) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT ADMIN') {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 12) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 12) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 10 && $row->payment_id != 0) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 10 && $row->payment_id != 0) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->labor_id != 0 && $row->pph_journal != 0 && $row->payment_status != 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = $row->pph_journal;
        }
//==FREIGHT==//

        if ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3 && $row->payment_method == 2) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount - $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->account_id == 5 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 0 && ($row->account_no == 210103 || $row->account_no == 130003)) {
            $credit_amount = $row->amount * ((100 - $row->fc_tax) / 100);
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && ($row->account_no == 210103 || $row->account_no == 130003)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->payment_method == 2 && $row->freight_id != 0 && $row->fc_tax_ppn != '' && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->payment_method == 1 && $row->freight_id != 0 && $row->fc_tax_ppn != '' && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && ($row->account_no == 150410)) {
            $credit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->fc_tax != '' && $row->general_ledger_method == 'DP' && $row->payment_status == 1 && ($row->fc_tax_category == 0 || $row->fc_tax_category == 1) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->fc_tax != '' && $row->fc_tax_category == 0 && $row->payment_status == 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = 0;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->fc_tax != '' && $row->fc_tax_category == 1 && $row->payment_status == 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = 0;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->general_ledger_method == 'Down Payment' && $row->freight_id != 0 && ($row->account_no == 210103 || $row->account_no == 130003) && $row->payment_status == 1) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->fc_tax_category == 0 && $row->amountPayment < 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount * ((100 - $row->fc_tax) / 100);
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->payment_status == 1 && $row->fc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->payment_status == 1 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->fc_tax_category == 0 && ($row->account_no == 210103 || $row->account_no == 130003) && $row->payment_status == 1) {
            $db = $row->amount;
            $dbPPH = $row->amount * ($row->fc_tax / 100);
            $dbPPN = 0;
            $credit_amount = $row->amount + $dbPPN - $dbPPH/** ((100 - $row->fc_tax) / 100)*/
            ;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && ($row->account_no == 210103 || $row->account_no == 130003) && $row->payment_status == 1) {
            $credit_amount = $row->amount;
        }
//==END FREIGHT==//

//==VENDOR HANDLING==//

        if ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13 && $row->payment_method == 2) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount - $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->account_id == 397 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->payment_method == 2 && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $credit_amount = $row->amount * ((100 - $row->vhc_tax) / 100);
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $credit_amount = $row->amount;
        }


        if ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->vhc_tax != 0 && $row->general_ledger_method == 'DP' && $row->payment_status == 1 && ($row->vhc_tax_category == 0 || $row->vhc_tax_category == 1) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->vhc_tax != 0 && $row->vhc_tax_category == 0 && $row->payment_status == 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = 0;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->vhc_tax != 0 && $row->vhc_tax_category == 1 && $row->payment_status == 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = 0;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->general_ledger_method == 'Down Payment' && $row->vendor_handling_id != 0 && ($row->account_no == 210106 || $row->account_no == 130006) && $row->payment_status == 1) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->payment_status == 1 && $row->vhc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->payment_status == 1 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 0 && ($row->account_no == 210106 || $row->account_no == 130006) && $row->payment_status == 1) {
            $credit_amount = $row->amount * ((100 - $row->vhc_tax) / 100);
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && ($row->account_no == 210106 || $row->account_no == 130003) && $row->payment_status == 1) {
            $credit_amount = $row->amount;
        }
//==END VENDOR HANDLING==//

//==GENERAL VENDOR==//
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0 && ($row->account_no == 150410 || $row->account_no == 230100)) {
            $credit_amount = $row->ppn_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_transaction_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->ppn_journal != 0) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->account_type == 7 && $row->gv_pph_id == 21 && $row->gv_id != 0 && $row->pph_journal != 0 && $row->ppn_journal != 0) {
            $credit_amount = $row->amount + $row->ppn_journal + $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->ppn_journal != 0) {
            $credit_amount = ($row->amount + $row->ppn_journal) - $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0) {
            $credit_amount = $row->amount + $row->ppn_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->account_type == 7) {
            $credit_amount = $row->amount - $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0) {
            $credit_amount = $row->amount;
        }
//elseif($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT'){
//$credit_amount = $row->amount;
//}

        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201 || $row->account_no == 150440) && $row->pph_journal != 0) {
            $credit_amount = $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_transaction_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->gv_pph_id == 21 && $row->ppn_journal != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8)) {
            $credit_amount = ($row->amount + $row->ppn_journal + $row->ppn_journal) + $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_transaction_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8)) {
            $credit_amount = ($row->amount + $row->ppn_journal + $row->ppn_journal) - $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8)) {
            $credit_amount = $row->amount + $row->ppn_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->gv_pph_id == 21 && $row->pph_journal != 0 && $row->account_type == 7) {
            $credit_amount = $row->amount + $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->account_type == 7) {
            $credit_amount = $row->amount - $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0) {
            $credit_amount = $row->amount;
        }


//elseif($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT'){
//$credit_amount = $row->amount;
//}
//==END GENERAL VENDOR==//
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->payment_status != 1 && $row->account_type == 7 && ($row->general_ledger_for == 1)) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->payment_status != 1 && $row->account_no == 150410 && $row->general_ledger_for == 1) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 4 && $row->account_type == 7 && $row->payment_status != 1) {
            $credit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 6 && $row->account_type == 7 && $row->general_ledger_for2 == 'Internal Transfer') {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 6 && $row->account_type == 7 && $row->general_ledger_for2 == 'Internal Transfer') {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->payment_status != 1 && $row->account_no == 130001 && $row->general_ledger_for == 1) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->account_type == 7 && $row->pph_journal != 0 && $row->ppn_journal != 0 && $row->payment_status != 1 && $row->general_ledger_method == 'Down Payment') {
            $credit_amount = $row->amount + $row->ppn_journal - $row->pph_journal;
        }
//==UNLOADING COST==//
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for2 == 'Unloading Cost' && $row->account_type == 7) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->account_no == 210104) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->account_no == 130004) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->account_no == 210104) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->account_no == 130004) {
            $credit_amount = $row->amount;
        }
//==END UNLOADING COST==//
//==CURAH==//
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 2 && ($row->account_no == 210101 || $row->account_no == 130002)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 2 && $row->account_type == 7) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 2) {
            $credit_amount = $row->amount;
        }
//==END CURAH==//
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && ($row->general_ledger_for == 5)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && ($row->general_ledger_for == 5)) {
            $credit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && ($row->general_ledger_for == 5)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && ($row->general_ledger_for == 5)) {
            $debit_amount = $row->amount;
        }
//==END PAYMENT CREDIT===//

        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'INVOICE DETAIL' && $row->general_ledger_for == 10 && $row->invoice_id != 0) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN INVOICE' && $row->general_ledger_for == 10 && $row->invoice_id != 0) {
            $debit_amount = $row->amount;
        }

//==PAYMENT DEBIT==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PETTY CASH' && $row->general_ledger_for == 12) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT ADMIN') {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 12) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 12) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 10 && $row->payment_id != 0) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 10 && $row->payment_id != 0) {
            $debit_amount = $row->amount;
        }
        //==FREIGHT==//

        if ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax != '' && $row->general_ledger_method == 'DP' && ($row->fc_tax_category == 0 || $row->fc_tax_category == 1) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax != '' && $row->fc_tax_category == 0 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = 0;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax != '' && $row->fc_tax_category == 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = 0;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->general_ledger_method == 'Down Payment' && $row->freight_id != 0 && ($row->account_no == 210103 || $row->account_no == 130003)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 0 && $row->amountPayment < 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount * ((100 - $row->fc_tax) / 100);
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 0 && ($row->account_no == 210103 || $row->account_no == 130003)) {
            $db = $row->amount;
            $dbPPH = $row->amount * ($row->fc_tax / 100);
            $dbPPN = 0;
            $debit_amount = $row->amount + $dbPPN - $dbPPH/** ((100 - $row->fc_tax) / 100)*/
            ;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && ($row->account_no == 210103 || $row->account_no == 130003)) {
            $debit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && ($row->account_no == 150410)) {
            $debit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->payment_status == 1 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3 && $row->payment_method == 2) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->payment_status == 1 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount - $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->payment_status == 1 && $row->fc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->payment_status == 1 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->payment_status == 1 && $row->account_id == 5 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->payment_method == 2 && $row->freight_id != 0 && $row->pph_journal != 0 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } /*elseif($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->payment_method == 2 && $row->freight_id != 0 && $row->payment_status == 1 && $row->pph_journal != 0 && $row->general_ledger_for == 3){
$debit_amount = $row->amount ;
}
elseif($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->payment_method == 1 && $row->freight_id != 0 && $row->payment_status == 1 && $row->ppn_journal != 0 && $row->general_ledger_for == 3){
$debit_amount = $row->amount;
}*/ elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->fc_tax_category == 0 && $row->fc_tax_ppn != '' && ($row->account_no == 210103 || $row->account_no == 130003) && $row->payment_status == 1) {
            $db = $row->amount;
            $dbPPH = $row->amount * ($row->fc_tax / 100);
            $dbPPN = 0;
            $debit_amount = $row->amount + $dbPPN - $dbPPH/** ((100 - $row->fc_tax) / 100)*/
            ;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->payment_method == 1 && $row->freight_id != 0 && $row->fc_tax_ppn != '' && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->fc_tax_category == 0 && ($row->account_no == 210103 || $row->account_no == 130003) && $row->payment_status == 1) {
            $db = $row->amount;
            $dbPPH = $row->amount * ($row->fc_tax / 100);
            $dbPPN = 0;
            $debit_amount = $row->amount + $dbPPN - $dbPPH/** ((100 - $row->fc_tax) / 100)*/
            ;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && ($row->account_no == 210103 || $row->account_no == 130003) && $row->payment_status == 1) {
            $debit_amount = $row->amount;
        }
//==END FREIGHT==//
//==VENDOR HANDLING==//
//alaaan
        if ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax != '' && $row->general_ledger_method == 'DP' && ($row->vhc_tax_category == 0 || $row->vhc_tax_category == 1) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax != '' && $row->vhc_tax_category == 0 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = 0;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax != '' && $row->vhc_tax_category == 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = 0;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->general_ledger_method == 'Down Payment' && $row->vendor_handling_id != 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $debit_amount = $row->amount * ((100 - $row->vhc_tax) / 100);
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $debit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->payment_status == 1 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13 && $row->payment_method == 2) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->payment_status == 1 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount - $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->payment_status == 1 && $row->vhc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->payment_status == 1 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->payment_status == 1 && $row->account_id == 397 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->payment_method == 2 && $row->vendor_handling_id != 0 && $row->payment_status == 1 && $row->pph_journal != 0 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $debit_amount = $row->amount * ((100 - $row->vhc_tax) / 100);
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $debit_amount = $row->amount;
        }
//==END VENDOR HANDLING==//
//==UC==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for2 == 'Unloading Cost' && $row->account_type == 7 /*&& $row->payment_status != 1*/) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->account_no == 210104) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->account_no == 130004) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->account_no == 210104) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->account_no == 130004) {
            $debit_amount = $row->amount;
        }
//==END UC==//

//==PKS KONTRAK//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->account_no == 210102 && $row->payment_status != 1) {
            $debit_amount = $row->amount;
        }
//==END PKS KONTRAK//
//==GENERAL VENDOR==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201 || $row->account_no == 150440) && $row->pph_journal != 0) {
            $debit_amount = $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_transaction_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->gv_pph_id == 21 && $row->ppn_journal != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8)) {
            $debit_amount = ($row->amount + $row->ppn_journal + $row->ppn_journal) + $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_transaction_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8)) {
            $debit_amount = ($row->amount + $row->ppn_journal + $row->ppn_journal) - $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8)) {
            $debit_amount = $row->amount + $row->ppn_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->gv_pph_id == 21 && $row->pph_journal != 0 && $row->account_type == 7) {
            $debit_amount = $row->amount + $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->account_type == 7) {
            $debit_amount = $row->amount - $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0) {
            $debit_amount = $row->amount;
        }
//elseif($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT'){
//$debit_amount = $row->amount;
//}

        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0 && ($row->account_no == 150410 || $row->account_no == 230100)) {
            $debit_amount = $row->ppn_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_transaction_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->ppn_journal != 0) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->account_type == 7 && $row->gv_pph_id == 21 && $row->gv_id != 0 && $row->pph_journal != 0 && $row->ppn_journal != 0) {
            $debit_amount = $row->amount + $row->ppn_journal + $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->ppn_journal != 0) {
            $debit_amount = ($row->amount + $row->ppn_journal) - $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0) {
            $debit_amount = $row->amount + $row->ppn_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->account_type == 7) {
            $debit_amount = $row->amount - $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0) {
            $debit_amount = $row->amount;
        }
//elseif($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT'){
//$debit_amount = $row->amount;
//}
//==END GENERAL VENDOR==//
//==CURAH==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 2) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 2 && ($row->account_no == 210101 || $row->account_no == 130002)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 2 && $row->account_type == 7) {
            $debit_amount = $row->amount;
        }
//==END CURAH==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->payment_status != 1 && ($row->account_no == 150410 || $row->account_no == 230100)) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->account_type == 7 && $row->general_ledger_for == 6 && $row->general_ledger_for2 == 'Internal Transfer') {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->account_type == 7 && $row->general_ledger_for == 6 && $row->general_ledger_for2 == 'Internal Transfer') {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->payment_status != 1 && $row->account_no == 130001 && $row->general_ledger_for == 1) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->payment_status != 1 && $row->supplier_name == 'Kas Negara' && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = $row->amount;
        }
//==SALES==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 9 && $row->payment_status != 1) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 9 && $row->payment_status != 1) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 9 && $row->payment_status == 1) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 9 && $row->payment_status == 1) {
            $credit_amount = $row->amount;
        }
//==END SALES==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 10 && $row->payment_status != 1) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 10 && $row->payment_status != 1) {
            $credit_amount = $row->amount;
        }
        /*if ($row->payment_status == 1 && $row->gl_date < '2018-04-01') {
            $debit_amount = 'RETURN';
            $credit_amount = 'RETURN';
        }
        if ($row->invoice_payment == 2 && $row->gl_date < '2018-04-01') {
            $debit_amount = 'RETURN';
            $credit_amount = 'RETURN';
        }*/

//$general_ledger_id = $row->general_ledger_id;

        $voucherNo = "";
        $paymentNo = "";
        if ($row->contract_id != '' && $row->general_ledger_module == 'CONTRACT ADJUSTMENT') {
            $voucherNo = $row->payment_no;
            $paymentNo = 'JV-PO-' . $row->payment_no2;
        } elseif ($row->contract_id != '' && $row->general_ledger_module != 'CONTRACT ADJUSTMENT') {
            $voucherCode = $row->payment_location2 . '/' . $row->bank_code . '/' . $row->pcur_currency_code;


            if ($row->bank_type == 1) {
                $voucherCode .= ' - B';
            } elseif ($row->bank_type == 2) {
                $voucherCode .= ' - P';
            } elseif ($row->bank_type == 3) {
                $voucherCode .= ' - CAS';
            }

            if ($row->bank_type != 3) {
                if ($row->payment_type == 1) {
                    $voucherCode .= 'RV';
                } else {
                    $voucherCode .= 'PV';
                }
            }


            $voucherNo = $row->payment_no;
            $paymentNo = $voucherCode . ' # ' . $row->payment_no2;
        } elseif ($row->payment_id != '') {


            $voucherCode = $row->payment_location2 . '/' . $row->bank_code . '/' . $row->pcur_currency_code;


            if ($row->bank_type == 1) {
                $voucherCode .= ' - B';
            } elseif ($row->bank_type == 2) {
                $voucherCode .= ' - P';
            } elseif ($row->bank_type == 3) {
                $voucherCode .= ' - CAS';
            }

            if ($row->bank_type != 3) {
                if ($row->payment_type == 1) {
                    $voucherCode .= 'RV';
                } else {
                    $voucherCode .= 'PV';
                }
            }

            $voucherNo = $voucherCode . ' # ' . $row->payment_no;
            $paymentNo = $voucherCode . ' # ' . $row->payment_no2;

        } elseif ($row->invoice_id != '') {


            $voucherCode = $row->payment_location2 . '/' . $row->bank_code . '/' . $row->pcur_currency_code;


            if ($row->bank_type == 1) {
                $voucherCode .= ' - B';
            } elseif ($row->bank_type == 2) {
                $voucherCode .= ' - P';
            } elseif ($row->bank_type == 3) {
                $voucherCode .= ' - CAS';
            }

            if ($row->bank_type != 3) {
                if ($row->payment_type == 1) {
                    $voucherCode .= 'RV';
                } else {
                    $voucherCode .= 'PV';
                }
            }

            $voucherNo = $row->payment_no;
            $paymentNo = $voucherCode . ' # ' . $row->payment_no2;
        } else {
            $voucherNo = $row->payment_no;
            $paymentNo = $row->payment_no2;
        }

        $general_ledger_id = $row->general_ledger_id;
        $stockpile = $row->stockpile_name2;
        $gl_date = $row->gl_date;
        $general_ledger_module = $row->general_ledger_module;
        $general_ledger_method = $row->general_ledger_method;
        $general_ledger_transaction_type2 = $row->general_ledger_transaction_type2;
        $supplier_name = $row->supplier_name;
        $supplier_code = $row->supplier_code;
        $po_no = $row->po_no;
        $contract_no = $row->contract_no;
        $slip_no = $row->slip_no;
        $invoice_no = $row->invoice_no;
        $invoice_no_2 = $row->invoice_no_2;
        $tax_invoice = $row->tax_invoice;
        $cheque_no = $row->cheque_no;
        $remarks = $row->remarks;
        $shipment_code = $row->shipment_code;
        $quantity = $row->quantity;
        $price = $row->price;
        $account_no = $row->account_no;
        $account_name = $row->account_name;
        $exchange_rate = $row->exchange_rate;

        $date = new DateTime();
        $currentDate = $date->format('d/m/Y H:i:s');

        $debitAmount = 0;
        if ($row->general_ledger_type == 1) {
            $debitAmount = $debit_amount;
        } elseif ($row->general_ledger_type == '') {
            $debitAmount = $debit_amount;
        }
        $creditAmount = 0;
        if ($row->general_ledger_type == 2) {
            $creditAmount = $credit_amount;
        } elseif ($row->general_ledger_type == '') {
            $creditAmount = $credit_amount;
        }
		if($row->general_ledger_module == 'STOCK TRANSIT'){
            $contractId = $contractId1;
        }
        $sqlb = "INSERT INTO gl_report (general_ledger_id, contract_id, invoice_id, transaction_id, jurnal_id, payment_id, source, stockpile,gl_date, jurnal_no, general_ledger_module, general_ledger_method, general_ledger_transaction_type2, supplier_code,supplier_name, po_no, contract_no, slip_no, invoice_no, invoice_no_2, tax_invoice, cheque_no, remarks, shipment_code,quantity,price,account_no,account_name,exchange_rate,debitAmount,creditAmount, entry_date, entry_by, adj) VALUES ({$general_ledger_id}, {$contractId}, {$invoiceId}, {$transactionId}, {$jurnalId}, {$paymentId}, 'GL', '{$stockpile}','{$gl_date}','{$voucherNo}', '{$general_ledger_module}', '{$general_ledger_method}', '{$general_ledger_transaction_type2}', '{$supplier_code}','{$supplier_name}', '{$po_no}', '{$contract_no}', '{$slip_no}', '{$invoice_no}', '{$invoice_no_2}', '{$tax_invoice}', '{$cheque_no}', '{$remarks}', '{$shipment_code}','{$quantity}','{$price}','{$account_no}','{$account_name}','{$exchange_rate}',{$debitAmount},{$creditAmount}, STR_TO_DATE('{$currentDate}', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},{$adjustmentId})";
        $resultb = $myDatabase->query($sqlb, MYSQLI_STORE_RESULT);

        echo $sqlb;
    }

}

function insertReportGL_JurnalMemorial($myDatabase, $source, $invoiceId = "NULL", $i_id = "NULL", $contractId = "NULL", $transactionId = "NULL", $paymentId = "NULL", $rpt_upload_id = "NULL", $returnId = "NULL")
{

    $whereCondition = '';


    if ($rpt_upload_id != 'NULL') {


        $whereCondition .= "AND rpt_upload_id = {$rpt_upload_id}";

    }
    $sqla = "SELECT * FROM rpt_upload WHERE 1=1 {$whereCondition}";
    $resulta = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);
    while ($row = $resulta->fetch_object()) {


        if ($row->amounts < 0) {
            $creditAmount = $row->amounts * -1;
            $debitAmount = 0;
        } elseif ($row->amounts > 0) {
            $debitAmount = $row->amounts;
            $creditAmount = 0;
        }

        $voucherNo = $row->payment_no;
        $general_ledger_id = "NULL";
        $stockpile = $row->stockpile_name;
        $gl_date = $row->gl_date;
        $general_ledger_module = $row->gl_module;
        $general_ledger_method = "NULL";
        $general_ledger_transaction_type2 = "NULL";
        $supplier_name = $row->supplier_name;
        $supplier_code = $row->supplier_code;
        $po_no = $row->po_no;
        $contract_no = $row->contract_no;
        $slip_no = $row->slip_no;
        $invoice_no = $row->invoice_no;
        $invoice_no_2 = "NULL";
        $tax_invoice = "NULL";
        $cheque_no = "NULL";
        $remarks = $row->description;
        $shipment_code = $row->shipment_code;
        $quantity = $row->quantity;
        $price = $row->price;
        $account_no = $row->account_no;
        $account_name = $row->account_name;
        $exchange_rate = 0;

        $date = new DateTime();
        $currentDate = $date->format('d/m/Y H:i:s');


        $sqlb = "INSERT INTO gl_report (general_ledger_id, contract_id, invoice_id, transaction_id, jurnal_id, payment_id, source, stockpile,gl_date, jurnal_no, general_ledger_module, general_ledger_method, general_ledger_transaction_type2, supplier_code,supplier_name, po_no, contract_no, slip_no, invoice_no, invoice_no_2, tax_invoice, cheque_no, remarks, shipment_code,quantity,price,account_no,account_name,exchange_rate,debitAmount,creditAmount, entry_date, entry_by) VALUES ({$general_ledger_id}, {$contractId}, {$invoiceId}, {$transactionId}, {$rpt_upload_id}, {$paymentId}, 'GL', '{$stockpile}','{$gl_date}','{$voucherNo}', '{$general_ledger_module}', '{$general_ledger_method}', '{$general_ledger_transaction_type2}', '{$supplier_code}','{$supplier_name}', '{$po_no}', '{$contract_no}', '{$slip_no}', '{$invoice_no}', '{$invoice_no_2}', '{$tax_invoice}', '{$cheque_no}', '{$remarks}', '{$shipment_code}','{$quantity}','{$price}','{$account_no}','{$account_name}','{$exchange_rate}',{$debitAmount},{$creditAmount}, STR_TO_DATE('{$currentDate}', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']})";
        $resultb = $myDatabase->query($sqlb, MYSQLI_STORE_RESULT);

        echo $sqlb;
    }

//echo $sqla;

}

function insertReportGL2($myDatabase, $source, $invoiceId = "NULL", $i_id = "NULL", $contractId = "NULL", $transactionId = "NULL", $paymentId = "NULL", $jurnalId = "NULL", $returnId = "NULL")
{

    $whereCondition = '';


    if ($contractId != 'NULL' && $source != 'STOCK TRANSIT' && $source == 'CONTRACT ADJUSTMENT') {

        $sqlDelete = "DELETE FROM gl_report WHERE contract_id = {$contractId} AND general_ledger_module = 'CONTRACT ADJUSTMENT'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.contract_id = {$contractId} AND gl.general_ledger_module = 'CONTRACT ADJUSTMENT'";

    } elseif ($contractId != 'NULL' && $source == 'STOCK TRANSIT' && $source != 'CONTRACT ADJUSTMENT') {

        $sqlDelete = "DELETE FROM gl_report WHERE contract_id = {$contractId} AND general_ledger_module = 'STOCK TRANSIT'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.contract_id = {$contractId} AND gl.general_ledger_module = 'STOCK TRANSIT'";

    } elseif ($contractId != 'NULL' && $source != 'STOCK TRANSIT' && $source != 'CONTRACT ADJUSTMENT') {

        $sqlDelete = "DELETE FROM gl_report WHERE contract_id = {$contractId} AND general_ledger_module = 'CONTRACT'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.contract_id = {$contractId} AND gl.general_ledger_module = 'CONTRACT'";

    } elseif ($jurnalId != 'NULL') {

        $sqlDelete = "DELETE FROM gl_report WHERE jurnal_id = {$jurnalId} AND general_ledger_module = 'JURNAL MEMORIAL'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.jurnal_id = {$jurnalId} AND gl.general_ledger_module = 'JURNAL MEMORIAL'";

    } elseif ($invoiceId != 'NULL' && $source == 'RETURN INVOICE') {

        $sqlDelete = "DELETE FROM gl_report WHERE invoice_id = {$invoiceId} AND general_ledger_module = 'RETURN INVOICE'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.invoice_id = {$invoiceId} AND gl.general_ledger_module = 'RETURN INVOICE'";

    } elseif ($invoiceId != 'NULL' && $source == 'INVOICE DETAIL') {

        $sqlDelete = "DELETE FROM gl_report WHERE invoice_id = {$invoiceId} AND general_ledger_module = 'INVOICE DETAIL'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.invoice_id = {$invoiceId} AND gl.general_ledger_module = 'INVOICE DETAIL'";

    } elseif ($transactionId != 'NULL' && $source == 'NOTA TIMBANG2') {

        $sqlDelete = "DELETE FROM gl_report WHERE transaction_id = {$transactionId} AND general_ledger_module = 'NOTA TIMBANG2'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.transaction_id = {$transactionId} AND gl.general_ledger_module = 'NOTA TIMBANG2'";

    } elseif ($transactionId != 'NULL' && $source == 'NOTA TIMBANG') {

        $sqlDelete = "DELETE FROM gl_report WHERE transaction_id = {$transactionId} AND general_ledger_module = 'NOTA TIMBANG'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.transaction_id = {$transactionId} AND gl.general_ledger_module = 'NOTA TIMBANG'";

    } elseif ($paymentId != 'NULL' && $source == 'PAYMENT') {

        $sqlDelete = "DELETE FROM gl_report WHERE payment_id = {$paymentId} AND general_ledger_module = 'PAYMENT'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.payment_id = {$paymentId} AND gl.general_ledger_module = 'PAYMENT'";

    } elseif ($paymentId != 'NULL' && $source == 'PAYMENT ADMIN') {

        $sqlDelete = "DELETE FROM gl_report WHERE payment_id = {$paymentId} AND general_ledger_module = 'PAYMENT ADMIN'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.payment_id = {$paymentId} AND gl.general_ledger_module = 'PAYMENT ADMIN'";

    } elseif ($paymentId != 'NULL' && $source == 'PETTY CASH') {

        $sqlDelete = "DELETE FROM gl_report WHERE payment_id = {$paymentId} AND general_ledger_module = 'PETTY CASH'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.payment_id = {$paymentId} AND gl.general_ledger_module = 'PETTY CASH'";

    } elseif ($paymentId != 'NULL' && $source == 'RETURN PAYMENT') {

        $sqlDelete = "DELETE FROM gl_report WHERE payment_id = {$paymentId} AND general_ledger_module = 'RETURN PAYMENT'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.payment_id = {$paymentId} AND gl.general_ledger_module = 'RETURN PAYMENT'";

    }

    $sqla = "SELECT gl.*,
(SELECT `amount` FROM  payment p WHERE p.payment_id = gl.payment_id  ) AS amountPayment , 
(SELECT `pph_journal` FROM  payment p WHERE p.payment_id = gl.payment_id  ) AS pph_journal ,
(SELECT `ppn_journal` FROM  payment p WHERE p.payment_id = gl.payment_id  ) AS ppn_journal,
(SELECT `account_no` FROM  account a WHERE a.account_id = gl.account_id) AS account_no,
(SELECT `account_name` FROM  account a WHERE a.account_id = gl.account_id) AS account_name,
	
	CASE WHEN gl.general_ledger_transaction_type = 1 THEN 'IN'
		WHEN gl.general_ledger_transaction_type = 2 THEN 'OUT'
		ELSE '' END AS general_ledger_transaction_type2,
                
	CASE WHEN gl.general_ledger_for = 1 THEN 'PKS Kontrak'
		WHEN gl.general_ledger_for = 2 THEN 'PKS Curah'
		WHEN gl.general_ledger_for = 3 THEN 'Freight Cost'
		WHEN gl.general_ledger_for = 4 THEN 'Unloading Cost'
		WHEN gl.general_ledger_for = 5 THEN 'Other'
		WHEN gl.general_ledger_for = 6 THEN 'Internal Transfer'
		WHEN gl.general_ledger_for = 7 THEN 'Retur'
		WHEN gl.general_ledger_for = 8 THEN 'Umum, HO'
		WHEN gl.general_ledger_for = 9 THEN 'Sales'
		WHEN gl.general_ledger_for = 10 THEN 'Invoice'
		WHEN gl.general_ledger_for = 11 THEN 'Jurnal Memorial'
		WHEN gl.general_ledger_for = 13 THEN 'Handling Cost'
		WHEN gl.general_ledger_for = 14 THEN 'Freight Cost Shrink'
		ELSE '' END AS general_ledger_for2,
        
	CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT s.stockpile_name FROM stockpile_contract sc INNER JOIN stockpile s ON s.stockpile_id = sc.stockpile_id
 WHERE sc.contract_id = gl.contract_id AND sc.quantity > 0 ORDER BY sc.`stockpile_contract_id` ASC LIMIT 1)
		WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT s.stockpile_name FROM stockpile s LEFT JOIN invoice i ON i.stockpileId = s.stockpile_id LEFT JOIN invoice_detail id ON i.`invoice_id` = id.`invoice_id` WHERE id.invoice_detail_id = gl.invoice_id)
		WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT s.stockpile_name FROM stockpile s WHERE s.stockpile_code = (SELECT SUBSTR(slip_no,1,3) FROM TRANSACTION WHERE transaction_id = gl.transaction_id))
		WHEN gl.transaction_id IS NOT NULL AND gl.account_id != 8 AND gl.account_id != 51 AND gl.general_ledger_for = 2 AND (SELECT return_shipment FROM contract c WHERE c.contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id  = (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.transaction_id)))
		THEN (SELECT stockpile_name FROM stockpile WHERE stockpile_id = 
			(SELECT stockpile_id FROM sales WHERE sales_id = (SELECT sales_id FROM shipment WHERE shipment_id = 
			(SELECT return_shipment_id FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = 
			(SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.transaction_id))))))
		WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14)
		THEN (SELECT s.stockpile_name FROM stockpile_contract sc INNER JOIN stockpile s ON s.stockpile_id = sc.stockpile_id INNER JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id WHERE gl.transaction_id = t.transaction_id)
		
		WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT s.stockpile_name FROM stockpile s INNER JOIN sales sl ON s.stockpile_id = sl.stockpile_id INNER JOIN shipment sh ON sh.sales_id = sl.sales_id INNER JOIN `transaction` t ON t.shipment_id = sh.shipment_id WHERE gl.transaction_id = t.transaction_id) 
		WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 5 OR gl.general_ledger_for = 6 OR gl.general_ledger_for = 8 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 10 OR gl.general_ledger_for = 12 OR gl.general_ledger_for = 13) THEN (SELECT s.stockpile_name FROM 					stockpile s INNER JOIN payment p ON p.stockpile_location = s.stockpile_id WHERE gl.payment_id = p.payment_id)
		WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT s.stockpile_name FROM stockpile s LEFT JOIN gl_detail jd ON jd.stockpile_id = s.stockpile_id WHERE jd.gl_detail_id = gl.jurnal_id) 
		ELSE '' END AS stockpile_name2,
			
	CASE WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) 
		THEN (SELECT t.slip_no FROM `transaction` t WHERE t.transaction_id = gl.transaction_id)
		WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13)
		THEN (SELECT t.slip_no FROM `transaction` t WHERE t.transaction_id = gl.t_id)
		WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT t.slip_no FROM `transaction` t LEFT JOIN gl_add jm ON jm.transaction_id = t.transaction_id LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id) 
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT t.slip_no FROM `transaction` t LEFT JOIN payment_cash pc ON pc.transaction_id = t.transaction_id WHERE pc.payment_cash_id = gl.cash_id)
		ELSE '' END AS slip_no,
			  
	CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT vendor_name FROM vendor WHERE vendor_id = (SELECT vendor_id FROM contract WHERE contract_id = gl.contract_id))
		WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN 'ADJUSTMENT AUDIT'	
		WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2) THEN (SELECT vendor_name FROM vendor WHERE vendor_id = (SELECT c.vendor_id FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id WHERE t.transaction_id = gl.transaction_id))
		WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 3 OR gl.general_ledger_for = 14) THEN (SELECT `freight_supplier` FROM freight f WHERE f.freight_id = (SELECT freight_id FROM freight_cost WHERE freight_cost_id = (SELECT freight_cost_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`)))
		WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT vh.`vendor_handling_name` FROM vendor_handling vh WHERE vh.vendor_handling_id = (SELECT vendor_handling_id FROM vendor_handling_cost WHERE handling_cost_id = (SELECT handling_cost_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`)))
		WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT labor_name FROM labor WHERE labor_id = (SELECT labor_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`))
		WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT cust.customer_name FROM customer cust WHERE customer_id = (SELECT customer_id FROM sales WHERE sales_id = (SELECT sales_id FROM shipment WHERE shipment_id = (SELECT shipment_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`))))
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT vendor_name FROM vendor WHERE vendor_id = (SELECT c.vendor_id FROM contract c LEFT JOIN stockpile_contract sc ON c.`contract_id` = sc.`contract_id` LEFT JOIN payment p ON sc.`stockpile_contract_id` = p.`stockpile_contract_id` WHERE p.`payment_id` = gl.payment_id))
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 2 THEN (SELECT vendor_name FROM vendor WHERE vendor_id = (SELECT vendor_id FROM payment WHERE payment_id = gl.payment_id))
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT `freight_supplier` FROM freight f WHERE f.freight_id = (SELECT freight_id FROM payment WHERE payment_id = gl.`payment_id`))
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT vh.`vendor_handling_name` FROM vendor_handling vh WHERE vh.vendor_handling_id = (SELECT vendor_handling_id FROM payment WHERE payment_id = gl.`payment_id`))
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT labor_name FROM labor WHERE labor_id = (SELECT labor_id FROM `payment` WHERE payment_id = gl.`payment_id`))   
		WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 5 OR gl.general_ledger_for = 8) THEN (SELECT gv.general_vendor_name FROM general_vendor gv WHERE gv.general_vendor_id = (SELECT p.general_vendor_id FROM payment p WHERE p.payment_id = gl.payment_id))                
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 6 THEN (SELECT ap.account_name FROM account ap WHERE ap.account_id = (SELECT p.account_id FROM payment p WHERE p.payment_id = gl.payment_id ))
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT cust.customer_name FROM customer cust WHERE customer_id = (SELECT customer_id FROM sales WHERE sales_id = (SELECT sales_id FROM payment  WHERE payment_id = gl.payment_id)))				
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT DISTINCT(gv.general_vendor_name) FROM general_vendor gv LEFT JOIN invoice_detail id ON gv.general_vendor_id = id.general_vendor_id LEFT JOIN invoice i ON i.invoice_id = id.invoice_id LEFT JOIN payment p ON p.invoice_id = i.invoice_id WHERE p.payment_id = gl.payment_id LIMIT 1)
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT DISTINCT(gv.general_vendor_name) FROM general_vendor gv LEFT JOIN payment_cash pc ON gv.general_vendor_id = pc.general_vendor_id WHERE pc.payment_id = gl.payment_id LIMIT 1)
		WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT general_vendor_name FROM general_vendor  WHERE general_vendor_id = (SELECT general_vendor_id FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id))
		WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 AND (SELECT general_vendor_id FROM gl_add WHERE gl_add_id = (SELECT gl_add_id FROM gl_detail WHERE gl_detail_id = gl.jurnal_id)) IS NOT NULL THEN (SELECT general_vendor_name FROM general_vendor  WHERE general_vendor_id = (SELECT general_vendor_id FROM payment  WHERE payment_id = gl.payment_id))
		ELSE '' END AS supplier_name,
		
		CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT vendor_code FROM vendor WHERE vendor_id = (SELECT vendor_id FROM contract WHERE contract_id = gl.contract_id))
		WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN 'AA'	
		WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2) THEN (SELECT vendor_code FROM vendor WHERE vendor_id = (SELECT c.vendor_id FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id WHERE t.transaction_id = gl.transaction_id))
		WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 3 OR gl.general_ledger_for = 14) THEN (SELECT `freight_code` FROM freight f WHERE f.freight_id = (SELECT freight_id FROM freight_cost WHERE freight_cost_id = (SELECT freight_cost_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`)))
		WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT vh.`vendor_handling_code` FROM vendor_handling vh WHERE vh.vendor_handling_id = (SELECT vendor_handling_id FROM vendor_handling_cost WHERE handling_cost_id = (SELECT handling_cost_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`)))
		WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT labor_code FROM labor WHERE labor_id = (SELECT labor_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`))
		WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT cust.customer_code FROM customer cust WHERE customer_id = (SELECT customer_id FROM sales WHERE sales_id = (SELECT sales_id FROM shipment WHERE shipment_id = (SELECT shipment_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`))))
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT vendor_code FROM vendor WHERE vendor_id = (SELECT c.vendor_id FROM contract c LEFT JOIN stockpile_contract sc ON c.`contract_id` = sc.`contract_id` LEFT JOIN payment p ON sc.`stockpile_contract_id` = p.`stockpile_contract_id` WHERE p.`payment_id` = gl.payment_id))
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 2 THEN (SELECT vendor_code FROM vendor WHERE vendor_id = (SELECT vendor_id FROM payment WHERE payment_id = gl.payment_id))
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT `freight_code` FROM freight f WHERE f.freight_id = (SELECT freight_id FROM payment WHERE payment_id = gl.`payment_id`))
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT vh.`vendor_handling_code` FROM vendor_handling vh WHERE vh.vendor_handling_id = (SELECT vendor_handling_id FROM payment WHERE payment_id = gl.`payment_id`))
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT labor_code FROM labor WHERE labor_id = (SELECT labor_id FROM `payment` WHERE payment_id = gl.`payment_id`))   
		WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 5 OR gl.general_ledger_for = 8) THEN (SELECT gv.general_vendor_code FROM general_vendor gv WHERE gv.general_vendor_id = (SELECT p.general_vendor_id FROM payment p WHERE p.payment_id = gl.payment_id))                
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 6 THEN (SELECT ap.account_name FROM account ap WHERE ap.account_id = (SELECT p.account_id FROM payment p WHERE p.payment_id = gl.payment_id ))
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT cust.customer_code FROM customer cust WHERE customer_id = (SELECT customer_id FROM sales WHERE sales_id = (SELECT sales_id FROM payment  WHERE payment_id = gl.payment_id)))				
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT DISTINCT(gv.general_vendor_code) FROM general_vendor gv LEFT JOIN invoice_detail id ON gv.general_vendor_id = id.general_vendor_id LEFT JOIN invoice i ON i.invoice_id = id.invoice_id LEFT JOIN payment p ON p.invoice_id = i.invoice_id WHERE p.payment_id = gl.payment_id LIMIT 1)
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT DISTINCT(gv.general_vendor_code) FROM general_vendor gv LEFT JOIN payment_cash pc ON gv.general_vendor_id = pc.general_vendor_id WHERE pc.payment_id = gl.payment_id LIMIT 1)
		WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT general_vendor_code FROM general_vendor  WHERE general_vendor_id = (SELECT general_vendor_id FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id))
		WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 AND (SELECT general_vendor_id FROM gl_add WHERE gl_add_id = (SELECT gl_add_id FROM gl_detail WHERE gl_detail_id = gl.jurnal_id)) IS NOT NULL THEN (SELECT general_vendor_code FROM general_vendor  WHERE general_vendor_id = (SELECT general_vendor_id FROM payment  WHERE payment_id = gl.payment_id))
		ELSE '' END AS supplier_code,
				 
	CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT contract_no FROM contract WHERE contract_id = gl.contract_id)
		WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14)
		THEN  (SELECT contract_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.transaction_id))) 
		WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT sales_no FROM sales WHERE sales_id = (SELECT sales_id FROM shipment WHERE shipment_id = (SELECT shipment_id FROM `transaction` WHERE transaction_id = gl.transaction_id)))
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 1 THEN  (SELECT contract_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM payment WHERE payment_id = gl.payment_id))) 
		WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 13) THEN (SELECT contract_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.t_id)))
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT c.contract_no FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id LEFT JOIN payment_cash pc ON pc.transaction_id = t.transaction_id WHERE pc.payment_cash_id = gl.cash_id)
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 4 THEN  (SELECT contract_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM payment WHERE payment_id = gl.payment_id))) 
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT sales_no FROM sales WHERE sales_id = (SELECT sales_id FROM shipment WHERE shipment_id = (SELECT shipment_id FROM `transaction` WHERE transaction_id = gl.transaction_id)))
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT i.entry_date FROM invoice i LEFT JOIN payment p ON i.invoice_id = p.invoice_id WHERE p.payment_id = gl.payment_id), '%Y-%m-%d') < '2018-09-24' THEN (SELECT c.contract_no FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN invoice i ON i.`po_id` = sc.`stockpile_contract_id` LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT i.entry_date FROM invoice i LEFT JOIN payment p ON i.invoice_id = p.invoice_id WHERE p.payment_id = gl.payment_id), '%Y-%m-%d') >= '2018-09-24' THEN (SELECT c.contract_no FROM contract c LEFT JOIN invoice_detail id ON c.contract_id = id.poId LEFT JOIN invoice i ON i.invoice_id = id.invoice_id LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id LIMIT 1)
		WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT entry_date FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id), '%Y-%m-%d') < '2018-09-24'  THEN (SELECT c.contract_no FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN invoice i ON i.`po_id` = sc.`stockpile_contract_id` LEFT JOIN invoice_detail id ON i.`invoice_id` = id.invoice_id WHERE id.`invoice_detail_id` = gl.invoice_id)
		WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT entry_date FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id), '%Y-%m-%d') >= '2018-09-24' THEN (SELECT c.contract_no FROM contract c LEFT JOIN invoice_detail id ON c.contract_id = id.poId WHERE id.`invoice_detail_id` = gl.invoice_id)
		WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT c.contract_no FROM contract c LEFT JOIN gl_add jm ON jm.contract_id = c.contract_id LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
		ELSE '' END AS contract_no,

	CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT po_no FROM contract WHERE contract_id = gl.contract_id)
		WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14)
		THEN (SELECT po_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.transaction_id))) 
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT po_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM payment WHERE payment_id = gl.payment_id)))
		WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 13) THEN (SELECT po_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.t_id)))
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT c.po_no FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id LEFT JOIN payment_cash pc ON pc.transaction_id = t.transaction_id WHERE pc.payment_cash_id = gl.cash_id)
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT po_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM payment WHERE payment_id = gl.payment_id)))
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT i.entry_date FROM invoice i LEFT JOIN payment p ON i.invoice_id = p.invoice_id WHERE p.payment_id = gl.payment_id), '%Y-%m-%d') < '2018-09-24' THEN (SELECT c.po_no FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN invoice i ON i.`po_id` = sc.`stockpile_contract_id` LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT i.entry_date FROM invoice i LEFT JOIN payment p ON i.invoice_id = p.invoice_id WHERE p.payment_id = gl.payment_id), '%Y-%m-%d') >= '2018-09-24' THEN (SELECT c.po_no FROM contract c LEFT JOIN invoice_detail id ON c.contract_id = id.poId LEFT JOIN invoice i ON i.invoice_id = id.invoice_id LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id LIMIT 1)
		WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT entry_date FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id), '%Y-%m-%d') < '2018-09-24'  THEN (SELECT c.po_no FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN invoice i ON i.`po_id` = sc.`stockpile_contract_id` LEFT JOIN invoice_detail id ON i.`invoice_id` = id.invoice_id WHERE id.`invoice_detail_id` = gl.invoice_id)
		WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT entry_date FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id), '%Y-%m-%d') >= '2018-09-24' THEN (SELECT c.po_no FROM contract c LEFT JOIN invoice_detail id ON c.contract_id = id.poId WHERE id.`invoice_detail_id` = gl.invoice_id)
		WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT c.po_no FROM contract c LEFT JOIN gl_add jm ON jm.contract_id = c.contract_id LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
		ELSE '' END AS po_no,
			
	CASE WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 12 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) THEN (SELECT invoice_no FROM payment WHERE payment_id = gl.payment_id)
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.invoice_no FROM invoice i LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
		WHEN gl.invoice_id IS NOT NULL THEN (SELECT i.invoice_no FROM invoice i LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id)
		WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT i.invoice_no FROM invoice i LEFT JOIN gl_add jm ON jm.invoice_id = i.invoice_id LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
		ELSE '' END AS invoice_no,
			
	CASE WHEN gl.payment_id IS NOT NULL THEN (SELECT tax_invoice FROM payment WHERE payment_id = gl.payment_id)
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.invoice_tax FROM invoice i LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
		WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.invoice_tax FROM invoice i LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id
		WHERE id.invoice_detail_id = gl.invoice_id ORDER BY id.invoice_detail_id DESC LIMIT 1)
		ELSE '' END AS tax_invoice,
                
	CASE WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 12 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) THEN (SELECT invoice_no FROM payment WHERE payment_id = gl.payment_id)
		WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.invoice_no2 FROM invoice i LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id
		WHERE id.invoice_detail_id = gl.invoice_id ORDER BY id.invoice_detail_id DESC LIMIT 1)
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.invoice_no2 FROM invoice i LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
		WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT i.invoice_no2 FROM invoice i LEFT JOIN gl_add jm ON jm.invoice_id = i.invoice_id LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
		ELSE '' END AS invoice_no_2,
				
	CASE WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.payment_status FROM invoice i LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id
		WHERE id.invoice_detail_id = gl.invoice_id)
		ELSE '' END AS invoice_payment,
               
	CASE WHEN gl.payment_id IS NOT NULL THEN (SELECT cheque_no FROM payment WHERE payment_id = gl.payment_id)
		ELSE '' END AS cheque_no,
                
	CASE WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 5 OR gl.general_ledger_for = 8) THEN  (SELECT shipment_no FROM shipment WHERE shipment_id = (SELECT shipment_id FROM payment WHERE payment_id = gl.payment_id)) 
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT GROUP_CONCAT(sh2.shipment_no) FROM payment_detail pd2 LEFT JOIN shipment sh2 ON sh2.shipment_id = pd2.shipment_id WHERE pd2.payment_id = gl.payment_id GROUP BY pd2.payment_id)
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT DISTINCT(sh.shipment_no) FROM shipment sh LEFT JOIN invoice_detail id ON sh.shipment_id = id.shipment_id LEFT JOIN invoice i ON i.invoice_id = id.invoice_id LEFT JOIN payment p ON p.invoice_id = i.invoice_id WHERE p.payment_id = gl.payment_id LIMIT 1)
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT DISTINCT(sh.shipment_no) FROM shipment sh LEFT JOIN payment_cash pc ON sh.shipment_id = pc.shipment_id WHERE pc.payment_cash_id = gl.cash_id LIMIT 1)
		WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT sh.shipment_no FROM shipment sh LEFT JOIN adjustment_audit aa ON sh.shipment_id = aa.shipment_id LEFT JOIN `transaction` t ON t.adjustmentAudit_id = audit_id WHERE t.transaction_id = gl.transaction_id)
		WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT mutasi_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT mh.kode_mutasi FROM mutasi_header mh LEFT JOIN TRANSACTION t ON t.mutasi_id = mh.mutasi_header_id WHERE t.transaction_id = gl.transaction_id)
		WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT c.return_shipment FROM contract c LEFT JOIN stockpile_contract sc ON c.`contract_id` = sc.`contract_id` LEFT JOIN TRANSACTION t ON t.`stockpile_contract_id` = sc.`stockpile_contract_id` WHERE t.`transaction_id` = gl.transaction_id LIMIT 1) IS NOT NULL THEN (SELECT sh.shipment_no FROM shipment sh LEFT JOIN contract c ON sh.shipment_id = c.return_shipment_id LEFT JOIN stockpile_contract sc ON sc.contract_id = c.contract_id LEFT JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id WHERE t.transaction_id = gl.transaction_id LIMIT 1)
		WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT shipment_no FROM shipment WHERE shipment_id = (SELECT shipment_id FROM `transaction` WHERE transaction_id = gl.transaction_id ))
		WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 AND (SELECT mutasi_detail_id FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id) IS NOT NULL THEN (SELECT mh.kode_mutasi FROM mutasi_header mh LEFT JOIN mutasi_detail md ON mh.mutasi_header_id = md.mutasi_header_id LEFT JOIN invoice_detail id ON id.mutasi_detail_id = md.mutasi_detail_id WHERE id.invoice_detail_id = gl.invoice_id LIMIT 1)
		WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT shipment_no FROM shipment WHERE shipment_id = (SELECT shipment_id FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id))
		WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT sh.shipment_no FROM shipment sh LEFT JOIN gl_add jm ON jm.shipment_id = sh.shipment_id LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
		WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT mh.kode_mutasi FROM mutasi_header mh LEFT JOIN mutasi_contract mc ON mh.mutasi_header_id = mc.mutasi_header_id LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = mc.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)  
		ELSE '' END AS shipment_code,
				
	CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.general_ledger_module = 'CONTRACT ADJUSTMENT' THEN (SELECT adjustment FROM contract WHERE contract_id = gl.contract_id)
		WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT quantity FROM contract WHERE contract_id = gl.contract_id) 
		WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.general_ledger_module = 'STOCK TRANSIT' THEN (SELECT st.send_weight FROM stock_transit st LEFT JOIN stockpile_contract sc ON st.stockpile_contract_id = sc.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)
		WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.account_id = 8 THEN (SELECT quantity FROM `transaction` WHERE transaction_id = gl.transaction_id)
		WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.account_id = 52 THEN (SELECT shrink FROM `transaction` WHERE transaction_id = gl.transaction_id) 
		WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.account_id = 147 THEN (SELECT send_weight FROM `transaction` WHERE transaction_id = gl.transaction_id) 
		WHEN gl.transaction_id IS NOT NULL AND(gl.general_ledger_for = 2 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 9) THEN (SELECT quantity FROM `transaction` WHERE transaction_id = gl.transaction_id)
		WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT freight_quantity FROM `transaction` WHERE transaction_id = gl.transaction_id) 
		WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT handling_quantity FROM `transaction` WHERE transaction_id = gl.transaction_id) 
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT pc.qty FROM payment_cash pc WHERE pc.`payment_cash_id` = gl.cash_id)
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT quantity FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM payment WHERE payment_id = gl.payment_id ))) 
		WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 4) THEN (SELECT COALESCE(SUM(t2.quantity), 0) FROM `transaction` t2 WHERE t2.transaction_id = gl.t_id)
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT COALESCE(SUM(t2.freight_quantity), 0) FROM `transaction` t2 WHERE t2.transaction_id = gl.t_id)
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT COALESCE(SUM(t2.handling_quantity), 0) FROM `transaction` t2 WHERE t2.hc_payment_id = gl.payment_id)
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT COALESCE(SUM(sh2.quantity), 0) FROM payment_detail pd2 LEFT JOIN shipment sh2 ON sh2.shipment_id = pd2.shipment_id WHERE pd2.payment_id = gl.payment_id)
		WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 5 OR gl.general_ledger_for = 6 OR gl.general_ledger_for = 8) THEN (SELECT qty FROM payment WHERE payment_id = gl.payment_id ) 
		WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT jm.quantity FROM gl_add jm LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
		WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT qty FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id)
		ELSE '' END AS quantity,
				
	 CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT price_converted FROM contract WHERE contract_id = gl.contract_id) 
		WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 9) THEN (SELECT unit_price FROM `transaction` WHERE transaction_id = gl.transaction_id) 
		WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT freight_price FROM `transaction` WHERE transaction_id = gl.transaction_id)  
		WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT GROUP_CONCAT(vhc.price_converted) FROM vendor_handling_cost vhc LEFT JOIN `transaction` t ON vhc.handling_cost_id = t.handling_cost_id WHERE t.transaction_id = gl.transaction_id)  
		WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT unloading_price FROM `transaction` WHERE transaction_id = gl.transaction_id) 
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT pc.price FROM payment_cash pc WHERE pc.`payment_cash_id` = gl.cash_id)
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT GROUP_CONCAT(vhc.price_converted) FROM vendor_handling_cost vhc LEFT JOIN vendor_handling vh ON vh.vendor_handling_id = vhc.vendor_handling_id LEFT JOIN payment p ON p.vendor_handling_id = vh.vendor_handling_id WHERE p.payment_id = gl.payment_id)
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT GROUP_CONCAT(t2.freight_price) FROM `transaction` t2 WHERE t2.transaction_id = gl.t_id)
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 2 THEN (SELECT GROUP_CONCAT(t2.unit_price) FROM `transaction` t2 WHERE t2.transaction_id = gl.t_id)
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT price_converted FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM payment WHERE payment_id = gl.payment_id ))) 
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT GROUP_CONCAT(t2.unit_price) FROM `transaction` t2 WHERE t2.payment_id = gl.payment_id GROUP BY t2.payment_id)
		WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 5 OR gl.general_ledger_for = 6 OR gl.general_ledger_for = 8) THEN (SELECT price FROM payment WHERE payment_id = gl.payment_id )
		WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT price FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id) 
		WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT jm.price FROM gl_add jm LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
		ELSE '' END AS price,
				
	 CASE WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT notes FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id)
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.remarks FROM invoice i LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT pc.notes FROM payment_cash pc WHERE pc.`payment_cash_id` = gl.cash_id)
		WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_module = 'CONTRACT ADJUSTMENT' THEN (SELECT adjustment_notes FROM contract WHERE contract_id = gl.contract_id) 
		WHEN gl.contract_id IS NOT NULL THEN (SELECT notes FROM contract WHERE contract_id = gl.contract_id) 
		WHEN gl.transaction_id IS NOT NULL THEN (SELECT CONCAT(slip_retur,' - ',notes) FROM `transaction` WHERE transaction_id = gl.transaction_id)    
		WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT jd.notes FROM gl_detail jd WHERE jd.gl_detail_id = gl.jurnal_id)
		ELSE (SELECT remarks FROM payment WHERE payment_id = gl.payment_id )  END AS remarks,
									
	CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.general_ledger_module = 'CONTRACT ADJUSTMENT' THEN DATE_FORMAT((SELECT adjustment_date FROM contract WHERE contract_id = gl.contract_id), '%Y-%m-%d')
		WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 AND (SELECT contract_status FROM contract WHERE contract_id = gl.contract_id) = 2 THEN DATE_FORMAT((SELECT reject_date FROM contract WHERE contract_id = gl.contract_id), '%Y-%m-%d')
		WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN DATE_FORMAT((SELECT entry_date FROM contract WHERE contract_id = gl.contract_id), '%Y-%m-%d')
		WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) THEN (SELECT unloading_date FROM `transaction` WHERE transaction_id = gl.transaction_id)
		WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 5 OR gl.general_ledger_for = 6 OR gl.general_ledger_for = 7 OR gl.general_ledger_for = 8 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 10 OR gl.general_ledger_for = 12 OR gl.general_ledger_for = 13) AND gl.general_ledger_module = 'RETURN PAYMENT' THEN DATE_FORMAT((SELECT edit_date FROM payment WHERE payment_id = gl.payment_id),'%Y-%m-%d')
		WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 5 OR gl.general_ledger_for = 6 OR gl.general_ledger_for = 7 OR gl.general_ledger_for = 8 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 10 OR gl.general_ledger_for = 12 OR gl.general_ledger_for = 13) THEN (SELECT payment_date FROM payment WHERE payment_id = gl.payment_id )
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT DATE_FORMAT(i.input_date, '%Y-%m-%d') FROM invoice i LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
		WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 AND gl.general_ledger_module = 'RETURN INVOICE' THEN (SELECT DATE_FORMAT(i.sync_date, '%Y-%m-%d') FROM invoice i LEFT JOIN invoice_detail id ON id.invoice_id = i.invoice_id WHERE id.invoice_detail_id = gl.invoice_id)
		WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT DATE_FORMAT(i.invoice_date, '%Y-%m-%d') FROM invoice i LEFT JOIN invoice_detail id ON id.invoice_id = i.invoice_id WHERE id.invoice_detail_id = gl.invoice_id)
		WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT DATE_FORMAT(jm.gl_add_date, '%Y-%m-%d') FROM gl_add jm LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
		ELSE '' END AS gl_date,
				
	CASE WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 5 OR gl.general_ledger_for = 6 OR gl.general_ledger_for = 7 OR gl.general_ledger_for = 8 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 10 OR gl.general_ledger_for = 12 OR gl.general_ledger_for = 13) THEN (SELECT exchange_rate FROM payment WHERE payment_id = gl.payment_id )
		WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT exchange_rate FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id)
		WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT jd.exchange_rate FROM gl_detail jd WHERE jd.gl_detail_id = gl.jurnal_id)
		ELSE '' END AS exchange_rate,
               
	CASE WHEN gl.payment_id IS NOT NULL THEN (SELECT bank_code FROM bank WHERE bank_id = (SELECT bank_id FROM payment WHERE payment_id = gl.payment_id ))
		WHEN gl.invoice_id IS NOT NULL THEN (SELECT b.bank_code FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN invoice i ON i.invoice_id = p.invoice_id LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id AND p.payment_status = 0 LIMIT 1)
		WHEN gl.contract_id IS NOT NULL THEN (SELECT b.bank_code FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = p.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)
		ELSE '' END AS bank_code,
				
	CASE WHEN gl.payment_id IS NOT NULL THEN (SELECT bank_type FROM bank WHERE bank_id = (SELECT bank_id FROM payment WHERE payment_id = gl.payment_id )) 
		WHEN gl.invoice_id IS NOT NULL THEN (SELECT b.bank_type FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN invoice i ON i.invoice_id = p.invoice_id LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id AND p.payment_status = 0 LIMIT 1)
		WHEN gl.contract_id IS NOT NULL THEN (SELECT b.bank_type FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = p.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)
		ELSE '' END AS bank_type,
				
	CASE WHEN gl.payment_id IS NOT NULL THEN (SELECT currency_code FROM currency WHERE currency_id = (SELECT currency_id FROM payment WHERE payment_id = gl.payment_id))
		WHEN gl.invoice_id IS NOT NULL THEN (SELECT pcur.currency_code FROM currency pcur LEFT JOIN payment p ON p.currency_id = pcur.currency_id LEFT JOIN invoice i ON i.invoice_id = p.invoice_id LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id AND p.payment_status = 0 LIMIT 1)
		WHEN gl.contract_id IS NOT NULL THEN (SELECT pcur.currency_code FROM currency pcur LEFT JOIN payment p ON p.currency_id = pcur.currency_id LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = p.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)		
		ELSE '' END AS pcur_currency_code,
				
	CASE WHEN (SELECT payment_location FROM payment WHERE payment_id = gl.payment_id ) = 0 THEN 'HOF'
		WHEN gl.invoice_id IS NOT NULL THEN (SELECT CASE WHEN p.payment_location = 0 THEN 'HOF'
		ELSE sp.stockpile_code END AS sc FROM payment p LEFT JOIN stockpile sp ON p.payment_location = sp.stockpile_id LEFT JOIN invoice i ON i.invoice_id = p.invoice_id LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id AND p.payment_status = 0 LIMIT 1)
		WHEN gl.contract_id IS NOT NULL THEN (SELECT CASE WHEN p.payment_location = 0 THEN 'HOF'
		ELSE sp.stockpile_code END AS sc FROM payment p LEFT JOIN stockpile sp ON p.payment_location = sp.stockpile_id LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = p.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)
		ELSE (SELECT stockpile_code FROM stockpile WHERE stockpile_id = (SELECT payment_location FROM payment WHERE payment_id = gl.payment_id )) END AS payment_location2,
                
	CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_module = 'STOCK TRANSIT' THEN (SELECT st.kode_stock_transit FROM stock_transit st LEFT JOIN stockpile_contract sc ON st.stockpile_contract_id = sc.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)
		WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_module = 'CONTRACT ADJUSTMENT' THEN (SELECT CONCAT(po_no,'-A') FROM contract WHERE contract_id = gl.contract_id) 
		WHEN gl.contract_id IS NOT NULL THEN (SELECT po_no FROM contract WHERE contract_id = gl.contract_id) 
		WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_module = 'RETURN INVOICE' THEN (SELECT CONCAT(i.invoice_no,'-R') FROM invoice i LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id)
		WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_module = 'INVOICE DETAIL' THEN (SELECT i.invoice_no FROM invoice i LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id)
		WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_module = 'RETURN PAYMENT' THEN (SELECT CONCAT(payment_no,'-R') FROM payment WHERE payment_id = gl.payment_id)
		WHEN gl.payment_id IS NOT NULL THEN (SELECT payment_no FROM payment WHERE payment_id = gl.payment_id ) 
		WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT jm.gl_add_no FROM gl_add jm LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
		WHEN gl.transaction_id IS NOT NULL THEN (SELECT slip_no FROM TRANSACTION WHERE transaction_id = gl.transaction_id)
		ELSE '' END AS payment_no,
		
	CASE WHEN gl.contract_id IS NOT NULL THEN (SELECT p.payment_no FROM payment p LEFT JOIN stockpile_contract sc ON p.stockpile_contract_id = sc.stockpile_contract_id LEFT JOIN contract c ON c.contract_id = sc.contract_id WHERE c.contract_id = gl.contract_id AND p.payment_status = 0 LIMIT 1)
		WHEN gl.invoice_id IS NOT NULL THEN (SELECT p.payment_no FROM payment p LEFT JOIN invoice i ON i.invoice_id = p.invoice_id LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id AND p.payment_status = 0 LIMIT 1 )
		WHEN gl.payment_id IS NOT NULL THEN (SELECT payment_no FROM payment WHERE payment_id = gl.payment_id ) 
		WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT jm.gl_add_no FROM gl_add jm LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
		ELSE '' END AS payment_no2,
	
		
(SELECT freight_id FROM payment WHERE payment_id = gl.payment_id) AS freight_id,
(SELECT vendor_handling_id FROM payment WHERE payment_id = gl.payment_id) AS vendor_handling_id,  
(SELECT labor_id FROM payment WHERE payment_id = gl.payment_id) AS labor_id, 
(SELECT payment_status FROM payment WHERE payment_id = gl.payment_id) AS payment_status, 
(SELECT payment_date FROM payment WHERE payment_id = gl.payment_id) AS payment_date,
(SELECT tax_category FROM tax WHERE tax_id = (SELECT pph_tax_id FROM freight WHERE freight_id = (SELECT freight_id FROM payment WHERE payment_id = gl.payment_id ))) AS fc_tax_category, 
(SELECT tax_value FROM tax WHERE tax_id = (SELECT pph_tax_id FROM freight WHERE freight_id = (SELECT freight_id FROM payment WHERE payment_id = gl.payment_id ))) AS fc_tax,
(SELECT tax_category FROM tax WHERE tax_id = (SELECT pph_tax_id FROM vendor_handling WHERE vendor_handling_id = (SELECT vendor_handling_id FROM payment WHERE payment_id = gl.payment_id ))) AS vhc_tax_category, 
(SELECT tax_value FROM tax WHERE tax_id = (SELECT pph_tax_id FROM vendor_handling WHERE vendor_handling_id = (SELECT vendor_handling_id FROM payment WHERE payment_id = gl.payment_id ))) AS vhc_tax,  
(SELECT general_vendor_id FROM payment WHERE payment_id = gl.payment_id )  AS gv_id,
(SELECT t.fc_tax_id FROM `transaction` t WHERE t.transaction_id = gl.transaction_id) AS fc_tax_id,
(SELECT vh.pph_tax_id FROM vendor_handling vh LEFT JOIN vendor_handling_cost vhc ON vhc.vendor_handling_id = vh.vendor_handling_id LEFT JOIN TRANSACTION t ON t.handling_cost_id = vhc.handling_cost_id WHERE t.transaction_id = gl.transaction_id) AS vhc_tax_id, 
(SELECT tax_category FROM tax WHERE tax_id = (SELECT fc_tax_id FROM `transaction` WHERE transaction_id = gl.transaction_id))  AS tf_tax_category,
(SELECT tax_category FROM tax WHERE tax_id = (SELECT pph_tax_id FROM vendor_handling WHERE vendor_handling_id = (SELECT vendor_handling_id FROM vendor_handling_cost WHERE handling_cost_id = (SELECT handling_cost_id FROM `transaction` WHERE transaction_id = gl.transaction_id))))  AS tvh_tax_category,
(SELECT pph_tax_id FROM general_vendor WHERE general_vendor_id = (SELECT general_vendor_id FROM payment WHERE payment_id = gl.payment_id )) AS gv_pph_id, 
(SELECT ppn_tax_id FROM general_vendor WHERE general_vendor_id = (SELECT general_vendor_id FROM payment WHERE payment_id = gl.payment_id ))  AS gv_ppn_id, 
(SELECT tax_category FROM tax WHERE tax_id = (SELECT pph_tax_id FROM general_vendor WHERE general_vendor_id = (SELECT general_vendor_id FROM payment WHERE payment_id = gl.payment_id )))  AS gv_pph_category, 
(SELECT tax_category FROM tax WHERE tax_id = (SELECT ppn_tax_id FROM freight WHERE freight_id = (SELECT freight_id FROM payment WHERE payment_id = gl.payment_id ))) AS gv_ppn_category, 
(SELECT account_type FROM account WHERE account_id = gl.account_id) AS  account_type, 
(SELECT tax_value FROM tax WHERE tax_id = (SELECT fc_tax_id FROM `transaction` t WHERE t.transaction_id = gl.transaction_id)) AS fc_tax_value,
(SELECT tax_value FROM tax WHERE tax_id = (SELECT pph_tax_id FROM vendor_handling WHERE vendor_handling_id = (SELECT vendor_handling_id FROM vendor_handling_cost WHERE handling_cost_id = (SELECT handling_cost_id FROM `transaction` WHERE transaction_id = gl.transaction_id))))  AS vhc_tax_value,
(SELECT general_vendor_id FROM gl_add WHERE gl_add_id = (SELECT gl_add_id FROM gl_detail WHERE gl_detail_id= gl.jurnal_id )) AS general_vendor_id, 
(SELECT vendor_id FROM gl_add WHERE gl_add_id = (SELECT gl_add_id FROM gl_detail WHERE gl_detail_id= gl.jurnal_id )) AS vendor_id, 
(SELECT payment_method FROM payment WHERE payment_id = gl.payment_id ) AS payment_method,
(SELECT payment_type FROM payment WHERE payment_id = gl.payment_id ) AS payment_type
 FROM general_ledger gl 
 WHERE  gl.amount > 0 {$whereCondition}";
    $resulta = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);
    while ($row = $resulta->fetch_object()) {

        $sql2 = "SELECT s.stockpile_name FROM stockpile s INNER JOIN stockpile_contract sc ON s.`stockpile_id` = sc.`stockpile_id` 
INNER JOIN contract c ON sc.`contract_id` = c.`contract_id` WHERE sc.`quantity` > 0 AND c.`contract_no` = '$row->contract_no'";
        $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
        while ($row2 = $result2->fetch_object()) {
            $stockpileName2 = $row2->stockpile_name;
        }

        //$rowActive++;
        if ($row->transaction_id != NULL && $row->account_id == 147 && $row->general_ledger_for == 1) {
            $stockpileName = $stockpileName2;
        } else {
            $stockpileName = $row->stockpile_name2;
        }


        if ($row->general_ledger_id == '' && $row->amount < 0) {
            $credit_amount = $row->amount * -1;
            $debit_amount = 0;
        } elseif ($row->general_ledger_id == '' && $row->amount > 0) {
            $debit_amount = $row->amount;
            $credit_amount = 0;
        }
        if ($row->general_ledger_id != '' && ($row->general_ledger_module == 'NOTA TIMBANG' || ($row->general_ledger_module == 'CONTRACT' && ($row->general_ledger_for == 1 || $row->general_ledger_for == 2)) || $row->general_ledger_module == 'STOCK TRANSIT' || $row->general_ledger_module == 'CONTRACT ADJUSTMENT' || $row->general_ledger_module == 'JURNAL MEMORIAL')) {
            $debit_amount = $row->amount;
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'INVOICE DETAIL' && $row->general_ledger_for == 10 && $row->invoice_id != 0) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN INVOICE' && $row->general_ledger_for == 10 && $row->invoice_id != 0) {
            $credit_amount = $row->amount;
        }
//==CREDIT NOTIM==//
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13 || $row->general_ledger_for == 14) && $row->account_no == 230204) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13 || $row->general_ledger_for == 14) && $row->account_no == 210103) {
            $credit_amount = $row->amount;
        }
//==END CREDIT NOTIM==//

//==DEBIT NOTIM==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13) && $row->account_no == 140000) {
            $debit_amount = $row->amount * ((100 - $row->tf_tax_value) / 100);
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13) && $row->account_no == 230204 && $row->quantity < 0) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13) && $row->account_no == 230204) {
            $debit_amount = 0;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 && ($row->general_ledger_for == 14) && $row->account_no == 230204) {
            $debit_amount = $row->amount;;
        }
//==END DEBIT NOTIM==//

//==PAYMENT CREDIT===//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 1) {
            $debit_amount = $row->amount;
//$credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 1) {
//$debit_amount = $row->amount;
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 1) {
            $debit_amount = $row->amount;
//$credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 1) {
//$debit_amount = $row->amount;
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PETTY CASH' && $row->general_ledger_for == 12) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT ADMIN') {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 12) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 12) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 10 && $row->payment_id != 0) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 10 && $row->payment_id != 0) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->labor_id != 0 && $row->pph_journal != 0 && $row->payment_status != 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = $row->pph_journal;
        }
//==FREIGHT==//

        if ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3 && $row->payment_method == 2) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount - $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->account_id == 5 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 0 && ($row->account_no == 210103 || $row->account_no == 130003)) {
            $credit_amount = $row->amount * ((100 - $row->fc_tax) / 100);
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && ($row->account_no == 210103 || $row->account_no == 130003)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->payment_method == 2 && $row->freight_id != 0 && $row->pph_journal != 0 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->payment_method == 1 && $row->freight_id != 0 && $row->ppn_journal != 0 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && ($row->account_no == 150410)) {
            $credit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->general_ledger_method == 'DP' && $row->payment_status == 1 && ($row->fc_tax_category == 0 || $row->fc_tax_category == 1) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->fc_tax_category == 0 && $row->payment_status == 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = 0;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->fc_tax_category == 1 && $row->payment_status == 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = 0;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->general_ledger_method == 'Down Payment' && $row->freight_id != 0 && ($row->account_no == 210103 || $row->account_no == 130003) && $row->payment_status == 1) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->fc_tax_category == 0 && $row->amountPayment < 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount * ((100 - $row->fc_tax) / 100);
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->payment_status == 1 && $row->fc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->payment_status == 1 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->fc_tax_category == 0 && ($row->account_no == 210103 || $row->account_no == 130003) && $row->payment_status == 1) {
            $credit_amount = $row->amount * ((100 - $row->fc_tax) / 100);
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && ($row->account_no == 210103 || $row->account_no == 130003) && $row->payment_status == 1) {
            $credit_amount = $row->amount;
        }
//==END FREIGHT==//

//==VENDOR HANDLING==//

        if ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13 && $row->payment_method == 2) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount - $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->account_id == 397 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->payment_method == 2 && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $credit_amount = $row->amount * ((100 - $row->vhc_tax) / 100);
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $credit_amount = $row->amount;
        }


        if ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->general_ledger_method == 'DP' && $row->payment_status == 1 && ($row->vhc_tax_category == 0 || $row->vhc_tax_category == 1) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->vhc_tax_category == 0 && $row->payment_status == 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = 0;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->vhc_tax_category == 1 && $row->payment_status == 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = 0;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->general_ledger_method == 'Down Payment' && $row->vendor_handling_id != 0 && ($row->account_no == 210106 || $row->account_no == 130006) && $row->payment_status == 1) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->payment_status == 1 && $row->vhc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->payment_status == 1 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 0 && ($row->account_no == 210106 || $row->account_no == 130006) && $row->payment_status == 1) {
            $credit_amount = $row->amount * ((100 - $row->vhc_tax) / 100);
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && ($row->account_no == 210106 || $row->account_no == 130003) && $row->payment_status == 1) {
            $credit_amount = $row->amount;
        }
//==END VENDOR HANDLING==//

//==GENERAL VENDOR==//
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0 && ($row->account_no == 150410 || $row->account_no == 230100)) {
            $credit_amount = $row->ppn_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_transaction_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->ppn_journal != 0) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->account_type == 7 && $row->gv_pph_id == 21 && $row->gv_id != 0 && $row->pph_journal != 0 && $row->ppn_journal != 0) {
            $credit_amount = $row->amount + $row->ppn_journal + $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->ppn_journal != 0) {
            $credit_amount = ($row->amount + $row->ppn_journal) - $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0) {
            $credit_amount = $row->amount + $row->ppn_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->account_type == 7) {
            $credit_amount = $row->amount - $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0) {
            $credit_amount = $row->amount;
        }
//elseif($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT'){
//$credit_amount = $row->amount;
//}

        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201 || $row->account_no == 150440) && $row->pph_journal != 0) {
            $credit_amount = $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_transaction_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->gv_pph_id == 21 && $row->ppn_journal != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8)) {
            $credit_amount = ($row->amount + $row->ppn_journal + $row->ppn_journal) + $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_transaction_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8)) {
            $credit_amount = ($row->amount + $row->ppn_journal + $row->ppn_journal) - $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8)) {
            $credit_amount = $row->amount + $row->ppn_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->gv_pph_id == 21 && $row->pph_journal != 0 && $row->account_type == 7) {
            $credit_amount = $row->amount + $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->account_type == 7) {
            $credit_amount = $row->amount - $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0) {
            $credit_amount = $row->amount;
        }


//elseif($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT'){
//$credit_amount = $row->amount;
//}
//==END GENERAL VENDOR==//
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->payment_status != 1 && $row->account_type == 7 && ($row->general_ledger_for == 1)) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->payment_status != 1 && $row->account_no == 150410 && $row->general_ledger_for == 1) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 4 && $row->account_type == 7 && $row->payment_status != 1) {
            $credit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 6 && $row->account_type == 7 && $row->general_ledger_for2 == 'Internal Transfer') {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 6 && $row->account_type == 7 && $row->general_ledger_for2 == 'Internal Transfer') {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->payment_status != 1 && $row->account_no == 130001 && $row->general_ledger_for == 1) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->account_type == 7 && $row->pph_journal != 0 && $row->ppn_journal != 0 && $row->payment_status != 1 && $row->general_ledger_method == 'Down Payment') {
            $credit_amount = $row->amount + $row->ppn_journal - $row->pph_journal;
        }
//==UNLOADING COST==//
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for2 == 'Unloading Cost' && $row->account_type == 7) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->account_no == 210104) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->account_no == 130004) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->account_no == 210104) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->account_no == 130004) {
            $credit_amount = $row->amount;
        }
//==END UNLOADING COST==//
//==CURAH==//
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 2 && ($row->account_no == 210101 || $row->account_no == 130002)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 2 && $row->account_type == 7) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 2) {
            $credit_amount = $row->amount;
        }
//==END CURAH==//
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && ($row->general_ledger_for == 5)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && ($row->general_ledger_for == 5)) {
            $credit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && ($row->general_ledger_for == 5)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && ($row->general_ledger_for == 5)) {
            $debit_amount = $row->amount;
        }
//==END PAYMENT CREDIT===//

        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'INVOICE DETAIL' && $row->general_ledger_for == 10 && $row->invoice_id != 0) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN INVOICE' && $row->general_ledger_for == 10 && $row->invoice_id != 0) {
            $debit_amount = $row->amount;
        }

//==PAYMENT DEBIT==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PETTY CASH' && $row->general_ledger_for == 12) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT ADMIN') {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 12) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 12) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 10 && $row->payment_id != 0) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 10 && $row->payment_id != 0) {
            $debit_amount = $row->amount;
        }
        //==FREIGHT==//

        if ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->general_ledger_method == 'DP' && ($row->fc_tax_category == 0 || $row->fc_tax_category == 1) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->fc_tax_category == 0 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = 0;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->fc_tax_category == 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = 0;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->general_ledger_method == 'Down Payment' && $row->freight_id != 0 && ($row->account_no == 210103 || $row->account_no == 130003)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 0 && $row->amountPayment < 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount * ((100 - $row->fc_tax) / 100);
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 0 && ($row->account_no == 210103 || $row->account_no == 130003)) {
            $debit_amount = $row->amount * ((100 - $row->fc_tax) / 100);
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && ($row->account_no == 210103 || $row->account_no == 130003)) {
            $debit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && ($row->account_no == 150410)) {
            $debit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->payment_status == 1 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3 && $row->payment_method == 2) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->payment_status == 1 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount - $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->payment_status == 1 && $row->fc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->payment_status == 1 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->payment_status == 1 && $row->account_id == 5 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->payment_method == 2 && $row->freight_id != 0 && $row->pph_journal != 0 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } /*elseif($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->payment_method == 2 && $row->freight_id != 0 && $row->payment_status == 1 && $row->pph_journal != 0 && $row->general_ledger_for == 3){
$debit_amount = $row->amount ;
}
elseif($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->payment_method == 1 && $row->freight_id != 0 && $row->payment_status == 1 && $row->ppn_journal != 0 && $row->general_ledger_for == 3){
$debit_amount = $row->amount;
}*/
        elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->fc_tax_category == 0 && ($row->account_no == 210103 || $row->account_no == 130003) && $row->payment_status == 1) {
            $debit_amount = $row->amount * ((100 - $row->fc_tax) / 100);
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && ($row->account_no == 210103 || $row->account_no == 130003) && $row->payment_status == 1) {
            $debit_amount = $row->amount;
        }
//==END FREIGHT==//
//==VENDOR HANDLING==//

        if ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->general_ledger_method == 'DP' && ($row->vhc_tax_category == 0 || $row->vhc_tax_category == 1) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->vhc_tax_category == 0 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = 0;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->vhc_tax_category == 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = 0;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->general_ledger_method == 'Down Payment' && $row->vendor_handling_id != 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $debit_amount = $row->amount * ((100 - $row->vhc_tax) / 100);
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $debit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->payment_status == 1 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13 && $row->payment_method == 2) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->payment_status == 1 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount - $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->payment_status == 1 && $row->vhc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->payment_status == 1 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->payment_status == 1 && $row->account_id == 397 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->payment_method == 2 && $row->vendor_handling_id != 0 && $row->payment_status == 1 && $row->pph_journal != 0 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $debit_amount = $row->amount * ((100 - $row->vhc_tax) / 100);
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $debit_amount = $row->amount;
        }
//==END VENDOR HANDLING==//
//==UC==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for2 == 'Unloading Cost' && $row->account_type == 7 /*&& $row->payment_status != 1*/) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->account_no == 210104) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->account_no == 130004) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->account_no == 210104) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->account_no == 130004) {
            $debit_amount = $row->amount;
        }
//==END UC==//

//==PKS KONTRAK//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->account_no == 210102 && $row->payment_status != 1) {
            $debit_amount = $row->amount;
        }
//==END PKS KONTRAK//
//==GENERAL VENDOR==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201 || $row->account_no == 150440) && $row->pph_journal != 0) {
            $debit_amount = $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_transaction_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->gv_pph_id == 21 && $row->ppn_journal != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8)) {
            $debit_amount = ($row->amount + $row->ppn_journal + $row->ppn_journal) + $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_transaction_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8)) {
            $debit_amount = ($row->amount + $row->ppn_journal + $row->ppn_journal) - $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8)) {
            $debit_amount = $row->amount + $row->ppn_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->gv_pph_id == 21 && $row->pph_journal != 0 && $row->account_type == 7) {
            $debit_amount = $row->amount + $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->account_type == 7) {
            $debit_amount = $row->amount - $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0) {
            $debit_amount = $row->amount;
        }
//elseif($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT'){
//$debit_amount = $row->amount;
//}

        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0 && ($row->account_no == 150410 || $row->account_no == 230100)) {
            $debit_amount = $row->ppn_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_transaction_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->ppn_journal != 0) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->account_type == 7 && $row->gv_pph_id == 21 && $row->gv_id != 0 && $row->pph_journal != 0 && $row->ppn_journal != 0) {
            $debit_amount = $row->amount + $row->ppn_journal + $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->ppn_journal != 0) {
            $debit_amount = ($row->amount + $row->ppn_journal) - $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0) {
            $debit_amount = $row->amount + $row->ppn_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->account_type == 7) {
            $debit_amount = $row->amount - $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0) {
            $debit_amount = $row->amount;
        }
//elseif($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT'){
//$debit_amount = $row->amount;
//}
//==END GENERAL VENDOR==//
//==CURAH==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 2) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 2 && ($row->account_no == 210101 || $row->account_no == 130002)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 2 && $row->account_type == 7) {
            $debit_amount = $row->amount;
        }
//==END CURAH==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->payment_status != 1 && ($row->account_no == 150410 || $row->account_no == 230100)) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->account_type == 7 && $row->general_ledger_for == 6 && $row->general_ledger_for2 == 'Internal Transfer') {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->account_type == 7 && $row->general_ledger_for == 6 && $row->general_ledger_for2 == 'Internal Transfer') {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->payment_status != 1 && $row->account_no == 130001 && $row->general_ledger_for == 1) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->payment_status != 1 && $row->supplier_name == 'Kas Negara' && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = $row->amount;
        }
//==SALES==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 9 && $row->payment_status != 1) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 9 && $row->payment_status != 1) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 9 && $row->payment_status == 1) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 9 && $row->payment_status == 1) {
            $credit_amount = $row->amount;
        }
//==END SALES==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 10 && $row->payment_status != 1) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 10 && $row->payment_status != 1) {
            $credit_amount = $row->amount;
        }
        if ($row->payment_status == 1 && $row->gl_date < '2018-04-01') {
            $debit_amount = 'RETURN';
            $credit_amount = 'RETURN';
        }
        if ($row->invoice_payment == 2 && $row->gl_date < '2018-04-01') {
            $debit_amount = 'RETURN';
            $credit_amount = 'RETURN';
        }

//$general_ledger_id = $row->general_ledger_id;

        $voucherNo = "";
        $paymentNo = "";
        if ($row->contract_id != '' && $row->general_ledger_module == 'CONTRACT ADJUSTMENT') {
            $voucherNo = $row->payment_no;
            $paymentNo = 'JV-PO-' . $row->payment_no2;
        } elseif ($row->contract_id != '' && $row->general_ledger_module != 'CONTRACT ADJUSTMENT') {
            $voucherCode = $row->payment_location2 . '/' . $row->bank_code . '/' . $row->pcur_currency_code;


            if ($row->bank_type == 1) {
                $voucherCode .= ' - B';
            } elseif ($row->bank_type == 2) {
                $voucherCode .= ' - P';
            } elseif ($row->bank_type == 3) {
                $voucherCode .= ' - CAS';
            }

            if ($row->bank_type != 3) {
                if ($row->payment_type == 1) {
                    $voucherCode .= 'RV';
                } else {
                    $voucherCode .= 'PV';
                }
            }


            $voucherNo = $row->payment_no;
            $paymentNo = $voucherCode . ' # ' . $row->payment_no2;
        } elseif ($row->payment_id != '') {


            $voucherCode = $row->payment_location2 . '/' . $row->bank_code . '/' . $row->pcur_currency_code;


            if ($row->bank_type == 1) {
                $voucherCode .= ' - B';
            } elseif ($row->bank_type == 2) {
                $voucherCode .= ' - P';
            } elseif ($row->bank_type == 3) {
                $voucherCode .= ' - CAS';
            }

            if ($row->bank_type != 3) {
                if ($row->payment_type == 1) {
                    $voucherCode .= 'RV';
                } else {
                    $voucherCode .= 'PV';
                }
            }

            $voucherNo = $voucherCode . ' # ' . $row->payment_no;
            $paymentNo = $voucherCode . ' # ' . $row->payment_no2;

        } elseif ($row->invoice_id != '') {


            $voucherCode = $row->payment_location2 . '/' . $row->bank_code . '/' . $row->pcur_currency_code;


            if ($row->bank_type == 1) {
                $voucherCode .= ' - B';
            } elseif ($row->bank_type == 2) {
                $voucherCode .= ' - P';
            } elseif ($row->bank_type == 3) {
                $voucherCode .= ' - CAS';
            }

            if ($row->bank_type != 3) {
                if ($row->payment_type == 1) {
                    $voucherCode .= 'RV';
                } else {
                    $voucherCode .= 'PV';
                }
            }

            $voucherNo = $row->payment_no;
            $paymentNo = $voucherCode . ' # ' . $row->payment_no2;
        } else {
            $voucherNo = $row->payment_no;
            $paymentNo = $row->payment_no2;
        }

        $general_ledger_id = $row->general_ledger_id;
        $stockpile = $row->stockpile_name2;
        $gl_date = $row->gl_date;
        $general_ledger_module = $row->general_ledger_module;
        $general_ledger_method = $row->general_ledger_method;
        $general_ledger_transaction_type2 = $row->general_ledger_transaction_type2;
        $supplier_name = $row->supplier_name;
        $supplier_code = $row->supplier_code;
        $po_no = $row->po_no;
        $contract_no = $row->contract_no;
        $slip_no = $row->slip_no;
        $invoice_no = $row->invoice_no;
        $invoice_no_2 = $row->invoice_no_2;
        $tax_invoice = $row->tax_invoice;
        $cheque_no = $row->cheque_no;
        $remarks = $row->remarks;
        $shipment_code = $row->shipment_code;
        $quantity = $row->quantity;
        $price = $row->price;
        $account_no = $row->account_no;
        $account_name = $row->account_name;
        $exchange_rate = $row->exchange_rate;

        $date = new DateTime();
        $currentDate = $date->format('d/m/Y H:i:s');

        $debitAmount = 0;
        if ($row->general_ledger_type == 1) {
            $debitAmount = $debit_amount;
        } elseif ($row->general_ledger_type == '') {
            $debitAmount = $debit_amount;
        }
        $creditAmount = 0;
        if ($row->general_ledger_type == 2) {
            $creditAmount = $credit_amount;
        } elseif ($row->general_ledger_type == '') {
            $creditAmount = $credit_amount;
        }

        $sqlb = "INSERT INTO gl_report (general_ledger_id, contract_id, invoice_id, transaction_id, jurnal_id, payment_id, source, stockpile,gl_date, jurnal_no, general_ledger_module, general_ledger_method, general_ledger_transaction_type2, supplier_code,supplier_name, po_no, contract_no, slip_no, invoice_no, invoice_no_2, tax_invoice, cheque_no, remarks, shipment_code,quantity,price,account_no,account_name,exchange_rate,debitAmount,creditAmount, entry_date, entry_by) VALUES ({$general_ledger_id}, {$contractId}, {$invoiceId}, {$transactionId}, {$jurnalId}, {$paymentId}, 'GL', '{$stockpile}','{$gl_date}','{$voucherNo}', '{$general_ledger_module}', '{$general_ledger_method}', '{$general_ledger_transaction_type2}', '{$supplier_code}','{$supplier_name}', '{$po_no}', '{$contract_no}', '{$slip_no}', '{$invoice_no}', '{$invoice_no_2}', '{$tax_invoice}', '{$cheque_no}', '{$remarks}', '{$shipment_code}','{$quantity}','{$price}','{$account_no}','{$account_name}','{$exchange_rate}',{$debitAmount},{$creditAmount}, STR_TO_DATE('{$currentDate}', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']})";
        $resultb = $myDatabase->query($sqlb, MYSQLI_STORE_RESULT);

        echo $sqlb;
    }

}