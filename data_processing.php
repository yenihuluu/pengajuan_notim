<?php

// PATH
require_once 'assets/include/path_variable.php';

// Session
require_once PATH_INCLUDE.DS.'session_variable.php';

// Initiate DB connection
require_once PATH_INCLUDE.DS.'db_init.php';
require_once PATH_INCLUDE . DS . 'Bcrypt.php';

date_default_timezone_set('Asia/Jakarta');

$date = new DateTime();
$currentDate = $date->format('d/m/Y H:i:s');
$currentMonthYear = $date->format('m-y');
$currentYearMonth = $date->format('ym');
$todayDate = $date->format('Y-m-d');
$todayDate2 = $date->format('d/m/Y');
$currentYear = $date->format('y');



if (isset($_REQUEST['action']) && $_REQUEST['action'] == 'login') {
	
	

//echo 'User Real IP - '.getUserIpAddr();
    // <editor-fold defaultstate="collapsed" desc="Login">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $userEmail = $myDatabase->real_escape_string($_POST['userEmail']);
    $userPassword = $myDatabase->real_escape_string($_POST['userPassword']);
	//echo "test".  $userEmail . ' | ' .$userPassword;
    // </editor-fold>
    
    if($userEmail != '' && $userPassword != '') {
        $sql = "SELECT * FROM `user`
                WHERE user_email = '{$userEmail}'";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            if($row->active == 1) {
                $salt = $row->user_salt;
                $saltedPW =  trim($userPassword) . $salt;
                $hashedPW = hash('sha256', $saltedPW);

                if($hashedPW == $row->user_password) {
                    unset($_SESSION['menu_name']);
                    $_SESSION['isLogin'] = 1;
                    $_SESSION['userName'] = $row->user_name;
                    $_SESSION['userId'] = $row->user_id;
                    $_SESSION['companyId'] = 2;
                    $return_value = '|OK||';
					if($row->change_password == 1) {
					$return_value = '|PASS||';
					}
					
				$sql1 = "INSERT INTO user_login (user_id,login_date) VALUES ({$row->user_id},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
					$result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
					
				echo $sql1;
                } else {
                    $return_value = '|FAIL|Password not match.|';
                }
            } else {
                $return_value = '|FAIL|Your account is not active.|';
            }
        } else {
            $return_value = '|FAIL|Email & Password combination not found.|';
        }
    } else {
        $return_value = '|FAIL|Email & Password can not be empty.|';
    }
    
    echo $return_value;
    // </editor-fold>
}if (isset($_REQUEST['action']) && $_REQUEST['action'] == 'tipe_biaya_data') {
    $return_value = '';
    
    $tipeBiayaId = $myDatabase->real_escape_string($_POST['tipeBiayaId']);
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $tipeBiaya = $myDatabase->real_escape_string($_POST['tipeBiaya']);
    $deskripsi = $myDatabase->real_escape_string($_POST['tipebiayaDesc']);
    $temp = str_replace(" ", "", $myDatabase->real_escape_string(strtoupper($_POST['tipeBiaya'])));
    $tempTipeBiaya = strtoupper(trim($temp," "));

    $active = $myDatabase->real_escape_string($_POST['active']);

    if ($tipeBiaya != '' && $active != '') {
        if($_POST['_method'] == 'INSERT'){
            $validasi = "SELECT * FROM mst_tipe_biaya where UPPER(TRIM(REPLACE(tipe_biaya, ' ',''))) = '{$tempTipeBiaya}'";
            $resultV =  $myDatabase->query($validasi, MYSQLI_STORE_RESULT);
            $count = $resultV->num_rows;
         //   echo $validasi . ' | ' .$count;
            if($count == 0){
                $sql = "INSERT INTO mst_tipe_biaya (tipe_biaya, account_id, deskripsi, active) VALUES ('{$tipeBiaya}', {$accountId}, '{$deskripsi}', {$active})";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if ($result !== false) {
                    $return_value = '|OK|Tipe biaya has successfully inserted.|' . $sql . '|';
                }else{
                    $return_value = '|FAIL|Insert Tipe biaya failed.||' .$sql;
                }
            }else{
                $return_value = '|FAIL|Tipe biaya already exists|';
            }

           
        }else{
            $sql = "UPDATE mst_tipe_biaya set tipe_biaya = '{$tipeBiaya}', account_id = {$accountId}, deskripsi = '{$deskripsi}', active = {$active} WHERE id = {$tipeBiayaId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result !== false) {
                $return_value = '|OK|Tipe biaya has successfully Update.|' . $sql . '|';
            }else{
                $return_value = '|FAIL|Update Tipe biaya failed.||' .$sql;
            }
        }
    }else{
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;

}if (isset($_REQUEST['action']) && $_REQUEST['action'] == 'master_costing_data') { //HEADER COSTING
    $return_value = '';
    
    $codeCosting_id = $myDatabase->real_escape_string($_POST['codeCosting_id']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockpileCode = str_replace(" ", "", $myDatabase->real_escape_string(strtoupper($_POST['stockpileCode'])));

    //Validasi
    $validasi = "SELECT * FROM header_costing WHERE code_costing = '{$stockpileCode}'";
    $result = $myDatabase->query($validasi, MYSQLI_STORE_RESULT);
    $codeCount = $result->num_rows;
  
  //  die();
    if($codeCount == 0){
        if ($stockpileCode != '' && $stockpileId != '') {
            if($_POST['_method'] == 'INSERT'){
                $sql = "INSERT INTO header_costing(code_costing, loading_port, entry_by) VALUES ('{$stockpileCode}', {$stockpileId}, {$_SESSION['userId']})";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if ($result !== false) {
                    $newId = $myDatabase->insert_id;
                    $return_value = '|OK|Header Costing has successfully inserted.|' . $newId . '|'; //newId jgn di ganti
                }else{
                    $return_value = '|FAIL|Insert Header Costing failed.||' .$sql;
                }
            }else{
                $sql = "UPDATE header_costing  loading_port = {$stockpileId} WHERE header_costing_id = {$codeCosting_id}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if ($result !== false) {
                    $return_value = '|OK|Header Costing has successfully Update.|' . $newId . '|'; //newId jgn diganti
                }else{
                    $return_value = '|FAIL|Update Header biaya failed.||' .$sql;
                }
            }
        }else{
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    }else{
        $return_value = '|FAIL|Master Code already exists.||';
    }

    echo $return_value;

}if (isset($_REQUEST['action']) && $_REQUEST['action'] == 'job_costing_data') { //DETAIL COSTING
    // <editor-fold defaultstate="collapsed" desc="vendor_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $codeCosting_id = $myDatabase->real_escape_string($_POST['codeCosting_id']);
    $costingId = $myDatabase->real_escape_string($_POST['costingId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $generalVendor = $myDatabase->real_escape_string($_POST['generalVendor']);
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $costName = $myDatabase->real_escape_string($_POST['cost']);
    $priceType = $myDatabase->real_escape_string($_POST['priceType']);
    // $chargeCategory = $myDatabase->real_escape_string($_POST['chargeCategory']);
    $minType = $myDatabase->real_escape_string($_POST['minType']);
    $maxType = $myDatabase->real_escape_string($_POST['maxType']);
    $max_charge = str_replace(",", "", $myDatabase->real_escape_string($_POST['maxCharge']));
    $min_charge = str_replace(",", "", $myDatabase->real_escape_string($_POST['minCharge']));
    $max_chargeP = $myDatabase->real_escape_string($_POST['maxChargeP']);
    $min_chargeP = $myDatabase->real_escape_string($_POST['minChargeP']);
    $currency = $myDatabase->real_escape_string($_POST['currency']);
    $priceMT = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceMT']));
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $qtyType = $myDatabase->real_escape_string($_POST['qtyType']); 
    $uom = $myDatabase->real_escape_string($_POST['uom1']);
    $active = $myDatabase->real_escape_string($_POST['active']);
    $tempLog = '';
    // </editor-fold>
    if($_POST['_method'] == 'INSERT'){
        echo "INSER";
        if($costingId == ''){
            $boolNew = true;
            if($priceType == 2){
                $maxType = 0;
                $minType = 0;
            }
        }

        if ($codeCosting_id <> '' && $stockpileId != '' && $generalVendor != ''&& $accountId != '' && $uom != '' && $priceMT != '' && $active != '' && $priceType != '') {
            if ($boolNew) {
                    $sql = "INSERT INTO `mst_costing_detail` (header_costing_id, stockpile_id, general_vendor_id, account_id, cost , price_type, max_type, min_type, max_charge, min_charge, max_chargeP, min_chargeP, "
                        . "currency, priceMT, exchange_rate, qty_type, uom, active, entry_by, entry_date) VALUES ("
                        . "{$codeCosting_id}, {$stockpileId}, {$generalVendor}, {$accountId}, '{$costName}', {$priceType}, {$maxType}, {$minType}, {$max_charge}, {$min_charge}, "
                        . "{$max_chargeP}, {$min_chargeP}, {$currency}, {$priceMT}, {$exchangeRate}, {$qtyType}, {$uom}, {$active}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                    $sql = "UPDATE `mst_costing_detail` SET "
                        . "stockpile_id = {$stockpileId}, "
                        . "general_vendor_id = '{$generalVendor}', "
                        . "account_id = '{$accountId}', "
                        . "cost = '{$costName}', "
                        . "price_type = '{$priceType}', "
                        . "max_charge = '{$max_charge}', "
                        . "max_chargeP = '{$max_chargeP}', "
                        . "max_type = '{$maxType}', "
                        . "min_charge = '{$min_charge}', "
                        . "min_chargeP = '{$min_chargeP}', "
                        . "min_type = '{$minType}', "
                        . "currency = {$currency}, "
                        . "priceMT = {$priceMT}, "
                        . "exchange_rate = {$exchangeRate}, "
                        . "qty_type = {$qtyType}, "
                        . "uom = {$uom}, "
                        . "active = {$active} "
                        . "WHERE mcd_id = {$costingId}";
                }
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false) {
                    if ($boolNew) {
                        $costingId = $myDatabase->insert_id;
                        $tempLog = '[INSERT][MST-COSTING]'. '['.$costingId.']'; 
                    }else{
                        $tempLog = '[UPDATE][MST-COSTING]'. '['.$costingId.']';
                    }

                    //LOG
                    $log = "INSERT INTO log_mst_costing(entry_by, entry_date, price_type, max_type,
                                max_charge, max_chargeP, min_type, min_charge, min_chargeP, qty_type, priceMT, log) VALUES ({$_SESSION['userId']}, 
                                STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$priceType}, {$maxType}, {$max_charge}, {$max_chargeP}, {$minType}, {$min_charge}, {$min_chargeP}, {$qtyType}, {$priceMT}, '{$tempLog}')";
                    $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
                    if($result_log !== false) {
                        $log_id = $myDatabase->insert_id;
                    }

                    $return_value = '|OK|costing has successfully inserted/updated.|' . $codeCosting_id . '|'; //codeCosting_id jgn dihapus
                } else {
                    $return_value = '|FAIL|Insert/update vendor failed.||' .$sql;
                }
        
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    }else if($_POST['_method'] == 'DELETE'){
        if ($costingId != '') {
            $contractCount = 0;
            $freightCount = 0;

            $sql = "SELECT * FROM `accrue_prediction_detail` WHERE mcd_id = {$costingId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            $prediksiCount = $result->num_rows;
            // echo $sql;

            if ($prediksiCount == 0) {
                $sql = "DELETE FROM `mst_costing_detail` WHERE mcd_id = {$costingId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false) {
                    $return_value = '|OK|Master Costing has successfully deleted.|';
                } else {
                    $return_value = '|FAIL|Master Costing vendor failed.|';
                }
            } else {
                $return_value = '|FAIL|Master Costing in use in predition and invoice.|';
            }
        } else {
            $return_value = '|FAIL|Record not found.|';
        }
    }

    echo $return_value;
    // </editor-fold>
}  if (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_qty_costing') { //insert Qty Timbangan/Tongkang
    $return_value = '';
    
    $tempID = $myDatabase->real_escape_string($_POST['tempID']);
    $maxused = str_replace(",", "", $myDatabase->real_escape_string($_POST['maxused']));
    $minused = str_replace(",", "", $myDatabase->real_escape_string($_POST['minused']));
    $qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty']));
    $total = str_replace(",", "", $myDatabase->real_escape_string($_POST['total']));
    $inrupiah = str_replace(",", "", $myDatabase->real_escape_string($_POST['inrupiah']));
    $accountId =  $myDatabase->real_escape_string($_POST['accountId']);

    if ($qty > 0 && $tempID != '' ) {
        if($_POST['_method'] == 'UPDATE'){
                $sql = "UPDATE temp_mst_costing set maxused = {$maxused}, minused = {$minused}, qty_value = {$qty},  total_amount = {$total}, rupiah = {$inrupiah}, account_id = {$accountId}  WHERE id = {$tempID}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//echo $sql;
                $sqlA = "SELECT prediksi_detail_id FROM temp_mst_costing WHERE id = {$tempID}";
                $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                $row = $resultA->fetch_object();
                // $idpDetail = $row->prediksi_detail_id;

                $sql = "UPDATE accrue_prediction_detail set maxused = {$maxused}, minused = {$minused}, qty = {$qty},  
                        total_amount = {$total}, in_rupiah = {$inrupiah}, account_id = {$accountId}  WHERE prediction_detail_id = {$row->prediksi_detail_id}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false) {
                    $return_value = '|OK|Update successfully .|';
                }else{
                    $return_value = '|FAIL|Update  failed.||' .$sql;
                }
            }
     
    }else{
        $return_value = '|FAIL|Please fill qty value > 0 ||';
    }

    echo $return_value;

}
if (isset($_REQUEST['action']) && $_REQUEST['action'] == 'prediksi_costing_data') {
    // <editor-fold defaultstate="collapsed" desc="vendor_data">

    $return_value = '';
    $boolNew = false;
    $shipmentValidation = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $prediksiId = $myDatabase->real_escape_string($_POST['prediksiId']);
    $generateCode = $myDatabase->real_escape_string($_POST['kodeprediksi']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $headerCostingID = $myDatabase->real_escape_string($_POST['headerCostingID']);
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId1']);
    $oldshipmentId = $myDatabase->real_escape_string($_POST['oldshipmentId']);

    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    $motherVessel = $myDatabase->real_escape_string($_POST['motherVessel']);

    $pebdate = $myDatabase->real_escape_string($_POST['pebdate']);
    $currency = $myDatabase->real_escape_string($_POST['currency']);
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $codeText = '';
    $codeText2 = '';
    $tempLog = '';
    $slipNos2 = '';

    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $qtyVessel = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyVessel']));
   
    //CHECKLIST
    $checkedCosting = $_POST['checkedCosting']; //punya nya CHECK1 -> get_data.php ->getTempCosting
    $newArray = array();
        foreach (array_keys($checkedCosting) as $fieldKey) {
            foreach ($checkedCosting[$fieldKey] as $key => $value) {
               if($value != ''){
                   $newArray[$key][$fieldKey] = $value;
                }
        }
    }

    $newArray2 = array_values($newArray);
    for ($i = 0; $i < sizeof($newArray2); $i++) {
        if($selectedCheck == '') {
            $selectedCheck .= $newArray2[$i][id];
        } else {
            $selectedCheck .= ', '. $newArray2[$i][id];
        }
    }

    //   echo json_encode($newArray2[0][id]);
    // echo json_encode($newArray2);
        //echo $selectedCheck;
        //die();

    if($prediksiId == ''){  //INSERT
        $boolNew = true;
      
        //VALIDASI JIKA no shipment sudah digunakan
        $sql1 = "SELECT shipment_id FROM shipment WHERE shipment_id = {$shipmentId} AND status_prediksi = 1";
        $result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
        $prediksiCount = $result1->num_rows;
        if ($prediksiCount > 0) {
             $shipmentValidation = false;
        }
    }

    if($shipmentId == '' || $shipmentId == 0){
        $shipmentId = 'NULL';
    }

    //------------------SUBMIT UPDATE-----------------------
    if ($shipmentValidation ){
        if ($generateCode != '' && $stockpileId != '' && $customerId != '') {
            if ($_POST['_method'] == 'INSERT' && ($selectedCheck != '' || $selectedCheck != 0)) { //INSERT HEADER

                $sql = "INSERT INTO `accrue_prediction` (prediction_code, header_mst_costing, stockpile_id, shipment_id, customer_id, "
                    . "mother_vessel, PEB_Date, Kurs_PEB, exchange_rate, qty_vessel, entry_by, entry_date, sales_id, invoice_type) VALUES ("
                    . "'{$generateCode}',  {$headerCostingID}, {$stockpileId}, {$shipmentId}, {$customerId}, '{$motherVessel}',  STR_TO_DATE('{$pebdate}', '%d/%m/%Y'), {$currency}, {$exchangeRate}, "
                    . "{$qtyVessel}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$salesId}, 4)";
            }else if($_POST['_method'] == 'UPDATE') { //UPDATE HEADER
                    $sql = "UPDATE `accrue_prediction` SET "
                        . "header_mst_costing = {$headerCostingID}, "
                        . "stockpile_id = {$stockpileId}, "
                        . "shipment_id = {$shipmentId}, "
                        . "customer_id = {$customerId}, "
                        . "mother_vessel = '{$motherVessel}', "
                        . "PEB_Date = STR_TO_DATE('{$pebdate}', '%d/%m/%Y'), "
                        . "Kurs_PEB = {$currency}, "
                        . "exchange_rate = {$exchangeRate}, "
                         . "sales_id = {$salesId}, "
                        . "qty_vessel = {$qtyVessel} "
                        . "WHERE prediction_id = {$prediksiId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result !== false) {
                if ($boolNew){ //UNTUK INSERT DETAIL
                    $newId = $myDatabase->insert_id;

                    $shipment = "UPDATE shipment set status_prediksi = 1 where shipment_id = {$shipmentId}";
                    $resultShipment = $myDatabase->query($shipment, MYSQLI_STORE_RESULT);

                    $sqlMST = "SELECT * FROM temp_mst_costing where id IN  ({$selectedCheck}) ";
                    $resultMST = $myDatabase->query($sqlMST, MYSQLI_STORE_RESULT);
                   echo $sqlMST . "<br>";
                   // die();

                    if($resultMST->num_rows > 0){
                        while($rowMST = $resultMST->fetch_object()){
                                $sqlDetail = "INSERT INTO `accrue_prediction_detail` (prediction_id, mcd_id, generate_code_detail, cost_name, account_id, general_vendor_id, "
                                                ." max_type, max_charge, max_chargeP, maxused, min_type, min_charge, min_chargeP, minused, qty_type_id, qty, price_type_id, priceMT, total_amount, currency, exchange_rate, in_rupiah, stockpile_id) "
                                                ." VALUES ({$newId}, {$rowMST->id_mst}, '{$rowMST->generate_code}', {$rowMST->nama_biaya}, {$rowMST->account_id}, {$rowMST->general_vendor_id}, {$rowMST->max_type}, "
                                                ." {$rowMST->max_charge}, {$rowMST->max_chargeP}, {$rowMST->maxused}, {$rowMST->min_type}, {$rowMST->min_charge}, {$rowMST->min_chargeP}, {$rowMST->minused}, "
                                                ." {$rowMST->qty_type_id}, {$rowMST->qty_value}, {$rowMST->price_type_id}, {$rowMST->price}, {$rowMST->total_amount},{$rowMST->currency}, {$rowMST->kurs}, {$rowMST->rupiah}, {$rowMST->stockpile_id})";
                                $resultDetail = $myDatabase->query($sqlDetail, MYSQLI_STORE_RESULT);
                        } 
                    } 
                    $tempLog = '[INSERT][PREDIKSI-HEADER]'. '['.$newId.']';
                    echo $sqlDetail ;
                }else{ //UNTUK UPDATE DETAIL

                    if($shipmentId != $oldshipmentId){
                        $shipment = "UPDATE shipment set status_prediksi = 1 where shipment_id = {$shipmentId}";
                        $resultShipment = $myDatabase->query($shipment, MYSQLI_STORE_RESULT);
    
                        $shipment1 = "UPDATE shipment set status_prediksi = 0 where shipment_id = {$oldshipmentId}";
                        $resultShipment1 = $myDatabase->query($shipment1, MYSQLI_STORE_RESULT);    
                    }

                    $sqlMST = "SELECT * FROM temp_mst_costing WHERE journal_status = 0 AND status = 0";
                    $resultMST = $myDatabase->query($sqlMST, MYSQLI_STORE_RESULT);
                    
                    if($resultMST->num_rows > 0){
                        while($rowMST = $resultMST->fetch_object()){
                            $sqlDetail = "UPDATE `accrue_prediction_detail` SET "
                            // . "qty = {$rowMST->qty_value}, "
                            // . "maxused =  {$rowMST->maxused}, "
                            // . "minused = {$rowMST->minused}, "
                            . "priceMT = {$rowMST->price}, "
                            // . "total_amount ={$rowMST->total_amount}, "
                            . "exchange_rate = {$rowMST->kurs}, "
                            // . "in_rupiah = {$rowMST->rupiah}, "
                            // . "account_id = {$rowMST->account_id}, "
                            . "exchange_rate = {$rowMST->kurs}, "
                            . "status = 0 "
                            . "WHERE prediction_detail_id = {$rowMST->prediksi_detail_id}";
                        $resultDetail = $myDatabase->query($sqlDetail, MYSQLI_STORE_RESULT);
                    //    echo "SS | ". $sqlDetail;
                        } 
                    } 
                    // $tempLog = '[UPDATE][PREDIKSI-HEADER]'. '['.$newId.']';
                }
                        
                $log = "INSERT INTO log_prediksi_header(entry_by, entry_date, shipment_id, log) VALUES ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$oldshipmentId}, '{$tempLog}')";
                $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
                if($result_log !== false) {
                    $log_id = $myDatabase->insert_id;
                }

                $return_value = '|OK|Prediction Data has successfully inserted/updated.|' . $prediksiId . '|'; // $prediksiId jgn di hapus
            } else {
                $return_value = '|FAIL|Insert/update Prediction failed.||' .$sqlDetail. ' || ' .$sql;
            }

           
        
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        } 
    }else{
        $return_value = '|FAIL|ShipmentNo has already exist. ||';
    }
//--------------- END SUBMIT UPDATE-------------------------

//-----------------------GENERATE JOURNAL--------------------
    if ($_POST['_method1'] == 'Create Journal') { 
         //UPDATE HEADER
        //Buat jaga" jika ada edit tapi lupa klik tombol UPDATE:
         $sql = "UPDATE `accrue_prediction` SET "
                . "header_mst_costing = {$headerCostingID}, "
                . "stockpile_id = {$stockpileId}, "
                . "shipment_id = {$shipmentId}, "
                . "customer_id = {$customerId}, "
                . "mother_vessel = '{$motherVessel}', "
                . "PEB_Date = STR_TO_DATE('{$pebdate}', '%d/%m/%Y'), "
                . "Kurs_PEB = {$currency}, "
                . "exchange_rate = {$exchangeRate}, "
                . "sales_id = {$salesId}, "
                . "qty_vessel = {$qtyVessel} "
                . "WHERE prediction_id = {$prediksiId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($selectedCheck != '' || $selectedCheck != 0){
			
			//validasi jika qty belum di isi
			$validasi = "SELECT * FROM temp_mst_costing WHERE qty_value = 0 AND id IN ({$selectedCheck}) AND journal_status = 0 AND STATUS = 0";
			$resultval = $myDatabase->query($validasi, MYSQLI_STORE_RESULT);
			$count = $resultval->num_rows;
			if($count == 0){
			  //  $sqlMST = "SELECT *, GROUP_CONCAT(prediksi_detail_id) AS pDetailId FROM temp_mst_costing where id IN  ({$selectedCheck}) AND journal_status = 0 AND status = 0";
				$sqlMST = "SELECT *, 
							(SELECT GROUP_CONCAT(prediksi_detail_id) FROM temp_mst_costing WHERE id IN ({$selectedCheck}) AND journal_status = 0 AND STATUS = 0) AS pDetailId
							 FROM temp_mst_costing 
							WHERE id IN ({$selectedCheck}) AND journal_status = 0 AND STATUS = 0";
				$resultMST = $myDatabase->query($sqlMST, MYSQLI_STORE_RESULT);
				
				if($resultMST->num_rows > 0){
					while($rowMST = $resultMST->fetch_object()){
						$tempId = $rowMST->id;
						$accrueId = $rowMST->prediksi_detail_id;
						$mstId = $rowMST->id_mst;
						$pDetailId = $rowMST->pDetailId;

						//UPDATE DETAIL ACCRUE
						//Buat jaga" jika ada editan tapi lupa klik tombol edit:
						$sqlDetail = "UPDATE `accrue_prediction_detail` SET "
									. "qty = {$rowMST->qty_value}, "
									. "max_charge =  {$rowMST->maxused}, "
									. "min_charge = {$rowMST->minused}, "
									. "priceMT = {$rowMST->price}, "
									. "total_amount ={$rowMST->total_amount}, "
									. "account_id = {$rowMST->account_id}, "
                                    . "exchange_rate = {$rowMST->kurs}, "
									. "in_rupiah = {$rowMST->rupiah} "
									. "WHERE prediction_detail_id = {$rowMST->prediksi_detail_id}";
						$resultDetail = $myDatabase->query($sqlDetail, MYSQLI_STORE_RESULT);

						$sqlValidation = "SELECT * FROM accrue_prediction_detail WHERE  prediction_detail_id = {$accrueId} AND journal_status = 0 AND status = 0";
						$resultValidation = $myDatabase->query($sqlValidation, MYSQLI_STORE_RESULT);   
					   
						if($resultValidation->num_rows == 1){

							$sqlA = "UPDATE accrue_prediction_detail set journal_status = 1 where prediction_detail_id = {$accrueId}";
							$resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);        
						}
							// insertGeneralLedger($myDatabase, 'JURNAL ACCRUE', "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", $accrueId);
							// insertReportGL($myDatabase, 'JURNAL ACCRUE', "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", $accrueId);
                            insertGL_accrue($myDatabase, 'JURNAL ACCRUE', $accrueId);
                            // insertRGL_accrue($myDatabase, 'JURNAL ACCRUE', $accrueId);

					} 
					$return_value = '|OK|Journal has successfully created.|' . $pDetailId . '|JOURNAL';
				} else{
					$return_value = '|FAIL|Invoice already exists OR data is empty!.|';
				}
			}else{
				 $return_value = '|FAIL| Please input qty value|';
			}
        }else{
            $return_value = '|FAIL| Please select at least one option to proceed|';
        
        }
    }
//---------------------------------END-------------------------


//-----------------------CANCEL JOURNAL--------------------
if ($_POST['_method2'] == 'Cancel Prediksi') { 
    if($selectedCheck != '' || $selectedCheck != 0){
        $sqlMST = "SELECT *,
		(SELECT GROUP_CONCAT(prediksi_detail_id) FROM temp_mst_costing WHERE id IN ({$selectedCheck}) AND journal_status = 1 AND STATUS = 0) AS pDetailId
		FROM temp_mst_costing where id IN  ({$selectedCheck}) AND status = 0 AND journal_status = 1";
        // echo " TEST " . $sqlMST;
        $resultMST = $myDatabase->query($sqlMST, MYSQLI_STORE_RESULT);
        if($resultMST->num_rows > 0){
            while($rowMST = $resultMST->fetch_object()){
                $tempId = $rowMST->id;
                $accrueId = $rowMST->prediksi_detail_id;
                $mstId = $rowMST->id_mst;
				$pDetailId = $rowMST->pDetailId;

                $sqlValidation = "SELECT *
				FROM accrue_prediction_detail WHERE  prediction_detail_id = {$accrueId} AND status = 0 AND journal_status = 1";
                $resultValidation = $myDatabase->query($sqlValidation, MYSQLI_STORE_RESULT);   
               
                if($resultValidation->num_rows == 1){
                    $sqlA = "UPDATE accrue_prediction_detail set journal_status = 2, cancel_jurnal_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') 
                            where prediction_detail_id = {$accrueId}";
                    $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);    
                   // echo $sqlA;
                }
                // insertGeneralLedger($myDatabase, 'JURNAL ACCRUE', "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", $accrueId);
                // insertReportGL($myDatabase, 'JURNAL ACCRUE', "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", $accrueId);
                insertGL_accrue($myDatabase, 'RETURN ACCRUE', $accrueId);
                // insertRGL_accrue($myDatabase, 'JURNAL ACCRUE', $accrueId);

} 
            $return_value = '|OK|Journal has successfully cancel.|' . $pDetailId . '|CANCEL';
        } else{
            $return_value = '|FAIL|Invoice already exists! or data is empty|';
        }
    }else{
        $return_value = '|FAIL| Please select at least one option to proceed|';
    }
}
//---------------------------------END-------------------------

echo $return_value;

}if (isset($_REQUEST['action']) && $_REQUEST['action'] == 'submitJournalAccrue') {
	$return_value = '';
    //$boolNew = false;
    //$shipmentValidation = true;
	
	$modalAccrueId = $myDatabase->real_escape_string($_POST['modalAccrueId']);
	
	if ($_POST['cancelJournal'] == 'Back') { 
        
        $sql1 = "DELETE FROM general_ledger WHERE accrue_id IN ({$modalAccrueId})";
        $result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
		
		$sql2 = "UPDATE accrue_prediction_detail SET journal_status = 0 WHERE prediction_detail_id IN ({$modalAccrueId})";
        $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
		
		$sql3 = "SELECT prediction_id FROM accrue_prediction_detail WHERE prediction_detail_id IN ({$modalAccrueId}) LIMIT 1";
        $result3 = $myDatabase->query($sql3, MYSQLI_STORE_RESULT);   
			if($result3->num_rows == 1){
				$row3 = $result3->fetch_object();
					
					$prediction_id = $row3->prediction_id;
                        
            }
		//echo 'test';	
		
		$return_value = '|OK|Journal has been canceled .|' . $prediction_id . '|';
        
		
    }else if ($_POST['submitJournal'] == 'Submit') { 
        
	$sqlNotim = "SELECT * FROM `accrue_prediction_detail` WHERE prediction_detail_id IN ({$modalAccrueId})";
	//$sqlNotim = "SELECT * FROM invoice_detail WHERE entry_date BETWEEN '2020-05-01' AND '2020-05-31'";
		$resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
			if ($resultNotim !== false && $resultNotim->num_rows > 0) {
			while ($rowNotim = $resultNotim->fetch_object()) {
				$accrueId = $rowNotim->prediction_detail_id;


            if ($accrueId != '') {
                // insertGL_accrue($myDatabase, 'JURNAL ACCRUE', $accrueId);
                insertRGL_accrue($myDatabase, 'JURNAL ACCRUE', $accrueId);

                // insertGeneralLedger($myDatabase, 'JURNAL ACCRUE', "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", $accrueId);
                // insertReportGL($myDatabase, 'JURNAL ACCRUE', "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", $accrueId);

                $sql3 = "SELECT prediction_id FROM accrue_prediction_detail WHERE prediction_detail_id IN ({$modalAccrueId}) LIMIT 1";
                $result3 = $myDatabase->query($sql3, MYSQLI_STORE_RESULT);   
                if($result3->num_rows == 1){
                    $row3 = $result3->fetch_object();
                        
                        $prediction_id = $row3->prediction_id;
                            
                }

                $return_value = '|OK|Jurnal Accrue has successfully Created.|'. $prediction_id . '|';

            } else {
                $return_value = '|FAIL|Record not found.|';
            }

        }
    }
        
		
    }
	echo $return_value;
}
if (isset($_REQUEST['action']) && $_REQUEST['action'] == 'cancelJournalAccrue') {
	$return_value = '';
    //$boolNew = false;
    //$shipmentValidation = true;
	
	$modalAccrueId = $myDatabase->real_escape_string($_POST['modalCancelAccrueId']);
	
	if ($_POST['cancelJournal'] == 'Back') { 
        
        $sql1 = "DELETE FROM general_ledger WHERE accrue_id IN ({$modalAccrueId}) AND description = 'Cancel Journal'";
        $result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
		
		$sql2 = "UPDATE accrue_prediction_detail SET journal_status = 1, cancel_jurnal_date = NULL WHERE prediction_detail_id IN ({$modalAccrueId})";
        $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
		
		$sql3 = "SELECT prediction_id FROM accrue_prediction_detail WHERE prediction_detail_id IN ({$modalAccrueId}) LIMIT 1";
        $result3 = $myDatabase->query($sql3, MYSQLI_STORE_RESULT);   
			if($result3->num_rows == 1){
				$row3 = $result3->fetch_object();
					
					$prediction_id = $row3->prediction_id;
                        
            }
		//echo 'test';	
		
		$return_value = '|OK|Journal has been canceled .|' . $prediction_id . '|';
        
		
    }else if ($_POST['submitJournal'] == 'Submit') { 
        
	$sqlNotim = "SELECT * FROM `accrue_prediction_detail` WHERE prediction_detail_id IN ({$modalAccrueId})";
	//$sqlNotim = "SELECT * FROM invoice_detail WHERE entry_date BETWEEN '2020-05-01' AND '2020-05-31'";
		$resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
			if ($resultNotim !== false && $resultNotim->num_rows > 0) {
			while ($rowNotim = $resultNotim->fetch_object()) {
				$accrueId = $rowNotim->prediction_detail_id;


            if ($accrueId != '') {
                // insertGL_accrue($myDatabase, 'JURNAL ACCRUE', $accrueId);
                insertRGL_accrue($myDatabase, 'RETURN ACCRUE', $accrueId);

                // insertGeneralLedger($myDatabase, 'JURNAL ACCRUE', "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", $accrueId);
                // insertReportGL($myDatabase, 'JURNAL ACCRUE', "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", $accrueId);

                $sql3 = "SELECT prediction_id FROM accrue_prediction_detail WHERE prediction_detail_id IN ({$modalAccrueId}) LIMIT 1";
                $result3 = $myDatabase->query($sql3, MYSQLI_STORE_RESULT);   
                if($result3->num_rows == 1){
                    $row3 = $result3->fetch_object();
                        
                        $prediction_id = $row3->prediction_id;
                            
                }

                $return_value = '|OK|Jurnal Accrue has successfully Created.|'. $prediction_id . '|';

            } else {
                $return_value = '|FAIL|Record not found.|';
            }

        }
    }
        
		
    }
	echo $return_value;
}
if (isset($_REQUEST['action']) && $_REQUEST['action'] == 'add_new_prediksi_data') {
    // <editor-fold defaultstate="collapsed" desc="vendor_data">

    $returnVal = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $prediksiId = $myDatabase->real_escape_string($_POST['prediksiId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $currency = $myDatabase->real_escape_string($_POST['currency']);
    $codeText = '';
    $codeText2 = '';
    $tempLog = '';
    $slipNos2 = '';
    $code = 0;

    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $qtyVessel = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyVessel']));
    $exRateCosting = str_replace(",", "", $myDatabase->real_escape_string($_POST['exRateCosting']));
    $kodeprediksi = str_replace(",", "", $myDatabase->real_escape_string($_POST['kodeprediksi']));

   
    //CHECKLIST
    $checkedCostingModal = $_POST['checkedCostingModal'];
    $newArray = array();
        foreach (array_keys($checkedCostingModal) as $fieldKey) {
            foreach ($checkedCostingModal[$fieldKey] as $key => $value) {
               if($value != ''){
                   $newArray[$key][$fieldKey] = $value;
                }
        }
    }

    $newArray2 = array_values($newArray);
    for ($i = 0; $i < sizeof($newArray2); $i++) {
        if($selectedCheck == '') {
            $selectedCheck .= $newArray2[$i][id];
        } else {
            $selectedCheck .= ', '. $newArray2[$i][id];
        }
    }

  //  echo "CEK " . $selectedCheck;
    //  echo json_encode($newArray2[0][id]);
    //echo json_encode($newArray2);
     // die();

    // $sqlSp = "SELECT stockpile_code as spCode FROM stockpile where stockpile_id = {$stockpileId}";
    // $resulSp = $myDatabase->query($sqlSp, MYSQLI_STORE_RESULT);
    // if ($resulSp->num_rows == 1) {
    //     $rowSp = $resulSp->fetch_object();
    //     $spCode = $rowSp->spCode;
    // }
    // $codeText = $spCode .'/PRED';
    $codeText = $kodeprediksi;
    
    //GENERATE CODE
    $sqlCode = "SELECT  generate_code_detail FROM accrue_prediction_detail
                WHERE generate_code_detail like '{$codeText}%' ORDER BY prediction_detail_id DESC LIMIT 1";
    $resultCode = $myDatabase->query($sqlCode, MYSQLI_STORE_RESULT);
    if ($resultCode->num_rows == 1) {
        $rowCode = $resultCode->fetch_object();
        $splitNo = explode('-', $rowCode->generate_code_detail);
        $lastExplode = count($splitNo) - 1;
        $nextNo = ((float)$splitNo[$lastExplode]) + 1;
        $code =  $nextNo;
    } else{
        $code = 1 ;
    }

    if($selectedCheck != '' || $selectedCheck != 0){

        $shipment = "UPDATE shipmentId set status_prediksi = 1 where shipment_id = (SELECT shipment_id from accrue_prediction where prediction_id = {$prediksiId})";
        $resultShipment = $myDatabase->query($shipment, MYSQLI_STORE_RESULT);

        $sqlMST = "SELECT * FROM mst_costing_detail where mcd_id IN  ({$selectedCheck})";
        $resultMST = $myDatabase->query($sqlMST, MYSQLI_STORE_RESULT);
        // echo $sqlMST;
        // die();

        if($resultMST->num_rows > 0){
            while($row = $resultMST->fetch_object()){
                $generateCode = '';
                $maxused = 0;
                $minused = 0;
                $totalAmount = 0;
                $QtyType = 0;
                $total = 0;
                $takenValue = 0;
                $inRupiah = 0;
                $maxc = $row->max_charge; //nilai max
                $minc = $row->min_charge; //nilai minimum
                $maxType = $row->max_type; // 1 = lowest, 2=highest
                $minType = $row->min_type;
                $priceType = $row->price_type; //1 = Var, 2 = fix

                if($row->qty_type == 1){ //Vessel
                
                    if($qtyVessel > 0){
                        $tempQtyV = str_replace( ',', '', $qtyVessel);
                        $total = $row->priceMT * $tempQtyV;
                        $QtyType = $tempQtyV;
                    }else{
                        $total = $row->priceMT;
                    } 

                    if($row->price_type == 1){ //VAR
                        $maxcp = ($row->max_chargeP/100) * $total;
                        $mincp = ($row->min_chargeP/100) * $total;

                        if($maxType == 1){ //MAX TYPE U/ LOWEST
                            if($maxc > $maxcp){
                                $maxused = $maxcp;
                            }else{
                                $maxused = $maxc;
                            }
                        }else if($maxType == 2){ //MAX TYPE U/ HIGHEST
                            if($maxc > $maxcp){
                                $maxused = $maxc;
                            }else{
                                $maxused = $maxcp;
                            }
                        }else{
                            $maxused = 0;
                        }

                        if($minType == 1){ //MIN TYPE U/ LOWEST
                            if($minc > $mincp){
                                $minused = $mincp;
                            }else{
                                $minused = $minc;
                            }
                        }else if($minType == 2){ //MIN TYPE U/ HIGHEST
                            if($minc > $mincp){
                                $minused = $minc;
                            }else{
                                $minused = $mincp;
                            }
                        }else{
                            $minused = 0;
                        }

                        if($total > $maxused){
                            if($maxused > $minused){
                                $totalAmount = $maxused;
                            }else if($maxused < $minused){
                                $totalAmount = $minused;
                            }else{
                                $totalAmount = $total;
                            }
                        }else if($total < $maxused){
                            if($total > $minused){
                                $totalAmount = $total;
                            }else{
                                $totalAmount = $minused;
                            }
                        }
                    }else if($row->price_type == 2){ //FIX type
                        $takenValue = 0;
                        $QtyType = 1;
                        $totalAmount = $row->priceMT;
                    }
                } else { //TONGKANG   || TIMBANGAN
        
                    $total = $row->priceMT;     
                    if($row->price_type == 1){    //VAR
                        $maxcp = ($row->max_chargeP/100) * $total;
                        $mincp = ($row->min_chargeP/100) * $total;                
                                    
                        if($maxType == 1){ //MAX TYPE U/ LOWEST
                            if($maxc > $maxcp){
                                $maxused = $maxcp;
                            }else{
                                $maxused = $maxc;
                            }
                        }else if($maxType == 2){ //MAX TYPE U/ HIGHEST
                            if($maxc > $maxcp){
                                $maxused = $maxc;
                            }else{
                                $maxused = $maxcp;
                            }
                        }else{
                            $maxused = 0;
                        }    

                        if($minType == 1){ //MIN TYPE U/ LOWEST
                            if($minc > $mincp){
                                $minused = $mincp;
                            }else{
                                $minused = $minc;
                            }
                        }else if($minType == 2){ //MIN TYPE U/ HIGHEST
                            if($minc > $mincp){
                                $minused = $minc;
                            }else{
                                $minused = $mincp;
                            }
                        }else{
                            $minused = 0;
                        }            
                        
                        if($total > $maxused){
                            if($maxused > $minused){
                                $totalAmount = $maxused;
                            }else if($maxused < $minused){
                                $totalAmount = $minused;
                            }else{
                                $totalAmount = $total;
                            }
                        }else if($total  < $maxused){
                            if($total > $minused){
                                $totalAmount = $total;
                            }else{
                                $totalAmount = $minused;
                            }
                        }
                    }else if($row->price_type == 2){ //FIX type
                        $takenValue = 0;
                        $QtyType = 1;
                        $totalAmount = $row->priceMT;
                    }
                }

                $generateCode = $codeText .'-' .$code;
                if($row->currency != 1 && $exRateCosting != ''){
                    $inRupiah = $totalAmount * $exRateCosting;
                    $tempExRate = $exRateCosting;
                }else{
                    $inRupiah = $totalAmount * $row->exchange_rate;
                    $tempExRate = $row->exchange_rate;
                }

                $sqlA = "INSERT INTO `temp_mst_costing` (header_prediksi, id_mst, generate_code, nama_biaya, general_vendor_id, account_id, max_type, maxused, max_charge, max_chargeP,  "
                        . "min_type, minused, min_charge, min_chargeP, qty_type_id, price_type_id, "
                        . "qty_value, price, total_amount, currency, kurs, rupiah, stockpile_id, uom_id) VALUES ("
                        . "{$prediksiId}, {$row->mcd_id}, '{$generateCode}', {$row->cost}, {$row->general_vendor_id}, '{$row->account_id}', {$row->max_type}, {$maxused}, {$row->max_charge}, "
                        . "{$row->max_chargeP}, {$row->min_type}, {$minused}, {$row->min_charge}, {$row->min_chargeP},  {$row->qty_type}, {$row->price_type}, "
                        . "{$QtyType}, {$row->priceMT}, {$totalAmount},  {$row->currency}, {$tempExRate}, {$inRupiah}, {$row->stockpile_id}, {$row->uom})";
                $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                if ($resultA !== false) {
                    $newIdA = $myDatabase->insert_id;
                }

                $sqlDetail = "INSERT INTO `accrue_prediction_detail` (prediction_id, mcd_id, generate_code_detail, cost_name, account_id, general_vendor_id, "
                            ." max_type, max_charge, max_chargeP, maxused, min_type, min_charge, min_chargeP, minused, "
                            . "qty_type_id, qty, price_type_id, priceMT, total_amount, currency, exchange_rate, in_rupiah, stockpile_id) "
                            ." VALUES ({$prediksiId}, {$row->mcd_id}, '{$generateCode}', '{$row->cost}', {$row->account_id},  {$row->general_vendor_id},  "
                            ." {$row->max_type}, {$row->max_charge}, {$row->max_chargeP}, {$maxused}, {$row->min_type}, {$row->min_charge}, {$row->min_chargeP}, {$minused}, "
                            ." {$row->qty_type}, {$QtyType}, {$row->price_type}, {$row->priceMT}, {$totalAmount},{$row->currency}, {$tempExRate}, {$inRupiah}, {$row->stockpile_id})";
                $resultDetail = $myDatabase->query($sqlDetail, MYSQLI_STORE_RESULT);
                if ($resultDetail !== false) {
                    $newIdB = $myDatabase->insert_id;
                    $sqlC = "UPDATE temp_mst_costing  set prediksi_detail_id = {$newIdB} where id = {$newIdA}";
                    $resultC = $myDatabase->query($sqlC, MYSQLI_STORE_RESULT);
                }

                $code++;
            } 
            $returnVal = '|OK| Data has successfully inserted.|' .$prediksiId;
        } else{
            $returnVal = '|FAIL|Data has Fail inserted.|' .$sqlA . '|' . $sqlDetail;
        }
    }else{
        $returnVal = '|FAIL|Please Checklist Data .|';
    }
    echo $returnVal;
    // </editor-fold>
} 
// if (isset($_REQUEST['action']) && $_REQUEST['action'] == 'inv_prediksi_data') {
// //     // <editor-fold defaultstate="collapsed" desc="vendor_data">

// //     $return_value = '';
// //     $success = false;
// //     $boolNew = false;

// //     $invId = $myDatabase->real_escape_string($_POST['invId']);
// //     $detailId = $myDatabase->real_escape_string($_POST['detailId']);
// //     $headerId = $myDatabase->real_escape_string($_POST['headerId']);
// //     $detailCode = $myDatabase->real_escape_string($_POST['detailCode']);
// //     $genereteInv1 = $_POST['generateInv1'];
// //     $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
// //     $methodId = $myDatabase->real_escape_string($_POST['methodId']);
// //     $accountId = $myDatabase->real_escape_string($_POST['accountId']);
// //     // $chargeCategory = $myDatabase->real_escape_string($_POST['chargeCategory']);
// //     $originalInv = $myDatabase->real_escape_string($_POST['originalInv']);
// //     $inputDate = $myDatabase->real_escape_string($_POST['inputDate']);
// //     $reqDate = $myDatabase->real_escape_string($_POST['reqDate']);
// //     $invDate = $myDatabase->real_escape_string($_POST['invDate']);

// //     $taxInv = $myDatabase->real_escape_string($_POST['taxInv']);
// //     $taxDate = $myDatabase->real_escape_string($_POST['taxDate']);
// //     $remarks = $myDatabase->real_escape_string($_POST['remarks']);
// //     $tempRemarks = $myDatabase->real_escape_string($_POST['spRemarks']);

// //     $maxCharge = str_replace(",", "", $myDatabase->real_escape_string($_POST['maxCharge']));
// //     $minCharge = str_replace(",", "", $myDatabase->real_escape_string($_POST['minCharge']));
// //     $qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty']));
// //     $priceMT = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceMT']));
// //     $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
// //     $inRupiah = str_replace(",", "", $myDatabase->real_escape_string($_POST['inRupiah']));
// //     $totalAmount = str_replace(",", "", $myDatabase->real_escape_string($_POST['tAmount']));
// //     $dpAmount = str_replace(",", "", $myDatabase->real_escape_string($_POST['dpAmount']));
// //     // $availableAmount = str_replace(",", "", $myDatabase->real_escape_string($_POST['availableAmount']));
// //     $mstCurr = $myDatabase->real_escape_string($_POST['mstCurr']);

// //     $tempLog = '';

// //     //get id stockpile Remarks
// //     $sqlSP = "SELECT stockpile_id, stockpile_code FROM stockpile WHERE  stockpile_name LIKE '%{$tempRemarks}%'";
// //     $rsSP = $myDatabase->query($sqlSP, MYSQLI_STORE_RESULT);
// //     if ($rsSP->num_rows == 1) {
// //         $rowSP = $rsSP->fetch_object();
// //         $spRemarks = $rowSP->stockpile_id;
// //     }
  
// //     if ($detailId != '' && $detailCode != '' && $genereteInv1 != '' && $stockpileId != '' && $methodId != '' && $spRemarks != '') {
// //         if($_POST['_method'] == 'INSERT'){
           
// //             if($methodId == 1){ 
// //                 $tempAmount = $totalAmount;
// //                 //CEK APAKAH ADA DP
// //                 $sqldp = "SELECT dt.invoice_method_detail as methodId, inv.invoice_id as invId, dt.invoice_detail_id as invdID
// //                           FROM invoice inv
// //                           LEFT JOIN invoice_detail dt ON dt.invoice_id = inv.invoice_id
// //                           WHERE  inv.prediction_detail_id = {$detailId} ORDER BY invoice_detail_id DESC LIMIT 1";
// //                 $rsdp = $myDatabase->query($sqldp, MYSQLI_STORE_RESULT);
              
// //                 if($rsdp !== false) {
// //                     $row = $rsdp->fetch_object();
// //                     $invId = $row->invId;
// //                     if($invId != "" && $row->methodId == 2 ){
// //                         $invd = $row->invdID;
// //                         $boolNew = true;
// //                     }
// //                 }
// //             }else if($methodId == 2){
// //                 $tempAmount = $dpAmount;
// //                 $sqldp = "SELECT inv.invoice_id FROM invoice inv 
// //                           WHERE  inv.prediction_detail_id = {$detailId}";
// //                 $rsdp = $myDatabase->query($sqldp, MYSQLI_STORE_RESULT);
// //                 if ($rsdp !== false && $rsdp->num_rows > 0) {
// //                     $row = $rsdp->fetch_object();
// //                     $invId = $row->invoice_id;
// //                     $boolNew = true;
// //                     // echo "IHIY";
// //                 }
// //             }
           
// //            $inRupiah = $exchangeRate * $tempAmount;

// //             //INVERT TABEL INVOICE HANYA 1X
// //             if(($boolNew == false && $methodId == 2) || ($boolNew == false && $methodId == 1)){
               
// //                 $sql = "INSERT INTO `invoice` (prediction_detail_id, invoice_no,  invoice_no2, input_date, request_date, stockpileId, invoice_date, "
// //                         . "tax_date, invoice_tax, entry_by, entry_date) VALUES ({$detailId}, '{$genereteInv1}', '{$originalInv}', STR_TO_DATE('{$inputDate}', '%d/%m/%Y'), STR_TO_DATE('{$reqDate}', '%d/%m/%Y'), "
// //                         . "{$stockpileId}, STR_TO_DATE('{$invDate}', '%d/%m/%Y'),  STR_TO_DATE('{$taxDate}', '%d/%m/%Y'), '{$taxInv}',  "
// //                         . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";    
// //                 $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
              
// //                 if ($result !== false) {
// //                     $invId = $myDatabase->insert_id;
                    
// //                     if($methodId == 2){
// //                         $sql1 = "UPDATE accrue_prediction_detail set  status = 2 where prediction_detail_id = {$detailId}";
// //                         $result = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
// //                     }
// //                     $success = true;
// //                 }
// //             } 

// //             //INSERT TABEL invoice_detail SETIAP ADA SUBMIT 
// //             if($invId != ''){
// //                 $sqld = "INSERT INTO `invoice_detail` (invoice_id, invoice_method_detail, stockpile_remark, account_id, max_charge, min_charge, qty, price, amount, amount_converted, currency_id, exchange_rate, "
// //                         . "tamount, tamount_converted, entry_by, entry_date, notes) VALUES ({$invId}, {$methodId}, {$spRemarks}, {$accountId}, {$maxCharge}, {$minCharge}, {$qty}, {$priceMT}, {$tempAmount}, {$inRupiah}, {$mstCurr}, {$exchangeRate}, "
// //                         . "{$tempAmount}, {$inRupiah}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$remarks}')";
// //                 $resultd = $myDatabase->query($sqld, MYSQLI_STORE_RESULT);
// //                 if ($resultd !== false) {
// //                     $invd = $myDatabase->insert_id;
// //                     $success = true;
// //                     $tempLog = '[INSERT][INVOICE-DETAIL]'. '['.$invd.']';
// //                 }
// //             }
           
// //             //PELUNASAN
// //             if(($boolNew && $methodId == 1)){
// //                 //INSERT INVOICE_DP
// //                 $sqldt = "SELECT * FROM invoice_detail WHERE invoice_id = {$invId} AND invoice_method_detail = 2";
// //                 $resultdt = $myDatabase->query($sqldt, MYSQLI_STORE_RESULT);

// //                 if ($resultdt !== false && $resultdt->num_rows > 0) { 
// //                     while ($row = $resultdt->fetch_object()) {
// //                         $sqldp = "INSERT INTO `invoice_dp` (invoice_detail_id, invoice_detail_dp, amount_payment) VALUES ({$invd}, {$row->invoice_detail_id}, {$row->amount})";
// //                         $resultdp = $myDatabase->query($sqldp, MYSQLI_STORE_RESULT);
// //                         if($resultdp !== false) {
// //                             $invdp = $myDatabase->insert_id;
                          
// //                         }
// //                         echo $sqldp;
// //                     }
// //                     $success= true;
// //                 }
// //             }

// //             //JIKA SEMUA DETAIL ACCRUE SUDAH DI APPROVE
// //             if($methodId == 1 && $success){
// //                 //UPDATE HEADER ketika detailnya sudah di approve semua
// //                 $sqlh = "SELECT * FROM accrue_prediction ap 
// //                         LEFT JOIN accrue_prediction_detail apd ON apd.prediction_id = ap.prediction_id
// //                         WHERE apd.prediction_id = {$headerId} AND apd.status != 1";
// //                 $resulth = $myDatabase->query($sqlh, MYSQLI_STORE_RESULT);
// //                 if($resulth !== false && $resulth->num_rows == 1) {
// //                     $sqlh = "UPDATE accrue_prediction set  status = 1 where prediction_id = {$headerId}";
// //                     $resulth = $myDatabase->query($sqlh, MYSQLI_STORE_RESULT);
// //                 }
                    
// //                 // 1 DETAIL PREDIKSI = 1 INVOICE, 1 INVOICE = (BANYAK DETAIL, BANYAK DETAIL DP)
// //                 $sql1 = "UPDATE accrue_prediction_detail set  status = 1 where prediction_detail_id = {$detailId}";
// //                 $result = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);

// //                 //PELUNASAN
// //                 $sqlinv = "UPDATE invoice set  invoice_status = 1 where invoice_id = {$invId}";
// //                 $result = $myDatabase->query($sqlinv, MYSQLI_STORE_RESULT);
// //             }
            
// //             if($success){
// //                 $return_value = '|OK|Invoice  has successfully inserted.|';
// //             }else{
// //                 $return_value = '|FAIL|Insert Invoice failed.||';
// //             }

// //         }else if($_POST['_method'] == 'UPDATE'){

// //             $sql = "UPDATE `invoice` SET "
// //                 . "input_date = STR_TO_DATE('{$inputDate}', '%d/%m/%Y'), "
// //                 . "request_date = STR_TO_DATE('{$reqDate}', '%d/%m/%Y'), "
// //                 . "invoice_date = STR_TO_DATE('{$invDate}', '%d/%m/%Y'), "
// //                 . "invoice_no2 = '{$originalInv}', "
// //                 . "invoice_tax = '{$taxInv}', "
// //                 . "tax_date = STR_TO_DATE('{$taxDate}', '%d/%m/%Y'), "
// //                 . "remarks = '{$remarks}' "
// //                 . "WHERE invoice_id = {$invId}";
// //             $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
// //             if ($result !== false) {
// //                 $return_value = '|OK|Invoice has successfully updated.|';
// //             }else{
// //                 $return_value = '|FAIL|update Invoice failed.||';
// //             }

// //         }
// //     } else {
// //         $return_value = '|FAIL|Please fill the required fields/Stockpile Remarks Salah.||';
// //     }

// //     if ($_POST['_method'] == 'REJECT') {
    
// //         $reject_remarks = $_POST['reject_remarks'];

// //         $sqlUpdate = "UPDATE `accrue_prediction` SET  status = 3, remarks_reject = '{$reject_remarks}' WHERE prediction_id = {$headerId}";
// //         $resultsUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

// //         $sqlUpdate = "UPDATE `accrue_prediction_detail` SET  status = 3 WHERE prediction_id = {$headerId}";
// //         $resultsUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
// //         // echo "DUA ". $sqlUpdate;
// //         if($resultsUpdate !== false) {
// //             $tempLog = '[UPDATE][REJECT-DETAIL]'. '['.$invId.']';
// //             $return_value = '|OK|.Reject  has successfully';
// //         }else{
// //             $return_value = '|Fail|. Reject  FAIL!|| '.$sql;
// //         }
// //     }elseif ($_POST['_method'] == 'RETURN'){
// //         $reject_remarks = $_POST['reject_remarks'];

// //         $sqlUpdate = "UPDATE `invoice` SET  invoice_status = 3, remarks_reject = '{$reject_remarks}' WHERE invoice_id = {$invId}";
// //         $resultsUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

// //         $sqlUpdate = "UPDATE `invoice_detail` SET  invoice_detail_status = 3, amount = 0, amount_converted = 0,  tamount = 0, tamount_converted = 0, notes = NULL WHERE invoice_id = {$invId}";
// //         $resultsUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
// // echo $sqlUpdate;
// //         if($resultsUpdate !== false) {
// //             $tempLog = '[UPDATE][RETURN-DETAIL]'. '['.$invId.']';
// //             $return_value = '|OK|.Retur has successfully';
// //         }else{
// //             $return_value = '|Fail|. Retur  FAIL!|| '.$sql;
// //         }

// //     }

// //     //LOG
// //     $log = "INSERT INTO log_invoice_detail(max_charge, min_charge, qty, price, total, entry_by, entry_date, log) VALUES ({$maxCharge}, {$minCharge}, {$qty}, {$priceMT}, {$tempAmount}, {$_SESSION['userId']}, 
// //     STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
// //     $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
// //     if($result_log !== false) {
// //        $log_id = $myDatabase->insert_id;
// //     }
   
// //     echo $return_value;
// // }

if(isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_pengajuan_payment'){
        
    $return_value = '';
    $idPP = $myDatabase->real_escape_string($_POST['idPP']);
        
    if($idPP != ''){
        $sql2 = "SELECT * FROM pengajuan_payment where idPP = {$idPP}";
        $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
        if($result2 !== false && $result2->num_rows == 1) {
            $row1 = $result2->fetch_object();
             //KONTRAK
             if($row1->payment_for == 0) { 
                $updateProperty = " ppayment_id "; 
            //CURAH
            }else if($row1->payment_for == 1) {
                $updateProperty = " ppayment_id ";
            }//FREIGHT
            else if($row1->payment_for == 2) {
                $updateProperty = " fc_ppayment_id ";
            } //HANDLING
            else if($row1->payment_for == 9) {
                $updateProperty = " hc_ppayment_id ";
            } //UNLOADING
            else if($row1->payment_for == 3) {
                $updateProperty = " uc_ppayment_id ";
            } 

        
            $updtTrans = "UPDATE `TRANSACTION` SET {$updateProperty} = NULL WHERE  {$updateProperty} IN ({$idPP})";
            $resultTrans = $myDatabase->query($updtTrans, MYSQLI_STORE_RESULT);

            $sqlLog = "UPDATE logbook set status1 = 2    where ppayment_id = {$idPP}";
            $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);

            //DELETE PENGAJUAN_PAYMENT_SUPP IF fREIGHT
            if($row1->payment_for == 2){
                $sqlSupplier = "DELETE FROM pengajuan_payment_supplier WHERE idPP = {$idPP}";
                $resultSupplier = $myDatabase->query($sqlSupplier, MYSQLI_STORE_RESULT);
            }
        }

    //DELETE PENGAJUAN PAYMENT
        $sql = "DELETE FROM `pengajuan_payment` WHERE idPP = {$idPP}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if($result !== false){
        $return_value = '|OK|Data Request has successfully deleted.|';

        //LOG HAPUS Pengajuan-OA
        $tempLog = '[DELETE][Pengajuan-OA]'. '['.$idPP.']';
        $log = "INSERT INTO log_pengajuan_payment(entry_by, entry_date, log) value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
        $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
        if($result_log !== false) {
            $log_id = $myDatabase->insert_id;
        }

        }else{$return_value = '|FAIL|Delete data Request failed.|';}
    }else{$return_value = '|FAIL|Record not found.|';}
   // echo $return_value;
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'SaldoAkun') {

    $return_value = '';
	
	$amount = $myDatabase->real_escape_string($_POST['amount']);
	$sa_id = $myDatabase->real_escape_string($_POST['sa_id']);
	
          $sql = "UPDATE saldo_awal SET amount = '{$amount}' WHERE sa_id = {$sa_id}";
			
		
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
               
                $return_value = '|OK|Data has successfully Updated.||';
				
				
            }else {
                $return_value = '|FAIL|Insert Data failed.||';
			}
			echo $return_value;
			/*
			$return_value=$POID;
			echo $return_value;
			*/
    // </editor-fold>
}
if (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_pengajuan_payment') {

    $return_value = '';
    $idPP = $myDatabase->real_escape_string($_POST['idPP']);

    if ($idPP != '') {
        $sql2 = "SELECT * FROM pengajuan_payment where idPP = {$idPP}";
        $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
        if ($result2 !== false && $result2->num_rows == 1) {
            $row1 = $result2->fetch_object();
            //KONTRAK
            if ($row1->payment_for == 0) {
                $updateProperty = " ppayment_id ";
                //CURAH
            } else if ($row1->payment_for == 1) {
                $updateProperty = " ppayment_id ";
            }//FREIGHT
            else if ($row1->payment_for == 2) {
                $updateProperty = " fc_ppayment_id ";
            } //HANDLING
            else if ($row1->payment_for == 9) {
                $updateProperty = " hc_ppayment_id ";
            } //UNLOADING
            else if ($row1->payment_for == 3) {
                $updateProperty = " uc_ppayment_id ";
            }


            $updtTrans = "UPDATE `TRANSACTION` SET {$updateProperty} = NULL WHERE  {$updateProperty} IN ({$idPP})";
            $resultTrans = $myDatabase->query($updtTrans, MYSQLI_STORE_RESULT);

            $sqlLog = "UPDATE logbook_new set status1 = 2    where ppayment_id = {$idPP}";
            $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);

            //DELETE PENGAJUAN_PAYMENT_SUPP IF fREIGHT
            if ($row1->payment_for == 2) {
                $sqlSupplier = "DELETE FROM pengajuan_payment_supplier WHERE idPP = {$idPP}";
                $resultSupplier = $myDatabase->query($sqlSupplier, MYSQLI_STORE_RESULT);
            }
        }

        //DELETE PENGAJUAN PAYMENT
        $sql = "DELETE FROM `pengajuan_payment` WHERE idPP = {$idPP}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Data Request has successfully deleted.|';

            //LOG HAPUS Pengajuan-OA
            $tempLog = '[DELETE][Pengajuan-OA]' . '[' . $idPP . ']';
            $log = "INSERT INTO log_pengajuan_payment(entry_by, entry_date, log) value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
            $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
            if ($result_log !== false) {
                $log_id = $myDatabase->insert_id;
            }

        } else {
            $return_value = '|FAIL|Delete data Request failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    // echo $return_value;
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'PO_data') {
    // <editor-fold defaultstate="collapsed" desc="invoice_data">
    
    $return_value = '';
    $addMessage = '';
    $boolNew = false;
    $boolContinue = true;
    $boolUpdate = false;
	$boolUpdateInvoice = false;
	$boolUpdateInvoiceDetail = false;
    $boolInsertVendor = false;
    $boolVendorExists = false;
    $boolRecalculate = false;
    $boolPriceUp = false;
    $boolPriceDown = false;
    $boolQuantityUp = false;
    $boolQuantityDown = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	$id = $myDatabase->real_escape_string($_POST['POId']);
    $POId = $myDatabase->real_escape_string($_POST['generatedPONo']);
	//$invoiceType = $myDatabase->real_escape_string($_POST['invoiceType']);
	//$accountId = $myDatabase->real_escape_string($_POST['accountId']);	
   	//$invoiceMethod = $myDatabase->real_escape_string($_POST['invoiceMethod']);
	//$invoiceDP = $myDatabase->real_escape_string($_POST['invoice_dp']);
   	//$generatedPONo = $myDatabase->real_escape_string($_POST['generatedInvoiceNo']);
	///$invoiceNo = $generatedInvoiceNo;
	//$invoiceNo2 = $myDatabase->real_escape_string($_POST['generatedInvoiceNo2']);
    $grandTotal = $myDatabase->real_escape_string($_POST['grandTotal']);
    $generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId']);
    //$stockpileContractId3 = $myDatabase->real_escape_string($_POST['stockpileContractId3']);
    //$shipmentId1 = $myDatabase->real_escape_string($_POST['shipmentId1']);
    //$invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
	//$inputDate = $myDatabase->real_escape_string($_POST['inputDate']);
	$tanggalpo = $myDatabase->real_escape_string($_POST['requestDate']);
	//$taxDate = $myDatabase->real_escape_string($_POST['taxDate']);
    //$invoiceTax = $myDatabase->real_escape_string($_POST['invoiceTax']);
	//$ppnID = $myDatabase->real_escape_string($_POST['ppnID']);
    //$ppn1 = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn1']));
	$nopenawaran = str_replace(",", "", $myDatabase->real_escape_string($_POST['inputnopenawaran']));
	//$ppn2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn2']));
	$remarks = $myDatabase->real_escape_string($_POST['remarks']);
	//$ppnConverted = $ppn;
	//$pphID = $myDatabase->real_escape_string($_POST['pphID']);
    //$pph1 = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph1']));
	//$pph2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph2']));
	//$dppPrice = $myDatabase->real_escape_string($_POST['dppPrice']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    //$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
	$totalppn = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalppn']));
	$totalpph = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalpph']));
	$totalall = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalall']));
    $toc =$myDatabase->real_escape_string($_POST['toc']);
	$signId =$myDatabase->real_escape_string($_POST['signId']);
    $POMethod =$myDatabase->real_escape_string($_POST['POMethod']);
    //$quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
	//$amount = $grandTotal;
	//$amountConverted = $grandTotal;
	//$amount_ori = $grandTotal;
	//$amount_ori_conv = $grandTotal;
	
    // </editor-fold>
	
	if($currencyId==1){
		$exchangeRate=0;
	
	}
	
	$sql2= "SELECT stockpile_id FROM USER WHERE USER_ID = {$_SESSION['userId']}";
	$resultsql2=  $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
	 if($resultsql2->num_rows == 1) {
            $rowsql2 = $resultsql2->fetch_object();
            $stockpileId =  $rowsql2->stockpile_id;
        }
    $sql3= "SELECT * FROM po_hdr WHERE no_po = '{$POId}'";
	$resultsql3=  $myDatabase->query($sql3, MYSQLI_STORE_RESULT);
	 if($resultsql3->num_rows == 0) {
            $sql="INSERT INTO `po_hdr`
					(`no_po`,`general_vendor_id`,`no_penawaran`,`tanggal`,`memo`,`entry_by`,`entry_date`,`currency_id`,`exchangerate`,`grandtotal`,`stockpile_id`,`toc`,`sign_id`,
					`totalppn`,`totalpph`,`totalall`,`po_method`)
				VALUES
					('{$POId}',{$generalVendorId},'{$nopenawaran}',STR_TO_DATE('{$tanggalpo}','%d/%m/%Y'),'{$remarks}',{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$currencyId},{$exchangeRate},{$grandTotal},{$stockpileId},'{$toc}',{$signId},{$totalppn},{$totalpph},{$totalall},{$POMethod});";
			
      
		
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result !== false) {
		   $id = $myDatabase->insert_id;
            $return_value = '|OK|PO has successfully inserted/updated.'. $addMessage .'|'. $id .'|'. $POId .'|';
			unset($_SESSION['PO']);
        } else {
            $return_value = '|FAIL|Insert/update PO failed.'. $addMessage .'||';
			}
		}
		else{
			$sql="update `po_hdr` set `general_vendor_id` = {$generalVendorId},`no_penawaran` = '{$nopenawaran}',`tanggal` = STR_TO_DATE('{$tanggalpo}','%d/%m/%Y') ,
			`memo` = '{$remarks}' ,`entry_by` = {$_SESSION['userId']} ,`entry_date` = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),`currency_id` = {$currencyId},
			`exchangerate` = '{$exchangeRate}',`grandtotal` = {$grandTotal},`stockpile_id` = {$stockpileId},`toc` = '{$toc}',`sign_id` = {$signId},
			`totalppn` = {$totalppn},`totalpph` = {$totalpph},`totalall` = {$totalall} where `no_po` = '{$POId}'";
					  
		
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result !== false) {
		   $id = $myDatabase->insert_id;
            $return_value = '|OK|PO has successfully inserted/updated.'. $addMessage .'|'. $id .'|';
			unset($_SESSION['PO']);
        } else {
            $return_value = '|FAIL|Insert/update PO failed.'. $addMessage .'||';
			echo $sql;
			}
			
		}
			

       echo $return_value;
    }
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'PO_detail') {
		//echo 'test';
    // <editor-fold defaultstate="collapsed" desc="transaction_customer_data">

    $return_value = '';
	//$boolShipment1 = false;
    //$grandTotal = 0;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	//$POMethod = 2;
	//echo '<br>';
    //$POType = $myDatabase->real_escape_string($_POST['POType']);
	//echo '<br>';
    //$accountId = $myDatabase->real_escape_string($_POST['accountId']);
	//echo '<br>';
	$generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId']);
	//echo '<br>';
    //$shipmentId1 = $myDatabase->real_escape_string($_POST['shipmentId1']);
    //$stockpileId2 = $myDatabase->real_escape_string($_POST['stockpileId2']);
	 $qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty']));
	//echo '<br>';
	 $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
	//echo '<br>';
	//$termin = str_replace(",", "", $myDatabase->real_escape_string($_POST['termin']));
	 $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
	//$currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
	//$exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
	//echo '<br>';
	 $ppnpo = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppnPO1']));
	//echo '<br>';
	 //$pphpo = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph1']));
	//echo '<br>';
	// $pphpoID = $myDatabase->real_escape_string($_POST['pphID']);
	//echo '<br>';
	 $ppnpoID = $myDatabase->real_escape_string($_POST['ppnPOID']);
	 $pphpoID = $myDatabase->real_escape_string($_POST['pphTaxId']);
	//$pphDP2 = $myDatabase->real_escape_string($_POST['pphDP2']);
	//$ppnDP2 = $myDatabase->real_escape_string($_POST['ppnDP2']);
	//$grandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal']));
	//$DP = $grandTotal;
	//$dp_total = str_replace(",", "", $myDatabase->real_escape_string($_POST['dp_total']));
	//$DP = $dp_total;
	//echo '<br>';
	//$keterangan = $myDatabase->real_escape_string($_POST['keterangan']);
	//$notes = $myDatabase->real_escape_string($_POST['notes']);
	//$invoiceMethodDetail = $myDatabase->real_escape_string($_POST['invoiceMethodDetail']);
	//echo '<br>';
	 $POID = $myDatabase->real_escape_string($_POST['generatedPONo']);
	 $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
	 //$pphstatus = $myDatabase->real_escape_string($_POST['pphstatus']);
	 $ppnpostatus = $myDatabase->real_escape_string($_POST['ppnpostatus']);
	 $itemId = $myDatabase->real_escape_string($_POST['itemId']);
	 $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
	 $requestDate = $myDatabase->real_escape_string($_POST['requestDate']);
     $POMethod = $myDatabase->real_escape_string($_POST['POMethod']);

	if($pphpoID == 0){
		$pphstatus = 0;
		$pphpo = 0;
	}else{
		$pphstatus = 1;
		$sqlTax = "SELECT tax_value FROM tax WHERE tax_id = {$pphpoID}";
		$resultTax=  $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
		if($resultTax->num_rows == 1) {
            $sqlTax = $resultTax->fetch_object();
            $tax_value =  $sqlTax->tax_value;
			
			$pphpo = ($tax_value/100) * $amount;
        }
	}
	
	

   $date = explode('/', $requestDate);
   $month = (int)$date[1];
    $day   = $date[0];
    $year  = $date[2];

	 if ($shipmentId==''){
		 $shipmentId=0;
	 }
	//$slipNos = "";
	//$slipNos2 = "";
    // </editor-fold>
   //echo

   $sql = "SELECT * FROM `po_hdr` ph
          left join po_detail pd on ph.no_po = pd.no_po
		  left join general_vendor gv on gv.general_vendor_id = ph.general_vendor_id
          WHERE ph.general_vendor_id = {$generalVendorId} and year(ph.tanggal)=$year and month(ph.tanggal)=$month and pd.stockpile_id=$stockpileId and gv.monthly_pay=1 AND ph.status = 0 AND ph.no_po != {$POID}";
  echo $sql;
   $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

   if($result->num_rows == 0) {
           $sql =
       "INSERT INTO `po_detail`
       (`no_po`,`qty`,`harga`,`amount`,`ppn`,`pph`,`ppn_id`,`pph_id`,`entry_by`,`entry_date`,`pphstatus`,`stockpile_id`,`item_id`,`shipment_id`, `ppnstatus`, `po_method_detail`)
       VALUES
       ('{$POID}',{$qty},{$price},{$amount},{$ppnpo},{$pphpo},
       {$ppnpoID},{$pphpoID},{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$pphstatus},{$stockpileId},{$itemId},{$shipmentId},{$ppnpostatus},{$POMethod});";


             $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

             if($result !== false) {

                 $return_value = '|OK|Data has successfully inserted.||';


             }else {
                 $return_value = '|FAIL|Insert Data failed.||';
       }
   }else {
       $return_value = '|FAIL|Same PO for vendor already created.||';
     }


			//$return_value=$sql;
			echo $return_value;

    // </editor-fold>
}
//-------------------------------------------------------------------------------------------------------------------------------------------
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'PO_reject') {
	//echo 'test';
    // <editor-fold defaultstate="collapsed" desc="transaction_customer_data">
    
    $return_value = '';
	//$boolShipment1 = false;
    //$grandTotal = 0;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	//$POMethod = 2;
	//echo '<br>';
    //$POType = $myDatabase->real_escape_string($_POST['POType']);
	//echo '<br>';
    //$accountId = $myDatabase->real_escape_string($_POST['accountId']);
	//echo '<br>';
	//echo $generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId']);
	//echo '<br>';
    //$shipmentId1 = $myDatabase->real_escape_string($_POST['shipmentId1']);
    //$stockpileId2 = $myDatabase->real_escape_string($_POST['stockpileId2']);
	//$qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty']));
	//echo '<br>';
	//$price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
	//echo '<br>';
	//$termin = str_replace(",", "", $myDatabase->real_escape_string($_POST['termin']));
	//$amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
	//$currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
	//$exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
	//echo '<br>';
	//$ppnpo = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppnPO1']));
	//echo '<br>';
	//$pphpo = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph1']));
	//echo '<br>';
	//$pphpoID = $myDatabase->real_escape_string($_POST['pphID']);
	//echo '<br>';
	//$ppnpoID = $myDatabase->real_escape_string($_POST['ppnPOID']);
	//$pphDP2 = $myDatabase->real_escape_string($_POST['pphDP2']);
	//$ppnDP2 = $myDatabase->real_escape_string($_POST['ppnDP2']);
	//$grandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal']));
	//$DP = $grandTotal;
	//$dp_total = str_replace(",", "", $myDatabase->real_escape_string($_POST['dp_total']));
	//$DP = $dp_total;
	//echo '<br>';
	//$keterangan = $myDatabase->real_escape_string($_POST['keterangan']);
	//$notes = $myDatabase->real_escape_string($_POST['notes']);
	//$invoiceMethodDetail = $myDatabase->real_escape_string($_POST['invoiceMethodDetail']);
	//echo '<br>';
	$POID = $myDatabase->real_escape_string($_POST['poId']);
	//$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
	//$pphstatus = $myDatabase->real_escape_string($_POST['pphstatus']);
	//$itemId = $myDatabase->real_escape_string($_POST['itemId']);
	//$slipNos = "";
	//$slipNos2 = "";
    // </editor-fold>
   //echo 
	
          $sql = 
			"update `po_hdr` set status = 3 where idpo_hdr={$POID};";
			
		
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
               
                $return_value = '|OK|Data has successfully inserted.||';
				
				
            }else {
                $return_value = '|FAIL|Insert Data failed.||';
			}
			echo $return_value;
			/*
			$return_value=$POID;
			echo $return_value;
			*/
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'PO_cancel') {
	//echo 'test';
    // <editor-fold defaultstate="collapsed" desc="transaction_customer_data">
    
    $return_value = '';
	//$boolShipment1 = false;
    //$grandTotal = 0;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	//$POMethod = 2;
	//echo '<br>';
    //$POType = $myDatabase->real_escape_string($_POST['POType']);
	//echo '<br>';
    //$accountId = $myDatabase->real_escape_string($_POST['accountId']);
	//echo '<br>';
	//echo $generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId']);
	//echo '<br>';
    //$shipmentId1 = $myDatabase->real_escape_string($_POST['shipmentId1']);
    //$stockpileId2 = $myDatabase->real_escape_string($_POST['stockpileId2']);
	//$qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty']));
	//echo '<br>';
	//$price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
	//echo '<br>';
	//$termin = str_replace(",", "", $myDatabase->real_escape_string($_POST['termin']));
	//$amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
	//$currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
	//$exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
	//echo '<br>';
	//$ppnpo = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppnPO1']));
	//echo '<br>';
	//$pphpo = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph1']));
	//echo '<br>';
	//$pphpoID = $myDatabase->real_escape_string($_POST['pphID']);
	//echo '<br>';
	//$ppnpoID = $myDatabase->real_escape_string($_POST['ppnPOID']);
	//$pphDP2 = $myDatabase->real_escape_string($_POST['pphDP2']);
	//$ppnDP2 = $myDatabase->real_escape_string($_POST['ppnDP2']);
	//$grandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal']));
	//$DP = $grandTotal;
	//$dp_total = str_replace(",", "", $myDatabase->real_escape_string($_POST['dp_total']));
	//$DP = $dp_total;
	//echo '<br>';
	//$keterangan = $myDatabase->real_escape_string($_POST['keterangan']);
	//$notes = $myDatabase->real_escape_string($_POST['notes']);
	//$invoiceMethodDetail = $myDatabase->real_escape_string($_POST['invoiceMethodDetail']);
	//echo '<br>';
	$POID = $myDatabase->real_escape_string($_POST['poId']);
	//$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
	//$pphstatus = $myDatabase->real_escape_string($_POST['pphstatus']);
	//$itemId = $myDatabase->real_escape_string($_POST['itemId']);
	//$slipNos = "";
	//$slipNos2 = "";
    // </editor-fold>
   //echo 
	
          $sql = 
			"update `po_hdr` set status = 4 where idpo_hdr={$POID};";
			
		
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
               
                $return_value = '|OK|Data has successfully inserted.||';
				
				
            }else {
                $return_value = '|FAIL|Insert Data failed.||';
			}
			echo $return_value;
			/*
			$return_value=$POID;
			echo $return_value;
			*/
    // </editor-fold>
}


elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_po_detail') {
    // <editor-fold defaultstate="collapsed" desc="delete_user">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $poDetailId = $myDatabase->real_escape_string($_POST['poDetailId']);
    // </editor-fold>
    
    if($poDetailId != '') {
		
        $sql = "DELETE FROM `po_detail` WHERE idpo_detail = {$poDetailId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|Detail has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete detail failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_item') {
    // <editor-fold defaultstate="collapsed" desc="delete_vehicle">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $itemId = $myDatabase->real_escape_string($_POST['itemId']);
    // </editor-fold>
    
    if($itemId != '') {
        $sql = "SELECT * FROM `po_detail` WHERE item_id = {$itemId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `master_item` WHERE idmaster_item = {$itemId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Item has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete item failed.|';
            }
        } else {
            $return_value = '|FAIL|Item in use in PO.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_groupitem') {
    // <editor-fold defaultstate="collapsed" desc="delete_vehicle">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $groupitemId = $myDatabase->real_escape_string($_POST['groupitemId']);
    // </editor-fold>
    
    if($groupitemId != '') {
        $sql = "SELECT * FROM `master_item` WHERE group_itemid = {$groupitemId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `master_groupitem` WHERE idmaster_groupitem = {$groupitemId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Item has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete item failed.|';
            }
        } else {
            $return_value = '|FAIL|Item in use in item.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_sign') {
    // <editor-fold defaultstate="collapsed" desc="delete_vehicle">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $signId = $myDatabase->real_escape_string($_POST['signId']);
    // </editor-fold>
    
    if($signId != '') {
        $sql = "SELECT * FROM `po_hdr` WHERE sign_id = {$signId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `master_sign` WHERE idmaster_sign = {$signId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Sign has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete sign failed.|';
            }
        } else {
            $return_value = '|FAIL|Sign in use in PO.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'reject_contract') {
    // <editor-fold defaultstate="collapsed" desc="delete_vehicle">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $purchasingId = $myDatabase->real_escape_string($_POST['modalPurchasingId']);
    $rejectNote = $myDatabase->real_escape_string($_POST['rejectNote']);
    // </editor-fold>

    if($purchasingId != '') {
        $sql = "CALL `reject_contract` ({$purchasingId},'$rejectNote')";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);



            if($result !== false) {
                $return_value = '|OK|Data has successfully Rejected.|';
            } else {
                $return_value = '|FAIL|Rejected data failed.|';
            }

    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
}


elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'approve_contract') {
    // <editor-fold defaultstate="collapsed" desc="delete_vehicle">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $purchasingId = $myDatabase->real_escape_string($_POST['modalPurchasingId']);

    $contractNo = $myDatabase->real_escape_string($_POST['contractNo']);
    // </editor-fold>

    if($purchasingId != '') {
        $sql = "update po_pks set final_status=1, contract_no='$contractNo' where purchasing_id = {$purchasingId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "update contract c
                left join po_contract pc on pc.contract_id=c.contract_id
                left join po_pks pp on pp.po_pks_id=pc.po_pks_id
                set c.contract_no='$contractNo' where pp.purchasing_id = {$purchasingId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


            if($result !== false) {
                $return_value = '|OK|Data has successfully Approved.|';
            } else {
                $return_value = '|FAIL|Approve data failed.|';
            }

    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_uom') {
    // <editor-fold defaultstate="collapsed" desc="delete_vehicle">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $uomId = $myDatabase->real_escape_string($_POST['uomId']);
    // </editor-fold>
    
    if($uomId != '') {
        $sql = "SELECT * FROM `master_item` WHERE uom_id = {$uomId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `uom` WHERE idUOM = {$uomId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|UOM has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete UOM failed.|';
            }
        } else {
            $return_value = '|FAIL|UOM in use in Master Item.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}


elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'item_data') {
    // <editor-fold defaultstate="collapsed" desc="vehicle_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $itemId = $myDatabase->real_escape_string($_POST['itemId']);
    $itemName = $myDatabase->real_escape_string($_POST['itemName']);
	$itemCode = $myDatabase->real_escape_string($_POST['itemCode']);
	$groupitemId = $myDatabase->real_escape_string($_POST['groupitemId']);
	$uom = $myDatabase->real_escape_string($_POST['uomId']);
	
    // </editor-fold>
    
    if ($itemId == '') {
        $boolNew = true;
    }
    
    if($itemName != '' && $itemCode != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `master_item` WHERE item_code = '{$itemCode}'";
        } else {
            $sql = "SELECT * FROM `master_item` WHERE item_code = '{$itemCode}' AND idmaster_item <> {$itemId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `master_item` (item_name, item_code, uom_id, group_itemid, entry_by, entry_date) VALUES ("
                        . "'{$itemName}','{$itemCode}','{$uom}',{$groupitemId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `master_item` SET "
                        . "item_name = '{$itemName}', "
						. "uom_id = '{$uom}', "
						. "group_itemid = '{$groupitemId}'"
                        . "WHERE idmaster_item = {$itemId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $itemId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Item has successfully inserted/updated.|'. $itemId .'|';
            } else {
                $return_value = '|FAIL|Insert/update Item failed.||';
            }
        } else {
            $return_value = '|FAIL|Item code already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'sign_data') {
    // <editor-fold defaultstate="collapsed" desc="vehicle_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $signId = $myDatabase->real_escape_string($_POST['signId']);
    $signName = $myDatabase->real_escape_string($_POST['signName']);
	$signJabatan = $myDatabase->real_escape_string($_POST['signJabatan']);
    // </editor-fold>
    
    if ($signId == '') {
        $boolNew = true;
    }
    
    if($signName != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `master_sign` WHERE name = '{$signName}'";
        } else {
            $sql = "SELECT * FROM `master_sign` WHERE name = '{$signName}' AND idmaster_sign <> {$signId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `master_sign` (`name`, `jabatan` , entry_by, entry_date) VALUES ("
                        . "'{$signName}','{$signJabatan}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `master_sign` SET "
                        . "name = '{$signName}', jabatan = '{$signJabatan}' "
                        . "WHERE idmaster_sign = {$signId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $signId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Sign has successfully inserted/updated.|'. $signId .'|';
            } else {
                $return_value = '|FAIL|Insert/update sign failed.||';
            }
        } else {
            $return_value = '|FAIL|Sign already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'uom_data') {
    // <editor-fold defaultstate="collapsed" desc="vehicle_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $uomId = $myDatabase->real_escape_string($_POST['uomId']);
    $uomName = $myDatabase->real_escape_string($_POST['uomName']);
    // </editor-fold>
    
    if ($uomId == '') {
        $boolNew = true;
    }
    
    if($uomName != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `uom` WHERE uom_type = '{$uomName}'";
        } else {
            $sql = "SELECT * FROM `uom` WHERE uom_type = '{$uomName}' AND iduom <> {$uomId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `uom` (`uom_type`, `entry_by`, `entry_date`) VALUES ("
                        . "'{$uomName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `uom` SET "
                        . "uom_type = '{$uomName}' "
                        . "WHERE iduom = {$uomId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $uomId = $myDatabase->insert_id;
                }

                $return_value = '|OK|UOM has successfully inserted/updated.|'. $uomId .'|';
            } else {
                $return_value = '|FAIL|Insert/update UOM failed.||';
            }
        } else {
            $return_value = '|FAIL|UOM already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}


elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'groupitem_data') {
    // <editor-fold defaultstate="collapsed" desc="vehicle_data">
    
    $return_value = '';
    $boolNew = false;
	
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $groupId = $myDatabase->real_escape_string($_POST['groupitemId']);
    $groupName = $myDatabase->real_escape_string($_POST['groupName']);
	$accountId = $myDatabase->real_escape_string($_POST['accountId']);
	//echo $groupId.$groupName.$accountId;
    // </editor-fold>
    
    if ($groupId == '') {
        $boolNew = true;
    }
    
    if($groupName != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `master_groupitem` WHERE UPPER(group_name) = UPPER('{$groupName}')";
        } else {
            $sql = "SELECT * FROM `master_groupitem` WHERE UPPER(group_name) = UPPER('{$groupName}') AND idmaster_groupitem <> {$groupId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `master_groupitem` (group_name, account_id , entry_by, entry_date) VALUES ("
                        . "'{$groupName}',{$accountId} , {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `master_groupitem` SET "
                        . "group_name = '{$groupName}' , account_id = {$accountId} "
                        . "WHERE idmaster_groupitem = {$groupId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $groupId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Group has successfully inserted/updated.|'. $groupId .'|';
            } else {
                $return_value = '|FAIL|Insert/update failed.|'. $sql .'|';
            }
        } else {
            $return_value = '|FAIL|Group already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
	
	
}



elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'stockpile_handling_data') {
    // <editor-fold defaultstate="collapsed" desc="stockpile_freight_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $handlingCostId = $myDatabase->real_escape_string($_POST['handlingCostId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $vendorHandlingId = $myDatabase->real_escape_string($_POST['vendorHandlingId']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $paymentNotes = $myDatabase->real_escape_string($_POST['paymentNotes']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    // </editor-fold>
    
    if ($handlingCostId == '') {
        $boolNew = true;
    }
    
    if($vendorHandlingId != '' && $currencyId != '' && $price != '' && $vendorId != '') {
//        if($boolNew) {
//            $sql = "SELECT * FROM `freight_cost` WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId}";
//        } else {
//            $sql = "SELECT * FROM `freight_cost` WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId} AND freight_cost_id <> {$freightCostId}";
//        }
//        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//        if($result !== false && $result->num_rows == 0) {
        
        if($exchangeRate == '') {
            $exchangeRate = 1;
        }
        
        $priceConverted = $price * $exchangeRate;
        
            if($boolNew) {
                $sql = "INSERT INTO `vendor_handling_cost` (vendor_handling_id, stockpile_id, vendor_id, currency_id, exchange_rate, price, "
                        . "price_converted, payment_notes, remarks, company_id, entry_by, entry_date) VALUES ("
                        . "{$vendorHandlingId}, {$stockpileId}, {$vendorId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, "
                        . "'{$paymentNotes}', '{$remarks}', {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `vendor_handling_cost` SET "
                        . "vendor_handling_id = {$vendorHandlingId}, "
                        . "currency_id = {$currencyId}, "
                        . "exchange_rate = {$exchangeRate}, "
                        . "vendor_id = {$vendorId}, "
                        . "price = {$price}, "
                        . "price_converted = {$priceConverted}, "
                        . "payment_notes = '{$paymentNotes}', "
                        . "remarks = '{$remarks}', "
                        . "modify_by = {$_SESSION['userId']}, "
                        . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE handling_cost_id = {$handlingCostId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Handling cost has successfully inserted/updated.|';
            } else {
                $return_value = '|FAIL|Insert/update Handling cost failed.|';
				echo $sql;
            }
//        } else {
//            $return_value = '|FAIL|Freight cost already exists.|';
//        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_stockpile_handling') {
    // <editor-fold defaultstate="collapsed" desc="delete_stockpile_freight">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $handlingCostId = $myDatabase->real_escape_string($_POST['handlingCostId']);
    // </editor-fold>
    
    if($handlingCostId != '') {
        $sql = "SELECT * FROM `transaction` WHERE handling_cost_id = {$handlingCostId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `vendor_handling_cost` WHERE handling_cost_id = {$handlingCostId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Handling cost has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete handling cost failed.|';
            }
        } else {
            $return_value = '|FAIL|Handling cost in use in condition.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_vendor_handling') {
    // <editor-fold defaultstate="collapsed" desc="delete_freight">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorHandlingId = $myDatabase->real_escape_string($_POST['vendorHandlingId']);
    // </editor-fold>
    
    if($vendorHandlingId != '') {
        $sql = "SELECT * FROM `vendor_handling_cost` WHERE vendor_handling_id = {$vendorHandlingId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `vendor_handling` WHERE vendor_handling_id = {$vendorHandlingId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			
			$sql = "DELETE FROM `vendor_handling_bank` WHERE vendor_handling_id = {$vendorHandlingId}";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        

        if($result !== false) {
            $return_value = '|OK|User has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    

            if($result !== false) {
                $return_value = '|OK|Vendor Handling has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete Vendor Handling failed.|';
            }
        } else {
            $return_value = '|FAIL|Vendor Handling in use in stockpile handling cost.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'vendor_handling_data') {
    // <editor-fold defaultstate="collapsed" desc="freight_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorHandlingId = $myDatabase->real_escape_string($_POST['vendorHandlingId']);
    $vendorHandlingCode = $myDatabase->real_escape_string($_POST['vendorHandlingCode']);
    $vendorHandlingName = $myDatabase->real_escape_string($_POST['vendorHandlingName']);
    $vendorHandlingAddress = $myDatabase->real_escape_string($_POST['vendorHandlingAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
	$npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $bankName = '-';
	$branch = '-';
    $accountNo = '-';
    $beneficiary = '-';
    $swiftCode = '-';
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
	$active = $myDatabase->real_escape_string($_POST['active']);
	$nik = $myDatabase->real_escape_string($_POST['nik']);
	$vendorHandlingRule = $myDatabase->real_escape_string($_POST['vendorHandlingRule']);
    // </editor-fold>
    
    if ($vendorHandlingId == '') {
        $boolNew = true;
    }
    
    if($vendorHandlingCode != '' && $vendorHandlingName != '' && $vendorHandlingAddress != '' && $npwp != '' && $npwp_name != '' && $ppn != '' && $pph != '' && $active != '' && $vendorHandlingRule != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `vendor_handling` WHERE UPPER(vendor_handling_name) = UPPER('{$vendorHandlingName}') AND UPPER(vendor_handling_code) = UPPER('{$vendorHandlingCode}')";
        } else {
            $sql = "SELECT * FROM `vendor_handling` WHERE UPPER(vendor_handling_name) = UPPER('{$vendorHandlingName}') AND UPPER(vendor_handling_code) = UPPER('{$vendorHandlingCode}') AND vendor_handling_id <> {$vendorHandlingId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;
            
            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }
            
            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }
            
            if($boolNew) {
                $sql = "INSERT INTO `vendor_handling` (vendor_handling_code, vendor_handling_name, vendor_handling_address, nik, npwp, npwp_name, bank_name, branch, account_no, beneficiary, "
                        . "swift_code, ppn_tax_id, pph_tax_id, ppn, pph, active, vendor_handling_rule, entry_by, entry_date) VALUES ("
                        . "UPPER('{$vendorHandlingCode}'), '{$vendorHandlingName}', '{$vendorHandlingAddress}', '{$nik}','{$npwp}', '{$npwp_name}', '{$bankName}', '{$branch}', '{$accountNo}', "
                        . "'{$beneficiary}', '{$swiftCode}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$active}, {$vendorHandlingRule}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `vendor_handling` SET "
                        . "vendor_handling_code = UPPER('{$vendorHandlingCode}'), "
                        . "vendor_handling_name = '{$vendorHandlingName}', "
                        . "vendor_handling_address = '{$vendorHandlingAddress}', "
                        . "nik = '{$nik}', "
						. "npwp = '{$npwp}', "
						. "npwp_name = '{$npwp_name}', "
                        . "bank_name = '{$bankName}', "
						. "branch = '{$branch}', "
                        . "account_no = '{$accountNo}', "
                        . "beneficiary = '{$beneficiary}', "
                        . "swift_code = '{$swiftCode}', "
                        . "ppn_tax_id = {$ppn}, "
                        . "pph_tax_id = {$pph}, "
                        . "ppn = {$ppnValue}, "
                        . "pph = {$pphValue}, "
						. "active = {$active}, "
						. "vendor_handling_rule = {$vendorHandlingRule} "
                        . "WHERE vendor_handling_id = {$vendorHandlingId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $vendorHandlingId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Vendor Handling has successfully inserted/updated.|'. $vendorHandlingId .'|';
            } else {
                $return_value = '|FAIL|Insert/update Vendor Handling failed.||';
            }
        } else {
            $return_value = '|FAIL|Vendor Handling already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'dailyPks_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_customer_data">
    
    $return_value = '';
	//$boolShipment1 = false;
   
   	$sales_id = $myDatabase->real_escape_string($_POST['sales_id']);
	$stockpile_id = $myDatabase->real_escape_string($_POST['stockpile_id']);
    $screenedStock = str_replace(",", "", $myDatabase->real_escape_string($_POST['screenedStock']));
	$sprayedStock = str_replace(",", "", $myDatabase->real_escape_string($_POST['sprayedStock']));
    $unscreenedStock = str_replace(",", "", $myDatabase->real_escape_string($_POST['unscreenedStock']));
	$less_shipment = str_replace(",", "", $myDatabase->real_escape_string($_POST['less_shipment']));
	$less_local = str_replace(",", "", $myDatabase->real_escape_string($_POST['less_local']));
	$less_susut = str_replace(",", "", $myDatabase->real_escape_string($_POST['less_susut']));
	$notes = $myDatabase->real_escape_string($_POST['notes']);
	
	if($screenedStock == ''){
		$screenedStock = 0;
	}
	if($sprayedStock == ''){
		$sprayedStock = 0;
	}
	if($unscreenedStock == ''){
		$unscreenedStock = 0;
	}
	if($less_shipment == ''){
		$less_shipment = 0;
	}
	if($less_local == ''){
		$less_local = 0;
	}
	if($less_susut == ''){
		$less_susut = 0;
	}
	
    if($sales_id != '') {
		
	
				
            $sql = "INSERT INTO `sales_add` (sales_id, stockpile_id, screened_stock, sprayed_stock, unscreened_stock, less_shipment, less_local, less_susut, notes, entry_by, entry_date) VALUES ({$sales_id},  {$stockpile_id}, {$screenedStock}, {$sprayedStock}, {$unscreenedStock}, {$less_shipment}, {$less_local}, {$less_susut}, '{$notes}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $jurnalId = $myDatabase->insert_id;
                
                $return_value = '|OK|Data has successfully inserted.||';
				
				
				
            } else {
                $return_value = '|FAIL|Insert Data failed.||';
	
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    } 
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_dailyPks') {
    // <editor-fold defaultstate="collapsed" desc="delete_user">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $sales_add_id = $myDatabase->real_escape_string($_POST['sales_add_id']);
    // </editor-fold>
    
    if($sales_add_id != '') {
		
		
        $sql = "DELETE FROM `sales_add` WHERE sales_add_id = {$sales_add_id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|User has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_payment_detail') {
    // <editor-fold defaultstate="collapsed" desc="delete_user">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $payment_cash_id = $myDatabase->real_escape_string($_POST['payment_cash_id']);
    // </editor-fold>
    
    if($payment_cash_id != '') {
		
		$sql = "SELECT GROUP_CONCAT(payment_cash_dp) AS pc_dp FROM payment_cash_dp WHERE payment_cash_id = {$payment_cash_id}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($result !== false && $result->num_rows == 1) {
                $row = $result->fetch_object();
                $pcDp = $row->pc_dp;
            }
		
		$sql = "UPDATE payment_cash SET payment_cash_dp = NULL, payment_cash_status = 0 WHERE payment_cash_id = {$pcDp}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
        $sql = "DELETE FROM `payment_cash` WHERE payment_cash_id = {$payment_cash_id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|Data has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete data failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_payment_cash') {
    // <editor-fold defaultstate="collapsed" desc="delete_user">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentId = $myDatabase->real_escape_string($_POST['paymentId']);
    // </editor-fold>
    
    if($paymentId != '') {
		
        $sql = "DELETE FROM `payment` WHERE payment_id = {$paymentId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|Data has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete data failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'payment_cash') {
    // <editor-fold defaultstate="collapsed" desc="transaction_customer_data">
    
    $return_value = '';
	$boolShipment1 = false;
    //$grandTotal = 0;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	$pcMethod = $myDatabase->real_escape_string($_POST['pcMethod']);
    $paymentCashType = $myDatabase->real_escape_string($_POST['paymentCashType']);
    $accountId11 = $myDatabase->real_escape_string($_POST['accountId11']);
	$generalVendorId11 = $myDatabase->real_escape_string($_POST['generalVendorId11']);
    $shipmentId11 = $myDatabase->real_escape_string($_POST['shipmentId11']);
	$transaction_id = $myDatabase->real_escape_string($_POST['transaction_id']);
    $stockpileId11 = $myDatabase->real_escape_string($_POST['stockpileId11']);
	$qty11 = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty11']));
	$price11 = str_replace(",", "", $myDatabase->real_escape_string($_POST['price11']));
	$termin11 = str_replace(",", "", $myDatabase->real_escape_string($_POST['termin11']));
	$amount11 = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount11']));
	$currencyId11 = $myDatabase->real_escape_string($_POST['currencyId11']);
	$exchangeRate11 = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate11']));
	$ppn11 = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn11']));
	//$pph11 = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph11']));
	$pph12 = $myDatabase->real_escape_string($_POST['pph12']);
	$ppn12 = $myDatabase->real_escape_string($_POST['ppn12']);
	$pphID11 = $myDatabase->real_escape_string($_POST['pphTaxId']);
	$ppnID11 = $myDatabase->real_escape_string($_POST['ppnID11']);
	$grandTotal11 = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal11']));
	$DP = $grandTotal11;
	$notes11 = $myDatabase->real_escape_string($_POST['notes11']);
	$paymentCashMethod = $myDatabase->real_escape_string($_POST['payment_cash_method']);
	$uom = $myDatabase->real_escape_string($_POST['uom']);
	$slipNos = "";
	$slipNos2 = "";
    // </editor-fold>
     if($shipmentId11 == ''){
		$shipmentId11 = 'NULL';
	}else{
		$sqlSales = "SELECT sales_id FROM sales WHERE shipment_id = {$shipmentId1}";
			$resultSales = $myDatabase->query($sqlSales, MYSQLI_STORE_RESULT);
			if($resultSales !== false && $resultSales->num_rows > 0) {
       			 $rowSales = $resultSales->fetch_object();
       				$salesId = $rowSales->sales_id;
					
					$sqlStatus = "UPDATE sales SET " 
        				. "used_status = 1 "
                        . " WHERE sales_id = {$salesId}";
					$resultStatus = $myDatabase->query($sqlStatus, MYSQLI_STORE_RESULT);
			}
		
	}
	
	if($stockpileId11 == ''){
		$stockpileId11 = 'NULL';
	}
	
	if($transaction_id == ''){
		$transaction_id = 'NULL';
	}
	
	if($exchangeRate11 == ''){
		$exchangeRate11 = 1;
	}
	
	if($pph12 != 0 ){
		$sqlPPH = "SELECT tax_value FROM tax WHERE tax_id = {$pphID11}";
			$resultPPH = $myDatabase->query($sqlPPH, MYSQLI_STORE_RESULT);
			if($resultPPH !== false && $resultPPH->num_rows > 0) {
       			 $rowPPH = $resultPPH->fetch_object();
       				$pph1 = $rowPPH->tax_value;
					$dp_pph = $DP * ($pph1/100);
			}
		}else{
			$dp_pph = 0;
		}
		if($ppn12 != 0 ){
		$sqlPPN = "SELECT tax_value FROM tax WHERE tax_id = {$ppnID11}";
			$resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
			if($resultPPN !== false && $resultPPN->num_rows > 0) {
       			 $rowPPN = $resultPPN->fetch_object();
       				$ppn1 = $rowPPN->tax_value;
					$dp_ppn = $DP * ($ppn1/100);
			}
		}else{
			$dp_ppn = 0;
		}

			$dp_total = ($DP + $dp_ppn) - $dp_pph;
			
			
		$pph11 = 0;	
		if($pphID11 != 0){
			$sqlP = "SELECT tax_value FROM tax WHERE tax_id = {$pphID11}";
			$resultP = $myDatabase->query($sqlP, MYSQLI_STORE_RESULT);
			if($resultP !== false && $resultP->num_rows > 0) {
       			 $rowP= $resultP->fetch_object();
       				$pphTax = $rowP->tax_value;
					
					$pph11 = $amount11 * ($pphTax/100);
			}
		}
		
		if($pcMethod == 1){
				$amount12 = $amount11 * -1;
				$ppn12 = $ppn11 * -1;
				$pph12 = $pph11 * -1;
			}else{
				$amount12 = $amount11;
				$ppn12 = $ppn11;
				$pph12 = $pph11;
			}
			
		$sqlShipment = "SELECT account_no FROM account WHERE account_id = {$accountId11}";
			$resultShipment = $myDatabase->query($sqlShipment, MYSQLI_STORE_RESULT);
			if($resultShipment !== false && $resultShipment->num_rows > 0) {
       			 $rowShipment = $resultShipment->fetch_object();
       				$acc = $rowShipment->account_no;
					$sub_acc = substr($acc,0,2);
			}
				
			if($sub_acc == 51 && $shipmentId11 == 'NULL'){
						$boolShipment1 = false;
						//echo $sub_acc;
			 } else{
				 		$boolShipment1 = true;
						//echo 'SALAH';
			 }
	
	
    if($paymentCashType != '' && $accountId11 != '' && $qty11 != '' && $price11 != '' && $termin11 != '' && $amount11 != '' && $currencyId11 != '' && $boolShipment1) {
			$t_amount = $amount12 + $ppn12 - $pph12; 
            $tamount = $t_amount - $DP ;
			$amountConverted = $exchangeRate11 * $amount12;
			$ppnConverted = $exchangeRate11 * $ppn12;
			$pphConverted = $exchangeRate11 * $pph12;
			$tamountConverted = $exchangeRate11 * $tamount;
			
			if($paymentCashMethod == 2){
			$dpAmount = $tamountConverted;
			}else{
			$dpAmount = 0;
			}
			
			if (isset($_POST['checkedSlips'])) {
                    $checks = $_POST['checkedSlips'];
                    for ($i = 0; $i < sizeof($checks); $i++) {
                        if($slipNos == '') {
                            $slipNos .= $checks[$i];
                        } else {
                            $slipNos .= ','. $checks[$i];
                        }
                    }
                }
				
			
				
            $sql = "INSERT INTO `payment_cash` (type, account_id, general_vendor_id, transaction_id, shipment_id, stockpile_remark, qty, price, termin, amount, amount_converted, currency_id, exchange_rate, ppnID, ppn, ppn_converted, pphID, pph, pph_converted, tamount, tamount_converted, notes, entry_by, entry_date, idUOM) VALUES ("
                    . " {$paymentCashType}, {$accountId11}, {$generalVendorId11}, {$transaction_id}, {$shipmentId11}, {$stockpileId11}, '{$qty11}', '{$price11}', '{$termin11}', '{$amount12}', '{$amountConverted}', {$currencyId11}, '{$exchangeRate11}', {$ppnID11} ,'{$ppn12}', '{$ppnConverted}', {$pphID11}, '{$pph12}', '{$pphConverted}', '{$tamount}', '{$tamountConverted}', '{$notes11}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$uom})";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $paymentCashId = $myDatabase->insert_id;
                
                $return_value = '|OK|Data has successfully inserted.||';
				
				/*$sql = "UPDATE `payment_cash` SET payment_cash_dp = {$paymentCashId} WHERE payment_cash_id IN ($slipNos)";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/
					
				//$sql = "UPDATE `payment_cash` SET payment_cash_status = 1 WHERE payment_cash_id IN ($slipNos)";
                    //$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
				if(isset($_POST['checkedSlips2'])){
					 $checks2 = $_POST['checkedSlips2'];
					if (isset($_POST['checkedSlips'])) {
						$checks = $_POST['checkedSlips'];
					}else{
						$checks = '';
					}
				
				for ($i = 0; $i < sizeof($checks2); $i++) {
						if($checks[$i] != ''){
							if($slipNos2 == '') {
                            $slipNos2 .= '('. $paymentCashId .','. $checks[$i] .','. $checks2[$i] .')';
                        } else {
                            $slipNos2 .= ','. '('. $paymentCashId .','. $checks[$i] .','. $checks2[$i] .')';
                        }
						}
					}
				}
			echo $slipNos2;
			$sql = "INSERT INTO payment_cash_dp (payment_cash_id, payment_cash_dp, amount_payment) VALUES {$slipNos2}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
					if($result === false) {
						echo 'salah';
					}
			
            
				
			//insertGeneralLedger($myDatabase, 'INVOICE DETAIL', $invoiceId);
				
            } else {
                $return_value = '|FAIL|Insert Data failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    } 
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_user') {
    // <editor-fold defaultstate="collapsed" desc="delete_user">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $userId = $myDatabase->real_escape_string($_POST['userId']);
    // </editor-fold>
    
    if($userId != '') {
        $sql = "DELETE FROM `user_module` WHERE user_id = {$userId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        $sql = "DELETE FROM `user_stockpile` WHERE user_id = {$userId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        $sql = "DELETE FROM `user` WHERE user_id = {$userId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|User has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'user_data') {
    // <editor-fold defaultstate="collapsed" desc="user_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $userId = $myDatabase->real_escape_string($_POST['userId']);
    $userEmail = $myDatabase->real_escape_string($_POST['userEmail']);
    $userPassword = $myDatabase->real_escape_string($_POST['userPassword']);
    $confirmPassword = $myDatabase->real_escape_string($_POST['confirmPassword']);
    $userName = $myDatabase->real_escape_string($_POST['userName']);
    $userPhone = $myDatabase->real_escape_string($_POST['userPhone']);
    $active = $myDatabase->real_escape_string($_POST['active']);
	$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    // </editor-fold>
    
    if ($userId == '') {
        $boolNew = true;
    }
    
    if($userPassword == $confirmPassword) {
        if($userEmail != '' && $userPassword != '' && $userName != '' && $active != '' && $stockpileId != '') {
            if($boolNew) {
                $sql = "SELECT * FROM `user` WHERE UPPER(user_email) = UPPER('{$userEmail}')";
            } else {
                $sql = "SELECT * FROM `user` WHERE UPPER(user_email) = UPPER('{$userEmail}') AND user_id <> {$userId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            
            if($result !== false && $result->num_rows == 0) {
                $salt = bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM));
                $saltedPW =  trim($userPassword) . $salt;
                $hashedPW = hash('sha256', $saltedPW);
                
                if($boolNew) {
                    $sql = "INSERT INTO `user` (user_email, user_password, user_name, user_phone, active, user_salt, stockpile_id, entry_by, entry_date) VALUES ("
                            . "LOWER('{$userEmail}'), '{$hashedPW}', '{$userName}', '{$userPhone}', {$active}, '{$salt}', {$stockpileId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                } else {
                    $sql = "UPDATE `user` SET "
                            . "user_email = LOWER('{$userEmail}'), "
                            . "user_password = '{$hashedPW}', "
                            . "user_name = '{$userName}', "
                            . "user_phone = '{$userPhone}', "
                            . "active = {$active},"
                            . "user_salt = '{$salt}', "
							. "stockpile_id = '{$stockpileId}' "
                            . "WHERE user_id = {$userId}";
                }
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                
                if($result !== false) {
                    if($boolNew) {
                        $userId = $myDatabase->insert_id;
                    }
                    
                    $return_value = '|OK|User has successfully inserted/updated.|'. $userId .'|';
                } else {
                    $return_value = '|FAIL|Insert/update user failed.||';
                }
            } else {
                $return_value = '|FAIL|Email already exists.||';
            }
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    } else {
        $return_value = '|FAIL|Confirm password is not valid.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

if (isset($_REQUEST['action']) && $_REQUEST['action'] == 'changePass') {
    // <editor-fold defaultstate="collapsed" desc="Login">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $userPassword = $myDatabase->real_escape_string($_POST['userPassword']);
    // </editor-fold>
    
    if($userPassword != '') {
				$salt = bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM));
                $saltedPW =  trim($userPassword) . $salt;
                $hashedPW = hash('sha256', $saltedPW);
				
		$sql = "UPDATE `user` SET "                            
                            . "user_password = '{$hashedPW}', "
							. "change_password = 0, "
							. "user_salt = '{$salt}' "							
                            . "WHERE user_id = {$_SESSION['userId']}";
                
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                
                if($result !== false) {
                    if($boolNew) {
                        $userId = $myDatabase->insert_id;
                    }
                    
                    $return_value = '|OK|Password has successfully updated.|'. $userId .'|';
                } else {
                    $return_value = '|FAIL|Update password failed.||';
                }				
    } else {
        $return_value = '|FAIL|Password can not be empty.|';
    }    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'user_module_data') {
    // <editor-fold defaultstate="collapsed" desc="user_module_data">
    
    $return_value = '';
    $selectedCheck = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $userId = $myDatabase->real_escape_string($_POST['userId']);
    // </editor-fold>
    
    if (isset($_POST['checks'])) {
        $checks = $_POST['checks'];
        for ($i = 0; $i < sizeof($checks); $i++) {
            $moduleId = $checks[$i];

            $sql = "SELECT * FROM user_module
                    WHERE user_id = {$userId}
                    AND module_id = {$moduleId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false && $result->num_rows == 0) {
                $sql = "INSERT INTO user_module (user_id, module_id) VALUES (
                        {$userId}, $moduleId)";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }

            if ($selectedCheck == '') {
                $selectedCheck .= $moduleId;
            } else {
                $selectedCheck .= ', ' . $moduleId;
            }
        }
        
        if ($selectedCheck != '') {
            $sql = "DELETE FROM user_module
                    WHERE user_id = {$userId}
                    AND module_id NOT IN ({$selectedCheck})";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        }
        $return_value = '|OK|User privilege(s) updated successfully.|';
    } else {
        $return_value = '|FAIL|Please choose at least 1 privilege.|';
    }
    
    echo $return_value;
    // </editor-fold>
}


elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'posting_notim_ok') {
    // <editor-fold defaultstate="collapsed" desc="user_module_data">
    
    $return_value = '';
    $selectedCheck = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    // </editor-fold>
    
    if (isset($_POST['checks'])) {
        $checks = $_POST['checks'];
        for ($i = 0; $i < sizeof($checks); $i++) {
            $notimId = $checks[$i];

            /*$sql = "SELECT * FROM user_module
                    WHERE user_id = {$userId}
                    AND module_id = {$moduleId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false && $result->num_rows == 0) {
                $sql = "INSERT INTO user_module (user_id, module_id) VALUES (
                        {$userId}, $moduleId)";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }*/

            if ($selectedCheck == '') {
                $selectedCheck .= $notimId;
            } else {
                $selectedCheck .= ', ' . $notimId;
            }
        }
	}
        
        $sqlNotim = "SELECT * FROM `transaction` WHERE transaction_id IN ({$selectedCheck})";						
							$resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
							if($resultNotim !== false && $resultNotim->num_rows > 0) {
								while($rowNotim = $resultNotim->fetch_object()) {
									$transactionId = $rowNotim->transaction_id;
									
					
		
		if($transactionId != '') {
			
				$sql = "UPDATE transaction SET posting_status = 2 WHERE transaction_id = {$transactionId}";
				$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
			   insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
				
				$return_value = '|OK|Notim has successfully posted.|';
			
		} else {
			$return_value = '|FAIL|Record not found.|';
		}
		
								}
							}
		echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'return_notim_ok') {
    // <editor-fold defaultstate="collapsed" desc="delete_sales">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
	$returnInDate = $todayDate2;
	$t_date = str_replace('/', '-', $returnInDate);
	$currentYear2 = date('y', strtotime($t_date));
	 
    // </editor-fold>
	if (isset($_POST['checks'])) {
        $checks = $_POST['checks'];
        for ($i = 0; $i < sizeof($checks); $i++) {
            $notimId = $checks[$i];

            /*$sql = "SELECT * FROM user_module
                    WHERE user_id = {$userId}
                    AND module_id = {$moduleId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false && $result->num_rows == 0) {
                $sql = "INSERT INTO user_module (user_id, module_id) VALUES (
                        {$userId}, $moduleId)";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }*/

            if ($selectedCheck == '') {
                $selectedCheck .= $notimId;
            } else {
                $selectedCheck .= ', ' . $notimId;
            }
        }
	}
	
	 $sqlNotim = "SELECT * FROM `transaction` WHERE transaction_id IN ({$selectedCheck})";						
							$resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
							if($resultNotim !== false && $resultNotim->num_rows > 0) {
								while($rowNotim = $resultNotim->fetch_object()) {
									$transactionId2 = $rowNotim->transaction_id;
    
						
    if($transactionId2 != '') {
		$sql = "UPDATE transaction SET posting_status = 3 WHERE transaction_id = {$transactionId2}";
						$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode FROM `transaction` t WHERE t.transaction_id = {$transactionId2}";
	$resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
            if($resultR !== false && $resultR->num_rows == 1) {
                $rowR = $resultR->fetch_object();
				//$R = "R";
				//$U = "-U";
                
				//$slipU = $rowR->slip_no .''. $U;
				$checkSlipNo = $rowR->stockpileCode .'-'. $currentYear2;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				$slipR = $rowR->slip_no .'-R';
				$slipU = $rowR->slip_no .'-U';
				$dateR = $date->format('Y-m-d');
				$sendW = $rowR->send_weight * -1;
				$brutoW = $rowR->bruto_weight * -1;
				$tarraW = $rowR->tarra_weight * -1;
				$nettoW = $rowR->netto_weight * -1;
				$handlingW = $rowR->handling_quantity * -1;
				$freightW = $rowR->freight_quantity * -1;
				$quantityW = $rowR->quantity * -1;
				$shrinkW = $rowR->shrink * -1;
				$unloadingP = $rowR->unloading_price * -1;
				
				if($rowR->shipment_id == ''){
					$shipment_id = 'NULL';	
				}else{
					$shipment_id = $rowR->shipment_id;	
				}
				if($rowR->labor_id == ''){
					$labor_id = 'NULL';
				}else{
					$labor_id = $rowR->labor_id;
				}
				if($rowR->unloading_cost_id == ''){
					$unloading_cost_id = 'NULL';
				}else{
					$unloading_cost_id = $rowR->unloading_cost_id;
				}
				if($rowR->handling_cost_id == ''){
					$handling_cost_id = 'NULL';
				}else{
					$handling_cost_id = $rowR->handling_cost_id;
				}
				if($rowR->freight_cost_id == ''){
					$freight_cost_id = 'NULL';
				}else{
					$freight_cost_id = $rowR->freight_cost_id;
				}
				if($rowR->permit_no == ''){
					$permit_no = 'NULL';
				}else{
					$permit_no = $rowR->permit_no;
				}
				if($rowR->vendor_id == ''){
					$vendor_id = 'NULL';
				}else{
					$vendor_id = $rowR->vendor_id;
				}
				if($rowR->cust_tax_id == ''){
					$cust_tax_id = 'NULL';
				}else{
					$cust_tax_id = $rowR->cust_tax_id;
				}
				if($rowR->curah_tax_id == ''){
					$curah_tax_id = 'NULL';
				}else{
					$curah_tax_id = $rowR->curah_tax_id;
				}
				if($rowR->uc_tax_id == ''){
					$uc_tax_id = 'NULL';
				}else{
					$uc_tax_id = $rowR->uc_tax_id;
				}
				if($rowR->fc_tax_id == ''){
					$fc_tax_id = 'NULL';
				}else{
					$fc_tax_id = $rowR->fc_tax_id;
				}
				if($rowR->block == ''){
					$block = 'NULL';
				}else{
					$block = $rowR->block;
				}
				//if($rowR->payment_id == ''){
					$payment_id = 'NULL';
				//}else{
					//$payment_id = $rowR->payment_id;
				//}
				//if($rowR->fc_payment_id == ''){
					$fc_payment_id = 'NULL';
				//}else{
					//$fc_payment_id = $rowR->fc_payment_id;
				//}
				//if($rowR->hc_payment_id == ''){
					$hc_payment_id = 'NULL';
				//}else{
					//$hc_payment_id = $rowR->hc_payment_id;
				//}
				//if($rowR->uc_payment_id == ''){
					$uc_payment_id = 'NULL';
				//}else{
					//$uc_payment_id = $rowR->uc_payment_id;
				//}
				if($rowR->notes == ''){
					$notes = 'NULL';
				}else{
					$notes = $rowR->notes;
				}
				$delivery_status = 0;
			}
				
	$sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,handling_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date,posting_status)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},{$rowR->stockpile_contract_id},{$shipment_id},STR_TO_DATE('{$returnInDate}', '%d/%m/%Y'),STR_TO_DATE('{$returnInDate}', '%d/%m/%Y'),'{$rowR->vehicle_no}',{$labor_id},{$unloading_cost_id},STR_TO_DATE('{$returnInDate}', '%d/%m/%Y'),{$handling_cost_id},{$freight_cost_id},'{$permit_no}',{$rowR->transaction_type},{$vendor_id},'{$sendW}','{$brutoW}','{$tarraW}','{$nettoW}','{$notes}','{$rowR->driver}','{$handlingW}','{$freightW}','{$quantityW}','{$shrinkW}','{$rowR->freight_price}','{$rowR->handling_price}','{$unloadingP}','{$rowR->unit_price}','{$rowR->inventory_value}',{$cust_tax_id},{$curah_tax_id},{$uc_tax_id},{$fc_tax_id},{$delivery_status},'{$block}',{$payment_id},{$fc_payment_id},{$hc_payment_id},{$uc_payment_id},{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),3)";
    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
       if($resultLog !== false) {     
    //echo $sqlLog;
	$transactionId = $myDatabase->insert_id;
	
	$sql = "UPDATE `transaction` SET notim_status = 1 WHERE transaction_id = {$transactionId2}";
	$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
	$sql = "CALL sp_shrink_weight_retur({$transactionId},{$transactionId2})";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
	//insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
	   
	   
				$return_value = '|OK|Nota Timbang has successfully Returned.|' . $transactionId2 .'|';
        } else {
            $return_value = '|FAIL|Returned Nota Timbang failed.|'.$sqlLog.'';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
	}
	}
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_user_stockpile') {
    // <editor-fold defaultstate="collapsed" desc="delete_user_stockpile">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $userStockpileId = $myDatabase->real_escape_string($_POST['userStockpileId']);
    // </editor-fold>
    
    if ($userStockpileId != '') {
        $sql = "DELETE FROM user_stockpile WHERE user_stockpile_id = {$userStockpileId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Stockpile deleted successfully.|';
        } else {
            $return_value = '|FAIL|Failed deleting stockpiles.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'user_stockpile_data') {
    // <editor-fold defaultstate="collapsed" desc="user_stockpile_data">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $userId = $myDatabase->real_escape_string($_POST['modalUserId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    // </editor-fold>
    
    if ($userId != '' && $stockpileId != '') {
        $sql = "INSERT INTO user_stockpile (user_id, stockpile_id) VALUES ({$userId}, {$stockpileId})";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Stockpile added successfully.|';
        } else {
            $return_value = '|FAIL|Failed adding stockpiles.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_vh_bank') {
    // <editor-fold defaultstate="collapsed" desc="delete_user_stockpile">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vhBankId = $myDatabase->real_escape_string($_POST['vhBankId']);
    // </editor-fold>
    
    if ($vhBankId != '') {
        $sql = "DELETE FROM vendor_handling_bank WHERE vh_bank_id = {$vhBankId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Bank deleted successfully.|';
        } else {
            $return_value = '|FAIL|Failed deleting Bank.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'general_vendor_bank_data') {
    // <editor-fold defaultstate="collapsed" desc="user_stockpile_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $generalVendorId = $myDatabase->real_escape_string($_POST['modalGeneralVendorId']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
	$branch = $myDatabase->real_escape_string($_POST['branch']);
	$accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
	$beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
	$swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
  $masterBankId = $myDatabase->real_escape_string($_POST['masterBank']);
    // </editor-fold>

    if ($generalVendorId != '' && $bankName != '' && $branch != '' && $accountNo != '' && $beneficiary != '') {
        $sql = "INSERT INTO general_vendor_bank (general_vendor_id, bank_name, branch, account_no, beneficiary, swift_code,master_bank_id)
                VALUES ({$generalVendorId}, '{$bankName}', '{$branch}', '{$accountNo}', '{$beneficiary}', '{$swiftCode}',{$masterBankId} )";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|Bank added successfully.|';
        } else {
            $return_value = '|FAIL|Failed adding Bank.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'labor_bank_data') {
    // <editor-fold defaultstate="collapsed" desc="user_stockpile_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $laborId = $myDatabase->real_escape_string($_POST['modalLaborId']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
	$branch = $myDatabase->real_escape_string($_POST['branch']);
	$accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
	$beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
	$swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
  $masterBankId = $myDatabase->real_escape_string($_POST['masterBank']);
    // </editor-fold>

    if ($laborId != '' && $bankName != '' && $branch != '' && $accountNo != '' && $beneficiary != '') {
        $sql = "INSERT INTO labor_bank (labor_id, bank_name, branch, account_no, beneficiary, swift_code,master_bank_id)
        VALUES ({$laborId}, '{$bankName}', '{$branch}', '{$accountNo}', '{$beneficiary}', '{$swiftCode}',$masterBankId )";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|Bank added successfully.|';
        } else {
            $return_value = '|FAIL|Failed adding Bank.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'vh_bank_data') {
    // <editor-fold defaultstate="collapsed" desc="user_stockpile_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorHandlingId = $myDatabase->real_escape_string($_POST['modalVendorHandlingId']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
	$branch = $myDatabase->real_escape_string($_POST['branch']);
	$accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
	$beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
	$swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
  $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
  $masterBankId = $myDatabase->real_escape_string($_POST['masterBank']);
    // </editor-fold>

    if ($vendorHandlingId != '' && $bankName != '' && $branch != '' && $accountNo != '' && $beneficiary != ''&& $masterBankId != '') {
        $sql = "INSERT INTO vendor_handling_bank (vendor_handling_id, bank_name, branch, account_no, beneficiary, swift_code,master_bank_id)
                VALUES ({$vendorHandlingId}, '{$bankName}', '{$branch}', '{$accountNo}', '{$beneficiary}', '{$swiftCode}',{$masterBankId} )";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|Bank added successfully.|';
        } else {
            $return_value = '|FAIL|Failed adding Bank.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'v_bank_data') {
    // <editor-fold defaultstate="collapsed" desc="user_stockpile_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['modalVendorId']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
	$branch = $myDatabase->real_escape_string($_POST['branch']);
	$accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
	$beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
	$swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
  $masterBankId = $myDatabase->real_escape_string($_POST['masterBank']);
    // </editor-fold>

    if ($vendorId != '' && $bankName != '' && $branch != '' && $accountNo != '' && $beneficiary != '') {
        $sql = "INSERT INTO vendor_bank (vendor_id, bank_name, branch, account_no, beneficiary, swift_code,master_bank_id)
            VALUES ({$vendorId}, '{$bankName}', '{$branch}', '{$accountNo}', '{$beneficiary}', '{$swiftCode}',$masterBankId )";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|Bank added successfully.|';
        } else {
            $return_value = '|FAIL|Failed adding Bank.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'freight_login_data') {
    // <editor-fold defaultstate="collapsed" desc="freight_login_data">
        
        $return_value = '';
        $boolNew = false;

        $freightLoginId = $myDatabase->real_escape_string($_POST['freightLoginId']);
        $freightId = $myDatabase->real_escape_string($_POST['freightId']);
        $masterGroupId = $myDatabase->real_escape_string($_POST['masterGroupId']);
        $username = $myDatabase->real_escape_string($_POST['freightUsername']);
	    $password= $myDatabase->real_escape_string($_POST['freightPassword']);

    if ($freightLoginId == '') {
        $boolNew = true;
    }
        // </editor-fold>
    
    
        if($freightId != '' && $masterGroupId != '' && $username != '' && $password != '') {
                if($boolNew) {
                    $hashedPW = hash('sha256', $password);
                    $sql = "INSERT INTO freight_login (freight_id, group_id, freight_username, freight_password, entry_by, entry_date)
                            VALUES ({$freightId}, {$masterGroupId}, '{$username}', '{$hashedPW}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                } elseif($password != ''){
                    $hashedPW = hash('sha256', $password);
                    $sql = "UPDATE `freight_login` SET "
                    . "group_id =  '{$masterGroupId}',"
                    . "freight_username = '{$username}', "
                    . "freight_password = '{$hashedPW}', "
                    . "WHERE freight_login = {$freightLoginId}";
    
                }
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    
                if($result !== false) {
                    $return_value = '|OK|Freight User has successfully inserted/updated.|';
                } else {
                    $return_value = '|FAIL|Insert/update freight user failed.|';
                    echo $sql;
                }
            }  else {
                $return_value = '|FAIL|Please fill the required fields.|';
                }
        
        echo $return_value;
        // </editor-fold>
    }

 elseif (isset($_POST['action']) && $_POST['action'] == 'logbook_data') {
// <editor-fold defaultstate="collapsed" desc="logbook_data">
    $return_value = '';
    $boolContinue = true;
    $userId = $_SESSION['userId'];

    if (isset($_POST['delete'])) {
        $delete = true;
    } else {
        $delete = false;
    }
// <editor-fold defaultstate="collapsed" desc="POST variables">
    $logbookId = $myDatabase->real_escape_string($_POST['logbookId']);
    $pLogbookId = $myDatabase->real_escape_string($_POST['pLogbookId']);
    $requestDateHo = $myDatabase->real_escape_string($_POST['requestDateHo']);
    $mvName = $myDatabase->real_escape_string($_POST['mvName']);
    $requestDate = $myDatabase->real_escape_string($_POST['requestDate']);
    $qtyPKS = $myDatabase->real_escape_string($_POST['qtyPKS']);
    $requestMonth = $myDatabase->real_escape_string($_POST['requestMonth']);
    $invoiceValue = $myDatabase->real_escape_string($_POST['invoiceValue']);
    $requestWeek = $myDatabase->real_escape_string($_POST['requestWeek']);
    $paymentDate = $myDatabase->real_escape_string($_POST['paymentDate']);
    $emailTime = $myDatabase->real_escape_string($_POST['emailTime']);
    $status = $myDatabase->real_escape_string($_POST['status']);
    $invReceive = $myDatabase->real_escape_string($_POST['invReceive']);
    $paidTime = $myDatabase->real_escape_string($_POST['paidTime']);
    $paymentSchedule = $myDatabase->real_escape_string($_POST['paymentSchedule']);
    $statusTime = $myDatabase->real_escape_string($_POST['statusTime']);
    $statusDay = $myDatabase->real_escape_string($_POST['statusDay']);
    $companyId = $myDatabase->real_escape_string($_POST['companyId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $masterBankId = $myDatabase->real_escape_string($_POST['masterBankId']);
    $requesterId = $myDatabase->real_escape_string($_POST['requesterId']);
    $pvNumber = $myDatabase->real_escape_string($_POST['pvNumber']);
    $picFinanceId = $myDatabase->real_escape_string($_POST['picFinanceId']);
    $outstanding = $myDatabase->real_escape_string($_POST['outstanding']);
    $categoryId = $myDatabase->real_escape_string($_POST['categoryId']);
    $toBePaid = $myDatabase->real_escape_string($_POST['toBePaid']);
    $invCategoryId = $myDatabase->real_escape_string($_POST['invCategoryId']);
    $paid = $myDatabase->real_escape_string($_POST['paid']);
    $advanceNumber = $myDatabase->real_escape_string($_POST['advanceNumber']);
    $shipmentCode = $myDatabase->real_escape_string($_POST['shipmentCode']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    $paidRemarks = $myDatabase->real_escape_string($_POST['paidRemarks']);
    $shipmentCode = $myDatabase->real_escape_string($_POST['shipmentCode']);
    $vendorType = $myDatabase->real_escape_string($_POST['vendorType']);
// </editor-fold>
    if (isset($vendorType) && $vendorType == 'Pks') {
        $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    } elseif (isset($vendorType) && $vendorType == 'General') {
        $vendorName = $myDatabase->real_escape_string($_POST['vendorNameGeneral']);
    } elseif (isset($vendorType) && $vendorType == 'Freight') {
        $vendorName = $myDatabase->real_escape_string($_POST['vendorNameFreight']);
    } elseif (isset($vendorType) && $vendorType == 'Labor') {
        $vendorName = $myDatabase->real_escape_string($_POST['vendorLabor']);
    } elseif (isset($vendorType) && $vendorType == 'Handling') {
        $vendorName = $myDatabase->real_escape_string($_POST['vendorHandling']);
    } elseif (isset($vendorType) && $vendorType == 'PettyCash') {
        $vendorName = $myDatabase->real_escape_string($_POST['vendorPettyCash']);
    } else {
        $vendorName = 'NULL';
    }

    if (isset($logbookId) && $logbookId != '' && $delete !== true) {
        $action = 'UPDATE';
// <editor-fold defaultstate="collapsed" desc="UPDATE Logbook">
        $sql = "UPDATE  logbook SET " .
            'request_date_ho = ' . (($requestDateHo == '') ? "NULL" : ("'" . $requestDateHo . "'")) . ", " . 'request_date = ' . (($requestDate == '') ? "NULL" : ("'" . $requestDate . "'")) . ", " .
            'request_month = ' . (($requestMonth == '') ? "NULL" : ("'" . $requestMonth . "'")) . ", " . 'request_week = ' . (($requestWeek == '') ? "NULL" : ("'" . $requestWeek . "'")) . ", " .
            'email_time = ' . (($emailTime == '') ? "NULL" : ("'" . $emailTime . "'")) . ", " . 'email_time_app = ' . (($emailTime == '') ? "NULL" : ("'" . $emailTime . "'")) . ", " .
            'inv_receive = ' . (($invReceive == '') ? "NULL" : ("'" . $invReceive . "'")) . ", " . 'payment_schedule = ' . (($paymentSchedule == '') ? "NULL" : ("'" . $paymentSchedule . "'")) . ", " .
            'company_id = ' . (($companyId == '') ? "NULL" : ("'" . $companyId . "'")) . ", " . 'stockpile_id = ' . (($stockpileId == '') ? "NULL" : ("'" . $stockpileId . "'")) . ", " .
            'master_requester_id = ' . (($requesterId == '') ? "NULL" : ("'" . $requesterId . "'")) . ", " . 'master_pic_finance_id = ' . (($picFinanceId == '') ? "NULL" : ("'" . $picFinanceId . "'")) . ", " .
            'logbook_category_id = ' . (($categoryId == '') ? "NULL" : ("'" . $categoryId . "'")) . ", " . 'advance_number = ' . (($advanceNumber == '') ? "NULL" : ("'" . $advanceNumber . "'")) . ", " .
            'logbook_inv_category_id = ' . (($invCategoryId == '') ? "NULL" : ("'" . $invCategoryId . "'")) . ", " . 'vendor_name = ' . (($vendorName == '') ? "NULL" : ("'" . $vendorName . "'")) . ", " .
            'remarks = ' . (($remarks == '') ? "NULL" : ("'" . $remarks . "'")) . ", " . 'mv_name = ' . (($mvName == '') ? "NULL" : ("'" . $mvName . "'")) . ", " .
            'qty_pks = ' . (($qtyPKS == '') ? "NULL" : ("'" . $qtyPKS . "'")) . ", " . 'invoice_value = ' . (($invoiceValue == '') ? "NULL" : ("'" . $invoiceValue . "'")) . ", " .
            'payment_date = ' . (($paymentDate == '') ? "NULL" : ("'" . $paymentDate . "'")) . ", " . 'status = ' . (($status == '') ? "NULL" : ("'" . $status . "'")) . ", " .
            'paid_time = ' . (($paidTime == '') ? "NULL" : ("'" . $paidTime . "'")) . ", " . 'status_time = ' . (($statusTime == '') ? "NULL" : ("'" . $statusTime . "'")) . ", " .
            'status_day = ' . (($statusDay == '') ? "NULL" : ("'" . $statusDay . "'")) . ", " . 'master_bank_id = ' . (($masterBankId == '') ? "NULL" : ("'" . $masterBankId . "'")) . ", " .
            'pv_number = ' . (($pvNumber == '') ? "NULL" : ("'" . $pvNumber . "'")) . ", " . 'outstanding = ' . (($outstanding == '') ? "NULL" : ("'" . $outstanding . "'")) . ", " .
            'to_be_paid = ' . (($toBePaid == '') ? "NULL" : ("'" . $toBePaid . "'")) . ", " . 'paid = ' . (($paid == '') ? "NULL" : ("'" . $paid . "'")) . ", " .
            'paid_remarks = ' . (($paidRemarks == '') ? "NULL" : ("'" . $paidRemarks . "'")) . ", " . 'vendor_type = ' . (($vendorType == '') ? "NULL" : ("'" . $vendorType . "'")) . ", " .
            'shipment_code = ' . (($shipmentCode == '') ? "NULL" : ("'" . $shipmentCode . "'")) .
            " where logbook_id = {$logbookId} ";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
// </editor-fold>
    } elseif ($delete !== false) {
        $action = 'DELETE';
        // <editor-fold defaultstate="collapsed" desc="Get Data Logbook">
        $sql = "SELECT l.*FROM logbook l WHERE l.logbook_id = {$logbookId}
            ";
        $resultData = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($resultData !== false && $resultData->num_rows > 0) {
            $rowData = $resultData->fetch_object();
            $requestDateHo = $rowData->request_date_ho;
            $requestDate = $rowData->request_date;
            $requestMonth = $rowData->request_month;
            $requestWeek = $rowData->request_week;
            $emailTime = $rowData->email_time;
            $emailTimeApp = $rowData->email_time_app;
            $invReceive = $rowData->inv_receive;
            $paymentSchedule = $rowData->payment_schedule;
            $company = $rowData->company_id;
            $stockpile = $rowData->stockpile_id;
            $requester = $rowData->master_requester_id;
            $picFinance = $rowData->master_pic_finance_id;
            $category = $rowData->logbook_category_id;
            $advanceNumber = $rowData->advance_number;
            $invCategory = $rowData->logbook_inv_category_id;
            $vendorName = $rowData->vendor_name;
            $remarks = $rowData->remarks;
            $mvName = $rowData->mv_name;
            $qtyPks = $rowData->qty_pks;
            $invoiceValue = $rowData->invoice_value;
            $paymentDate = $rowData->payment_date;
            $status = $rowData->status;
            $paidTime = $rowData->paid_time;
            $statusTime = $rowData->status_time;
            $statusDay = $rowData->status_day;
            $masterBankId = $rowData->master_bank_id;
            $pvNumber = $rowData->pv_number;
            $outstanding = $rowData->outstanding;
            $toBePaid = $rowData->to_be_paid;
            $paid = $rowData->paid;
            $paidRemarks = $rowData->paid_remarks;
            $shipmentCode = $rowData->shipment_code;
            $vendorType = $rowData->vendor_type;
        }
        // </editor-fold>
    } else {
        $action = 'INSERT';
        // <editor-fold defaultstate="collapsed" desc="INSERT Logbook">
        $sql = "INSERT INTO `logbook` (
`request_date_ho`, `request_date`, `request_month`, `request_week`, 
`email_time`, `email_time_app`, `inv_receive`, `payment_schedule`,
`company_id`, `stockpile_id`, `master_requester_id`, `master_pic_finance_id`,
`logbook_category_id`, `advance_number`, `logbook_inv_category_id`, `vendor_name`,
`remarks`, `mv_name`, `qty_pks`, `invoice_value`, `payment_date`, `status`, `paid_time`, `status_time`, `status_day`,
`master_bank_id`, `pv_number`, `outstanding`, `to_be_paid`, `paid`, `paid_remarks`,`vendor_type`,`pengajuan_logbook_id`,`shipment_code`) VALUES 
    (" . (($requestDateHo == '') ? "NULL" : ("'" . $requestDateHo . "'")) . ", " . (($requestDate == '') ? "NULL" : ("'" . $requestDate . "'")) . ", " .
            (($requestMonth == '') ? "NULL" : ("'" . $requestMonth . "'")) . ", " . (($requestWeek == '') ? "NULL" : ("'" . $requestWeek . "'")) . ", " .
            (($emailTime == '') ? "NULL" : ("'" . $emailTime . "'")) . ", " . (($emailTime == '') ? "NULL" : ("'" . $emailTime . "'")) . ", " .
            (($invReceive == '') ? "NULL" : ("'" . $invReceive . "'")) . ", " . (($paymentSchedule == '') ? "NULL" : ("'" . $paymentSchedule . "'")) . ", " .
            (($companyId == '') ? "NULL" : ("'" . $companyId . "'")) . ", " . (($stockpileId == '') ? "NULL" : ("'" . $stockpileId . "'")) . ", " .
            (($requesterId == '') ? "NULL" : ("'" . $requesterId . "'")) . ", " . (($picFinanceId == '') ? "NULL" : ("'" . $picFinanceId . "'")) . ", " .
            (($categoryId == '') ? "NULL" : ("'" . $categoryId . "'")) . ", " . (($advanceNumber == '') ? "NULL" : ("'" . $advanceNumber . "'")) . ", " .
            (($invCategoryId == '') ? "NULL" : ("'" . $invCategoryId . "'")) . ", " . (($vendorName == '') ? "NULL" : ("'" . $vendorName . "'")) . ", " .
            (($remarks == '') ? "NULL" : ("'" . $remarks . "'")) . ", " . (($mvName == '') ? "NULL" : ("'" . $mvName . "'")) . ", " .
            (($qtyPKS == '') ? "NULL" : ("'" . $qtyPKS . "'")) . ", " . (($invoiceValue == '') ? "NULL" : ("'" . $invoiceValue . "'")) . ", " .
            (($paymentDate == '') ? "NULL" : ("'" . $paymentDate . "'")) . ", " . (($status == '') ? "NULL" : ("'" . $status . "'")) . ", " .
            (($paidTime == '') ? "NULL" : ("'" . $paidTime . "'")) . ", " . (($statusTime == '') ? "NULL" : ("'" . $statusTime . "'")) . ", " .
            (($statusDay == '') ? "NULL" : ("'" . $statusDay . "'")) . ", " . (($masterBankId == '') ? "NULL" : ("'" . $masterBankId . "'")) . ", " .
            (($pvNumber == '') ? "NULL" : ("'" . $pvNumber . "'")) . ", " . (($outstanding == '') ? "NULL" : ("'" . $outstanding . "'")) . ", " .
            (($toBePaid == '') ? "NULL" : ("'" . $toBePaid . "'")) . ", " . (($paid == '') ? "NULL" : ("'" . $paid . "'")) . ", " .
            (($paidRemarks == '') ? "NULL" : ("'" . $paidRemarks . "'")) . ", " . (($vendorType == '') ? "NULL" : ("'" . $vendorType . "'")) . ", " .
            (($pLogbookId == '') ? "NULL" : ("'" . $pLogbookId . "'")) . ", " .
            (($shipmentCode == '') ? "NULL" : ("'" . $shipmentCode . "'")) .
            ");";
        $sql .= "UPDATE pengajuan_logbook SET status = 1 where id = {$_POST['pLogbookId']}";
        $result = $myDatabase->multi_query($sql);
// </editor-fold>
        $logbookId = $myDatabase->insert_id;
    }

    if ($result !== false) {
        $trxDate = date("Y-m-d h:i:s");
        // <editor-fold defaultstate="collapsed" desc="INSERT Logbook Log">
        $sql2 = "INSERT INTO `logbook_log` (
`request_date_ho`, `request_date`, `request_month`, `request_week`, 
`email_time`, `email_time_app`, `inv_receive`, `payment_schedule`,
`company_id`, `stockpile_id`, `master_requester_id`, `master_pic_finance_id`,
`logbook_category_id`, `advance_number`, `logbook_inv_category_id`, `vendor_name`,
`remarks`, `mv_name`, `qty_pks`, `invoice_value`, `payment_date`, `status`, `paid_time`, `status_time`, `status_day`,
`master_bank_id`, `pv_number`, `outstanding`, `to_be_paid`, `paid`, `paid_remarks`,`shipment_code`,
`logbook_id`,`action`,`user_id`,`vendor_type`,`trx_date`) VALUES 
    (" .
            (($requestDateHo == '') ? "NULL" : ("'" . $requestDateHo . "'")) . ", " . (($requestDate == '') ? "NULL" : ("'" . $requestDate . "'")) . ", " .
            (($requestMonth == '') ? "NULL" : ("'" . $requestMonth . "'")) . ", " . (($requestWeek == '') ? "NULL" : ("'" . $requestWeek . "'")) . ", " .
            (($emailTime == '') ? "NULL" : ("'" . $emailTime . "'")) . ", " . (($emailTime == '') ? "NULL" : ("'" . $emailTime . "'")) . ", " .
            (($invReceive == '') ? "NULL" : ("'" . $invReceive . "'")) . ", " . (($paymentSchedule == '') ? "NULL" : ("'" . $paymentSchedule . "'")) . ", " .
            (($companyId == '') ? "NULL" : ("'" . $companyId . "'")) . ", " . (($stockpileId == '') ? "NULL" : ("'" . $stockpileId . "'")) . ", " .
            (($requesterId == '') ? "NULL" : ("'" . $requesterId . "'")) . ", " . (($picFinanceId == '') ? "NULL" : ("'" . $picFinanceId . "'")) . ", " .
            (($categoryId == '') ? "NULL" : ("'" . $categoryId . "'")) . ", " . (($advanceNumber == '') ? "NULL" : ("'" . $advanceNumber . "'")) . ", " .
            (($invCategoryId == '') ? "NULL" : ("'" . $invCategoryId . "'")) . ", " . (($vendorName == '') ? "NULL" : ("'" . $vendorName . "'")) . ", " .
            (($remarks == '') ? "NULL" : ("'" . $remarks . "'")) . ", " . (($mvName == '') ? "NULL" : ("'" . $mvName . "'")) . ", " .
            (($qtyPKS == '') ? "NULL" : ("'" . $qtyPKS . "'")) . ", " . (($invoiceValue == '') ? "NULL" : ("'" . $invoiceValue . "'")) . ", " .
            (($paymentDate == '') ? "NULL" : ("'" . $paymentDate . "'")) . ", " . (($status == '') ? "NULL" : ("'" . $status . "'")) . ", " .
            (($paidTime == '') ? "NULL" : ("'" . $paidTime . "'")) . ", " . (($statusTime == '') ? "NULL" : ("'" . $statusTime . "'")) . ", " .
            (($statusDay == '') ? "NULL" : ("'" . $statusDay . "'")) . ", " . (($masterBankId == '') ? "NULL" : ("'" . $masterBankId . "'")) . ", " .
            (($pvNumber == '') ? "NULL" : ("'" . $pvNumber . "'")) . ", " . (($outstanding == '') ? "NULL" : ("'" . $outstanding . "'")) . ", " .
            (($toBePaid == '') ? "NULL" : ("'" . $toBePaid . "'")) . ", " . (($paid == '') ? "NULL" : ("'" . $paid . "'")) . ", " .
            (($paidRemarks == '') ? "NULL" : ("'" . $paidRemarks . "'")) . ", " . (($shipmentCode == '') ? "NULL" : ("'" . $shipmentCode . "'")) . ", " .
            (($logbookId == '') ? "NULL" : ("'" . $logbookId . "'")) . ", " . (($action == '') ? "NULL" : ("'" . $action . "'")) . ", " .
            (($userId == '') ? "NULL" : ("'" . $userId . "'")) . ", " . (($vendorType == '') ? "NULL" : ("'" . $vendorType . "'")) . ", " .
            (($trxDate == '') ? "NULL" : ("'" . $trxDate . "'")) .
            ")";
        $result = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
        if ($delete !== false) {
            $sql = "DELETE FROM logbook WHERE logbook_id={$logbookId}";
            $result2 = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        }
// </editor-fold>
        echo $sql;
        $return_value = '|OK|Success';
    } else {
        echo $sql;
        echo $sql2;
        $return_value = '|FAIL|Please fill required fields.|';
    }
    echo $return_value;
// </editor-fold>
}elseif (isset($_POST['action']) && $_POST['action'] == 'pengajuan_logbook_data') {
// <editor-fold defaultstate="collapsed" desc="pengajuan_logbook_data">
    $return_value = '';
    $boolContinue = true;
    $userId = $_SESSION['userId'];

// <editor-fold defaultstate="collapsed" desc="POST variables">
    $id = isset($_POST['pLogbookId']) ? $_POST['pLogbookId'] : 'null';
    $actionType = $myDatabase->real_escape_string($_POST['actionType']);
    if ($actionType != 'DELETE') {
        $noRekening = $myDatabase->real_escape_string($_POST['noRekening']);
        $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
        $vendorType = $myDatabase->real_escape_string($_POST['vendorType']);
        $masterBankId = $myDatabase->real_escape_string($_POST['masterBankId']);
        $cabangBank = $myDatabase->real_escape_string($_POST['cabangBank']);
        $namaAkunBank = $myDatabase->real_escape_string($_POST['namaAkunBank']);
        $qty = $myDatabase->real_escape_string($_POST['qty']);
        $hargaQty = $myDatabase->real_escape_string($_POST['hargaQty']);
//    $dpp = $myDatabase->real_escape_string($_POST['dpp']);
        $ppn = $myDatabase->real_escape_string($_POST['ppn']);
        $pph = $myDatabase->real_escape_string($_POST['pph']);
        $taxRemark = $myDatabase->real_escape_string($_POST['taxRemark']);
        $keterangan = $myDatabase->real_escape_string($_POST['keterangan']);
        $dpp = $qty * $hargaQty;
        $total = $dpp + $ppn + $pph;
        if (isset($_FILES['file']) && $_FILES['file']['size'] > 0) {
            $allowed = array('png', 'jpg', 'pdf', 'doc', 'docs', 'xls', 'xlsx');
            $fileName = $_FILES['file']['name'];
            $x = explode('.', $fileName);
            $ekstensi = strtolower(end($x));
            $ukuran = $_FILES['file']['size'];
            $file_tmp = $_FILES['file']['tmp_name'];

            if (in_array($ekstensi, $allowed) === true) {

                $attachmentPath = "./import/logbook/";
                if ($ukuran < 1044070) {
                    if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
                        $temp = mkdir($attachmentPath, 0755, TRUE);
                    else
                        $temp = TRUE;

                    if ($temp === TRUE) {
                        $attachmentPath .= "/" . date("ymdHis") . "-" . basename($fileName);
                        if (!move_uploaded_file($file_tmp, $attachmentPath)) {
                            echo '|FAIL|Error while uploading file.|';
                            die();
                        }
                    } else {
                        echo '|FAIL|Error while creating directory.|';
                        die();
                    }

                } else {
                    echo '|FAIL|UKURAN FILE TERLALU BESAR.|';
                    die();
                }
            } else {
                echo '|FAIL|EKSTENSI FILE YANG DI UPLOAD TIDAK DI PERBOLEHKAN.|';
                die();
            }
        } else {
            $attachmentPath = 'NULL';
        }
    }
// </editor-fold>
    if (isset($vendorType) && $vendorType == 'Pks') {
        $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    } elseif (isset($vendorType) && $vendorType == 'General') {
        $vendorName = $myDatabase->real_escape_string($_POST['vendorNameGeneral']);
    } elseif (isset($vendorType) && $vendorType == 'Freight') {
        $vendorName = $myDatabase->real_escape_string($_POST['vendorNameFreight']);
    } elseif (isset($vendorType) && $vendorType == 'Labor') {
        $vendorName = $myDatabase->real_escape_string($_POST['vendorLabor']);
    } elseif (isset($vendorType) && $vendorType == 'Handling') {
        $vendorName = $myDatabase->real_escape_string($_POST['vendorHandling']);
    } elseif (isset($vendorType) && $vendorType == 'PettyCash') {
        $vendorName = $myDatabase->real_escape_string($_POST['vendorPettyCash']);
    } else {
        $vendorName = '';
    }

    if ($actionType == 'INSERT') {
        $sql = "INSERT INTO `pengajuan_logbook` (`no_rek`, `stockpile_id`, `vendor`, `vendor_type`, `keterangan`, `master_bank_id`, `cabang_bank`, `nama_akun_bank`, `qty`, `harga_qty`, `dpp`, `ppn`, `pph`, `total`, `tax_remark`, `file`,`entry_by`) 
                VALUES('{$noRekening}',$stockpileId,'$vendorName','$vendorType','$keterangan','$masterBankId','$cabangBank','$namaAkunBank',$qty,$hargaQty,$dpp,$ppn,$pph,$total,'$taxRemark','$attachmentPath',$userId)";
    } elseif ($actionType == 'UPDATE') {
        if ($attachmentPath != 'NULL') {
            $sql = "UPDATE `pengajuan_logbook` SET 
            no_rek = {$noRekening}, stockpile_id = {$stockpileId}, vendor = '{$vendorName}', keterangan = '{$keterangan}', master_bank_id = '{$masterBankId}', cabang_bank = '{$cabangBank}', nama_akun_bank = '{$namaAkunBank}', qty = '{$qty}',
            harga_qty = '{$hargaQty}', dpp = '{$dpp}', ppn = '{$ppn}', pph = '{$pph}', total = '{$total}', tax_remark = '{$taxRemark}', file = '{$attachmentPath}', vendor_type = '{$vendorType}'
            WHERE id = {$id}";
        } else {
            $sql = "UPDATE `pengajuan_logbook` SET 
            no_rek = {$noRekening}, stockpile_id = {$stockpileId}, vendor = '{$vendorName}', keterangan = '{$keterangan}', master_bank_id = '{$masterBankId}', cabang_bank = '{$cabangBank}', nama_akun_bank = '{$namaAkunBank}', qty = '{$qty}',
            harga_qty = '{$hargaQty}', dpp = '{$dpp}', ppn = '{$ppn}', pph = '{$pph}', total = '{$total}', tax_remark = '{$taxRemark}', vendor_type = '{$vendorType}'
            WHERE id = {$id}";
        }
    } elseif ($actionType == 'DELETE') {
        $sql = "DELETE FROM `pengajuan_logbook` WHERE id = {$id}";
    } else {
        // DO Nothing
    }
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($result !== false) {
        if ($actionType == 'INSERT') {
            $return_value = '|OK|Pengajuan Logbook has successfully inserted' . $_FILES['file']['name'];
        } elseif ($actionType == 'UPDATE') {
            $return_value = '|OK|Pengajuan Logbook has successfully updated';
        } elseif ($actionType == 'DELETE') {
            $return_value = '|OK|Pengajuan Logbook has successfully deleted';
        }

    } else {
        $return_value = '|FAIL|Insert/update mutasi failed.||';
        echo $sql;
    }
    echo $return_value;


// </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'termin_data') {
    // <editor-fold defaultstate="collapsed" desc="termin_data">

    $return_value = '';
    $boolNew = false;

    $actionType = $myDatabase->real_escape_string($_POST['actionType']);
    $terminId = $myDatabase->real_escape_string($_POST['terminId']);
    $name = $myDatabase->real_escape_string($_POST['name']);



    if ($actionType == 'INSERT') {
        $sql = "INSERT INTO `master_termin` (name, entry_by, entry_date) 
                VALUES ('{$name}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    } elseif ($actionType == 'UPDATE') {
        $sql = "UPDATE `master_termin` SET name = '{$name}', entry_by = {$_SESSION['userId']}, entry_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s')  WHERE id = {$terminId}";
    } elseif ($actionType == 'DELETE') {
        $sql = "DELETE FROM `master_termin` WHERE id = {$terminId}";
    } else {
    }
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($result !== false) {
        if ($actionType == 'INSERT') {
            $return_value = '|OK|Master Termin has successfully inserted';
        } elseif ($actionType == 'UPDATE') {
            $return_value = '|OK|Master Termin has successfully updated';
        } elseif ($actionType == 'DELETE') {
            $return_value = '|OK|Master Termin has successfully deleted';
        }
    } else {
        $return_value = '|FAIL|Insert/Update Master Termin Failed or Termin Name has been used||';
       
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'termin_detail') {
    // <editor-fold defaultstate="collapsed" desc="termin_detail_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $actionType = $myDatabase->real_escape_string($_POST['actionType']);
    $terminId = $myDatabase->real_escape_string($_POST['terminId']);
    $terminDetailId = $myDatabase->real_escape_string($_POST['terminDetailId']);
    $percentage = $myDatabase->real_escape_string($_POST['percentage']);
    // </editor-fold>
    $sql1 = "select total_percentage from master_termin mt where id = {$terminId}";
    $termin = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
    $termin = $termin->fetch_object();

    if ($termin->total_percentage != 100) {
        $total = $termin->total_percentage + $percentage;

        if ($total > 100) {
            $return_value = '|FAIL|Tidak boleh lebih dari 100%';
        } else {
            if ($actionType == 'INSERT') {
                $sql = "INSERT INTO `termin_detail` (termin_id, percentage, entry_by, entry_date) VALUES ({$terminId}, '{$percentage}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'));";
            } elseif ($actionType == 'UPDATE') {
                $sql = "UPDATE `termin_detail` SET percentage = '{$percentage}', entry_by = {$_SESSION['userId']}, entry_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') WHERE id = {$terminDetailId}";
            } elseif ($actionType == 'DELETE') {
                $sql = "DELETE FROM `termin_detail` WHERE id = {$terminDetailId}";
            } else {

            }
            $sql .= "update `master_termin` set total_percentage = {$total} where id = {$terminId}";
            $result = $myDatabase->multi_query($sql);
            if ($result !== false) {
                if ($actionType == 'INSERT') {
                    $return_value = '|OK|Termin Detail has successfully inserted';
                } elseif ($actionType == 'UPDATE') {
                    $return_value = '|OK|Termin Detail has successfully updated';
                } elseif ($actionType == 'DELETE') {
                    $return_value = '|OK|Termin Detail has successfully deleted';
                }

            } else {
                $return_value = '|FAIL|Insert/Update Termin Detail failed.||';
                echo $sql;
            }
        }
    } else {
        $return_value = '|FAIL|Termin sudah 100%';
    }
    echo $return_value;
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'freight_bank_data') {
    // <editor-fold defaultstate="collapsed" desc="user_stockpile_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightId = $myDatabase->real_escape_string($_POST['modalFreightId']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
    $branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $masterBankId = $myDatabase->real_escape_string($_POST['masterBank']);
    // </editor-fold>

    if ($freightId != '' && $bankName != '' && $branch != '' && $accountNo != '' && $beneficiary != '') {
        $sql = "INSERT INTO freight_bank (freight_id, bank_name, branch, account_no, beneficiary, swift_code,master_bank_id)
        VALUES ({$freightId}, '{$bankName}', '{$branch}', '{$accountNo}', '{$beneficiary}', '{$swiftCode}',$masterBankId )";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Bank added successfully.|';
        } else {
            $return_value = '|FAIL|Failed adding Bank.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_module') {
    // <editor-fold defaultstate="collapsed" desc="delete_module">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $moduleId = $myDatabase->real_escape_string($_POST['moduleId']);
    // </editor-fold>

    if ($moduleId != '') {
        $sql = "DELETE FROM `user_module` WHERE module_id = {$moduleId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "DELETE FROM `module` WHERE module_id = {$moduleId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Module has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'module_data') {
    // <editor-fold defaultstate="collapsed" desc="module_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $moduleId = $myDatabase->real_escape_string($_POST['moduleId']);
    $moduleName = $myDatabase->real_escape_string($_POST['moduleName']);
    $moduleDescription = $myDatabase->real_escape_string($_POST['moduleDescription']);
    $active = $myDatabase->real_escape_string($_POST['active']);
    // </editor-fold>

    if ($moduleId == '') {
        $boolNew = true;
    }

    if ($moduleName != '' && $active != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `module` WHERE UPPER(module_name) = UPPER('{$moduleName}')";
        } else {
            $sql = "SELECT * FROM `module` WHERE UPPER(module_name) = UPPER('{$moduleName}') AND module_id <> {$moduleId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `module` (module_name, module_description, active, entry_by, entry_date) VALUES ("
                    . "'{$moduleName}', '{$moduleDescription}', {$active}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `module` SET "
                    . "module_name = '{$moduleName}', "
                    . "module_description = '{$moduleDescription}', "
                    . "active = {$active} "
                    . "WHERE module_id = {$moduleId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $moduleId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Module has successfully inserted/updated.|' . $moduleId . '|';
            } else {
                $return_value = '|FAIL|Insert/update module failed.||';
            }
        } else {
            $return_value = '|FAIL|Module already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_invoice_data') {
    // <editor-fold defaultstate="collapsed" desc="module_data">
    
    $return_value = '';
    //$boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	$invoiceId = $myDatabase->real_escape_string($_POST['invoiceId']);
	$invoiceNo = $myDatabase->real_escape_string($_POST['invoiceNo']);
   // $invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
    $originalInvoiceNo = $myDatabase->real_escape_string($_POST['originalInvoiceNo']);
    $taxInvoiceNo = $myDatabase->real_escape_string($_POST['taxInvoiceNo']);
    $taxInvoiceDate = $myDatabase->real_escape_string($_POST['taxInvoiceDate']);
	$invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
	//$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
	$remarks = $myDatabase->real_escape_string($_POST['remarks']);
	$originalInvoiceNo2 = $myDatabase->real_escape_string($_POST['originalInvoiceNo2']);
    $taxInvoiceNo2 = $myDatabase->real_escape_string($_POST['taxInvoiceNo2']);
    $taxInvoiceDate2 = $myDatabase->real_escape_string($_POST['taxInvoiceDate2']);
	$invoiceDate2 = $myDatabase->real_escape_string($_POST['invoiceDate2']);
	$remarks2 = $myDatabase->real_escape_string($_POST['remarks2']);
    // </editor-fold>
    
    //if ($moduleId == '') {
    //    $boolNew = true;
    //}
	
	if ($originalInvoiceNo2 == '') {
        $originalInvoiceNo2 = '-';
    }
	if ($taxInvoiceNo2 == '') {
        $taxInvoiceNo2 = '-';
    }
	if ($taxInvoiceDate2 == '') {
        $taxInvoiceDate2 = 'NULL';
    }
	if ($invoiceDate2 == '') {
        $invoiceDate2 = 'NULL';
    }
	if ($remarks2 == '') {
        $remarks2 = '-';
    }
    
    if($invoiceId != '' ) {
		
		$sqla = "INSERT INTO `invoice_update` (invoiceId, originalInvoiceNo2, taxInvoiceNo2, taxInvoiceDate2, invoiceDate2,remarks2, edit_by, edit_date) VALUES ("
                    . "'{$invoiceId}', '{$originalInvoiceNo2}', '{$taxInvoiceNo2}', '{$taxInvoiceDate2}', '{$invoiceDate2}', '{$remarks2}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
			$result = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);
	
        
                $sql = "UPDATE invoice SET "
                       // . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                        . "invoice_no2 = '{$originalInvoiceNo}', "
                        . "invoice_tax = '{$taxInvoiceNo}', "
						//. "stockpileId = '{$stockpileId}', "
						. "remarks = '{$remarks}', "
						. "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
						. "tax_date = STR_TO_DATE('{$taxInvoiceDate}', '%d/%m/%Y') "
                        . "WHERE invoice_id = {$invoiceId}";
            
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			
			/*$sql = "UPDATE gl_report SET "
                       // . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                        . "invoice_no_2 = '{$originalInvoiceNo}', "
                        . "tax_invoice = '{$taxInvoiceNo}', "
						//. "stockpileId = '{$stockpileId}', "
						//. "remarks = '{$remarks}', "
						. "gl_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y') "
						//. "tax_date = STR_TO_DATE('{$taxInvoiceDate}', '%d/%m/%Y') "
                        . "WHERE jurnal_no = '{$invoiceNo}'";
            
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/

            if($result !== false) {
                

                $return_value = '|OK|Successfully Updated.|'. $invoiceId .'|';
				
				$sqlA = "SELECT invoice_detail_id FROM invoice_detail
                                WHERE invoice_id = {$invoiceId}";
                    $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                    if ($resultA !== false && $resultA->num_rows >= 1) {
                        while ($rowA = $resultA->fetch_object()) {

                            $invoiceId = $rowA->invoice_detail_id;
							
							insertGeneralLedger($myDatabase, 'INVOICE DETAIL', $invoiceId);
                            insertReportGL($myDatabase, 'INVOICE DETAIL', $invoiceId);

                        }
                    }
            } else {
                $return_value = '|FAIL|Update Failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
} 
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_invoice_detail') {
    // <editor-fold defaultstate="collapsed" desc="module_data">
    
    $return_value = '';
    $boolNew = false;
    $updatePrediksi = '';
    $insertPrediksi = '';
    $insertPrediksi2 = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	$invoiceId = $myDatabase->real_escape_string($_POST['invoiceId']);
	$invoiceDetailId = $myDatabase->real_escape_string($_POST['invoiceDetailId']);
	$invoiceType = $myDatabase->real_escape_string($_POST['invoiceType']);
	$invoiceTypeOld = $myDatabase->real_escape_string($_POST['invoiceTypeOld']);
	$accountId = $myDatabase->real_escape_string($_POST['accountId']);
	$accountIdOld = $myDatabase->real_escape_string($_POST['accountIdOld']);
	$stockpileId2 = $myDatabase->real_escape_string($_POST['stockpileId2']);
	$stockpileId2Old = $myDatabase->real_escape_string($_POST['stockpileId2Old']);
	$shipmentId1 = $myDatabase->real_escape_string($_POST['shipmentId1']);
	$shipmentId1Old = $myDatabase->real_escape_string($_POST['shipmentId1Old']);
	$uom = $myDatabase->real_escape_string($_POST['uom']);
	$uomOld = $myDatabase->real_escape_string($_POST['uomOld']);
	$notes = $myDatabase->real_escape_string($_POST['notes']);
	$notesOld = $myDatabase->real_escape_string($_POST['notesOld']);

	$codePrediksi = $myDatabase->real_escape_string($_POST['codePrediksi']);
    $prediksiAmount = str_replace(",", "", $myDatabase->real_escape_string($_POST['prediksi_amount']));
    $prediksiId = $myDatabase->real_escape_string($_POST['prediksiDetailId']);
    $oldPrediksi = $myDatabase->real_escape_string($_POST['oldPrediksi']);

    echo "OLD ". $shipmentId1Old;
    echo "new ". $shipmentId1;

    // </editor-fold>
    
    //if ($moduleId == '') {
    //    $boolNew = true;
    //}
	if ($invoiceTypeOld == '') {
        $invoiceTypeOld = 0;
    }
	if ($accountIdOld == '') {
        $accountIdOld = 0;
    }
	if ($stockpileId2Old == '') {
        $stockpileId2Old = 0;
    }
	if ($shipmentId1Old == '') {
        $shipmentId1Old = 0;
    }
	if ($uomOld == '') {
        $uomOld = 0;
    }
	if ($uomOld == '') {
        $uomOld = 0;
    }
	if ($notesOld == '') {
        $notesOld = '-';
    }
	if ($shipmentId1 == '') {
        $shipmentId1 = 0;
    }

    if($shipmentId1Old <> $shipmentId1 && $prediksiId != ''){
        $boolNew = true;
        $updatePrediksi = " prediksi_amount = {$prediksiAmount}, prediksi_code_detail = '{$codePrediksi}', prediction_detail_id = {$prediksiId}, ";
        $insertPrediksi = " prediction_detail_id, ";
        $insertPrediksi2 = " {$oldPrediksi}, ";
    } else if($shipmentId1Old <> $shipmentId1 && $prediksiId == ''){
        $boolNew = true;
        $updatePrediksi = " prediksi_amount = 0, prediksi_code_detail = NULL, prediction_detail_id = 0, ";
        $insertPrediksi = " prediction_detail_id, ";
        $insertPrediksi2 = " {$oldPrediksi}, ";
    } else if($shipmentId1Old == $shipmentId1 && $prediksiId == '' && ($oldPrediksi != 0 || $oldPrediksi != '')){
        $insertPrediksi = " prediction_detail_id, ";
        $insertPrediksi2 = " {$oldPrediksi}, ";
    }
	
    
    if($invoiceDetailId != '' ) {
		
			$sqla = "INSERT INTO `invoice_detail_update` (invoiceDetailId, {$insertPrediksi} invoiceType, accountId, stockpileId2, shipmentId1, uom,notes, edit_by, edit_date) VALUES ("
                    . "'{$invoiceDetailId}', {$insertPrediksi2} '{$invoiceTypeOld}', '{$accountIdOld}', '{$stockpileId2Old}', '{$shipmentId1Old}', '{$uomOld}', '{$notesOld}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
			$result = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);
            // echo "SATU ".$sql;
        
            $sql = "UPDATE invoice_detail SET type = '{$invoiceType}', {$updatePrediksi} account_id = '{$accountId}', stockpile_remark = '{$stockpileId2}', shipment_id = '{$shipmentId1}', idUOM = '{$uom}', notes = '{$notes}' WHERE invoice_detail_id = {$invoiceDetailId}";                       
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            // echo "UPDATEINV " .$sql;

			
			/*$sql = "UPDATE general_ledger SET "
                       // . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                        . "account_id = '{$accountId}' "
                      
						//. "tax_date = STR_TO_DATE('{$taxInvoiceDate}', '%d/%m/%Y') "
                        . "WHERE invoice_id = '{$invoiceDetailId}' AND account_id = '{$accountIdOld}'";
            
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			
			$sql = "SELECT * FROM account WHERE account_id = {$accountId}";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			if($result !== false && $result->num_rows == 1) {
			$row = $result->fetch_object();
			$accountNo = $row->account_no;
			$accountName = $row->account_name;
			}

			$sql = "SELECT * FROM account WHERE account_id = {$accountIdOld}";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			if($result !== false && $result->num_rows == 1) {
			$row = $result->fetch_object();
			$accountNoOld = $row->account_no;
			//$accountName = $row->account_name;
			}
			
			$sql = "SELECT * FROM stockpile WHERE stockpile_id = {$stockpileId2}";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			if($result !== false && $result->num_rows == 1) {
			$row = $result->fetch_object();
			$stockpileName = $row->stockpile_name;
			//$accountName = $row->account_name;
			}
			
			$sql = "SELECT * FROM shipment WHERE shipment_id = {$shipmentId1}";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			if($result !== false && $result->num_rows == 1) {
			$row = $result->fetch_object();
			$shipmentNo = $row->shipment_no;
			//$accountName = $row->account_name;
			}
			
			$sql = "UPDATE gl_report SET "
                       // . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                        . "account_no = '{$accountNo}', "
                        . "account_name = '{$accountName}', "
						. "stockpile = '{$stockpileName}', "
						. "shipment_code = '{$shipmentNo}', "
						. "remarks = '{$notes}' "
						//. "gl_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y') "
						//. "tax_date = STR_TO_DATE('{$taxInvoiceDate}', '%d/%m/%Y') "
                        . "WHERE invoice_id = '{$invoiceDetailId}' AND account_no = '{$accountNoOld}'";
            
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/

            if($result !== false) {
                
                if($boolNew){
                    $sql1 = "UPDATE `accrue_prediction_detail` SET status = 0 WHERE prediction_detail_id = {$oldPrediksi}";
                    $result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT); 

                    $sql1 = "UPDATE `accrue_prediction_detail` SET status = 1 WHERE prediction_detail_id = {$prediksiId}";
                    $result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT); 
                }

                $return_value = '|OK|Successfully Updated.|' .$sqla. '|';


				
				$sqlA = "SELECT invoice_detail_id FROM invoice_detail
                                WHERE invoice_id = {$invoiceId}";
                    $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                    if ($resultA !== false && $resultA->num_rows >= 1) {
                        while ($rowA = $resultA->fetch_object()) {

                            $invoiceId = $rowA->invoice_detail_id;
							
							// insertGeneralLedger($myDatabase, 'INVOICE DETAIL', $invoiceId);
                            // insertReportGL($myDatabase, 'INVOICE DETAIL', $invoiceId);

                        }
                    }
            } else {
                $return_value = '|FAIL|Update Failed.|' .$sql. '|';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_payment_data') {
    // <editor-fold defaultstate="collapsed" desc="module_data">

    $return_value = '';
    //$boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentId = $myDatabase->real_escape_string($_POST['paymentId']);
    $paymentNo = $myDatabase->real_escape_string($_POST['paymentNo']);
    $paymentDate = $myDatabase->real_escape_string($_POST['paymentDate']);
    $invoiceNo = $myDatabase->real_escape_string($_POST['invoiceNo']);
    $invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
    $taxInvoiceNo = $myDatabase->real_escape_string($_POST['taxInvoiceNo']);
    $taxInvoiceDate = $myDatabase->real_escape_string($_POST['taxInvoiceDate']);
	$remarks = $myDatabase->real_escape_string($_POST['remarks']);
	$remarks2 = $myDatabase->real_escape_string($_POST['remarks2']);
	$chequeNo = $myDatabase->real_escape_string($_POST['chequeNo']);
	$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
	$paymentDate2 = $myDatabase->real_escape_string($_POST['paymentDate2']);
    $invoiceNo2 = $myDatabase->real_escape_string($_POST['invoiceNo2']);
    $invoiceDate2 = $myDatabase->real_escape_string($_POST['invoiceDate2']);
    $taxInvoiceNo2 = $myDatabase->real_escape_string($_POST['taxInvoiceNo2']);
    $taxInvoiceDate2 = $myDatabase->real_escape_string($_POST['taxInvoiceDate2']);
	$remarks3 = $myDatabase->real_escape_string($_POST['remarks3']);
	$remarks4 = $myDatabase->real_escape_string($_POST['remarks4']);
	$chequeNo2 = $myDatabase->real_escape_string($_POST['chequeNo2']);
	$stockpileI2 = $myDatabase->real_escape_string($_POST['stockpileId2']);
    // </editor-fold>

    //if ($moduleId == '') {
    //    $boolNew = true;
    //}
	
	if ($invoiceNo2 == '') {
        $invoiceNo2 = 'NULL';
    }
	if ($invoiceDate2 == '') {
        $invoiceDate2 = '0000-00-00';
    }
	if ($taxInvoiceNo2 == '') {
        $taxInvoiceNo2 = 'NULL';
    }
	if ($taxInvoiceDate2 == '') {
        $taxInvoiceDate2 = '0000-00-00';
    }
	if ($chequeNo2 == '') {
        $chequeNo2 = 'NULL';
    }
	

    if ($paymentId != '') {
		
		$sqla = "INSERT INTO `payment_update` (paymentId, invoiceNo, paymentDate, invoiceDate, taxInvoiceNo,taxInvoiceDate,chequeNo,remarks,remarks2, edit_by, edit_date) VALUES ("
                    . "'{$paymentId}', '{$invoiceNo2}', '{$paymentDate2}', '{$invoiceDate2}', '{$taxInvoiceNo2}', '{$taxInvoiceDate2}', '{$chequeNo2}','{$remarks3}', '{$remarks4}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
			$result = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);
		

        $sql = "UPDATE payment SET "
            . "payment_date = STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), "
            . "invoice_no = '{$invoiceNo}', "
            . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
            . "tax_invoice = '{$taxInvoiceNo}', "
			. "remarks = '{$remarks}', "	
			. "remarks2 = '{$remarks2}', "
			. "cheque_no = '{$chequeNo}', "
			. "stockpile_location = '{$stockpileId}', "
            . "tax_invoice_date = STR_TO_DATE('{$taxInvoiceDate}', '%d/%m/%Y') "
            . "WHERE payment_id = {$paymentId}";

        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
		/*$sql = "UPDATE gl_report SET "
                       // . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                        . "gl_date = STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), "
                        . "tax_invoice = '{$taxInvoiceNo}', "
						. "invoice_no = '{$invoiceNo}', "
						. "invoice_no_2 = '{$invoiceNo}', "
						. "remarks = '{$remarks}' "
						//. "gl_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y') "
						//. "tax_date = STR_TO_DATE('{$taxInvoiceDate}', '%d/%m/%Y') "
                        . "WHERE payment_id = '{$paymentId}'";
            
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/

        if ($result !== false) {


            $return_value = '|OK|Successfully Updated.|' . $paymentId . '|'. $sqla . '|';
			
			insertGeneralLedger($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", "NULL", $paymentId);
            insertReportGL($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", "NULL", $paymentId);
        } else {
            $return_value = '|FAIL|Update Failed.||';
        }

    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_cash_payment_data') {
    // <editor-fold defaultstate="collapsed" desc="module_data">

    $return_value = '';
    //$boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentId = $myDatabase->real_escape_string($_POST['paymentId']);
    $paymentNo = $myDatabase->real_escape_string($_POST['paymentNo']);
    $paymentDate = $myDatabase->real_escape_string($_POST['paymentDate']);
    $invoiceNo = $myDatabase->real_escape_string($_POST['invoiceNo']);
    $invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
    $taxInvoiceNo = $myDatabase->real_escape_string($_POST['taxInvoiceNo']);
    $taxInvoiceDate = $myDatabase->real_escape_string($_POST['taxInvoiceDate']);
	 $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    // </editor-fold>

    //if ($moduleId == '') {
    //    $boolNew = true;
    //}

    if ($paymentId != '') {

        $sql = "UPDATE payment SET "
            . "payment_date = STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), "
            . "invoice_no = '{$invoiceNo}', "
            . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
            . "tax_invoice = '{$taxInvoiceNo}', "
			. "remarks = '{$remarks}', "
            . "tax_invoice_date = STR_TO_DATE('{$taxInvoiceDate}', '%d/%m/%Y') "
            . "WHERE payment_id = {$paymentId}";

        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
		/*$sql = "UPDATE gl_report SET "
                       // . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                        . "gl_date = STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), "
                        . "tax_invoice = '{$taxInvoiceNo}', "
						. "invoice_no = '{$invoiceNo}', "
						. "invoice_no_2 = '{$invoiceNo}', "
						. "remarks = '{$remarks}' "
						//. "gl_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y') "
						//. "tax_date = STR_TO_DATE('{$taxInvoiceDate}', '%d/%m/%Y') "
                        . "WHERE payment_id = '{$paymentId}'";
            
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/
		
		$sql = "SELECT * FROM payment a LEFT JOIN bank b ON a.bank_id = b.bank_id WHERE a.payment_id = {$paymentId}";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			if($result !== false && $result->num_rows == 1) {
			$row = $result->fetch_object();
			$payment_cash_id = $row->payment_cash_id;
			$bankType = $row->bank_type;
			}

        if ($result !== false) {


            $return_value = '|OK|Successfully Updated.|' . $paymentId . '|';
			
			
		if ($payment_cash_id == 10 && $bankType == 2) {
                                insertGeneralLedger($myDatabase, 'PETTY CASH', "NULL", "NULL", "NULL", "NULL", $paymentId);
                                insertReportGL($myDatabase, 'PETTY CASH', "NULL", "NULL", "NULL", "NULL", $paymentId);
                            } else {
                                insertGeneralLedger($myDatabase, 'PAYMENT ADMIN', "NULL", "NULL", "NULL", "NULL", $paymentId);
                                insertReportGL($myDatabase, 'PAYMENT ADMIN', "NULL", "NULL", "NULL", "NULL", $paymentId);
                            }
							
        } else {
            $return_value = '|FAIL|Update Failed.||';
        }

    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_cash_payment_detail') {
    // <editor-fold defaultstate="collapsed" desc="module_data">
    
    $return_value = '';
    //$boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	$paymentId = $myDatabase->real_escape_string($_POST['paymentId']);
	$paymentCashId = $myDatabase->real_escape_string($_POST['paymentCashId']);
	$accountId = $myDatabase->real_escape_string($_POST['accountId']);
	$accountIdOld = $myDatabase->real_escape_string($_POST['accountIdOld']);
	$notesOld = $myDatabase->real_escape_string($_POST['notesOld']);
	$notes = $myDatabase->real_escape_string($_POST['notes']);
    // </editor-fold>
    
    //if ($moduleId == '') {
    //    $boolNew = true;
    //}
    
    if($paymentCashId != '' ) {
        
                $sql = "UPDATE payment_cash SET "
                       // . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                        . "account_id = '{$accountId}', "
                        . "notes = '{$notes}' "
						
                        . "WHERE payment_cash_id = {$paymentCashId}";
            
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			
			/*$sql = "UPDATE general_ledger SET "
                       // . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                        . "account_id = '{$accountId}' "
                      
						//. "tax_date = STR_TO_DATE('{$taxInvoiceDate}', '%d/%m/%Y') "
                        . "WHERE cash_id = '{$paymentCashId}' AND account_id = '{$accountIdOld}'";
            
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			
			$sql = "SELECT * FROM account WHERE account_id = {$accountId}";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			if($result !== false && $result->num_rows == 1) {
			$row = $result->fetch_object();
			$accountNo = $row->account_no;
			$accountName = $row->account_name;
			}

			$sql = "SELECT * FROM account WHERE account_id = {$accountIdOld}";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			if($result !== false && $result->num_rows == 1) {
			$row = $result->fetch_object();
			$accountNoOld = $row->account_no;
			//$accountName = $row->account_name;
			}
			
			$sql = "UPDATE gl_report SET "
                       // . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                        . "account_no = '{$accountNo}', "
                        . "account_name = '{$accountName}', "
						//. "stockpileId = '{$stockpileId}', "
						. "remarks = '{$notes}' "
						//. "gl_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y') "
						//. "tax_date = STR_TO_DATE('{$taxInvoiceDate}', '%d/%m/%Y') "
                        . "WHERE payment_id = '{$paymentId}' AND account_no = '{$accountNoOld}' AND remarks = '{$notesOld}'";
            
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/
			
			$sql = "SELECT * FROM payment a LEFT JOIN bank b ON a.bank_id = b.bank_id WHERE a.payment_id = {$paymentId}";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			if($result !== false && $result->num_rows == 1) {
			$row = $result->fetch_object();
			$payment_cash_id = $row->payment_cash_id;
			$bankType = $row->bank_type;
			}

            if($result !== false) {
                $return_value = '|OK|Successfully Updated.||';
				
				if ($payment_cash_id == 10 && $bankType == 2) {
                                insertGeneralLedger($myDatabase, 'PETTY CASH', "NULL", "NULL", "NULL", "NULL", $paymentId);
                                insertReportGL($myDatabase, 'PETTY CASH', "NULL", "NULL", "NULL", "NULL", $paymentId);
                            } else {
                                insertGeneralLedger($myDatabase, 'PAYMENT ADMIN', "NULL", "NULL", "NULL", "NULL", $paymentId);
                                insertReportGL($myDatabase, 'PAYMENT ADMIN', "NULL", "NULL", "NULL", "NULL", $paymentId);
                            }
            } else {
                $return_value = '|FAIL|Update Failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_freight') {
    // <editor-fold defaultstate="collapsed" desc="delete_freight">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    // </editor-fold>

    if ($freightId != '') {
        $sql = "SELECT * FROM `freight_cost` WHERE freight_id = {$freightId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `freight` WHERE freight_id = {$freightId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Freight has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete freight failed.|';
            }
        } else {
            $return_value = '|FAIL|Freight in use in stockpile freight cost.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'freight_data') {
    // <editor-fold defaultstate="collapsed" desc="freight_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    $freightCode = $myDatabase->real_escape_string($_POST['freightCode']);
    $freightSupplier = $myDatabase->real_escape_string($_POST['freightSupplier']);
    $freightAddress = $myDatabase->real_escape_string($_POST['freightAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
    $branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $active = $myDatabase->real_escape_string($_POST['active']);
    $freightRule = $myDatabase->real_escape_string($_POST['freightRule']);
    $nik = $myDatabase->real_escape_string($_POST['nik']);
    // </editor-fold>

    if ($freightId == '') {
        $boolNew = true;
    }

    if ($freightCode != '' && $freightSupplier != '' && $freightAddress != '' && $npwp != '' && $npwp_name != '' && $ppn != '' && $pph != '' && $active != '' && $freightRule != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `freight` WHERE UPPER(freight_supplier) = UPPER('{$freightSupplier}') AND UPPER(freight_code) = UPPER('{$freightCode}')";
        } else {
            $sql = "SELECT * FROM `freight` WHERE UPPER(freight_supplier) = UPPER('{$freightSupplier}') AND UPPER(freight_code) = UPPER('{$freightCode}') AND freight_id <> {$freightId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;

            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }

            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }

            if ($boolNew) {
                $sql = "INSERT INTO `freight` (freight_code, freight_supplier, freight_address, nik, npwp, npwp_name, bank_name, branch, account_no, beneficiary, "
                    . "swift_code, ppn_tax_id, pph_tax_id, ppn, pph, active, freight_rule, entry_by, entry_date) VALUES ("
                    . "UPPER('{$freightCode}'), '{$freightSupplier}', '{$freightAddress}', '{$nik}', '{$npwp}', '{$npwp_name}', '{$bankName}', '{$branch}', '{$accountNo}', "
                    . "'{$beneficiary}', '{$swiftCode}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$active}, {$freightRule}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `freight` SET "
                    . "freight_code = UPPER('{$freightCode}'), "
                    . "freight_supplier = '{$freightSupplier}', "
                    . "freight_address = '{$freightAddress}', "
                    . "nik = '{$nik}', "
                    . "npwp = '{$npwp}', "
                    . "npwp_name = '{$npwp_name}', "
                    . "bank_name = '{$bankName}', "
                    . "branch = '{$branch}', "
                    . "account_no = '{$accountNo}', "
                    . "beneficiary = '{$beneficiary}', "
                    . "swift_code = '{$swiftCode}', "
                    . "ppn_tax_id = {$ppn}, "
                    . "pph_tax_id = {$pph}, "
                    . "ppn = {$ppnValue}, "
                    . "pph = {$pphValue}, "
                    . "active = {$active}, "
                    . "freight_rule = {$freightRule} "
                    . "WHERE freight_id = {$freightId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $freightId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Freight has successfully inserted/updated.|' . $freightId . '|';
            } else {
                $return_value = '|FAIL|Insert/update freight failed.||';
            }
        } else {
            $return_value = '|FAIL|Freight supplier and vendor already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'freight_group_data') {
    // <editor-fold defaultstate="collapsed" desc="freight_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightGroupId = $myDatabase->real_escape_string($_POST['freightGroupId']);
    $freightGroupName = $myDatabase->real_escape_string($_POST['freightGroupName']);
    // </editor-fold>

    if ($freightGroupId == '') {
        $boolNew = true;
    }

    if ($freightGroupName != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `master_group` WHERE UPPER(group_name) = UPPER('{$freightGroupName}')";
        } else {
            $sql = "SELECT * FROM `master_group` WHERE UPPER(group_name) = UPPER('{$freightGroupName}') AND master_group_id <> {$freightGroupId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `master_group` (group_name, entry_by, entry_date) VALUES ("
                    . "'{$freightGroupName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `master_group` SET "
                    . "group_name = '{$freightGroupName}' "
                    . "WHERE master_group_id = {$freightGroupId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $freightGroupId = $myDatabase->insert_id;
                }
                $return_value = '|OK|Group has successfully inserted/updated.|' . $freightGroupId . '|';
            } else {
                $return_value = '|FAIL|Insert/update Group failed.||';
            }
        } else {
            $return_value = '|FAIL|Group already exists.||';
            echo $sql;
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    echo $return_value;
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_freight_group') {
    // <editor-fold defaultstate="collapsed" desc="delete_freight">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightGroupId = $myDatabase->real_escape_string($_POST['freightGroupId']);
    // </editor-fold>

    if ($freightGroupId != '') {
        $sql = "SELECT * FROM `freight_login` WHERE group_id = {$freightGroupId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `master_group` WHERE master_group_id = {$freightGroupId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Group has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete Group failed.|';
            }
        } else {
            $return_value = '|FAIL|Group use in Freight Login.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_vendor') {
    // <editor-fold defaultstate="collapsed" desc="delete_vendor">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    // </editor-fold>

    if ($vendorId != '') {
        $contractCount = 0;
        $freightCount = 0;

        $sql = "SELECT * FROM `contract` WHERE vendor_id = {$vendorId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $contractCount = $result->num_rows;

        $sql = "SELECT * FROM `freight` WHERE vendor_id = {$vendorId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $freightCount = $result->num_rows;

        if ($contractCount == 0 && $freightCount == 0) {
            $sql = "DELETE FROM `vendor` WHERE vendor_id = {$vendorId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Vendor has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete vendor failed.|';
            }
        } else {
            $return_value = '|FAIL|Vendor in use in freight and contract.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'vendor_data') {
    // <editor-fold defaultstate="collapsed" desc="vendor_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    $vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $bankName = '-';
    $branch = '-';
    $accountNo = '-';
    $beneficiary = '-';
    $swiftCode = '-';
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $active = $myDatabase->real_escape_string($_POST['active']);
    $nik = $myDatabase->real_escape_string($_POST['nik']);
    $ggl = $myDatabase->real_escape_string($_POST['ggl']);
    $rsb = $myDatabase->real_escape_string($_POST['rsb']);
    // </editor-fold>

    if ($vendorId == '') {
        $boolNew = true;
    }

    if ($vendorCode != '' && $vendorName != '' && $vendorAddress != '' && $npwp != '' && $npwp_name != '' && $ppn != '' && $pph != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$vendorCode}')";
        } else {
            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$vendorCode}') AND vendor_id <> {$vendorId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;

            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }

            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }

            if ($boolNew) {
                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, nik, npwp, npwp_name, bank_name, branch, account_no, beneficiary, "
                    . "swift_code, ppn_tax_id, pph_tax_id, ppn, pph, active, entry_by, entry_date, ggl, rsb) VALUES ("
                    . "UPPER('{$vendorCode}'), '{$vendorName}', '{$vendorAddress}', '{$nik}', '{$npwp}', '{$npwp_name}', '{$bankName}', '{$branch}', '{$accountNo}', "
                    . "'{$beneficiary}', '{$swiftCode}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$active}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$ggl}, {$rsb})";
            } else {
                $sql = "UPDATE `vendor` SET "
                    . "vendor_code = UPPER('{$vendorCode}'), "
                    . "vendor_name = '{$vendorName}', "
                    . "vendor_address = '{$vendorAddress}', "
                    . "nik = '{$nik}', "
                    . "npwp = '{$npwp}', "
                    . "npwp_name = '{$npwp_name}', "
                    . "bank_name = '{$bankName}', "
                    . "branch = '{$branch}', "
                    . "account_no = '{$accountNo}', "
                    . "beneficiary = '{$beneficiary}', "
                    . "swift_code = '{$swiftCode}', "
                    . "ppn_tax_id = {$ppn}, "
                    . "pph_tax_id = {$pph}, "
                    . "ppn = {$ppnValue}, "
                    . "pph = {$pphValue}, "
                    . "active = {$active}, "
                    . "ggl = {$ggl}, "
                    . "rsb = {$rsb} "
                    . "WHERE vendor_id = {$vendorId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $vendorId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Vendor has successfully inserted/updated.|' . $vendorId . '|';
            } else {
                $return_value = '|FAIL|Insert/update vendor failed.||' .$sql;
            }
        } else {
            $return_value = '|FAIL|Vendor code already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'general_vendor_pph') {
    // <editor-fold defaultstate="collapsed" desc="general_vendor_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $taxId = $myDatabase->real_escape_string($_POST['taxId']);

    // </editor-fold>


    if ($vendorId != '' && $taxId != '') {


        $sql = "INSERT INTO `general_vendor_pph` (general_vendor_id, pph_tax_id) VALUES ({$vendorId},{$taxId})";

        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            if ($boolNew) {
                $vendorId = $myDatabase->insert_id;
            }

            $return_value = '|OK|PPh General Vendor has successfully inserted.|' . $vendorId . '|';
        } else {
            $return_value = '|FAIL|Insert/update vendor failed.||';
        }

    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_general_vendor') {
    // <editor-fold defaultstate="collapsed" desc="delete_general_vendor">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    // </editor-fold>

    if ($vendorId != '') {
        $paymentCount = 0;

        $sql = "SELECT * FROM `payment` WHERE general_vendor_id = {$vendorId} AND payment_status = 0";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $contractCount = $result->num_rows;

        if ($paymentCount == 0) {
            $sql = "DELETE FROM `general_vendor` WHERE general_vendor_id = {$vendorId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|General Vendor has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete vendor failed.|';
            }
        } else {
            $return_value = '|FAIL|General Vendor in use in payment.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'general_vendor_data') {
    // <editor-fold defaultstate="collapsed" desc="general_vendor_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    $vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
    $branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    //$pph = $myDatabase->real_escape_string($_POST['pph']);
    $active = $myDatabase->real_escape_string($_POST['active']);
    $nik = $myDatabase->real_escape_string($_POST['nik']);
    // </editor-fold>

    if ($vendorId == '') {
        $boolNew = true;
    }

    if ($vendorName != '' && $vendorAddress != '' && $npwp != '' && $npwp_name != '' && $ppn != '' /*&& $pph != ''*/) {
        if ($boolNew) {
            $sql = "SELECT * FROM `general_vendor` WHERE UPPER(general_vendor_name) = UPPER('{$vendorName}')";
        } else {
            $sql = "SELECT * FROM `general_vendor` WHERE UPPER(general_vendor_name) = UPPER('{$vendorName}') AND general_vendor_id <> {$vendorId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;
            $pph = 0;

            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }

            /*$sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }*/

            if ($boolNew) {
                $sql = "INSERT INTO `general_vendor` (general_vendor_name, general_vendor_address, nik, npwp, npwp_name, bank_name, branch, account_no, beneficiary, "
                    . "swift_code, ppn_tax_id, pph_tax_id, ppn, pph, active, entry_by, entry_date) VALUES ("
                    . "'{$vendorName}', '{$vendorAddress}', '{$nik}', '{$npwp}', '{$npwp_name}', '{$bankName}', '{$branch}', '{$accountNo}', "
                    . "'{$beneficiary}', '{$swiftCode}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$active}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `general_vendor` SET "
                    . "general_vendor_name = '{$vendorName}', "
                    . "general_vendor_address = '{$vendorAddress}', "
                    . "nik = '{$nik}', "
                    . "npwp = '{$npwp}', "
                    . "npwp_name = '{$npwp_name}', "
                    . "bank_name = '{$bankName}', "
                    . "branch = '{$branch}', "
                    . "account_no = '{$accountNo}', "
                    . "beneficiary = '{$beneficiary}', "
                    . "swift_code = '{$swiftCode}', "
                    . "ppn_tax_id = {$ppn}, "
                    . "pph_tax_id = {$pph}, "
                    . "ppn = {$ppnValue}, "
                    . "pph = {$pphValue}, "
                    . "active = {$active} "
                    . "WHERE general_vendor_id = {$vendorId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $vendorId = $myDatabase->insert_id;
                }

                $return_value = '|OK|General Vendor has successfully inserted/updated.|' . $vendorId . '|';
            } else {
                $return_value = '|FAIL|Insert/update vendor failed.||';
            }
        } else {
            $return_value = '|FAIL|General Vendor already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_account') {
    // <editor-fold defaultstate="collapsed" desc="delete_account">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    // </editor-fold>

    if ($accountId != '') {
        $sql = "SELECT * FROM `payment` WHERE account_id = {$accountId} AND payment_status = 0";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `account` WHERE account_id = {$accountId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Account has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete account failed.|';
            }
        } else {
            $return_value = '|FAIL|Account in use in payments.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'account_data') {
    // <editor-fold defaultstate="collapsed" desc="account_data">

    $return_value = '';
    $boolNew = false;
    $whereCondition = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $accountType = $myDatabase->real_escape_string($_POST['accountType']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $accountName = $myDatabase->real_escape_string($_POST['accountName']);
    $description = $myDatabase->real_escape_string($_POST['description']);
    // </editor-fold>

    if ($accountId == '') {
        $boolNew = true;
    }

    if ($accountType == 1) {
        $whereCondition = " account_type in (0,1) ";
    } else {
        $whereCondition = " account_type = {$accountType} ";
    }

    if ($accountType != '' && $accountNo != '' && $accountName != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `account` WHERE {$whereCondition} AND account_no = '{$accountNo}'";
        } else {
            $sql = "SELECT * FROM `account` WHERE {$whereCondition} AND account_no = '{$accountNo}' AND account_id <> {$accountId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                if ($accountType == 1) {
                    $sql = "INSERT INTO `account` (account_type, account_no, account_name, description, entry_by, entry_date) VALUES ("
                        . "{$accountType}, '{$accountNo}', '{$accountName}', '{$description}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";

                } else {
                    $sql = "INSERT INTO `account` (account_type, account_no, account_name, description, entry_by, entry_date) VALUES ("
                        . "{$accountType}, '{$accountNo}', '{$accountName}', '{$description}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                }
            } else {
                $sql = "UPDATE `account` SET "
                    . "account_type = '{$accountType}', "
                    . "account_no = '{$accountNo}', "
                    . "account_name = '{$accountName}', "
                    . "description = '{$description}' "
                    . "WHERE account_id = {$accountId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $accountId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Account has successfully inserted/updated.|' . $accountId . '|';
            } else {
                $return_value = '|FAIL|Insert/update account failed.||';
            }
        } else {
            $return_value = '|FAIL|Account already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_bank') {
    // <editor-fold defaultstate="collapsed" desc="delete_bank">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $bankId = $myDatabase->real_escape_string($_POST['bankId']);
    // </editor-fold>

    if ($accountId != '') {
        $sql = "SELECT * FROM `payment` WHERE bank_id = {$bankId} AND payment_status = 0";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `bank` WHERE bank_id = {$bankId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Bank has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete bank failed.|';
            }
        } else {
            $return_value = '|FAIL|Bank in use in payments.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_tax') {
    // <editor-fold defaultstate="collapsed" desc="delete_vendor">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $taxId = $myDatabase->real_escape_string($_POST['taxId']);
    // </editor-fold>

    if ($taxId != '') {
        $vendor = 0;
        $labor = 0;
        $generalVendor = 0;
        $freight = 0;
        $customer = 0;

        $sql = "SELECT * FROM `vendor` WHERE ppn_tax_id = {$taxId} OR pph_tax_id = {$taxId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $vendor = $result->num_rows;

        $sql = "SELECT * FROM `labor` WHERE ppn_tax_id = {$taxId} OR pph_tax_id = {$taxId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $labor = $result->num_rows;

        $sql = "SELECT * FROM `general_vendor` WHERE ppn_tax_id = {$taxId} OR pph_tax_id = {$taxId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $generalVendor = $result->num_rows;

        $sql = "SELECT * FROM `freight` WHERE ppn_tax_id = {$taxId} OR pph_tax_id = {$taxId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $freight = $result->num_rows;

        $sql = "SELECT * FROM `customer` WHERE ppn_tax_id = {$taxId} OR pph_tax_id = {$taxId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $customer = $result->num_rows;

        if ($vendor == 0 && $labor == 0 && $generalVendor == 0 && $freight == 0 && $customer == 0) {
            $sql = "DELETE FROM `tax` WHERE tax_id = {$taxId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Tax has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete Tax failed.|';
            }
        } else {
            $return_value = '|FAIL|Tax in use in VENDOR, LABOR, GENERAL VENDOR, FREIGHT, CUSTOMER.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'tax_data') {
    // <editor-fold defaultstate="collapsed" desc="bank_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $taxId = $myDatabase->real_escape_string($_POST['taxId']);
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $taxType = $myDatabase->real_escape_string($_POST['taxType']);
    $taxCategory = $myDatabase->real_escape_string($_POST['taxCategory']);
    $taxName = $myDatabase->real_escape_string($_POST['taxName']);
    //$openingBalance = str_replace(",", "", $myDatabase->real_escape_string($_POST['openingBalance']));
    $taxValue = $myDatabase->real_escape_string($_POST['taxValue']);
    $active = $myDatabase->real_escape_string($_POST['active']);
    //$bankCode = $myDatabase->real_escape_string($_POST['bankCode']);
    // </editor-fold>

    if ($taxId == '') {
        $boolNew = true;
    }

    if ($accountId != '' && $taxType != '' && $taxCategory != '' && $taxName != '' && $taxValue != '' && $active != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `tax` WHERE tax_name = '{$taxName}' AND tax_value = '{$taxValue}'";
        } else {
            $sql = "SELECT * FROM `tax` WHERE tax_name = '{$taxName}' AND tax_value = {$taxValue} AND tax_id <> {$taxId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `tax` (account_id, tax_type, tax_category, tax_name, tax_value, active, entry_by, entry_date) VALUES ("
                    . "{$accountId}, {$taxType}, {$taxCategory}, '{$taxName}', '{$taxValue}', {$active}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `tax` SET "
                    . "account_id = {$accountId}, "
                    . "tax_type = {$taxType}, "
                    . "tax_category = {$taxCategory}, "
                    . "tax_name = '{$taxName}', "
                    . "tax_value = '{$taxValue}', "
                    . "active = {$active} "
                    . "WHERE tax_id = {$taxId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $taxId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Tax has successfully inserted/updated.|' . $taxId . '|';
            } else {
                $return_value = '|FAIL|Insert/update tax failed.||';
            }
        } else {
            $return_value = '|FAIL|Tax already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'bank_data') {
    // <editor-fold defaultstate="collapsed" desc="bank_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $bankId = $myDatabase->real_escape_string($_POST['bankId']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
    $bankAccountNo = $myDatabase->real_escape_string($_POST['bankAccountNo']);
    $bankAccountName = $myDatabase->real_escape_string($_POST['bankAccountName']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $openingBalance = str_replace(",", "", $myDatabase->real_escape_string($_POST['openingBalance']));
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $bankType = $myDatabase->real_escape_string($_POST['bankType']);
    $bankCode = $myDatabase->real_escape_string($_POST['bankCode']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    // </editor-fold>

    if ($bankId == '') {
        $boolNew = true;
    }

    if ($bankName != '' && $bankAccountNo != '' && $bankAccountName != '' && $currencyId != '' && $accountId != '' && $openingBalance != '' &&
        $bankType != '' && $bankCode != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `bank` WHERE UPPER(bank_name) = UPPER('{$bankName}') AND bank_account_no = '{$bankAccountNo}'";
        } else {
            $sql = "SELECT * FROM `bank` WHERE UPPER(bank_name) = UPPER('{$bankName}') AND bank_account_no = '{$bankAccountNo}' AND bank_id <> {$bankId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `bank` (bank_name, bank_type, stockpile_id, bank_code, bank_account_no, bank_account_name, currency_id, opening_balance, account_id, entry_by, entry_date) VALUES ("
                    . "'{$bankName}', {$bankType}, {$stockpileId}, '{$bankCode}', '{$bankAccountNo}', '{$bankAccountName}', {$currencyId}, {$openingBalance}, {$accountId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `bank` SET "
                    . "bank_name = '{$bankName}', "
                    . "bank_type = {$bankType}, "
                    . "stockpile_id = {$stockpileId}, "
                    . "bank_code = '{$bankCode}', "
                    . "bank_account_no = '{$bankAccountNo}', "
                    . "bank_account_name = '{$bankAccountName}', "
                    . "currency_id = {$currencyId}, "
                    . "opening_balance = {$openingBalance}, "
                    . "account_id = {$accountId} "
                    . "WHERE bank_id = {$bankId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $bankId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Bank has successfully inserted/updated.|' . $bankId . '|';
            } else {
                $return_value = '|FAIL|Insert/update bank failed.||';
            }
        } else {
            $return_value = '|FAIL|Bank already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_category') {
    // <editor-fold defaultstate="collapsed" desc="delete_category">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $categoryId = $myDatabase->real_escape_string($_POST['categoryId']);
    // </editor-fold>

    if ($categoryId != '') {
        $sql = "SELECT * FROM `condition` WHERE category_id = {$categoryId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `category` WHERE category_id = {$categoryId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Category has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete category failed.|';
            }
        } else {
            $return_value = '|FAIL|Category in use in condition.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'category_data') {
    // <editor-fold defaultstate="collapsed" desc="category_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $categoryId = $myDatabase->real_escape_string($_POST['categoryId']);
    $categoryName = $myDatabase->real_escape_string($_POST['categoryName']);
    // </editor-fold>

    if ($categoryId == '') {
        $boolNew = true;
    }

    if ($categoryName != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `category` WHERE UPPER(category_name) = UPPER('{$categoryName}')";
        } else {
            $sql = "SELECT * FROM `category` WHERE UPPER(category_name) = UPPER('{$categoryName}') AND category_id <> {$categoryId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `category` (category_name, entry_by, entry_date) VALUES ("
                    . "'{$categoryName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `category` SET "
                    . "category_name = '{$categoryName}' "
                    . "WHERE category_id = {$categoryId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $categoryId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Category has successfully inserted/updated.|' . $categoryId . '|';
            } else {
                $return_value = '|FAIL|Insert/update category failed.||';
            }
        } else {
            $return_value = '|FAIL|Category already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_vehicle') {
    // <editor-fold defaultstate="collapsed" desc="delete_vehicle">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vehicleId = $myDatabase->real_escape_string($_POST['vehicleId']);
    // </editor-fold>

    if ($vehicleId != '') {
        $sql = "SELECT * FROM `unloading_cost` WHERE vehicle_id = {$vehicleId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `vehicle` WHERE vehicle_id = {$vehicleId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Vehicle has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete vehicle failed.|';
            }
        } else {
            $return_value = '|FAIL|Vehicle in use in stockpile unloading cost.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'vehicle_data') {
    // <editor-fold defaultstate="collapsed" desc="vehicle_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vehicleId = $myDatabase->real_escape_string($_POST['vehicleId']);
    $vehicleName = $myDatabase->real_escape_string($_POST['vehicleName']);
    // </editor-fold>

    if ($vehicleId == '') {
        $boolNew = true;
    }

    if ($vehicleName != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `vehicle` WHERE UPPER(vehicle_name) = UPPER('{$vehicleName}')";
        } else {
            $sql = "SELECT * FROM `vehicle` WHERE UPPER(vehicle_name) = UPPER('{$vehicleName}') AND vehicle_id <> {$vehicleId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `vehicle` (vehicle_name, entry_by, entry_date) VALUES ("
                    . "'{$vehicleName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `vehicle` SET "
                    . "vehicle_name = '{$vehicleName}' "
                    . "WHERE vehicle_id = {$vehicleId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $vehicleId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Vehicle has successfully inserted/updated.|' . $vehicleId . '|';
            } else {
                $return_value = '|FAIL|Insert/update vehicle failed.||';
            }
        } else {
            $return_value = '|FAIL|Vehicle already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_customer') {
    // <editor-fold defaultstate="collapsed" desc="delete_customer">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    // </editor-fold>

    if ($customerId != '') {
        $sql = "SELECT * FROM `sales` WHERE customer_id = {$customerId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `customer` WHERE customer_id = {$customerId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Customer has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete customer failed.|';
            }
        } else {
            $return_value = '|FAIL|Customer in use in sales agreement.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'customer_data') {
    // <editor-fold defaultstate="collapsed" desc="customer_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    $customerName = $myDatabase->real_escape_string($_POST['customerName']);
    $customerAddress = $myDatabase->real_escape_string($_POST['customerAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
    $branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>

    if ($customerId == '') {
        $boolNew = true;
    }

    if ($customerName != '' && $customerAddress != '' && $npwp != '' && $npwp_name != '' && $ppn != '' && $pph != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$customerName}')";
        } else {
            $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$customerName}') AND customer_id <> {$customerId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;

            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }

            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }

            if ($boolNew) {
                $sql = "INSERT INTO `customer` (customer_name, customer_address, npwp, npwp_name, bank_name, branch, account_no, beneficiary, "
                    . "swift_code, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                    . "'{$customerName}', '{$customerAddress}', '{$npwp}', '{$npwp_name}', '{$bankName}', '{$branch}', '{$accountNo}', "
                    . "'{$beneficiary}', '{$swiftCode}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `customer` SET "
                    . "customer_name = '{$customerName}', "
                    . "customer_address = '{$customerAddress}', "
                    . "npwp = '{$npwp}', "
                    . "npwp_name = '{$npwp_name}', "
                    . "bank_name = '{$bankName}', "
                    . "branch = '{$branch}', "
                    . "account_no = '{$accountNo}', "
                    . "beneficiary = '{$beneficiary}', "
                    . "swift_code = '{$swiftCode}', "
                    . "ppn_tax_id = {$ppn}, "
                    . "pph_tax_id = {$pph}, "
                    . "ppn = {$ppnValue}, "
                    . "pph = {$pphValue} "
                    . "WHERE customer_id = {$customerId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $customerId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Customer has successfully inserted/updated.|' . $customerId . '|';
            } else {
                $return_value = '|FAIL|Insert/update customer failed.||';
            }
        } else {
            $return_value = '|FAIL|Customer already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_labor') {
    // <editor-fold defaultstate="collapsed" desc="delete_labor">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    // </editor-fold>

    if ($laborId != '') {
        $sql = "SELECT * FROM `transaction` WHERE labor_id = {$laborId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `labor` WHERE labor_id = {$laborId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Labor worker has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete labor worker failed.|';
            }
        } else {
            $return_value = '|FAIL|Labor worker in use in transaction.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'labor_data') {
    // <editor-fold defaultstate="collapsed" desc="labor_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $laborName = $myDatabase->real_escape_string($_POST['laborName']);
    $laborAddress = $myDatabase->real_escape_string($_POST['laborAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
    $branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $active = $myDatabase->real_escape_string($_POST['active']);
    $nik = $myDatabase->real_escape_string($_POST['nik']);
	$laborRules = $myDatabase->real_escape_string($_POST['laborRules']);
    // </editor-fold>

    if ($laborId == '') {
        $boolNew = true;
    }

    if ($laborName != '' && $laborAddress != '' && $npwp != '' && $ppn != '' && $pph != '' && $laborRules != 0) {
        if ($boolNew) {
            $sql = "SELECT * FROM `labor` WHERE UPPER(labor_name) = UPPER('{$laborName}')";
        } else {
            $sql = "SELECT * FROM `labor` WHERE UPPER(labor_name) = UPPER('{$laborName}') AND labor_id <> {$laborId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;

            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }

            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }

            if ($boolNew) {
                $sql = "INSERT INTO `labor` (labor_name, labor_address, nik, npwp, npwp_name, bank_name, branch, account_no, beneficiary, "
                    . "swift_code, ppn_tax_id, pph_tax_id, ppn, pph, active, entry_by, entry_date, laborRules) VALUES ("
                    . "'{$laborName}', '{$laborAddress}', '{$nik}', '{$npwp}', '{$npwp_name}', '{$bankName}', '{$branch}', '{$accountNo}', "
                    . "'{$beneficiary}', '{$swiftCode}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$active}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$laborRules})";
            } else {
                $sql = "UPDATE `labor` SET "
                    . "labor_name = '{$laborName}', "
                    . "labor_address = '{$laborAddress}', "
                    . "nik = '{$nik}', "
                    . "npwp = '{$npwp}', "
                    . "npwp_name = '{$npwp_name}', "
                    . "bank_name = '{$bankName}', "
                    . "branch = '{$branch}', "
                    . "account_no = '{$accountNo}', "
                    . "beneficiary = '{$beneficiary}', "
                    . "swift_code = '{$swiftCode}', "
                    . "ppn_tax_id = {$ppn}, "
                    . "pph_tax_id = {$pph}, "
                    . "ppn = {$ppnValue}, "
                    . "pph = {$pphValue}, "
					. "laborRules = {$laborRules}, "
                    . "active = {$active} "
                    . "WHERE labor_id = {$laborId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $laborId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Labor worker has successfully inserted/updated.|' . $laborId . '|';
            } else {
                $return_value = '|FAIL|Insert/update labor worker failed.||';
            }
        } else {
            $return_value = '|FAIL|Labor worker already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'currency_data') {
    // <editor-fold defaultstate="collapsed" desc="currency_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $currencyCode = $myDatabase->real_escape_string($_POST['currencyCode']);
    $currencyName = $myDatabase->real_escape_string($_POST['currencyName']);
    $isCountryCurrency = $myDatabase->real_escape_string($_POST['isCountryCurrency']);
    $isPurchaseCurrency = $myDatabase->real_escape_string($_POST['isPurchaseCurrency']);
    $isSalesCurrency = $myDatabase->real_escape_string($_POST['isSalesCurrency']);
    $isReportCurrency = $myDatabase->real_escape_string($_POST['isReportCurrency']);
    // </editor-fold>

    if ($currencyId == '') {
        $boolNew = true;
    }

    if ($currencyCode != '' && $currencyName != '' && $isCountryCurrency != '' && $isPurchaseCurrency != '' &&
        $isSalesCurrency != '' && $isReportCurrency != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `currency` WHERE UPPER(currency_code) = UPPER('{$currencyCode}')";
        } else {
            $sql = "SELECT * FROM `currency` WHERE UPPER(currency_code) = UPPER('{$currencyCode}') AND currency_id <> {$currencyId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `currency` (currency_code, currency_name, is_country_currency, is_purchase_currency, is_sales_currency, is_report_currency, entry_by, entry_date) VALUES ("
                    . "UPPER('{$currencyCode}'), '{$currencyName}', {$isCountryCurrency}, {$isPurchaseCurrency}, {$isSalesCurrency}, {$isReportCurrency}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `currency` SET "
                    . "currency_code = UPPER('{$currencyCode}'),"
                    . "currency_name = '{$currencyName}', "
                    . "is_country_currency = {$isCountryCurrency}, "
                    . "is_purchase_currency = {$isPurchaseCurrency}, "
                    . "is_sales_currency = {$isSalesCurrency}, "
                    . "is_report_currency = {$isReportCurrency} "
                    . "WHERE currency_id = {$currencyId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $currencyId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Currency has successfully inserted/updated.|' . $currencyId . '|';
            } else {
                $return_value = '|FAIL|Insert/update currency failed.||';
            }
        } else {
            $return_value = '|FAIL|Currency already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'stockpile_data') {
    // <editor-fold defaultstate="collapsed" desc="stockpile_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockpileCode = $myDatabase->real_escape_string($_POST['stockpileCode']);
    $stockpileName = $myDatabase->real_escape_string($_POST['stockpileName']);
    $stockpileAddress = $myDatabase->real_escape_string($_POST['stockpileAddress']);
    $active = $myDatabase->real_escape_string($_POST['active']);
    $freightWeightRule = $myDatabase->real_escape_string($_POST['freightWeightRule']);
    $curahWeightRule = $myDatabase->real_escape_string($_POST['curahWeightRule']);
    // </editor-fold>

    if ($stockpileId == '') {
        $boolNew = true;
    }

    if ($stockpileCode != '' && $stockpileName != '' && $active != '' && $freightWeightRule != '' && $curahWeightRule != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `stockpile` WHERE UPPER(stockpile_code) = UPPER('{$stockpileCode}') AND UPPER(stockpile_name) = UPPER('{$stockpileName}')";
        } else {
            $sql = "SELECT * FROM `stockpile` WHERE UPPER(stockpile_code) = UPPER('{$stockpileCode}') AND UPPER(stockpile_name) = UPPER('{$stockpileName}') AND stockpile_id <> {$stockpileId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `stockpile` (stockpile_code, stockpile_name, stockpile_address, active, freight_weight_rule, curah_weight_rule, entry_by, entry_date) VALUES ("
                    . "UPPER('{$stockpileCode}'), '{$stockpileName}', '{$stockpileAddress}', {$active}, {$freightWeightRule}, {$curahWeightRule}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `stockpile` SET "
                    . "stockpile_code = UPPER('{$stockpileCode}'), "
                    . "stockpile_name = '{$stockpileName}',"
                    . "stockpile_address = '{$stockpileAddress}', "
                    . "freight_weight_rule = {$freightWeightRule}, "
                    . "curah_weight_rule = {$curahWeightRule}, "
                    . "active = {$active} "
                    . "WHERE stockpile_id = {$stockpileId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $stockpileId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Stockpile has successfully inserted/updated.|' . $stockpileId . '|';
            } else {
                $return_value = '|FAIL|Insert/update stockpile failed.||';
            }
        } else {
            $return_value = '|FAIL|Stockpile already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_stockpile_freight') {
    // <editor-fold defaultstate="collapsed" desc="delete_stockpile_freight">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightCostId = $myDatabase->real_escape_string($_POST['freightCostId']);
    // </editor-fold>

    if ($freightCostId != '') {
        $sql = "SELECT * FROM `transaction` WHERE freight_cost_id = {$freightCostId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `freight_cost` WHERE freight_cost_id = {$freightCostId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Freight cost has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete freight cost failed.|';
            }
        } else {
            $return_value = '|FAIL|Freight cost in use in condition.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
}  elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'stockpile_block_data') {
    // <editor-fold defaultstate="collapsed" desc="stockpile_freight_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileBlockId = $myDatabase->real_escape_string($_POST['stockpileBlockId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $spBlock = $myDatabase->real_escape_string($_POST['spBlock']);
    $ggl = $myDatabase->real_escape_string($_POST['ggl']);
    $rsb = $myDatabase->real_escape_string($_POST['rsb']);
    // </editor-fold>

    if ($stockpileBlockId == '') {
        $boolNew = true;
    }


    if ($stockpileId != '' && $spBlock != '') {

            if ($boolNew) {
                $sql = "INSERT INTO `MST_SP_Block` (stockpile_id, sp_block, GGL, RSB, entry_by, entry_date) VALUES ("
                    . "{$stockpileId},'{$spBlock}', {$ggl}, {$rsb},"
                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `MST_SP_Block` SET "
                    . "sp_block = '{$spBlock}', "
                    . "ggl = {$ggl}, "
                    . "rsb = {$rsb} "
                    . "WHERE sp_block_id = {$stockpileBlockId}";

            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Stockpile Block Data has successfully inserted/updated.|';
            } else {
                $return_value = '|FAIL|Insert/update Stockple Block failed.|';
                echo $sql;
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'stockpile_freight_data') {
    // <editor-fold defaultstate="collapsed" desc="stockpile_freight_data">

    $return_value = '';
    $boolNew = false;
    $boolShrink = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightCostId = $myDatabase->real_escape_string($_POST['freightCostId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $paymentNotes = $myDatabase->real_escape_string($_POST['paymentNotes']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    $contractPKHOA = $myDatabase->real_escape_string($_POST['contractPKHOA']);
    $shrink_tolerance_kg = $myDatabase->real_escape_string($_POST['shrink_tolerance_kg']);
    $shrink_tolerance_persen = $myDatabase->real_escape_string($_POST['shrink_tolerance_persen']);
    $shrink_claim = $myDatabase->real_escape_string($_POST['shrink_claim']);
    $active_from = $myDatabase->real_escape_string($_POST['active_from']);
    // </editor-fold>

    if ($freightCostId == '') {
        $boolNew = true;
    }


    if ($freightId != '' && $currencyId != '' && $price != '' && $vendorId != '') {
        if ($shrink_tolerance_kg > 0 && $shrink_tolerance_persen > 0) {
            $boolShrink = false;
        }

        if ($exchangeRate == '') {
            $exchangeRate = 1;
        }

        $priceConverted = $price * $exchangeRate;
        if ($boolShrink) {
            if ($boolNew) {
                $sql = "INSERT INTO `freight_cost` (freight_id, stockpile_id, vendor_id, currency_id, exchange_rate, price, "
                    . "price_converted, payment_notes, remarks, company_id, entry_by, entry_date,contract_pkhoa,shrink_tolerance_kg,shrink_tolerance_persen,shrink_claim, active_from) VALUES ("
                    . "{$freightId}, {$stockpileId}, {$vendorId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, "
                    . "'{$paymentNotes}', '{$remarks}', {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),'{$contractPKHOA}','{$shrink_tolerance_kg}','{$shrink_tolerance_persen}','{$shrink_claim}','{$active_from}')";
            } else {
                $sql = "UPDATE `freight_cost` SET "
                    . "freight_id = {$freightId}, "
                    . "currency_id = {$currencyId}, "
                    . "exchange_rate = {$exchangeRate}, "
                    . "vendor_id = {$vendorId}, "
                    . "price = {$price}, "
                    . "price_converted = {$priceConverted}, "
                    . "payment_notes = '{$paymentNotes}', "
                    . "contract_pkhoa = '{$contractPKHOA}', "
                    . "remarks = '{$remarks}', "
                    . "shrink_tolerance_kg = '{$shrink_tolerance_kg}', "
                    . "shrink_tolerance_persen = '{$shrink_tolerance_persen}', "
                    . "shrink_claim = '{$shrink_claim}', "
                    . "active_from = '{$active_from}', "
                    . "modify_by = {$_SESSION['userId']}, "
                    . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "

                    . "WHERE freight_cost_id = {$freightCostId}";

            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Freight cost has successfully inserted/updated.|';
            } else {
                $return_value = '|FAIL|Insert/update freight cost failed.|';
                echo $sql;
            }
        } else {
            $return_value = '|FAIL|Please Choose One Shrink Tolerance.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'stockpile_unloading_data') {
    // <editor-fold defaultstate="collapsed" desc="stockpile_unloading_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $unloadingCostId = $myDatabase->real_escape_string($_POST['unloadingCostId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $vehicleId = $myDatabase->real_escape_string($_POST['vehicleId']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    // </editor-fold>

    if ($unloadingCostId == '') {
        $boolNew = true;
    }

    if ($vehicleId != '' && $currencyId != '' && $price != '') {

        if ($exchangeRate == '') {
            $exchangeRate = 1;
        }

        $priceConverted = $price * $exchangeRate;

        if ($boolNew) {
            $sql = "INSERT INTO `unloading_cost` (vehicle_id, stockpile_id, currency_id, exchange_rate, price, "
                . "price_converted, company_id, entry_by, entry_date) VALUES ("
                . "{$vehicleId}, {$stockpileId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, "
                . "{$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        } else {
            $sql = "UPDATE `unloading_cost` SET "
                . "vehicle_id = {$vehicleId}, "
                . "currency_id = {$currencyId}, "
                . "exchange_rate = {$exchangeRate}, "
                . "price = {$price}, "
                . "price_converted = {$priceConverted}, "
                . "modify_by = {$_SESSION['userId']}, "
                . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                . "WHERE unloading_cost_id = {$unloadingCostId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Unloading cost has successfully inserted/updated.|';
        } else {
            $return_value = '|FAIL|Insert/update unloading cost failed.|';
        }

    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_customer_data">

    $return_value = '';
    //$boolShipment1 = false;

    $transaction_id = $myDatabase->real_escape_string($_POST['transaction_id']);
    $gl_add_date = $myDatabase->real_escape_string($_POST['gl_add_date']);
    //$gl_add_no = $myDatabase->real_escape_string($_POST['gl_add_no']);
    $stockpile_id = $myDatabase->real_escape_string($_POST['stockpile_id']);
    $general_vendor_id = $myDatabase->real_escape_string($_POST['general_vendor_id']);
    $vendor_id = $myDatabase->real_escape_string($_POST['vendor_id']);
    $contract_id = $myDatabase->real_escape_string($_POST['contract_id']);

    $shipment_id = $myDatabase->real_escape_string($_POST['shipment_id']);
    $invoice_id = $myDatabase->real_escape_string($_POST['invoice_id']);
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));


    if ($contract_id == '') {
        $contract_id = 'NULL';
    }
    if ($transaction_id == '') {
        $transaction_id = 'NULL';
    }
    if ($shipment_id == '') {
        $shipment_id = 'NULL';
    }
    if ($invoice_id == '') {
        $invoice_id = 'NULL';
    }
    if ($notes == '') {
        $notes = 'NULL';
    }
    if ($price == '') {
        $price = 0;
    }
    if ($quantity == '') {
        $quantity = 0;
    }
    if ($general_vendor_id == '') {
        $general_vendor_id = 'NULL';
    }
    if ($vendor_id == '') {
        $vendor_id = 'NULL';
    }


    $str = $_POST['gl_add_date'];
    $date = DateTime::createFromFormat('d/m/Y', $str);
    $jurnalYearMonth = $date->format('ym');


    if ($stockpile_id != '') {

        $checkJurnalNo = 'JM/JPJ/' . $jurnalYearMonth;

        $sql = "SELECT gl_add_no FROM gl_add WHERE gl_add_no LIKE '{$checkJurnalNo}%' ORDER BY gl_add_id DESC LIMIT 1";
        $resultJurnal = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($resultJurnal->num_rows == 1) {
            $rowJurnal = $resultJurnal->fetch_object();
            $splitJurnalNo = explode('/', $rowJurnal->gl_add_no);
            $lastExplode = count($splitJurnalNo) - 1;
            $nextJurnalNo = ((float)$splitJurnalNo[$lastExplode]) + 1;
            $jurnalNo = $checkJurnalNo . '/' . $nextJurnalNo;
        } else {
            $jurnalNo = $checkJurnalNo . '/1';

        }

        $sql = "INSERT INTO `gl_add` (gl_add_date, gl_add_no, stockpile_id, general_vendor_id, vendor_id , contract_id, transaction_id, shipment_id, invoice_id, notes, quantity, price, input_by, input_date) VALUES (STR_TO_DATE('{$gl_add_date}', '%d/%m/%Y'), '{$jurnalNo}', {$stockpile_id}, {$general_vendor_id}, {$vendor_id}, {$contract_id}, {$transaction_id}, {$shipment_id}, {$invoice_id}, '{$notes}', '{$quantity}', '{$price}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $jurnalId = $myDatabase->insert_id;

            $return_value = '|OK|Data has successfully inserted.||';

            $sql = "UPDATE `gl_detail` SET gl_add_id = {$jurnalId} WHERE gl_add_id IS NULL AND entry_by = {$_SESSION['userId']}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


        } else {
            $return_value = '|FAIL|Insert Data failed.||';

        }

    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_jurnal_data') {
    // <editor-fold defaultstate="collapsed" desc="delete_user">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $jurnalId = $myDatabase->real_escape_string($_POST['jurnalId']);
    // </editor-fold>

    if ($jurnalId != '') {


        $sql = "DELETE FROM `gl_add` WHERE gl_add_id = {$jurnalId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|User has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_detail') {
    // <editor-fold defaultstate="collapsed" desc="transaction_customer_data">

    $return_value = '';
    $boolShipment1 = false;
    //$exchangeRate = '';
    //$grandTotal = 0;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $jurnalType = $myDatabase->real_escape_string($_POST['jurnalType']);
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $stockpileId2 = $myDatabase->real_escape_string($_POST['stockpileId2']);
    $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $notes = $myDatabase->real_escape_string($_POST['notes']);

    // </editor-fold>

    if ($stockpileId2 == '') {
        $stockpileId2 = 'NULL';
    }

    if ($exchangeRate == '') {
        $exchangeRate = 1;
    }


    if ($jurnalType != '' && $accountId != '' && $amount != '' && $currencyId != '') {

        $amountConverted = $exchangeRate * $amount;


        $sql = "INSERT INTO `gl_detail` (gl_type, stockpile_id, account_id, currency_id, exchange_rate, amount, amount_converted, notes, entry_by, entry_date) VALUES ("
            . "{$jurnalType}, {$stockpileId2}, {$accountId}, {$currencyId}, {$exchangeRate}, '{$amount}', '{$amountConverted}', '{$notes}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $jurnalId = $myDatabase->insert_id;

            $return_value = '|OK|Data has successfully inserted.||';


            insertGeneralLedger($myDatabase, 'JURNAL MEMORIAL', "NULL", "NULL", "NULL", "NULL", "NULL", $jurnalId);

        } else {
            $return_value = '|FAIL|Insert Data failed.||';
        }

    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_jurnal_detail') {
    // <editor-fold defaultstate="collapsed" desc="delete_user">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $jurnalDetailId = $myDatabase->real_escape_string($_POST['jurnalDetailId']);
    // </editor-fold>

    if ($jurnalDetailId != '') {

        $sql = "DELETE FROM `gl_detail` WHERE gl_detail_id = {$jurnalDetailId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|User has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
}  /*elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_invoice_detail') {
    // <editor-fold defaultstate="collapsed" desc="delete_user">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $invoiceDetailId = $myDatabase->real_escape_string($_POST['invoiceDetailId']);
    // </editor-fold>

    if ($invoiceDetailId != '') {
        $sql = "UPDATE invoice_detail SET invoice_detail_dp = NULL, invoice_detail_status = 0 WHERE invoice_detail_dp = {$invoiceDetailId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "SELECT poId FROM invoice_detail WHERE invoice_detail_id = {$invoiceDetailId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result->num_rows == 1) {
            $row = $result->fetch_object();
            $poId = $row->poId;

            $sqldp = "UPDATE contract SET "
                . "invoice_status = 0 "
                . " WHERE contract_id = {$poId}";
            $resultdp = $myDatabase->query($sqldp, MYSQLI_STORE_RESULT);
        }


        $sql = "DELETE FROM `invoice_detail` WHERE invoice_detail_id = {$invoiceDetailId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|User has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
}*/ elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'return_invoice') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $invoice_Id = $myDatabase->real_escape_string($_POST['invoiceId']);
	$returnInvoiceDate = $myDatabase->real_escape_string($_POST['returnInvoiceDate']);
    // </editor-fold>

    if ($invoice_Id != '') {
        $sql = "UPDATE invoice SET "
            . "payment_status = 2, "
            . "invoice_status = 1, "
            . "sync_by = {$_SESSION['userId']}, "
            . "sync_date = STR_TO_DATE('$returnInvoiceDate', '%d/%m/%Y %H:%i:%s'), "
			. "exec_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
            . " WHERE invoice_id = {$invoice_Id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


        if ($result !== false) {
            $return_value = '|OK|Invoice has successfully returned.|' . $invoice_Id . '|';
			
			$sqlC = "SELECT invoice_detail_id, mutasi_detail_id, poId FROM invoice_detail
                                WHERE invoice_id = {$invoice_Id}";
                    $resultC = $myDatabase->query($sqlC, MYSQLI_STORE_RESULT);
                    if ($resultC !== false && $resultC->num_rows >= 1) {
                        while ($rowC = $resultC->fetch_object()) {
							$invoice_detail_id = $rowC->invoice_detail_id;
                            $mutasi_detail_id = $rowC->mutasi_detail_id;
							$poId = $rowC->poId;
							
                        $sql = "UPDATE `mutasi_detail` SET status = 0 WHERE mutasi_detail_id = {$mutasi_detail_id}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                        $sql = "DELETE FROM mutasi_qty_price WHERE invoice_detail_id = {$invoice_detail_id}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        
                        $sql = "UPDATE `contract` SET invoice_status = 0 WHERE contract_id = {$poId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
							
						}
					}

            $sql = "SELECT GROUP_CONCAT(invoice_detail_id) AS invoice_detail_id FROM invoice_detail WHERE invoice_id = {$invoice_Id}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result->num_rows == 1) {
                $row = $result->fetch_object();
                $invoiceId = $row->invoice_detail_id;

                $sqldp = "UPDATE invoice_dp SET "
                    . "status = 1 "
                    . " WHERE invoice_detail_id = {$invoiceId}";
                $resultdp = $myDatabase->query($sqldp, MYSQLI_STORE_RESULT);
            }
            insertGeneralLedger($myDatabase, 'RETURN INVOICE', $invoiceId);

        } else {
            $return_value = '|FAIL|Returned invoice failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_po_pks') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $po_pks_id = $myDatabase->real_escape_string($_POST['po_pks_id']);
    // </editor-fold>

    if ($po_pks_id != '') {
        $sql = "DELETE FROM `po_pks` WHERE po_pks_id = {$po_pks_id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Contract has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'po_pks_data') {
    // <editor-fold defaultstate="collapsed" desc="po_pks_data">

    $return_value = '';
    $addMessage = '';
    $boolNew = false;
    $boolContinue = true;
    $boolUpdate = false;
    $boolInsertVendor = false;
    $boolVendorExists = false;
    //$boolContractExists = false;
    $boolRecalculate = false;
    $boolPriceUp = false;
    $boolPriceDown = false;
    $boolQuantityUp = false;
    $boolQuantityDown = false;
    $temp_price = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $po_pks_id = $myDatabase->real_escape_string($_POST['po_pks_id']);
    //$contractType = $myDatabase->real_escape_string($_POST['contractType']);
    $contractNo = $myDatabase->real_escape_string($_POST['contractNo']);
    $spbNo = $myDatabase->real_escape_string($_POST['spbNo']);
    //$contractSeq = $myDatabase->real_escape_string($_POST['contractSeq']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    //$vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    //$vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    //$vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    //$npwp = $myDatabase->real_escape_string($_POST['npwp']);
    //$ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $contract = $myDatabase->real_escape_string($_POST['contract']);
    $spb = $myDatabase->real_escape_string($_POST['spb']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $notes2 =  $myDatabase->real_escape_string($_POST['notes2']);
    $finalStatus = $myDatabase->real_escape_string($_POST['finalStatus']);
    $status_ho = $myDatabase->real_escape_string($_POST['ho']);

    // </editor-fold>

    /*if($vendorId == 'INSERT') {
        if($vendorCode != '' && $vendorName != '' && $vendorAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$vendorCode}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($result !== false && $result->num_rows > 0) {
                $boolVendorExists = true;
                $addMessage = ' Vendor already exists.';
            } elseif($result !== false && $result->num_rows == 0) {
                $ppnValue = 0;
                $pphValue = 0;

                $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
                $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
                if($resultPPN !== false && $resultPPN->num_rows == 1) {
                    $rowPPN = $resultPPN->fetch_object();
                    $ppnValue = $rowPPN->tax_value;
                }

                $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
                $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                if($resultPPh !== false && $resultPPh->num_rows == 1) {
                    $rowPPh = $resultPPh->fetch_object();
                    $pphValue = $rowPPh->tax_value;
                }

                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                        . "UPPER('{$vendorCode}'), '{$vendorName}', '{$vendorAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $vendorId = $myDatabase->insert_id;
                    $boolInsertVendor = true;
                }
            }
        } else {
            $boolInsertVendor = false;
        }
    } else {
        $boolInsertVendor = true;
    }
    */
    if ($po_pks_id == '') {
        $boolNew = true;

    }

    if ($contract != '' && $spb != '') {
        $purchasingId = $contract;
    } elseif ($contract != '' && $spb == '') {
        $purchasingId = $contract;
    } elseif ($contract == '' && $spb != '') {
        $purchasingId = $spb;
    }

    if ($vendorId != '' && $currencyId != '' && $price != '' && $quantity != '' && $stockpileId != '' && $contractNo != '' && $spbNo != '' && $purchasingId != '') {

        if ($exchangeRate == '') {
            $exchangeRate = 1;
        }

        $priceConverted = $price * $exchangeRate;

        if ($boolNew) {
            $sql = "SELECT * FROM `po_pks` WHERE UPPER(contract_no) = UPPER('{$contractNo}')";
        } else {
            $sql = "SELECT * FROM `po_pks` WHERE UPPER(contract_no) = UPPER('{$contractNo}') AND po_pks_id <> {$po_pks_id}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {

            if ($boolNew) {

                $sql = "INSERT INTO `po_pks` (contract_no, spb_no, stockpile_id, vendor_id, currency_id, exchange_rate, price, price_converted, "
                    . "quantity, notes, company_id, entry_by, entry_date, purchasing_id,final_status, notes2) VALUES ("
                    . "'{$contractNo}', '{$spbNo}', {$stockpileId}, {$vendorId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, "
                    . "{$quantity}, '{$notes}', {$_SESSION['companyId']}, {$_SESSION['userId']},
                     STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),  {$purchasingId},{$finalStatus}, '{$notes2}')";

            } else {

                $boolUpdate = true;
                $sqlp2 = "SELECT * FROM po_pks WHERE po_pks_id = {$po_pks_id}";
                $resultp2 = $myDatabase->query($sqlp2, MYSQLI_STORE_RESULT);
                if ($resultp2->num_rows == 1) {
                    while ($rowp2 = $resultp2->fetch_object()) {
                        $p2 = $rowp2->purchasing_id;

                        $sqlp3 = "UPDATE purchasing SET admin_input = NULL WHERE purchasing_id = {$p2}";
                        $resultp3 = $myDatabase->query($sqlp3, MYSQLI_STORE_RESULT);

                    }
                }

                $sql = "UPDATE `po_pks` SET "
                    . "contract_no = '{$contractNo}', "
                    . "spb_no = '{$spbNo}', "
                    . "vendor_id = {$vendorId}, "
                    . "currency_id = {$currencyId}, "
                    . "exchange_rate = {$exchangeRate}, "
                    . "price = {$price}, "
                    . "price_converted = {$priceConverted}, "
                    . "quantity = {$quantity}, "
                    . "purchasing_id = {$purchasingId}, "
                    . "notes = '{$notes}', "
                    . "notes2 = '{$notes2}', "
                    . "final_status = {$finalStatus} "
                    . "WHERE po_pks_id = {$po_pks_id}";
            }

            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                /*  if($boolNew) {
                $contractId = $myDatabase->insert_id;

                $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                        . "{$stockpileId}, {$contractId}, {$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            } else {*/


                if ($boolUpdate) {

                    $sqlC = "SELECT contract_id FROM po_contract
                                WHERE po_pks_id = {$po_pks_id}";
                    $resultC = $myDatabase->query($sqlC, MYSQLI_STORE_RESULT);
                    if ($resultC !== false && $resultC->num_rows >= 1) {
                        while ($rowC = $resultC->fetch_object()) {
                            $contractId = $rowC->contract_id;

                            $sqla = "UPDATE contract SET "
                                . "vendor_id = {$vendorId}, "
                                . "price = {$price}, "
                                . "price_converted = {$priceConverted} "
                                . "WHERE contract_id = {$contractId}";
                            $resulta = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);

                            insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);
                            insertReportGL($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);

                            $sqlNotim = "SELECT t.`transaction_id`, t.`slip_no`, c.price_converted FROM `transaction` t
							LEFT JOIN stockpile_contract sc ON sc.`stockpile_contract_id` = t.`stockpile_contract_id`
							LEFT JOIN contract c ON sc.contract_id = c.contract_id
							WHERE sc.`contract_id` = {$contractId}";
                            $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
                            if ($resultNotim->num_rows >= 1) {
                                while ($rowNotim = $resultNotim->fetch_object()) {
                                    $tId = $rowNotim->transaction_id;
                                    $unit_price = $rowNotim->price_converted;

                                    $sqlb = "UPDATE transaction SET "
                                        . "unit_price = {$unit_price}"
                                        . "WHERE transaction_id = {$tId}";
                                    $resultb = $myDatabase->query($sqlb, MYSQLI_STORE_RESULT);

                                    insertGeneralLedger($myDatabase, 'NOTA TIMBANG2', "NULL", "NULL", "NULL", $tId);

                                }
                            }
                        }
                    }
                }

                if($status_ho == 1){
                    $temp_price = " price = {$price}, ";
                }

                $sqlp = "UPDATE purchasing SET "
                    . "admin_input = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),"
                    . "open_add = 0, {$temp_price}" 
                    . "vendor_id = {$vendorId} "
                    . "WHERE purchasing_id = {$purchasingId}";
                $resultp = $myDatabase->query($sqlp, MYSQLI_STORE_RESULT);

             //   echo " Updat <br> <br> " . $sqlp;

                $sqlu = "call update_purchasing ( {$purchasingId})";
                $resultp = $myDatabase->query($sqlu, MYSQLI_STORE_RESULT);
                if ($resultp->num_rows == 1) {
                    while ($rowp2 = $resultp->fetch_object()) {
                        if ($rowp2->ho == "1") {
                            if (isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
                                $filename = $_FILES['imagefile']['name'];
                                $ext = pathinfo($filename, PATHINFO_EXTENSION);
                                $allowed = array('pdf', 'jpg', 'jpeg', 'png', 'bmp');
                                $attachmentPath = "./import/1/stockpile-" . $stockpileId . "/1/" . $vendorId;
                                $attachmentPath2 = "http://10.15.14.56/purchasing/import/1/stockpile-" . $stockpileId . "/1/" . $vendorId;
                                echo $attachmentPath . " / " . $attachmentPath2;
                                if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
                                    $temp = mkdir($attachmentPath, 0755, TRUE);
                                else
                                    $temp = TRUE;

                                if ($temp === TRUE) {
                                    $attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
                                    $attachmentPath2 .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);

                                    $sqlp = "UPDATE purchasing SET "
                                        . "upload_file = '$attachmentPath2'"
                                        . "WHERE purchasing_id = {$purchasingId}";
                                    $resultp = $myDatabase->query($sqlp, MYSQLI_STORE_RESULT);

                                    if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                                        $boolContinue = FALSE;
                                        $return_value = '|FAIL|Error while uploading file.|';
                                    }
                                } else {
                                    $boolContinue = FALSE;
                                    $return_value = '|FAIL|Error while creating directory.|';
                                }
                            }

                        }
                    }
                }

                $return_value = '|OK|Contract has successfully inserted/updated.' . $addMessage . '|' . $sql . '|';

                //  insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", "NULL", $po_pks_id);

                unset($_SESSION['contract']);
            } else {
                $return_value = '|FAIL|Insert/update contract failed.' . $addMessage . '||';
            }
        } else {
            $return_value = '|FAIL|Contract No. already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.' . $addMessage . '||';
    }

    echo $return_value;
    // </editor-fold>
}  elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_contract') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    // </editor-fold>

    if ($contractId != '') {
        $sql = "UPDATE `po_pks` po LEFT JOIN po_contract poc ON po.po_pks_id = poc.po_pks_id
				SET po_status = 0 WHERE po.po_status = 1 AND poc.contract_id = {$contractId}";
        $result1 = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "UPDATE `po_pks` po LEFT JOIN po_contract poc ON po.po_pks_id = poc.po_pks_id
				SET po.lock_contract = 0 WHERE po.lock_contract = 1 AND poc.contract_id = {$contractId}";
        $result1 = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "DELETE FROM `contract` WHERE contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "DELETE FROM `po_contract` WHERE contract_id = {$contractId}";
        $result1 = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Contract has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'lock_contract') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    // </editor-fold>

    if ($contractId != '') {
        $sql = "UPDATE `contract` SET contract_status = 1 WHERE contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Contract has successfully locked.|';
        } else {
            $return_value = '|FAIL|locked contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'akses_invoice') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    // </editor-fold>

    if ($contractId != '') {
        $sql = "UPDATE `contract` SET invoice_status = 0 WHERE contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Contract has successfully Opened.|';
        } else {
            $return_value = '|FAIL|Opened contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'cancel_sales') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $sales_Id = $myDatabase->real_escape_string($_POST['sales_Id']);
    // </editor-fold>

    if ($sales_Id != '') {
        $sql = "UPDATE `sales` SET sales_status = 4 WHERE sales_id = {$sales_Id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Sales has successfully Canceled.|';
        } else {
            $return_value = '|FAIL|Canceled Sales failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'close_invoice') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    // </editor-fold>

    if ($contractId != '') {
        $sql = "UPDATE `contract` SET invoice_status = 1 WHERE contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Contract has successfully closed.|';
        } else {
            $return_value = '|FAIL|Closed contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'unlock_contract') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    // </editor-fold>

    if ($contractId != '') {
        $sql = "UPDATE `contract` SET contract_status = 0 WHERE contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Contract has successfully locked.|';
        } else {
            $return_value = '|FAIL|locked contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'adjustment_data') {
    // <editor-fold defaultstate="collapsed" desc="user_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $adjustment = $myDatabase->real_escape_string($_POST['adjustment']);
    $adjustmentAcc = $myDatabase->real_escape_string($_POST['adjustmentAcc']);
    $adjustmentNotes = $myDatabase->real_escape_string($_POST['adjustmentNotes']);
    $adjustmentDate = $myDatabase->real_escape_string($_POST['adjustmentDate']);
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);

    // </editor-fold>


    if ($contractId != '' && $adjustment != '' && $adjustmentAcc != '' && $adjustmentNotes != '' && $adjustmentDate != '' && $ppn != '') {


        $sql = "UPDATE `contract` SET "
            . "adjustment = {$adjustment}, "
            . "adjustment_acc = {$adjustmentAcc}, "
            . "adjustment_notes = '{$adjustmentNotes}', "
            . "adjustment_ppn = {$ppn}, "
            . "adjustment_date = STR_TO_DATE('{$adjustmentDate}', '%d/%m/%Y')"
            . "WHERE contract_id = {$contractId}";

        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {

            $return_value = '|OK|adjustment has successfully inserted/updated.||';

            insertGeneralLedger($myDatabase, 'CONTRACT ADJUSTMENT', "NULL", "NULL", $contractId);

        } else {
            $return_value = '|FAIL|Insert/update adjustment failed.||';
            echo $sql;
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }


    echo $return_value;
    // </editor-fold>
} /*
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'invoice_data') {
    // <editor-fold defaultstate="collapsed" desc="invoice_data">

    $return_value = '';
    $addMessage = '';
    $boolNew = false;
    $boolContinue = true;
    $boolUpdate = false;
    $boolInsertVendor = false;
    $boolVendorExists = false;
    $boolRecalculate = false;
    $boolPriceUp = false;
    $boolPriceDown = false;
    $boolQuantityUp = false;
    $boolQuantityDown = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $invoiceId = $myDatabase->real_escape_string($_POST['invoiceId']);
   // $contractType = $myDatabase->real_escape_string($_POST['contractType']);
   	$generatedInvoiceNo = $myDatabase->real_escape_string($_POST['generatedInvoiceNo']);
	$invoiceNo = $generatedInvoiceNo;
    //$contractSeq = $myDatabase->real_escape_string($_POST['contractSeq']);
    $generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId']);
    //$vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    //$vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    //$vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    //$npwp = $myDatabase->real_escape_string($_POST['npwp']);
    //$ppn = $myDatabase->real_escape_string($_POST['ppn']);
    //$pph = $myDatabase->real_escape_string($_POST['pph']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    //$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
	$amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
    // </editor-fold>



    if ($invoiceId == '') {
        $boolNew = true;
       // if($stockpileId == '') {
         //   $boolContinue = false;
        //}
    }

    if($generalVendorId != '' && $currencyId != '' && $price != '' && $quantity != '' && $amount != '' && $boolContinue) {

        if($exchangeRate == '') {
            $exchangeRate = 1;
        }



        if($boolNew) {


            $checkInvoiceNo = 'INV/JPJ/'. $currentYearMonth;

        $sql = "SELECT invoice_no FROM invoice WHERE company_id = {$_SESSION['companyId']} AND invoice_no LIKE '{$checkInvoiceNo}%' ORDER BY invoice_id DESC LIMIT 1";
        $resultInvoice = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($resultInvoice->num_rows == 1) {
            $rowInvoice = $resultInvoice->fetch_object();
            $splitInvoiceNo = explode('-', $rowInvoice->invoice_no);
            $lastExplode = count($splitInvoiceNo) - 1;
            $nextInvoiceNo = ((float) $splitInvoiceNo[$lastExplode]) + 1;
            $InvoiceNo = $checkPoNo .'/'. $nextInvoiceNo;
        } else {
            $InvoiceNo = $checkInvoiceNo .'/1';


            }
            $priceConverted = $price * $exchangeRate;

            $sql = "INSERT INTO `invoice` (invoice_no, general_vendor_id, currency_id, exchange_rate, quantity, price, price_converted, "
                    . "amount, company_id, entry_by, entry_date) VALUES ("
                    . "'{$invoiceNo}', {$generalVendorId}, {$currencyId}, {$exchangeRate}, {$quantity}, {$price}, {$priceConverted}, "
                    . "{$amount}, {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        } else {
            $sql = "SELECT * FROM invoice WHERE contract_id = {$invoiceId}";
            $resultInvoice = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            $rowInvoice = $resultInvoice->fetch_object();



            if($generalVendorId != $rowContract->general_vendor_id) {
                $checkInvoiceNo = 'INV/JPJ/'. $currentYearMonth;

        $sql = "SELECT invoice_no FROM invoice WHERE company_id = {$_SESSION['companyId']} AND invoice_no LIKE '{$checkInvoiceNo}%' ORDER BY invoice_id DESC LIMIT 1";
        $resultInvoice = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($resultInvoice->num_rows == 1) {
            $rowInvoice = $resultInvoice->fetch_object();
            $splitInvoiceNo = explode('-', $rowInvoice->invoice_no);
            $lastExplode = count($splitInvoiceNo) - 1;
            $nextInvoiceNo = ((float) $splitInvoiceNo[$lastExplode]) + 1;
            $InvoiceNo = $checkPoNo .'/'. $nextInvoiceNo;
        } else {
            $InvoiceNo = $checkInvoiceNo .'/1';


            }
            } else {
                $InvoiceNo = $rowInvoice->invoice_no;
            }


            $sql = "UPDATE `invoice` SET "
                    . "invoice_no = '{$invoiceNo}', "
                    . "general_vendor_id = {$generalVendorId}, "
                    . "currency_id = {$currencyId}, "
                    . "exchange_rate = {$exchangeRate}, "
                    . "price = {$price}, "
					. "amount = {$amount}, "
                    . "price_converted = {$priceConverted}, "
                    . "quantity = {$quantity} "
                    . "WHERE invoice_id = {$invoiceId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

       if($result !== false) {


            $return_value = '|OK|Contract has successfully inserted/updated.'. $addMessage .'|'. $invoiceId .'|';

           // insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", $contractId);

            unset($_SESSION['contract']);
        } else {
            $return_value = '|FAIL|Insert/update contract failed.'. $addMessage .'||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.'. $addMessage .'||';
    }

    echo $return_value;
    // </editor-fold>
}
*/
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'contract_stockpile_data') {
    // <editor-fold defaultstate="collapsed" desc="contract_stockpile_data">

    $return_value = '';
    $boolNew = false;
    $boolExceedQuantity = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    // </editor-fold>

    if ($stockpileContractId == '') {
        $boolNew = true;
    }

    if ($stockpileId != '' && $quantity != '') {
        $sql = "SELECT * FROM contract WHERE contract_id = {$contractId}";
        $resultContract = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($resultContract !== false && $resultContract->num_rows == 1) {
            $rowContract = $resultContract->fetch_object();
            $totalQuantity = $rowContract->quantity;
        }

        $currentQuantity = 0;

        if ($boolNew) {
            $sql = "SELECT * FROM `stockpile_contract` WHERE stockpile_id = {$stockpileId} AND contract_id = {$contractId}";
            $sqlQuantity = "SELECT COALESCE(SUM(quantity), 0) AS current_quantity FROM stockpile_contract WHERE stockpile_id = {$stockpileId} AND contract_id = {$contractId}";
        } else {
            $sql = "SELECT * FROM `stockpile_contract` WHERE stockpile_id = {$stockpileId} AND contract_id = {$contractId} AND stockpile_contract_id <> {$stockpileContractId}";
            $sqlQuantity = "SELECT COALESCE(SUM(quantity), 0) AS current_quantity FROM stockpile_contract WHERE stockpile_id = {$stockpileId} AND contract_id = {$contractId} AND stockpile_contract_id NOT IN ({$stockpileContractId})";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $resultQuantity = $myDatabase->query($sqlQuantity, MYSQLI_STORE_RESULT);
        if ($resultQuantity !== false && $resultQuantity->num_rows == 1) {
            $rowQuantity = $resultQuantity->fetch_object();
            $currentQuantity = $rowQuantity->current_quantity;
        }

        $maxQuantity = $totalQuantity - $currentQuantity;
        if ($quantity > $maxQuantity) {
            $boolExceedQuantity = true;
        }

        if ($result !== false && $result->num_rows == 0 && !$boolExceedQuantity) {
            if ($boolNew) {
                $sql = "INSERT INTO `stockpile_contract` (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                    . "{$stockpileId}, {$contractId}, {$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `stockpile_contract` SET "
                    . "quantity = {$quantity}, "
                    . "stockpile_id = {$stockpileId} "
                    . "WHERE stockpile_contract_id = {$stockpileContractId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($boolNew && $result !== false) {
                $id = $myDatabase->insert_id;
                $sqlsp = "CALL surattugas_generate2({$id})";
                $resultsp = $myDatabase->query($sqlsp, MYSQLI_STORE_RESULT);
                if ($resultsp->num_rows == 1) {
                    $rowsp = $resultsp->fetch_object();
                    //$stockpileContractIds = $rowSC->stockpile_contract_ids;
                }
            }

            if ($result !== false) {
                $return_value = '|OK|Stockpile has successfully inserted/updated.|';
            } else {
                $return_value = '|FAIL|Insert/update stockpile failed.|';
            }
        } else {
            if ($boolExceedQuantity) {
                $return_value = '|FAIL|Quantity exceed total quantity.|';
            } else {
                $return_value = '|FAIL|Stockpile already exists.|';
            }
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'contract_condition_data') {
    // <editor-fold defaultstate="collapsed" desc="contract_condition_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $conditionId = $myDatabase->real_escape_string($_POST['conditionId']);
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    $categoryId = $myDatabase->real_escape_string($_POST['categoryId']);
    $rule = $myDatabase->real_escape_string($_POST['rule']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    // </editor-fold>

    if ($conditionId == '') {
        $boolNew = true;
    }

    if ($categoryId != '' && $rule != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `condition` WHERE category_id = {$categoryId} AND contract_id = {$contractId}";
        } else {
            $sql = "SELECT * FROM `condition` WHERE category_id = {$categoryId} AND contract_id = {$contractId} AND condition_id <> {$conditionId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `condition` (category_id, contract_id, rule, remarks, entry_by, entry_date) VALUES ("
                    . "{$categoryId}, {$contractId}, '{$rule}', '{$remarks}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `condition` SET "
                    . "category_id = {$categoryId}, "
                    . "rule = '{$rule}', "
                    . "remarks = '{$remarks}' "
                    . "WHERE condition_id = {$conditionId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Condition has successfully inserted/updated.|';
            } else {
                $return_value = '|FAIL|Insert/update condition failed.|';
            }
        } else {
            $return_value = '|FAIL|Category already exists.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_transaction') {
    // <editor-fold defaultstate="collapsed" desc="delete_transaction">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $transactionId = $myDatabase->real_escape_string($_POST['transactionId']);
    // </editor-fold>

    if ($transactionId != '') {
        $sql = "DELETE FROM `transaction` WHERE transaction_id = {$transactionId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Transaction has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete transaction failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_data') { //lama
    // <editor-fold defaultstate="collapsed" desc="transaction_data">

    $return_value = '';
    $boolQuantity = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $contractPksDetailId = $myDatabase->real_escape_string($_POST['contractPksDetailId']);
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
    $transactionDate = $myDatabase->real_escape_string($_POST['transactionDate']);
    $loadingDate = $myDatabase->real_escape_string($_POST['loadingDate']);
    $transactionDate2 = $myDatabase->real_escape_string($_POST['transactionDate2']);
    $vehicleNo = $myDatabase->real_escape_string($_POST['vehicleNo']);
    $vehicleNo2 = $myDatabase->real_escape_string($_POST['vehicleNo2']);
    $unloadingCostId = $myDatabase->real_escape_string($_POST['unloadingCostId']);
    $unloadingDate = $myDatabase->real_escape_string($_POST['unloadingDate']);
    $freightCostId = $myDatabase->real_escape_string($_POST['freightCostId']);
    $handlingCostId = $myDatabase->real_escape_string($_POST['handlingCostId']);
    $permitNo = $myDatabase->real_escape_string($_POST['permitNo']);
    $transactionType = $myDatabase->real_escape_string($_POST['transactionType']);
    $sendWeightRule = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight']));
    $sendWeight2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight2']));
    $blWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['blWeight']));
    $brutoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['brutoWeight']));
    $tarraWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['tarraWeight']));
    $nettoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['nettoWeight']));
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $notes2 = $myDatabase->real_escape_string($_POST['notes2']);
    $driver = $myDatabase->real_escape_string($_POST['driver']);
    $block = $myDatabase->real_escape_string($_POST['block']);
    $tempRSB = $myDatabase->real_escape_string($_POST['rsb']);
    $tempGGL = $myDatabase->real_escape_string($_POST['ggl']);
    $tempRG = $myDatabase->real_escape_string($_POST['rg']);
    $tempUncertified = $myDatabase->real_escape_string($_POST['un']);

    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $supplierId = $myDatabase->real_escape_string($_POST['supplierId']);
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $isTaxable = $myDatabase->real_escape_string($_POST['isTaxable']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $stockpileCode = '';
    $unitPrice = 0;
    $balanceQuantity = 0;
    $contractId = 0;
    $custTaxId = 'NULL';
    $curahTaxId = 'NULL';
    $ucTaxId = 0;
    $fcTaxId = 0;
    $t_date = str_replace('/', '-', $unloadingDate);
    $t_date2 = str_replace('/', '-', $transactionDate2);
    $currentYear2 = date('y', strtotime($t_date));
    $currentYear3 = date('y', strtotime($t_date2));
    $slipUpload = $myDatabase->real_escape_string($_POST['idSuratTugas']);
    $persenPecahSlip = $myDatabase->real_escape_string($_POST['persenPecahSlip']);
    $tempTransactionId = $myDatabase->real_escape_string($_POST['tempTransactionId']);
    
	//== Start Add by Eva
    $newAmountClaim = $myDatabase->real_escape_string($_POST['newAmountClaim']);
	$qtyAddShrink = $myDatabase->real_escape_string($_POST['qtyAddShrink']);
	$priceAddShrink = $myDatabase->real_escape_string($_POST['priceAddShrink']);
    //== End Add by Eva
	//update by idris
	//$photoDocument = $_POST['photoDocument'];
    //Base64 Decode
    //$img = $photoDocument;
    //$img = str_replace('data:image/jpeg;base64,', '', $img);
    //$img = str_replace(' ', '+', $img);
    //$file = base64_decode($img);
    //$photoDocument = addslashes($file);
	
	
    // </editor-fold>


    $allowInsert = false;
    $allowInsert2 = false;
    $date = new DateTime();
    $todayDate = $date->format('Y-m-d');
    $date1 = new DateTime($todayDate);

    $dateTrans = str_replace("/", "-", $myDatabase->real_escape_string($_POST['unloadingDate']));
    $dt = date('Y-m-d', strtotime($dateTrans));
    $date2 = new DateTime($dt);
    $a = $date1->format('Y-m-d');
    $b = $date2->format('Y-m-d');
    $diff = date_diff(date_create($a), date_create($b));
    $interval = $diff->days;

    $dateTrans2 = str_replace("/", "-", $myDatabase->real_escape_string($_POST['transactionDate2']));
    $dt2 = date('Y-m-d', strtotime($dateTrans2));
    $date22 = new DateTime($dt2);
    $a2 = $date1->format('Y-m-d');
    $b2 = $date22->format('Y-m-d');
    $diff2 = date_diff(date_create($a2), date_create($b2));
    $interval2 = $diff2->days;

    if ($interval < 5) {
        $allowInsert = true;
    }

    if ($interval2 < 5) {
        $allowInsert2 = true;
    }

    $sql = "SELECT * FROM user_module WHERE user_id = {$_SESSION['userId']} and module_id = 30";
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_object()) {
            if ($row->module_id == 30) {
                $allowInsert = true;
                $allowInsert2 = true;
            }
        }
    }

    if ($isTaxable == '') {
        $isTaxable = 0;
    }

    if ($ppn == '') {
        $ppn = 0;
    }

    if ($pph == '') {
        $pph = 0;
    }

    if ($contractPksDetailId == '') {
        $contractPksDetailId = 0;
    }


    if ($transactionType == 1) {
        if ($allowInsert) {
            // <editor-fold defaultstate="collapsed" desc="IN">
            if ($stockpileId != '' && $stockpileContractId != '' && $loadingDate != '' && $vehicleNo != '' && $unloadingCostId != '' &&
                $unloadingDate != '' && $freightCostId != '' && $handlingCostId != '' && $transactionType != '' && $sendWeightRule >= 0 &&
                $brutoWeight >= 0 && $tarraWeight >= 0 && $nettoWeight >= 0 && $driver != '' && $vendorId != '' && $laborId != '') {

                if ($supplierId == '') {
                    $supplierId = "NULL";
                }
                if ($slipUpload == '') {
                    $slipUpload = 0;
                }
                // check balance contract & get unit price
                $sql = "SELECT s.stockpile_code, con.price_converted, sc.contract_id, con.contract_type, con.qty_rule,
			DATE_FORMAT(con.entry_date,'%Y-%m-%d') AS contractDate,
                        ((SELECT COALESCE(SUM(quantity), 0) FROM stockpile_contract WHERE contract_id = sc.contract_id
                        ) - (SELECT COALESCE(SUM(adjustment), 0) FROM contract_adjustment WHERE contract_id = sc.contract_id
                        )) - (
                            SELECT CASE WHEN c.contract_type = 'C' THEN COALESCE(SUM(t.quantity), 0)
                ELSE COALESCE(SUM(t.send_weight), 0) END 
                FROM TRANSACTION t LEFT JOIN stockpile_contract sc ON t.stockpile_contract_id = sc.`stockpile_contract_id`
                LEFT JOIN contract c ON c.contract_id = sc.contract_id
                WHERE sc.contract_id =  con.contract_id
                        ) AS balance, s.freight_weight_rule, s.curah_weight_rule, v.pph_tax_id
                    FROM stockpile_contract sc
                    INNER JOIN stockpile s
                        ON s.stockpile_id = sc.stockpile_id
                    INNER JOIN contract con
                        ON con.contract_id = sc.contract_id
                    INNER JOIN vendor v
                        ON v.vendor_id = con.vendor_id
                    WHERE stockpile_contract_id = {$stockpileContractId}";
                $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if ($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                    $rowStockpile = $resultStockpile->fetch_object();
                    $stockpileCode = $rowStockpile->stockpile_code;
                    $contractId = $rowStockpile->contract_id;
                    $unitPrice = $rowStockpile->price_converted;
                    $contractType = $rowStockpile->contract_type;
                    $freightWeightRule = $rowStockpile->freight_weight_rule;
                    $curahWeightRule = $rowStockpile->curah_weight_rule;
                    $contractDate = $rowStockpile->contractDate;
                    if ($contractType == 'P') {
                        $balanceQuantity = $rowStockpile->balance;
                    } elseif ($contractType == 'C') {
                        $balanceQuantity = $rowStockpile->balance;
                        if ($rowStockpile->pph_tax_id != 0 && $rowStockpile->pph_tax_id != '') {
                            $curahTaxId = $rowStockpile->pph_tax_id;
                        }
                    }
                    $qty_rule = $rowStockpile->qty_rule;
                    if ($qty_rule == 0) {
                        $sendWeight = $sendWeightRule;
                    } else if ($qty_rule == 1) {
                        $sendWeight = $nettoWeight;
                    } else {
                        if ($sendWeightRule < $nettoWeight) {
                            $sendWeight = $sendWeightRule;
                        } elseif ($nettoWeight < $sendWeightRule) {
                            $sendWeight = $nettoWeight;
                        } else {
                            $sendWeight = $sendWeightRule;
                        }

                    }
                }

                // get netto weight
                //$nettoWeight = $brutoWeight - $tarraWeight;

                // get freight weight
                $freightRule = '';
                $freightQuantity = 0;
                $sqlfc = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                $resultFreight = $myDatabase->query($sqlfc, MYSQLI_STORE_RESULT);
                if ($resultFreight !== false && $resultFreight->num_rows == 1) {
                    $rowFreight = $resultFreight->fetch_object();
                    $freightRule = $rowFreight->freight_rule;


                }

                if ($freightRule == 0 && $nettoWeight < $sendWeight) {
                    $freightQuantity = $nettoWeight;
                } else if ($freightRule == 0 && $nettoWeight > $sendWeight) {
                    $freightQuantity = $sendWeight;
                } else if ($freightRule == 2) {
                    $freightQuantity = $nettoWeight;
                } else if ($freightRule == 1) {
                    $freightQuantity = $sendWeight;
                } else if ($nettoWeight == $sendWeight) {
                    $freightQuantity = $sendWeight;
                } else {
                    $freightQuantity = $sendWeight;
                }

                /*if($freightRule == 1) {
				$freightQuantity = $sendWeight;
            }else if($freightRule == 0) {
                if($nettoWeight < $sendWeight) {
                    $freightQuantity = $nettoWeight;
                } else if($nettoWeight > $sendWeight) {
                    $freightQuantity = $sendWeight;
                } else {
                    $freightQuantity = $sendWeight;
                }
            }*/ /*elseif($freightWeightRule == 1) {
                $freightQuantity = $sendWeight;
            } elseif($freightWeightRule == 2) {
                $freightQuantity = $nettoWeight;
            } else {
                $freightQuantity = $sendWeight;
            }*/

                // get shrink condition
//            $quantity = $nettoWeight;
//            $sql = "SELECT * FROM `condition` WHERE category_id = 1 AND contract_id = {$contractId}";
//            $resultCondition = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//            if($resultCondition !== false && $resultCondition->num_rows == 1) {
//                $rowCondition = $resultCondition->fetch_object();
//                $quantity = ${$rowCondition->rule};
//            }
                if ($contractDate <= $b) {
                    if ($sendWeight <= $balanceQuantity || ($contractType == 'C' && $balanceQuantity >= 0)) {
                        // get shrink
                        $shrink = 0;
                        if ($contractType == 'P') {
                            if ($nettoWeight < $sendWeight) {
                                $quantity = $nettoWeight;
                                $shrink = $sendWeight - $nettoWeight;
                            } elseif ($nettoWeight > $sendWeight) {
                                $quantity = $sendWeight;
                                $shrink = 0;
                            } else {
                                $quantity = $sendWeight;
                            }
                        } elseif ($contractType == 'C') {
                            if ($curahWeightRule == 0) {
                                if ($nettoWeight < $sendWeight) {
                                    $quantity = $nettoWeight;
                                    $shrink = $sendWeight - $nettoWeight;
                                } elseif ($nettoWeight > $sendWeight) {
                                    $quantity = $sendWeight;
                                    $shrink = 0;
                                } else {
                                    $quantity = $sendWeight;
                                }
                            } elseif ($curahWeightRule == 1) {
                                $quantity = $sendWeight;
                                $shrink = $sendWeight - $nettoWeight;
                            } elseif ($curahWeightRule == 2) {
                                $quantity = $nettoWeight;
                                $shrink = $sendWeight - $nettoWeight;
                            } else {
                                $quantity = $sendWeight;
                            }
                        }

                        // get next slip no
                        // $checkSlipNo = $stockpileCode /*.'-'. $currentYear*/;

                        $checkSlipNo = $stockpileCode . '-' . $currentYear2;

//                $sql = "SELECT LPAD(COUNT(1) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ";
//                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                        $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($resultSlip->num_rows == 0) {
                            $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        }
                        $rowSlipNo = $resultSlip->fetch_object();
                        $nextSlipNo = $rowSlipNo->next_id;
                        $slipNo = $checkSlipNo . '-' . $nextSlipNo;

                        // get freight cost
                        if ($freightCostId == 'NONE') {
                            $freightCostId = 'NULL';
                            $freightPrice = 0;
                            //$freightQuantity2111 = 0;
                        } else {
                            $sqlF = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                            $resultF = $myDatabase->query($sqlF, MYSQLI_STORE_RESULT);
                            if ($resultF !== false && $resultF->num_rows == 1) {
                                $rowF = $resultF->fetch_object();
                                $freightPrice = $rowF->price_converted;
                                if ($rowF->freight_rule == 1) {
                                    //$freightQuantity2111 = $sendWeight;
                                } else {
                                    //$freightQuantity2111 = $freightQuantity;
                                }
                                if ($rowF->pph_tax_id != 0 && $rowF->pph_tax_id != '') {
                                    $fcTaxId = $rowF->pph_tax_id;
                                } else {
                                    $fcTaxId = 0;
                                }
                            }
                        }

                        // get handling cost
                        if ($handlingCostId == 'NONE') {
                            $handlingCostId = 'NULL';
                            $handlingQuantity = 0;
                            $handlingPrice = 0;
                        } else {
                            $sql = "SELECT vhc.vendor_handling_id, vhc.price_converted, vh.pph_tax_id, vh.vendor_handling_rule
                            FROM `vendor_handling_cost` vhc 
                            INNER JOIN vendor_handling vh
                                ON vh.vendor_handling_id = vhc.vendor_handling_id
                            WHERE vhc.handling_cost_id = {$handlingCostId}";
                            $resultHandling = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($resultHandling !== false && $resultHandling->num_rows == 1) {
                                $rowHandling = $resultHandling->fetch_object();
                                $handlingPrice = $rowHandling->price_converted;
                                if ($rowHandling->vendor_handling_rule == 1) {
                                    $handlingQuantity = $sendWeight;
                                } else {
                                    $handlingQuantity = $nettoWeight;
                                }

                            }
                        }

                        // get unloading cost
                        if ($unloadingCostId == 'NONE') {
                            $unloadingCostId = 'NULL';
                            $unloadingPrice = 0;
                        } else {
                            $sql = "SELECT uc.price_converted 
                            FROM `unloading_cost` uc 
                            WHERE uc.unloading_cost_id = {$unloadingCostId}";
							//echo " YE " . $sql;
                            $resultUnloading = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($resultUnloading !== false && $resultUnloading->num_rows == 1) {
                                $rowUnloading = $resultUnloading->fetch_object();

                                $unloadingPrice2 = $rowUnloading->price_converted;


                                $sql2 = "SELECT l.laborRules FROM `labor` l WHERE l.labor_id = {$laborId}";
                                $resultLabor2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                                if ($resultLabor2 !== false && $resultLabor2->num_rows == 1) {
                                    $rowLabor2 = $resultLabor2->fetch_object();
                                    if ($rowLabor2->laborRules == 1) {
                                        $unloadingPrice = $unloadingPrice2;
                                    } elseif ($rowLabor2->laborRules == 2) {

                                        if ($nettoWeight < $sendWeight) {
                                            $unloadingPrice = $unloadingPrice2 * $nettoWeight;
                                        } elseif ($nettoWeight > $sendWeight) {
                                            $unloadingPrice = $unloadingPrice2 * $sendWeight;
                                        } else {
                                            $unloadingPrice = $unloadingPrice2 * $nettoWeight;
                                        }

                                    } elseif ($rowLabor2->laborRules == 3) {
                                        $unloadingPrice = $unloadingPrice2 * $nettoWeight;
                                    } elseif ($rowLabor2->laborRules == 4) {
                                        $unloadingPrice = $unloadingPrice2 * $sendWeight;
                                    } else {
                                        $unloadingPrice = $unloadingPrice2;
                                    }
                                } else {
                                    $unloadingPrice = $unloadingPrice2;
                                }
                            }
                        }
						
						$boolLabor = true;
						if($unloadingPrice > 0 && $laborId == 'NONE') {
							$boolLabor = false;
						}


                        if ($laborId == 'NONE') {
                            $laborId = 'NULL';
                        } else {
                            $sql = "SELECT l.pph_tax_id
                            FROM `labor` l
                            WHERE l.labor_id = {$laborId}";
                            $resultLabor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($resultLabor !== false && $resultLabor->num_rows == 1) {
                                $rowLabor = $resultLabor->fetch_object();
                                if ($rowLabor->pph_tax_id != 0 && $rowLabor->pph_tax_id != '') {
                                    $ucTaxId = $rowLabor->pph_tax_id;
                                } else {
                                    $ucTaxId = 0;
                                }
                            }
                        }

                        // get inventory value
                        $inventoryValue = ($freightQuantity * $freightPrice) + $unloadingPrice + ($quantity * $unitPrice);

                        //check double input
                        $sqlTiket2 = "SELECT pecah_slip FROM transaction_timbangan WHERE transaction_id = '{$slipUpload}'";
                        $resultTiket2 = $myDatabase->query($sqlTiket2, MYSQLI_STORE_RESULT);
                        if ($resultTiket2 !== false && $resultTiket2->num_rows == 1) {
                            $rowTiket2 = $resultTiket2->fetch_object();
                            $pecah_slip = $rowTiket2->pecah_slip;
                            //$boolTiket = false;


                        }

                        $boolTiket = true;
                        if ($slipUpload != '' && $slipUpload != 'NULL' && $slipUpload != 0 && $pecah_slip == 0) {

                            $sqlTiket = "SELECT COUNT(*) as tiket,COALESCE(SUM(persen_pecah_slip),0) AS persen FROM transaction WHERE notim_status = 0 AND t_timbangan = '{$slipUpload}'";
                            $resultTiket = $myDatabase->query($sqlTiket, MYSQLI_STORE_RESULT);
                            if ($resultTiket !== false && $resultTiket->num_rows == 1) {
                                $rowTiket = $resultTiket->fetch_object();


                                if ($rowTiket->tiket >= 1) {
                                    $boolTiket = false;

                                }
                            }
                        }

                        if ($pecah_slip == 1) {
                            $sqlTiket1 = "SELECT COALESCE(SUM(persen_pecah_slip),0) AS persen FROM transaction WHERE notim_status = 0 AND t_timbangan = '{$slipUpload}'";
                            $resultTiket1 = $myDatabase->query($sqlTiket1, MYSQLI_STORE_RESULT);
                            if ($resultTiket1 !== false && $resultTiket1->num_rows == 1) {
                                $rowTiket1 = $resultTiket1->fetch_object();

                                if ($rowTiket1->persen > 0) {
                                    $persenPecahSlip = 1 - $rowTiket1->persen;
                                }

                            }
                        } else {
                            $persenPecahSlip = 0;
                        }

                        //Check Closing Date
                        $newTransactionDate = implode("-", array_reverse(explode("/", $unloadingDate)));
                        $checkClosingDate = explode('-', closingDate($newTransactionDate, 'Nota Timbang - Input'));
                        $boolClosing = $checkClosingDate[0];
                        $closingDate = $checkClosingDate[1];


                        $sqlChckSlip = "SELECT slip_no FROM TRANSACTION WHERE slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                        $resultChckSlip = $myDatabase->query($sqlChckSlip, MYSQLI_STORE_RESULT);
                        if ($resultChckSlip !== false && $resultChckSlip->num_rows == 1) {
                            $rowChckSlip = $resultChckSlip->fetch_object();

                            $lastChckSlip = $rowChckSlip->slip_no;

                        }
                        if ($lastChckSlip != $slipNo) {
							
							if($boolLabor){
                            if ($boolTiket) {
                                // insert into transaction
                                if ($boolClosing) {
                                    $sql = "INSERT INTO `transaction` (slip_no, t_timbangan, stockpile_contract_id, transaction_date, loading_date, vehicle_no, labor_id, unloading_cost_id, "
                                        . "unloading_date, freight_cost_id, handling_cost_id, permit_no, transaction_type, vendor_id, send_weight, bruto_weight, tarra_weight, "
                                        . "netto_weight, notes, driver, freight_quantity, handling_quantity, quantity, shrink, freight_price, handling_price, unloading_price, unit_price, "
                                        . "inventory_value, block, curah_tax_id, uc_tax_id, fc_tax_id, entry_by, entry_date, contract_pks_detail_id, persen_pecah_slip, rsb, ggl, rsb_ggl, uncertified) "
                                        . "VALUES ('{$slipNo}', '{$slipUpload}', {$stockpileContractId}, STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), STR_TO_DATE('{$loadingDate}', '%d/%m/%Y'), "
                                        . "'{$vehicleNo}', {$laborId}, {$unloadingCostId}, STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), {$freightCostId}, {$handlingCostId}, '{$permitNo}', "
                                        . "{$transactionType}, {$supplierId}, {$sendWeight}, {$brutoWeight}, {$tarraWeight}, {$nettoWeight}, '{$notes}', "
                                        . "'{$driver}', {$freightQuantity}, {$handlingQuantity}, {$quantity}, {$shrink}, {$freightPrice}, {$handlingPrice}, {$unloadingPrice}, {$unitPrice}, {$inventoryValue}, '{$block}', "
                                        . "{$curahTaxId}, {$ucTaxId}, {$fcTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$contractPksDetailId}','{$persenPecahSlip}', {$tempRSB}, {$tempGGL}, {$tempRG}, {$tempUncertified})";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                    if ($result !== false) {
                                        $return_value = '|OK|Transaction has inserted successfully.|';

                                        $transactionId = $myDatabase->insert_id;

                                        // if curah update contract and stockpile_contract quantity
                                    if ($contractType == 'C') {
                                            /*$sql = "UPDATE contract SET quantity = {$quantity} WHERE contract_id = {$contractId}";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                    $sql = "UPDATE stockpile_contract SET quantity = {$quantity} WHERE stockpile_contract_id = {$stockpileContractId}";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/
                                        }

                                        $sql1 = "SELECT tt.send_weight,COALESCE(SUM(t.send_weight),0) AS totalSend, tt.`pecah_slip`
										 FROM transaction_timbangan tt 
										 LEFT JOIN TRANSACTION t ON t.t_timbangan = tt.transaction_id 
										 WHERE tt.transaction_id = '{$slipUpload}'";
                                        $result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
                                        if ($result1 !== false && $result1->num_rows == 1) {
                                            $row1 = $result1->fetch_object();
                                            $totalSend = $row1->totalSend;
                                            if ($row1->totalSend == $row1->send_weight && $row1->pecah_slip == 1) {

                                                $sql = "UPDATE transaction_timbangan SET notim_status = 1 WHERE transaction_id = '{$slipUpload}'";
                                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                            } else if ($row1->pecah_slip == 0) {
                                                $sql = "UPDATE transaction_timbangan SET notim_status = 1 WHERE transaction_id = '{$slipUpload}'";
                                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                            }

                                        }


                                        $sql = "CALL sp_shrink_weight({$transactionId})";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
										
										//== Start Add by Eva
                                        $sql_shrink = "SELECT * FROM transaction_shrink_weight 
                                                        WHERE transaction_id = '{$transactionId}'";
                                        $result_shrink = $myDatabase->query($sql_shrink, MYSQLI_STORE_RESULT);
                                        
                                        if($result_shrink !== false && $result_shrink->num_rows == 1){
                                            $rowData = $result_shrink->fetch_object();
                                            $shrink_id = $rowData->shrink_id;
                                            $transaction_id = $rowData->transaction_id;
                                            $stockpile_name = $rowData->stockpile_name;
                                            $send_weight = $rowData->send_weight;
                                            $netto_weight = $rowData->netto_weight;
                                            $susut = $rowData->susut;
                                            $shrink_tolerance_kg = $rowData->shrink_tolerance_kg;
                                            $persen = $rowData->persen;
                                            $weight_persen = $rowData->weight_persen;
                                            $amt_claim = $rowData->amt_claim;
                                            $trx_shrink_tolerance_kg = $rowData->trx_shrink_tolerance_kg;
                                            $trx_shrink_tolerance_persen = $rowData->trx_shrink_tolerance_persen;
                                            $trx_shrink_claim = $rowData->trx_shrink_claim;
											
											
										}else{
											$shrink_id = 0;
                                            $transaction_id = $transactionId;
                                            $stockpile_name = '-';
                                            $send_weight = $sendWeight;
                                            $netto_weight = $nettoWeight;
                                            $susut = $shrink;
                                            $shrink_tolerance_kg = 0;
                                            $persen = 0;
                                            $weight_persen = 0;
                                            $amt_claim = $newAmountClaim;
                                            $trx_shrink_tolerance_kg = 0;
                                            $trx_shrink_tolerance_persen = 0;
                                            $trx_shrink_claim = 0;
										}
                                            //if($newAmountClaim > 0 && $newAmountClaim !=''){
											if($newAmountClaim !='' || $newAmountClaim != null){
												$sqlslb = "INSERT INTO `transaction_additional_shrink` (shrink_id,
																transaction_id, stockpile_name, send_weight,
                                                                netto_weight, susut, shrink_tolerance_kg, persen, weight_persen, price_add_shrink, qty_add_shrink, amt_claim, 
                                                                trx_shrink_tolerance_kg, trx_shrink_tolerance_persen, trx_shrink_claim, update_by, 
                                                                update_date) VALUES ("
                                                                . "'{$shrink_id}','{$transaction_id}','{$stockpile_name}','{$send_weight}',
                                                                '{$netto_weight}','{$susut}','{$shrink_tolerance_kg}','{$persen}','{$weight_persen}','{$priceAddShrink}','{$qtyAddShrink}',
                                                                '{$newAmountClaim}','{$trx_shrink_tolerance_kg}','{$trx_shrink_tolerance_persen}',
                                                                '{$trx_shrink_claim}','{$_SESSION['userId']}', STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                                $resultslb = $myDatabase->query($sqlslb, MYSQLI_STORE_RESULT);
												
                                                //$sqlhistory = "INSERT INTO `history_shrink_weight` (shrink_id, transaction_id, //stockpile_name, send_weight,
                                                //                netto_weight, susut, shrink_tolerance_kg, persen, weight_persen, amt_claim, 
                                                //                trx_shrink_tolerance_kg, trx_shrink_tolerance_persen, trx_shrink_claim, update_by, 
                                                //                update_date) VALUES ("
                                                 //               . "'{$shrink_id}','{$transaction_id}','{$stockpile_name}','{$send_weight}',
                                                //                '{$netto_weight}','{$susut}','{$shrink_tolerance_kg}','{$persen}','{$weight_persen}',
                                                //                '{$amt_claim}','{$trx_shrink_tolerance_kg}','{$trx_shrink_tolerance_persen}',
                                                //                '{$trx_shrink_claim}','{$_SESSION['userId']}', STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                                //$resulthistory = $myDatabase->query($sqlhistory, MYSQLI_STORE_RESULT);

                                                //if ($resulthistory !== false) {
                                                //    $sql = "UPDATE `transaction_shrink_weight` SET "
                                                //    . "amt_claim = '{$newAmountClaim}'"
                                                //   . "WHERE transaction_id = {$transactionId}";
                                                //}
                                                //$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                            }
                                        //}
                                        //== End Add by Eva
										
                                        if ($qty_rule !== 0) {
                                            $sql = "INSERT INTO contract_netto (transaction_id, send_weight) VALUES ({$transactionId},{$sendWeightRule})";
                                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        }

                                        insertGeneralLedger($myDatabase, 'NOTA TIMBANG',"NULL", "NULL", "NULL", "NULL", $transactionId);
										
										insertReportGL($myDatabase, 'NOTA TIMBANG',"NULL", "NULL", "NULL", "NULL", $transactionId);

                                        unset($_SESSION['transaction']);
                                    } else {
                                        $return_value = '|FAIL|Failed insert transaction.| ' . $sql . '';
                                    }
                                } else {
                                    echo $closingDate;
                                    die();
                                } //tutup else closingDate
                            } else {
                                $return_value = '|FAIL|Tiket timbang sudah diinput.|';
                            }
							}else{
							$return_value = '|FAIL|Unloading Org tidak boleh NONE.|';
					
							}

                        } else {
                            $return_value = '|FAIL|No Slip Sudah Ada.|';
                        }

                    } else {
                        $return_value = '|FAIL|The quantity exceed the balance of the contract.|';
                    }

                } else {
                    $return_value = '|FAIL|Tanggal transaksi harus melebihi tanggal kontrak.|' . $contractDate . '|' . $unloadingDate . '|';
                }
            } else {
                $return_value = '|FAIL|Please fill the required fields.|' . $sql . '';
            }

        } else {
            $return_value = '|FAIL|Tanggal transaksi sudah lebih dari 5 hari.|';
        }
        // </editor-fold>
    } elseif ($transactionType == 2 && $_POST['_method'] == 'INSERT_PREVIEW') {
        // <editor-fold defaultstate="collapsed" desc="OUT">
        $rsb = $myDatabase->real_escape_string($_POST['rsb1']);
        $ggl = $myDatabase->real_escape_string($_POST['ggl1']);
        $rsb_ggl = $myDatabase->real_escape_string($_POST['rsb_ggl']);
        $uncertified1 = $myDatabase->real_escape_string($_POST['uncertified']);

        $msgError_R = $myDatabase->real_escape_string($_POST['qtyRSB_error1']);
        $msgError_G = $myDatabase->real_escape_string($_POST['qtyGGL_error1']);
        $msgError_RG = $myDatabase->real_escape_string($_POST['qtyRG_error1']);
        $msgError_UN = $myDatabase->real_escape_string($_POST['qtyUN_error1']);

        $whereProperty = '';
        $boolean1 = true;

        $qtyRSB = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty_rsb']));
        $qtyGGL = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty_ggl']));
        $qty_RG = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty_RG']));
        $qty_uncertified = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty_uncertified']));
		
		$transactionDate =  $myDatabase->real_escape_string($_POST['transactionDate2']);
        $newtransactionDate2 = implode("-", array_reverse(explode("/", $transactionDate)));


        //JIKA yg dipilih hanya 1 jeni Sertifikat
        if($rsb == 1 && $ggl == 0 && $rsb_ggl == 0 && $uncertified1 == 0){  //RSB
            $whereProperty = "AND t.rsb = 1";
        } else if($ggl == 1 && $rsb == 0 && $rsb_ggl == 0 && $uncertified1 == 0 ){ //GGL
            $whereProperty = "AND t.ggl = 1";
        }else if($rsb_ggl == 1 && $ggl == 0 && $rsb == 0 && $uncertified1 == 0){ //rsb + ggl
            $whereProperty = "AND t.rsb_ggl = 1";
        }else if($uncertified1 == 1 && $ggl == 0 && $rsb_ggl == 0 && $rsb == 0){  //uncertified
            $whereProperty = "AND t.uncertified = 1";
        }
        
        //JIKA yg dipilih hanya 2 jeni Sertifikat
        else if($rsb == 1 && $ggl == 1  && $rsb_ggl == 0  && $uncertified1 == 0){ //rsb, ggl
            $whereProperty = "AND (t.rsb = 1 OR t.ggl = 1)";
        }else if($rsb == 1 && $rsb_ggl == 1  && $ggl == 0  && $uncertified1 == 0){ //rsb. (rsb+ggl)
            $whereProperty = "AND (t.rsb = 1 OR t.rsb_ggl = 1 )";
        }else if($rsb == 1 && $uncertified1 == 1 && $ggl == 0  && $rsb_ggl == 0){  //rsb, uncertified
            $whereProperty = "AND (t.rsb = 1 OR t.uncertified = 1)";
        }else if($ggl == 1 && $rsb_ggl == 1 && $rsb == 0  && $uncertified1 == 0){ // ggl, (rsb+ggl)
            $whereProperty = "AND (t.ggl = 1 OR t.rsb_ggl = 1)";
        }else if($ggl == 1 && $uncertified1 == 1 && $rsb == 0  && $rsb_ggl == 0){ // ggl, uncertified
            $whereProperty = "AND (t.ggl = 1 OR t.uncertified = 1)";
        }else if($rsb_ggl == 1 && $uncertified1 == 1 && $rsb == 0  && $ggl == 0){  // (rsb+ggl), uncertified
            $whereProperty = "AND (t.rsb_ggl = 1 OR t.uncertified = 1)";
        }
        
        //JIKA yg dipilih hanya 3 jeni Sertifikat
        else if($rsb == 1 && $ggl == 1 && $rsb_ggl == 1 && $uncertified1 == 0){  //rsb, ggl, (rsb+ggl)
            $whereProperty = "AND (t.rsb = 1 OR t.ggl = 1 OR t.rsb_ggl = 1)";
        }else if($rsb == 1 && $ggl == 1 &&  $uncertified1 == 1 && $rsb_ggl == 0){ //rsb, ggl, uncertified 
            $whereProperty = "AND (t.rsb = 1 OR t.ggl = 1 OR t.uncertified = 1)";
        }else if($rsb == 1 && $rsb_ggl == 1 && $uncertified1 == 1 && $ggl == 0){  //rsb, (rsb+ggl), uncertified
            $whereProperty = "AND (t.rsb = 1 OR t.rsb_ggl = 1 OR t.uncertified = 1)";
        }else if($ggl == 1 && $rsb_ggl == 1 && $uncertified1 == 1 && $rsb == 0){ //ggl, (rsb+ggl), uncerti
            $whereProperty = "AND ( t.ggl = 1 OR t.rsb_ggl = 1 OR t.uncertified = 1)";
        }
        
        //JIKA yg dipilih hanya semua jeni Sertifikat
        else if($rsb == 1 && $ggl == 1 && $rsb_ggl == 1 && $uncertified1 == 1){  //all
            $whereProperty = "AND (t.rsb = 1 OR t.ggl = 1 OR t.rsb_ggl = 1 OR t.uncertified = 1)";
        }


        //VALIDASI JIKA ADA NOTIM YG BELUM DI APPROVE DI PREVIEW
        $sqlValidasi = "SELECT sl.sales_id, sl.`sales_no`, sh.`shipment_code`, sl.stockpile_id FROM temp_transaction tt
            LEFT JOIN SHIPMENT sh ON sh.shipment_id = tt.`shipment_id`
            LEFT JOIN sales sl ON sl.`sales_id` = sh.`sales_id`
            WHERE tt.`status` = 0 AND sl.`stockpile_id` = {$stockpileId} AND tt.status <> 2";
        $resultValidasi = $myDatabase->query($sqlValidasi, MYSQLI_STORE_RESULT);
        $validasiCount = $resultValidasi->num_rows;

	//VALIDATION QTY INPUTAN < QTY AVAILABLE => UNCERTIFIED ------------------------------------------------------------------------
        $sqlSP = "SELECT stockpile_code FROM stockpile  WHERE stockpile_id = {$stockpileId}";
        $resultSP = $myDatabase->query($sqlSP, MYSQLI_STORE_RESULT);
        $rowSP = $resultSP->fetch_object();
        $stockpileCode = $rowSP->stockpile_code;

        $sql = "SELECT ROUND(SUM( CASE WHEN t.transaction_type = 1 AND (t.uncertified = 1 OR t.uncertified = 0 OR t.uncertified IS NULL) THEN t.quantity 
                WHEN t.transaction_type = 2 AND (t.uncertified = 1 OR t.uncertified = 0 OR t.uncertified IS NULL) THEN -1 * t.quantity ELSE 0 END) -
                SUM(CASE WHEN t.transaction_type = 2  AND (t.uncertified = 1 OR t.uncertified = 0 OR t.uncertified IS NULL) THEN t.shrink ELSE 0 END))
                AS qty_availableUN,
                ROUND(SUM(CASE WHEN t.transaction_type = 2 THEN t.shrink ELSE 0 END),2 ) AS shrink
            FROM `transaction` t
            LEFT JOIN (
                    SELECT d.transaction_id, d.quantity 
                        FROM delivery d 
                        LEFT JOIN TRANSACTION t ON t.transaction_id = d.`transaction_id` 
                        WHERE t.`delivery_status` = 2 
            )
            d ON d.transaction_id = t.`transaction_id`
            WHERE SUBSTRING(t.slip_no,1,3) = '{$stockpileCode}' AND t.transaction_date <=  '{$newtransactionDate2}' 
            ORDER BY t.transaction_date ASC";
            // echo $sql;
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($result !== false && $result->num_rows == 1) {
                $row = $result->fetch_object();	
                $beginingUN = $row->qty_availableUN;
            }
        //END VALIDATION UNCERTIFIED---------------------------------------------------------------------------------------------------

        if($validasiCount == 0){
             if($beginingUN >= $qty_uncertified ){
                if ($allowInsert2) {
                    if ($stockpileId != '' && $salesId != '' && $shipmentId != '' && $transactionDate2 != '' && $vehicleNo2 != '' && $sendWeight2 != '' && $blWeight != '') {
                             // check stockpile detail & transaction balance
                        $sql = "SELECT s.stockpile_code, s.stockpile_name, 
                        (
                            SELECT COALESCE(SUM(t.quantity), 0) FROM `transaction` t
                            INNER JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                            WHERE sc.stockpile_id = s.stockpile_id
                            AND t.transaction_type = 1 {$whereProperty} 
                        ) AS available_balance,
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction` 
                            WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                            AND transaction_type = 2 
                        ) AS delivered_balance
                    FROM stockpile s
                    WHERE s.stockpile_id = {$stockpileId}";
                // echo $sql;
                    //die();
                    $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                        $rowStockpile = $resultStockpile->fetch_object();
                        $stockpileCode = $rowStockpile->stockpile_code;
                        $stockpileName = $rowStockpile->stockpile_name;
                        $availableBalance = $rowStockpile->available_balance;
                        $deliveredBalance = $rowStockpile->delivered_balance;
                    }

                        // get sales detail
                        $sql = "SELECT sl.quantity, sl.price_converted, sl.currency_id, sl.exchange_rate, sl.price, cust.pph_tax_id,
                        sl.stockpileContractId, sl.sales_type,sl.stockpileLangsir, sl.vendorLangsir, sl.sales_no, DATE_FORMAT(sales_date,'%Y-%m-%d') AS salesDate
                            FROM sales sl 
                            INNER JOIN customer cust
                                ON cust.customer_id = sl.customer_id
                            WHERE sl.sales_id = {$salesId}";
                        $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($resultSales !== false && $resultSales->num_rows == 1) {
                            $rowSales = $resultSales->fetch_object();
                            $salesBalance = $rowSales->quantity;
                            $salesUnitPrice = $rowSales->price_converted;
                            $salesCurrencyId = $rowSales->currency_id;
                            $salesExchangeRate = $rowSales->exchange_rate;
                            $salesOriginalUnitPrice = $rowSales->price;
                            $custTaxId = $rowSales->pph_tax_id;
                            $stockpileContractIdShipment = $rowSales->stockpileContractId;
                            $salesType = $rowSales->sales_type;
                            $vendorLangsir = $rowSales->vendorLangsir;
                            $salesNo = $rowSales->sales_no;
                            $stockpileLangsir = $rowSales->stockpileLangsir;
                            $salesDate = $rowSales->salesDate;
                        }

                        // get next slip no

                        $checkSlipNo = $stockpileCode . '-' . $currentYear3;

                        //$checkSlipNo = $stockpileCode /*.'-'. $currentYear*/;
        //            $sql = "SELECT LPAD(COUNT(1) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ";
        //            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                        $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($resultSlip->num_rows == 0) {
                            $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        }
                        $rowSlipNo = $resultSlip->fetch_object();
                        $nextSlipNo = $rowSlipNo->next_id;
                        $slipNo = $checkSlipNo . '-' . $nextSlipNo;

                        if ($salesDate <= $b2) {
        //            if($sendWeight2 <= $availableBalance && $blWeight <= ($salesBalance - $deliveredBalance)) {
                            if ($sendWeight2 <= $availableBalance) {
                                $shrink = $sendWeight2 - $blWeight;
                                //closingDate
                                $newTransactionDate = implode("-", array_reverse(explode("/", $transactionDate2)));
                                $stockpileCD = $stockpileId;
                                $checkClosingDate = explode('-', closingDate($newTransactionDate, 'Nota Timbang - Input'));
                                $boolClosing = $checkClosingDate[0];
                                $closingDate = $checkClosingDate[1];

                                // insert into transaction

                                if ($boolClosing) {
                                    $sql = "INSERT INTO `temp_transaction` (slip_no, shipment_id, transaction_date,unloading_date, vehicle_no, transaction_type, "
                                    . "send_weight, notes, quantity, shrink, cust_tax_id, entry_by, entry_date, ggl, rsb, rsb_ggl, uncertified) "
                                    . "VALUES ('{$slipNo}', {$shipmentId}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), '{$vehicleNo2}', "
                                    . "{$transactionType}, {$sendWeight2}, '{$notes2}', {$blWeight}, {$shrink}, {$custTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$ggl}, {$rsb}, {$rsb_ggl}, {$uncertified1})";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                    if ($result !== false) {
                                        $tempTransactionId = $myDatabase->insert_id;

                                        $return_value = '|OK|Transaction has inserted successfully.|';

                                        // insert into tempdelivery

                                        if ($stockpileContractIdShipment == 0 || $stockpileContractIdShipment == 'NULL' || $stockpileContractIdShipment == '') {

                                            //SELECT semua data yg berhubungan dengan sertifikat yg di pilih saat input notim OUT
                                            $sqlTest = "SELECT t.* 
                                            FROM transaction t 
                                            WHERE SUBSTR(t.slip_no,1,3) IN (SELECT stockpile_code FROM stockpile WHERE stockpile_id = {$stockpileId}) 
                                                AND t.transaction_type = 1 AND t.delivery_status <> 1 {$whereProperty} AND transaction_date <= '{$newTransactionDate}'
                                            ORDER BY t.unloading_date ASC, t.slip_no ASC";
                                            $resultDelivery = $myDatabase->query($sqlTest, MYSQLI_STORE_RESULT);
                                           
                                            if ($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                                                $balanceLeftUN = $qty_uncertified;
                                                $balanceLeftR = $qtyRSB; //2jt
                                                $balanceLeftG = $qtyGGL; 
                                                $balanceLeftRG = $qty_RG; //1jt
                                                $tempNo = 1;
                                                $totalInventoryValue = 0;
                                                while ($rowDelivery = $resultDelivery->fetch_object()) {
                                                    $syncStatus = 0;
                                                    $tempQtyR = 0;
                                                    $tempQtyG = 0;
                                                    $tempQtyRG = 0;
                                                    $tempQtyUN = 0;
                                                    $quantityTaken = 0;
                                                    $percentTaken = 0;
                                                    $deliveryStatus = 0;
                                                   
                                                    if ($rowDelivery->sync_status == 1) {
                                                        $syncStatus = 2;
                                                    }
                                                     
    
                                                    if ($rowDelivery->delivery_status == 0) { //JIKA NOTIM BELUM DI PAKE
                                                        if($rowDelivery->rsb == 1 && $balanceLeftR > 0) { //RSB
                                                            if ($balanceLeftR >= $rowDelivery->quantity) {
                                                                $balanceLeftR = $balanceLeftR - $rowDelivery->quantity;
                                                                $quantityTaken = $rowDelivery->quantity;
                                                                $percentTaken = 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyR = $quantityTaken;
                                                                
                                                            } elseif ($balanceLeftR < $rowDelivery->quantity) {
                                                                $quantityTaken = $balanceLeftR;
                                                                $tempQtyR = $quantityTaken;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftR = 0;
                                                                $deliveryStatus = 2;
                                                            }
                                                        }else if($rowDelivery->ggl == 1 && $balanceLeftG > 0) { //GLL
                                                            if ($balanceLeftG >= $rowDelivery->quantity) {
                                                                $balanceLeftG = $balanceLeftG - $rowDelivery->quantity;
                                                                $quantityTaken = $rowDelivery->quantity;
                                                                $percentTaken = 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyG = $quantityTaken;
                                                            } elseif ($balanceLeftG < $rowDelivery->quantity) {
                                                                $quantityTaken = $balanceLeftG;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftG = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyG = $quantityTaken;
                                                            }
                                                        }else if($rowDelivery->rsb_ggl == 1 && $balanceLeftRG > 0) { //GLL-RSB
                                                            if ($balanceLeftRG >= $rowDelivery->quantity) {
                                                                $balanceLeftRG = $balanceLeftRG - $rowDelivery->quantity;
                                                                $quantityTaken = $rowDelivery->quantity;
                                                                $percentTaken = 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyRG = $quantityTaken;
                                                            } elseif ($balanceLeftRG < $rowDelivery->quantity) {
                                                                $quantityTaken = $balanceLeftRG;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftRG = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyRG = $quantityTaken;
                                                            }
                                                        } else if($rowDelivery->uncertified == 1 && $balanceLeftUN > 0) { //un-certified 
                                                            if ($balanceLeftUN >= $rowDelivery->quantity) { //272.080
                                                                $balanceLeftUN = $balanceLeftUN - $rowDelivery->quantity;
                                                                $quantityTaken = $rowDelivery->quantity;
                                                                $percentTaken = 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyUN = $quantityTaken;
                                                            } elseif ($balanceLeftUN < $rowDelivery->quantity) {  // 10 < 7820
                                                                $quantityTaken = $balanceLeftUN;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftUN = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyUN = $quantityTaken;
                                                            }
                                                        }  
                                                    } elseif ($rowDelivery->delivery_status == 2) { //JIKA NOTIM SUDAH DI PAKE TAPI ADA SISA
                                                        $totalTaken = 0;
                                                        $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                                        $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                                        if ($resultTaken !== false && $resultTaken->num_rows == 1) {
                                                            $rowTaken = $resultTaken->fetch_object();
                                                            $totalTaken = $rowTaken->total_taken;
                                                        }
                                                        if($rowDelivery->rsb == 1 && $balanceLeftR > 0){ //RSB
                                                            if ($balanceLeftR >= ($rowDelivery->quantity - $totalTaken)) {
                                                                $balanceLeftR = $balanceLeftR - ($rowDelivery->quantity - $totalTaken);
                                                                $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyR = $quantityTaken;
                                                               // echo " QTY TAKEN " . $quantityTaken;
                                                            } elseif ($balanceLeftR < ($rowDelivery->quantity - $totalTaken)) {
                                                                $quantityTaken = $balanceLeftR;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftR = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyR = $quantityTaken;
                                                            }
                                                        } else if($rowDelivery->ggl == 1 && $balanceLeftG > 0){ //GGL
                                                            if ($balanceLeftG >= ($rowDelivery->quantity - $totalTaken)) {
                                                                $balanceLeftG = $balanceLeftG - ($rowDelivery->quantity - $totalTaken);
                                                                $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyG = $quantityTaken;
                                                            } elseif ($balanceLeftG < ($rowDelivery->quantity - $totalTaken)) {
                                                                $quantityTaken = $balanceLeftG;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftG = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyG = $quantityTaken;
                                                            }
                                                        }else if($rowDelivery->rsb_ggl == 1 && $balanceLeftRG > 0){ //GGL-RSB
                                                            if ($balanceLeftRG >= ($rowDelivery->quantity - $totalTaken)) {
                                                                $balanceLeftRG = $balanceLeftRG - ($rowDelivery->quantity - $totalTaken);
                                                                $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyRG = $quantityTaken;
                                                            } elseif ($balanceLeftRG < ($rowDelivery->quantity - $totalTaken)) {
                                                                $quantityTaken = $balanceLeftRG;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftRG = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyRG = $quantityTaken;
                                                            }
                                                        }else if($rowDelivery->uncertified == 1 && $balanceLeftUN > 0){ //un-certified
                                                            if ($balanceLeftUN >= ($rowDelivery->quantity - $totalTaken)) {
                                                                $balanceLeftUN = $balanceLeftUN - ($rowDelivery->quantity - $totalTaken);
                                                                $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyUN = $quantityTaken;
                                                            } elseif ($balanceLeftUN < ($rowDelivery->quantity - $totalTaken)) {
                                                                $quantityTaken = $balanceLeftUN;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftUN = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyUN = $quantityTaken;
                                                            }
                                                        } 
                                                    }
    
                                                    $deliveryValue = $quantityTaken * $salesUnitPrice;
                                                    $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                                    $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                                    $percentTaken = $percentTaken * 100;
                                                    if($quantityTaken <> 0){
                                                        $sqlTest3 = "INSERT INTO `temp_delivery` (temp_transaction_id, shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, 
                                                                            delivery_value, entry_by, entry_date, qty_rsb, qty_ggl, qty_rsb_ggl, qty_uncertified, delivery_status, sync_status) VALUES ("
                                                                . "{$tempTransactionId}, {$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                                                . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$tempQtyR}, {$tempQtyG}, {$tempQtyRG}, {$tempQtyUN}, {$deliveryStatus}, {$syncStatus})";
                                                        $result = $myDatabase->query($sqlTest3, MYSQLI_STORE_RESULT);
                                                  }
                                               //     echo "INSERT DELIVERY" . $tempNo . " => " . $balanceLeftUN . " | " . $quantityTaken .  " <> ";
                                                    // $tempNo++;
                                                } 
                                            }
                                        } else {
                                            $sql = "SELECT t.* 
                                                FROM transaction t 
                                                WHERE SUBSTR(t.slip_no,1,3) IN (SELECT stockpile_code FROM stockpile WHERE stockpile_id = {$stockpileId}) 
                                                        AND t.transaction_type = 1 AND t.delivery_status <> 1 {$whereProperty}
                                                ORDER BY t.unloading_date ASC, t.slip_no ASC";
                                            $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                            $totalInventoryValue = 0;
                                            if ($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                                                $balanceLeftUN = $qty_uncertified;
                                                $balanceLeftR = $qtyRSB;
                                                $balanceLeftG = $qtyGGL;
                                                $balanceLeftRG = $qty_RG;
                                                while ($rowDelivery = $resultDelivery->fetch_object()) {
                                                    $syncStatus = 0;
                                                    $tempQtyR = 0;
                                                    $tempQtyG = 0;
                                                    $tempQtyRG = 0;
                                                    $tempQtyUN = 0;
                                                    $quantityTaken = 0;
                                                    $percentTaken = 0;
                                                    $deliveryStatus = 0;
                                                    if ($rowDelivery->sync_status == 1) {
                                                        $syncStatus = 2;
                                                    }
    
                                                    if ($rowDelivery->delivery_status == 0) {
                                                        if($rowDelivery->rsb == 1 && $balanceLeft > 0) { //RSB
                                                            if ($balanceLeftR >= $rowDelivery->quantity) {
                                                                $balanceLeftR = $balanceLeftR - $rowDelivery->quantity;
                                                                $quantityTaken = $rowDelivery->quantity;
                                                                $percentTaken = 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyR = $quantityTaken;
                                                            } elseif ($balanceLeftR < $rowDelivery->quantity) {
                                                                $quantityTaken = $balanceLeftR;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftR = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyR = $quantityTaken;
                                                            }
                                                        }else if($rowDelivery->ggl == 1 && $balanceLeftG > 0) { //GGL
                                                            if ($balanceLeftG >= $rowDelivery->quantity) {
                                                                $balanceLeftG = $balanceLeftG - $rowDelivery->quantity;
                                                                $quantityTaken = $rowDelivery->quantity;
                                                                $percentTaken = 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyG = $quantityTaken;
                                                            } elseif ($balanceLeftG < $rowDelivery->quantity) {
                                                                $quantityTaken = $balanceLeftG;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftG = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyG = $quantityTaken;
                                                            }
                                                        }else if($rowDelivery->rsb_ggl == 1 && $balanceLeftRG > 0) { //GGL-RSB
                                                            if ($balanceLeftRG >= $rowDelivery->quantity) {
                                                                $balanceLeftRG = $balanceLeftRG - $rowDelivery->quantity;
                                                                $quantityTaken = $rowDelivery->quantity;
                                                                $percentTaken = 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyRG = $quantityTaken;
                                                            } elseif ($balanceLeftRG < $rowDelivery->quantity) {
                                                                $quantityTaken = $balanceLeftRG;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftRG = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyRG = $quantityTaken;
                                                            }
                                                        }else if($rowDelivery->uncertified == 0 && $balanceLeftUN > 0) { //un-certified
                                                            if ($balanceLeftUN >= $rowDelivery->quantity) {
                                                                $balanceLeftUN = $balanceLeftUN - $rowDelivery->quantity;
                                                                $quantityTaken = $rowDelivery->quantity;
                                                                $percentTaken = 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyUN = $quantityTaken;
                                                            } elseif ($balanceLeftUN < $rowDelivery->quantity) {
                                                                $quantityTaken = $balanceLeftUN;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftUN = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyUN = $quantityTaken;
                                                            }
                                                        }
                                                    } elseif ($rowDelivery->delivery_status == 2) {
                                                        $totalTaken = 0;
                                                        $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                                        $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                                        if ($resultTaken !== false && $resultTaken->num_rows == 1) {
                                                            $rowTaken = $resultTaken->fetch_object();
                                                            $totalTaken = $rowTaken->total_taken;
                                                        }
                                                        if($rowDelivery->rsb == 1 && $balanceLeft > 0){ //RSB
                                                            if ($balanceLeftR >= ($rowDelivery->quantity - $totalTaken)) {
                                                                $balanceLeftR = $balanceLeftR - ($rowDelivery->quantity - $totalTaken);
                                                                $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyR = $quantityTaken;
                                                            } elseif ($balanceLeftR < ($rowDelivery->quantity - $totalTaken)) {
                                                                $quantityTaken = $balanceLeftR;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftR = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyR = $quantityTaken;
                                                            }
                                                        }else if($rowDelivery->ggl == 1 &&  $balanceLeftG > 0){ //GGL
                                                            if ($balanceLeftG >= ($rowDelivery->quantity - $totalTaken)) {
                                                                $balanceLeftG = $balanceLeftG - ($rowDelivery->quantity - $totalTaken);
                                                                $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyG = $quantityTaken;
                                                            } elseif ($balanceLeftG < ($rowDelivery->quantity - $totalTaken)) {
                                                                $quantityTaken = $balanceLeftG;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftG = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyG = $quantityTaken;
                                                            }
                                                        }else if($rowDelivery->rsb_ggl == 1 && $balanceLeftRG > 0 ){ //GGL-RSB
                                                            if ($balanceLeftRG >= ($rowDelivery->quantity - $totalTaken)) {
                                                                $balanceLeftRG = $balanceLeftRG - ($rowDelivery->quantity - $totalTaken);
                                                                $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyRG = $quantityTaken;
                                                            } elseif ($balanceLeftRG < ($rowDelivery->quantity - $totalTaken)) {
                                                                $quantityTaken = $balanceLeftRG;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftRG = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyRG = $quantityTaken;
                                                            }
                                                        }else if($rowDelivery->uncertified == 1 && $balanceLeftUN > 0){ //un-certified
                                                            if ($balanceLeftUN >= ($rowDelivery->quantity - $totalTaken)) {
                                                                $balanceLeftUN = $balanceLeftUN - ($rowDelivery->quantity - $totalTaken);
                                                                $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $deliveryStatus = 1;
                                                                $tempQtyUN = $quantityTaken;
                                                            } elseif ($balanceLeftUN < ($rowDelivery->quantity - $totalTaken)) {
                                                                $quantityTaken = $balanceLeftUN;
                                                                $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                                $balanceLeftUN = 0;
                                                                $deliveryStatus = 2;
                                                                $tempQtyUN = $quantityTaken;
                                                            }
                                                        }
                                                    }
    
                                                    $deliveryValue = $quantityTaken * $salesUnitPrice;
                                                    $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                                    $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                                    $percentTaken = $percentTaken * 100;
    
                                                   if($quantityTaken <> 0){
                                                        $sqlTest3 = "INSERT INTO `temp_delivery` (temp_transaction_id, shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, 
                                                                        delivery_value, entry_by, entry_date, qty_rsb, qty_ggl, qty_rsb_ggl, qty_uncertified, delivery_status, sync_status) VALUES ("
                                                                    . "{$tempTransactionId}, {$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                                                    . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$tempQtyR}, {$tempQtyG}, {$tempQtyRG}, {$tempQtyUN}, {$deliveryStatus}, {$syncStatus})";
                                                        $result = $myDatabase->query($sqlTest3, MYSQLI_STORE_RESULT);
                                                    
                                                  }
                                                }
                                            }
                                        }

                                        //$updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                                        $sql = "UPDATE temp_transaction SET inventory_value = {$totalInventoryValue} WHERE temp_transaction_id = {$tempTransactionId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
      
                                        // update shipment
                                        $cogsAmount = $totalInventoryValue;
                                        if ($salesCurrencyId != 1) {
                                            $cogsAmount = $totalInventoryValue / $salesExchangeRate;
                                        }
                                        $invoiceAmount = $blWeight * $salesOriginalUnitPrice;
                                        $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                                            . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$blWeight}, shipment_status = 1 "
                                            . "WHERE shipment_id = {$shipmentId}";
                                     //   echo " dua " . $sql;
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    
                                        // update sales
                                        $boolUpdateSales = false;
                                        if ($blWeight == ($salesBalance - $deliveredBalance)) {
                                            $salesStatus = 1;
                                            $boolUpdateSales = true;
                                        } elseif ($blWeight < ($salesBalance - $deliveredBalance)) {
                                            $salesStatus = 2;
                                            $boolUpdateSales = true;
                                        }

                                        if ($boolUpdateSales) {
                                            $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    
                                            $sql = "UPDATE sales SET used_status = 1 WHERE sales_id = {$salesId}";
                                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        }

                               
                                        // insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                                        // insertReportGL($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                                        $return_value = '|OK|Transaction has inserted successfully.|';
                                        unset($_SESSION['transaction']);
                                    } else {
                                        $return_value = '|FAIL|Failed insert transaction.|';
                                    }
                                } else {
                                    echo $closingDate;
                                    die();
                                } //tutup else closing_date
                            } else {
                                if ($sendWeight2 > $availableBalance) {
                                    $return_value = '|FAIL|Available quantity in ' . $stockpileName . ' is ' . number_format($availableBalance, 4, '.', ',') . ' Kg.|';
                                } elseif ($sendWeight2 > ($salesBalance - $deliveredBalance)) {
                                    $return_value = '|FAIL|Sales agreement balance is ' . ($salesBalance - $deliveredBalance) . ' Kg.|';
                                }
                            }

                        } else {
                            $return_value = '|FAIL|Tanggal transaksi harus melebihi tanggal sales.|' . $salesDate . '|' . $transactionDate2 . '|';
                        }

                    } else {
                        $return_value = '|FAIL|Please fill the required fields.|';
                    }

                } else {
                    $return_value = '|FAIL|Tanggal transaksi sudah lebih dari 5 hari.|';
                }// </editor-fold>
            }else{
                $return_value = '|FAIL|Nilai Inputan RSB/GGL/RSB+GGL/Uncertified Salah.|';
            }
        }else{
            $return_value = '|FAIL|Notim OUT sebelumnya belum di Approve.|';
        }
    }elseif ($transactionType == 2 && $_POST['_method'] == 'INSERT') {

        $tempTransactionId = $myDatabase->real_escape_string($_POST['tempTransactionId']);

        $sql = "SELECT SUBSTRING(tt.slip_no, 1, 3) AS spCode, tt.* FROM temp_transaction tt where temp_transaction_id = {$tempTransactionId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result !== false && $result->num_rows > 0) {
            $rowData = $result->fetch_object();
            $spCode = $rowData->spCode;
            $rsb_ggl = $rowData->rsb_ggl;
            $rsb = $rowData->rsb;
            $ggl = $rowData->ggl;
            $uncertified = $rowData->uncertified;

            $checkSlipNo = $spCode . '-' . $currentYear3;
            $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            // echo "YY".$sql;
            if ($resultSlip->num_rows == 0) {
                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }
            $rowSlipNo = $resultSlip->fetch_object();
            $nextSlipNo = $rowSlipNo->next_id;
            $slipNo = $checkSlipNo . '-' . $nextSlipNo;

            $transactionDate2 = $rowData->transaction_date;

            $sqlT = "INSERT INTO `transaction` (slip_no, shipment_id, transaction_date,unloading_date, vehicle_no, transaction_type, "
                    . "send_weight, notes, quantity, shrink, cust_tax_id, entry_by, inventory_value, entry_date, rsb, ggl, rsb_ggl, uncertified) "
                    . "VALUES ('{$slipNo}', {$rowData->shipment_id}, '{$rowData->transaction_date}', '{$rowData->transaction_date}', '{$rowData->vehicle_no}', "
                    . "{$rowData->transaction_type}, {$rowData->send_weight}, '{$rowData->notes}', {$rowData->quantity}, {$rowData->shrink}, {$rowData->cust_tax_id}, {$_SESSION['userId']},{$rowData->inventory_value} ,STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), "
                    . "{$rsb}, {$ggl}, {$rsb_ggl}, {$uncertified})";
                $resultT = $myDatabase->query($sqlT, MYSQLI_STORE_RESULT);
                 echo ' TRANSACTION-1 ' . $sqlT;
                
                if ($resultT !== false) {
                    $transactionId = $myDatabase->insert_id;
                
                    $return_value = '|OK|Transaction has inserted successfully.|';

                    $sql = "UPDATE temp_transaction SET transaction_id = {$transactionId}, slip_no = '{$slipNo}', status = 1 WHERE temp_transaction_id = {$tempTransactionId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    $sqlTD = "SELECT * FROM temp_delivery WHERE temp_transaction_id = {$tempTransactionId}";
                    $resultTD = $myDatabase->query($sqlTD, MYSQLI_STORE_RESULT);
                    if ($resultTD !== false && $resultTD->num_rows > 0) {
                        while ($rowTD = $resultTD->fetch_object()) {
                            $deliveryId1 = $rowTD->temp_delivery_id;

                            $sql = "UPDATE transaction SET delivery_status = {$rowTD->delivery_status}, sync_status = {$rowTD->sync_status} WHERE transaction_id = {$rowTD->transaction_id}";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                            $sqlDelivery = "INSERT INTO `delivery` (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date, "
                                    . "qty_rsb, qty_ggl, qty_rsb_ggl, qty_uncertified) VALUES ("
                                    . "{$rowTD->shipment_id}, {$rowTD->transaction_id}, '{$transactionDate2}', {$rowTD->percent_taken}, "
                                    . "{$rowTD->quantity}, {$rowTD->inventory_value}, {$rowTD->delivery_value}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$rowTD->qty_rsb}, "
                                    . "{$rowTD->qty_ggl}, {$rowTD->qty_rsb_ggl}, {$rowTD->qty_uncertified})";
                            $resultDelivery = $myDatabase->query($sqlDelivery, MYSQLI_STORE_RESULT);
                             echo ' DELIVERY-1 ' . $sqlDelivery;

                            if ($resultDelivery !== false) {
                                $deliveryId_copy = $myDatabase->insert_id;

                                $sql_td = "UPDATE temp_delivery SET delivery_id = {$deliveryId_copy}, status = 1 WHERE temp_delivery_id = {$deliveryId1}";
                                $result = $myDatabase->query($sql_td, MYSQLI_STORE_RESULT);
                            }
                        }
                    }
					
					$sql = "SELECT sl.quantity, sl.price_converted, sl.currency_id, sl.exchange_rate, sl.price, cust.pph_tax_id,
                        sl.stockpileContractId, sl.sales_type,sl.stockpileLangsir, sl.vendorLangsir, sl.sales_no, DATE_FORMAT(sales_date,'%Y-%m-%d') AS salesDate
                            FROM sales sl 
                            INNER JOIN customer cust
                                ON cust.customer_id = sl.customer_id
                            WHERE sl.sales_id = {$salesId}";
                        $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($resultSales !== false && $resultSales->num_rows == 1) {
                            $rowSales = $resultSales->fetch_object();
                            $salesBalance = $rowSales->quantity;
                            $salesUnitPrice = $rowSales->price_converted;
                            $salesCurrencyId = $rowSales->currency_id;
                            $salesExchangeRate = $rowSales->exchange_rate;
                            $salesOriginalUnitPrice = $rowSales->price;
                            $custTaxId = $rowSales->pph_tax_id;
                            $stockpileContractIdShipment = $rowSales->stockpileContractId;
                            $salesType = $rowSales->sales_type;
                            $vendorLangsir = $rowSales->vendorLangsir;
                            $salesNo = $rowSales->sales_no;
                            $stockpileLangsir = $rowSales->stockpileLangsir;
                            $salesDate = $rowSales->salesDate;
                        }
						
						if ($salesType == 3) {

                                    $sql2 = "SELECT d.*,
            CASE WHEN t.transaction_type = 1 THEN s.stockpile_name ELSE s2.stockpile_name END AS stockpile_name,  
            DATE_FORMAT(t.unloading_date, '%d %b %Y') AS transaction_date2,
            t.slip_no, 
            CASE WHEN con.contract_type = 'P' THEN 'PKS' ELSE 'Curah' END AS contract_type2,
            con.po_no, 
            CONCAT(f.freight_code, '-', v2.vendor_code) AS freight_code,
            v3.vendor_name AS supplier,
            v1.vendor_name, 
            sh.shipment_code,
            t.send_weight, t.netto_weight, d.quantity,
			CASE WHEN t.mutasi_id IS NOT NULL AND t.mutasi_id <> 0 THEN t.unit_cost
			WHEN t.adjustmentAudit_id IS NOT NULL AND t.adjustmentAudit_id <> 0 THEN t.unit_price
			ELSE con.price_converted END AS price_converted,
            CASE WHEN t.mutasi_id IS NOT NULL AND t.mutasi_id <> 0 THEN d.quantity * t.unit_cost
			WHEN t.adjustmentAudit_id IS NOT NULL AND t.adjustmentAudit_id <> 0 THEN d.quantity * t.unit_price
			ELSE d.quantity * con.price_converted END AS cogs_amount,
            t.freight_quantity, t.freight_price, 
			CASE WHEN t.delivery_status = 2 THEN (d.percent_taken / 100) * (t.quantity * t.freight_price)
			ELSE (d.percent_taken / 100) * (t.freight_quantity * t.freight_price) END AS freight_total,
			CASE WHEN t.delivery_status = 2 AND t.freight_cost_id IS NOT NULL THEN (d.quantity/t.freight_quantity) * COALESCE((SELECT amt_claim FROM transaction_shrink_weight WHERE transaction_id = d.transaction_id),0)
	    WHEN t.freight_cost_id IS NOT NULL THEN (d.percent_taken / 100) * COALESCE((SELECT amt_claim FROM transaction_shrink_weight WHERE transaction_id = d.transaction_id),0) ELSE 0 END AS freight_shrink,
            t.unloading_price, (d.percent_taken / 100) * t.unloading_price AS unloading_total,
			vhc.price AS vh_price, t.handling_quantity,
			CASE WHEN t.delivery_status = 2 THEN (d.percent_taken / 100) * (t.handling_quantity * vhc.price)
			ELSE (d.percent_taken / 100) * (t.handling_quantity * vhc.price) END AS handling_total,
			vh1.pph_tax_id AS vh_pph_tax_id, vh1.pph AS vh_pph, vhtx.tax_category AS vh_pph_tax_category,
            f.ppn_tax_id AS fc_ppn_tax_id, f.ppn AS fc_ppn, fctxppn.tax_category AS fc_ppn_tax_category,
            t.fc_tax_id AS fc_pph_tax_id, fctxpph.tax_value AS fc_pph, fctxpph.tax_category AS fc_pph_tax_category,
            l.ppn_tax_id AS uc_ppn_tax_id, l.ppn AS uc_ppn, uctxppn.tax_category AS uc_ppn_tax_category,
            l.pph_tax_id AS uc_pph_tax_id, l.pph AS uc_pph, uctxpph.tax_category AS uc_pph_tax_category,
			l.labor_id,t.freight_cost_id, f.freight_id,
			(SELECT slip_no FROM TRANSACTION WHERE notim_status != 1 AND slip_retur IS NULL AND shipment_id = (SELECT shipment_id FROM shipment WHERE sales_id = sl.sales_id ORDER BY shipment_id ASC LIMIT 1)LIMIT 1) AS slipOut,
			(SELECT transaction_date FROM TRANSACTION WHERE notim_status != 1 AND slip_retur IS NULL AND shipment_id = (SELECT shipment_id FROM shipment WHERE sales_id = sl.sales_id ORDER BY shipment_id ASC LIMIT 1)LIMIT 1) AS transactionDate,
			(SELECT SUBSTRING(slip_no,1,3) FROM TRANSACTION WHERE notim_status != 1 AND slip_retur IS NULL AND shipment_id = (SELECT shipment_id FROM shipment WHERE sales_id = sl.sales_id ORDER BY shipment_id ASC LIMIT 1)LIMIT 1) AS slipOutCode,
			(SELECT vehicle_no FROM TRANSACTION WHERE notim_status != 1 AND slip_retur IS NULL AND shipment_id = (SELECT shipment_id FROM shipment WHERE sales_id = sl.sales_id ORDER BY shipment_id ASC LIMIT 1)LIMIT 1) AS vessel_name, sh.shipment_no
                     FROM delivery d
        LEFT JOIN `transaction` t
        	ON t.transaction_id = d.transaction_id
        LEFT JOIN stockpile_contract sc
            ON sc.stockpile_contract_id = t.stockpile_contract_id
        LEFT JOIN stockpile s
            ON s.stockpile_id = sc.stockpile_id
        LEFT JOIN contract con
            ON con.contract_id = sc.contract_id
        LEFT JOIN vendor v1
            ON v1.vendor_id = con.vendor_id
        LEFT JOIN unloading_cost uc
            ON uc.unloading_cost_id = t.unloading_cost_id
        LEFT JOIN vehicle vh
            ON vh.vehicle_id = uc.vehicle_id
        LEFT JOIN freight_cost fc
            ON fc.freight_cost_id = t.freight_cost_id
        LEFT JOIN freight f
            ON f.freight_id = fc.freight_id
        LEFT JOIN vendor v2
            ON v2.vendor_id = fc.vendor_id
        LEFT JOIN vendor v3
            ON v3.vendor_id = t.vendor_id
        LEFT JOIN shipment sh
            ON sh.shipment_id = d.shipment_id
        LEFT JOIN sales sl
            ON sl.sales_id = sh.sales_id
        LEFT JOIN stockpile s2
            ON s2.stockpile_id = sl.stockpile_id
        LEFT JOIN customer cust
            ON cust.customer_id = sl.customer_id
        LEFT JOIN tax fctxpph
	        ON fctxpph.tax_id = t.fc_tax_id
        LEFT JOIN tax fctxppn
	        ON fctxppn.tax_id = f.ppn_tax_id
	    LEFT JOIN labor l
            ON l.labor_id = t.labor_id
	    LEFT JOIN tax uctxpph
	        ON uctxpph.tax_id = l.pph_tax_id
        LEFT JOIN tax uctxppn
	        ON uctxppn.tax_id = l.ppn_tax_id	
		lEFT JOIN vendor_handling_cost vhc
			ON vhc.handling_cost_id = t.handling_cost_id
		LEFT JOIN vendor_handling vh1
			ON vh1.vendor_handling_id = vhc.vendor_handling_id
		LEFT JOIN tax vhtx
			ON vh1.pph_tax_id = vhtx.tax_id
						WHERE 1=1
						AND d.shipment_id = {$shipmentId}";
                                    $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                                    if ($result2->num_rows > 0) {

                                        while ($row2 = $result2->fetch_object()) {
                                            $value = '';
                                            $no1 = 1;

                                            $slipOut = $row2->slipOut;
                                            $slipOutCode = $row2->slipOutCode;

                                            if ($row2->slip_no >= 'SAM-0000000001' && $row2->slip_no <= 'SAM-0000001925') {
                                                $fc_pph2 = 4;
                                            } else {
                                                $fc_pph2 = $row2->fc_pph;
                                            }

                                            if ($row2->slip_no >= 'MAR-0000000001' && $row2->slip_no <= 'MAR-0000007138') {
                                                $fc_pph2 = 4;
                                            } else {
                                                $fc_pph2 = $row2->fc_pph;
                                            }

                                            if ($row2->vh_pph_tax_category == 1 && $row2->vh_pph_tax_id != '') {
                                                $pphvh2 = ($row2->handling_total / ((100 - $row2->vh_pph) / 100)) - $row2->handling_total;

                                            } elseif ($row2->vh_pph_tax_category == 0 && $row2->vh_pph_tax_id != '') {
                                                $pphvh2 = 0;
                                                //$pphfc =  $row->freight_total - ($row->freight_total * ((100 - $fc_pph) / 100));
                                            } else {
                                                $pphvh2 = 0;
                                            }

                                            $handlingTotal2 = $row2->handling_total - $pphvh2;

                                            if ($row2->fc_pph_tax_category == 1 && $row2->fc_pph_tax_id != '') {
                                                $pphfc2 = ($row2->freight_total / ((100 - $fc_pph2) / 100)) - $row2->freight_total;
                                                $pphfcShrink2 = ($row2->freight_shrink / ((100 - $fc_pph2) / 100)) - $row2->freight_shrink;

                                            } elseif ($row2->fc_pph_tax_category == 0 && $row2->fc_pph_tax_id != '') {
                                                $pphfc2 = 0;
                                                $pphfcShrink2 = 0;
                                                //$pphfc =  $row->freight_total - ($row->freight_total * ((100 - $fc_pph) / 100));
                                            } else {
                                                $pphfc2 = 0;
                                                $pphfcShrink2 = 0;
                                            }
                                            /*
									 if($row->fc_ppn_tax_id != ''){
										 $ppnfc = ($row->freight_total * ((100 + $row->fc_ppn) / 100)) - $row->freight_total;
									 }else{
										 $ppnfc = 0;
									 }*/

                                            $freightTotal2 = ($row2->freight_total + $ppnfc2 + $pphfc2) - ($row2->freight_shrink + $pphfcShrink2);


                                            if ($row2->uc_pph_tax_category == 1 && $row2->uc_pph_tax_id != '') {
                                                $pphuc2 = ($row2->unloading_total / ((100 - $row2->uc_pph) / 100)) - $row2->unloading_total;

                                            } elseif ($row2->uc_pph_tax_category == 0 && $row2->uc_pph_tax_id != '') {
                                                $pphuc2 = 0;
                                                //$pphuc =  $row->unloading_total - ($row->unloading_total * ((100 - $row->uc_pph) / 100));
                                            } else {
                                                $pphuc2 = 0;
                                            }


                                            $unloadingTotal2 = $row2->unloading_total + $ppnuc2 + $pphuc2;

                                            $totalCogs2 = $row2->cogs_amount + $freightTotal2 + $unloadingTotal2 + $handlingTotal2;

                                            $quantity_total = $row2->quantity;
                                            $total_quantity = $quantity_total + $total_quantity;

                                            $pks_total = $row2->cogs_amount;
                                            $total_pks = $pks_total + $total_pks;

                                            $fc_total = $freightTotal2;
                                            $total_fc = $fc_total + $total_fc;

                                            $vh_total = $handlingTotal2;
                                            $total_vh = $vh_total + $total_vh;

                                            $uc_total = $unloadingTotal2;
                                            $total_uc = $uc_total + $total_uc;

                                            $cogs_total = $totalCogs2;
                                            $total_cogs = $cogs_total + $total_cogs;

                                            $unitPrice = $total_cogs / $total_quantity;

                                            $no1++;

                                        }
                                    }


                                    $sql = "SELECT * FROM vendor WHERE vendor_id = {$vendorLangsir}";
                                    $resultVendor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if ($resultVendor !== false && $resultVendor->num_rows == 1) {
                                        $rowVendor = $resultVendor->fetch_object();
                                        $vendorCode = $rowVendor->vendor_code;
                                    }

                                    $checkPoNo = 'P-' . $vendorCode . '-' . $currentYearMonth;
                                    $sql = "SELECT po_no FROM contract WHERE company_id = {$_SESSION['companyId']} AND po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
                                    $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if ($resultPo->num_rows == 1) {
                                        $rowPo = $resultPo->fetch_object();
                                        $splitPoNo = explode('-', $rowPo->po_no);
                                        $lastExplode = count($splitPoNo) - 1;
                                        $nextPoNo = ((float)$splitPoNo[$lastExplode]) + 1;
                                        $poNo = $checkPoNo . '-' . $nextPoNo;
                                    } else {
                                        $poNo = $checkPoNo . '-1';
                                    }

                                    $unitPriceConverted = $unitPrice * $salesExchangeRate;

                                    $sqlKontrak = "INSERT INTO contract (contract_type, po_no, contract_no, vendor_id, currency_id, exchange_rate, price, price_converted, quantity, payment_status, notes, entry_by, entry_date,langsir,langsir_shipment_id) VALUES ('P','{$poNo}','{$salesNo}',{$vendorLangsir},{$salesCurrencyId},{$salesExchangeRate},{$unitPrice},{$unitPriceConverted}, {$total_quantity}, 1, '-',{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),1,{$shipmentId})";
                                    $result = $myDatabase->query($sqlKontrak, MYSQLI_STORE_RESULT);
                                    if ($result !== false) {
                                        $contractId = $myDatabase->insert_id;

                                        $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                                            . "{$stockpileLangsir}, {$contractId}, {$total_quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        //insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);
                                        //insertReportGL($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);
                                    }

                                }
                    
                                insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", "NULL", $transactionId);

                                insertReportGL($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", "NULL", $transactionId);
                            }else{
                    $return_value = '|FAIL|Failed insert transaction.| '. $sqlTest3;
                }
        }

    }else if ($_POST['_method'] == 'CANCEL') {
        $cancelRemarks = $myDatabase->real_escape_string($_POST['reject_remarks']);

        $sql_tt = "UPDATE temp_transaction SET status = 2, cancel_remarks = '{$cancelRemarks}' WHERE temp_transaction_id = {$tempTransactionId}";
        $result = $myDatabase->query($sql_tt, MYSQLI_STORE_RESULT);

     

        if ($result != false) {

                $sql = "UPDATE temp_delivery SET status = 2 WHERE temp_transaction_id = {$tempTransactionId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                $sqlSh = "SELECT sales_id From shipment where shipment_id = {$shipmentId}";
                $resultSh = $myDatabase->query($sqlSh, MYSQLI_STORE_RESULT);
                $rowSh = $resultSh->fetch_object();
                $salesId = $rowSh->sales_id;

                $sql_shipment = "UPDATE shipment SET shipment_status = 0,
                                    shipment_date = NULL, cogs_amount = 0, invoice_amount = 0, quantity = 0 WHERE shipment_id = {$shipmentId}";
                $result = $myDatabase->query($sql_shipment, MYSQLI_STORE_RESULT);

                $sql_tt = "UPDATE sales SET sales_status = 0, used_status = 0 WHERE sales_id = {$salesId}";
                $result = $myDatabase->query($sql_tt, MYSQLI_STORE_RESULT);

                $return_value = '|OK|Reject  has successfully.|';
        } else {
            $return_value = '|FAIL|Reject  FAIL!|.'.$sql_tt;

        }
    
    }

    echo $return_value;
    // </editor-fold>
}
/* elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_data">

    $return_value = '';
    $boolQuantity = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
    $transactionDate = $myDatabase->real_escape_string($_POST['transactionDate']);
    $loadingDate = $myDatabase->real_escape_string($_POST['loadingDate']);
    $transactionDate2 = $myDatabase->real_escape_string($_POST['transactionDate2']);
    $vehicleNo = $myDatabase->real_escape_string($_POST['vehicleNo']);
    $vehicleNo2 = $myDatabase->real_escape_string($_POST['vehicleNo2']);
    $unloadingCostId = $myDatabase->real_escape_string($_POST['unloadingCostId']);
    $unloadingDate = $myDatabase->real_escape_string($_POST['unloadingDate']);
    $freightCostId = $myDatabase->real_escape_string($_POST['freightCostId']);
    $handlingCostId = $myDatabase->real_escape_string($_POST['handlingCostId']);
    $permitNo = $myDatabase->real_escape_string($_POST['permitNo']);
    $transactionType = $myDatabase->real_escape_string($_POST['transactionType']);
    $sendWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight']));
    $sendWeight2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight2']));
    $blWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['blWeight']));
    $brutoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['brutoWeight']));
    $tarraWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['tarraWeight']));
    $nettoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['nettoWeight']));
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $notes2 = $myDatabase->real_escape_string($_POST['notes2']);
    $driver = $myDatabase->real_escape_string($_POST['driver']);
	
    $block = $myDatabase->real_escape_string($_POST['block']);
    $tempRSB = $myDatabase->real_escape_string($_POST['rsb']);
    $tempGGL = $myDatabase->real_escape_string($_POST['ggl']);
    $tempRG = $myDatabase->real_escape_string($_POST['rg']);
    $tempUncertified = $myDatabase->real_escape_string($_POST['un']);

    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $supplierId = $myDatabase->real_escape_string($_POST['supplierId']);
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $isTaxable = $myDatabase->real_escape_string($_POST['isTaxable']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $stockpileCode = '';
    $unitPrice = 0;
    $balanceQuantity = 0;
    $contractId = 0;
    $custTaxId = 'NULL';
    $curahTaxId = 'NULL';
    $ucTaxId = 0;
    $fcTaxId = 0;
    $t_date = str_replace('/', '-', $unloadingDate);
    $t_date2 = str_replace('/', '-', $transactionDate2);
    $currentYear2 = date('y', strtotime($t_date));
    $currentYear3 = date('y', strtotime($t_date2));
    $slipUpload = $myDatabase->real_escape_string($_POST['idSuratTugas']);

    $tempTransactionId = $myDatabase->real_escape_string($_POST['tempTransactionId']);
    // </editor-fold>

    //== Start Add by Eva
    $newAmountClaim = $myDatabase->real_escape_string($_POST['newAmountClaim']);
    $qtyAddShrink = $myDatabase->real_escape_string($_POST['qtyAddShrink']);
    $priceAddShrink = $myDatabase->real_escape_string($_POST['priceAddShrink']);
    //== End Add by Eva
    


    $allowInsert = false;
    $allowInsert2 = false;
    $date = new DateTime();
    $todayDate = $date->format('Y-m-d');
    $date1 = new DateTime($todayDate);

    $dateTrans = str_replace("/", "-", $myDatabase->real_escape_string($_POST['unloadingDate']));
    $dt = date('Y-m-d', strtotime($dateTrans));
    $date2 = new DateTime($dt);
    $a = $date1->format('Y-m-d');
    $b = $date2->format('Y-m-d');
    $diff = date_diff(date_create($a), date_create($b));
    $interval = $diff->days;

    $dateTrans2 = str_replace("/", "-", $myDatabase->real_escape_string($_POST['transactionDate2']));
    $dt2 = date('Y-m-d', strtotime($dateTrans2));
    $date22 = new DateTime($dt2);
    $a2 = $date1->format('Y-m-d');
    $b2 = $date22->format('Y-m-d');
    $diff2 = date_diff(date_create($a2), date_create($b2));
    $interval2 = $diff2->days;

    if ($interval < 5) {
        $allowInsert = true;
    }

    if ($interval2 < 5) {
        $allowInsert2 = true;
    }

    $sql = "SELECT * FROM user_module WHERE user_id = {$_SESSION['userId']} and module_id = 30";
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_object()) {
            if ($row->module_id == 30) {
                $allowInsert = true;
                $allowInsert2 = true;
            }
        }
    }

    if ($isTaxable == '') {
        $isTaxable = 0;
    }

    if ($ppn == '') {
        $ppn = 0;
    }

    if ($pph == '') {
        $pph = 0;
    }


    if ($transactionType == 1)  {
        if ($allowInsert) {
            // <editor-fold defaultstate="collapsed" desc="IN">
            if ($stockpileId != '' && $stockpileContractId != '' && $loadingDate != '' && $vehicleNo != '' && $unloadingCostId != '' &&
                $unloadingDate != '' && $freightCostId != '' && $handlingCostId != '' && $transactionType != '' && $sendWeight != '' &&
                $brutoWeight != '' && $tarraWeight != '' && $driver != '' && $vendorId != '' && $laborId != '') {

                if ($supplierId == '') {
                    $supplierId = "NULL";
                }
                if ($slipUpload == '') {
                    $slipUpload = 0;
                }

                // check balance contract & get unit price
                $sql = "SELECT s.stockpile_code, con.price_converted, sc.contract_id, con.contract_type, DATE_FORMAT(con.entry_date,'%Y-%m-%d') AS contractDate,
                        ((SELECT COALESCE(SUM(quantity), 0) FROM stockpile_contract WHERE contract_id = sc.contract_id
                        ) - con.adjustment) - (
                            SELECT CASE WHEN c.contract_type = 'C' THEN COALESCE(SUM(t.quantity), 0)
                ELSE COALESCE(SUM(t.send_weight), 0) END 
                FROM TRANSACTION t LEFT JOIN stockpile_contract sc ON t.stockpile_contract_id = sc.`stockpile_contract_id`
                LEFT JOIN contract c ON c.contract_id = sc.contract_id
                WHERE sc.contract_id =  con.contract_id
                        ) AS balance, s.freight_weight_rule, s.curah_weight_rule, v.pph_tax_id
                    FROM stockpile_contract sc
                    INNER JOIN stockpile s
                        ON s.stockpile_id = sc.stockpile_id
                    INNER JOIN contract con
                        ON con.contract_id = sc.contract_id
                    INNER JOIN vendor v
                        ON v.vendor_id = con.vendor_id
                    WHERE stockpile_contract_id = {$stockpileContractId}";
                $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if ($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                    $rowStockpile = $resultStockpile->fetch_object();
                    $stockpileCode = $rowStockpile->stockpile_code;
                    $contractId = $rowStockpile->contract_id;
                    $unitPrice = $rowStockpile->price_converted;
                    $contractType = $rowStockpile->contract_type;
                    $freightWeightRule = $rowStockpile->freight_weight_rule;
                    $curahWeightRule = $rowStockpile->curah_weight_rule;
					$contractDate = $rowStockpile->contractDate;
                    if ($contractType == 'P') {
                        $balanceQuantity = $rowStockpile->balance;
                    } elseif ($contractType == 'C') {
                        $balanceQuantity = $rowStockpile->balance;
                        if ($rowStockpile->pph_tax_id != 0 && $rowStockpile->pph_tax_id != '') {
                            $curahTaxId = $rowStockpile->pph_tax_id;
                        }
                    }
                }

                // get netto weight
                //$nettoWeight = $brutoWeight - $tarraWeight;

                // get freight weight
                $sqlfc = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                $resultfc = $myDatabase->query($sqlfc, MYSQLI_STORE_RESULT);
                if ($resultFreight !== false && $resultFreight->num_rows == 1) {
                    $rowFreight = $resultFreight->fetch_object();
                    $freightRule = $rowFreight->freight_rule;


                }

                if ($freightWeightRule == 0 && $freightRule == 1) {
                    $freightQuantity = $sendWeight;
                } elseif ($freightWeightRule == 0 && $freightRule == 0) {
                    if ($nettoWeight < $sendWeight) {
                        $freightQuantity = $nettoWeight;
                    } elseif ($nettoWeight > $sendWeight) {
                        $freightQuantity = $sendWeight;
                    } else {
                        $freightQuantity = $sendWeight;
                    }
                } elseif ($freightWeightRule == 1) {
                    $freightQuantity = $sendWeight;
                } elseif ($freightWeightRule == 2) {
                    $freightQuantity = $nettoWeight;
                } else {
                    $freightQuantity = $sendWeight;
                }

				if($contractDate < $b){
                    $shrink = 0;
                    if ($contractType == 'P') {
                        if ($nettoWeight < $sendWeight) {
                            $quantity = $nettoWeight;
                            $shrink = $sendWeight - $nettoWeight;
                        } elseif ($nettoWeight > $sendWeight) {
                            $quantity = $sendWeight;
                            $shrink = 0;
                        } else {
                            $quantity = $sendWeight;
                        }
                    } elseif ($contractType == 'C') {
                        if ($curahWeightRule == 0) {
                            if ($nettoWeight < $sendWeight) {
                                $quantity = $nettoWeight;
                                $shrink = $sendWeight - $nettoWeight;
                            } elseif ($nettoWeight > $sendWeight) {
                                $quantity = $sendWeight;
                                $shrink = 0;
                            } else {
                                $quantity = $sendWeight;
                            }
                        } elseif ($curahWeightRule == 1) {
                            $quantity = $sendWeight;
                            $shrink = $sendWeight - $nettoWeight;
                        } elseif ($curahWeightRule == 2) {
                            $quantity = $nettoWeight;
                            $shrink = $sendWeight - $nettoWeight;
                        } else {
                            $quantity = $sendWeight;
                        }
                    }


                    $checkSlipNo = $stockpileCode . '-' . $currentYear2;

                    $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultSlip->num_rows == 0) {
                        $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                        $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }
                    $rowSlipNo = $resultSlip->fetch_object();
                    $nextSlipNo = $rowSlipNo->next_id;
                    $slipNo = $checkSlipNo . '-' . $nextSlipNo;

                    // get freight cost
                    if ($active_from == $todayDate) {
                        if ($freightCostId == 'NONE') {
                            $freightCostId = 'NULL';
                            $freightPrice = 0;
                            $freightQuantity2111 = 0;
                        } else {
                            $sql = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                            $resultFreight = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($resultFreight !== false && $resultFreight->num_rows == 1) {
                                $rowFreight = $resultFreight->fetch_object();
                                $freightPrice = $rowFreight->price_converted;
                                if ($rowFreight->freight_rule == 1) {
                                    $freightQuantity2111 = $sendWeight;
                                } else {
                                    $freightQuantity2111 = $freightQuantity;
                                }
                                if ($rowFreight->pph_tax_id != 0 && $rowFreight->pph_tax_id != '') {
                                    $fcTaxId = $rowFreight->pph_tax_id;
                                } else {
                                    $fcTaxId = 0;
                                }
                            }
                        }
                    } else {
                        if ($freightCostId == 'NONE') {
                            $freightCostId = 'NULL';
                            $freightPrice = 0;
                            $freightQuantity2111 = 0;
                        } else {
                            $sql = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                            $resultFreight = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($resultFreight !== false && $resultFreight->num_rows == 1) {
                                $rowFreight = $resultFreight->fetch_object();
                                $freightPrice = $rowFreight->price_converted;
                                if ($rowFreight->freight_rule == 1) {
                                    $freightQuantity2111 = $sendWeight;
                                } else {
                                    $freightQuantity2111 = $freightQuantity;
                                }
                                if ($rowFreight->pph_tax_id != 0 && $rowFreight->pph_tax_id != '') {
                                    $fcTaxId = $rowFreight->pph_tax_id;
                                } else {
                                    $fcTaxId = 0;
                                }
                            }
                        }
                    }
                    //                 if($freightCostId == 'NONE') {
                    //                    $freightCostId = 'NULL';
                    //                    $freightPrice = 0;
                    //					$freightQuantity2111 = 0;
                    //                } else {
                    //                    $sql = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                    //                            FROM `freight_cost` fc
                    //                            INNER JOIN freight f
                    //                                ON f.freight_id = fc.freight_id
                    //                            WHERE fc.freight_cost_id = {$freightCostId}";
                    //                    $resultFreight = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    //                    if($resultFreight !== false && $resultFreight->num_rows == 1) {
                    //                        $rowFreight = $resultFreight->fetch_object();
                    //                        $freightPrice = $rowFreight->price_converted;
                    //					if($rowFreight->freight_rule == 1){
                    //							$freightQuantity2111 = $sendWeight;
                    //						}else{
                    //							$freightQuantity2111 = $freightQuantity;
                    //						}
                    //                        if($rowFreight->pph_tax_id != 0 && $rowFreight->pph_tax_id != '') {
                    //                            $fcTaxId = $rowFreight->pph_tax_id;
                    //                        }else{
                    //							$fcTaxId = 0;
                    //						}
                    //                    }
                    //                }

                    // get handling cost
                    if ($handlingCostId == 'NONE') {
                        $handlingCostId = 'NULL';
                        $handlingQuantity = 0;
                        $handlingPrice = 0;
                    } else {
                        $sql = "SELECT vhc.vendor_handling_id, vhc.price_converted, vh.pph_tax_id, vh.vendor_handling_rule
                            FROM `vendor_handling_cost` vhc 
                            INNER JOIN vendor_handling vh
                                ON vh.vendor_handling_id = vhc.vendor_handling_id
                            WHERE vhc.handling_cost_id = {$handlingCostId}";
                        $resultHandling = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($resultHandling !== false && $resultHandling->num_rows == 1) {
                            $rowHandling = $resultHandling->fetch_object();
                            $handlingPrice = $rowHandling->price_converted;
                            if ($rowHandling->vendor_handling_rule == 1) {
                                $handlingQuantity = $sendWeight;
                            } else {
                                $handlingQuantity = $nettoWeight;
                            }

                        }
                    }

                    // get unloading cost
                    if ($unloadingCostId == 'NONE') {
                        $unloadingCostId = 'NULL';
                        $unloadingPrice = 0;
                    } else {
                        $sql = "SELECT uc.price_converted 
                            FROM `unloading_cost` uc 
                            WHERE uc.unloading_cost_id = {$unloadingCostId}";
                        $resultUnloading = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($resultUnloading !== false && $resultUnloading->num_rows == 1) {
                            $rowUnloading = $resultUnloading->fetch_object();
                            
							//$unloadingPrice = $rowUnloading->price_converted;
							
							$sql = "SELECT l.laborRules FROM `labor` l WHERE l.labor_id = {$laborId}";
                        $resultLabor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($resultLabor !== false && $resultLabor->num_rows == 1) {
                            $rowLabor = $resultLabor->fetch_object();
							  if($rowLabor->laborRules == 1) {
                                $unloadingPrice = $rowUnloading->price_converted;
                            } elseif($rowLabor->laborRules == 2) {
                               
							   if($nettoWeight < $sendWeight){
									 $unloadingPrice = $rowUnloading->price_converted * $nettoWeight;
								}elseif ($nettoWeight > $sendWeight){
									 $unloadingPrice = $rowUnloading->price_converted * $sendWeight;
								}else{
									 $unloadingPrice = $rowUnloading->price_converted * $nettoWeight;
								}
								
                            } elseif($rowLabor->laborRules == 3) {
                                $unloadingPrice = $rowUnloading->price_converted * $nettoWeight;
                            } elseif($rowLabor->laborRules == 4) {
                                $unloadingPrice = $rowUnloading->price_converted * $sendWeight;
                            } else {
								$unloadingPrice = $rowUnloading->price_converted;
							}
                        }
                    }
                }

                    if ($laborId == 'NONE') {
                        $laborId = 'NULL';
                    } else {
                        $sql = "SELECT l.pph_tax_id
                            FROM `labor` l
                            WHERE l.labor_id = {$laborId}";
                        $resultLabor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($resultLabor !== false && $resultLabor->num_rows == 1) {
                            $rowLabor = $resultLabor->fetch_object();
                            if ($rowLabor->pph_tax_id != 0 && $rowLabor->pph_tax_id != '') {
                                $ucTaxId = $rowLabor->pph_tax_id;
                            } else {
                                $ucTaxId = 0;
                            }
                        }
                    }

                    // get inventory value
                    $inventoryValue = ($freightQuantity * $freightPrice) + $unloadingPrice + ($quantity * $unitPrice);
                    if($unloadingPrice == '' || $unloadingPrice == 0){
                        $unloadingPrice = 0;
                    }
                    if($handlingPrice == "" || $handlingPrice == 0){
                        $handlingPrice = 0;
                    }

                    // insert into transaction
                    $sql = "INSERT INTO `transaction` (slip_no, t_timbangan, stockpile_contract_id, transaction_date, loading_date, vehicle_no, labor_id, unloading_cost_id, "
                        . "unloading_date, freight_cost_id, handling_cost_id, permit_no, transaction_type, vendor_id, send_weight, bruto_weight, tarra_weight, "
                        . "netto_weight, notes, driver, freight_quantity, handling_quantity, quantity, shrink, freight_price, handling_price, unloading_price, unit_price, "
                        . "inventory_value, block, curah_tax_id, uc_tax_id, fc_tax_id, entry_by, entry_date, rsb, ggl, rsb_ggl, uncertified) "
                        . "VALUES ('{$slipNo}', '{$slipUpload}', {$stockpileContractId}, STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), STR_TO_DATE('{$loadingDate}', '%d/%m/%Y'), "
                        . "'{$vehicleNo}', {$laborId}, {$unloadingCostId}, STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), {$freightCostId}, {$handlingCostId}, '{$permitNo}', "
                        . "{$transactionType}, {$supplierId}, {$sendWeight}, {$brutoWeight}, {$tarraWeight}, {$nettoWeight}, '{$notes}', "
                        . "'{$driver}', {$freightQuantity}, {$handlingQuantity}, {$quantity}, {$shrink}, {$freightPrice}, {$handlingPrice}, {$unloadingPrice}, {$unitPrice}, {$inventoryValue}, '{$block}', "
                        . "{$curahTaxId}, {$ucTaxId}, {$fcTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$tempRSB}, {$tempGGL}, {$tempRG}, {$tempUncertified})";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    echo " TEST " . $sql;
                   // die();

                    if ($result !== false) {
                        $return_value = '|OK|Transaction has inserted successfully.|';

                        $transactionId = $myDatabase->insert_id;

                        // if curah update contract and stockpile_contract quantity
                        if ($contractType == 'C') {
                            /*$sql = "UPDATE contract SET quantity = {$quantity} WHERE contract_id = {$contractId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                        $sql = "UPDATE stockpile_contract SET quantity = {$quantity} WHERE stockpile_contract_id = {$stockpileContractId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/
                    /*    }
						$sql1 = "SELECT tt.send_weight,COALESCE(SUM(t.send_weight),0) AS totalSend
								 FROM transaction_timbangan tt 
								 LEFT JOIN TRANSACTION t ON t.t_timbangan = tt.transaction_id 
								 WHERE tt.transaction_id = '{$slipUpload}'";
						$result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
						if ($result1 !== false && $result1->num_rows == 1) {
                            $row1 = $result1->fetch_object();
                            $totalSend = $row1->totalSend;
                            if ($row1->totalSend == $row1->send_weight) {
                                
								$sql = "UPDATE transaction_timbangan SET notim_status = 1 WHERE transaction_id = '{$slipUpload}'";
								$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }

                        }

                        

                        $sql = "CALL sp_shrink_weight({$transactionId})";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                        insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", "NULL", $transactionId);

                        insertReportGL($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", "NULL", $transactionId);

                        unset($_SESSION['transaction']);
                    } else {
                        $return_value = '|FAIL|Failed insert transaction.| ' . $sql . '';
                    }
                // } else {
                //     $return_value = '|FAIL|The quantity exceed the balance of the contract.|';
                // }
			} else {
                    $return_value = '|FAIL|Tanggal transaksi harus melebihi tanggal kontrak.|' . $contractDate . '|' . $unloadingDate . '|';
                }
            } else {
                $return_value = '|FAIL|Please fill the required fields.|' . $sql . '';
            }

        } else {
            $return_value = '|FAIL|Tanggal transaksi sudah lebih dari 5 hari.|';
        }
        // </editor-fold>
    } elseif ($transactionType == 2 && $_POST['_method'] == 'INSERT_PREVIEW') {
        $rsb = $myDatabase->real_escape_string($_POST['rsb1']);
        $ggl = $myDatabase->real_escape_string($_POST['ggl1']);
        $rsb_ggl = $myDatabase->real_escape_string($_POST['rsb_ggl']);
        $uncertified1 = $myDatabase->real_escape_string($_POST['uncertified']);

        $msgError_R = $myDatabase->real_escape_string($_POST['qtyRSB_error1']);
        $msgError_G = $myDatabase->real_escape_string($_POST['qtyGGL_error1']);
        $msgError_RG = $myDatabase->real_escape_string($_POST['qtyRG_error1']);
        $msgError_UN = $myDatabase->real_escape_string($_POST['qtyUN_error1']);

        $whereProperty = '';
        $boolean1 = true;

        $qtyRSB = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty_rsb']));
        $qtyGGL = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty_ggl']));
        $qty_RG = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty_RG']));
        $qty_uncertified = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty_uncertified']));

        //JIKA yg dipilih hanya 1 jeni Sertifikat
        if($rsb == 1 && $ggl == 0 && $rsb_ggl == 0 && $uncertified1 == 0){  //RSB
            $whereProperty = "AND t.rsb = 1";
        } else if($ggl == 1 && $rsb == 0 && $rsb_ggl == 0 && $uncertified1 == 0 ){ //GGL
            $whereProperty = "AND t.ggl = 1";
        }else if($rsb_ggl == 1 && $ggl == 0 && $rsb == 0 && $uncertified1 == 0){ //rsb + ggl
            $whereProperty = "AND t.rsb_ggl = 1";
        }else if($uncertified1 == 1 && $ggl == 0 && $rsb_ggl == 0 && $rsb == 0){  //uncertified
            $whereProperty = "AND t.uncertified = 1";
        }
        
        //JIKA yg dipilih hanya 2 jeni Sertifikat
        else if($rsb == 1 && $ggl == 1  && $rsb_ggl == 0  && $uncertified1 == 0){ //rsb, ggl
            $whereProperty = "AND (t.rsb = 1 OR t.ggl = 1)";
        }else if($rsb == 1 && $rsb_ggl == 1  && $ggl == 0  && $uncertified1 == 0){ //rsb. (rsb+ggl)
            $whereProperty = "AND (t.rsb = 1 OR t.rsb_ggl = 1 )";
        }else if($rsb == 1 && $uncertified1 == 1 && $ggl == 0  && $rsb_ggl == 0){  //rsb, uncertified
            $whereProperty = "AND (t.rsb = 1 OR t.uncertified = 1)";
        }else if($ggl == 1 && $rsb_ggl == 1 && $rsb == 0  && $uncertified1 == 0){ // ggl, (rsb+ggl)
            $whereProperty = "AND (t.ggl = 1 OR t.rsb_ggl = 1)";
        }else if($ggl == 1 && $uncertified1 == 1 && $rsb == 0  && $rsb_ggl == 0){ // ggl, uncertified
            $whereProperty = "AND (t.ggl = 1 OR t.uncertified = 1)";
        }else if($rsb_ggl == 1 && $uncertified1 == 1 && $rsb == 0  && $ggl == 0){  // (rsb+ggl), uncertified
            $whereProperty = "AND (t.rsb_ggl = 1 OR t.uncertified = 1)";
        }
        
        //JIKA yg dipilih hanya 3 jeni Sertifikat
        else if($rsb == 1 && $ggl == 1 && $rsb_ggl == 1 && $uncertified1 == 0){  //rsb, ggl, (rsb+ggl)
            $whereProperty = "AND (t.rsb = 1 OR t.ggl = 1 OR t.rsb_ggl = 1)";
        }else if($rsb == 1 && $ggl == 1 &&  $uncertified1 == 1 && $rsb_ggl == 0){ //rsb, ggl, uncertified 
            $whereProperty = "AND (t.rsb = 1 OR t.ggl = 1 OR t.uncertified = 1)";
        }else if($rsb == 1 && $rsb_ggl == 1 && $uncertified1 == 1 && $ggl == 0){  //rsb, (rsb+ggl), uncertified
            $whereProperty = "AND (t.rsb = 1 OR t.rsb_ggl = 1 OR t.uncertified = 1)";
        }else if($ggl == 1 && $rsb_ggl == 1 && $uncertified1 == 1 && $rsb == 0){ //ggl, (rsb+ggl), uncerti
            $whereProperty = "AND ( t.ggl = 1 OR t.rsb_ggl = 1 OR t.uncertified = 1)";
        }
        
        //JIKA yg dipilih hanya semua jeni Sertifikat
        else if($rsb == 1 && $ggl == 1 && $rsb_ggl == 1 && $uncertified1 == 1){  //all
            $whereProperty = "AND (t.rsb = 1 OR t.ggl = 1 OR t.rsb_ggl = 1 OR t.uncertified = 1)";
        }


    //VALIDASI JIKA ADA NOTIM YG BELUM DI APPROVE DI PREVIEW
    $sqlValidasi = "SELECT sl.sales_id, sl.`sales_no`, sh.`shipment_code`, sl.stockpile_id FROM temp_transaction tt
            LEFT JOIN SHIPMENT sh ON sh.shipment_id = tt.`shipment_id`
            LEFT JOIN sales sl ON sl.`sales_id` = sh.`sales_id`
            WHERE tt.`status` = 0 AND sl.`stockpile_id` = {$stockpileId} AND tt.status <> 2";
    $resultValidasi = $myDatabase->query($sqlValidasi, MYSQLI_STORE_RESULT);
    $validasiCount = $resultValidasi->num_rows;
	
  
    if($validasiCount == 0){
        if($msgError_R != 1 && $msgError_G != 1 && $msgError_RG <> 1 && $msgError_UN <> 1){
            if ($allowInsert2) {
                if ($stockpileId != '' && $salesId != '' && $shipmentId != '' && $transactionDate2 != '' && $vehicleNo2 != '' && $sendWeight2 != '' && $blWeight != '') {

                    // check stockpile detail & transaction balance
                    $sql = "SELECT s.stockpile_code, s.stockpile_name, 
                            (
                                SELECT COALESCE(SUM(t.quantity), 0) FROM `transaction` t
                                INNER JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                                WHERE sc.stockpile_id = s.stockpile_id
                                AND t.transaction_type = 1 {$whereProperty} 
                            ) AS available_balance,
                            (
                                SELECT COALESCE(SUM(quantity), 0) FROM `transaction` 
                                WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                                AND transaction_type = 2 
                            ) AS delivered_balance
                        FROM stockpile s
                        WHERE s.stockpile_id = {$stockpileId}";
                        // echo " test " .$sql;
                        // die();
						//die();
                    $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                        $rowStockpile = $resultStockpile->fetch_object();
                        $stockpileCode = $rowStockpile->stockpile_code;
                        $stockpileName = $rowStockpile->stockpile_name;
                        $availableBalance = $rowStockpile->available_balance;
                        $deliveredBalance = $rowStockpile->delivered_balance;
                    }

                    // get sales detail
                    $sql = "SELECT sl.quantity, sl.price_converted, sl.currency_id, sl.exchange_rate, sl.price, cust.pph_tax_id,
                    sl.stockpileContractId, sl.sales_type,sl.stockpileLangsir, sl.vendorLangsir, sl.sales_no, DATE_FORMAT(sales_date,'%Y-%m-%d') AS salesDate
                        FROM sales sl 
                        INNER JOIN customer cust
                            ON cust.customer_id = sl.customer_id
                        WHERE sl.sales_id = {$salesId}";
                    $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultSales !== false && $resultSales->num_rows == 1) {
                        $rowSales = $resultSales->fetch_object();
                        $salesBalance = $rowSales->quantity;
                        $salesUnitPrice = $rowSales->price_converted;
                        $salesCurrencyId = $rowSales->currency_id;
                        $salesExchangeRate = $rowSales->exchange_rate;
                        $salesOriginalUnitPrice = $rowSales->price;
                        $custTaxId = $rowSales->pph_tax_id;
                        $stockpileContractIdShipment = $rowSales->stockpileContractId;
                        $salesType = $rowSales->sales_type;
                        $vendorLangsir = $rowSales->vendorLangsir;
                        $salesNo = $rowSales->sales_no;
                        $stockpileLangsir = $rowSales->stockpileLangsir;
                        $salesDate = $rowSales->salesDate;
                    }

                    // get next slip no
                    $checkSlipNo = $stockpileCode . '-' . $currentYear3;

                    $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultSlip->num_rows == 0) {
                        $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                        $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }
                    $rowSlipNo = $resultSlip->fetch_object();
                    $nextSlipNo = $rowSlipNo->next_id;
                    $slipNo = $checkSlipNo . '-' . $nextSlipNo;

                    if ($salesDate <= $b2) {
                        if ($sendWeight2 <= $availableBalance) { //sementara
                            $shrink = $sendWeight2 - $blWeight;
                            //closingDate KOMEN SEMENTARA
                       /*    $sqlClosingDate = "SELECT closing_date FROM closing_date WHERE label = 'Nota Timbang - Input'";
                            $resultClosingDate = $myDatabase->query($sqlClosingDate, MYSQLI_STORE_RESULT);
                            $rowClosingDate = $resultClosingDate->fetch_object();
                            $closingDate = $rowClosingDate->closing_date;
                            $newTransactionDate = implode("-", array_reverse(explode("/", $transactionDate2)));

                            // insert into temp_transaction KOMENT SEMENTARA
                          if ($newTransactionDate <= $closingDate) {
                                $return_value = '|Fail|Transaction has been closed. Closing Date at ' . $closingDate;
                            } else { */
                 /*               $sqlTest2 = "INSERT INTO `temp_transaction` (slip_no, shipment_id, transaction_date,unloading_date, vehicle_no, transaction_type, "
                                    . "send_weight, notes, quantity, shrink, cust_tax_id, entry_by, entry_date, ggl, rsb, rsb_ggl, uncertified) "
                                    . "VALUES ('{$slipNo}', {$shipmentId}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), '{$vehicleNo2}', "
                                    . "{$transactionType}, {$sendWeight2}, '{$notes2}', {$blWeight}, {$shrink}, {$custTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$ggl}, {$rsb}, {$rsb_ggl}, {$uncertified1})";
                                $result = $myDatabase->query($sqlTest2, MYSQLI_STORE_RESULT);
                               //  echo "KITHCEN". $sqlTest2;
                                if ($result !== false) {
                                    $tempTransactionId = $myDatabase->insert_id;

                                    // insert into delivery
                                    if ($stockpileContractIdShipment == 0 || $stockpileContractIdShipment == 'NULL' || $stockpileContractIdShipment == '') {

                                        //SELECT semua data yg berhubungan dengan sertifikat yg di pilih saat input notim OUT
                                        $sqlTest = "SELECT t.* 
                                        FROM transaction t 
                                        WHERE SUBSTR(t.slip_no,1,3) IN (SELECT stockpile_code FROM stockpile WHERE stockpile_id = {$stockpileId}) 
                                            AND t.transaction_type = 1 AND t.delivery_status <> 1 {$whereProperty}
                                        ORDER BY t.unloading_date ASC, t.slip_no ASC";
                                      //  echo "Query AWAL " . $sqlTest;
                                        //die();
                                        $resultDelivery = $myDatabase->query($sqlTest, MYSQLI_STORE_RESULT);
                                       
                                        
                                        if ($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                                            $balanceLeftUN = $qty_uncertified;
                                            $balanceLeftR = $qtyRSB; //2jt
                                            $balanceLeftG = $qtyGGL; 
                                            $balanceLeftRG = $qty_RG; //1jt
                                            $tempNo = 1;
                                            $totalInventoryValue = 0;
                                            while ($rowDelivery = $resultDelivery->fetch_object()) {
                                                $syncStatus = 0;
                                                $tempQtyR = 0;
                                                $tempQtyG = 0;
                                                $tempQtyRG = 0;
                                                $tempQtyUN = 0;
                                                $quantityTaken = 0;
                                                $percentTaken = 0;
                                                $deliveryStatus = 0;
                                               
                                                if ($rowDelivery->sync_status == 1) {
                                                    $syncStatus = 2;
                                                }
                                                 

                                                if ($rowDelivery->delivery_status == 0) { //JIKA NOTIM BELUM DI PAKE
                                                    if($rowDelivery->rsb == 1 && $balanceLeftR > 0) { //RSB
                                                        if ($balanceLeftR >= $rowDelivery->quantity) {
                                                            $balanceLeftR = $balanceLeftR - $rowDelivery->quantity;
                                                            $quantityTaken = $rowDelivery->quantity;
                                                            $percentTaken = 1;
                                                            $deliveryStatus = 1;
                                                            $tempQtyR = $quantityTaken;
															
                                                        } elseif ($balanceLeftR < $rowDelivery->quantity) {
                                                            $quantityTaken = $balanceLeftR;
                                                            $tempQtyR = $quantityTaken;
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $balanceLeftR = 0;
                                                            $deliveryStatus = 2;
                                                        }
                                                    }else if($rowDelivery->ggl == 1 && $balanceLeftG > 0) { //GLL
                                                        if ($balanceLeftG >= $rowDelivery->quantity) {
                                                            $balanceLeftG = $balanceLeftG - $rowDelivery->quantity;
                                                            $quantityTaken = $rowDelivery->quantity;
                                                            $percentTaken = 1;
                                                            $deliveryStatus = 1;
                                                            $tempQtyG = $quantityTaken;
                                                        } elseif ($balanceLeftG < $rowDelivery->quantity) {
                                                            $quantityTaken = $balanceLeftG;
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $balanceLeftG = 0;
                                                            $deliveryStatus = 2;
                                                            $tempQtyG = $quantityTaken;
                                                        }
                                                    }else if($rowDelivery->rsb_ggl == 1 && $balanceLeftRG > 0) { //GLL-RSB
                                                        if ($balanceLeftRG >= $rowDelivery->quantity) {
                                                            $balanceLeftRG = $balanceLeftRG - $rowDelivery->quantity;
                                                            $quantityTaken = $rowDelivery->quantity;
                                                            $percentTaken = 1;
                                                            $deliveryStatus = 1;
                                                            $tempQtyRG = $quantityTaken;
                                                        } elseif ($balanceLeftRG < $rowDelivery->quantity) {
                                                            $quantityTaken = $balanceLeftRG;
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $balanceLeftRG = 0;
                                                            $deliveryStatus = 2;
                                                            $tempQtyRG = $quantityTaken;
                                                        }
                                                    } else if($rowDelivery->uncertified == 1 && $balanceLeftUN > 0) { //un-certified 
                                                        if ($balanceLeftUN >= $rowDelivery->quantity) { //227.390
                                                            $balanceLeftUN = $balanceLeftUN - $rowDelivery->quantity;
                                                            $quantityTaken = $rowDelivery->quantity;
                                                            $percentTaken = 1;
                                                            $deliveryStatus = 1;
                                                            $tempQtyUN = $quantityTaken;
                                                        } elseif ($balanceLeftUN < $rowDelivery->quantity) {  // 10 < 7820
                                                            $quantityTaken = $balanceLeftUN;
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $balanceLeftUN = 0;
                                                            $deliveryStatus = 2;
                                                            $tempQtyUN = $quantityTaken;
                                                        }
                                                    }  
                                                } elseif ($rowDelivery->delivery_status == 2) { //JIKA NOTIM SUDAH DI PAKE TAPI ADA SISA
                                                    $totalTaken = 0;
                                                    $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                                    $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                                    if ($resultTaken !== false && $resultTaken->num_rows == 1) {
                                                        $rowTaken = $resultTaken->fetch_object();
                                                        $totalTaken = $rowTaken->total_taken;
                                                    }
                                                    if($rowDelivery->rsb == 1 && $balanceLeftR > 0){ //RSB
                                                        if ($balanceLeftR >= ($rowDelivery->quantity - $totalTaken)) {
                                                            $balanceLeftR = $balanceLeftR - ($rowDelivery->quantity - $totalTaken);
                                                            $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $deliveryStatus = 1;
                                                            $tempQtyR = $quantityTaken;
                                                           // echo " QTY TAKEN " . $quantityTaken;
                                                        } elseif ($balanceLeftR < ($rowDelivery->quantity - $totalTaken)) {
                                                            $quantityTaken = $balanceLeftR;
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $balanceLeftR = 0;
                                                            $deliveryStatus = 2;
                                                            $tempQtyR = $quantityTaken;
                                                        }
                                                    } else if($rowDelivery->ggl == 1 && $balanceLeftG > 0){ //GGL
                                                        if ($balanceLeftG >= ($rowDelivery->quantity - $totalTaken)) {
                                                            $balanceLeftG = $balanceLeftG - ($rowDelivery->quantity - $totalTaken);
                                                            $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $deliveryStatus = 1;
                                                            $tempQtyG = $quantityTaken;
                                                        } elseif ($balanceLeftG < ($rowDelivery->quantity - $totalTaken)) {
                                                            $quantityTaken = $balanceLeftG;
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $balanceLeftG = 0;
                                                            $deliveryStatus = 2;
                                                            $tempQtyG = $quantityTaken;
                                                        }
                                                    }else if($rowDelivery->rsb_ggl == 1 && $balanceLeftRG > 0){ //GGL-RSB
                                                        if ($balanceLeftRG >= ($rowDelivery->quantity - $totalTaken)) {
                                                            $balanceLeftRG = $balanceLeftRG - ($rowDelivery->quantity - $totalTaken);
                                                            $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $deliveryStatus = 1;
                                                            $tempQtyRG = $quantityTaken;
                                                        } elseif ($balanceLeftRG < ($rowDelivery->quantity - $totalTaken)) {
                                                            $quantityTaken = $balanceLeftRG;
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $balanceLeftRG = 0;
                                                            $deliveryStatus = 2;
                                                            $tempQtyRG = $quantityTaken;
                                                        }
                                                    }else if($rowDelivery->uncertified == 1 && $balanceLeftUN > 0){ //un-certified
                                                        if ($balanceLeftUN >= ($rowDelivery->quantity - $totalTaken)) {
                                                            $balanceLeftUN = $balanceLeftUN - ($rowDelivery->quantity - $totalTaken);
                                                            $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $deliveryStatus = 1;
                                                            $tempQtyUN = $quantityTaken;
                                                        } elseif ($balanceLeftUN < ($rowDelivery->quantity - $totalTaken)) {
                                                            $quantityTaken = $balanceLeftUN;
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $balanceLeftUN = 0;
                                                            $deliveryStatus = 2;
                                                            $tempQtyUN = $quantityTaken;
                                                        }
                                                    } 
                                                }

                                                $deliveryValue = $quantityTaken * $salesUnitPrice;
                                                $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                                $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                                $percentTaken = $percentTaken * 100;
                                                if($quantityTaken <> 0){
                                                    $sqlTest3 = "INSERT INTO `temp_delivery` (temp_transaction_id, shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, 
                                                                        delivery_value, entry_by, entry_date, qty_rsb, qty_ggl, qty_rsb_ggl, qty_uncertified, delivery_status, sync_status) VALUES ("
                                                            . "{$tempTransactionId}, {$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                                            . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$tempQtyR}, {$tempQtyG}, {$tempQtyRG}, {$tempQtyUN}, {$deliveryStatus}, {$syncStatus})";
                                                    $result = $myDatabase->query($sqlTest3, MYSQLI_STORE_RESULT);
                                              }
                                           //     echo "INSERT DELIVERY" . $tempNo . " => " . $balanceLeftUN . " | " . $quantityTaken .  " <> ";
                                                // $tempNo++;
                                            } 
                                        }
                                    } else {
                                        $sql = "SELECT t.* 
                                            FROM transaction t 
                                            WHERE SUBSTR(t.slip_no,1,3) IN (SELECT stockpile_code FROM stockpile WHERE stockpile_id = {$stockpileId}) 
                                                    AND t.transaction_type = 1 AND t.delivery_status <> 1 {$whereProperty}
                                            ORDER BY t.unloading_date ASC, t.slip_no ASC";
                                        $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        $totalInventoryValue = 0;
                                        if ($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                                            $balanceLeftUN = $qty_uncertified;
                                            $balanceLeftR = $qtyRSB;
                                            $balanceLeftG = $qtyGGL;
                                            $balanceLeftRG = $qty_RG;
                                            while ($rowDelivery = $resultDelivery->fetch_object()) {
                                                $syncStatus = 0;
                                                $tempQtyR = 0;
                                                $tempQtyG = 0;
                                                $tempQtyRG = 0;
                                                $tempQtyUN = 0;
                                                $quantityTaken = 0;
                                                $percentTaken = 0;
                                                $deliveryStatus = 0;
                                                if ($rowDelivery->sync_status == 1) {
                                                    $syncStatus = 2;
                                                }

                                                if ($rowDelivery->delivery_status == 0) {
                                                    if($rowDelivery->rsb == 1 && $balanceLeft > 0) { //RSB
                                                        if ($balanceLeftR >= $rowDelivery->quantity) {
                                                            $balanceLeftR = $balanceLeftR - $rowDelivery->quantity;
                                                            $quantityTaken = $rowDelivery->quantity;
                                                            $percentTaken = 1;
                                                            $deliveryStatus = 1;
                                                            $tempQtyR = $quantityTaken;
                                                        } elseif ($balanceLeftR < $rowDelivery->quantity) {
                                                            $quantityTaken = $balanceLeftR;
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $balanceLeftR = 0;
                                                            $deliveryStatus = 2;
                                                            $tempQtyR = $quantityTaken;
                                                        }
                                                    }else if($rowDelivery->ggl == 1 && $balanceLeftG > 0) { //GGL
                                                        if ($balanceLeftG >= $rowDelivery->quantity) {
                                                            $balanceLeftG = $balanceLeftG - $rowDelivery->quantity;
                                                            $quantityTaken = $rowDelivery->quantity;
                                                            $percentTaken = 1;
                                                            $deliveryStatus = 1;
                                                            $tempQtyG = $quantityTaken;
                                                        } elseif ($balanceLeftG < $rowDelivery->quantity) {
                                                            $quantityTaken = $balanceLeftG;
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $balanceLeftG = 0;
                                                            $deliveryStatus = 2;
                                                            $tempQtyG = $quantityTaken;
                                                        }
                                                    }else if($rowDelivery->rsb_ggl == 1 && $balanceLeftRG > 0) { //GGL-RSB
                                                        if ($balanceLeftRG >= $rowDelivery->quantity) {
                                                            $balanceLeftRG = $balanceLeftRG - $rowDelivery->quantity;
                                                            $quantityTaken = $rowDelivery->quantity;
                                                            $percentTaken = 1;
                                                            $deliveryStatus = 1;
                                                            $tempQtyRG = $quantityTaken;
                                                        } elseif ($balanceLeftRG < $rowDelivery->quantity) {
                                                            $quantityTaken = $balanceLeftRG;
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $balanceLeftRG = 0;
                                                            $deliveryStatus = 2;
                                                            $tempQtyRG = $quantityTaken;
                                                        }
                                                    }else if($rowDelivery->uncertified == 0 && $balanceLeftUN > 0) { //un-certified
                                                        if ($balanceLeftUN >= $rowDelivery->quantity) {
                                                            $balanceLeftUN = $balanceLeftUN - $rowDelivery->quantity;
                                                            $quantityTaken = $rowDelivery->quantity;
                                                            $percentTaken = 1;
                                                            $deliveryStatus = 1;
                                                            $tempQtyUN = $quantityTaken;
                                                        } elseif ($balanceLeftUN < $rowDelivery->quantity) {
                                                            $quantityTaken = $balanceLeftUN;
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $balanceLeftUN = 0;
                                                            $deliveryStatus = 2;
                                                            $tempQtyUN = $quantityTaken;
                                                        }
                                                    }
                                                } elseif ($rowDelivery->delivery_status == 2) {
                                                    $totalTaken = 0;
                                                    $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                                    $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                                    if ($resultTaken !== false && $resultTaken->num_rows == 1) {
                                                        $rowTaken = $resultTaken->fetch_object();
                                                        $totalTaken = $rowTaken->total_taken;
                                                    }
                                                    if($rowDelivery->rsb == 1 && $balanceLeft > 0){ //RSB
                                                        if ($balanceLeftR >= ($rowDelivery->quantity - $totalTaken)) {
                                                            $balanceLeftR = $balanceLeftR - ($rowDelivery->quantity - $totalTaken);
                                                            $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $deliveryStatus = 1;
                                                            $tempQtyR = $quantityTaken;
                                                        } elseif ($balanceLeftR < ($rowDelivery->quantity - $totalTaken)) {
                                                            $quantityTaken = $balanceLeftR;
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $balanceLeftR = 0;
                                                            $deliveryStatus = 2;
                                                            $tempQtyR = $quantityTaken;
                                                        }
                                                    }else if($rowDelivery->ggl == 1 &&  $balanceLeftG > 0){ //GGL
                                                        if ($balanceLeftG >= ($rowDelivery->quantity - $totalTaken)) {
                                                            $balanceLeftG = $balanceLeftG - ($rowDelivery->quantity - $totalTaken);
                                                            $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $deliveryStatus = 1;
                                                            $tempQtyG = $quantityTaken;
                                                        } elseif ($balanceLeftG < ($rowDelivery->quantity - $totalTaken)) {
                                                            $quantityTaken = $balanceLeftG;
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $balanceLeftG = 0;
                                                            $deliveryStatus = 2;
                                                            $tempQtyG = $quantityTaken;
                                                        }
                                                    }else if($rowDelivery->rsb_ggl == 1 && $balanceLeftRG > 0 ){ //GGL-RSB
                                                        if ($balanceLeftRG >= ($rowDelivery->quantity - $totalTaken)) {
                                                            $balanceLeftRG = $balanceLeftRG - ($rowDelivery->quantity - $totalTaken);
                                                            $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $deliveryStatus = 1;
                                                            $tempQtyRG = $quantityTaken;
                                                        } elseif ($balanceLeftRG < ($rowDelivery->quantity - $totalTaken)) {
                                                            $quantityTaken = $balanceLeftRG;
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $balanceLeftRG = 0;
                                                            $deliveryStatus = 2;
                                                            $tempQtyRG = $quantityTaken;
                                                        }
                                                    }else if($rowDelivery->uncertified == 1 && $balanceLeftUN > 0){ //un-certified
                                                        if ($balanceLeftUN >= ($rowDelivery->quantity - $totalTaken)) {
                                                            $balanceLeftUN = $balanceLeftUN - ($rowDelivery->quantity - $totalTaken);
                                                            $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $deliveryStatus = 1;
                                                            $tempQtyUN = $quantityTaken;
                                                        } elseif ($balanceLeftUN < ($rowDelivery->quantity - $totalTaken)) {
                                                            $quantityTaken = $balanceLeftUN;
                                                            $percentTaken = ($quantityTaken / $rowDelivery->quantity) * 1;
                                                            $balanceLeftUN = 0;
                                                            $deliveryStatus = 2;
                                                            $tempQtyUN = $quantityTaken;
                                                        }
                                                    }
                                                }

                                                $deliveryValue = $quantityTaken * $salesUnitPrice;
                                                $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                                $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                                $percentTaken = $percentTaken * 100;

                                               if($quantityTaken <> 0){
                                                    $sqlTest3 = "INSERT INTO `temp_delivery` (temp_transaction_id, shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, 
                                                                    delivery_value, entry_by, entry_date, qty_rsb, qty_ggl, qty_rsb_ggl, qty_uncertified, delivery_status, sync_status) VALUES ("
                                                                . "{$tempTransactionId}, {$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                                                . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$tempQtyR}, {$tempQtyG}, {$tempQtyRG}, {$tempQtyUN}, {$deliveryStatus}, {$syncStatus})";
                                                    $result = $myDatabase->query($sqlTest3, MYSQLI_STORE_RESULT);
                                                
                                              }
                                            }
                                        }
                                    }

                                  $sql = "UPDATE temp_transaction SET inventory_value = {$totalInventoryValue} WHERE temp_transaction_id = {$tempTransactionId}";
                                  $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                  $cogsAmount = $totalInventoryValue;
                                  if ($salesCurrencyId != 1) {
                                      $cogsAmount = $totalInventoryValue / $salesExchangeRate;
                                  }

                              //    echo $sql;
                               
                                    $invoiceAmount = $blWeight * $salesOriginalUnitPrice;
                                    $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                                        . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$blWeight}, shipment_status = 1 "
                                        . "WHERE shipment_id = {$shipmentId}";
                                 //   echo " dua " . $sql;
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                    // update sales
                                    $boolUpdateSales = false;
                                    if ($blWeight == ($salesBalance - $deliveredBalance)) {
                                        $salesStatus = 1;
                                        $boolUpdateSales = true;
                                    } elseif ($blWeight < ($salesBalance - $deliveredBalance)) {
                                        $salesStatus = 2;
                                        $boolUpdateSales = true;
                                    }

                                    if ($boolUpdateSales) {
                                        $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                        $sql = "UPDATE sales SET used_status = 1 WHERE sales_id = {$salesId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    }

                        /*    if ($salesType == 3) {
                                        $sql2 = "SELECT d.*,
                                CASE WHEN t.transaction_type = 1 THEN s.stockpile_name ELSE s2.stockpile_name END AS stockpile_name,  
                                DATE_FORMAT(t.unloading_date, '%d %b %Y') AS transaction_date2,
                                t.slip_no, 
                                CASE WHEN con.contract_type = 'P' THEN 'PKS' ELSE 'Curah' END AS contract_type2,
                                con.po_no, 
                                CONCAT(f.freight_code, '-', v2.vendor_code) AS freight_code,
                                v3.vendor_name AS supplier,
                                v1.vendor_name, 
                                sh.shipment_no,
                                t.send_weight, t.netto_weight, d.quantity, CASE WHEN t.mutasi_id IS NOT NULL THEN t.unit_cost
                                WHEN t.adjustmentAudit_id IS NOT NULL THEN t.unit_price
                                ELSE con.price_converted END AS price_converted,
                                CASE WHEN t.mutasi_id IS NOT NULL THEN d.quantity * t.unit_cost
                                WHEN t.adjustmentAudit_id IS NOT NULL THEN d.quantity * t.unit_price
                                ELSE d.quantity * con.price_converted END AS cogs_amount,
                                t.freight_quantity, t.freight_price, 
                                CASE WHEN t.delivery_status = 2 THEN (d.percent_taken / 100) * (t.quantity * t.freight_price)
                                ELSE (d.percent_taken / 100) * (t.freight_quantity * t.freight_price) END AS freight_total,
                                CASE WHEN t.delivery_status = 2 AND t.freight_cost_id IS NOT NULL THEN (d.quantity/t.freight_quantity) * COALESCE((SELECT amt_claim FROM transaction_shrink_weight WHERE transaction_id = d.transaction_id),0)
                            WHEN t.freight_cost_id IS NOT NULL THEN (d.percent_taken / 100) * COALESCE((SELECT amt_claim FROM transaction_shrink_weight WHERE transaction_id = d.transaction_id),0) ELSE 0 END AS freight_shrink,
                                t.unloading_price,
                                (d.percent_taken / 100) * t.unloading_price AS unloading_total,
                                vhc.price AS vh_price, t.handling_quantity,
                                CASE WHEN t.delivery_status = 2 THEN (d.percent_taken / 100) * (t.handling_quantity * vhc.price)
                                ELSE (d.percent_taken / 100) * (t.handling_quantity * vhc.price) END AS handling_total,
                                vh1.pph_tax_id AS vh_pph_tax_id, vh1.pph AS vh_pph, vhtx.tax_category AS vh_pph_tax_category,
                                f.ppn_tax_id AS fc_ppn_tax_id, f.ppn AS fc_ppn, fctxppn.tax_category AS fc_ppn_tax_category,
                                t.fc_tax_id AS fc_pph_tax_id, fctxpph.tax_value AS fc_pph, fctxpph.tax_category AS fc_pph_tax_category,
                                l.ppn_tax_id AS uc_ppn_tax_id, l.ppn AS uc_ppn, uctxppn.tax_category AS uc_ppn_tax_category,
                                l.pph_tax_id AS uc_pph_tax_id, l.pph AS uc_pph, uctxpph.tax_category AS uc_pph_tax_category,
                                l.labor_id,t.freight_cost_id, f.freight_id,f.freight_supplier, l.labor_name
                                        FROM delivery d
                            LEFT JOIN `transaction` t
                                ON t.transaction_id = d.transaction_id
                            LEFT JOIN stockpile_contract sc
                                ON sc.stockpile_contract_id = t.stockpile_contract_id
                            LEFT JOIN stockpile s
                                ON s.stockpile_id = sc.stockpile_id
                            LEFT JOIN contract con
                                ON con.contract_id = sc.contract_id
                            LEFT JOIN vendor v1
                                ON v1.vendor_id = con.vendor_id
                            LEFT JOIN unloading_cost uc
                                ON uc.unloading_cost_id = t.unloading_cost_id
                            LEFT JOIN vehicle vh
                                ON vh.vehicle_id = uc.vehicle_id
                            LEFT JOIN freight_cost fc
                                ON fc.freight_cost_id = t.freight_cost_id
                            LEFT JOIN freight f
                                ON f.freight_id = fc.freight_id
                            LEFT JOIN vendor v2
                                ON v2.vendor_id = fc.vendor_id
                            LEFT JOIN vendor v3
                                ON v3.vendor_id = t.vendor_id
                            LEFT JOIN shipment sh
                                ON sh.shipment_id = d.shipment_id
                            LEFT JOIN sales sl
                                ON sl.sales_id = sh.sales_id
                            LEFT JOIN stockpile s2
                                ON s2.stockpile_id = sl.stockpile_id
                            LEFT JOIN customer cust
                                ON cust.customer_id = sl.customer_id
                            LEFT JOIN tax fctxpph
                                ON fctxpph.tax_id = t.fc_tax_id
                            LEFT JOIN tax fctxppn
                                ON fctxppn.tax_id = f.ppn_tax_id
                            LEFT JOIN labor l
                                ON l.labor_id = t.labor_id
                            LEFT JOIN tax uctxpph
                                ON uctxpph.tax_id = l.pph_tax_id
                            LEFT JOIN tax uctxppn
                                ON uctxppn.tax_id = l.ppn_tax_id	
                            lEFT JOIN vendor_handling_cost vhc
                                ON vhc.handling_cost_id = t.handling_cost_id
                            LEFT JOIN vendor_handling vh1
                                ON vh1.vendor_handling_id = vhc.vendor_handling_id
                            LEFT JOIN tax vhtx
                                ON vh1.pph_tax_id = vhtx.tax_id
                            WHERE 1=1
                            AND d.shipment_id = {$shipmentId}";
                                        $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                                        if ($result2->num_rows > 0) {

                                            while ($row2 = $result2->fetch_object()) {
                                                $value = '';
                                                $no1 = 1;

                                                $slipOut = $row2->slipOut;
                                                $slipOutCode = $row2->slipOutCode;

                                                if ($row2->slip_no >= 'SAM-0000000001' && $row2->slip_no <= 'SAM-0000001925') {
                                                    $fc_pph2 = 4;
                                                } else {
                                                    $fc_pph2 = $row2->fc_pph;
                                                }

                                                if ($row2->slip_no >= 'MAR-0000000001' && $row2->slip_no <= 'MAR-0000007138') {
                                                    $fc_pph2 = 4;
                                                } else {
                                                    $fc_pph2 = $row2->fc_pph;
                                                }

                                                if ($row2->vh_pph_tax_category == 1 && $row2->vh_pph_tax_id != '') {
                                                    $pphvh2 = ($row2->handling_total / ((100 - $row2->vh_pph) / 100)) - $row2->handling_total;

                                                } elseif ($row2->vh_pph_tax_category == 0 && $row2->vh_pph_tax_id != '') {
                                                    $pphvh2 = 0;
                                                    //$pphfc =  $row->freight_total - ($row->freight_total * ((100 - $fc_pph) / 100));
                                                } else {
                                                    $pphvh2 = 0;
                                                }

                                                $handlingTotal2 = $row2->handling_total - $pphvh2;

                                                if ($row2->fc_pph_tax_category == 1 && $row2->fc_pph_tax_id != '') {
                                                    $pphfc2 = ($row2->freight_total / ((100 - $fc_pph2) / 100)) - $row2->freight_total;
                                                    $pphfcShrink2 = ($row2->freight_shrink / ((100 - $fc_pph2) / 100)) - $row2->freight_shrink;

                                                } elseif ($row2->fc_pph_tax_category == 0 && $row2->fc_pph_tax_id != '') {
                                                    $pphfc2 = 0;
                                                    $pphfcShrink2 = 0;
                                                    //$pphfc =  $row->freight_total - ($row->freight_total * ((100 - $fc_pph) / 100));
                                                } else {
                                                    $pphfc2 = 0;
                                                    $pphfcShrink2 = 0;
                                                }
                                                /*
                                        if($row->fc_ppn_tax_id != ''){
                                            $ppnfc = ($row->freight_total * ((100 + $row->fc_ppn) / 100)) - $row->freight_total;
                                        }else{
                                            $ppnfc = 0;
                                        }*/

                                        //KOMENT SEMENTARA

                                        /*       $freightTotal2 = ($row2->freight_total + $ppnfc2 + $pphfc2) - ($row2->freight_shrink + $pphfcShrink2);


                                                if ($row2->uc_pph_tax_category == 1 && $row2->uc_pph_tax_id != '') {
                                                    $pphuc2 = ($row2->unloading_total / ((100 - $row2->uc_pph) / 100)) - $row2->unloading_total;

                                                } elseif ($row2->uc_pph_tax_category == 0 && $row2->uc_pph_tax_id != '') {
                                                    $pphuc2 = 0;
                                                    //$pphuc =  $row->unloading_total - ($row->unloading_total * ((100 - $row->uc_pph) / 100));
                                                } else {
                                                    $pphuc2 = 0;
                                                }


                                                $unloadingTotal2 = $row2->unloading_total + $ppnuc2 + $pphuc2;

                                                $totalCogs2 = $row2->cogs_amount + $freightTotal2 + $unloadingTotal2 + $handlingTotal2;

                                                $quantity_total = $row2->quantity;
                                                $total_quantity = $quantity_total + $total_quantity;

                                                $pks_total = $row2->cogs_amount;
                                                $total_pks = $pks_total + $total_pks;

                                                $fc_total = $freightTotal2;
                                                $total_fc = $fc_total + $total_fc;

                                                $vh_total = $handlingTotal2;
                                                $total_vh = $vh_total + $total_vh;

                                                $uc_total = $unloadingTotal2;
                                                $total_uc = $uc_total + $total_uc;

                                                $cogs_total = $totalCogs2;
                                                $total_cogs = $cogs_total + $total_cogs;

                                                $unitPrice = $total_cogs / $total_quantity;

                                                $no1++;

                                            }
                                        }


                                        $sql = "SELECT * FROM vendor WHERE vendor_id = {$vendorLangsir}";
                                        $resultVendor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        if ($resultVendor !== false && $resultVendor->num_rows == 1) {
                                            $rowVendor = $resultVendor->fetch_object();
                                            $vendorCode = $rowVendor->vendor_code;
                                        }

                                        $checkPoNo = 'P-' . $vendorCode . '-' . $currentYearMonth;
                                        $sql = "SELECT po_no FROM contract WHERE company_id = {$_SESSION['companyId']} AND po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
                                        $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        if ($resultPo->num_rows == 1) {
                                            $rowPo = $resultPo->fetch_object();
                                            $splitPoNo = explode('-', $rowPo->po_no);
                                            $lastExplode = count($splitPoNo) - 1;
                                            $nextPoNo = ((float)$splitPoNo[$lastExplode]) + 1;
                                            $poNo = $checkPoNo . '-' . $nextPoNo;
                                        } else {
                                            $poNo = $checkPoNo . '-1';
                                        }


                                        $unitPriceConverted = $unitPrice * $salesExchangeRate;

                                        $sqlKontrak = "INSERT INTO contract (contract_type, po_no, contract_no, vendor_id, currency_id, exchange_rate, price, price_converted, quantity, payment_status, notes, entry_by, entry_date,langsir,langsir_shipment_id) VALUES ('P','{$poNo}','{$salesNo}',{$vendorLangsir},{$salesCurrencyId},{$salesExchangeRate},{$unitPrice},{$unitPriceConverted}, {$total_quantity}, 1, '-',{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),1,{$shipmentId})";
                                        $result = $myDatabase->query($sqlKontrak, MYSQLI_STORE_RESULT);
                                        if ($result !== false) {
                                            $contractId = $myDatabase->insert_id;

                                            $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                                                . "{$stockpileLangsir}, {$contractId}, {$total_quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


                                            //insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);
                                            //insertReportGL($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);


                                        }

                                    } */

                                //    insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                                //    insertReportGL($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

               /*                     $return_value = '|OK|Transaction has inserted successfully.|';
                                    unset($_SESSION['transaction']);
                                } else {
                                    $return_value = '|FAIL|Failed insert transaction.| '. $sql;
                                }
                        //  } //tutup else closing_date KOMENT SEMENTARA
                      } else {
                            if ($sendWeight2 > $availableBalance) {
                                $return_value = '|FAIL|Available quantity in ' . $stockpileName . ' is ' . number_format($availableBalance, 4, '.', ',') . ' Kg.|';
                           } elseif ($sendWeight2 > ($salesBalance - $deliveredBalance)) {
                                $return_value = '|FAIL|Sales agreement balance is ' . ($salesBalance - $deliveredBalance) . ' Kg.|';
                            }
                        } 

                    } else {
                        $return_value = '|FAIL|Tanggal transaksi harus melebihi tanggal sales.|' . $salesDate . '|' . $transactionDate2 . '|';
                    }

                } else {
                    $return_value = '|FAIL|Please fill the required fields.|';
                }

            } else {
                $return_value = '|FAIL|Tanggal transaksi sudah lebih dari 5 hari.|';
            }// </editor-fold>
            }else{
                $return_value = '|FAIL|Nilai Inputan RSB/GGL/RSB+GGL/Uncertified Salah.|';
            }
        }else{
            $return_value = '|FAIL|Notim OUT sebelumnya belum di Approve.|';
        }
    }elseif ($transactionType == 2 && $_POST['_method'] == 'INSERT') {

        $tempTransactionId = $myDatabase->real_escape_string($_POST['tempTransactionId']);

        $sql = "SELECT SUBSTRING(tt.slip_no, 1, 3) AS spCode, tt.* FROM temp_transaction tt where temp_transaction_id = {$tempTransactionId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result !== false && $result->num_rows > 0) {
            $rowData = $result->fetch_object();
            $spCode = $rowData->spCode;
            $rsb_ggl = $rowData->rsb_ggl;
            $rsb = $rowData->rsb;
            $ggl = $rowData->ggl;
            $uncertified = $rowData->uncertified;

            $checkSlipNo = $spCode . '-' . $currentYear3;
            $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            // echo "YY".$sql;
            if ($resultSlip->num_rows == 0) {
                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }
            $rowSlipNo = $resultSlip->fetch_object();
            $nextSlipNo = $rowSlipNo->next_id;
            $slipNo = $checkSlipNo . '-' . $nextSlipNo;

            $transactionDate2 = $rowData->transaction_date;

            $sqlT = "INSERT INTO `transaction` (slip_no, shipment_id, transaction_date,unloading_date, vehicle_no, transaction_type, "
                    . "send_weight, notes, quantity, shrink, cust_tax_id, entry_by, inventory_value, entry_date, rsb, ggl, rsb_ggl, uncertified) "
                    . "VALUES ('{$slipNo}', {$rowData->shipment_id}, '{$rowData->transaction_date}', '{$rowData->transaction_date}', '{$rowData->vehicle_no}', "
                    . "{$rowData->transaction_type}, {$rowData->send_weight}, '{$rowData->notes}', {$rowData->quantity}, {$rowData->shrink}, {$rowData->cust_tax_id}, {$_SESSION['userId']},{$rowData->inventory_value} ,STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), "
                    . "{$rsb}, {$ggl}, {$rsb_ggl}, {$uncertified})";
                $resultT = $myDatabase->query($sqlT, MYSQLI_STORE_RESULT);
                
                if ($resultT !== false) {
                    $transactionId = $myDatabase->insert_id;
                
                    $return_value = '|OK|Transaction has inserted successfully.|';

                    $sql = "UPDATE temp_transaction SET transaction_id = {$transactionId}, slip_no = '{$slipNo}', status = 1 WHERE temp_transaction_id = {$tempTransactionId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    $sqlTD = "SELECT * FROM temp_delivery WHERE temp_transaction_id = {$tempTransactionId}";
                    $resultTD = $myDatabase->query($sqlTD, MYSQLI_STORE_RESULT);
                    if ($resultTD !== false && $resultTD->num_rows > 0) {
                        while ($rowTD = $resultTD->fetch_object()) {
                            $deliveryId1 = $rowTD->temp_delivery_id;

                            $sql = "UPDATE transaction SET delivery_status = {$rowTD->delivery_status}, sync_status = {$rowTD->sync_status} WHERE transaction_id = {$rowTD->transaction_id}";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                            $sqlDelivery = "INSERT INTO `delivery` (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date, "
                                    . "qty_rsb, qty_ggl, qty_rsb_ggl, qty_uncertified) VALUES ("
                                    . "{$rowTD->shipment_id}, {$rowTD->transaction_id}, '{$transactionDate2}', {$rowTD->percent_taken}, "
                                    . "{$rowTD->quantity}, {$rowTD->inventory_value}, {$rowTD->delivery_value}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$rowTD->qty_rsb}, "
                                    . "{$rowTD->qty_ggl}, {$rowTD->qty_rsb_ggl}, {$rowTD->qty_uncertified})";
                            $resultDelivery = $myDatabase->query($sqlDelivery, MYSQLI_STORE_RESULT);

                            if ($resultDelivery !== false) {
                                $deliveryId_copy = $myDatabase->insert_id;

                                $sql_td = "UPDATE temp_delivery SET delivery_id = {$deliveryId_copy}, status = 1 WHERE temp_delivery_id = {$deliveryId1}";
                                $result = $myDatabase->query($sql_td, MYSQLI_STORE_RESULT);
                            }
                        }
                    }
                    
                   insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", "NULL", $transactionId);

                    insertReportGL($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", "NULL", $transactionId);
                }else{
                    $return_value = '|FAIL|Failed insert transaction.| '. $sqlTest3;
                }
        }

    }else if ($_POST['_method'] == 'CANCEL') {
            $cancelRemarks = $myDatabase->real_escape_string($_POST['reject_remarks']);

            $sql_tt = "UPDATE temp_transaction SET status = 2, cancel_remarks = '{$cancelRemarks}' WHERE temp_transaction_id = {$tempTransactionId}";
            $result = $myDatabase->query($sql_tt, MYSQLI_STORE_RESULT);

         

       if ($result != false) {

            $sql = "UPDATE temp_delivery SET status = 2 WHERE temp_transaction_id = {$tempTransactionId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            $sqlSh = "SELECT sales_id From shipment where shipment_id = {$shipmentId}";
            $resultSh = $myDatabase->query($sqlSh, MYSQLI_STORE_RESULT);
            $rowSh = $resultSh->fetch_object();
            $salesId = $rowSh->sales_id;

            $sql_shipment = "UPDATE shipment SET shipment_status = 0,
                                shipment_date = NULL, cogs_amount = 0, invoice_amount = 0, quantity = 0 WHERE shipment_id = {$shipmentId}";
            $result = $myDatabase->query($sql_shipment, MYSQLI_STORE_RESULT);

            $sql_tt = "UPDATE sales SET sales_status = 0, used_status = 0 WHERE sales_id = {$salesId}";
            $result = $myDatabase->query($sql_tt, MYSQLI_STORE_RESULT);

            $return_value = '|OK|Reject  has successfully.|';
       } else {
           $return_value = '|FAIL|Reject  FAIL!|.'.$sql_tt;

       }
       
   }

    echo $return_value;
    // </editor-fold>
}*/ 
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'return_notim_out') {
    // <editor-fold defaultstate="collapsed" desc="delete_sales">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $transactionId2 = $myDatabase->real_escape_string($_POST['transactionId2']);
    $returnOutDate = $myDatabase->real_escape_string($_POST['returnOutDate']);
    $t_date = str_replace('/', '-', $returnOutDate);
    $currentYear2 = date('y', strtotime($t_date));

    // </editor-fold>
    $sql = "UPDATE `transaction` SET notim_status = 1 WHERE transaction_id = {$transactionId2}";
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($transactionId2 != '') {
        $sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode FROM `transaction` t WHERE t.transaction_id = {$transactionId2}";
        $resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
        if ($resultR !== false && $resultR->num_rows == 1) {
            $rowR = $resultR->fetch_object();
            //$R = "R";
            //$U = "-U";
            //$sql = "UPDATE `transaction` SET shipment_id = NULL WHERE transaction_id = {$transactionId}";
            //$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            //$slipU = $rowR->slip_no .''. $U;
            //$currentYear2 =
            $checkSlipNo = $rowR->stockpileCode . '-' . $currentYear2;
            $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($resultSlip->num_rows == 0) {
                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }
            $rowSlipNo = $resultSlip->fetch_object();
            $nextSlipNo = $rowSlipNo->next_id;
            $slipNo = $checkSlipNo . '-' . $nextSlipNo;
            $slipR = $rowR->slip_no . '-R';
            $slipU = $rowR->slip_no . '-U';
            $dateR = $date->format('Y-m-d');
            $sendW = $rowR->send_weight * -1;
            $quantityW = $rowR->quantity * -1;
            $shrinkW = $rowR->shrink * -1;
            $shipmentId = $rowR->shipment_id;
            if ($rowR->notes == '')
                $notes = 'NULL';
        }

        $sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},NULL,{$shipmentId},'{$rowR->transaction_date}',NULL,'{$rowR->vehicle_no}',NULL,NULL,STR_TO_DATE('{$returnOutDate}', '%d/%m/%Y'),NULL,NULL,NULL,{$rowR->transaction_type},NULL,'{$sendW}',0,0,0,'{$notes}',NULL,0,0,'{$quantityW}','{$shrinkW}',0,0,0,0,0,NULL,NULL,NULL,0,NULL,NULL,NULL,NULL,NULL,{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
        if ($resultLog !== false) {
            //echo $sqlLog;
            $transactionId = $myDatabase->insert_id;

            insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

            // delete from delivery and update delivery_status in transaction
            $sql = "SELECT d.*, t.sync_status 
                            FROM delivery d
                            INNER JOIN `transaction` t
                                ON t.transaction_id = d.transaction_id
                            WHERE d.shipment_id = {$shipmentId}";
            $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($resultShipment !== false && $resultShipment->num_rows > 0) {
                while ($rowShipment = $resultShipment->fetch_object()) {
                    $syncStatus = 0;
                    if ($rowShipment->sync_status == 1) {
                        $syncStatus = 2;
                    }

                    if ($rowShipment->percent_taken == 100) {
                        $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    } else {
                        $sqlOther = "SELECT * FROM delivery WHERE shipment_id <> {$shipmentId} AND transaction_id = {$rowShipment->transaction_id}";
                        $resultOther = $myDatabase->query($sqlOther, MYSQLI_STORE_RESULT);

                        if ($resultOther->num_rows > 0) {
                            $sqlUpdate = "UPDATE `transaction` SET delivery_status = 2, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                        } else {
                            $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                        }
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    }
                }

                $sqlDelete = "DELETE FROM delivery WHERE shipment_id = {$shipmentId}";
                $resultDelete = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

            }
					$ca = 'NULL';
					$ia = 'NULL';
					$q = 'NULL';
					$sd = 'NULL';
					$sqlU = "UPDATE sales sl
							LEFT JOIN shipment sh ON sh.sales_id = sl.sales_id SET sl.sales_status = 0, sh.shipment_status = 0, sh.shipment_date = {$sd}, sh.cogs_amount = {$ca}, sh.invoice_amount = {$ia}, sh.quantity = {$q} WHERE sh.shipment_id = {$shipmentId}";
						$result = $myDatabase->query($sqlU, MYSQLI_STORE_RESULT);
				
				$return_value = '|OK|Nota Timbang has successfully Returned.|'. $transactionId2 .'|';
        } else {
            $return_value = '|FAIL|Returned Nota Timbang failed.|' . $sqlLog . '';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'return_notim_in') {
    // <editor-fold defaultstate="collapsed" desc="delete_sales">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $transactionId2 = $myDatabase->real_escape_string($_POST['transactionId']);
    $returnInDate = $myDatabase->real_escape_string($_POST['returnInDate']);
    $t_date = str_replace('/', '-', $returnInDate);
    $currentYear2 = date('y', strtotime($t_date));

    // </editor-fold>


    if ($transactionId2 != '') {
        $sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode FROM `transaction` t WHERE t.transaction_id = {$transactionId2}";
        $resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
        if ($resultR !== false && $resultR->num_rows == 1) {
            $rowR = $resultR->fetch_object();
            //$R = "R";
            //$U = "-U";

            //$slipU = $rowR->slip_no .''. $U;
            $checkSlipNo = $rowR->stockpileCode . '-' . $currentYear2;
            $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($resultSlip->num_rows == 0) {
                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }
            $rowSlipNo = $resultSlip->fetch_object();
            $nextSlipNo = $rowSlipNo->next_id;
            $slipNo = $checkSlipNo . '-' . $nextSlipNo;
            $slipR = $rowR->slip_no . '-R';
            $slipU = $rowR->slip_no . '-U';
            $dateR = $date->format('Y-m-d');
            $sendW = $rowR->send_weight * -1;
            $brutoW = $rowR->bruto_weight * -1;
            $tarraW = $rowR->tarra_weight * -1;
            $nettoW = $rowR->netto_weight * -1;
            $handlingW = $rowR->handling_quantity * -1;
            $freightW = $rowR->freight_quantity * -1;
            $quantityW = $rowR->quantity * -1;
            $shrinkW = $rowR->shrink * -1;
            $unloadingP = $rowR->unloading_price * -1;

            if ($rowR->shipment_id == '') {
                $shipment_id = 'NULL';
            } else {
                $shipment_id = $rowR->shipment_id;
            }
            if ($rowR->labor_id == '') {
                $labor_id = 'NULL';
            } else {
                $labor_id = $rowR->labor_id;
            }
            if ($rowR->unloading_cost_id == '') {
                $unloading_cost_id = 'NULL';
            } else {
                $unloading_cost_id = $rowR->unloading_cost_id;
            }
            if ($rowR->handling_cost_id == '') {
                $handling_cost_id = 'NULL';
            } else {
                $handling_cost_id = $rowR->handling_cost_id;
            }
            if ($rowR->freight_cost_id == '') {
                $freight_cost_id = 'NULL';
            } else {
                $freight_cost_id = $rowR->freight_cost_id;
            }
            if ($rowR->permit_no == '') {
                $permit_no = 'NULL';
            } else {
                $permit_no = $rowR->permit_no;
            }
            if ($rowR->vendor_id == '') {
                $vendor_id = 'NULL';
            } else {
                $vendor_id = $rowR->vendor_id;
            }
            if ($rowR->cust_tax_id == '') {
                $cust_tax_id = 'NULL';
            } else {
                $cust_tax_id = $rowR->cust_tax_id;
            }
            if ($rowR->curah_tax_id == '') {
                $curah_tax_id = 'NULL';
            } else {
                $curah_tax_id = $rowR->curah_tax_id;
            }
            if ($rowR->uc_tax_id == '') {
                $uc_tax_id = 'NULL';
            } else {
                $uc_tax_id = $rowR->uc_tax_id;
            }
            if ($rowR->fc_tax_id == '') {
                $fc_tax_id = 'NULL';
            } else {
                $fc_tax_id = $rowR->fc_tax_id;
            }
            if ($rowR->block == '') {
                $block = 'NULL';
            } else {
                $block = $rowR->block;
            }
            //if($rowR->payment_id == ''){
            $payment_id = 'NULL';
            //}else{
            //$payment_id = $rowR->payment_id;
            //}
            //if($rowR->fc_payment_id == ''){
            $fc_payment_id = 'NULL';
            //}else{
            //$fc_payment_id = $rowR->fc_payment_id;
            //}
            //if($rowR->hc_payment_id == ''){
            $hc_payment_id = 'NULL';
            //}else{
            //$hc_payment_id = $rowR->hc_payment_id;
            //}
            //if($rowR->uc_payment_id == ''){
            $uc_payment_id = 'NULL';
            //}else{
            //$uc_payment_id = $rowR->uc_payment_id;
            //}
            if ($rowR->notes == '') {
                $notes = 'NULL';
            } else {
                $notes = $rowR->notes;
            }
            $delivery_status = 0;
        }

        $sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,handling_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},{$rowR->stockpile_contract_id},{$shipment_id},STR_TO_DATE('{$returnInDate}', '%d/%m/%Y'),STR_TO_DATE('{$returnInDate}', '%d/%m/%Y'),'{$rowR->vehicle_no}',{$labor_id},{$unloading_cost_id},STR_TO_DATE('{$returnInDate}', '%d/%m/%Y'),{$handling_cost_id},{$freight_cost_id},'{$permit_no}',{$rowR->transaction_type},{$vendor_id},'{$sendW}','{$brutoW}','{$tarraW}','{$nettoW}','{$notes}','{$rowR->driver}','{$handlingW}','{$freightW}','{$quantityW}','{$shrinkW}','{$rowR->freight_price}','{$rowR->handling_price}','{$unloadingP}','{$rowR->unit_price}','{$rowR->inventory_value}',{$cust_tax_id},{$curah_tax_id},{$uc_tax_id},{$fc_tax_id},{$delivery_status},'{$block}',{$payment_id},{$fc_payment_id},{$hc_payment_id},{$uc_payment_id},{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
        if ($resultLog !== false) {
            //echo $sqlLog;
            $transactionId = $myDatabase->insert_id;
			
			$sql = "UPDATE transaction_timbangan SET notim_status = 0 WHERE transaction_id = '{$rowR->t_timbangan}'";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            $sql = "UPDATE `transaction` SET notim_status = 1 WHERE transaction_id = {$transactionId2}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            $sql = "CALL sp_shrink_weight_retur({$transactionId},{$transactionId2})";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);


            $return_value = '|OK|Nota Timbang has successfully Returned.|' . $transactionId2 . '|';
        } else {
            $return_value = '|FAIL|Returned Nota Timbang failed.|' . $sqlLog . '';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'fixedAsset_data') {
    // <editor-fold defaultstate="collapsed" desc="vehicle_data">

    $return_value = '';
    $boolNew = false;


    $fixedAssetId = $myDatabase->real_escape_string($_POST['fixedAssetId']);;
    $dateofAcquisition = $myDatabase->real_escape_string($_POST['dateofAcquisition']);;
    $nopol = $myDatabase->real_escape_string($_POST['nopol']);;
    $assetName = $myDatabase->real_escape_string($_POST['assetName']);;
    $merk = $myDatabase->real_escape_string($_POST['merk']);;
    $type = $myDatabase->real_escape_string($_POST['type']);;
    $rangka = $myDatabase->real_escape_string($_POST['rangka']);;
    $mesin = $myDatabase->real_escape_string($_POST['mesin']);;
    $unit = $myDatabase->real_escape_string($_POST['unit']);;
    $acquisitionCost = $myDatabase->real_escape_string($_POST['acquisitionCost']);;
    $usageYear = $myDatabase->real_escape_string($_POST['usageYear']);;
    $usageMonth = $myDatabase->real_escape_string($_POST['usageMonth']);;
    $depresitionType = $myDatabase->real_escape_string($_POST['depresitionId']);;
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);;
    $masterAssettypeId = $myDatabase->real_escape_string($_POST['masterAssettypeId']);;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    // </editor-fold>

    if ($fixedAssetId == '') {
        $boolNew = true;
    }

    if ($dateofAcquisition != '' && $assetName != '' && $unit != '' && $acquisitionCost != '' && $usageYear != '' && $usageMonth != '' && $depresitionType != '') {
        $date = new DateTime();
        $currentmonth = $date->format('m');
        $currentyear = $date->format('Y');
        $checkAssetCode = 'AST/' . $currentmonth . '/' . $currentyear;
        $sql = "SELECT assetcode FROM fixed_asset WHERE assetcode LIKE '%{$checkAssetCode}' ORDER BY fixed_asset_id DESC LIMIT 1";
        $resultFA = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($resultFA->num_rows == 1) {
            $rowFA = $resultFA->fetch_object();
            $splitFACode = explode('/', $rowFA->assetcode);
            $lastExplode = count($splitFACode) - 4;
            $nextFACode = ((float)$splitFACode[$lastExplode]) + 1;
            $FACode = str_pad($nextFACode, 4, '0', STR_PAD_LEFT);
            $Asset_Code = $FACode . '/' . $checkAssetCode;
        } else {
            $Asset_Code = '0001/' . $checkAssetCode;
        }

        if ($boolNew) {
            $sql = "INSERT INTO `fixed_asset`(`AssetCode`,`DateofAcquisition`,
						`NoPol`,`AssetName`,`Merk`,`Type`,`Rangka`,`Mesin`,`Unit`,`AcquisitionCost`,`UsageYear`,`UsageMonth`,`DepresitionType`,
						`entry_by`,`entry_date`,`stockpile_id`,`master_assettype_id`)
						VALUES
						('$Asset_Code',STR_TO_DATE('{$dateofAcquisition}', '%d/%m/%Y'),'$nopol','$assetName','$merk',
						'$type','$rangka','$mesin',$unit,$acquisitionCost,$usageYear,$usageMonth,'$depresitionType',
						{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),$stockpileId,$masterAssettypeId)";
        } else {
            $sql = "UPDATE `fixed_asset`
						SET
						`DateofAcquisition` = STR_TO_DATE('{$dateofAcquisition}', '%d/%m/%Y'),
						`NoPol` = '$nopol',
						`AssetName` = '$assetName',
						`Merk` = '$merk',
						`Type` = '$type',
						`Rangka` = '$rangka',
						`Mesin` = '$mesin',
						`Unit` = $unit,
						`AcquisitionCost` = $acquisitionCost,
						`UsageYear` = $usageYear,
						`UsageMonth` = $usageMonth,
						`DepresitionType` = '$depresitionType',
						`entry_by` = {$_SESSION['userId']},
						`entry_date` = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),
						`stockpile_id` = $stockpileId,
						`master_assettype_id` = $masterAssettypeId
						WHERE `fixed_asset_id` = $fixedAssetId;
						";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            if ($boolNew) {
                $itemId = $myDatabase->insert_id;
            }

            $return_value = '|OK|Fixed Asset has successfully inserted/updated.|' . $itemId . '|';
        } else {
            $return_value = '|FAIL|Insert/update Fixed Asset failed.||';
        }

    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    echo $sql;
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_contract_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_contract_data">

    $return_value = '';
    $boolInsertVendor = false;
    $boolVendorExists = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $contractType = $myDatabase->real_escape_string($_POST['contractType']);
    $contractNo = $myDatabase->real_escape_string($_POST['contractNo']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    $vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    // </editor-fold>

    if ($vendorId == 'INSERT') {
        if ($vendorCode != '' && $vendorName != '') {
            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$vendorCode}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result !== false && $result->num_rows > 0) {
                $boolVendorExists = true;
            } elseif ($result !== false && $result->num_rows == 0) {
                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, entry_by, entry_date) VALUES ("
                    . "UPPER('{$vendorCode}'), '{$vendorName}', '{$vendorAddress}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false) {
                    $vendorId = $myDatabase->insert_id;
                    $boolInsertVendor = true;
                }
            }
        } else {
            $boolInsertVendor = false;
        }
    } else {
        $boolInsertVendor = true;
    }

    if ($contractType != '' && $vendorId != '' && $currencyId != '' && $price != '' &&
        $boolInsertVendor && !$boolVendorExists) {

        if ($quantity == '') {
            $quantity = 'NULL';
        }

        if ($exchangeRate == '') {
            $exchangeRate = 1;
        }

        $priceConverted = $price * $exchangeRate;

        $sql = "SELECT * FROM vendor WHERE vendor_id = {$vendorId}";
        $resultVendor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($resultVendor !== false && $resultVendor->num_rows == 1) {
            $rowVendor = $resultVendor->fetch_object();
            $vendorCode = $rowVendor->vendor_code;
        }

        $checkPoNo = $contractType . '-' . $vendorCode . '-' . $currentYearMonth;
        $sql = "SELECT * FROM contract WHERE company_id = {$_SESSION['companyId']} AND po_no LIKE '{$checkPoNo}%'";
        $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $nextPoNo = $resultPo->num_rows + 1;
        $poNo = $checkPoNo . '-' . $nextPoNo;

        $sql = "INSERT INTO `contract` (contract_type, po_no, contract_no, vendor_id, currency_id, exchange_rate, price, price_converted, quantity, entry_by, entry_date) VALUES ("
            . "'{$contractType}', '{$poNo}', '{$contractNo}', {$vendorId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, {$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $contractId = $myDatabase->insert_id;

            $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                . "{$stockpileId}, {$contractId}, {$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $stockpileContractId = $myDatabase->insert_id;
                $return_value = '|OK|Contract has successfully inserted.|CONTRACT~' . $stockpileContractId . '|';
            } else {
                $sql = "DELETE FROM `contract` WHERE contract_id = {$contractId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                $return_value = '|FAIL|Insert contract failed.||';
            }
        } else {
            $return_value = '|FAIL|Insert contract failed.||';
        }
    } else {
        if ($boolVendorExists) {
            $return_value = '|FAIL|Vendor already exists.||';
        } elseif (!$boolInsertVendor) {
            $return_value = '|FAIL|Insert vendor failed.||';
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_unloading_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_unloading_data">

    $return_value = '';
    $boolInsertVehicle = false;
    $boolVehicleExists = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $vehicleId = $myDatabase->real_escape_string($_POST['vehicleId']);
    $vehicleName = $myDatabase->real_escape_string($_POST['vehicleName']);
    // </editor-fold>

    if ($vehicleId == 'INSERT') {
        if ($vehicleName != '') {
            $sql = "SELECT * FROM `vehicle` WHERE UPPER(vehicle_name) = UPPER('{$vehicleName}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result !== false && $result->num_rows > 0) {
                $boolVehicleExists = true;
            } elseif ($result !== false && $result->num_rows == 0) {
                $sql = "INSERT INTO `vehicle` (vehicle_name, entry_by, entry_date) VALUES ("
                    . "'{$vehicleName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false) {
                    $vehicleId = $myDatabase->insert_id;
                    $boolInsertVehicle = true;
                }
            }
        } else {
            $boolInsertVehicle = false;
        }
    } else {
        $boolInsertVehicle = true;
    }

    if ($vehicleId != '' && $currencyId != '' && $price != '' &&
        $boolInsertVehicle && !$boolVehicleExists) {

        if ($exchangeRate == '') {
            $exchangeRate = 1;
        }

        $priceConverted = $price * $exchangeRate;

        $sql = "INSERT INTO `unloading_cost` (vehicle_id, stockpile_id, currency_id, exchange_rate, price, price_converted, entry_by, entry_date) VALUES ("
            . "{$vehicleId}, {$stockpileId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $unloadingCostId = $myDatabase->insert_id;

            $return_value = '|OK|Vehicle has successfully inserted.|UNLOADING~' . $unloadingCostId . '|';
        } else {
            $return_value = '|FAIL|Insert vehicle failed.||';
        }
    } else {
        if ($boolVehicleExists) {
            $return_value = '|FAIL|Vehicle already exists.||';
        } elseif (!$boolInsertVehicle) {
            $return_value = '|FAIL|Insert vehicle failed.||';
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_freight_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_freight_data">

    $return_value = '';
    $boolInsertFreight = false;
    $boolFreightExists = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $paymentNotes = $myDatabase->real_escape_string($_POST['paymentNotes']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    $freightCode = $myDatabase->real_escape_string($_POST['freightCode']);
    $freightSupplier = $myDatabase->real_escape_string($_POST['freightSupplier']);
    $freightAddress = $myDatabase->real_escape_string($_POST['freightAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>


    if ($freightId == 'INSERT') {
        if ($freightCode != '' && $freightSupplier != '' && $vendorId != '' && $freightAddress != '' && $npwp != '' &&
            $ppn != '' && $pph != '') {
            $sql = "SELECT * FROM `freight` WHERE UPPER(freight_supplier) = UPPER('{$freightSupplier}') AND UPPER(freight_code) = UPPER('{$freightCode}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result !== false && $result->num_rows > 0) {
                $boolFreightExists = true;
            } elseif ($result !== false && $result->num_rows == 0) {
                $ppnValue = 0;
                $pphValue = 0;

                $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
                $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
                if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                    $rowPPN = $resultPPN->fetch_object();
                    $ppnValue = $rowPPN->tax_value;
                }

                $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
                $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                    $rowPPh = $resultPPh->fetch_object();
                    $pphValue = $rowPPh->tax_value;
                }

                $sql = "INSERT INTO `freight` (freight_code, freight_supplier, freight_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                    . "UPPER('{$freightCode}'), '{$freightSupplier}', '{$freightAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false) {
                    $freightId = $myDatabase->insert_id;
                    $boolInsertFreight = true;
                }
            }
        } else {
            $boolInsertFreight = false;
        }
    } else {
        $boolInsertFreight = true;
    }

    if ($freightId != '' && $currencyId != '' && $price != '' && $vendorId != '' &&
        $boolInsertFreight && !$boolFreightExists) {

        if ($exchangeRate == '') {
            $exchangeRate = 1;
        }

        $priceConverted = $price * $exchangeRate;

        $sql = "INSERT INTO `freight_cost` (freight_id, stockpile_id, vendor_id, currency_id, exchange_rate, price, price_converted, payment_notes, remarks, entry_by, entry_date) VALUES ("
            . "{$freightId}, {$stockpileId}, {$vendorId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, '{$paymentNotes}', '{$remarks}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $freightCostId = $myDatabase->insert_id;

            $return_value = '|OK|Freight Supplier has successfully inserted.|FREIGHT~' . $freightCostId . '|';
        } else {
            $return_value = '|FAIL|Insert freight supplier failed.||';
        }
    } else {
        if ($boolFreightExists) {
            $return_value = '|FAIL|Freight supplier already exists.||';
        } elseif (!$boolInsertFreight) {
            $return_value = '|FAIL|Insert freight supplier failed.||';
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_vendor_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_vendor_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId0']);
    $vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    $vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>

    if ($vendorId == 'INSERT') {
        if ($vendorCode != '' && $vendorName != '' && $vendorAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$vendorCode}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result !== false && $result->num_rows == 0) {
                $ppnValue = 0;
                $pphValue = 0;

                $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
                $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
                if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                    $rowPPN = $resultPPN->fetch_object();
                    $ppnValue = $rowPPN->tax_value;
                }

                $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
                $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                    $rowPPh = $resultPPh->fetch_object();
                    $pphValue = $rowPPh->tax_value;
                }

                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                    . "UPPER('{$vendorCode}'), '{$vendorName}', '{$vendorAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false) {
                    $vendorId = $myDatabase->insert_id;

                    $return_value = '|OK|Vendor has successfully inserted.|VENDOR~' . $vendorId . '|';
                } else {
                    $return_value = '|FAIL|Insert vendor failed.||';
                }
            } else {
                $return_value = '|FAIL|Vendor already exists.||';
            }
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    } elseif ($vendorId != '') {
        $return_value = '|OK|Vendor has successfully inserted.|VENDOR~' . $vendorId . '|';
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_sales_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_sales_data">

    $return_value = '';
//    $boolInsertCustomer = false;
//    $boolCustomerExists = false;
    $boolExists = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    $customerName = $myDatabase->real_escape_string($_POST['customerName']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    $loading = $myDatabase->real_escape_string($_POST['portLoading']);
    $destination = $myDatabase->real_escape_string($_POST['destination']);
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $salesNo = $myDatabase->real_escape_string($_POST['salesNo']);
    $totalShipment = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalShipment']));
    // </editor-fold>

    $sql = "SELECT * FROM `sales` WHERE company_id = {$_SESSION['companyId']} AND sales_no = '{$salesNo}'";
    $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    if ($resultSales->num_rows > 0) {
        $boolExists = true;
    }

    if ($customerId != '' && $currencyId != '' && $price != '' && $salesNo != '' && $quantity != '' && $totalShipment != '' &&
        !$boolExists) {

        if ($exchangeRate == '') {
            $exchangeRate = 1;
        }

        $priceConverted = $price * $exchangeRate;

        // get next slip no
//        $checkShipmentNo = $shipmentCode .'-'. $currentYear;
//        $sql = "SELECT LPAD(COUNT(1) + 1, 3, '0') AS next_id FROM shipment WHERE shipment_no LIKE '{$checkShipmentNo}%'";
//        $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//        $rowShipmentNo = $resultShipment->fetch_object();
//        $nextShipmentNo = $rowShipmentNo->next_id;
//        $shipmentNo = $checkShipmentNo .'-'. $nextShipmentNo;

        $sql = "INSERT INTO `sales` (sales_no, sales_date, sales_type, customer_id, stockpile_id, destination, notes, "
            . "currency_id, exchange_rate, price, price_converted, quantity, total_shipment, entry_by, entry_date) VALUES ("
            . "'{$salesNo}', STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), 2, {$customerId}, {$loading}, '{$destination}', "
            . "'{$notes}', {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, {$quantity}, {$totalShipment}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $salesId = $myDatabase->insert_id;

            for ($i = 1; $i <= $totalShipment; $i++) {
                $shipmentCode = $salesNo . '-' . $i;

                $sql = "INSERT INTO `shipment` (shipment_code, sales_id, entry_by, entry_date) VALUES ("
                    . "'{$shipmentCode}', {$salesId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }

            $return_value = '|OK|Sales Agreement has successfully inserted.|SALES~' . $salesId . '|';
        } else {
            $return_value = '|FAIL|Insert sales failed.||';
        }
    } else {
        if ($boolExists) {
            $return_value = '|FAIL|Sales No. already exists.||';
//        } elseif(!$boolInsertCustomer) {
//            $return_value = '|FAIL|Insert customer failed.||';
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_customer_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_customer_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $customerName = $myDatabase->real_escape_string($_POST['customerName']);
    $customerAddress = $myDatabase->real_escape_string($_POST['customerAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>

    if ($customerName != '' && $customerAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
        $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$customerName}')";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;

            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }

            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }

            $sql = "INSERT INTO `customer` (customer_name, customer_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                . "'{$customerName}', '{$customerAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $customerId = $myDatabase->insert_id;

                $return_value = '|OK|Buyer has successfully inserted.|CUSTOMER~' . $customerId . '|';
            } else {
                $return_value = '|FAIL|Insert buyer failed.||';
            }
        } else {
            $return_value = '|FAIL|Buyer already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_labor_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_labor_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $laborName = $myDatabase->real_escape_string($_POST['laborName']);
    $laborAddress = $myDatabase->real_escape_string($_POST['laborAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>

    if ($laborName != '' && $laborAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
        $sql = "SELECT * FROM `labor` WHERE UPPER(labor_name) = UPPER('{$laborName}')";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;

            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }

            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }

            $sql = "INSERT INTO `labor` (labor_name, labor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                . "'{$laborName}', '{$laborAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $laborId = $myDatabase->insert_id;

                $return_value = '|OK|Labor Workers has successfully inserted.|LABOR~' . $laborId . '|';
            } else {
                $return_value = '|FAIL|Insert labor workers failed.||';
            }
        } else {
            $return_value = '|FAIL|Labor Workers already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_supplier_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_supplier_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    $vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>

    if ($vendorCode != '' && $vendorName != '' && $vendorAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
        $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$vendorCode}')";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;

            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }

            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }

            $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                . "UPPER('{$vendorCode}'), '{$vendorName}', '{$vendorAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $vendorId = $myDatabase->insert_id;

                $return_value = '|OK|Supplier has successfully inserted.|SUPPLIER~' . $vendorId . '|';
            } else {
                $return_value = '|FAIL|Insert vendor failed.||';
            }
        } else {
            $return_value = '|FAIL|Supplier already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_transaction_data') {
    // <editor-fold defaultstate="collapsed" desc="update_transaction_data">

    $return_value = '';
    $boolQuantity = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $transactionId = $myDatabase->real_escape_string($_POST['transactionId']);
    $transactionId2 = $transactionId;
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
    $transactionDate = $myDatabase->real_escape_string($_POST['transactionDate']);
    $loadingDate = $myDatabase->real_escape_string($_POST['loadingDate']);
    $transactionDate2 = $myDatabase->real_escape_string($_POST['transactionDate2']);
    $vehicleNo = $myDatabase->real_escape_string($_POST['vehicleNo']);
    $vehicleNo2 = $myDatabase->real_escape_string($_POST['vehicleNo2']);
    $unloadingCostId = $myDatabase->real_escape_string($_POST['unloadingCostId']);
    $unloadingDate = $myDatabase->real_escape_string($_POST['unloadingDate']);
    $freightCostId = $myDatabase->real_escape_string($_POST['freightCostId']);
    $handlingCostId = $myDatabase->real_escape_string($_POST['handlingCostId']);
    $permitNo = $myDatabase->real_escape_string($_POST['permitNo']);
    $transactionType = $myDatabase->real_escape_string($_POST['transactionType']);
    $sendWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight']));
    $sendWeight2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight2']));
    $blWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['blWeight']));
    $brutoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['brutoWeight']));
    $tarraWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['tarraWeight']));
    $nettoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['nettoWeight']));
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $notes2 = $myDatabase->real_escape_string($_POST['notes2']);
    $driver = $myDatabase->real_escape_string($_POST['driver']);
    $block = $myDatabase->real_escape_string($_POST['block']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $supplierId = $myDatabase->real_escape_string($_POST['supplierId']);
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $isTaxable = $myDatabase->real_escape_string($_POST['isTaxable']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $ggl = $myDatabase->real_escape_string($_POST['ggl']);
    $rsb = $myDatabase->real_escape_string($_POST['rsb']);
    $stockpileCode = '';
    $unitPrice = 0;
    $balanceQuantity = 0;
    $contractId = 0;
    $custTaxId = 'NULL';
    $curahTaxId = 'NULL';
    $ucTaxId = 0;
    $fcTaxId = 0;
    // </editor-fold>

    //insert to log table
    /*if($transactionId == 257942){
	$sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode FROM `transaction` t WHERE t.transaction_id = {$transactionId}";
	$resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
            if($resultR !== false && $resultR->num_rows == 1) {
                $rowR = $resultR->fetch_object();
				//$R = "R";
				//$U = "-U";

				//$slipU = $rowR->slip_no .''. $U;
				$checkSlipNo = $rowR->stockpileCode .'-'. $currentYear;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				$slipR = $rowR->slip_no .'-R';
				$slipU = $rowR->slip_no .'-U';
				$dateR = $date->format('Y-m-d');
				$sendW = $rowR->send_weight * -1;
				$brutoW = $rowR->bruto_weight * -1;
				$tarraW = $rowR->tarra_weight * -1;
				$nettoW = $rowR->netto_weight * -1;
				$handlingW = $rowR->handling_quantity * -1;
				$freightW = $rowR->freight_quantity * -1;
				$quantityW = $rowR->quantity * -1;
				$shrinkW = $rowR->shrink * -1;
				$unloadingP = $rowR->unloading_price * -1;

				if($rowR->shipment_id == ''){
					$shipment_id = 'NULL';
				}else{
					$shipment_id = $rowR->shipment_id;
				}
				if($rowR->labor_id == ''){
					$labor_id = 'NULL';
				}else{
					$labor_id = $rowR->labor_id;
				}
				if($rowR->unloading_cost_id == ''){
					$unloading_cost_id = 'NULL';
				}else{
					$unloading_cost_id = $rowR->unloading_cost_id;
				}
				if($rowR->handling_cost_id == ''){
					$handling_cost_id = 'NULL';
				}else{
					$handling_cost_id = $rowR->handling_cost_id;
				}
				if($rowR->freight_cost_id == ''){
					$freight_cost_id = 'NULL';
				}else{
					$freight_cost_id = $rowR->freight_cost_id;
				}
				if($rowR->permit_no == ''){
					$permit_no = 'NULL';
				}else{
					$permit_no = $rowR->permit_no;
				}
				if($rowR->vendor_id == ''){
					$vendor_id = 'NULL';
				}else{
					$vendor_id = $rowR->vendor_id;
				}
				if($rowR->cust_tax_id == ''){
					$cust_tax_id = 'NULL';
				}else{
					$cust_tax_id = $rowR->cust_tax_id;
				}
				if($rowR->curah_tax_id == ''){
					$curah_tax_id = 'NULL';
				}else{
					$curah_tax_id = $rowR->curah_tax_id;
				}
				if($rowR->uc_tax_id == ''){
					$uc_tax_id = 'NULL';
				}else{
					$uc_tax_id = $rowR->uc_tax_id;
				}
				if($rowR->fc_tax_id == ''){
					$fc_tax_id = 'NULL';
				}else{
					$fc_tax_id = $rowR->fc_tax_id;
				}
				if($rowR->block == ''){
					$block = 'NULL';
				}else{
					$block = $rowR->block;
				}
				//if($rowR->payment_id == ''){
					$payment_id = 'NULL';
				//}else{
					//$payment_id = $rowR->payment_id;
				//}
				//if($rowR->fc_payment_id == ''){
					$fc_payment_id = 'NULL';
				//}else{
					//$fc_payment_id = $rowR->fc_payment_id;
				//}
				//if($rowR->hc_payment_id == ''){
					$hc_payment_id = 'NULL';
				//}else{
					//$hc_payment_id = $rowR->hc_payment_id;
				//}
				//if($rowR->uc_payment_id == ''){
					$uc_payment_id = 'NULL';
				//}else{
					//$uc_payment_id = $rowR->uc_payment_id;
				//}
				if($rowR->notes == ''){
					$notes = 'NULL';
				}else{
					$notes = $rowR->notes;
				}
				$delivery_status = 0;
			}

	$sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},{$rowR->stockpile_contract_id},{$shipment_id},'{$dateR}','{$dateR}','{$rowR->vehicle_no}',{$labor_id},{$unloading_cost_id},'{$dateR}',{$handling_cost_id},{$freight_cost_id},'{$permit_no}',{$rowR->transaction_type},{$vendor_id},'{$sendW}','{$brutoW}','{$tarraW}','{$nettoW}','{$notes}','{$rowR->driver}','{$handlingW}','{$freightW}','{$quantityW}','{$shrinkW}','{$rowR->freight_price}','{$unloadingP}','{$rowR->unit_price}','{$rowR->inventory_value}',{$cust_tax_id},{$curah_tax_id},{$uc_tax_id},{$fc_tax_id},{$delivery_status},'{$block}',{$payment_id},{$fc_payment_id},{$hc_payment_id},{$uc_payment_id},{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
       if($resultLog !== false) {
    //echo $sqlLog;
	$transactionId = $myDatabase->insert_id;

	insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
	   }

	}*/

    if ($isTaxable == '') {
        $isTaxable = 0;
    }

    if ($ppn == '') {
        $ppn = 0;
    }

    if ($pph == '') {
        $pph = 0;
    }

    if ($transactionType == 1) {
        //echo 'test2';
        //$transactionId2 = 0;
        // <editor-fold defaultstate="collapsed" desc="IN">
        if ($stockpileId != '' && $stockpileContractId != '' && $loadingDate != '' && $vehicleNo != '' && $unloadingCostId != '' &&
            $unloadingDate != '' && $freightCostId != '' && $handlingCostId != '' && $permitNo != '' && $transactionType != '' && $sendWeight != '' &&
            $brutoWeight != '' && $tarraWeight != '' && $driver != '' && $vendorId != '' && $laborId != '') {

            if ($supplierId == '') {
                $supplierId = "NULL";
            }

            // check balance contract & get unit price
            $sql = "SELECT s.stockpile_code, con.price_converted, sc.contract_id, con.contract_type, 
                        ((SELECT COALESCE(SUM(quantity), 0) FROM stockpile_contract WHERE contract_id = sc.contract_id
                        ) - con.adjustment) - (
                            SELECT COALESCE(SUM(t.send_weight), 0) FROM `transaction` t LEFT JOIN stockpile_contract sc ON t.stockpile_contract_id = sc.stockpile_contract_id
                            WHERE sc.contract_id =  con.contract_id
                        ) AS balance, s.freight_weight_rule, s.curah_weight_rule, v.pph_tax_id
                    FROM stockpile_contract sc
                    INNER JOIN stockpile s
                        ON s.stockpile_id = sc.stockpile_id
                    INNER JOIN contract con
                        ON con.contract_id = sc.contract_id
                    INNER JOIN vendor v
                        ON v.vendor_id = con.vendor_id
                    WHERE stockpile_contract_id = {$stockpileContractId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $contractId = $rowStockpile->contract_id;
                $unitPrice = $rowStockpile->price_converted;
                $contractType = $rowStockpile->contract_type;
                $freightWeightRule = $rowStockpile->freight_weight_rule;
                $curahWeightRule = $rowStockpile->curah_weight_rule;
                if ($contractType == 'P') {
                    $balanceQuantity = $rowStockpile->balance;
                } elseif ($contractType == 'C') {
                    $balanceQuantity = $sendWeight;
                    if ($rowStockpile->pph_tax_id != 0 && $rowStockpile->pph_tax_id != '') {
                        $curahTaxId = $rowStockpile->pph_tax_id;
                    }
                }
            }

            // get netto weight
            //$nettoWeight = $brutoWeight - $tarraWeight;

            // get freight weight
            $sqlfc = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
            $resultFreight = $myDatabase->query($sqlfc, MYSQLI_STORE_RESULT);
            if ($resultFreight !== false && $resultFreight->num_rows == 1) {
                $rowFreight = $resultFreight->fetch_object();
                $freightRule = $rowFreight->freight_rule;


            }

            // get freight weight
            if ($freightWeightRule == 0 && $freightRule == 1) {
                $freightQuantity = $sendWeight;
            } elseif ($freightWeightRule == 0 && $freightRule == 0) {
                if ($nettoWeight < $sendWeight) {
                    $freightQuantity = $nettoWeight;
                } elseif ($nettoWeight > $sendWeight) {
                    $freightQuantity = $sendWeight;
                } else {
                    $freightQuantity = $sendWeight;
                }
            } elseif ($freightWeightRule == 1) {
                $freightQuantity = $sendWeight;
            } elseif ($freightWeightRule == 2) {
                $freightQuantity = $nettoWeight;
            } else {
                $freightQuantity = $sendWeight;
            }

            // get shrink condition
//            $quantity = $nettoWeight;
//            $sql = "SELECT * FROM `condition` WHERE category_id = 1 AND contract_id = {$contractId}";
//            $resultCondition = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//            if($resultCondition !== false && $resultCondition->num_rows == 1) {
//                $rowCondition = $resultCondition->fetch_object();
//                $quantity = ${$rowCondition->rule};
//            }
            if ($sendWeight > $balanceQuantity && $balanceQuantity > 0) {
                $balanceQuantity = $sendWeight;

            }

            if ($sendWeight <= $balanceQuantity || $balanceQuantity == 0) {
                // get shrink
                $shrink = 0;
                if ($contractType == 'P') {
                    if ($nettoWeight < $sendWeight) {
                        $quantity = $nettoWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } elseif ($nettoWeight > $sendWeight) {
                        $quantity = $sendWeight;
                        $shrink = 0;
                    } else {
                        $quantity = $sendWeight;
                    }
                } elseif ($contractType == 'C') {
                    if ($curahWeightRule == 0) {
                        if ($nettoWeight < $sendWeight) {
                            $quantity = $nettoWeight;
                            $shrink = $sendWeight - $nettoWeight;
                        } elseif ($nettoWeight > $sendWeight) {
                            $quantity = $sendWeight;
                            $shrink = $sendWeight - $nettoWeight;
                        } else {
                            $quantity = $sendWeight;
                        }
                    } elseif ($curahWeightRule == 1) {
                        $quantity = $sendWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } elseif ($curahWeightRule == 2) {
                        $quantity = $nettoWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } else {
                        $quantity = $sendWeight;
                    }
                }
                /*if($transactionId2 == 257942){
                $checkSlipNo = $rowR->stockpileCode .'-'. $currentYear;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				}*/
                // get freight cost
                if ($freightCostId == 'NONE') {
                    $freightCostId = 'NULL';
                    $freightPrice = 0;
                    $freightQuantity2 = 0;
                } else {
                    $sql = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                    $resultFreight = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultFreight !== false && $resultFreight->num_rows == 1) {
                        $rowFreight = $resultFreight->fetch_object();
                        $freightPrice = $rowFreight->price_converted;
                        if ($rowFreight->freight_rule == 1) {
                            $freightQuantity2 = $sendWeight;
                        } else {
                            $freightQuantity2 = $nettoWeight;
                        }
                        if ($rowFreight->pph_tax_id != 0 && $rowFreight->pph_tax_id != '') {
                            $fcTaxId = $rowFreight->pph_tax_id;
                        } else {
                            $fcTaxId = 0;
                        }
                    }
                }

                // get handling cost
                if ($handlingCostId == 'NONE') {
                    $handlingCostId = 'NULL';
                    $handlingQuantity = 0;
                    $handlingPrice = 0;
                } else {
                    $sql = "SELECT vhc.vendor_handling_id, vhc.price_converted, vh.pph_tax_id, vh.vendor_handling_rule
                            FROM `vendor_handling_cost` vhc 
                            INNER JOIN vendor_handling vh
                                ON vh.vendor_handling_id = vhc.vendor_handling_id
                            WHERE vhc.handling_cost_id = {$handlingCostId}";
                    $resultHandling = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultHandling !== false && $resultHandling->num_rows == 1) {
                        $rowHandling = $resultHandling->fetch_object();
                        $handlingPrice = $rowHandling->price_converted;
                        if ($rowHandling->vendor_handling_rule == 1) {
                            $handlingQuantity = $sendWeight;
                        } else {
                            $handlingQuantity = $nettoWeight;
                        }

                    }
                }

                // get unloading cost
                if ($unloadingCostId == 'NONE') {
                    $unloadingCostId = 'NULL';
                    $unloadingPrice = 0;
                } else {
                    $sql = "SELECT uc.price_converted 
                            FROM `unloading_cost` uc 
                            WHERE uc.unloading_cost_id = {$unloadingCostId}";
                    $resultUnloading = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultUnloading !== false && $resultUnloading->num_rows == 1) {
                        $rowUnloading = $resultUnloading->fetch_object();
                        $unloadingPrice = $rowUnloading->price_converted;
                    }
                }

                if ($laborId == 'NONE') {
                    $laborId = 'NULL';
                } else {
                    $sql = "SELECT l.pph_tax_id
                            FROM `labor` l
                            WHERE l.labor_id = {$laborId}";
                    $resultLabor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultLabor !== false && $resultLabor->num_rows == 1) {
                        $rowLabor = $resultLabor->fetch_object();
                        if ($rowLabor->pph_tax_id != 0 && $rowLabor->pph_tax_id != '') {
                            $ucTaxId = $rowLabor->pph_tax_id;
                        }
                    }
                }

                $syncStatus = 0;
                $sql = "SELECT sync_status FROM `transaction` WHERE transaction_id = {$transactionId}";
                $resultTrans = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if ($resultTrans !== false && $resultTrans->num_rows == 1) {
                    $rowTrans = $resultTrans->fetch_object();
                    if ($rowTrans->sync_status == 1) {
                        $syncStatus = 2;
                    }
                }

                // get inventory value
                $inventoryValue = ($freightQuantity * $freightPrice) + $unloadingPrice + ($quantity * $unitPrice) + ($handlingQuantity * $handlingPrice);

                /*if($transactionId2 == 257942){
                // insert into transaction
				$sql = "INSERT INTO `transaction` (slip_no, slip_retur, stockpile_contract_id, transaction_date, loading_date, vehicle_no, labor_id, unloading_cost_id, "
                        . "unloading_date, freight_cost_id, handling_cost_id, permit_no, transaction_type, vendor_id, send_weight, bruto_weight, tarra_weight, "
                        . "netto_weight, notes, driver, freight_quantity, handling_quantity, quantity, shrink, freight_price, unloading_price, unit_price, "
                        . "inventory_value, block, curah_tax_id, uc_tax_id, fc_tax_id, entry_by, entry_date, modify_by, modify_date) "
                        . "VALUES ('{$slipNo}', '{$slipU}',{$stockpileContractId}, '{$dateR}', '{$dateR}', "
                        . "'{$vehicleNo}', {$laborId}, {$unloadingCostId}, '{$dateR}', {$freightCostId}, {$handlingCostId}, '{$permitNo}', "
                        . "{$transactionType}, {$supplierId}, {$sendWeight}, {$brutoWeight}, {$tarraWeight}, {$nettoWeight}, '{$notes}', "
                        . "'{$driver}', {$freightQuantity}, {$handlingQuantity}, {$quantity}, {$shrink}, {$freightPrice}, {$unloadingPrice}, {$unitPrice}, {$inventoryValue}, '{$block}', "
                        . "{$curahTaxId}, {$ucTaxId}, {$fcTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				}else{*/
                $sql = "UPDATE `transaction` SET "
                    . "stockpile_contract_id = {$stockpileContractId}, "
                    . "loading_date = STR_TO_DATE('{$loadingDate}', '%d/%m/%Y'), "
                    . "vehicle_no = '{$vehicleNo}', "
                    . "labor_id = {$laborId}, "
                    . "unloading_cost_id = {$unloadingCostId}, "
                    . "transaction_date = STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), "
                    . "unloading_date = STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), "
                    . "freight_cost_id = {$freightCostId}, "
                    . "handling_cost_id = {$handlingCostId}, "
                    . "permit_no = '{$permitNo}', "
                    . "vendor_id = {$supplierId}, "
                    . "send_weight = {$sendWeight}, "
                    . "bruto_weight = {$brutoWeight}, "
                    . "tarra_weight = {$tarraWeight}, "
                    . "netto_weight = {$nettoWeight}, "
                    . "notes = '{$notes}', "
                    . "driver = '{$driver}', "
                    . "freight_quantity = {$freightQuantity}, "
                    . "handling_quantity = {$handlingQuantity}, "
                    . "quantity = {$quantity}, "
                    . "shrink = {$shrink}, "
                    //. "susut_qty = {$qtySusut}, "
                    //. "susut_price = {$hargaSusut}, "
                    . "freight_price = {$freightPrice}, "
                    . "handling_price = {$handlingPrice}, "
                    . "unloading_price = {$unloadingPrice}, "
                    . "unit_price = {$unitPrice}, "
                    . "inventory_value = {$inventoryValue}, "
                    . "fc_tax_id = {$fcTaxId}, "
                    . "uc_tax_id = {$ucTaxId}, "
                    . "block = '{$block}', "
                    . "ggl = {$ggl}, "
                    . "rsb = {$rsb}, "
                    . "sync_status = {$syncStatus}, "
                    . "modify_by = {$_SESSION['userId']}, "
                    . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                    . "WHERE transaction_id = {$transactionId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                //}
                if ($result !== false) {
                    $return_value = '|OK|Transaction has updated successfully.|';

                    // if curah update contract and stockpile_contract quantity
                    if ($contractType == 'C') {
                        /* $sql = "UPDATE contract SET quantity = {$quantity} WHERE contract_id = {$contractId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                        $sql = "UPDATE stockpile_contract SET quantity = {$quantity} WHERE stockpile_contract_id = {$stockpileContractId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/
                    }

                    $sql = "CALL sp_shrink_weight({$transactionId})";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.' . $sql . '|';
                }
            } else {
                $return_value = '|FAIL|The quantity exceed the balance of the contract.|';
            }
        } else {
            $return_value = '|FAIL|Please fill the required fields.|';
        }
        // </editor-fold>

    } elseif ($transactionType == 2) {
        // <editor-fold defaultstate="collapsed" desc="OUT">
        if ($stockpileId != '' && $salesId != '' && $shipmentId != '' && $transactionDate2 != '' && $vehicleNo2 != '' && $sendWeight2 != '' && $blWeight != '') {

            $sql = "UPDATE `transaction` SET "
                . "vehicle_no = '{$vehicleNo2}', "
                . "transaction_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                . "unloading_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                . "notes = '{$notes2}', "
                . "modify_by = {$_SESSION['userId']}, "
                . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                . "WHERE transaction_id = {$transactionId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result !== false) {

                $return_value = '|OK|Transaction has updated successfully.|';

                insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
            } else {
                $return_value = '|FAIL|Failed insert transaction.' . $sql . '|';
            }
            // check stockpile detail & transaction balance
            /*$sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode FROM `transaction` t WHERE t.transaction_id = {$transactionId}";
	$resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
            if($resultR !== false && $resultR->num_rows == 1) {
                $rowR = $resultR->fetch_object();
				//$R = "R";
				//$U = "-U";
                //$sql = "UPDATE `transaction` SET shipment_id = NULL WHERE transaction_id = {$transactionId}";
                //$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				//$slipU = $rowR->slip_no .''. $U;
				$checkSlipNo = $rowR->stockpileCode .'-'. $currentYear2;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				$slipR = $rowR->slip_no .'-R';
				$slipU = $rowR->slip_no .'-U';
				$dateR = $date->format('Y-m-d');
				$sendW = $rowR->send_weight * -1;
				$quantityW = $rowR->quantity * -1;
				$shrinkW = $rowR->shrink * -1;
				//$unloadingP = $rowR->unloading_price * -1;
				if($rowR->notes == '')
				$notes = 'NULL';
			}

	$sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},NULL,{$shipmentId},'{$rowR->transaction_date}',NULL,'{$rowR->vehicle_no}',NULL,NULL,'{$rowR->transaction_date}',NULL,NULL,NULL,{$rowR->transaction_type},NULL,'{$sendW}',0,0,0,'{$notes}',NULL,0,0,'{$quantityW}','{$shrinkW}',0,0,0,0,0,NULL,NULL,NULL,0,NULL,NULL,NULL,NULL,NULL,{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
       if($resultLog !== false) {
    //echo $sqlLog;
	$transactionId = $myDatabase->insert_id;

	insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

	// delete from delivery and update delivery_status in transaction
                    $sql = "SELECT d.*, t.sync_status
                            FROM delivery d
                            INNER JOIN `transaction` t
                                ON t.transaction_id = d.transaction_id
                            WHERE d.shipment_id = {$shipmentId}";
                    $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultShipment !== false && $resultShipment->num_rows > 0) {
                        while($rowShipment = $resultShipment->fetch_object()) {
                            $syncStatus = 0;
                            if($rowShipment->sync_status == 1) {
                                $syncStatus = 2;
                            }

                            if($rowShipment->percent_taken == 100) {
                                $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } else {
                                $sqlOther = "SELECT * FROM delivery WHERE shipment_id <> {$shipmentId} AND transaction_id = {$rowShipment->transaction_id}";
                                $resultOther = $myDatabase->query($sqlOther, MYSQLI_STORE_RESULT);

                                if($resultOther->num_rows > 0) {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 2, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                } else {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                }
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            }
                        }

                        $sqlDelete = "DELETE FROM delivery WHERE shipment_id = {$shipmentId}";
                        $resultDelete = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

                    }
					//$sql = "UPDATE `transaction` SET shipment_id = NULL WHERE transaction_id = {$transactionId}";
						//$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
	   }*/

            // echo $sqlLog;
            //insert new delivery
            /*$sql = "SELECT s.stockpile_code, s.stockpile_name,
                        (
                            SELECT COALESCE(SUM(t.quantity), 0) FROM `transaction` t
                            INNER JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                            WHERE sc.stockpile_id = s.stockpile_id
                            AND t.transaction_type = 1
                        ) AS available_balance,
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction`
                            WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                            AND transaction_type = 2
                        ) AS delivered_balance
                    FROM stockpile s
                    WHERE s.stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $stockpileName = $rowStockpile->stockpile_name;
                $availableBalance = $rowStockpile->available_balance;
                $deliveredBalance = $rowStockpile->delivered_balance;
            }

            // get sales detail
            $sql = "SELECT sl.quantity, sl.price_converted, sl.currency_id, sl.exchange_rate, sl.price, cust.pph_tax_id
                    FROM sales sl
                    INNER JOIN customer cust
                        ON cust.customer_id = sl.customer_id
                    WHERE sl.sales_id = {$salesId}";
            $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSales !== false && $resultSales->num_rows == 1) {
                $rowSales = $resultSales->fetch_object();
                $salesBalance = $rowSales->quantity;
                $salesUnitPrice = $rowSales->price_converted;
                $salesCurrencyId = $rowSales->currency_id;
                $salesExchangeRate = $rowSales->exchange_rate;
                $salesOriginalUnitPrice = $rowSales->price;
                $custTaxId = $rowSales->pph_tax_id;
            }

            // get next slip no

					$checkSlipNo = $stockpileCode .'-'. $currentYear3;

            //$checkSlipNo = $stockpileCode /*.'-'. $currentYear*///;
//            $sql = "SELECT LPAD(COUNT(1) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ";
//            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            /*$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSlip->num_rows == 0) {
                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }
            $rowSlipNo = $resultSlip->fetch_object();
            $nextSlipNo = $rowSlipNo->next_id;
            $slipNo = $checkSlipNo .'-'. $nextSlipNo;


//            if($sendWeight2 <= $availableBalance && $blWeight <= ($salesBalance - $deliveredBalance)) {
            if($sendWeight2 <= $availableBalance) {
                $shrink = $sendWeight2 - $blWeight;

                // insert into transaction
                $sql = "INSERT INTO `transaction` (slip_no, slip_retur, shipment_id, transaction_date,unloading_date, vehicle_no, transaction_type, "
                        . "send_weight, notes, quantity, shrink, cust_tax_id, entry_by, entry_date) "
                        . "VALUES ('{$slipNo}', '{$slipU}', {$shipmentId}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), '{$vehicleNo2}', "
                        . "{$transactionType}, {$sendWeight2}, '{$notes2}', {$blWeight}, {$shrink}, {$custTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $transactionId = $myDatabase->insert_id;

                    $return_value = '|OK|Transaction has inserted successfully.|';

                    // insert into delivery
                    $sql = "SELECT t.*
                            FROM transaction t
                            WHERE t.stockpile_contract_id IN (
                                SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                            ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                              ORDER BY t.unloading_date ASC, t.slip_no ASC";
                    $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $totalInventoryValue = 0;
                    if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                        $balanceLeft = $sendWeight2;
                        while($rowDelivery = $resultDelivery->fetch_object()) {
                            $syncStatus = 0;
                            if($rowDelivery->sync_status == 1) {
                                $syncStatus = 2;
                            }

                            if($balanceLeft > 0) {
                                if($rowDelivery->delivery_status == 0) {
                                    if($balanceLeft >= $rowDelivery->quantity) {
                                        $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                        $quantityTaken = $rowDelivery->quantity;
                                        $percentTaken = 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < $rowDelivery->quantity) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } elseif($rowDelivery->delivery_status == 2) {
                                    $totalTaken = 0;
                                    $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                    $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                        $rowTaken = $resultTaken->fetch_object();
                                        $totalTaken = $rowTaken->total_taken;
                                    }

                                    if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                        $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                        $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                }

                                $deliveryValue = $quantityTaken * $salesUnitPrice;
                                $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                $percentTaken = $percentTaken * 100;

                                $sql = "INSERT INTO `delivery` (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                        . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                        . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus}, sync_status = {$syncStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    }

                    //$updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                    $updateInventoryValue = $totalInventoryValue;

                    $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    // update shipment
                    $cogsAmount = $updateInventoryValue;
                    if($salesCurrencyId != 1) {
                        $cogsAmount = $updateInventoryValue / $salesExchangeRate;
                    }
                    $invoiceAmount = $blWeight * $salesOriginalUnitPrice;
                    $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                            . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$blWeight}, shipment_status = 1 "
                            . "WHERE shipment_id = {$shipmentId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    // update sales
                    $boolUpdateSales = false;
                    if($blWeight == ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 1;
                        $boolUpdateSales = true;
                    } elseif($blWeight < ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 2;
                        $boolUpdateSales = true;
                    }

                    if($boolUpdateSales) {
                        $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }

                     insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                    unset($_SESSION['transaction']);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.|';
                }
            } else {
                if($sendWeight2 > $availableBalance) {
                    $return_value = '|FAIL|Available quantity in '. $stockpileName .' is '. number_format($availableBalance, 4, '.', ',') .' Kg.|';
                } elseif($sendWeight2 > ($salesBalance - $deliveredBalance)) {
                    $return_value = '|FAIL|Sales agreement balance is '. ($salesBalance - $deliveredBalance) .' Kg.|';
                }
            }*/
            /*  $sql = "SELECT s.stockpile_code, s.stockpile_name,
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction`
                            WHERE stockpile_id = s.stockpile_id
                            AND transaction_type = 1
                        ) AS available_balance,
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction`
                            WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                            AND transaction_type = 2
                        ) AS delivered_balance
                    FROM stockpile s
                    WHERE s.stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $stockpileName = $rowStockpile->stockpile_name;
                $availableBalance = $rowStockpile->available_balance;
                $deliveredBalance = $rowStockpile->delivered_balance;
            }

            // get sales detail
            $sql = "SELECT quantity, price_converted, currency_id, exchange_rate, price FROM sales WHERE sales_id = {$salesId}";
            $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSales !== false && $resultSales->num_rows == 1) {
                $rowSales = $resultSales->fetch_object();
                $salesBalance = $rowSales->quantity;
                $salesUnitPrice = $rowSales->price_converted;
                $salesCurrencyId = $rowSales->currency_id;
                $salesExchangeRate = $rowSales->exchange_rate;
                $salesOriginalUnitPrice = $rowSales->price;
            }

            if($sendWeight2 != 0 && $blWeight != 0) {

                $shrink = $sendWeight2 - $blWeight;

                $syncStatus = 0;
                $sql = "SELECT sync_status FROM `transaction` WHERE transaction_id = {$transactionId}";
                $resultTrans = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultTrans !== false && $resultTrans->num_rows == 1) {
                    $rowTrans = $resultTrans->fetch_object();
                    if($rowTrans->sync_status == 1) {
                        $syncStatus = 2;
                    }
                }

                // insert into transaction
                $sql = "UPDATE `transaction` SET "
                        . "shipment_id = {$shipmentId}, "
                        . "vehicle_no = '{$vehicleNo2}', "
                        . "send_weight = {$sendWeight2}, "
						. "notes = '{$notes2}', "
                        . "quantity = {$blWeight}, "
                        . "shrink = {$shrink}, "
                        . "sync_status = {$syncStatus}, "
                        . "modify_by = {$_SESSION['userId']}, "
                        . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE transaction_id = {$transactionId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $transactionId = $myDatabase->insert_id;

                    $return_value = '|OK|Transaction has updated successfully.|';

                    // delete from delivery and update delivery_status in transaction
                    $sql = "SELECT d.*, t.sync_status
                            FROM delivery d
                            INNER JOIN `transaction` t
                                ON t.transaction_id = d.transaction_id
                            WHERE d.shipment_id = {$shipmentId}";
                    $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultShipment !== false && $resultShipment->num_rows > 0) {
                        while($rowShipment = $resultShipment->fetch_object()) {
                            $syncStatus = 0;
                            if($rowShipment->sync_status == 1) {
                                $syncStatus = 2;
                            }

                            if($rowShipment->percent_taken == 100) {
                                $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } else {
                                $sqlOther = "SELECT * FROM delivery WHERE shipment_id <> {$shipmentId} AND transaction_id = {$rowShipment->transaction_id}";
                                $resultOther = $myDatabase->query($sqlOther, MYSQLI_STORE_RESULT);

                                if($resultOther->num_rows > 0) {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 2, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                } else {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                }
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            }
                        }

                        $sqlDelete = "DELETE FROM delivery WHERE shipment_id = {$shipmentId}";
                        $resultDelete = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);
                    }


                    // insert into delivery
						$sql = "SELECT t.*
                            FROM transaction t
                            WHERE t.stockpile_contract_id IN (
                                SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                            ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                            ORDER BY  t.unloading_date ASC, t.slip_no ASC";
                    $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $totalInventoryValue = 0;
                    if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                        $balanceLeft = $sendWeight2;
                        while($rowDelivery = $resultDelivery->fetch_object()) {
                            $syncStatus = 0;
                            if($rowDelivery->sync_status == 1) {
                                $syncStatus = 2;
                            }

                            if($balanceLeft > 0) {
                                if($rowDelivery->delivery_status == 0) {
                                    if($balanceLeft >= $rowDelivery->quantity) {
                                        $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                        $quantityTaken = $rowDelivery->quantity;
                                        $percentTaken = 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < $rowDelivery->quantity) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } elseif($rowDelivery->delivery_status == 2) {
                                    $totalTaken = 0;
                                    $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                    $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                        $rowTaken = $resultTaken->fetch_object();
                                        $totalTaken = $rowTaken->total_taken;
                                    }

                                    if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                        $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                        $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                }

                                $deliveryValue = $quantityTaken * $salesUnitPrice;
                                $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                $percentTaken = $percentTaken * 100;

                                $sql = "INSERT INTO delivery (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                        . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                        . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus}, sync_status = {$syncStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    }

                    $updateInventoryValue = $totalInventoryValue;
//                    $updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;

                    $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    // update shipment
                    $cogsAmount = $updateInventoryValue;
                    if($salesCurrencyId != 1) {
                        $cogsAmount = $updateInventoryValue / $salesExchangeRate;
                    }
                    $invoiceAmount = $blWeight * $salesOriginalUnitPrice;
                    $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                            . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$blWeight}, shipment_status = 1 "
                            . "WHERE shipment_id = {$shipmentId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    // update sales
                    $boolUpdateSales = false;
                    if($sendWeight2 == ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 1;
                        $boolUpdateSales = true;
                    } elseif($sendWeight2 < ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 2;
                        $boolUpdateSales = true;
                    }

                    if($boolUpdateSales) {
                        $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }

					insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                    unset($_SESSION['transaction']);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.|';
					echo $sql;
                }
            } else {
                if($sendWeight2 > $availableBalance) {
                    $return_value = '|FAIL|Available quantity in '. $stockpileName .' is '. number_format($availableBalance, 4, '.', ',') .' Kg.|';
                } elseif($sendWeight2 > ($salesBalance - $deliveredBalance)) {
                    $return_value = '|FAIL|Sales agreement balance is '. ($salesBalance - $deliveredBalance) .' Kg.|';
                }
            }*/
        } else {
            $return_value = '|FAIL|Please fill the required fields.|';
        }
        // </editor-fold>
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_transaction_data_new') {
    // <editor-fold defaultstate="collapsed" desc="update_transaction_data">

    $return_value = '';
    $boolQuantity = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $transactionId = $myDatabase->real_escape_string($_POST['transactionId']);
    $transactionId2 = $transactionId;
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
    $transactionDate = $myDatabase->real_escape_string($_POST['transactionDate']);
    $loadingDate = $myDatabase->real_escape_string($_POST['loadingDate']);
    $transactionDate2 = $myDatabase->real_escape_string($_POST['transactionDate2']);
    $vehicleNo = $myDatabase->real_escape_string($_POST['vehicleNo']);
    $vehicleNo2 = $myDatabase->real_escape_string($_POST['vehicleNo2']);
    $unloadingCostId = $myDatabase->real_escape_string($_POST['unloadingCostId']);
    $unloadingDate = $myDatabase->real_escape_string($_POST['unloadingDate']);
    $freightCostId = $myDatabase->real_escape_string($_POST['freightCostId']);
    $handlingCostId = $myDatabase->real_escape_string($_POST['handlingCostId']);
    $permitNo2 = $myDatabase->real_escape_string($_POST['permitNo2']);
    $transactionType = $myDatabase->real_escape_string($_POST['transactionType']);
    $sendWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight']));
    $sendWeight2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight2']));
    $blWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['blWeight']));
    $brutoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['brutoWeight']));
    $tarraWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['tarraWeight']));
    $nettoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['nettoWeight']));
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $notes2 = $myDatabase->real_escape_string($_POST['notes2']);
    $driver = $myDatabase->real_escape_string($_POST['driver']);
    $block = $myDatabase->real_escape_string($_POST['block']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $supplierId = $vendorId;
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $isTaxable = $myDatabase->real_escape_string($_POST['isTaxable']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $ggl = $myDatabase->real_escape_string($_POST['ggl']);
    $rsb = $myDatabase->real_escape_string($_POST['rsb']);
    $stockpileCode = '';
    $unitPrice = 0;
    $balanceQuantity = 0;
    $contractId = 0;
    $custTaxId = 'NULL';
    $curahTaxId = 'NULL';
    $ucTaxId = 0;
    $fcTaxId = 0;
    // </editor-fold>

    //insert to log table
    /*if($transactionId == 257942){
	$sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode FROM `transaction` t WHERE t.transaction_id = {$transactionId}";
	$resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
            if($resultR !== false && $resultR->num_rows == 1) {
                $rowR = $resultR->fetch_object();
				//$R = "R";
				//$U = "-U";

				//$slipU = $rowR->slip_no .''. $U;
				$checkSlipNo = $rowR->stockpileCode .'-'. $currentYear;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				$slipR = $rowR->slip_no .'-R';
				$slipU = $rowR->slip_no .'-U';
				$dateR = $date->format('Y-m-d');
				$sendW = $rowR->send_weight * -1;
				$brutoW = $rowR->bruto_weight * -1;
				$tarraW = $rowR->tarra_weight * -1;
				$nettoW = $rowR->netto_weight * -1;
				$handlingW = $rowR->handling_quantity * -1;
				$freightW = $rowR->freight_quantity * -1;
				$quantityW = $rowR->quantity * -1;
				$shrinkW = $rowR->shrink * -1;
				$unloadingP = $rowR->unloading_price * -1;

				if($rowR->shipment_id == ''){
					$shipment_id = 'NULL';
				}else{
					$shipment_id = $rowR->shipment_id;
				}
				if($rowR->labor_id == ''){
					$labor_id = 'NULL';
				}else{
					$labor_id = $rowR->labor_id;
				}
				if($rowR->unloading_cost_id == ''){
					$unloading_cost_id = 'NULL';
				}else{
					$unloading_cost_id = $rowR->unloading_cost_id;
				}
				if($rowR->handling_cost_id == ''){
					$handling_cost_id = 'NULL';
				}else{
					$handling_cost_id = $rowR->handling_cost_id;
				}
				if($rowR->freight_cost_id == ''){
					$freight_cost_id = 'NULL';
				}else{
					$freight_cost_id = $rowR->freight_cost_id;
				}
				if($rowR->permit_no == ''){
					$permit_no = 'NULL';
				}else{
					$permit_no = $rowR->permit_no;
				}
				if($rowR->vendor_id == ''){
					$vendor_id = 'NULL';
				}else{
					$vendor_id = $rowR->vendor_id;
				}
				if($rowR->cust_tax_id == ''){
					$cust_tax_id = 'NULL';
				}else{
					$cust_tax_id = $rowR->cust_tax_id;
				}
				if($rowR->curah_tax_id == ''){
					$curah_tax_id = 'NULL';
				}else{
					$curah_tax_id = $rowR->curah_tax_id;
				}
				if($rowR->uc_tax_id == ''){
					$uc_tax_id = 'NULL';
				}else{
					$uc_tax_id = $rowR->uc_tax_id;
				}
				if($rowR->fc_tax_id == ''){
					$fc_tax_id = 'NULL';
				}else{
					$fc_tax_id = $rowR->fc_tax_id;
				}
				if($rowR->block == ''){
					$block = 'NULL';
				}else{
					$block = $rowR->block;
				}
				//if($rowR->payment_id == ''){
					$payment_id = 'NULL';
				//}else{
					//$payment_id = $rowR->payment_id;
				//}
				//if($rowR->fc_payment_id == ''){
					$fc_payment_id = 'NULL';
				//}else{
					//$fc_payment_id = $rowR->fc_payment_id;
				//}
				//if($rowR->hc_payment_id == ''){
					$hc_payment_id = 'NULL';
				//}else{
					//$hc_payment_id = $rowR->hc_payment_id;
				//}
				//if($rowR->uc_payment_id == ''){
					$uc_payment_id = 'NULL';
				//}else{
					//$uc_payment_id = $rowR->uc_payment_id;
				//}
				if($rowR->notes == ''){
					$notes = 'NULL';
				}else{
					$notes = $rowR->notes;
				}
				$delivery_status = 0;
			}

	$sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},{$rowR->stockpile_contract_id},{$shipment_id},'{$dateR}','{$dateR}','{$rowR->vehicle_no}',{$labor_id},{$unloading_cost_id},'{$dateR}',{$handling_cost_id},{$freight_cost_id},'{$permit_no}',{$rowR->transaction_type},{$vendor_id},'{$sendW}','{$brutoW}','{$tarraW}','{$nettoW}','{$notes}','{$rowR->driver}','{$handlingW}','{$freightW}','{$quantityW}','{$shrinkW}','{$rowR->freight_price}','{$unloadingP}','{$rowR->unit_price}','{$rowR->inventory_value}',{$cust_tax_id},{$curah_tax_id},{$uc_tax_id},{$fc_tax_id},{$delivery_status},'{$block}',{$payment_id},{$fc_payment_id},{$hc_payment_id},{$uc_payment_id},{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
       if($resultLog !== false) {
    //echo $sqlLog;
	$transactionId = $myDatabase->insert_id;

	insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
	   }

	}*/

    if ($isTaxable == '') {
        $isTaxable = 0;
    }

    if ($ppn == '') {
        $ppn = 0;
    }

    if ($pph == '') {
        $pph = 0;
    }

    if ($transactionType == 1) {
        //echo 'test2';
        //$transactionId2 = 0;
        // <editor-fold defaultstate="collapsed" desc="IN">
        if ($stockpileId != '' && $stockpileContractId != '' && $loadingDate != '' && $vehicleNo != '' && $unloadingCostId != '' &&
            $unloadingDate != '' && $freightCostId != '' && $handlingCostId != '' && $permitNo2 != '' && $transactionType != '' && $sendWeight != '' &&
            $brutoWeight != '' && $tarraWeight != '' && $driver != '' && $vendorId != '' && $laborId != '') {

            if ($supplierId == '') {
                $supplierId = "NULL";
            }

            // check balance contract & get unit price
            $sql = "SELECT s.stockpile_code, con.price_converted, sc.contract_id, con.contract_type, 
                        ((SELECT COALESCE(SUM(quantity), 0) FROM stockpile_contract WHERE contract_id = sc.contract_id
                        ) - con.adjustment) - (
                            SELECT COALESCE(SUM(t.send_weight), 0) FROM `transaction` t LEFT JOIN stockpile_contract sc ON t.stockpile_contract_id = sc.stockpile_contract_id
                            WHERE sc.contract_id =  con.contract_id
                        ) AS balance, s.freight_weight_rule, s.curah_weight_rule, v.pph_tax_id
                    FROM stockpile_contract sc
                    INNER JOIN stockpile s
                        ON s.stockpile_id = sc.stockpile_id
                    INNER JOIN contract con
                        ON con.contract_id = sc.contract_id
                    INNER JOIN vendor v
                        ON v.vendor_id = con.vendor_id
                    WHERE stockpile_contract_id = {$stockpileContractId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $contractId = $rowStockpile->contract_id;
                $unitPrice = $rowStockpile->price_converted;
                $contractType = $rowStockpile->contract_type;
                $freightWeightRule = $rowStockpile->freight_weight_rule;
                $curahWeightRule = $rowStockpile->curah_weight_rule;
                if ($contractType == 'P') {
                    $balanceQuantity = $rowStockpile->balance;
                } elseif ($contractType == 'C') {
                    $balanceQuantity = $sendWeight;
                    if ($rowStockpile->pph_tax_id != 0 && $rowStockpile->pph_tax_id != '') {
                        $curahTaxId = $rowStockpile->pph_tax_id;
                    }
                }
            }

            // get netto weight
            //$nettoWeight = $brutoWeight - $tarraWeight;

            // get freight weight
            $sqlfc = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
            $resultFreight = $myDatabase->query($sqlfc, MYSQLI_STORE_RESULT);
            if ($resultFreight !== false && $resultFreight->num_rows == 1) {
                $rowFreight = $resultFreight->fetch_object();
                $freightRule = $rowFreight->freight_rule;


            }

            // get freight weight
            if ($freightWeightRule == 0 && $freightRule == 1) {
                $freightQuantity = $sendWeight;
            } elseif ($freightWeightRule == 0 && $freightRule == 0) {
                if ($nettoWeight < $sendWeight) {
                    $freightQuantity = $nettoWeight;
                } elseif ($nettoWeight > $sendWeight) {
                    $freightQuantity = $sendWeight;
                } else {
                    $freightQuantity = $sendWeight;
                }
            } elseif ($freightWeightRule == 1) {
                $freightQuantity = $sendWeight;
            } elseif ($freightWeightRule == 2) {
                $freightQuantity = $nettoWeight;
            } else {
                $freightQuantity = $sendWeight;
            }

            // get shrink condition
//            $quantity = $nettoWeight;
//            $sql = "SELECT * FROM `condition` WHERE category_id = 1 AND contract_id = {$contractId}";
//            $resultCondition = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//            if($resultCondition !== false && $resultCondition->num_rows == 1) {
//                $rowCondition = $resultCondition->fetch_object();
//                $quantity = ${$rowCondition->rule};
//            }
            if ($sendWeight > $balanceQuantity && $balanceQuantity > 0) {
                $balanceQuantity = $sendWeight;

            }

            // if ($sendWeight <= $balanceQuantity || $balanceQuantity == 0) {
                // get shrink
                $shrink = 0;
                if ($contractType == 'P') {
                    if ($nettoWeight < $sendWeight) {
                        $quantity = $nettoWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } elseif ($nettoWeight > $sendWeight) {
                        $quantity = $sendWeight;
                        $shrink = 0;
                    } else {
                        $quantity = $sendWeight;
                    }
                } elseif ($contractType == 'C') {
                    if ($curahWeightRule == 0) {
                        if ($nettoWeight < $sendWeight) {
                            $quantity = $nettoWeight;
                            $shrink = $sendWeight - $nettoWeight;
                        } elseif ($nettoWeight > $sendWeight) {
                            $quantity = $sendWeight;
                            $shrink = $sendWeight - $nettoWeight;
                        } else {
                            $quantity = $sendWeight;
                        }
                    } elseif ($curahWeightRule == 1) {
                        $quantity = $sendWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } elseif ($curahWeightRule == 2) {
                        $quantity = $nettoWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } else {
                        $quantity = $sendWeight;
                    }
                }
                /*if($transactionId2 == 257942){
                $checkSlipNo = $rowR->stockpileCode .'-'. $currentYear;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				}*/
                // get freight cost
                if ($freightCostId == 'NONE') {
                    $freightCostId = 'NULL';
                    $freightPrice = 0;
                    $freightQuantity2 = 0;
                } else {
                    $sql = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                    $resultFreight = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultFreight !== false && $resultFreight->num_rows == 1) {
                        $rowFreight = $resultFreight->fetch_object();
                        $freightPrice = $rowFreight->price_converted;
                        if ($rowFreight->freight_rule == 1) {
                            $freightQuantity2 = $sendWeight;
                        } else {
                            $freightQuantity2 = $nettoWeight;
                        }
                        if ($rowFreight->pph_tax_id != 0 && $rowFreight->pph_tax_id != '') {
                            $fcTaxId = $rowFreight->pph_tax_id;
                        } else {
                            $fcTaxId = 0;
                        }
                    }
                }

                // get handling cost
                if ($handlingCostId == 'NONE') {
                    $handlingCostId = 'NULL';
                    $handlingQuantity = 0;
                    $handlingPrice = 0;
                } else {
                    $sql = "SELECT vhc.vendor_handling_id, vhc.price_converted, vh.pph_tax_id, vh.vendor_handling_rule
                            FROM `vendor_handling_cost` vhc 
                            INNER JOIN vendor_handling vh
                                ON vh.vendor_handling_id = vhc.vendor_handling_id
                            WHERE vhc.handling_cost_id = {$handlingCostId}";
                    $resultHandling = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultHandling !== false && $resultHandling->num_rows == 1) {
                        $rowHandling = $resultHandling->fetch_object();
                        $handlingPrice = $rowHandling->price_converted;
                        if ($rowHandling->vendor_handling_rule == 1) {
                            $handlingQuantity = $sendWeight;
                        } else {
                            $handlingQuantity = $nettoWeight;
                        }

                    }
                }

                // get unloading cost
                if ($unloadingCostId == 'NONE') {
                    $unloadingCostId = 'NULL';
                    $unloadingPrice = 0;
                } else {
                    $sql = "SELECT uc.price_converted 
                            FROM `unloading_cost` uc 
                            WHERE uc.unloading_cost_id = {$unloadingCostId}";
                    $resultUnloading = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultUnloading !== false && $resultUnloading->num_rows == 1) {
                        $rowUnloading = $resultUnloading->fetch_object();
                        $unloadingPrice = $rowUnloading->price_converted;
                    }
                }

                if ($laborId == 'NONE') {
                    $laborId = 'NULL';
                } else {
                    $sql = "SELECT l.pph_tax_id
                            FROM `labor` l
                            WHERE l.labor_id = {$laborId}";
                    $resultLabor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultLabor !== false && $resultLabor->num_rows == 1) {
                        $rowLabor = $resultLabor->fetch_object();
                        if ($rowLabor->pph_tax_id != 0 && $rowLabor->pph_tax_id != '') {
                            $ucTaxId = $rowLabor->pph_tax_id;
                        }
                    }
                }

                $syncStatus = 0;
                $sql = "SELECT sync_status FROM `transaction` WHERE transaction_id = {$transactionId}";
                $resultTrans = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if ($resultTrans !== false && $resultTrans->num_rows == 1) {
                    $rowTrans = $resultTrans->fetch_object();
                    if ($rowTrans->sync_status == 1) {
                        $syncStatus = 2;
                    }
                }

                // get inventory value
                $inventoryValue = ($freightQuantity * $freightPrice) + $unloadingPrice + ($quantity * $unitPrice) + ($handlingQuantity * $handlingPrice);

                /*if($transactionId2 == 257942){
                // insert into transaction
				$sql = "INSERT INTO `transaction` (slip_no, slip_retur, stockpile_contract_id, transaction_date, loading_date, vehicle_no, labor_id, unloading_cost_id, "
                        . "unloading_date, freight_cost_id, handling_cost_id, permit_no, transaction_type, vendor_id, send_weight, bruto_weight, tarra_weight, "
                        . "netto_weight, notes, driver, freight_quantity, handling_quantity, quantity, shrink, freight_price, unloading_price, unit_price, "
                        . "inventory_value, block, curah_tax_id, uc_tax_id, fc_tax_id, entry_by, entry_date, modify_by, modify_date) "
                        . "VALUES ('{$slipNo}', '{$slipU}',{$stockpileContractId}, '{$dateR}', '{$dateR}', "
                        . "'{$vehicleNo}', {$laborId}, {$unloadingCostId}, '{$dateR}', {$freightCostId}, {$handlingCostId}, '{$permitNo}', "
                        . "{$transactionType}, {$supplierId}, {$sendWeight}, {$brutoWeight}, {$tarraWeight}, {$nettoWeight}, '{$notes}', "
                        . "'{$driver}', {$freightQuantity}, {$handlingQuantity}, {$quantity}, {$shrink}, {$freightPrice}, {$unloadingPrice}, {$unitPrice}, {$inventoryValue}, '{$block}', "
                        . "{$curahTaxId}, {$ucTaxId}, {$fcTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				}else{*/
                $sql = "UPDATE `transaction` SET "
                    . "stockpile_contract_id = {$stockpileContractId}, "
                    . "loading_date = STR_TO_DATE('{$loadingDate}', '%d/%m/%Y'), "
                    . "vehicle_no = '{$vehicleNo}', "
                    . "labor_id = {$laborId}, "
                    . "unloading_cost_id = {$unloadingCostId}, "
                    . "transaction_date = STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), "
                    . "unloading_date = STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), "
                    . "freight_cost_id = {$freightCostId}, "
                    . "handling_cost_id = {$handlingCostId}, "
                    . "do_no = '{$permitNo2}', "
                    . "vendor_id = {$supplierId}, "
                    . "send_weight = {$sendWeight}, "
                    . "bruto_weight = {$brutoWeight}, "
                    . "tarra_weight = {$tarraWeight}, "
                    . "netto_weight = {$nettoWeight}, "
                    . "notes = '{$notes}', "
                    . "driver = '{$driver}', "
                    . "freight_quantity = {$freightQuantity}, "
                    . "handling_quantity = {$handlingQuantity}, "
                    . "quantity = {$quantity}, "
                    . "shrink = {$shrink}, "
                    //. "susut_qty = {$qtySusut}, "
                    //. "susut_price = {$hargaSusut}, "
                    . "freight_price = {$freightPrice}, "
                    . "handling_price = {$handlingPrice}, "
                    . "unloading_price = {$unloadingPrice}, "
                    . "unit_price = {$unitPrice}, "
                    . "inventory_value = {$inventoryValue}, "
                    . "fc_tax_id = {$fcTaxId}, "
                    . "uc_tax_id = {$ucTaxId}, "
                    . "block = '{$block}', "
                    . "ggl = {$ggl}, "
                    . "rsb = {$rsb}, "
                    . "sync_status = {$syncStatus}, "
                    . "modify_by = {$_SESSION['userId']}, "
                    . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                    . "WHERE transaction_id = {$transactionId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                //}
                if ($result !== false) {
                    $return_value = '|OK|Transaction has updated successfully.|';

                    // if curah update contract and stockpile_contract quantity
                    if ($contractType == 'C') {
                        /*  $sql = "UPDATE contract SET quantity = {$quantity} WHERE contract_id = {$contractId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                        $sql = "UPDATE stockpile_contract SET quantity = {$quantity} WHERE stockpile_contract_id = {$stockpileContractId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/
                    }

                    $sql = "CALL sp_shrink_weight({$transactionId})";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.' . $sql . '|';
                }
            // } else {
            //     $return_value = '|FAIL|The quantity exceed the balance of the contract.|';
            // }
        } else {
            $return_value = '|FAIL|Please fill the required fields.|';
        }
        // </editor-fold>

    } elseif ($transactionType == 2) {
        // <editor-fold defaultstate="collapsed" desc="OUT">
        if ($stockpileId != '' && $salesId != '' && $shipmentId != '' && $transactionDate2 != '' && $vehicleNo2 != '' && $sendWeight2 != '' && $blWeight != '') {

            $sql = "UPDATE `transaction` SET "
                . "vehicle_no = '{$vehicleNo2}', "
                . "transaction_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                . "unloading_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                . "notes = '{$notes2}', "
                . "modify_by = {$_SESSION['userId']}, "
                . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                . "WHERE transaction_id = {$transactionId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result !== false) {

                $return_value = '|OK|Transaction has updated successfully.|';

                insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
            } else {
                $return_value = '|FAIL|Failed insert transaction.' . $sql . '|';
            }
            // check stockpile detail & transaction balance
            /*$sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode FROM `transaction` t WHERE t.transaction_id = {$transactionId}";
	$resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
            if($resultR !== false && $resultR->num_rows == 1) {
                $rowR = $resultR->fetch_object();
				//$R = "R";
				//$U = "-U";
                //$sql = "UPDATE `transaction` SET shipment_id = NULL WHERE transaction_id = {$transactionId}";
                //$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				//$slipU = $rowR->slip_no .''. $U;
				$checkSlipNo = $rowR->stockpileCode .'-'. $currentYear2;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				$slipR = $rowR->slip_no .'-R';
				$slipU = $rowR->slip_no .'-U';
				$dateR = $date->format('Y-m-d');
				$sendW = $rowR->send_weight * -1;
				$quantityW = $rowR->quantity * -1;
				$shrinkW = $rowR->shrink * -1;
				//$unloadingP = $rowR->unloading_price * -1;
				if($rowR->notes == '')
				$notes = 'NULL';
			}

	$sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},NULL,{$shipmentId},'{$rowR->transaction_date}',NULL,'{$rowR->vehicle_no}',NULL,NULL,'{$rowR->transaction_date}',NULL,NULL,NULL,{$rowR->transaction_type},NULL,'{$sendW}',0,0,0,'{$notes}',NULL,0,0,'{$quantityW}','{$shrinkW}',0,0,0,0,0,NULL,NULL,NULL,0,NULL,NULL,NULL,NULL,NULL,{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
       if($resultLog !== false) {
    //echo $sqlLog;
	$transactionId = $myDatabase->insert_id;

	insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

	// delete from delivery and update delivery_status in transaction
                    $sql = "SELECT d.*, t.sync_status
                            FROM delivery d
                            INNER JOIN `transaction` t
                                ON t.transaction_id = d.transaction_id
                            WHERE d.shipment_id = {$shipmentId}";
                    $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultShipment !== false && $resultShipment->num_rows > 0) {
                        while($rowShipment = $resultShipment->fetch_object()) {
                            $syncStatus = 0;
                            if($rowShipment->sync_status == 1) {
                                $syncStatus = 2;
                            }

                            if($rowShipment->percent_taken == 100) {
                                $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } else {
                                $sqlOther = "SELECT * FROM delivery WHERE shipment_id <> {$shipmentId} AND transaction_id = {$rowShipment->transaction_id}";
                                $resultOther = $myDatabase->query($sqlOther, MYSQLI_STORE_RESULT);

                                if($resultOther->num_rows > 0) {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 2, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                } else {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                }
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            }
                        }

                        $sqlDelete = "DELETE FROM delivery WHERE shipment_id = {$shipmentId}";
                        $resultDelete = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

                    }
					//$sql = "UPDATE `transaction` SET shipment_id = NULL WHERE transaction_id = {$transactionId}";
						//$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
	   }*/

            // echo $sqlLog;
            //insert new delivery
            /*$sql = "SELECT s.stockpile_code, s.stockpile_name,
                        (
                            SELECT COALESCE(SUM(t.quantity), 0) FROM `transaction` t
                            INNER JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                            WHERE sc.stockpile_id = s.stockpile_id
                            AND t.transaction_type = 1
                        ) AS available_balance,
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction`
                            WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                            AND transaction_type = 2
                        ) AS delivered_balance
                    FROM stockpile s
                    WHERE s.stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $stockpileName = $rowStockpile->stockpile_name;
                $availableBalance = $rowStockpile->available_balance;
                $deliveredBalance = $rowStockpile->delivered_balance;
            }

            // get sales detail
            $sql = "SELECT sl.quantity, sl.price_converted, sl.currency_id, sl.exchange_rate, sl.price, cust.pph_tax_id
                    FROM sales sl
                    INNER JOIN customer cust
                        ON cust.customer_id = sl.customer_id
                    WHERE sl.sales_id = {$salesId}";
            $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSales !== false && $resultSales->num_rows == 1) {
                $rowSales = $resultSales->fetch_object();
                $salesBalance = $rowSales->quantity;
                $salesUnitPrice = $rowSales->price_converted;
                $salesCurrencyId = $rowSales->currency_id;
                $salesExchangeRate = $rowSales->exchange_rate;
                $salesOriginalUnitPrice = $rowSales->price;
                $custTaxId = $rowSales->pph_tax_id;
            }

            // get next slip no

					$checkSlipNo = $stockpileCode .'-'. $currentYear3;

            //$checkSlipNo = $stockpileCode /*.'-'. $currentYear*///;
//            $sql = "SELECT LPAD(COUNT(1) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ";
//            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            /*$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSlip->num_rows == 0) {
                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }
            $rowSlipNo = $resultSlip->fetch_object();
            $nextSlipNo = $rowSlipNo->next_id;
            $slipNo = $checkSlipNo .'-'. $nextSlipNo;


//            if($sendWeight2 <= $availableBalance && $blWeight <= ($salesBalance - $deliveredBalance)) {
            if($sendWeight2 <= $availableBalance) {
                $shrink = $sendWeight2 - $blWeight;

                // insert into transaction
                $sql = "INSERT INTO `transaction` (slip_no, slip_retur, shipment_id, transaction_date,unloading_date, vehicle_no, transaction_type, "
                        . "send_weight, notes, quantity, shrink, cust_tax_id, entry_by, entry_date) "
                        . "VALUES ('{$slipNo}', '{$slipU}', {$shipmentId}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), '{$vehicleNo2}', "
                        . "{$transactionType}, {$sendWeight2}, '{$notes2}', {$blWeight}, {$shrink}, {$custTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $transactionId = $myDatabase->insert_id;

                    $return_value = '|OK|Transaction has inserted successfully.|';

                    // insert into delivery
                    $sql = "SELECT t.*
                            FROM transaction t
                            WHERE t.stockpile_contract_id IN (
                                SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                            ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                              ORDER BY t.unloading_date ASC, t.slip_no ASC";
                    $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $totalInventoryValue = 0;
                    if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                        $balanceLeft = $sendWeight2;
                        while($rowDelivery = $resultDelivery->fetch_object()) {
                            $syncStatus = 0;
                            if($rowDelivery->sync_status == 1) {
                                $syncStatus = 2;
                            }

                            if($balanceLeft > 0) {
                                if($rowDelivery->delivery_status == 0) {
                                    if($balanceLeft >= $rowDelivery->quantity) {
                                        $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                        $quantityTaken = $rowDelivery->quantity;
                                        $percentTaken = 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < $rowDelivery->quantity) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } elseif($rowDelivery->delivery_status == 2) {
                                    $totalTaken = 0;
                                    $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                    $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                        $rowTaken = $resultTaken->fetch_object();
                                        $totalTaken = $rowTaken->total_taken;
                                    }

                                    if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                        $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                        $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                }

                                $deliveryValue = $quantityTaken * $salesUnitPrice;
                                $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                $percentTaken = $percentTaken * 100;

                                $sql = "INSERT INTO `delivery` (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                        . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                        . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus}, sync_status = {$syncStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    }

                    //$updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                    $updateInventoryValue = $totalInventoryValue;

                    $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    // update shipment
                    $cogsAmount = $updateInventoryValue;
                    if($salesCurrencyId != 1) {
                        $cogsAmount = $updateInventoryValue / $salesExchangeRate;
                    }
                    $invoiceAmount = $blWeight * $salesOriginalUnitPrice;
                    $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                            . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$blWeight}, shipment_status = 1 "
                            . "WHERE shipment_id = {$shipmentId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    // update sales
                    $boolUpdateSales = false;
                    if($blWeight == ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 1;
                        $boolUpdateSales = true;
                    } elseif($blWeight < ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 2;
                        $boolUpdateSales = true;
                    }

                    if($boolUpdateSales) {
                        $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }

                     insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                    unset($_SESSION['transaction']);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.|';
                }
            } else {
                if($sendWeight2 > $availableBalance) {
                    $return_value = '|FAIL|Available quantity in '. $stockpileName .' is '. number_format($availableBalance, 4, '.', ',') .' Kg.|';
                } elseif($sendWeight2 > ($salesBalance - $deliveredBalance)) {
                    $return_value = '|FAIL|Sales agreement balance is '. ($salesBalance - $deliveredBalance) .' Kg.|';
                }
            }*/
            /*  $sql = "SELECT s.stockpile_code, s.stockpile_name,
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction`
                            WHERE stockpile_id = s.stockpile_id
                            AND transaction_type = 1
                        ) AS available_balance,
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction`
                            WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                            AND transaction_type = 2
                        ) AS delivered_balance
                    FROM stockpile s
                    WHERE s.stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $stockpileName = $rowStockpile->stockpile_name;
                $availableBalance = $rowStockpile->available_balance;
                $deliveredBalance = $rowStockpile->delivered_balance;
            }

            // get sales detail
            $sql = "SELECT quantity, price_converted, currency_id, exchange_rate, price FROM sales WHERE sales_id = {$salesId}";
            $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSales !== false && $resultSales->num_rows == 1) {
                $rowSales = $resultSales->fetch_object();
                $salesBalance = $rowSales->quantity;
                $salesUnitPrice = $rowSales->price_converted;
                $salesCurrencyId = $rowSales->currency_id;
                $salesExchangeRate = $rowSales->exchange_rate;
                $salesOriginalUnitPrice = $rowSales->price;
            }

            if($sendWeight2 != 0 && $blWeight != 0) {

                $shrink = $sendWeight2 - $blWeight;

                $syncStatus = 0;
                $sql = "SELECT sync_status FROM `transaction` WHERE transaction_id = {$transactionId}";
                $resultTrans = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultTrans !== false && $resultTrans->num_rows == 1) {
                    $rowTrans = $resultTrans->fetch_object();
                    if($rowTrans->sync_status == 1) {
                        $syncStatus = 2;
                    }
                }

                // insert into transaction
                $sql = "UPDATE `transaction` SET "
                        . "shipment_id = {$shipmentId}, "
                        . "vehicle_no = '{$vehicleNo2}', "
                        . "send_weight = {$sendWeight2}, "
						. "notes = '{$notes2}', "
                        . "quantity = {$blWeight}, "
                        . "shrink = {$shrink}, "
                        . "sync_status = {$syncStatus}, "
                        . "modify_by = {$_SESSION['userId']}, "
                        . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE transaction_id = {$transactionId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $transactionId = $myDatabase->insert_id;

                    $return_value = '|OK|Transaction has updated successfully.|';

                    // delete from delivery and update delivery_status in transaction
                    $sql = "SELECT d.*, t.sync_status
                            FROM delivery d
                            INNER JOIN `transaction` t
                                ON t.transaction_id = d.transaction_id
                            WHERE d.shipment_id = {$shipmentId}";
                    $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultShipment !== false && $resultShipment->num_rows > 0) {
                        while($rowShipment = $resultShipment->fetch_object()) {
                            $syncStatus = 0;
                            if($rowShipment->sync_status == 1) {
                                $syncStatus = 2;
                            }

                            if($rowShipment->percent_taken == 100) {
                                $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } else {
                                $sqlOther = "SELECT * FROM delivery WHERE shipment_id <> {$shipmentId} AND transaction_id = {$rowShipment->transaction_id}";
                                $resultOther = $myDatabase->query($sqlOther, MYSQLI_STORE_RESULT);

                                if($resultOther->num_rows > 0) {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 2, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                } else {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                }
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            }
                        }

                        $sqlDelete = "DELETE FROM delivery WHERE shipment_id = {$shipmentId}";
                        $resultDelete = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);
                    }


                    // insert into delivery
						$sql = "SELECT t.*
                            FROM transaction t
                            WHERE t.stockpile_contract_id IN (
                                SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                            ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                            ORDER BY  t.unloading_date ASC, t.slip_no ASC";
                    $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $totalInventoryValue = 0;
                    if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                        $balanceLeft = $sendWeight2;
                        while($rowDelivery = $resultDelivery->fetch_object()) {
                            $syncStatus = 0;
                            if($rowDelivery->sync_status == 1) {
                                $syncStatus = 2;
                            }

                            if($balanceLeft > 0) {
                                if($rowDelivery->delivery_status == 0) {
                                    if($balanceLeft >= $rowDelivery->quantity) {
                                        $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                        $quantityTaken = $rowDelivery->quantity;
                                        $percentTaken = 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < $rowDelivery->quantity) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } elseif($rowDelivery->delivery_status == 2) {
                                    $totalTaken = 0;
                                    $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                    $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                        $rowTaken = $resultTaken->fetch_object();
                                        $totalTaken = $rowTaken->total_taken;
                                    }

                                    if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                        $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                        $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                }

                                $deliveryValue = $quantityTaken * $salesUnitPrice;
                                $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                $percentTaken = $percentTaken * 100;

                                $sql = "INSERT INTO delivery (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                        . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                        . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus}, sync_status = {$syncStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    }

                    $updateInventoryValue = $totalInventoryValue;
//                    $updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;

                    $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    // update shipment
                    $cogsAmount = $updateInventoryValue;
                    if($salesCurrencyId != 1) {
                        $cogsAmount = $updateInventoryValue / $salesExchangeRate;
                    }
                    $invoiceAmount = $blWeight * $salesOriginalUnitPrice;
                    $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                            . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$blWeight}, shipment_status = 1 "
                            . "WHERE shipment_id = {$shipmentId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    // update sales
                    $boolUpdateSales = false;
                    if($sendWeight2 == ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 1;
                        $boolUpdateSales = true;
                    } elseif($sendWeight2 < ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 2;
                        $boolUpdateSales = true;
                    }

                    if($boolUpdateSales) {
                        $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }

					insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                    unset($_SESSION['transaction']);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.|';
					echo $sql;
                }
            } else {
                if($sendWeight2 > $availableBalance) {
                    $return_value = '|FAIL|Available quantity in '. $stockpileName .' is '. number_format($availableBalance, 4, '.', ',') .' Kg.|';
                } elseif($sendWeight2 > ($salesBalance - $deliveredBalance)) {
                    $return_value = '|FAIL|Sales agreement balance is '. ($salesBalance - $deliveredBalance) .' Kg.|';
                }
            }*/
        } else {
            $return_value = '|FAIL|Please fill the required fields.|';
        }
        // </editor-fold>
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_POST['action']) && $_POST['action'] == 'import_transaction') {
    // <editor-fold defaultstate="collapsed" desc="import_transaction">

    $return_value = '';
    $boolContinue = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">

    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);

    // </editor-fold>

    if ($stockpileId != '' && isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import/stockpile-" . $stockpileId;

        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if ($boolContinue) {

            $importResult = excelImportTransaction($myDatabase, $attachmentPath, $stockpileId, $vendorId, $stockpileContractId);
            $importResult = explode("|", $importResult);

            if ($importResult[0] == 'OK') {
                $return_value = '|OK|' . $importResult[1] . '|';
            } else {
                $return_value = '|FAIL|' . $importResult[1] . '|';
            }

        }
    } else {
        $return_value = '|FAIL|Please fill required fields.|';
    }

    echo $return_value;

    // </editor-fold>
} elseif (isset($_POST['action']) && $_POST['action'] == 'import_general_vendor') {
    // <editor-fold defaultstate="collapsed" desc="import_transaction">

    $return_value = '';
    $boolContinue = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">

    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    //$vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    //$stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);

    // </editor-fold>

    if ($stockpileId != '' && isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import/stockpile-" . $stockpileId;

        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if ($boolContinue) {

            $importResult = excelImportGeneralVendor($myDatabase, $attachmentPath, $stockpileId);
            $importResult = explode("|", $importResult);

            if ($importResult[0] == 'OK') {
                $return_value = '|OK|' . $importResult[1] . '|';
            } else {
                $return_value = '|FAIL|' . $importResult[1] . '|';
            }

        }
    } else {
        $return_value = '|FAIL|Please fill required fields.|';
    }

    echo $return_value;

    // </editor-fold>
} elseif (isset($_POST['action']) && $_POST['action'] == 'import_jurnal') {
    // <editor-fold defaultstate="collapsed" desc="import_transaction">

    $return_value = '';
    $boolContinue = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">

    //$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    //$vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    //$stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);

    // </editor-fold>

    if (isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import/jurnal/";

        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if ($boolContinue) {

            $importResult = excelImportJurnal($myDatabase, $attachmentPath);
            $importResult = explode("|", $importResult);

            if ($importResult[0] == 'OK') {
                $return_value = '|OK|' . $importResult[1] . '|';
            } else {
                $return_value = '|FAIL|' . $importResult[1] . '|';
            }

        }
    } else {
        $return_value = '|FAIL|Please fill required fields.|';
    }

    echo $return_value;

    // </editor-fold>
} elseif (isset($_POST['action']) && $_POST['action'] == 'import_user_signature') {
    // <editor-fold defaultstate="collapsed" desc="import_transaction">

    $return_value = '';
    $boolContinue = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">

    $userId = $myDatabase->real_escape_string($_POST['userId']);
    // $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    // $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);

    // </editor-fold>

    if (isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import/signature/";
        $imageName = $_FILES['imagefile']['name'];

        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" . basename($imageName);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if ($boolContinue && $userId != '') {

            $sql = "INSERT INTO user_signature (user_id, signature) VALUES ({$userId}, '{$imageName}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Stockpile added successfully.|';
            } else {
                $return_value = '|FAIL|Failed adding signature.|';
            }
        } else {
            $return_value = '|FAIL|Please fill the required fields.|';
        }

        echo $return_value;
    }
    // </editor-fold>
} elseif (isset($_POST['action']) && $_POST['action'] == 'import_payment') {
    // <editor-fold defaultstate="collapsed" desc="import_transaction">

    $return_value = '';
    $boolContinue = true;

    // <editor-fold defaultstate="collapsed" desc="POST variables">

    //$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    //$vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    //$stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);

    // </editor-fold>

    if (isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import/payment-";

        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if ($boolContinue) {

            $importResult = excelImportPayment($myDatabase, $attachmentPath);
            $importResult = explode("|", $importResult);

            if ($importResult[0] == 'OK') {
                $return_value = '|OK|' . $importResult[1] . '|';
            } else {
                $return_value = '|FAIL|' . $importResult[1] . '|';
            }

        }
    } else {
        $return_value = '|FAIL|Please fill required fields.|';
    }

    echo $return_value;

    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_sales') {
    // <editor-fold defaultstate="collapsed" desc="delete_sales">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    // </editor-fold>

    if ($salesId != '') {
        $sql = "DELETE FROM `sales` WHERE sales_id = {$salesId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Sales agreement has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete sales agreement failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'sales_detail_data') {
    // <editor-fold defaultstate="collapsed" desc="bank_data">

    $return_value = '';
    $boolNew = false;
    $salesHeaderId = $myDatabase->real_escape_string($_POST['salesHeaderId']);
    $salesDetailId = $myDatabase->real_escape_string($_POST['salesDetailId']);
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    $vessel = $myDatabase->real_escape_string($_POST['vessel']);
    $shipmentNo = $myDatabase->real_escape_string($_POST['shipmentNo']);
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    $statsType = $myDatabase->real_escape_string($_POST['statsType']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $tolerance = str_replace(",", "", $myDatabase->real_escape_string($_POST['tolerance']));
    $moisture = str_replace(",", "", $myDatabase->real_escape_string($_POST['moisture']));
    $ncv = str_replace(",", "", $myDatabase->real_escape_string($_POST['ncv']));
    $tax_base = str_replace(",", "", $myDatabase->real_escape_string($_POST['tax_base']));
    $fm = str_replace(",", "", $myDatabase->real_escape_string($_POST['fm']));
    $fob = str_replace(",", "", $myDatabase->real_escape_string($_POST['fob']));
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    // </editor-fold>

    if ($salesDetailId == '') {
        $boolNew = true;
    }

    if ($boolNew) {
        $sql = "INSERT INTO `sales_detail`
						(`sales_header_id`,
						`customer_id`,
						`vessel`,
						`qty`,
						`stockpile_id`,
						`stats`,
						`shipment_no`,
						`tolerance`,
						`moisture`,
						`ncv`,
						`tax_base`,
						`fm`,
						`fob`,
						`entry_by`,
						`entry_date`)
						VALUES
						($salesHeaderId,
						$customerId,
						'$vessel',
						$quantity,
						$stockpileId,
						'$statsType',
						'$shipmentNo',						
						$moisture,
						$tolerance,
						$ncv,
						$tax_base,
						$fm,
						$fob,
						{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    } else {
        $sql = "UPDATE `sales_detail`
						SET
						`sales_header_id` = $salesHeaderId,
						`customer_id` = $customerId,
						`vessel` = '$vessel',
						`qty` = $quantity,
						`stats` = '$statsType',
						`shipment_no` = '$shipmentNo',
						`tolerance` = $tolerance,
						`moisture` = $moisture,
						`ncv` = $ncv,
						`tax_base` = $tax_base,
						`fm` = $fm,
						`fob` = $fob,
						`entry_by` = {$_SESSION['userId']},
						`entry_date` = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s')
						WHERE `sales_detail_id` = $salesDetailId";
    }
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($result !== false) {
        if ($boolNew) {
            $salesDetailId = $myDatabase->insert_id;
        }

        $return_value = '|OK|Sales Schedule has successfully inserted/updated.|' . $salesDetailId . '|';
    } else {
        $return_value = '|FAIL|Insert/update sales schedule failed.||';
    }


    echo $sql;
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'sales_header_data') {
    // <editor-fold defaultstate="collapsed" desc="bank_data">

    $return_value = '';
    $boolNew = false;

    $salesHeaderId = $myDatabase->real_escape_string($_POST['salesHeaderId']);
    $dateFrom = $myDatabase->real_escape_string($_POST['dateFrom']);
    $dateTo = $myDatabase->real_escape_string($_POST['dateTo']);
    $eta = $myDatabase->real_escape_string($_POST['eta']);
    $salesNo = str_replace(",", "", $myDatabase->real_escape_string($_POST['salesNo']));
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    // </editor-fold>

    if ($salesHeaderId == '') {
        $boolNew = true;
    }

    if ($boolNew) {
        $sql = "INSERT INTO `sales_header`
						(`date_from`,
						`date_to`,
						`eta`,
						`sales_no`,
						`entry_by`,
						`entry_date`)
						VALUES
						(STR_TO_DATE('{$dateFrom}','%d/%m/%Y'),
						STR_TO_DATE('{$dateTo}','%d/%m/%Y'),
						STR_TO_DATE('{$eta}','%d/%m/%Y'),
						'$salesNo',
						{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    } else {
        $sql = "UPDATE `sales_header`
						SET
						`date_from` = STR_TO_DATE('{$dateFrom}','%d/%m/%Y'),
						`date_to` = STR_TO_DATE('{$dateTo}','%d/%m/%Y'),
						`eta` = STR_TO_DATE('{$eta}','%d/%m/%Y'),
						`sales_no` = '$salesNo',						
						`entry_by` = {$_SESSION['userId']},
						`entry_date` = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s')
						WHERE `sales_header_id` = $salesHeaderId";
    }
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($result !== false) {
        if ($boolNew) {
            $salesHeaderId = $myDatabase->insert_id;
        }

        $return_value = '|OK|Sales has successfully inserted/updated.|' . $salesHeaderId . '|';
    } else {
        $return_value = '|FAIL|Insert/update sales failed.||';
    }


    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_price_rate_sales') {
    // <editor-fold defaultstate="collapsed" desc="sales_data">

    $return_value = '';
    /*$boolNew = false;
    $boolExists = true;
    $boolShipment = true;
    $boolUpdateShipment = false;
    $boolInsertCustomer = false;
    $boolCustomerExists = false;
    $addMessage = "";*/

    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRateUpdate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceUpdate']));

    // </editor-fold>


    if ($salesId != '' && $exchangeRate != '' && $price != '') {


        $priceConverted = $price * $exchangeRate;


        $sql = "UPDATE `sales` sl SET "
            . "sl.exchange_rate = {$exchangeRate}, "
            . "sl.price = {$price}, "
            . "sl.price_converted = {$priceConverted}, "
            . "sl.sales_status = 3 "
            . "WHERE sl.sales_id = {$salesId}";

        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {

            $sql = "SELECT sl.sales_id, t.transaction_id
						FROM sales sl 
						LEFT JOIN shipment sh ON sh.`sales_id` = sl.`sales_id`
						LEFT JOIN `transaction` t ON t.`shipment_id` = sh.`shipment_id` 
						WHERE sl.sales_id = {$salesId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result->num_rows > 0) {
                while ($row = $result->fetch_object()) {

                    $transactionId = $row->transaction_id;

                    insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                }
            }


            $return_value = '|OK|Sales Agreement has successfully inserted/updated.' . $salesId . '|';
        } else {
            $return_value = '|FAIL|Insert/update sales agreement failed.||';
            echo $sql;
        }

    } else {

        $return_value = '|FAIL|Please fill the required fields.||';

    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'sales_data') {
    // <editor-fold defaultstate="collapsed" desc="sales_data">

    $return_value = '';
    $boolNew = false;
    $boolExists = true;
    $boolShipment = true;
    $boolUpdateShipment = false;
    $boolInsertCustomer = false;
    $boolCustomerExists = false;
    $addMessage = "";

    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $salesNo = $myDatabase->real_escape_string($_POST['salesNo']);
    $shipmentNo = $myDatabase->real_escape_string($_POST['shipmentNo']);
    $salesDate = $myDatabase->real_escape_string($_POST['salesDate']);
    $shipmentDate = $myDatabase->real_escape_string($_POST['shipmentDate']);
    $salesType = $myDatabase->real_escape_string($_POST['salesType']);
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    $customerName = $myDatabase->real_escape_string($_POST['customerName']);
    $customerAddress = $myDatabase->real_escape_string($_POST['customerAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $destination = $myDatabase->real_escape_string($_POST['destination']);
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    $totalShipment = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalShipment']));
    $oldTotalShipment = str_replace(",", "", $myDatabase->real_escape_string($_POST['oldTotalShipment']));
    $bkp_jkp = $myDatabase->real_escape_string($_POST['bkp_jkp']);
    $peb_fp_no = $myDatabase->real_escape_string($_POST['peb_fp_no']);
    $pebDate = $myDatabase->real_escape_string($_POST['pebDate']);
	$stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
	$vendorLangsir = $myDatabase->real_escape_string($_POST['vendorLangsir']);
	$stockpileLangsir = $myDatabase->real_escape_string($_POST['stockpileLangsir']);
	    $mothervessel = $myDatabase->real_escape_string($_POST['mothervessel']);

    
	$rsb = $myDatabase->real_escape_string($_POST['rsb']);
    $ggl = $myDatabase->real_escape_string($_POST['ggl']);

    // </editor-fold>

    if ($customerId == 'INSERT') {
        if ($customerName != '' && $customerAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
            $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$customerName}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result !== false && $result->num_rows > 0) {
                $boolCustomerExists = true;
            } elseif ($result !== false && $result->num_rows == 0) {
                $ppnValue = 0;
                $pphValue = 0;

                $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
                $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
                if ($resultPPN !== false && $resultPPN->num_rows == 1) {
                    $rowPPN = $resultPPN->fetch_object();
                    $ppnValue = $rowPPN->tax_value;
                }

                $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
                $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                    $rowPPh = $resultPPh->fetch_object();
                    $pphValue = $rowPPh->tax_value;
                }

                $sql = "INSERT INTO `customer` (customer_name, customer_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                    . "'{$customerName}', '{$customerAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false) {
                    $customerId = $myDatabase->insert_id;
                    $boolInsertCustomer = true;
                }
            }
        } else {
            $boolInsertCustomer = false;
        }
    } else {
        $boolInsertCustomer = true;
    }

    if ($salesId == '') {
        $boolNew = true;
    } else {
        if ($totalShipment != $oldTotalShipment) {
            if ($totalShipment < $oldTotalShipment) {
                $boolShipment = false;
            }
        }
    }

    if ($salesDate != '' && $salesNo != '' && $salesType != '' && $customerId != '' && $currencyId != '' &&
        $price != '' && $quantity != '' && $totalShipment != '' && $stockpileId != '' && $boolShipment &&
        $boolInsertCustomer && !$boolCustomerExists) {

        if ($boolNew) {
            $sql = "SELECT * FROM `sales` WHERE company_id = {$_SESSION['companyId']} AND sales_no = '{$salesNo}'";
            $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($resultSales->num_rows > 0) {
                $boolExists = false;
            }
        }

        if ($boolExists) {
            if ($exchangeRate == '') {
                $exchangeRate = 1;
            }
			
			if($vendorLangsir == ''){
				
				$vendorLangsir = 0;
				$stockpileLangsir = 0;
			}

            $priceConverted = $price * $exchangeRate;

            if ($boolNew) {
                $sql = "INSERT INTO `sales` (sales_no, sales_date, sales_type, customer_id, "
                    . "stockpile_id, account_id, destination, notes, currency_id, exchange_rate, price, price_converted, quantity, "
                    . "total_shipment, shipment_date, bkp_jkp, peb_fp_no, peb_fp_date, company_id, entry_by, entry_date,stockpileContractId,vendorLangsir,stockpileLangsir, rsb, ggl, mother_vessel) VALUES ("
                    . "'{$salesNo}', STR_TO_DATE('{$salesDate}', '%d/%m/%Y'), {$salesType}, "
                    . "{$customerId}, {$stockpileId}, {$accountId}, '{$destination}', '{$notes}', {$currencyId}, {$exchangeRate}, {$price}, "
                    . "{$priceConverted}, {$quantity}, {$totalShipment}, STR_TO_DATE('{$shipmentDate}', '%m/%Y'), '{$bkp_jkp}', '{$peb_fp_no}', STR_TO_DATE('{$pebDate}', '%d/%m/%Y'), {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$stockpileContractId}, "
                    . "{$vendorLangsir},{$stockpileLangsir}, {$rsb}, {$ggl}, '{$mothervessel}')";
            } else {
                $sql = "UPDATE `sales` sl INNER JOIN shipment sh ON sl.sales_id = sh.sales_id SET "
                    . "sh.shipment_no = '{$shipmentNo}', "
                    . "sl.sales_no = '{$salesNo}', "
                    . "sl.sales_date = STR_TO_DATE('{$salesDate}', '%d/%m/%Y'), "
                    . "sl.sales_type = {$salesType}, "
                    . "sl.customer_id = {$customerId}, "
                    . "sl.stockpile_id = {$stockpileId}, "
                    . "sl.account_id = {$accountId}, "
                    . "sl.destination = '{$destination}', "
                    . "sl.notes = '{$notes}', "
                    . "sl.currency_id = {$currencyId}, "
                    . "sl.exchange_rate = {$exchangeRate}, "
                    . "sl.price = {$price}, "
                    . "sl.price_converted = {$priceConverted}, "
                    . "sl.quantity = {$quantity}, "
                    . "sl.total_shipment = {$totalShipment}, "
					. "sl.stockpileContractId = {$stockpileContractId}, "
					. "sl.vendorLangsir = {$vendorLangsir}, "
					. "sl.stockpileLangsir = {$stockpileLangsir}, "
                    . "sl.shipment_date = STR_TO_DATE('{$shipmentDate}', '%m/%Y'), "
                    . "sl.bkp_jkp = '{$bkp_jkp}', "
                    . "sl.peb_fp_no = '{$peb_fp_no}', "
                    . "sl.rsb = '{$rsb}', "
                    . "sl.ggl = '{$ggl}', "
					 . "sl.mother_vessel = '{$mothervessel}', "
                    . "sl.peb_fp_date = STR_TO_DATE('{$pebDate}', '%d/%m/%Y') "
                    . "WHERE sl.sales_id = {$salesId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $salesId = $myDatabase->insert_id;
                    $j = 1;
                    $boolUpdateShipment = true;
                } else {
                    if ($totalShipment > $oldTotalShipment) {
                        $j = $oldTotalShipment + 1;
                        $boolUpdateShipment = true;
                    } else {
                        $addMessage = " Total shipment cannot be updated.";
                    }

//                    $sql = "DELETE FROM `shipment` WHERE sales_id = {$salesId}";
//                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
					$sqlA = "UPDATE accrue_prediction set PEB_Date = STR_TO_DATE('{$pebDate}', '%d/%m/%Y'), Kurs_PEB = {$exchangeRate} WHERE sales_id = {$salesId}";
					$resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT); 
                }

                if ($boolUpdateShipment) {
                    for ($i = $j; $i <= $totalShipment; $i++) {
                        $shipmentCode = $salesNo . '-' . $i;

                        $sqlc = "INSERT INTO `shipment` (shipment_code, shipment_no, sales_id, entry_by, entry_date) VALUES ("
                            . "'{$shipmentCode}', '{$shipmentNo}', {$salesId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                        $result = $myDatabase->query($sqlc, MYSQLI_STORE_RESULT);
                      //  echo 'SHIPMENT - '. $sqlc;
                    }
                }

                $return_value = '|OK|Sales Agreement has successfully inserted/updated.||';
            } else {
                $return_value = '|FAIL|Insert/update sales agreement failed.||';
                echo $sql;
            }
        } else {
            $return_value = '|FAIL|Sales agreement already exists.||';
        }
    } else {
        if (!$boolShipment) {
            $return_value = '|FAIL|Total shipment cant be less than before.||';
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    }

    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'stock_transit_data') {
    // <editor-fold defaultstate="collapsed" desc="stock_transit_data">
    $return_value = '';
    $boolNew = false;
    $actionType = $myDatabase->real_escape_string($_POST['actionType']);
    if ($actionType == 'INSERT') {
        $mutasiHeaderId = $myDatabase->real_escape_string($_POST['mutasiHeaderId']);
        $array = $_POST['stockTransits'];
        $newArray = array();
        foreach (array_keys($array) as $fieldKey) {
            foreach ($array[$fieldKey] as $key => $value) {
                $newArray[$key][$fieldKey] = $value;
            }
        }
        //Get Stockpile Tujuan
        $sql = "SELECT * FROM mutasi_header where mutasi_header_id = {$mutasiHeaderId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $mh = $result->fetch_object();
        $stockpileTujuan = $mh->stockpile_to;

        //Insert Stock Transit
        foreach ($newArray as $row) {
            $sqlCek = "select c.contract_no, DATE_FORMAT(c.entry_date,'%Y-%m-%d') as contract_date, sc.quantity 
            from stockpile_contract sc left join contract c on sc.contract_id = c.contract_id 
            where stockpile_contract_id = {$row['stockpile_contract_id']}";
            $resultCek = $myDatabase->query($sqlCek, MYSQLI_STORE_RESULT);
            $rowCek = $resultCek->fetch_object();
            $qtyCek = $rowCek->quantity;
            $contractDate = $rowCek->contract_date;
            if ($row['loading_date'] >= $contractDate) {
                $return_value = '|Fail|Loading Date Older than Contract Date at' . $contractDate;
                echo $return_value;
            } else {
                if ($row['send_weight'] <= $qtyCek && $row['netto_weight'] <= $qtyCek) {
                    $sql = "INSERT INTO `stock_transit` (kode_stock_transit, mutasi_header_id, stockpile_contract_id, send_weight, netto_weight,  loading_date, entry_by, entry_date) 
                VALUES ('{$row['kode_stock_transit']}', '{$mutasiHeaderId}', {$row['stockpile_contract_id']},'{$row['send_weight']}','{$row['netto_weight']}', '{$row['loading_date']}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    $stockTransitId = $myDatabase->insert_id;


                    $sqlPPh = "SELECT c.contract_id,c.langisr FROM stock_transit a 
LEFT JOIN stockpile_contract b ON a.`stockpile_contract_id` = b.`stockpile_contract_id`
LEFT JOIN contract c ON b.`contract_id` = c.`contract_id` WHERE a.stock_transit_id = {$stockTransitId}";
                    $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                    if ($resultPPh !== false && $resultPPh->num_rows == 1) {
                        $rowPPh = $resultPPh->fetch_object();
                        $contractId = $rowPPh->contract_id;
						$cekLangsir = $rowPPh->langsir;

						if($cekLangsir != 1){
						 insertGeneralLedger($myDatabase, 'STOCK TRANSIT', "NULL", "NULL", $contractId);
						 insertReportGL($myDatabase, 'STOCK TRANSIT', "NULL", "NULL", $contractId);	
						}
                       

                    }


                } else {
                    $hasilCek[] = $row['stockpile_contract_id'];
                    $contractCek = $rowCek->contract_no;
                }
            }
        }

    } elseif ($actionType == 'UPDATE') {
        $array = $_POST['stockTransits'];
        $newArray = array();
        foreach (array_keys($array) as $fieldKey) {
            foreach ($array[$fieldKey] as $key => $value) {
                $newArray[$key][$fieldKey] = $value;
            }
        }
        foreach ($newArray as $row) {
            $sql = "UPDATE `stock_transit` SET send_weight = {$row['send_weight']}, netto_weight = {$row['netto_weight']}, loading_date = '{$row['loading_date']}'
                     WHERE stock_transit_id = {$row['id']}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        }
    } elseif ($actionType == 'DELETE') {
        $mutasiHeaderId = $myDatabase->real_escape_string($_POST['mutasiHeaderId']);
        $sql = "DELETE FROM `stock_transit` WHERE mutasi_header_id = {$mutasiHeaderId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    }

    if ($result !== false) {
        if ($actionType == 'INSERT') {
            if (isset($contractCek)) {
                $return_value = '|OK|Send Weight Pabric / Netto Weight Draft Survey on Contract ' . $contractCek . ' exceeds the quantity. Please create a new contract for the more quantity';
            } else {
                $return_value = '|OK|Stock Transit has successfully inserted';
            }
        } elseif ($actionType == 'UPDATE') {
            $return_value = '|OK|Stock Transit has successfully updated';
        } elseif ($actionType == 'DELETE') {
            $return_value = '|OK|Stock Transit has successfully deleted';
        }
    } else {
        $return_value = '|FAIL|Insert/update mutasi failed.||';
        echo $sql;
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'posting_transit_data') {

    $mutasiHeaderId = $myDatabase->real_escape_string($_POST['kodeMutasi']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockTransitId = $myDatabase->real_escape_string($_POST['stockTransitId']);
    $totalSendWeight = $myDatabase->real_escape_string($_POST['totalSendWeight']);
    $totalNettoWeight = $myDatabase->real_escape_string($_POST['totalNettoWeight']);
//    $stockTransitId2=$myDatabase->real_escape_string($_POST['stockTransitId2']);

    // get stockpile code
    $sql1 = "SELECT * from stockpile where stockpile_id = $stockpileId ";
    $resultStockpile = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
    if ($resultStockpile !== false && $resultStockpile->num_rows == 1) {
        $rowStockpile = $resultStockpile->fetch_object();
        $stockpileCode = $rowStockpile->stockpile_code;
    }
    $sqlTax = "SELECT total FROM mutasi_header WHERE mutasi_header_id = $mutasiHeaderId";
    $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
    if ($resultTax->num_rows == 1) {
        $sqlTax = $resultTax->fetch_object();
        $mutasi_value = $sqlTax->total;
        $mutasiValueTon = $mutasi_value / $totalSendWeight;
    }
    $sql2 = "SELECT st.*,c.`price` FROM stock_transit st
                LEFT JOIN `stockpile_contract` sc ON sc.`stockpile_contract_id`=st.`stockpile_contract_id`
                LEFT JOIN contract c ON c.`contract_id`=sc.`contract_id` where st.stock_transit_id in ($stockTransitId);";
//    echo $sql2;
    $resultPrice = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
    $checkSlipNo = $stockpileCode . '-' . $currentYear;

    $sqlCheck = "select md.status from mutasi_detail md where md.mutasi_header_id = $mutasiHeaderId";
    $resultCheck = $myDatabase->query($sqlCheck, MYSQLI_STORE_RESULT);
    $status = array();
    while ($rowCheck = $resultCheck->fetch_array()) {
        $status[] = $rowCheck['status'];
    }
    if (count(array_unique($status)) === 1 && end($status) === '1') {
        if ($resultPrice !== false && $resultPrice->num_rows > 0) {
            while ($row = $resultPrice->fetch_array()) {
                $sql2 = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                if ($resultSlip->num_rows == 0) {
                    $sql2 = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo . '-' . $nextSlipNo;

                $unitCost = $row['price'];
                $sendWeightTransit = $row['send_weight'];
                $nettoTransit = $row['netto_weight'];
                $nettoStockpile = $sendWeightTransit * $totalNettoWeight / $totalSendWeight;
                $shrink = $sendWeightTransit - $nettoStockpile;
                if ($shrink <= 0) {
                    $shrink = 0;
                } else {
                    $shrink;
                }
                $shrinkAmount = $shrink * ($mutasiValueTon + $unitCost);
                $shrinkValueTon = $shrinkAmount / $nettoStockpile;
                $unitPrice = $unitCost + $mutasiValueTon + $shrinkValueTon;
                $inventoryValue = $nettoStockpile * $unitPrice;
                $stockTransit = $row['stock_transit_id'];
                $stockpileContractId = $row['stockpile_contract_id'];

                $InsertTT = "INSERT INTO transaction (slip_no,unit_price,send_weight,netto_weight,shrink,shrink_amount,shrink_price,transaction_date,unloading_date,
                                                transaction_type,quantity,inventory_value,delivery_status,block,
                                                posting_status,stock_transit_id,notim_status,stockpile_contract_id,
                                                mutasi_id,mutasi_amount,unit_cost,entry_by,entry_date)
                                        VALUES ('{$slipNo}', {$unitPrice},{$sendWeightTransit},{$nettoStockpile},{$shrink},
                                                {$shrinkAmount},{$shrinkValueTon},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),
                                                1,{$nettoStockpile},{$inventoryValue},0,'NONE',
                                                0,{$stockTransit},0,$stockpileContractId,
                                                {$mutasiHeaderId},{$mutasiValueTon},{$unitCost},{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'));";

                $res = $myDatabase->query($InsertTT, MYSQLI_STORE_RESULT);
                if ($res !== false) {
                    $updateST = "update stock_transit set status = 1 where stock_transit_id = $stockTransit";
                    $resultUpdate = $myDatabase->query($updateST, MYSQLI_STORE_RESULT);
                } else {
                    $return_value = '|FAIL|Insert Posting failed.|';
                }
            }

            if ($resultUpdate !== false) {
                //Set Status Mutasi Header 1
                $updateMH = "update mutasi_header set status = 1 where mutasi_header_id = $mutasiHeaderId";
                $resultUpdate = $myDatabase->query($updateMH, MYSQLI_STORE_RESULT);
                $return_value = '|OK|Posting Transit has successfully inserted/updated.|';
            } else {
                $return_value = '|FAIL|Insert Posting failed.|';
                echo $sql4;
            }
        } else {
            $return_value = '|FAIL|Insert Failed.|';
        }
    } else {
        $return_value = '|FAIL|INVOICE NOT REGISTER|';
    }


    echo $return_value;

} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'posting_transit') {

    $sql = "select stockpile_to from mutasi_header where mutasi_header_id ={$_POST['kodeMutasi']}";
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    $row = $result->fetch_object();
    $stockpileId = $row->stockpile_to;
    $type = $_POST['type'];

    if ($type = 'calculateNettoSendwWeight') {
        $sql = "select * from transaction_timbangan where mutasi_header_id = {$_POST['kodeMutasi']} and stockpile_id = {$stockpileId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $totalNettoWeight = 0;
        if ($result->num_rows > 0) {
            while ($row = $result->fetch_array()) {
                $totalNettoWeight += $row['netto_weight'];
            }
        }

        $sql1 = "select * from stock_transit where mutasi_header_id = {$_POST['kodeMutasi']}";
        $result = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
        $totalSendWeight = 0;
        if ($result->num_rows > 0) {
            while ($row = $result->fetch_array()) {
                $totalSendWeight += $row['send_weight'];
            }
        }

        echo $totalNettoWeight . '|' . $totalSendWeight;
    }

} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'posting_mutasi_ok') {
    // <editor-fold defaultstate="collapsed" desc="posting_mutasi_data">

    $return_value = '';
    $selectedCheck = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $mutasiHeaderId = $myDatabase->real_escape_string($_POST['mutasiHeaderId']);
    // </editor-fold>

    if (isset($_POST['checks'])) {
        $checks = $_POST['checks'];
        for ($i = 0; $i < sizeof($checks); $i++) {
            $notimId = $checks[$i];

            if ($selectedCheck == '') {
                $selectedCheck .= $notimId;
            } else {
                $selectedCheck .= ', ' . $notimId;
            }
        }
    }

    $sqlNotim = "SELECT * FROM `transaction` WHERE transaction_id IN ({$selectedCheck})";
    $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
    if ($resultNotim !== false && $resultNotim->num_rows > 0) {
        while ($rowNotim = $resultNotim->fetch_object()) {
            $transactionId = $rowNotim->transaction_id;


            if ($transactionId != '') {

                $sql = "UPDATE transaction SET posting_status = 2 WHERE transaction_id = {$transactionId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);

                $return_value = '|OK|Mutasi has successfully posted.|';

            } else {
                $return_value = '|FAIL|Record not found.|';
            }

        }
    }
    echo $return_value;
    // </editor-fold>
}  elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'mutasi_data') {
    // <editor-fold defaultstate="collapsed" desc="mutasi_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $actionType = $myDatabase->real_escape_string($_POST['actionType']);
    $mutasiId = $myDatabase->real_escape_string($_POST['mutasiId']);
    $stockpileFrom = $myDatabase->real_escape_string($_POST['stockpileFrom']);
    $stockpileTo = $myDatabase->real_escape_string($_POST['stockpileTo']);
    $tanggalMutasi = $myDatabase->real_escape_string($_POST['tanggalMutasi']);
    $keterangan = $myDatabase->real_escape_string($_POST['keterangan']);
    $total = 0;
    // </editor-fold>

    $date = strtotime($tanggalMutasi);
    $newFormatDate = date('Y-m-d', $date);
    if ($actionType == 'INSERT') {
        // <editor-fold defaultstate="collapsed" desc="Generate Kode Mutasi">
        $sql = "SELECT kode_mutasi FROM mutasi_header WHERE stockpile_from = {$stockpileFrom} AND stockpile_to = {$stockpileTo} ORDER BY mutasi_header_id DESC LIMIT 1";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        //Stockpile From
        $sqFrom = "SELECT stockpile_code FROM stockpile WHERE stockpile_id = {$stockpileFrom} ";
        $resultFrom = $myDatabase->query($sqFrom, MYSQLI_STORE_RESULT);
        $rowFrom = $resultFrom->fetch_object();
        //Stockpile To
        $sqTo = "SELECT stockpile_code FROM stockpile WHERE stockpile_id = {$stockpileTo} ";
        $resultTo = $myDatabase->query($sqTo, MYSQLI_STORE_RESULT);
        $rowTo = $resultTo->fetch_object();

        if ($result->num_rows == 1) {
            $row = $result->fetch_object();
            $splitPoNo = explode('-', $row->kode_mutasi);
            $lastExplode = count($splitPoNo) - 1;
            $nextPoNo = ((float)$splitPoNo[$lastExplode]) + 1;
            $kodeMutasi = $rowFrom->stockpile_code . '-' . $rowTo->stockpile_code . '-' . $newFormatDate . '-' . $nextPoNo;
        } else {
            $kodeMutasi = $rowFrom->stockpile_code . '-' . $rowTo->stockpile_code . '-' . $newFormatDate . '-1';
        }
        //</editor-fold>
        $sql = "INSERT INTO `mutasi_header` (kode_mutasi, total, stockpile_from, stockpile_to, tanggal_mutasi, keterangan) VALUES ('{$kodeMutasi}',{$total}, {$stockpileFrom},{$stockpileTo}, '{$newFormatDate}','{$keterangan}')";
    } elseif ($actionType == 'UPDATE') {
        $sql = "UPDATE `mutasi_header` SET stockpile_from = {$stockpileFrom}, stockpile_to = {$stockpileTo}, keterangan = '{$keterangan}' WHERE mutasi_header_id = {$mutasiId}";
    } elseif ($actionType == 'DELETE') {
        $sql = "DELETE FROM `mutasi_header` WHERE mutasi_header_id = {$mutasiId}";
    } else {

    }
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($result !== false) {
        if ($actionType == 'INSERT') {
            $return_value = '|OK|Mutasi has successfully inserted';
        } elseif ($actionType == 'UPDATE') {
            $return_value = '|OK|Mutasi has successfully updated';
        } elseif ($actionType == 'DELETE') {
            $return_value = '|OK|Mutasi has successfully deleted';
        }

    } else {
        $return_value = '|FAIL|Insert/update mutasi failed.||';
        echo $sql;
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'mutasi_detail') {
    // <editor-fold defaultstate="collapsed" desc="mutasi_detail">
    $return_value = '';
    $boolNew = false;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $actionType = $myDatabase->real_escape_string($_POST['actionType']);
    $mutasiDetailId = $myDatabase->real_escape_string($_POST['mutasiDetailId']);
    if ($actionType !== 'DELETE') {
        $vendorType = $myDatabase->real_escape_string($_POST['vendorType']);
        $mutasiId = $myDatabase->real_escape_string($_POST['mutasiId']);
        $tipeBiaya = $myDatabase->real_escape_string($_POST['tipeBiaya']);
        $qty = floatval($myDatabase->real_escape_string($_POST['qty']));
        $price = floatval($myDatabase->real_escape_string($_POST['price']));
        $total = floatval($myDatabase->real_escape_string($_POST['total']));
        $accountId = $myDatabase->real_escape_string($_POST['accountId']);
        if (isset($_POST['ppn'])) {
            $ppn = $myDatabase->real_escape_string($_POST['ppn']);
            $ppnId = $myDatabase->real_escape_string($_POST['ppnTaxId']);
        } else {
            $ppn = 0;
            $ppnId = 0;
        }

        if ($actionType == 'INSERT') {
            $terminId = $myDatabase->real_escape_string($_POST['terminId']);
        }
        if ($vendorType == 'General' && $actionType != 'UPDATE') {
            if (isset($_POST['pphVendorId'])) {
                $pphId = $myDatabase->real_escape_string($_POST['pphVendorId']);

            } else {
                $pphId = 0;
            }
        } else {
            if (isset($_POST['pph']) && $_POST['pph'] != 0 && isset($_POST['pphTaxId'])) {
                $pph = $myDatabase->real_escape_string($_POST['pph']);
                $pphId = $myDatabase->real_escape_string($_POST['pphTaxId']);
            } else {
                $pph = 0;
                $pphId = 0;
            }
        }
        //Get Vendor
        if (isset($vendorType) && $vendorType == 'Pks') {
            $vendor = $myDatabase->real_escape_string($_POST['vendorName']);
        } elseif (isset($vendorType) && $vendorType == 'General') {
            $vendor = $myDatabase->real_escape_string($_POST['vendorNameGeneral']);
        } elseif (isset($vendorType) && $vendorType == 'Freight') {
            $vendor = $myDatabase->real_escape_string($_POST['vendorNameFreight']);
        } elseif (isset($vendorType) && $vendorType == 'Labor') {
            $vendor = $myDatabase->real_escape_string($_POST['vendorNameLabor']);
        } elseif (isset($vendorType) && $vendorType == 'Handling') {
            $vendor = $myDatabase->real_escape_string($_POST['vendorNameHandling']);
        } elseif (isset($vendorType) && $vendorType == 'PettyCash') {
            $vendor = $myDatabase->real_escape_string($_POST['vendorNamaPettyCash']);
        } else {
            $vendor = 'NULL';
        }
        // </editor-fold>
        //check total termin percentage
        if ($actionType === 'INSERT') {
            $sql1 = "select total_percentage from master_termin where id = {$terminId}";
            $totalTermin = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
            $rowTotal = $totalTermin->fetch_object();
        }
    }

    if (isset($rowTotal->total_percentage) && $rowTotal->total_percentage == 100 && $actionType == 'INSERT') {

        $vendor = explode("-", $vendor);
        $vendorId = $vendor[0];
        $vendorName = $vendor[1];
        $totalPrice = $qty * $price;

        $sql3 = "select id, percentage from termin_detail td where td.termin_id = {$terminId}";
        $terminPercent = $myDatabase->query($sql3, MYSQLI_STORE_RESULT);

        if ($terminPercent !== false && $terminPercent->num_rows > 0) {
            while ($rowTermin = $terminPercent->fetch_object()) {
                $totalFinal = $totalPrice * $rowTermin->percentage / 100;
                $ppnConverted = $totalFinal * $ppn / 100;
                if ($vendorType == 'General') {
                    if ($pphId != 0) {
                        $sql = "select tax_value from tax where tax_id = {$pphId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        $row = $result->fetch_object();
                        $pph = $row->tax_value;
                    } else {
                        $pph = 0;
                    }
                    $pphConverted = $totalFinal * $pph / 100;
                } else {
                    $pphConverted = $totalFinal * $pph / 100;
                }
                $sql = "INSERT INTO `mutasi_detail` (mutasi_header_id, biaya_mutasi_id, vendor_type,vendor, qty,price, total,total_per_termin, account_id,termin_detail_id,ppnId,ppn,ppn_converted,pphId,pph,pph_converted,general_vendor_id)
                        VALUES ({$mutasiId}, '{$tipeBiaya}', '{$vendorType}', '{$vendorName}',{$qty},{$price},{$total}, {$totalFinal},{$accountId},{$rowTermin->id},{$ppnId},{$ppn},{$ppnConverted},{$pphId},{$pph},{$pphConverted}, {$vendorId})";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                $totalMutasiHeader += $totalFinal;
            }
            $sql2 = "update `mutasi_header` set total = {$totalMutasiHeader} where mutasi_header_id = {$mutasiId} ";
            $result = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
        }
        if ($result !== false) {
            $return_value = '|OK|Mutasi Detail has successfully inserted';
        } else {
            $return_value = '|FAIL|Insert mutasi failed.||';
            echo $sql;
        }
    } elseif ($actionType == 'UPDATE') {
        $totalPrice = $qty * $price;
        $percentage = $_POST['terminPercentage'];
        $totalTermin = $totalPrice * $percentage / 100;
        $ppnConverted = $totalTermin * $ppn / 100;
        $pphConverted = $totalTermin * $pph / 100;

        $sql = "UPDATE `mutasi_detail` SET 
                tipe_biaya = '{$tipeBiaya}', qty = {$qty}, price = {$price}, total = {$totalPrice}, total_per_termin = {$totalTermin}, ppn_converted = {$ppnConverted}, pph_converted = {$pphConverted}
                WHERE mutasi_detail_id = {$mutasiDetailId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $return_value = '|OK|Mutasi Detail has successfully updated';
    } elseif ($actionType == 'DELETE') {
        $sql = "DELETE FROM `mutasi_detail` WHERE mutasi_detail_id = {$mutasiDetailId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $return_value = '|OK|Mutasi has successfully deleted';
    } else {
        $return_value = '|FAIL|Termin Kurang Dari 100% silahkan pilih termin lain.||';
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'biaya_mutasi_data') {
    // <editor-fold defaultstate="collapsed" desc="biaya_mutasi_data">

    $return_value = '';

    $actionType = $myDatabase->real_escape_string($_POST['actionType']);
    $biayaMutasiId = $myDatabase->real_escape_string($_POST['biayaMutasiId']);
    $tipeBiaya = $myDatabase->real_escape_string($_POST['tipeBiaya']);


    if ($actionType == 'INSERT') {
        $sql = "INSERT INTO `master_biaya_mutasi` (tipe_biaya, entry_by, entry_date) 
                VALUES ('{$tipeBiaya}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    } elseif ($actionType == 'UPDATE') {
        $sql = "UPDATE `master_biaya_mutasi` SET tipe_biaya = '{$tipeBiaya}', entry_by = {$_SESSION['userId']}, entry_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s')  WHERE id = {$biayaMutasiId}";
    } elseif ($actionType == 'DELETE') {
        $sql = "DELETE FROM `master_biaya_mutasi` WHERE id = {$biayaMutasiId}";
    } else {
    }
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($result !== false) {
        if ($actionType == 'INSERT') {
            $return_value = '|OK|Biaya Mutasi has successfully inserted';
        } elseif ($actionType == 'UPDATE') {
            $return_value = '|OK|Biaya Mutasi has successfully updated';
        } elseif ($actionType == 'DELETE') {
            $return_value = '|OK|Biaya Mutasi has successfully deleted';
        }
    } else {
        $return_value = '|FAIL|Insert/Update Biaya Mutasi Failed||';
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'mutasi_contract') {
    // <editor-fold defaultstate="collapsed" desc="mutasi_contract">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $actionType = $myDatabase->real_escape_string($_POST['actionType']);
    $mutasiId = $myDatabase->real_escape_string($_POST['mutasiId']);
    $mutasiContractId = $myDatabase->real_escape_string($_POST['mutasiContractId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    // </editor-fold>
    if ($actionType == 'INSERT') {
        $sql = "INSERT INTO `mutasi_contract` (mutasi_header_id, stockpile_contract_id, entry_by, entry_date) VALUES ('{$mutasiId}',{$stockpileContractId},{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    } elseif ($actionType == 'UPDATE') {
        $sql = "UPDATE `mutasi_contract` SET stockpile_contract_id = {$stockpileContractId} WHERE id = {$mutasiContractId}";
    } elseif ($actionType == 'DELETE') {
        $sql = "DELETE FROM `mutasi_contract` WHERE id = {$mutasiContractId}";
    } else {

    }
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($result !== false) {
        if ($actionType == 'INSERT') {
            $return_value = '|OK|Mutasi Contract has successfully inserted';
        } elseif ($actionType == 'UPDATE') {
            $return_value = '|OK|Mutasi Contract has successfully updated';
        } elseif ($actionType == 'DELETE') {
            $return_value = '|OK|Mutasi Contract has successfully deleted';
        }

    } else {
        $return_value = '|FAIL|Insert/update Mutasi Contract failed.||';
        echo $sql;
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'pic_finance_data') {
    // <editor-fold defaultstate="collapsed" desc="pic_finance_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $picFinanceId = $myDatabase->real_escape_string($_POST['picFinanceId']);
    $picFinanceName = $myDatabase->real_escape_string($_POST['picFinanceName']);
    // </editor-fold>

    if ($picFinanceId == '') {
        $boolNew = true;
    }

    if ($picFinanceName != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `master_pic_finance` WHERE UPPER(pic_name) = UPPER('{$picFinanceName}')";
        } else {
            $sql = "SELECT * FROM `master_pic_finance` WHERE UPPER(pic_name) = UPPER('{$picFinanceName}') AND id <> {$picFinanceId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `master_pic_finance` (pic_name, entry_by, entry_date) VALUES ("
                    . "'{$picFinanceName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `master_pic_finance` SET "
                    . "pic_name = '{$picFinanceName}' "
                    . "WHERE id = {$picFinanceId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $picFinanceId = $myDatabase->insert_id;
                }
                $return_value = '|OK|PIC Finance has successfully inserted/updated.|' . $picFinanceId . '|';
            } else {
                $return_value = '|FAIL|Insert/update PIC Finance failed.||';
            }
        } else {
            $return_value = '|FAIL|PIC Finance already exists.||';
            echo $sql;
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    echo $return_value;
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_pic_finance') {
    // <editor-fold defaultstate="collapsed" desc="delete_pic_finance">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $picFinanceId = $myDatabase->real_escape_string($_POST['picFinanceId']);
    // </editor-fold>
    if ($picFinanceId != '') {
        $sql = "SELECT * FROM `logbook` WHERE master_pic_finance_id = {$picFinanceId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `master_pic_finance` WHERE id = {$picFinanceId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|PIC Finance has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete PIC Finance failed.|';
            }
        } else {
            $return_value = '|FAIL|PIC Finance use in Logbook.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'logbook_category_data') {
    // <editor-fold defaultstate="collapsed" desc="logbook_category_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $logbookCategoryId = $myDatabase->real_escape_string($_POST['logbookCategoryId']);
    $logbookCategoryName = $myDatabase->real_escape_string($_POST['logbookCategoryName']);
    // </editor-fold>

    if ($logbookCategoryId == '') {
        $boolNew = true;
    }

    if ($logbookCategoryName != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `logbook_category` WHERE UPPER(name) = UPPER('{$logbookCategoryName}')";
        } else {
            $sql = "SELECT * FROM `logbook_category` WHERE UPPER(name) = UPPER('{$logbookCategoryName}') AND id <> {$logbookCategoryId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `logbook_category` (name, entry_by, entry_date) VALUES ("
                    . "'{$logbookCategoryName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `logbook_category` SET "
                    . "name = '{$logbookCategoryName}' "
                    . "WHERE id = {$logbookCategoryId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $logbookCategoryId = $myDatabase->insert_id;
                }
                $return_value = '|OK|Logbook Category has successfully inserted/updated.|' . $logbookCategoryId . '|';
            } else {
                $return_value = '|FAIL|Insert/update Logbook Category failed.||';
            }
        } else {
            $return_value = '|FAIL|Logbook Category already exists.||';
            echo $sql;
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    echo $return_value;
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_logbook_category') {
    // <editor-fold defaultstate="collapsed" desc="delete_logbook_category">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $logbookCategoryId = $myDatabase->real_escape_string($_POST['logbookCategoryId']);
    // </editor-fold>

    if ($logbookCategoryId != '') {
        $sql = "SELECT * FROM `logbook` WHERE logbook_category_id = {$logbookCategoryId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `logbook_category` WHERE id = {$logbookCategoryId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                $return_value = '|OK|Logbook Category has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete Logbook Category failed.|';
            }
        } else {
            $return_value = '|FAIL|Logbook Category use in Logbook.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'logbook_sub_category_data') {
    // <editor-fold defaultstate="collapsed" desc="logbook_sub_category_data">

    $return_value = '';
    $boolNew = false;

    //        $freightLoginId = $myDatabase->real_escape_string($_POST['freightLoginId']);
    $logbookCategoryId = $myDatabase->real_escape_string($_POST['logbookCategoryId']);
    $logbookSubCategoryName = $myDatabase->real_escape_string($_POST['logbookSubCategoryName']);

    if ($logbookSubCategoryId == '') {
        $boolNew = true;
    }
    // </editor-fold>


    if ($logbookCategoryId != '' && $logbookSubCategoryName != '') {
        if ($boolNew) {
            $sql = "INSERT INTO logbook_inv_category (logbook_category_id, name, entry_by, entry_date)
                                VALUES ({$logbookCategoryId}, '{$logbookSubCategoryName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            $return_value = '|OK|Sub Category has successfully inserted/updated.|';
        } else {
            $return_value = '|FAIL|Insert Sub Category failed.|';
            echo $sql;
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
        echo $sql;
    }

    echo $return_value;
    //    // </editor-fold>
} elseif (isset($_POST['action']) && $_POST['action'] == 'edit_logbook_sub_category') {
    // <editor-fold defaultstate="collapsed" desc="edit_logbook_sub_category">

    $return_value = '';
    $boolContinue = true;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $logbookSubCategoryId = $myDatabase->real_escape_string($_POST['logbookSubCategoryId']);
    $logbookSubCategoryName = $myDatabase->real_escape_string($_POST['logbookSubCategoryName']);

    $sql = "UPDATE logbook_inv_category 
            SET id = $logbookSubCategoryId, name = '$logbookSubCategoryName' WHERE id = $logbookSubCategoryId";
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//    var_dump($result);
    if ($result !== false) {

        $return_value = '|OK|Sub Category has been updated';
    } else {
        echo $sql;
        $return_value = '|FAIL|Please fill required fields.|';
    }
    echo $return_value;
    // </editor-fold>
} //

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_logbook_sub_category') {
    // <editor-fold defaultstate="collapsed" desc="delete_logbook_sub_category">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $logbookSubCategoryId = $myDatabase->real_escape_string($_POST['logbookSubCategoryId']);

    if ($logbookSubCategoryId != '') {
        $sql = "DELETE FROM `logbook_inv_category` WHERE id = {$logbookSubCategoryId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $return_value = '|OK|Sub Category has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete Sub Category failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    echo $return_value;
    // </editor-fold>
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'logbook_requester_data') {
    // <editor-fold defaultstate="collapsed" desc="logbook_requester_data">

    $return_value = '';
    $boolNew = false;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $logbookRequesterId = $myDatabase->real_escape_string($_POST['logbookRequesterId']);
    $logbookRequesterName = $myDatabase->real_escape_string($_POST['logbookRequesterName']);
    // </editor-fold>

    if ($logbookRequesterId == '') {
        $boolNew = true;
    }

    if ($logbookRequesterName != '') {
        if ($boolNew) {
            $sql = "SELECT * FROM `master_requester` WHERE UPPER(requester) = UPPER('{$logbookRequesterName}')";
        } else {
            $sql = "SELECT * FROM `master_requester` WHERE UPPER(requester) = UPPER('{$logbookRequesterName}') AND id <> {$logbookRequesterId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            if ($boolNew) {
                $sql = "INSERT INTO `master_requester` (requester, entry_by, entry_date) VALUES ("
                    . "'{$logbookRequesterName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `master_requester` SET "
                    . "requester = '{$logbookRequesterName}' "
                    . "WHERE id = {$logbookRequesterId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false) {
                if ($boolNew) {
                    $logbookRequesterId = $myDatabase->insert_id;
                }
                $return_value = '|OK|Logbook Requester has successfully inserted/updated.|' . $logbookRequesterId . '|';
            } else {
                $return_value = '|FAIL|Insert/update Logbook Requester failed.||';
            }
        } else {
            $return_value = '|FAIL|Logbook Requester already exists.||';
            echo $sql;
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    echo $return_value;
} elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_logbook_requester') {
    // <editor-fold defaultstate="collapsed" desc="delete_logbook_requester">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $logbookRequesterId = $myDatabase->real_escape_string($_POST['logbookRequesterId']);
    // </editor-fold>

    if ($logbookRequesterId != '') {
        $sql = "SELECT * FROM `logbook` WHERE master_requester_id = {$logbookRequesterId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `master_requester` WHERE id = {$logbookRequesterId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false && $result->num_rows == 0) {
                $return_value = '|OK|Logbook Requester has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete Logbook Requester failed.|';
            }
        } else {
            $return_value = '|FAIL|Logbook Requester use in Logbook.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    echo $return_value;
// </editor-fold>
}    

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_freight_login') {
    // <editor-fold defaultstate="collapsed" desc="delete_vendor_login">

    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightLoginId = $myDatabase->real_escape_string($_POST['freightLoginId']);
    // </editor-fold>
    
    if($freightLoginId != '') {
        $sql = "DELETE FROM `freight_login` WHERE freight_login_id = {$freightLoginId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    
            if($result !== false) {
                $return_value = '|OK|Freigh User has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete Freight User failed.|';
            }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    echo $return_value;
    // </editor-fold>
}

//     $return_value = '';

//     // <editor-fold defaultstate="collapsed" desc="POST variables">
//     $freightLoginId = $myDatabase->real_escape_string($_POST['freightLoginId']);
//     // </editor-fold>

//     if($freightLoginId!= '') {
//         $sql = "SELECT * FROM freight_login WHERE freight_login_id = {$freightLoginId}";
//         $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

//         if($result !== false && $result->num_rows == 0) {
//             $sql = "DELETE FROM freight_login WHERE freight_login_id = {$freightLoginId}";
//             $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

//             if($result !== false) {
//                 $return_value = '|OK|Freight User has successfully deleted.|';
//             } else {
//                 $return_value = '|FAIL|Freight User Login failed.|';
//             }
//         } else {
//             $return_value = '|FAIL|Freight Login in use in condition.|';
//         }
//     } else {
//         $return_value = '|FAIL|Record not found.|';
//     }

//     echo $return_value;
//     // </editor-fold>
// }

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'freight_bank_data') {
    // <editor-fold defaultstate="collapsed" desc="user_stockpile_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightId = $myDatabase->real_escape_string($_POST['modalFreightId']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
	$branch = $myDatabase->real_escape_string($_POST['branch']);
	$accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
	$beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
	$swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
  $masterBankId = $myDatabase->real_escape_string($_POST['masterBank']);
    // </editor-fold>

    if ($freightId != '' && $bankName != '' && $branch != '' && $accountNo != '' && $beneficiary != '') {
        $sql = "INSERT INTO freight_bank (freight_id, bank_name, branch, account_no, beneficiary, swift_code,master_bank_id)
        VALUES ({$freightId}, '{$bankName}', '{$branch}', '{$accountNo}', '{$beneficiary}', '{$swiftCode}',$masterBankId )";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|Bank added successfully.|';
        } else {
            $return_value = '|FAIL|Failed adding Bank.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_module') {
    // <editor-fold defaultstate="collapsed" desc="delete_module">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $moduleId = $myDatabase->real_escape_string($_POST['moduleId']);
    // </editor-fold>
    
    if($moduleId != '') {
        $sql = "DELETE FROM `user_module` WHERE module_id = {$moduleId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        $sql = "DELETE FROM `module` WHERE module_id = {$moduleId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|Module has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'module_data') {
    // <editor-fold defaultstate="collapsed" desc="module_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $moduleId = $myDatabase->real_escape_string($_POST['moduleId']);
    $moduleName = $myDatabase->real_escape_string($_POST['moduleName']);
    $moduleDescription = $myDatabase->real_escape_string($_POST['moduleDescription']);
    $active = $myDatabase->real_escape_string($_POST['active']);
    // </editor-fold>
    
    if ($moduleId == '') {
        $boolNew = true;
    }
    
    if($moduleName != '' && $active != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `module` WHERE UPPER(module_name) = UPPER('{$moduleName}')";
        } else {
            $sql = "SELECT * FROM `module` WHERE UPPER(module_name) = UPPER('{$moduleName}') AND module_id <> {$moduleId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `module` (module_name, module_description, active, entry_by, entry_date) VALUES ("
                        . "'{$moduleName}', '{$moduleDescription}', {$active}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `module` SET "
                        . "module_name = '{$moduleName}', "
                        . "module_description = '{$moduleDescription}', "
                        . "active = {$active} "
                        . "WHERE module_id = {$moduleId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $moduleId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Module has successfully inserted/updated.|'. $moduleId .'|';
            } else {
                $return_value = '|FAIL|Insert/update module failed.||';
            }
        } else {
            $return_value = '|FAIL|Module already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}


elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_freight') {
    // <editor-fold defaultstate="collapsed" desc="delete_freight">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    // </editor-fold>
    
    if($freightId != '') {
        $sql = "SELECT * FROM `freight_cost` WHERE freight_id = {$freightId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `freight` WHERE freight_id = {$freightId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Freight has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete freight failed.|';
            }
        } else {
            $return_value = '|FAIL|Freight in use in stockpile freight cost.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'freight_data') {
    // <editor-fold defaultstate="collapsed" desc="freight_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    $freightCode = $myDatabase->real_escape_string($_POST['freightCode']);
    $freightSupplier = $myDatabase->real_escape_string($_POST['freightSupplier']);
    $freightAddress = $myDatabase->real_escape_string($_POST['freightAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
	$npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
	$branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
	$active = $myDatabase->real_escape_string($_POST['active']);
	$freightRule = $myDatabase->real_escape_string($_POST['freightRule']);
	$nik = $myDatabase->real_escape_string($_POST['nik']);
    // </editor-fold>
    
    if ($freightId == '') {
        $boolNew = true;
    }
    
    if($freightCode != '' && $freightSupplier != '' && $freightAddress != '' && $npwp != '' && $npwp_name != '' && $ppn != '' && $pph != '' && $active != '' && $freightRule != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `freight` WHERE UPPER(freight_supplier) = UPPER('{$freightSupplier}') AND UPPER(freight_code) = UPPER('{$freightCode}')";
        } else {
            $sql = "SELECT * FROM `freight` WHERE UPPER(freight_supplier) = UPPER('{$freightSupplier}') AND UPPER(freight_code) = UPPER('{$freightCode}') AND freight_id <> {$freightId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;
            
            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }
            
            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }
            
            if($boolNew) {
                $sql = "INSERT INTO `freight` (freight_code, freight_supplier, freight_address, nik, npwp, npwp_name, bank_name, branch, account_no, beneficiary, "
                        . "swift_code, ppn_tax_id, pph_tax_id, ppn, pph, active, freight_rule, entry_by, entry_date) VALUES ("
                        . "UPPER('{$freightCode}'), '{$freightSupplier}', '{$freightAddress}', '{$nik}', '{$npwp}', '{$npwp_name}', '{$bankName}', '{$branch}', '{$accountNo}', "
                        . "'{$beneficiary}', '{$swiftCode}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$active}, {$freightRule}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `freight` SET "
                        . "freight_code = UPPER('{$freightCode}'), "
                        . "freight_supplier = '{$freightSupplier}', "
                        . "freight_address = '{$freightAddress}', "
						. "nik = '{$nik}', "
                        . "npwp = '{$npwp}', "
						. "npwp_name = '{$npwp_name}', "
                        . "bank_name = '{$bankName}', "
						. "branch = '{$branch}', "
                        . "account_no = '{$accountNo}', "
                        . "beneficiary = '{$beneficiary}', "
                        . "swift_code = '{$swiftCode}', "
                        . "ppn_tax_id = {$ppn}, "
                        . "pph_tax_id = {$pph}, "
                        . "ppn = {$ppnValue}, "
                        . "pph = {$pphValue}, "
						. "active = {$active}, "
						. "freight_rule = {$freightRule} "
                        . "WHERE freight_id = {$freightId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $freightId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Freight has successfully inserted/updated.|'. $freightId .'|';
            } else {
                $return_value = '|FAIL|Insert/update freight failed.||';
            }
        } else {
            $return_value = '|FAIL|Freight supplier and vendor already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'freight_group_data') {
    // <editor-fold defaultstate="collapsed" desc="freight_data">

    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightGroupId = $myDatabase->real_escape_string($_POST['freightGroupId']);
    $freightGroupName = $myDatabase->real_escape_string($_POST['freightGroupName']);
    // </editor-fold>
    
    if ($freightGroupId == '') {
        $boolNew = true;
    }
    
    if($freightGroupName != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `master_group` WHERE UPPER(group_name) = UPPER('{$freightGroupName}')";
        } else {
            $sql = "SELECT * FROM `master_group` WHERE UPPER(group_name) = UPPER('{$freightGroupName}') AND master_group_id <> {$freightGroupId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `master_group` (group_name, entry_by, entry_date) VALUES ("
                        . "'{$freightGroupName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `master_group` SET "
                        . "group_name = '{$freightGroupName}' "
                        . "WHERE master_group_id = {$freightGroupId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $freightGroupId = $myDatabase->insert_id;
                }
                $return_value = '|OK|Group has successfully inserted/updated.|'. $freightGroupId .'|';
            } else {
                $return_value = '|FAIL|Insert/update Group failed.||';
            }
        } else {
            $return_value = '|FAIL|Group already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    echo $return_value;
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_freight_group') {
    // <editor-fold defaultstate="collapsed" desc="delete_freight">

    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightGroupId = $myDatabase->real_escape_string($_POST['freightGroupId']);
    // </editor-fold>
    
    if($freightGroupId != '') {
        $sql = "SELECT * FROM `freight_login` WHERE group_id = {$freightGroupId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `master_group` WHERE master_group_id = {$freightGroupId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Group has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete Group failed.|';
            }
        } else {
            $return_value = '|FAIL|Group use in Freight Login.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_vendor') {
    // <editor-fold defaultstate="collapsed" desc="delete_vendor">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    // </editor-fold>
    
    if($vendorId != '') {
        $contractCount = 0;
        $freightCount = 0;
        
        $sql = "SELECT * FROM `contract` WHERE vendor_id = {$vendorId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $contractCount = $result->num_rows;
        
        $sql = "SELECT * FROM `freight` WHERE vendor_id = {$vendorId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $freightCount = $result->num_rows;
        
        if($contractCount == 0 && $freightCount == 0) {
            $sql = "DELETE FROM `vendor` WHERE vendor_id = {$vendorId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Vendor has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete vendor failed.|';
            }
        } else {
            $return_value = '|FAIL|Vendor in use in freight and contract.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'general_vendor_pph') {
    // <editor-fold defaultstate="collapsed" desc="general_vendor_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $taxId = $myDatabase->real_escape_string($_POST['taxId']);
    
    // </editor-fold>
    
    
    
    if($vendorId != '' && $taxId != '' ) {
       
            
           
                $sql = "INSERT INTO `general_vendor_pph` (general_vendor_id, pph_tax_id) VALUES ({$vendorId},{$taxId})";
            
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $vendorId = $myDatabase->insert_id;
                }

                $return_value = '|OK|PPh General Vendor has successfully inserted.|'. $vendorId .'|';
            } else {
                $return_value = '|FAIL|Insert/update vendor failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_general_vendor') {
    // <editor-fold defaultstate="collapsed" desc="delete_general_vendor">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    // </editor-fold>
    
    if($vendorId != '') {
        $paymentCount = 0;
        
        $sql = "SELECT * FROM `payment` WHERE general_vendor_id = {$vendorId} AND payment_status = 0";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $contractCount = $result->num_rows;
        
        if($paymentCount == 0) {
            $sql = "DELETE FROM `general_vendor` WHERE general_vendor_id = {$vendorId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|General Vendor has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete vendor failed.|';
            }
        } else {
            $return_value = '|FAIL|General Vendor in use in payment.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'general_vendor_data') {
    // <editor-fold defaultstate="collapsed" desc="general_vendor_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    $vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
	$npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
	$branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    //$pph = $myDatabase->real_escape_string($_POST['pph']);
	$active = $myDatabase->real_escape_string($_POST['active']);
	$nik = $myDatabase->real_escape_string($_POST['nik']);
    // </editor-fold>
    
    if ($vendorId == '') {
        $boolNew = true;
    }
    
    if($vendorName != '' && $vendorAddress != '' && $npwp != '' && $npwp_name != ''&& $ppn != '' /*&& $pph != ''*/) {
        if($boolNew) {
            $sql = "SELECT * FROM `general_vendor` WHERE UPPER(general_vendor_name) = UPPER('{$vendorName}')";
        } else {
            $sql = "SELECT * FROM `general_vendor` WHERE UPPER(general_vendor_name) = UPPER('{$vendorName}') AND general_vendor_id <> {$vendorId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;
			$pph = 0;
            
            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }
            
            /*$sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }*/
            
            if($boolNew) {
                $sql = "INSERT INTO `general_vendor` (general_vendor_name, general_vendor_address, nik, npwp, npwp_name, bank_name, branch, account_no, beneficiary, "
                        . "swift_code, ppn_tax_id, pph_tax_id, ppn, pph, active, entry_by, entry_date) VALUES ("
                        . "'{$vendorName}', '{$vendorAddress}', '{$nik}', '{$npwp}', '{$npwp_name}', '{$bankName}', '{$branch}', '{$accountNo}', "
                        . "'{$beneficiary}', '{$swiftCode}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$active}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `general_vendor` SET "
                        . "general_vendor_name = '{$vendorName}', "
                        . "general_vendor_address = '{$vendorAddress}', "
						. "nik = '{$nik}', "
                        . "npwp = '{$npwp}', "
						. "npwp_name = '{$npwp_name}', "
                        . "bank_name = '{$bankName}', "
						. "branch = '{$branch}', "
                        . "account_no = '{$accountNo}', "
                        . "beneficiary = '{$beneficiary}', "
                        . "swift_code = '{$swiftCode}', "
                        . "ppn_tax_id = {$ppn}, "
                        . "pph_tax_id = {$pph}, "
                        . "ppn = {$ppnValue}, "
                        . "pph = {$pphValue}, "
						. "active = {$active} "
                        . "WHERE general_vendor_id = {$vendorId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $vendorId = $myDatabase->insert_id;
                }

                $return_value = '|OK|General Vendor has successfully inserted/updated.|'. $vendorId .'|';
            } else {
                $return_value = '|FAIL|Insert/update vendor failed.||';
            }
        } else {
            $return_value = '|FAIL|General Vendor already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_account') {
    // <editor-fold defaultstate="collapsed" desc="delete_account">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    // </editor-fold>
    
    if($accountId != '') {
        $sql = "SELECT * FROM `payment` WHERE account_id = {$accountId} AND payment_status = 0";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `account` WHERE account_id = {$accountId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Account has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete account failed.|';
            }
        } else {
            $return_value = '|FAIL|Account in use in payments.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'account_data') {
    // <editor-fold defaultstate="collapsed" desc="account_data">
    
    $return_value = '';
    $boolNew = false;
    $whereCondition = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $accountType = $myDatabase->real_escape_string($_POST['accountType']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $accountName = $myDatabase->real_escape_string($_POST['accountName']);
	$description = $myDatabase->real_escape_string($_POST['description']);
    // </editor-fold>
    
    if ($accountId == '') {
        $boolNew = true;
    }
    
    if($accountType == 1) {
        $whereCondition = " account_type in (0,1) ";
    } else {
        $whereCondition = " account_type = {$accountType} ";
    }
    
    if($accountType != '' && $accountNo != '' && $accountName != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `account` WHERE {$whereCondition} AND account_no = '{$accountNo}'";
        } else {
            $sql = "SELECT * FROM `account` WHERE {$whereCondition} AND account_no = '{$accountNo}' AND account_id <> {$accountId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                if($accountType == 1) {
                    $sql = "INSERT INTO `account` (account_type, account_no, account_name, description, entry_by, entry_date) VALUES ("
                            . "{$accountType}, '{$accountNo}', '{$accountName}', '{$description}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            
                } else {
                    $sql = "INSERT INTO `account` (account_type, account_no, account_name, description, entry_by, entry_date) VALUES ("
                            . "{$accountType}, '{$accountNo}', '{$accountName}', '{$description}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                }
            } else {
                $sql = "UPDATE `account` SET "
                        . "account_type = '{$accountType}', "
                        . "account_no = '{$accountNo}', "
                        . "account_name = '{$accountName}', "
						. "description = '{$description}' "
                        . "WHERE account_id = {$accountId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $accountId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Account has successfully inserted/updated.|'. $accountId .'|';
            } else {
                $return_value = '|FAIL|Insert/update account failed.||';
            }
        } else {
            $return_value = '|FAIL|Account already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_bank') {
    // <editor-fold defaultstate="collapsed" desc="delete_bank">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $bankId = $myDatabase->real_escape_string($_POST['bankId']);
    // </editor-fold>
    
    if($accountId != '') {
        $sql = "SELECT * FROM `payment` WHERE bank_id = {$bankId} AND payment_status = 0";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `bank` WHERE bank_id = {$bankId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Bank has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete bank failed.|';
            }
        } else {
            $return_value = '|FAIL|Bank in use in payments.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_tax') {
    // <editor-fold defaultstate="collapsed" desc="delete_vendor">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $taxId = $myDatabase->real_escape_string($_POST['taxId']);
    // </editor-fold>
    
    if($taxId != '') {
        $vendor = 0;
        $labor = 0;
		$generalVendor = 0;
		$freight = 0;
		$customer = 0;
        
        $sql = "SELECT * FROM `vendor` WHERE ppn_tax_id = {$taxId} OR pph_tax_id = {$taxId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $vendor = $result->num_rows;
        
        $sql = "SELECT * FROM `labor` WHERE ppn_tax_id = {$taxId} OR pph_tax_id = {$taxId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $labor = $result->num_rows;
		
		$sql = "SELECT * FROM `general_vendor` WHERE ppn_tax_id = {$taxId} OR pph_tax_id = {$taxId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $generalVendor = $result->num_rows;
		
		$sql = "SELECT * FROM `freight` WHERE ppn_tax_id = {$taxId} OR pph_tax_id = {$taxId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $freight = $result->num_rows;
		
		$sql = "SELECT * FROM `customer` WHERE ppn_tax_id = {$taxId} OR pph_tax_id = {$taxId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $customer = $result->num_rows;
        
        if($vendor == 0 && $labor == 0 && $generalVendor == 0 && $freight == 0 && $customer == 0) {
            $sql = "DELETE FROM `tax` WHERE tax_id = {$taxId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Tax has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete Tax failed.|';
            }
        } else {
            $return_value = '|FAIL|Tax in use in VENDOR, LABOR, GENERAL VENDOR, FREIGHT, CUSTOMER.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'tax_data') {
    // <editor-fold defaultstate="collapsed" desc="bank_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $taxId = $myDatabase->real_escape_string($_POST['taxId']);
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $taxType = $myDatabase->real_escape_string($_POST['taxType']);
    $taxCategory = $myDatabase->real_escape_string($_POST['taxCategory']);
    $taxName = $myDatabase->real_escape_string($_POST['taxName']);
    //$openingBalance = str_replace(",", "", $myDatabase->real_escape_string($_POST['openingBalance']));
    $taxValue = $myDatabase->real_escape_string($_POST['taxValue']);
    $active = $myDatabase->real_escape_string($_POST['active']);
    //$bankCode = $myDatabase->real_escape_string($_POST['bankCode']);
    // </editor-fold>
    
    if ($taxId == '') {
        $boolNew = true;
    }
    
    if($accountId != '' && $taxType != '' && $taxCategory != '' && $taxName != '' && $taxValue != '' && $active != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `tax` WHERE tax_name = '{$taxName}' AND tax_value = '{$taxValue}'";
        } else {
            $sql = "SELECT * FROM `tax` WHERE tax_name = '{$taxName}' AND tax_value = {$taxValue} AND tax_id <> {$taxId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `tax` (account_id, tax_type, tax_category, tax_name, tax_value, active, entry_by, entry_date) VALUES ("
                        . "{$accountId}, {$taxType}, {$taxCategory}, '{$taxName}', '{$taxValue}', {$active}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `tax` SET "
						. "account_id = {$accountId}, "
                        . "tax_type = {$taxType}, "
						. "tax_category = {$taxCategory}, "
                        . "tax_name = '{$taxName}', "
                        . "tax_value = '{$taxValue}', "
                        . "active = {$active} "
                        . "WHERE tax_id = {$taxId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $taxId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Tax has successfully inserted/updated.|'. $taxId .'|';
            } else {
                $return_value = '|FAIL|Insert/update tax failed.||';
            }
        } else {
            $return_value = '|FAIL|Tax already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'bank_data') {
    // <editor-fold defaultstate="collapsed" desc="bank_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $bankId = $myDatabase->real_escape_string($_POST['bankId']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
    $bankAccountNo = $myDatabase->real_escape_string($_POST['bankAccountNo']);
    $bankAccountName = $myDatabase->real_escape_string($_POST['bankAccountName']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $openingBalance = str_replace(",", "", $myDatabase->real_escape_string($_POST['openingBalance']));
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $bankType = $myDatabase->real_escape_string($_POST['bankType']);
    $bankCode = $myDatabase->real_escape_string($_POST['bankCode']);
	$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    // </editor-fold>
    
    if ($bankId == '') {
        $boolNew = true;
    }
    
    if($bankName != '' && $bankAccountNo != '' && $bankAccountName != '' && $currencyId != '' && $accountId != '' && $openingBalance != '' && 
            $bankType != '' && $bankCode != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `bank` WHERE UPPER(bank_name) = UPPER('{$bankName}') AND bank_account_no = '{$bankAccountNo}'";
        } else {
            $sql = "SELECT * FROM `bank` WHERE UPPER(bank_name) = UPPER('{$bankName}') AND bank_account_no = '{$bankAccountNo}' AND bank_id <> {$bankId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `bank` (bank_name, bank_type, stockpile_id, bank_code, bank_account_no, bank_account_name, currency_id, opening_balance, account_id, entry_by, entry_date) VALUES ("
                        . "'{$bankName}', {$bankType}, {$stockpileId}, '{$bankCode}', '{$bankAccountNo}', '{$bankAccountName}', {$currencyId}, {$openingBalance}, {$accountId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `bank` SET "
                        . "bank_name = '{$bankName}', "
                        . "bank_type = {$bankType}, "
						. "stockpile_id = {$stockpileId}, "
                        . "bank_code = '{$bankCode}', "
                        . "bank_account_no = '{$bankAccountNo}', "
                        . "bank_account_name = '{$bankAccountName}', "
                        . "currency_id = {$currencyId}, "
                        . "opening_balance = {$openingBalance}, "
                        . "account_id = {$accountId} "
                        . "WHERE bank_id = {$bankId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $bankId = $myDatabase->insert_id;
					
                }

                $return_value = '|OK|Bank has successfully inserted/updated.|'. $bankId .'|';
            } else {
                $return_value = '|FAIL|Insert/update bank failed.||';
            }
        } else {
            $return_value = '|FAIL|Bank already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_category') {
    // <editor-fold defaultstate="collapsed" desc="delete_category">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $categoryId = $myDatabase->real_escape_string($_POST['categoryId']);
    // </editor-fold>
    
    if($categoryId != '') {
        $sql = "SELECT * FROM `condition` WHERE category_id = {$categoryId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `category` WHERE category_id = {$categoryId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Category has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete category failed.|';
            }
        } else {
            $return_value = '|FAIL|Category in use in condition.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'category_data') {
    // <editor-fold defaultstate="collapsed" desc="category_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $categoryId = $myDatabase->real_escape_string($_POST['categoryId']);
    $categoryName = $myDatabase->real_escape_string($_POST['categoryName']);
    // </editor-fold>
    
    if ($categoryId == '') {
        $boolNew = true;
    }
    
    if($categoryName != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `category` WHERE UPPER(category_name) = UPPER('{$categoryName}')";
        } else {
            $sql = "SELECT * FROM `category` WHERE UPPER(category_name) = UPPER('{$categoryName}') AND category_id <> {$categoryId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `category` (category_name, entry_by, entry_date) VALUES ("
                        . "'{$categoryName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `category` SET "
                        . "category_name = '{$categoryName}' "
                        . "WHERE category_id = {$categoryId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $categoryId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Category has successfully inserted/updated.|'. $categoryId .'|';
            } else {
                $return_value = '|FAIL|Insert/update category failed.||';
            }
        } else {
            $return_value = '|FAIL|Category already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_vehicle') {
    // <editor-fold defaultstate="collapsed" desc="delete_vehicle">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vehicleId = $myDatabase->real_escape_string($_POST['vehicleId']);
    // </editor-fold>
    
    if($vehicleId != '') {
        $sql = "SELECT * FROM `unloading_cost` WHERE vehicle_id = {$vehicleId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `vehicle` WHERE vehicle_id = {$vehicleId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Vehicle has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete vehicle failed.|';
            }
        } else {
            $return_value = '|FAIL|Vehicle in use in stockpile unloading cost.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'vehicle_data') {
    // <editor-fold defaultstate="collapsed" desc="vehicle_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vehicleId = $myDatabase->real_escape_string($_POST['vehicleId']);
    $vehicleName = $myDatabase->real_escape_string($_POST['vehicleName']);
    // </editor-fold>
    
    if ($vehicleId == '') {
        $boolNew = true;
    }
    
    if($vehicleName != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `vehicle` WHERE UPPER(vehicle_name) = UPPER('{$vehicleName}')";
        } else {
            $sql = "SELECT * FROM `vehicle` WHERE UPPER(vehicle_name) = UPPER('{$vehicleName}') AND vehicle_id <> {$vehicleId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `vehicle` (vehicle_name, entry_by, entry_date) VALUES ("
                        . "'{$vehicleName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `vehicle` SET "
                        . "vehicle_name = '{$vehicleName}' "
                        . "WHERE vehicle_id = {$vehicleId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $vehicleId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Vehicle has successfully inserted/updated.|'. $vehicleId .'|';
            } else {
                $return_value = '|FAIL|Insert/update vehicle failed.||';
            }
        } else {
            $return_value = '|FAIL|Vehicle already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_customer') {
    // <editor-fold defaultstate="collapsed" desc="delete_customer">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    // </editor-fold>
    
    if($customerId != '') {
        $sql = "SELECT * FROM `sales` WHERE customer_id = {$customerId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `customer` WHERE customer_id = {$customerId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Customer has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete customer failed.|';
            }
        } else {
            $return_value = '|FAIL|Customer in use in sales agreement.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'customer_data') {
    // <editor-fold defaultstate="collapsed" desc="customer_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    $customerName = $myDatabase->real_escape_string($_POST['customerName']);
    $customerAddress = $myDatabase->real_escape_string($_POST['customerAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
	$npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
	$branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>
    
    if ($customerId == '') {
        $boolNew = true;
    }
    
    if($customerName != '' && $customerAddress != '' && $npwp != '' && $npwp_name != '' && $ppn != '' && $pph != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$customerName}')";
        } else {
            $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$customerName}') AND customer_id <> {$customerId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;
            
            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }
            
            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }
            
            if($boolNew) {
                $sql = "INSERT INTO `customer` (customer_name, customer_address, npwp, npwp_name, bank_name, branch, account_no, beneficiary, "
                        . "swift_code, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                        . "'{$customerName}', '{$customerAddress}', '{$npwp}', '{$npwp_name}', '{$bankName}', '{$branch}', '{$accountNo}', "
                        . "'{$beneficiary}', '{$swiftCode}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `customer` SET "
                        . "customer_name = '{$customerName}', "
                        . "customer_address = '{$customerAddress}', "
                        . "npwp = '{$npwp}', "
						. "npwp_name = '{$npwp_name}', "
                        . "bank_name = '{$bankName}', "
						. "branch = '{$branch}', "
                        . "account_no = '{$accountNo}', "
                        . "beneficiary = '{$beneficiary}', "
                        . "swift_code = '{$swiftCode}', "
                        . "ppn_tax_id = {$ppn}, "
                        . "pph_tax_id = {$pph}, "
                        . "ppn = {$ppnValue}, "
                        . "pph = {$pphValue} "
                        . "WHERE customer_id = {$customerId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $customerId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Customer has successfully inserted/updated.|'. $customerId .'|';
            } else {
                $return_value = '|FAIL|Insert/update customer failed.||';
            }
        } else {
            $return_value = '|FAIL|Customer already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_labor') {
    // <editor-fold defaultstate="collapsed" desc="delete_labor">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    // </editor-fold>
    
    if($laborId != '') {
        $sql = "SELECT * FROM `transaction` WHERE labor_id = {$laborId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `labor` WHERE labor_id = {$laborId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Labor worker has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete labor worker failed.|';
            }
        } else {
            $return_value = '|FAIL|Labor worker in use in transaction.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'labor_data') {
    // <editor-fold defaultstate="collapsed" desc="labor_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $laborName = $myDatabase->real_escape_string($_POST['laborName']);
    $laborAddress = $myDatabase->real_escape_string($_POST['laborAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
	$npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
	$branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
	$active = $myDatabase->real_escape_string($_POST['active']);
	$nik = $myDatabase->real_escape_string($_POST['nik']);
    // </editor-fold>
    
    if ($laborId == '') {
        $boolNew = true;
    }
    
    if($laborName != '' && $laborAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `labor` WHERE UPPER(labor_name) = UPPER('{$laborName}')";
        } else {
            $sql = "SELECT * FROM `labor` WHERE UPPER(labor_name) = UPPER('{$laborName}') AND labor_id <> {$laborId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;
            
            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }
            
            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }
            
            if($boolNew) {
                $sql = "INSERT INTO `labor` (labor_name, labor_address, nik, npwp, npwp_name, bank_name, branch, account_no, beneficiary, "
                        . "swift_code, ppn_tax_id, pph_tax_id, ppn, pph, active, entry_by, entry_date) VALUES ("
                        . "'{$laborName}', '{$laborAddress}', '{$nik}', '{$npwp}', '{$npwp_name}', '{$bankName}', '{$branch}', '{$accountNo}', "
                        . "'{$beneficiary}', '{$swiftCode}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$active}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `labor` SET "
                        . "labor_name = '{$laborName}', "
                        . "labor_address = '{$laborAddress}', "
						. "nik = '{$nik}', "
                        . "npwp = '{$npwp}', "
						. "npwp_name = '{$npwp_name}', "
                        . "bank_name = '{$bankName}', "
						. "branch = '{$branch}', "
                        . "account_no = '{$accountNo}', "
                        . "beneficiary = '{$beneficiary}', "
                        . "swift_code = '{$swiftCode}', "
                        . "ppn_tax_id = {$ppn}, "
                        . "pph_tax_id = {$pph}, "
                        . "ppn = {$ppnValue}, "
                        . "pph = {$pphValue}, "
						. "active = {$active} "
                        . "WHERE labor_id = {$laborId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $laborId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Labor worker has successfully inserted/updated.|'. $laborId .'|';
            } else {
                $return_value = '|FAIL|Insert/update labor worker failed.||';
            }
        } else {
            $return_value = '|FAIL|Labor worker already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}


elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'currency_data') {
    // <editor-fold defaultstate="collapsed" desc="currency_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $currencyCode = $myDatabase->real_escape_string($_POST['currencyCode']);
    $currencyName = $myDatabase->real_escape_string($_POST['currencyName']);
    $isCountryCurrency = $myDatabase->real_escape_string($_POST['isCountryCurrency']);
    $isPurchaseCurrency = $myDatabase->real_escape_string($_POST['isPurchaseCurrency']);
    $isSalesCurrency = $myDatabase->real_escape_string($_POST['isSalesCurrency']);
    $isReportCurrency = $myDatabase->real_escape_string($_POST['isReportCurrency']);
    // </editor-fold>
    
    if ($currencyId == '') {
        $boolNew = true;
    }
    
    if($currencyCode != '' && $currencyName != '' && $isCountryCurrency != '' && $isPurchaseCurrency != '' && 
            $isSalesCurrency != '' && $isReportCurrency != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `currency` WHERE UPPER(currency_code) = UPPER('{$currencyCode}')";
        } else {
            $sql = "SELECT * FROM `currency` WHERE UPPER(currency_code) = UPPER('{$currencyCode}') AND currency_id <> {$currencyId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `currency` (currency_code, currency_name, is_country_currency, is_purchase_currency, is_sales_currency, is_report_currency, entry_by, entry_date) VALUES ("
                        . "UPPER('{$currencyCode}'), '{$currencyName}', {$isCountryCurrency}, {$isPurchaseCurrency}, {$isSalesCurrency}, {$isReportCurrency}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `currency` SET "
                        . "currency_code = UPPER('{$currencyCode}'),"
                        . "currency_name = '{$currencyName}', "
                        . "is_country_currency = {$isCountryCurrency}, "
                        . "is_purchase_currency = {$isPurchaseCurrency}, "
                        . "is_sales_currency = {$isSalesCurrency}, "
                        . "is_report_currency = {$isReportCurrency} "
                        . "WHERE currency_id = {$currencyId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $currencyId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Currency has successfully inserted/updated.|'. $currencyId .'|';
            } else {
                $return_value = '|FAIL|Insert/update currency failed.||';
            }
        } else {
            $return_value = '|FAIL|Currency already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'stockpile_data') {
    // <editor-fold defaultstate="collapsed" desc="stockpile_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockpileCode = $myDatabase->real_escape_string($_POST['stockpileCode']);
    $stockpileName = $myDatabase->real_escape_string($_POST['stockpileName']);
    $stockpileAddress = $myDatabase->real_escape_string($_POST['stockpileAddress']);
    $active = $myDatabase->real_escape_string($_POST['active']);
    $freightWeightRule = $myDatabase->real_escape_string($_POST['freightWeightRule']);
    $curahWeightRule = $myDatabase->real_escape_string($_POST['curahWeightRule']);
    // </editor-fold>
    
    if ($stockpileId == '') {
        $boolNew = true;
    }
    
    if($stockpileCode != '' && $stockpileName != '' && $active != '' && $freightWeightRule !='' && $curahWeightRule != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `stockpile` WHERE UPPER(stockpile_code) = UPPER('{$stockpileCode}') AND UPPER(stockpile_name) = UPPER('{$stockpileName}')";
        } else {
            $sql = "SELECT * FROM `stockpile` WHERE UPPER(stockpile_code) = UPPER('{$stockpileCode}') AND UPPER(stockpile_name) = UPPER('{$stockpileName}') AND stockpile_id <> {$stockpileId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `stockpile` (stockpile_code, stockpile_name, stockpile_address, active, freight_weight_rule, curah_weight_rule, entry_by, entry_date) VALUES ("
                        . "UPPER('{$stockpileCode}'), '{$stockpileName}', '{$stockpileAddress}', {$active}, {$freightWeightRule}, {$curahWeightRule}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `stockpile` SET "
                        . "stockpile_code = UPPER('{$stockpileCode}'), "
                        . "stockpile_name = '{$stockpileName}',"
                        . "stockpile_address = '{$stockpileAddress}', "
                        . "freight_weight_rule = {$freightWeightRule}, "
                        . "curah_weight_rule = {$curahWeightRule}, "
                        . "active = {$active} "
                        . "WHERE stockpile_id = {$stockpileId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $stockpileId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Stockpile has successfully inserted/updated.|'. $stockpileId .'|';
            } else {
                $return_value = '|FAIL|Insert/update stockpile failed.||';
            }
        } else {
            $return_value = '|FAIL|Stockpile already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_stockpile_freight') {
    // <editor-fold defaultstate="collapsed" desc="delete_stockpile_freight">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightCostId = $myDatabase->real_escape_string($_POST['freightCostId']);
    // </editor-fold>
    
    if($freightCostId != '') {
        $sql = "SELECT * FROM `transaction` WHERE freight_cost_id = {$freightCostId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `freight_cost` WHERE freight_cost_id = {$freightCostId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Freight cost has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete freight cost failed.|';
            }
        } else {
            $return_value = '|FAIL|Freight cost in use in condition.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'stockpile_freight_data') {
    // <editor-fold defaultstate="collapsed" desc="stockpile_freight_data">
    
    $return_value = '';
    $boolNew = false;
	$boolShrink = true;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightCostId = $myDatabase->real_escape_string($_POST['freightCostId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $paymentNotes = $myDatabase->real_escape_string($_POST['paymentNotes']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);	
    $contractPKHOA = $myDatabase->real_escape_string($_POST['contractPKHOA']);
	$shrink_tolerance_kg = $myDatabase->real_escape_string($_POST['shrink_tolerance_kg']);
	$shrink_tolerance_persen = $myDatabase->real_escape_string($_POST['shrink_tolerance_persen']);
    $shrink_claim = $myDatabase->real_escape_string($_POST['shrink_claim']);
    $active_from = $myDatabase->real_escape_string($_POST['active_from']);
    // </editor-fold>

    if ($freightCostId == '') {
        $boolNew = true;
    }


    if($freightId != '' && $currencyId != '' && $price != '' && $vendorId != '') {
//        if($boolNew) {
//            $sql = "SELECT * FROM `freight_cost` WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId}";
//        } else {
//            $sql = "SELECT * FROM `freight_cost` WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId} AND freight_cost_id <> {$freightCostId}";
//        }
//        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//        if($result !== false && $result->num_rows == 0) {
	 if($shrink_tolerance_kg > 0 && $shrink_tolerance_persen > 0){
		 $boolShrink = false;
	 }

        if($exchangeRate == '') {
            $exchangeRate = 1;
        }

        $priceConverted = $price * $exchangeRate;
        if($boolShrink){
            if($boolNew) {
                $sql = "INSERT INTO `freight_cost` (freight_id, stockpile_id, vendor_id, currency_id, exchange_rate, price, "
                        . "price_converted, payment_notes, remarks, company_id, entry_by, entry_date,contract_pkhoa,shrink_tolerance_kg,shrink_tolerance_persen,shrink_claim, active_from) VALUES ("
                        . "{$freightId}, {$stockpileId}, {$vendorId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, "
                        . "'{$paymentNotes}', '{$remarks}', {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),'{$contractPKHOA}','{$shrink_tolerance_kg}','{$shrink_tolerance_persen}','{$shrink_claim}','{$active_from}')";
            } else {
                $sql = "UPDATE `freight_cost` SET "
                        . "freight_id = {$freightId}, "
                        . "currency_id = {$currencyId}, "
                        . "exchange_rate = {$exchangeRate}, "
                        . "vendor_id = {$vendorId}, "
                        . "price = {$price}, "
                        . "price_converted = {$priceConverted}, "
                        . "payment_notes = '{$paymentNotes}', "
                        . "contract_pkhoa = '{$contractPKHOA}', "
                        . "remarks = '{$remarks}', "
						. "shrink_tolerance_kg = '{$shrink_tolerance_kg}', "
						. "shrink_tolerance_persen = '{$shrink_tolerance_persen}', "
						. "shrink_claim = '{$shrink_claim}', "
                        . "active_from = '{$active_from}', "
                        . "modify_by = {$_SESSION['userId']}, "
                        . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "

                        . "WHERE freight_cost_id = {$freightCostId}";

            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Freight cost has successfully inserted/updated.|';
            } else {
                $return_value = '|FAIL|Insert/update freight cost failed.|';
				echo $sql;
            }
        } else {
           $return_value = '|FAIL|Please Choose One Shrink Tolerance.|';
       }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'stockpile_unloading_data') {
    // <editor-fold defaultstate="collapsed" desc="stockpile_unloading_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $unloadingCostId = $myDatabase->real_escape_string($_POST['unloadingCostId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $vehicleId = $myDatabase->real_escape_string($_POST['vehicleId']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    // </editor-fold>
    
    if ($unloadingCostId == '') {
        $boolNew = true;
    }
    
    if($vehicleId != '' && $currencyId != '' && $price != '') {
//        if($boolNew) {
//            $sql = "SELECT * FROM `freight_cost` WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId}";
//        } else {
//            $sql = "SELECT * FROM `freight_cost` WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId} AND freight_cost_id <> {$freightCostId}";
//        }
//        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//        if($result !== false && $result->num_rows == 0) {
        
        if($exchangeRate == '') {
            $exchangeRate = 1;
        }
        
        $priceConverted = $price * $exchangeRate;
        
            if($boolNew) {
                $sql = "INSERT INTO `unloading_cost` (vehicle_id, stockpile_id, currency_id, exchange_rate, price, "
                        . "price_converted, company_id, entry_by, entry_date) VALUES ("
                        . "{$vehicleId}, {$stockpileId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, "
                        . "{$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `unloading_cost` SET "
                        . "vehicle_id = {$vehicleId}, "
                        . "currency_id = {$currencyId}, "
                        . "exchange_rate = {$exchangeRate}, "
                        . "price = {$price}, "
                        . "price_converted = {$priceConverted}, "
                        . "modify_by = {$_SESSION['userId']}, "
                        . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE unloading_cost_id = {$unloadingCostId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Unloading cost has successfully inserted/updated.|';
            } else {
                $return_value = '|FAIL|Insert/update unloading cost failed.|';
            }
//        } else {
//            $return_value = '|FAIL|Freight cost already exists.|';
//        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_customer_data">
    
    $return_value = '';
	//$boolShipment1 = false;
   
   	$transaction_id = $myDatabase->real_escape_string($_POST['transaction_id']);
    $gl_add_date = $myDatabase->real_escape_string($_POST['gl_add_date']);
    //$gl_add_no = $myDatabase->real_escape_string($_POST['gl_add_no']);
	$stockpile_id = $myDatabase->real_escape_string($_POST['stockpile_id']);
    $general_vendor_id = $myDatabase->real_escape_string($_POST['general_vendor_id']);
	$vendor_id = $myDatabase->real_escape_string($_POST['vendor_id']);
    $contract_id = $myDatabase->real_escape_string($_POST['contract_id']);
	
	$shipment_id = $myDatabase->real_escape_string($_POST['shipment_id']);
	$invoice_id = $myDatabase->real_escape_string($_POST['invoice_id']);
	$notes = $myDatabase->real_escape_string($_POST['notes']);
	$quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
	$price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
	
   	
	if($contract_id == ''){
	$contract_id = 'NULL';
	}
	if($transaction_id == ''){
	$transaction_id = 'NULL';
	}
	if($shipment_id == ''){
	$shipment_id = 'NULL';
	}
	if($invoice_id == ''){
	$invoice_id = 'NULL';
	}
	if($notes == ''){
		$notes = 'NULL';
	}
	if($price == ''){
		$price = 0;
	}
	if($quantity == ''){
		$quantity = 0;
	}
	if($general_vendor_id == ''){
		$general_vendor_id = 'NULL';
	}
	if($vendor_id == ''){
		$vendor_id = 'NULL';
	}
	
	
	$str = $_POST['gl_add_date'];
	$date = DateTime::createFromFormat('d/m/Y', $str);
	$jurnalYearMonth = $date->format('ym');
	
	
    if($stockpile_id != '') {
		
		$checkJurnalNo = 'JM/JPJ/'. $jurnalYearMonth;
 
        $sql = "SELECT gl_add_no FROM gl_add WHERE gl_add_no LIKE '{$checkJurnalNo}%' ORDER BY gl_add_id DESC LIMIT 1";
        $resultJurnal = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($resultJurnal->num_rows == 1) {
            $rowJurnal = $resultJurnal->fetch_object();
            $splitJurnalNo = explode('/', $rowJurnal->gl_add_no);
            $lastExplode = count($splitJurnalNo) - 1;
            $nextJurnalNo = ((float) $splitJurnalNo[$lastExplode]) + 1;
            $jurnalNo = $checkJurnalNo .'/'. $nextJurnalNo;
        } else {
            $jurnalNo = $checkJurnalNo .'/1';
        
    }
				
            $sql = "INSERT INTO `gl_add` (gl_add_date, gl_add_no, stockpile_id, general_vendor_id, vendor_id , contract_id, transaction_id, shipment_id, invoice_id, notes, quantity, price, input_by, input_date) VALUES (STR_TO_DATE('{$gl_add_date}', '%d/%m/%Y'), '{$jurnalNo}', {$stockpile_id}, {$general_vendor_id}, {$vendor_id}, {$contract_id}, {$transaction_id}, {$shipment_id}, {$invoice_id}, '{$notes}', '{$quantity}', '{$price}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $jurnalId = $myDatabase->insert_id;
                
                $return_value = '|OK|Data has successfully inserted.||';
				
				$sql = "UPDATE `gl_detail` SET gl_add_id = {$jurnalId} WHERE gl_add_id IS NULL AND entry_by = {$_SESSION['userId']}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
				
            } else {
                $return_value = '|FAIL|Insert Data failed.||';
	
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    } 
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_jurnal_data') {
    // <editor-fold defaultstate="collapsed" desc="delete_user">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $jurnalId = $myDatabase->real_escape_string($_POST['jurnalId']);
    // </editor-fold>
    
    if($jurnalId != '') {
		
		
        $sql = "DELETE FROM `gl_add` WHERE gl_add_id = {$jurnalId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|User has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_detail') {
    // <editor-fold defaultstate="collapsed" desc="transaction_customer_data">
    
    $return_value = '';
	$boolShipment1 = false;
	//$exchangeRate = '';
    //$grandTotal = 0;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $jurnalType = $myDatabase->real_escape_string($_POST['jurnalType']);
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $stockpileId2 = $myDatabase->real_escape_string($_POST['stockpileId2']);
	$amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
	$currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
	$exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
	$notes = $myDatabase->real_escape_string($_POST['notes']);
	
    // </editor-fold>
  
	if($stockpileId2 == ''){
		$stockpileId2 = 'NULL';
	}
	
	if($exchangeRate == ''){
		$exchangeRate = 1;
	}
	
	
	
	
    if($jurnalType != '' && $accountId != '' && $amount != '' && $currencyId != '') {
			
			$amountConverted = $exchangeRate * $amount;
			
			
				
            $sql = "INSERT INTO `gl_detail` (gl_type, stockpile_id, account_id, currency_id, exchange_rate, amount, amount_converted, notes, entry_by, entry_date) VALUES ("
                    . "{$jurnalType}, {$stockpileId2}, {$accountId}, {$currencyId}, {$exchangeRate}, '{$amount}', '{$amountConverted}', '{$notes}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $jurnalId = $myDatabase->insert_id;
                
                $return_value = '|OK|Data has successfully inserted.||';
				
				
			insertGeneralLedger($myDatabase, 'JURNAL MEMORIAL', "NULL", "NULL", "NULL", "NULL", "NULL", $jurnalId);
				
            } else {
                $return_value = '|FAIL|Insert Data failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    } 
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_jurnal_detail') {
    // <editor-fold defaultstate="collapsed" desc="delete_user">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $jurnalDetailId = $myDatabase->real_escape_string($_POST['jurnalDetailId']);
    // </editor-fold>
    
    if($jurnalDetailId != '') {
		
        $sql = "DELETE FROM `gl_detail` WHERE gl_detail_id = {$jurnalDetailId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|User has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'invoice_detail') {
    // <editor-fold defaultstate="collapsed" desc="invoice_detail">
    $return_value = '';
    $boolShipment1 = false;
    $boolPO = false;
    $boolVendor = false;
    $invMethod = $myDatabase->real_escape_string($_POST['invMethod']);
    $invoiceType = $myDatabase->real_escape_string($_POST['invoiceType']);
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId']);
    $shipmentId1 = $myDatabase->real_escape_string($_POST['shipmentId1']);
    $stockpileId2 = $myDatabase->real_escape_string($_POST['stockpileId2']);
    $qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $termin = str_replace(",", "", $myDatabase->real_escape_string($_POST['termin']));
    $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $ppn = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn1']));
    $pphID = $myDatabase->real_escape_string($_POST['pphTaxId']);
    $ppnID = $myDatabase->real_escape_string($_POST['ppnID']);
    $pphDP2 = $myDatabase->real_escape_string($_POST['pphDP2']);
    $ppnDP2 = $myDatabase->real_escape_string($_POST['ppnDP2']);
    $dp_total = str_replace(",", "", $myDatabase->real_escape_string($_POST['dp_total']));
    $DP = $dp_total;
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $invoiceMethodDetail = $myDatabase->real_escape_string($_POST['invoiceMethodDetail']);
    $poId = $myDatabase->real_escape_string($_POST['poId']);
    $slipNos = "";
    $slipNos2 = "";
    $transaksiMutasi = $myDatabase->real_escape_string($_POST['transaksiMutasi']);
    $uom = $myDatabase->real_escape_string($_POST['uom']);

    //PREDIKSI
    $tipeBiayaId = $myDatabase->real_escape_string($_POST['tipeBiayaId']);
    $codePrediksi = $myDatabase->real_escape_string($_POST['codePrediksi']);
    $prediksiId = $myDatabase->real_escape_string($_POST['prediksiDetailId']);
    $prediksiHeader = $myDatabase->real_escape_string($_POST['prediksiHeader']);
    $prediksiAmount = str_replace(",", "", $myDatabase->real_escape_string($_POST['prediksi_amount']));
    if($prediksiId == '' || $prediksiId == 0){
        $prediksiId = 0;
        $codePrediksi = NULL;
        $prediksiAmount = 0;

    }
    if($invoiceType == 4 && $transaksiMutasi == 0){
        $shipmentId1 = $myDatabase->real_escape_string($_POST['shipmentIdPrediksi']); //483328
        $generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId1']); // 26
        $accountId = $myDatabase->real_escape_string($_POST['accountIdPrediksi']); // 7
    }

    $mutasiValue = "";
    $mutasiChecked = "";
    // </editor-fold>
    if ($shipmentId1 == '') {
        $shipmentId1 = 'NULL';
    } else {
        $sqlSales = "SELECT sales_id FROM sales WHERE shipment_id = {$shipmentId1}";
        $resultSales = $myDatabase->query($sqlSales, MYSQLI_STORE_RESULT);
        if ($resultSales !== false && $resultSales->num_rows > 0) {
            $rowSales = $resultSales->fetch_object();
            $salesId = $rowSales->sales_id;

            $sqlStatus = "UPDATE sales SET "
                . "used_status = 1 "
                . " WHERE sales_id = {$salesId}";
            $resultStatus = $myDatabase->query($sqlStatus, MYSQLI_STORE_RESULT);
        }

    }
    if ($poId == '') {
        $poId = 'NULL';
    }
    if ($stockpileId2 == '') {
        $stockpileId2 = 'NULL';
    }

    if ($exchangeRate == '') {
        $exchangeRate = 1;
    }
    if ($pphDP2 != 0) {
        $sqlPPH = "SELECT tax_value FROM tax WHERE tax_id = {$pphID}";
        $resultPPH = $myDatabase->query($sqlPPH, MYSQLI_STORE_RESULT);
        if ($resultPPH !== false && $resultPPH->num_rows > 0) {
            $rowPPH = $resultPPH->fetch_object();
            $pph1 = $rowPPH->tax_value;
            $dp_pph = $DP * ($pph1 / 100);
        }
    } else {
        $dp_pph = 0;
    }
    if ($ppnDP2 != 0) {
        $sqlPPN = "SELECT tax_value FROM tax WHERE tax_id = {$ppnID}";
        $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
        if ($resultPPN !== false && $resultPPN->num_rows > 0) {
            $rowPPN = $resultPPN->fetch_object();
            $ppn1 = $rowPPN->tax_value;
            $dp_ppn = $DP * ($ppn1 / 100);
        }
    } else {
        $dp_ppn = 0;
    }

    $dp_total = ($DP + $dp_ppn) - $dp_pph;

    $pph = 0;
    if ($pphID != 0) {
        $sqlP = "SELECT tax_value FROM tax WHERE tax_id = {$pphID}";
        $resultP = $myDatabase->query($sqlP, MYSQLI_STORE_RESULT);
        if ($resultP !== false && $resultP->num_rows > 0) {
            $rowP = $resultP->fetch_object();
            $pphTax = $rowP->tax_value;

            $pph = $amount * ($pphTax / 100);
        }
    }

    if ($invMethod == 1) {
        $amount2 = $amount * -1;
        $ppn2 = $ppn * -1;
        $pph2 = $pph * -1;
    } else {
        $amount2 = $amount;
        $ppn2 = $ppn;
        $pph2 = $pph;
    }

    $sqlShipment = "SELECT account_no FROM account WHERE account_id = {$accountId}";
    $resultShipment = $myDatabase->query($sqlShipment, MYSQLI_STORE_RESULT);
    if ($resultShipment !== false && $resultShipment->num_rows > 0) {
        $rowShipment = $resultShipment->fetch_object();
        $acc = $rowShipment->account_no;
        $sub_acc = substr($acc, 0, 2);
    }

    if ($sub_acc == 51 && $shipmentId1 == 'NULL') {
        $boolShipment1 = false;
        //echo $sub_acc;
    } else {
        $boolShipment1 = true;
        //echo 'SALAH';
    }
    if (($acc == 520900 || $acc == 521000) && ($poId == 'NULL' && $shipmentId1 == 'NULL')) {
        $boolPO = false;
    } elseif (($acc == 520900 || $acc == 521000) && ($poId != 'NULL' || $shipmentId1 != 'NULL')) {
        $boolPO = true;
    } else {
        $boolPO = true;
    }

    $gvId = '';
    $sqlv = "SELECT general_vendor_id FROM invoice_detail WHERE invoice_id IS NULL AND entry_by = {$_SESSION['userId']} GROUP BY general_vendor_id";
    $resultv = $myDatabase->query($sqlv, MYSQLI_STORE_RESULT);
	//echo $generalVendorId;
    if ($resultv !== false && $resultv->num_rows == 1) {
        $rowv = $resultv->fetch_object();
        $gvId = $rowv->general_vendor_id;
		
        if ($gvId == $generalVendorId) {
            $boolVendor = true;
        }
    }
    if ($gvId == '') {
        $boolVendor = true;
    }

    if ($transaksiMutasi == 1) {

        //$mutasi4 = 0;
        if (isset($_POST['checkedMutasi1'])) {
            $mutasi1 = $_POST['checkedMutasi1'];
            if (isset($_POST['checkedMutasi'])) {
                $mutasi = $_POST['checkedMutasi'];
                if (isset($_POST['checkedMutasi3'])) {
                    $mutasi3 = $_POST['checkedMutasi3'];
                } else {
                    $mutasi3 = '';
                }
                if (isset($_POST['checkedMutasi4'])) {
                    $mutasi4 = $_POST['checkedMutasi4'];
                } else {
                    $mutasi4 = '';
                }
                if (isset($_POST['checkedMutasi5'])) {
                    $mutasi5 = $_POST['checkedMutasi5'];
                } else {
                    $mutasi5 = '';
                }
                if (isset($_POST['checkedMutasi6'])) {
                    $mutasi6 = $_POST['checkedMutasi6'];
                } else {
                    $mutasi6 = '';
                }
            } else {
                $mutasi = '';
            }

            for ($i = 0; $i < sizeof($mutasi1); $i++) {
                if ($mutasi[$i] != '') {
                    if ($mutasiChecked == '') {
                        $mutasiChecked .= $mutasi[$i];
                        if ($mutasi4[$i] == '') {
                            $mutasi4[$i] = 0;
                            $ppnAmt = 0;
                        } else {
                            //$gvId = '';
                            $sqlPrice = "SELECT a.price,a.ppn,
											IFNULL((SELECT SUM(ppnAmt) FROM mutasi_qty_price  WHERE mutasi_detail_id = a.mutasi_detail_id),0) AS sumppn,
											IFNULL((SELECT SUM(qtyInvoice) FROM mutasi_qty_price  WHERE mutasi_detail_id = a.mutasi_detail_id),0) AS sumqty FROM mutasi_detail a WHERE a.mutasi_detail_id = " . $mutasi[$i];
                            $resultPrice = $myDatabase->query($sqlPrice, MYSQLI_STORE_RESULT);
                            if ($resultPrice !== false && $resultPrice->num_rows == 1) {
                                $rowPrice = $resultPrice->fetch_object();
                                $total_per_termin = $rowPrice->total_per_termin;
                                $ppn = $rowPrice->ppn;
                                $sumppn = $rowPrice->sumppn;
                                $price = $rowPrice->price;
                                $sumqty = $rowPrice->sumqty;
                                $ppnPlus = $price * $mutasi3[$i];

                                $ppnAmt1 = (($sumqty * $price) + $ppnPlus) * ($ppn / 100);
                                $ppnAmt = $ppnAmt1 - $sumppn;
                            }

                        }
                        if ($mutasi5[$i] == '') {
                            $mutasi5[$i] = 0;
                            $pphAmt = 0;
                        } else {

                            $sqlPrice1 = "SELECT a.price,a.pph,
											IFNULL((SELECT SUM(pphAmt) FROM mutasi_qty_price  WHERE mutasi_detail_id = a.mutasi_detail_id),0) AS sumpph,
											IFNULL((SELECT SUM(qtyInvoice) FROM mutasi_qty_price  WHERE mutasi_detail_id = a.mutasi_detail_id),0) AS sumqty FROM mutasi_detail a WHERE a.mutasi_detail_id = " . $mutasi[$i];
                            $resultPrice1 = $myDatabase->query($sqlPrice1, MYSQLI_STORE_RESULT);
                            if ($resultPrice1 !== false && $resultPrice1->num_rows == 1) {
                                $rowPrice1 = $resultPrice1->fetch_object();
                                $total_per_termin = $rowPrice1->total_per_termin;
                                $pph = $rowPrice1->pph;
                                $sumpph = $rowPrice1->sumpph;
                                $price = $rowPrice1->price;
                                $sumqty = $rowPrice1->sumqty;
                                $pphPlus = $price * $mutasi3[$i];
                                $pphAmt1 = (($sumqty * $price) + $pphPlus) * ($pph / 100);
                                $pphAmt = $pphAmt1 - $sumpph;

                            }
                        }
                        if ($mutasi6[$i] == '') {
                            $mutasi6[$i] = 0;
                        } else {
                            $mutasi6[$i] = 1;
                        }


                        $dataCek = $mutasi[$i];
                        $mutasiValue .= '(' . $mutasi[$i] . ',' . $mutasi1[$i] . ',' . $mutasi3[$i] . ',' . $mutasi4[$i] . ',' . $mutasi5[$i] . ',' . $ppnAmt . ',' . $pphAmt . ',' . $mutasi6[$i] . ')';
                        $terminCek .= $mutasi1[$i];
                        $query .= 'SELECT IFNULL((IFNULL(SUM(termin),0)+' . $mutasi1[$i] . '),0) AS totalTermin FROM mutasi_qty_price WHERE mutasi_detail_id = ' . $mutasi[$i];
                    } else {
                        $mutasiChecked .= ',' . $mutasi[$i];
                        if ($mutasi4[$i] == '') {
                            $mutasi4[$i] = 0;
                            $ppnAmt = 0;
                        } else {
                            //$gvId = '';
                            $sqlPrice = "SELECT a.price,a.ppn,
											IFNULL((SELECT SUM(ppnAmt) FROM mutasi_qty_price  WHERE mutasi_detail_id = a.mutasi_detail_id),0) AS sumppn,
											IFNULL((SELECT SUM(qtyInvoice) FROM mutasi_qty_price  WHERE mutasi_detail_id = a.mutasi_detail_id),0) AS sumqty FROM mutasi_detail a WHERE a.mutasi_detail_id = " . $mutasi[$i];
                            $resultPrice = $myDatabase->query($sqlPrice, MYSQLI_STORE_RESULT);
                            if ($resultPrice !== false && $resultPrice->num_rows == 1) {
                                $rowPrice = $resultPrice->fetch_object();
                                $total_per_termin = $rowPrice->total_per_termin;
                                $ppn = $rowPrice->ppn;
                                $sumppn = $rowPrice->sumppn;
                                $price = $rowPrice->price;
                                $sumqty = $rowPrice->sumqty;
                                $ppnPlus = $price * $mutasi3[$i];


                                $ppnAmt1 = (($sumqty * $price) + $ppnPlus) * ($ppn / 100);
                                $ppnAmt = $ppnAmt1 - $sumppn;

                            }

                        }
                        if ($mutasi5[$i] == '') {
                            $mutasi5[$i] = 0;
                            $pphAmt = 0;
                        } else {

                            $sqlPrice1 = "SELECT a.price,a.pph,
											IFNULL((SELECT SUM(pphAmt) FROM mutasi_qty_price  WHERE mutasi_detail_id = a.mutasi_detail_id),0) AS sumpph,
											IFNULL((SELECT SUM(qtyInvoice) FROM mutasi_qty_price  WHERE mutasi_detail_id = a.mutasi_detail_id),0) AS sumqty FROM mutasi_detail a WHERE a.mutasi_detail_id = " . $mutasi[$i];
                            $resultPrice1 = $myDatabase->query($sqlPrice1, MYSQLI_STORE_RESULT);
                            if ($resultPrice1 !== false && $resultPrice1->num_rows == 1) {
                                $rowPrice1 = $resultPrice1->fetch_object();
                                $total_per_termin = $rowPrice1->total_per_termin;
                                $pph = $rowPrice1->pph;
                                $sumpph = $rowPrice1->sumpph;
                                $price = $rowPrice1->price;
                                $sumqty = $rowPrice1->sumqty;
                                $pphPlus = $price * $mutasi3[$i];
                                $pphAmt1 = (($sumqty * $price) + $pphPlus) * ($pph / 100);
                                $pphAmt = $pphAmt1 - $sumpph;

                            }
                        }

                        if ($mutasi6[$i] == '') {
                            $mutasi6[$i] = 0;
                        } else {
                            $mutasi6[$i] = 1;
                        }
                        $dataCek = $mutasi[$i];
                        $mutasiValue .= '(' . $mutasi[$i] . ',' . $mutasi1[$i] . ',' . $mutasi3[$i] . ',' . $mutasi4[$i] . ',' . $mutasi5[$i] . ',' . $ppnAmt . ',' . $pphAmt . ',' . $mutasi6[$i] . ')';
                        $terminCek .= $mutasi1[$i];
                        $query .= ' UNION SELECT IFNULL((IFNULL(SUM(termin),0)+' . $mutasi1[$i] . '),0) AS totalTermin FROM mutasi_qty_price WHERE mutasi_detail_id = ' . $mutasi[$i];


                    }
                }


            }

        }
        $boolTermin = true;
        $sqlTermin = "{$query}";
        $resultTermin = $myDatabase->query($sqlTermin, MYSQLI_STORE_RESULT);
        if ($resultTermin !== false && $resultTermin->num_rows > 0) {
            while ($rowT = $resultTermin->fetch_object()) {

                $totalTermin = $rowT->totalTermin;
                if ($totalTermin > 100) {
                    $boolTermin = true;
                    break;
                } else {
                    $boolTermin = true;
                }

            }
        }
        if ($boolTermin) {

            $sqlQP = "INSERT INTO `mutasi_qty_price` (mutasi_detail_id, termin, qtyInvoice,ppnId,pphId,ppnAmt,pphAmt,qtyEstimasi) VALUES {$mutasiValue}";
            $resultQP = $myDatabase->query($sqlQP, MYSQLI_STORE_RESULT);
            if ($resultQP !== false) {

                $mutasiPrice = $myDatabase->insert_id;

                $boolTax = false;

                $sqlCek = "SELECT * FROM mutasi_qty_price WHERE mutasi_detail_id = {$dataCek}";
                $resultCek = $myDatabase->query($sqlCek, MYSQLI_STORE_RESULT);
                if ($resultCek !== false && $resultCek->num_rows > 0) {
                    while ($rowCek = $resultCek->fetch_object()) {

                        $boolTax = true;

                    }
                }

                if ($boolTax) {
                    $whereProperty = "AND aa.id != {$mutasiPrice}";
                } else {
                    $whereProperty = "";
                }
            }
            //echo $sqlQP ;
			$_SESSION['mutasiDetail'] = $mutasiChecked;
            $sql1 = "SELECT a.*, c.termin, c.qtyInvoice, c.id, c.ppnId AS ppnIdInvoice, c.pphId AS pphIdInvoice, IFNULL(d.tax_value,0) AS pphinvoice, IFNULL(e.tax_value,0) AS ppninvoice, (a.price * c.qtyInvoice) AS amount1234, (a.price * c.qtyInvoice) AS amount2,
                            (IFNULL((SELECT SUM(a.price * aa.qtyInvoice) FROM mutasi_qty_price aa WHERE aa.mutasi_detail_id = a.mutasi_detail_id ),0)) AS amount,
                            (((a.total_per_termin + a.ppn_converted) - a.pph_converted) - 
                            ((IFNULL((SELECT SUM(a.price * aa.qtyInvoice) FROM mutasi_qty_price aa WHERE aa.mutasi_detail_id = a.mutasi_detail_id ),0)) + 
                            (IFNULL((SELECT SUM(aa.ppnAmt) FROM mutasi_qty_price aa WHERE aa.mutasi_detail_id = a.mutasi_detail_id ),0)))+ 
                            (IFNULL((SELECT SUM(aa.pphAmt) FROM mutasi_qty_price aa WHERE aa.mutasi_detail_id = a.mutasi_detail_id ),0))) AS availableAmount, 
                            (SELECT SUM(termin) FROM mutasi_qty_price WHERE  mutasi_detail_id = a.mutasi_detail_id) AS terminTotal,
                            (IFNULL((SELECT SUM(aa.ppnAmt) FROM mutasi_qty_price aa WHERE aa.mutasi_detail_id = a.mutasi_detail_id {$whereProperty}),0)) AS ppnAmount,
                            (IFNULL((SELECT SUM(aa.pphAmt) FROM mutasi_qty_price aa WHERE aa.mutasi_detail_id = a.mutasi_detail_id {$whereProperty}),0)) AS pphAmount,
                            (IFNULL((SELECT SUM(aa.ppnAmt) FROM mutasi_qty_price aa WHERE aa.mutasi_detail_id = a.mutasi_detail_id),0)) AS ppnAmount2,
                            (IFNULL((SELECT SUM(aa.pphAmt) FROM mutasi_qty_price aa WHERE aa.mutasi_detail_id = a.mutasi_detail_id),0)) AS pphAmount2,
                            (SELECT stockpile_from FROM mutasi_header WHERE mutasi_header_id = a.mutasi_header_id GROUP BY a.mutasi_header_id) AS stockpileId2,
                            (a.price * (IFNULL((SELECT SUM(aa.qtyInvoice) FROM mutasi_qty_price aa WHERE aa.mutasi_detail_id = a.mutasi_detail_id ),0))) AS updateTotal, c.qtyEstimasi
                            FROM mutasi_detail a
				LEFT JOIN termin_detail b ON a.termin_detail_id = b.id 
				LEFT JOIN mutasi_qty_price c ON c.mutasi_detail_id = a.mutasi_detail_id
				LEFT JOIN tax d ON c.`pphId` = d.`tax_id`
				LEFT JOIN tax e ON c.`ppnId` = e.`tax_id`
				WHERE a.mutasi_detail_id IN ({$mutasiChecked}) AND c.invoice_detail_id IS NULL";
            $result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
            if ($result1 !== false && $result1->num_rows > 0) {
                while ($row1 = $result1->fetch_object()) {

                    $id = $row1->id;
                    $mutasiDetailId = $row1->mutasi_detail_id;
                    $availableAmount = $row1->availableAmount;
                    $qty = $row1->qtyInvoice;
					$uom = $row1->uom;
                    $price = $row1->price;
                    $termin = $row1->termin;
                    $terminTotal = $row1->terminTotal;
                    $amount = $row1->amount;
                    $amount2 = $row1->amount2;
                    $generalVendorId = $row1->general_vendor_id;
                    $ppnID = $row1->ppnIdInvoice;
                    $pphID = $row1->pphIdInvoice;
                    $ppn2 = $row1->ppnAmount2 - $row1->ppnAmount;
                    $pph2 = $row1->pphAmount2 - $row1->pphAmount;
                    $stockpileId2 = $row1->stockpileId2;
                    $updateTotal = $row1->updateTotal;
                    $qtyEstimasi = $row1->qtyEstimasi;

                    //$notes = $row1->biaya;
                    $dp_total = 0;
                    $dpAmount = 0;
                    $invoiceType = 4;
                    $accountId = $row1->account_id;
                    $invoiceMethodDetail = 1;
                    $mutasiHeaderId = $row1->mutasi_header_id;


                    $t_amount = $amount2 + $ppn2 - $pph2;
                    $tamount = $t_amount - $dp_total;
                    $amountConverted = $exchangeRate * $amount2;
                    $ppnConverted = $exchangeRate * $ppn2;
                    $pphConverted = $exchangeRate * $pph2;
                    $tamountConverted = $exchangeRate * $tamount;


                    if ($termin == 100 && $qtyEstimasi == 0 /*|| $availableAmount == 0*/) {
                        $sqlM = "UPDATE mutasi_detail SET status = 1 WHERE mutasi_detail_id = {$mutasiDetailId}";
                        $resultM = $myDatabase->query($sqlM, MYSQLI_STORE_RESULT);

                        $sqlMA = "SELECT * FROM mutasi_detail WHERE status = 0 AND mutasi_detail_id = {$mutasiDetailId}";
                        $resultMA = $myDatabase->query($sqlMA, MYSQLI_STORE_RESULT);
                        if ($resultMA->num_rows == 0) {
                            $rowMA = $resultMA->fetch_object();

                            //$poId = $row->poId;

                            $sqldp = "UPDATE mutasi_detail SET "
                                . "total_per_termin = {$updateTotal} "
                                . " WHERE mutasi_detail_id = {$mutasiDetailId}";
                            $resultdp = $myDatabase->query($sqldp, MYSQLI_STORE_RESULT);

                            $sqlCC = "SELECT SUM(total_per_termin) AS total FROM mutasi_detail WHERE mutasi_header_id = {$mutasiHeaderId}";
                            $resultCC = $myDatabase->query($sqlCC, MYSQLI_STORE_RESULT);
                            if ($resultCC->num_rows == 1) {
                                $rowCC = $resultCC->fetch_object();

                                $total = $rowCC->total;

                                $sqldd = "UPDATE mutasi_header SET "
                                    . "total = {$total} "
                                    . " WHERE mutasi_header_id = {$mutasiHeaderId}";
                                $resultdd = $myDatabase->query($sqldd, MYSQLI_STORE_RESULT);

                            }


                        }

                    }

                    $sql = "INSERT INTO `invoice_detail` (invoice_method_detail, type, account_id, poId, general_vendor_id, shipment_id, stockpile_remark, qty, price, termin, amount, prediksi_amount, amount_converted, currency_id, exchange_rate, ppnID, ppn, ppn_converted, pphID, pph, pph_converted, tamount, tamount_converted, dp_amount, notes, entry_by, entry_date, mutasi_detail_id,idUOM) VALUES ("
                        . "{$invoiceMethodDetail}, {$invoiceType}, {$accountId}, {$poId}, {$generalVendorId}, {$shipmentId1}, {$stockpileId2}, '{$qty}', '{$price}', '{$termin}', '{$amount2}', '{$prediksiAmount}', '{$amountConverted}', {$currencyId}, '{$exchangeRate}', {$ppnID} ,'{$ppn2}', '{$ppnConverted}', {$pphID}, '{$pph2}', '{$pphConverted}', '{$tamount}', '{$tamountConverted}', '{$dpAmount}', '{$notes}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$mutasiDetailId},{$uom})";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    // echo "INV". $sql;
                    if ($result !== false) {
                        $invoiceId = $myDatabase->insert_id;

                        $sqlN = "UPDATE mutasi_qty_price SET invoice_detail_id = {$invoiceId} WHERE id = {$id}";
                        $resultN = $myDatabase->query($sqlN, MYSQLI_STORE_RESULT);

                        $return_value = '|OK|Data has successfully inserted.||';
                    } else {
                        echo $sql;
                    }

                }

            }
        } else {
            $return_value = '|FAIL|Termin lebih dari 100%||';
            //break;
        }
    } else { //BUKAN MUTASI

        if ($boolVendor) {

            if ($invoiceType != '' && $accountId != '' && $qty != '' && $price != '' && $termin != '' && $amount != '' && $currencyId != '' && $boolShipment1 && $boolPO) {
                $t_amount = $amount2 + $ppn2 - $pph2;
                $tamount = $t_amount - $dp_total;
                $amountConverted = $exchangeRate * $amount2;
                $ppnConverted = $exchangeRate * $ppn2;
                $pphConverted = $exchangeRate * $pph2;
                $tamountConverted = $exchangeRate * $tamount;
                $status = 0;

                if ($invoiceMethodDetail == 2) {
                    $dpAmount = $tamountConverted;
                    $status = 2;
                } else {
                    $status = 1;
                    $dpAmount = 0;
                }

                $sql = "INSERT INTO `invoice_detail` (prediction_detail_id, prediksi_code_detail, invoice_method_detail, type, account_id, poId, general_vendor_id, shipment_id, biaya_id, stockpile_remark, qty, price, termin, amount, prediksi_amount, amount_converted, currency_id, exchange_rate, ppnID, ppn, ppn_converted, pphID, pph, pph_converted, tamount, tamount_converted, dp_amount, notes, entry_by, entry_date,idUOM) VALUES ("
                    . "{$prediksiId}, '{$codePrediksi}', {$invoiceMethodDetail}, {$invoiceType}, {$accountId}, {$poId}, {$generalVendorId}, {$shipmentId1}, {$tipeBiayaId}, {$stockpileId2}, '{$qty}', '{$price}', '{$termin}', '{$amount2}', '{$prediksiAmount}', '{$amountConverted}', {$currencyId}, '{$exchangeRate}', {$ppnID} ,'{$ppn2}', '{$ppnConverted}', {$pphID}, '{$pph2}', '{$pphConverted}', '{$tamount}', '{$tamountConverted}', '{$dpAmount}', '{$notes}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$uom})";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
              

                if ($result !== false) {
                    $invoiceId = $myDatabase->insert_id;
					$count = 0;
					
                    $return_value = '|OK|Data has successfully inserted.||';
                    //$checks2 = 0;
                    if ($poId != 'NULL') {
                        $sql = "UPDATE `contract` SET invoice_status = 1 WHERE contract_id = {$poId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }                 
                
                    if (isset($_POST['checkedSlips2'])) {
                        $checks2 = $_POST['checkedSlips2'];
                        if (isset($_POST['checkedSlips'])) {
                            $checks = $_POST['checkedSlips'];
                        } else {
                            $checks = '';
                        }

                        for ($i = 0; $i < sizeof($checks2); $i++) {
                            if ($checks[$i] != '') {
                                if ($slipNos2 == '') {
                                    $slipNos2 .= '(' . $invoiceId . ',' . $checks[$i] . ',' . $checks2[$i] . ')';
                                } else {
                                    $slipNos2 .= ',' . '(' . $invoiceId . ',' . $checks[$i] . ',' . $checks2[$i] . ')';
                                }
                            }
                        }
                    }
                    // echo $slipNos2;
                    $sql = "INSERT INTO invoice_dp (invoice_detail_id, invoice_detail_dp, amount_payment) VALUES {$slipNos2}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($result === false) {
                        echo 'salah';
                    }
					
					$sql = "UPDATE `accrue_prediction_detail` SET status = {$status} WHERE prediction_detail_id = {$prediksiId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    //setiap accrue_prediction_detail udah ke invoice/cancel semua, maka status = 1 di tabel accrue_prediction 
                    $sqlS = "SELECT * FROM accrue_prediction ap
                             INNER JOIN accrue_prediction_detail apd ON apd.prediction_id = ap.prediction_id
                             WHERE ap.prediction_id = {$prediksiHeader} AND apd.status in (0,2)";
                    $resultS = $myDatabase->query($sqlS, MYSQLI_STORE_RESULT);
                    $count = $resultS->num_rows;
					echo $sqlS;
                    if ($count == 0) {
                        $sqlA = "UPDATE accrue_prediction set status = 1 WHERE prediction_id = {$prediksiHeader}";
                        $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);        
                    }else{
                        $sqlA = "UPDATE accrue_prediction set status = 2 WHERE prediction_id = {$prediksiHeader}";
                        $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);        
                    }

                     insertGeneralLedger($myDatabase, 'INVOICE DETAIL', $invoiceId);
					
					$sqlCC = "SELECT a.prediction_detail_id FROM invoice_detail a
								LEFT JOIN accrue_prediction_detail b ON a.`prediction_detail_id` = b.`prediction_detail_id` WHERE b.journal_status = 1 AND a.invoice_detail_id = {$invoiceId}";
                            $resultCC = $myDatabase->query($sqlCC, MYSQLI_STORE_RESULT);
                            if ($resultCC->num_rows == 1) {
                                $rowCC = $resultCC->fetch_object();
                                $accrueId = $rowCC->prediction_detail_id;
                                insertGeneralLedger($myDatabase, 'JURNAL ACCRUE', "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", $accrueId);
								//insertReportGL($myDatabase, 'JURNAL ACCRUE', "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", $accrueId);

                            }

                } else {
                    $return_value = '|FAIL|Insert Data failed.||';
                    //echo $sql;
                }

            } else {
                $return_value = '|FAIL|Please fill the required fields.||';
            }
        } else {
            $return_value = '|FAIL|Please Choose Same Vendor.||';
        }
    }
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_invoice_detail') {
    // <editor-fold defaultstate="collapsed" desc="delete_user">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $invoiceDetailId = $myDatabase->real_escape_string($_POST['invoiceDetailId']);
    // </editor-fold>
    
    if($invoiceDetailId != '') {
		$sql = "UPDATE invoice_detail SET invoice_detail_dp = NULL, invoice_detail_status = 0 WHERE invoice_detail_dp = {$invoiceDetailId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


		$sql = "SELECT poId, prediction_detail_id FROM invoice_detail WHERE invoice_detail_id = {$invoiceDetailId}";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			if($result->num_rows == 1) {
				$row = $result->fetch_object();
				$poId = $row->poId;
                $prediksiId = $row->prediction_detail_id;
				
				$sqldp = "UPDATE contract SET " 
        				. "invoice_status = 0 "
                        . " WHERE contract_id = {$poId}";
				$resultdp = $myDatabase->query($sqldp, MYSQLI_STORE_RESULT);

                $sql1 = "UPDATE `accrue_prediction_detail` SET status = 0 WHERE prediction_detail_id = {$prediksiId}";
                $result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
			}
		
		$sqla = "SELECT mutasi_detail_id FROM invoice_detail WHERE invoice_detail_id = {$invoiceDetailId}";
			$resulta = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);
			if($resulta->num_rows == 1) {
				$rowa = $resulta->fetch_object();
				$mutasi_detail_id = $rowa->mutasi_detail_id;
				
				$sqlM = "UPDATE mutasi_detail SET status = 0 WHERE mutasi_detail_id = {$mutasi_detail_id}";
				$resultM = $myDatabase->query($sqlM, MYSQLI_STORE_RESULT);
				
				$sqlb = "DELETE FROM `mutasi_qty_price` WHERE mutasi_detail_id = {$mutasi_detail_id} AND invoice_detail_id = {$invoiceDetailId}";
				$resultb = $myDatabase->query($sqlb, MYSQLI_STORE_RESULT);
			}
		echo $sqla;
		echo $sqlb;
		echo 'a';
		echo $invoiceDetailId;
		
        $sql = "DELETE FROM `invoice_detail` WHERE invoice_detail_id = {$invoiceDetailId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|User has successfully deleted.|';
			echo 'a';
			echo $invoiceDetailId;
			echo $sqla;
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'invoice_data') { //1
    // <editor-fold defaultstate="collapsed" desc="invoice_data">

    $return_value = '';
    $addMessage = '';
    $boolNew = false;
    $boolContinue = true;
    $boolUpdate = false;
    $boolUpdateInvoice = false;
    $boolUpdateInvoiceDetail = false;
    $boolInsertVendor = false;
    $boolVendorExists = false;
    $boolRecalculate = false;
    $boolPriceUp = false;
    $boolPriceDown = false;
    $boolQuantityUp = false;
    $boolQuantityDown = false;

    $invoiceId = $myDatabase->real_escape_string($_POST['invoiceId']);
    $invoiceType = $myDatabase->real_escape_string($_POST['invoiceType']);
    $invoiceMethod = $myDatabase->real_escape_string($_POST['invoiceMethod']);
    $invoiceDP = $myDatabase->real_escape_string($_POST['invoice_dp']);
    $generatedInvoiceNo = $myDatabase->real_escape_string($_POST['generatedInvoiceNo']);
    $invoiceNo2 = $myDatabase->real_escape_string($_POST['generatedInvoiceNo2']);
    $grandTotal = $myDatabase->real_escape_string($_POST['grandTotal']);
    $stockpileContractId3 = $myDatabase->real_escape_string($_POST['stockpileContractId3']);
    $invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
    $inputDate = $myDatabase->real_escape_string($_POST['inputDate']);
    $requestDate = $myDatabase->real_escape_string($_POST['requestDate']);
    $taxDate = $myDatabase->real_escape_string($_POST['taxDate']);
    $invoiceTax = $myDatabase->real_escape_string($_POST['invoiceTax']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    // $prediksiId = $myDatabase->real_escape_string($_POST['prediksiDetailId']);
    $amount = $grandTotal;
    $amountConverted = $grandTotal;
    $amount_ori = $grandTotal;
    $amount_ori_conv = $grandTotal;

    // </editor-fold>
    if ($stockpileContractId3 == '') {
        $stockpileContractId3 = 'NULL';
    }
    if ($invoiceDP == 0) {
        $invoiceDP = 'NULL';
    }
    if ($shipmentId1 == '') {
        $shipmentId1 = 'NULL';
    }
    if ($price == '') {
        $price = 'NULL';
    }
    if ($quantity == '') {
        $quantity = 'NULL';
    }


    if ($invoiceId == '' || $invoiceId == 0 || $invoiceId == 'NULL') {
        $boolNew = true;
        // if($stockpileId == '') {
        //   $boolContinue = false;
        //}
    }

    $sql = "SELECT invoice_detail_id FROM invoice_detail WHERE invoice_id IS NULL AND entry_by = {$_SESSION['userId']} LIMIT 1";
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    if ($result !== false && $result->num_rows == 1) {
        $row = $result->fetch_object();

        $invoice_detail_id = $row->invoice_detail_id;

    }

    if ($invoice_detail_id != '' && $boolContinue) {

        if ($exchangeRate == '') {
            $exchangeRate = 1;
        }

        if ($grandTotal <= 0) {
            $boolContinue = true;

        }

        if ($boolContinue) {
            //closingDate
            // echo "TEST 1";

            //edit by yeni krn ga tau sumber fungsi clossingDate dari mana.
            // $newInvoiceDate = implode("-", array_reverse(explode("/", $invoiceDate)));
            // $checkClosingDate = explode('-', closingDate($newInvoiceDate, 'Invoice - Invoice'));
            // echo "TEST 2". $checkClosingDate;
            // $boolClosing = $checkClosingDate[0];
            // $closingDate = $checkClosingDate[1];

            // if (!$boolClosing) {
            //     $return_value = $closingDate;
            //     echo $return_value;
            // } else {

                if ($boolNew) {
                    $sql = "select DATE_FORMAT(STR_TO_DATE('{$inputDate}', '%d/%m/%Y'), '%y%m') AS slip_prefix from dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $rowSlip = $resultSlip->fetch_object();
                    $invoiceYearMonth = $rowSlip->slip_prefix;


                    $checkInvoiceNo = 'INV/JPJ/' . $invoiceYearMonth;

                    $sql = "SELECT invoice_no FROM invoice WHERE company_id = {$_SESSION['companyId']} AND invoice_no LIKE '{$checkInvoiceNo}%' ORDER BY invoice_id DESC LIMIT 1";
                    $resultInvoice = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultInvoice->num_rows == 1) {
                        $rowInvoice = $resultInvoice->fetch_object();
                        $splitInvoiceNo = explode('/', $rowInvoice->invoice_no);
                        $lastExplode = count($splitInvoiceNo) - 1;
                        $nextInvoiceNo = ((float)$splitInvoiceNo[$lastExplode]) + 1;
                        $invoiceNo = $checkInvoiceNo . '/' . $nextInvoiceNo;
                    } else {
                        $invoiceNo = $checkInvoiceNo . '/1';

                    }

                    if ($grandTotal > 0) {
                        $boolUpdateInvoice = true;

                        //$pph = $pph1;
                        //$ppn = $ppn1;
                    }
					if($_SESSION['mutasiDetail'] != ''){
                            //cek register date mutasi detail
                        $sqlCek = "SELECT * From mutasi_detail where mutasi_detail_id in ({$_SESSION['mutasiDetail']})";
                        $resultCek = $myDatabase->query($sqlCek, MYSQLI_STORE_RESULT);
                        echo $sqlCek;
//                        if ($resultCek !== false && $resultCek->num_rows > 0) {
                            while ($rowCek = $resultCek->fetch_object()) {
                                $registerDate = $rowCek->register_date;
                                if ($newInvoiceDate >= $registerDate) {
                                    $sql = "INSERT INTO `invoice` (invoice_date, input_date, request_date, tax_date, invoice_method, stockpileId, invoice_no, invoice_no2, invoice_tax, remarks,"
                                        . "po_id, company_id, entry_by, entry_date) VALUES ("
                                        . "STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), STR_TO_DATE('{$inputDate}', '%d/%m/%Y'), STR_TO_DATE('{$requestDate}', '%d/%m/%Y'), STR_TO_DATE('{$taxDate}', '%d/%m/%Y'), {$invoiceMethod},  {$stockpileId}, '{$invoiceNo}', '{$invoiceNo2}', '{$invoiceTax}', '{$remarks}',"
                                        . "{$stockpileContractId3}, {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                    unset($_SESSION['mutasiDetail']);
                                } else {
                                    unset($_SESSION['mutasiDetail']);
                                    $return_value = '|FAIL|Invoice date is older than the register mutation date.|';
                                    echo $return_value;
                                    die();
                                }
    //                            }
                            }
                        } else {
                            $sql = "INSERT INTO `invoice` (invoice_date, input_date, request_date, tax_date, invoice_method, stockpileId, invoice_no, invoice_no2, invoice_tax, remarks,"
                                        . "po_id, company_id, entry_by, entry_date) VALUES ("
                                        . "STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), STR_TO_DATE('{$inputDate}', '%d/%m/%Y'), STR_TO_DATE('{$requestDate}', '%d/%m/%Y'), STR_TO_DATE('{$taxDate}', '%d/%m/%Y'), {$invoiceMethod},  {$stockpileId}, '{$invoiceNo}', '{$invoiceNo2}', '{$invoiceTax}', '{$remarks}',"
                                        . "{$stockpileContractId3}, {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                        }
                    } else {
                        if ($grandTotal > 0) {
                            $boolUpdateInvoice = true;
                        }

                        $sql = "UPDATE `invoice` SET "
                            . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                            . "invoice_method = {$invoiceMethod}, "
                            . "invoice_dp = {$invoiceDP}, "
                            . "stockpileId = '{$stockpileId}', "
                            . "invoice_no = '{$invoiceNo}', "
                            . "invoice_no2 = '{$invoiceNo2}', "
                            . "invoice_tax = '{$invoiceTax}', "
                            . "general_vendor_id = {$generalVendorId}, "
                            . "po_id = {$stockpileContractId3}, "
                            . "shipmentId = {$shipmentId1}, "
                            . "price = {$price}, "
                            . "remarks = '{$remarks}' "
                            . "WHERE invoice_id = {$invoiceId}";
                    }
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if ($result !== false) {
                    if ($boolNew) {
                        $invoiceId = $myDatabase->insert_id;
                    }

                    $return_value = '|OK|Invoice has successfully inserted/updated.' . $addMessage . '|' . $invoiceId . '|';

                    $sql = "UPDATE `invoice_detail` SET invoice_id = {$invoiceId} WHERE invoice_id IS NULL AND entry_by = {$_SESSION['userId']}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                  //  $sql = "UPDATE `accrue_prediction_detail` SET status = 1 WHERE prediction_detail_id = {$prediksiId}";
                    //$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


                    $sqlA = "SELECT invoice_detail_id, prediction_detail_id  FROM invoice_detail
                             WHERE invoice_id = {$invoiceId}";
                    $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                    if ($resultA !== false && $resultA->num_rows >= 1) {
                        while ($rowA = $resultA->fetch_object()) {

                            $invoiceId = $rowA->invoice_detail_id;
							$accrueId = $rowA->prediction_detail_id;

                            insertReportGL($myDatabase, 'INVOICE DETAIL', $invoiceId);
							
							if($accrueId != '' || $accrueId != 'NULL' || $accrueId != 0){
							//insertGeneralLedger($myDatabase, 'JURNAL ACCRUE', "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", $accrueId);
							insertReportGL($myDatabase, 'JURNAL ACCRUE', "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", $accrueId);
							}

                        }
                    }
                    unset($_SESSION['invoice']);
                } else {
                    $return_value = '|FAIL|Insert/update invoice failed.' . $sql . '||';

                }
           // }
        } else {
            $return_value = '|FAIL|Please insert correct amount.' . $addMessage . '||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.' . $addMessage . '||';
    }

    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_invoice') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $invoiceId = $myDatabase->real_escape_string($_POST['invoiceId']);
    // </editor-fold>
    
    if($invoiceId != '') {
		$sql = "SELECT poId, prediction_detail_id FROM invoice_detail WHERE invoice_detail_id = {$invoiceDetailId} limit 1";
		$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		if($result->num_rows == 1) {
			 $row = $result->fetch_object();
			 $prediksiId = $row->prediction_detail_id;

		}

		$sql = "UPDATE `invoice` SET invoice_status = 0 WHERE invoice_dp = {$invoiceId} AND invoice_method = 2";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		$sql = "UPDATE `invoice_detail` SET invoice_detail_status = 0 WHERE invoice_id = {$invoiceId} AND invoice_method_detail = 2";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		$sql = "UPDATE `accrue_prediction_detail` SET status = 0 WHERE prediction_detail_id = {$prediksiId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

		
        $sql = "DELETE FROM `invoice` WHERE invoice_id = {$invoiceId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
        
        if($result !== false) {
            $return_value = '|OK|Invoice has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete invoice failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_po_pks') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $po_pks_id = $myDatabase->real_escape_string($_POST['po_pks_id']);
    // </editor-fold>
    
    if($po_pks_id != '') {
        $sql = "DELETE FROM `po_pks` WHERE po_pks_id = {$po_pks_id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Contract has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'po_pks_data') {
    // <editor-fold defaultstate="collapsed" desc="contract_data">
    
    $return_value = '';
    $addMessage = '';
    $boolNew = false;
    $boolContinue = true;
    $boolUpdate = false;
    $boolInsertVendor = false;
    $boolVendorExists = false;
	//$boolContractExists = false;
    $boolRecalculate = false;
    $boolPriceUp = false;
    $boolPriceDown = false;
    $boolQuantityUp = false;
    $boolQuantityDown = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $po_pks_id = $myDatabase->real_escape_string($_POST['po_pks_id']);
    //$contractType = $myDatabase->real_escape_string($_POST['contractType']);
    $contractNo = $myDatabase->real_escape_string($_POST['contractNo']);
	$spbNo = $myDatabase->real_escape_string($_POST['spbNo']);
    //$contractSeq = $myDatabase->real_escape_string($_POST['contractSeq']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    //$vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    //$vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    //$vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    //$npwp = $myDatabase->real_escape_string($_POST['npwp']);
    //$ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $contract = $myDatabase->real_escape_string($_POST['contract']);
	$spb = $myDatabase->real_escape_string($_POST['spb']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
	$notes = $myDatabase->real_escape_string($_POST['notes']);
	
  $finalStatus = $myDatabase->real_escape_string($_POST['finalStatus']);
    // </editor-fold>
    
    /*if($vendorId == 'INSERT') {
        if($vendorCode != '' && $vendorName != '' && $vendorAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$vendorCode}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($result !== false && $result->num_rows > 0) {
                $boolVendorExists = true;
                $addMessage = ' Vendor already exists.';
            } elseif($result !== false && $result->num_rows == 0) {
                $ppnValue = 0;
                $pphValue = 0;

                $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
                $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
                if($resultPPN !== false && $resultPPN->num_rows == 1) {
                    $rowPPN = $resultPPN->fetch_object();
                    $ppnValue = $rowPPN->tax_value;
                }

                $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
                $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                if($resultPPh !== false && $resultPPh->num_rows == 1) {
                    $rowPPh = $resultPPh->fetch_object();
                    $pphValue = $rowPPh->tax_value;
                }
                
                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                        . "UPPER('{$vendorCode}'), '{$vendorName}', '{$vendorAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $vendorId = $myDatabase->insert_id;
                    $boolInsertVendor = true;
                } 
            }
        } else {
            $boolInsertVendor = false;
        }
    } else {
        $boolInsertVendor = true;
    }
    */
    if ($po_pks_id == '') {
        $boolNew = true;
        
    }
	
	if ($contract != '' && $spb != '') {
        $purchasingId = $contract;
    }elseif ($contract != '' && $spb == '') {
		$purchasingId = $contract;
	}elseif ($contract == '' && $spb != '') {
		$purchasingId = $spb;
	}
    
    if($vendorId != '' && $currencyId != '' && $price != '' && $quantity != '' && $stockpileId != '' && $contractNo != '' && $spbNo != '' && $purchasingId != '') {
        
        if($exchangeRate == '') {
            $exchangeRate = 1;
        }
        
        $priceConverted = $price * $exchangeRate;
        
        if($boolNew) {
			 $sql = "SELECT * FROM `po_pks` WHERE UPPER(contract_no) = UPPER('{$contractNo}')";
        } else {
            $sql = "SELECT * FROM `po_pks` WHERE UPPER(contract_no) = UPPER('{$contractNo}') AND po_pks_id <> {$po_pks_id}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
			
			if($boolNew) {
           /* $sql = "SELECT * FROM vendor WHERE vendor_id = {$vendorId}";
            $resultVendor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultVendor !== false && $resultVendor->num_rows == 1) {
                $rowVendor = $resultVendor->fetch_object();
                $vendorCode = $rowVendor->vendor_code;
            }
            
            $checkPoNo = $contractType .'-'. $vendorCode .'-'. $currentYearMonth;
            if($contractSeq != "") {
                $poNo = $checkPoNo .'-'. $contractSeq;
            } else {
//            $sql = "SELECT RIGHT(po_no, 1) + 1 AS next_po FROM contract WHERE po_no LIKE '{$checkPoNo}%' ORDER BY entry_date DESC LIMIT 1";
//            $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//            $rowPo = $resultPo->fetch_object();
//            $nextPoNo = $rowPo->next_po;
//            $poNo = $checkPoNo .'-'. $nextPoNo;
                $sql = "SELECT po_no FROM contract WHERE company_id = {$_SESSION['companyId']} AND po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
                $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultPo->num_rows == 1) {
                    $rowPo = $resultPo->fetch_object();
                    $splitPoNo = explode('-', $rowPo->po_no);
                    $lastExplode = count($splitPoNo) - 1;
            		$nextPoNo = ((float) $splitPoNo[$lastExplode]) + 1;
                    $poNo = $checkPoNo .'-'. $nextPoNo;
                } else {
                    $poNo = $checkPoNo .'-1';
                }
            }*/
            
            
           $sql = "INSERT INTO `po_pks` (contract_no, spb_no, stockpile_id, vendor_id, currency_id, exchange_rate, price, price_converted, "
                    . "quantity, notes, company_id, entry_by, entry_date, purchasing_id,final_status) VALUES ("
                    . "'{$contractNo}', '{$spbNo}', {$stockpileId}, {$vendorId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, "
                    . "{$quantity}, '{$notes}', {$_SESSION['companyId']}, {$_SESSION['userId']},
                     STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$purchasingId},{$finalStatus})";
        } else {
			
			$boolUpdate = true;
            /*$sql = "SELECT * FROM po_pks WHERE contract_id = {$po_pks_id}";
            $resultContract = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            $rowContract = $resultContract->fetch_object();
            
            $sql = "SELECT * FROM vendor WHERE vendor_id = {$vendorId}";
            $resultVendor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultVendor !== false && $resultVendor->num_rows == 1) {
                $rowVendor = $resultVendor->fetch_object();
                $vendorCode = $rowVendor->vendor_code;
            }
            
            if($vendorId != $rowContract->vendor_id) {
                $checkPoNo = $contractType .'-'. $vendorCode .'-'. $currentYearMonth;
    //            $sql = "SELECT RIGHT(po_no, 1) + 1 AS next_po FROM contract WHERE po_no LIKE '{$checkPoNo}%' ORDER BY entry_date DESC LIMIT 1";
    //            $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    //            $rowPo = $resultPo->fetch_object();
    //            $nextPoNo = $rowPo->next_po;
    //            $poNo = $checkPoNo .'-'. $nextPoNo;
                $sql = "SELECT po_no FROM contract WHERE company_id = {$_SESSION['companyId']} AND po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
                $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultPo->num_rows == 1) {
                    $rowPo = $resultPo->fetch_object();
                    $splitPoNo = explode('-', $rowPo->po_no);
                    $lastExplode = count($splitPoNo) - 1;
            		$nextPoNo = ((float) $splitPoNo[$lastExplode]) + 1;
                    $poNo = $checkPoNo .'-'. $nextPoNo;
                } else {
                    $poNo = $checkPoNo .'-1';
                }
            } else {
                $poNo = $rowContract->po_no;
            }
            
            if($quantity != $rowContract->quantity) {
                $sql = "SELECT * FROM stockpile_contract WHERE contract_id = {$contractId}";
                $resultSC = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSC->num_rows == 1) {
                    $boolUpdate = true;
                } else {
                    $sql = "DELETE FROM stockpile_contract WHERE contract_id = {$contractId}";
                    $resultDel = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $addMessage = ' Please add stockpile in stockpile tab.';
                }
                
                $boolRecalculate = true;
                
                if((float) $quantity > (float) $rowContract->quantity) {
                    $boolQuantityUp = true;
                } else {
                    $boolQuantityDown = true;
                }
            }
            
            if($price != $rowContract->price) {
                $boolRecalculate = true;
                
                if((float) $price > (float) $rowContract->price) {
                    $boolPriceUp = true;
                } else {
                    $boolPriceDown = true;
                }
            }*/
			$sqlp2 = "SELECT * FROM po_pks WHERE po_pks_id = {$po_pks_id}";
				$resultp2 = $myDatabase->query($sqlp2, MYSQLI_STORE_RESULT);
					if ($resultp2->num_rows == 1) {
						while($rowp2 = $resultp2->fetch_object()){
							$p2 = $rowp2->purchasing_id;
							
			$sqlp3 = "UPDATE purchasing SET admin_input = NULL WHERE purchasing_id = {$p2}";
                    $resultp3 = $myDatabase->query($sqlp3, MYSQLI_STORE_RESULT);
						
						}
					}
            
            $sql = "UPDATE `po_pks` SET "
                    . "contract_no = '{$contractNo}', "
                    . "spb_no = '{$spbNo}', "
                    . "vendor_id = {$vendorId}, "
                    . "currency_id = {$currencyId}, "
                    . "exchange_rate = {$exchangeRate}, "
                    . "price = {$price}, "
                    . "price_converted = {$priceConverted}, "
                    . "quantity = {$quantity}, "
					. "purchasing_id = {$purchasingId}, "
					. "notes = '{$notes}', "
          	. "final_status = {$finalStatus} "
                    . "WHERE po_pks_id = {$po_pks_id}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
          /*  if($boolNew) {
                $contractId = $myDatabase->insert_id;
                
                $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                        . "{$stockpileId}, {$contractId}, {$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            } else {*/
			if($boolUpdate) {
				
				
				//echo $sql;
				$sqlC = "SELECT contract_id FROM po_contract
                                WHERE po_pks_id = {$po_pks_id}";
                $resultC = $myDatabase->query($sqlC, MYSQLI_STORE_RESULT);
                    if($resultC !== false && $resultC->num_rows >= 1) {
                      while($rowC = $resultC->fetch_object()){
                        $contractId = $rowC->contract_id;
						
                    
					$sqla = "UPDATE contract SET "
					. "vendor_id = {$vendorId}, "
                    . "price = {$price}, "
                    . "price_converted = {$priceConverted} "
					. "WHERE contract_id = {$contractId}";
                    $resulta = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);
					
					insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);
					
				$sqlNotim = "SELECT t.`transaction_id`, t.`slip_no`, c.price_converted FROM `transaction` t
							LEFT JOIN stockpile_contract sc ON sc.`stockpile_contract_id` = t.`stockpile_contract_id`
							LEFT JOIN contract c ON sc.contract_id = c.contract_id
							WHERE sc.`contract_id` = {$contractId}";
				$resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
					if ($resultNotim->num_rows >= 1) {
						while($rowNotim = $resultNotim->fetch_object()){
							$tId = $rowNotim->transaction_id;
							$unit_price = $rowNotim->price_converted;
					 
					 $sqlb = "UPDATE transaction SET "
                    . "unit_price = {$unit_price}"
					. "WHERE transaction_id = {$tId}";
                    $resultb = $myDatabase->query($sqlb, MYSQLI_STORE_RESULT);
				
					insertGeneralLedger($myDatabase, 'NOTA TIMBANG2', "NULL", "NULL", "NULL", $tId);
				
					}
			
				}
					}
                }
				
				
			}
			
			
               
			$sqlp = "UPDATE purchasing SET "
                    . "admin_input = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),"
                    . "open_add = 0 "					
					. "WHERE purchasing_id = {$purchasingId}";
                    $resultp = $myDatabase->query($sqlp, MYSQLI_STORE_RESULT); 
					
			$sqlu = "call update_purchasing ( {$purchasingId})";
                    $resultp = $myDatabase->query($sqlu, MYSQLI_STORE_RESULT);
					if ($resultp->num_rows == 1) {
						while($rowp2 = $resultp->fetch_object()){
							if($rowp2->ho == "1"){
								if(isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0 ){
									$filename = $_FILES['imagefile']['name'];
									$ext = pathinfo($filename, PATHINFO_EXTENSION);
									$allowed = array('pdf','jpg','jpeg','png','bmp');
									$attachmentPath = "./import/1/stockpile-" .$stockpileId."/1/".$vendorId;
									$attachmentPath2 = "http://10.15.14.56/purchasing/import/1/stockpile-".$stockpileId."/1/".$vendorId;
									echo $attachmentPath. " / ".$attachmentPath2;
									if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
										$temp = mkdir($attachmentPath, 0755, TRUE);
									else
										$temp = TRUE;

									if ($temp === TRUE) {
										$attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
										$attachmentPath2 .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
										
										$sqlp = "UPDATE purchasing SET "
										. "upload_file = '$attachmentPath2'"
										. "WHERE purchasing_id = {$purchasingId}";
										$resultp = $myDatabase->query($sqlp, MYSQLI_STORE_RESULT); 
										
										if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
											$boolContinue = FALSE;
											$return_value = '|FAIL|Error while uploading file.|';
										}
									} else {
										$boolContinue = FALSE;
										$return_value = '|FAIL|Error while creating directory.|';
									}
								}
								
								}
						}
							
						
				
				}

            $return_value = '|OK|Contract has successfully inserted/updated.'. $addMessage .'|'. $sql .'|';
            
          //  insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", "NULL", $po_pks_id);
            
            unset($_SESSION['contract']);
        } else {
            $return_value = '|FAIL|Insert/update contract failed.'. $addMessage .'||';
        }
		}else {
            $return_value = '|FAIL|Contract No. already exists.||';
        }
			}else {
        $return_value = '|FAIL|Please fill the required fields.'. $addMessage .'||';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_contract') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    // </editor-fold>
    
    if($contractId != '') {
		$sql = "UPDATE `po_pks` po LEFT JOIN po_contract poc ON po.po_pks_id = poc.po_pks_id
				SET po_status = 0 WHERE po.po_status = 1 AND poc.contract_id = {$contractId}";
        $result1 = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
		$sql = "UPDATE `po_pks` po LEFT JOIN po_contract poc ON po.po_pks_id = poc.po_pks_id
				SET po.lock_contract = 0 WHERE po.lock_contract = 1 AND poc.contract_id = {$contractId}";
        $result1 = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
        $sql = "DELETE FROM `contract` WHERE contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
		$sql = "DELETE FROM `po_contract` WHERE contract_id = {$contractId}";
        $result1 = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Contract has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'lock_contract') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    // </editor-fold>
    
    if($contractId != '') {
        $sql = "UPDATE `contract` SET contract_status = 1 WHERE contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Contract has successfully locked.|';
        } else {
            $return_value = '|FAIL|locked contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'akses_invoice') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    // </editor-fold>
    
    if($contractId != '') {
        $sql = "UPDATE `contract` SET invoice_status = 0 WHERE contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Contract has successfully Opened.|';
        } else {
            $return_value = '|FAIL|Opened contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'cancel_sales') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $sales_Id = $myDatabase->real_escape_string($_POST['sales_Id']);
    // </editor-fold>
    
    if($sales_Id != '') {
        $sql = "UPDATE `sales` SET sales_status = 4 WHERE sales_id = {$sales_Id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Sales has successfully Canceled.|';
        } else {
            $return_value = '|FAIL|Canceled Sales failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'return_sales') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $sales_Id = $myDatabase->real_escape_string($_POST['sales_Id']);
    // </editor-fold>
    
    if($sales_Id != '') {
        $sql = "UPDATE `sales` SET return_status = 1 WHERE sales_id = {$sales_Id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Sales has successfully Returned.|';
        } else {
            $return_value = '|FAIL|Returned Sales failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'close_invoice') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    // </editor-fold>
    
    if($contractId != '') {
        $sql = "UPDATE `contract` SET invoice_status = 1 WHERE contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Contract has successfully closed.|';
        } else {
            $return_value = '|FAIL|Closed contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'unlock_contract') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    // </editor-fold>
    
    if($contractId != '') {
        $sql = "UPDATE `contract` SET contract_status = 0 WHERE contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Contract has successfully locked.|';
        } else {
            $return_value = '|FAIL|locked contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'adjustment_data') {
    // <editor-fold defaultstate="collapsed" desc="user_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $adjustment = $myDatabase->real_escape_string($_POST['adjustment']);
    $adjustmentAcc = $myDatabase->real_escape_string($_POST['adjustmentAcc']);
    $adjustmentNotes = $myDatabase->real_escape_string($_POST['adjustmentNotes']);
	$adjustmentDate = $myDatabase->real_escape_string($_POST['adjustmentDate']);
	$contractId = $myDatabase->real_escape_string($_POST['contractId']);
	$ppn = $myDatabase->real_escape_string($_POST['ppn']);
    
    // </editor-fold>
    
    
    
   
        if($contractId != '' && $adjustment != '' && $adjustmentAcc != '' && $adjustmentNotes != '' && $adjustmentDate != '' && $ppn != '') {
            
           
                    $sql = "UPDATE `contract` SET "
                            . "adjustment = {$adjustment}, "
                            . "adjustment_acc = {$adjustmentAcc}, "
                            . "adjustment_notes = '{$adjustmentNotes}', "
							. "adjustment_ppn = {$ppn}, "
                            . "adjustment_date = STR_TO_DATE('{$adjustmentDate}', '%d/%m/%Y')"
                            . "WHERE contract_id = {$contractId}";
                
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                
                if($result !== false) {
                    
                    $return_value = '|OK|adjustment has successfully inserted/updated.||';
					
					insertGeneralLedger($myDatabase, 'CONTRACT ADJUSTMENT', "NULL", "NULL", $contractId);
					
                } else {
                    $return_value = '|FAIL|Insert/update adjustment failed.||';
					echo $sql;
                }
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'contract_data') {
    // <editor-fold defaultstate="collapsed" desc="contract_data">
    
    $return_value = '';
    $addMessage = '';
    $boolNew = false;
    $boolContinue = true;
    $boolUpdate = false;
    $boolInsertVendor = false;
    $boolVendorExists = false;
	//$boolContractExists = false;
    $boolRecalculate = false;
    $boolPriceUp = false;
    $boolPriceDown = false;
    $boolQuantityUp = false;
    $boolQuantityDown = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
	$po_pks_id = $myDatabase->real_escape_string($_POST['po_pks_id']);
    $contractType = $myDatabase->real_escape_string($_POST['contractType']);
    $contractNo = $myDatabase->real_escape_string($_POST['generatedContractNo']);
    $contractSeq = $myDatabase->real_escape_string($_POST['contractSeq']);
	$contractNo2 = $myDatabase->real_escape_string($_POST['contractNo2']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
	//$spbNo = $myDatabase->real_escape_string($_POST['spbNo']);
    //$vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    //$vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    //$vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    //$npwp = $myDatabase->real_escape_string($_POST['npwp']);
    //$ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $poNo = $myDatabase->real_escape_string($_POST['generatedPoNo']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpile_id']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty']));
	$adjustment = str_replace(",", "", $myDatabase->real_escape_string($_POST['adjustment']));
	$notes = $myDatabase->real_escape_string($_POST['notes']);
	$balance = $myDatabase->real_escape_string($_POST['balance']);
    $qty_rule = $myDatabase->real_escape_string($_POST['qty_rule']);
	$returnShipment = $myDatabase->real_escape_string($_POST['returnShipment']);
	$shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
	$mutasiType = $myDatabase->real_escape_string($_POST['mutasiType']);
	$contractDate = $myDatabase->real_escape_string($_POST['contractDate']);
	// </editor-fold>
    
    if ($contractId == '') {
        $boolNew = true;
        if($stockpileId == '') {
            $boolContinue = false;
        }
    }
	
	if ($currencyId == '') {
        
            $currencyId = 1;
        
    }
	
	if ($returnShipment == '') {
            $returnShipment = 'NULL';		
    }
	if ($shipmentId == '') {
            $shipmentId = 'NULL';		
    }
   
			
	if($balance >= $qty || $balance == 0){
				
    if($contractType != '' && $vendorId != '' && $currencyId != '' && $price != '' && $qty != '' && $boolContinue) {
        
        if($exchangeRate == '') {
            $exchangeRate = 1;
        }
			
        $priceConverted = $price * $exchangeRate;
    /*    
       if($boolNew) {
			 $sql = "SELECT * FROM `contract` WHERE UPPER(contract_no) = UPPER('{$contractNo}')";
        } else {
            $sql = "SELECT * FROM `contract` WHERE UPPER(contract_no) = UPPER('{$contractNo}') AND contract_id <> {$contractId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
			*/
			if($boolNew) {
           /* $sql = "SELECT * FROM vendor WHERE vendor_id = {$vendorId}";
            $resultVendor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultVendor !== false && $resultVendor->num_rows == 1) {
                $rowVendor = $resultVendor->fetch_object();
                $vendorCode = $rowVendor->vendor_code;
            }
            
            $checkPoNo = $contractType .'-'. $vendorCode .'-'. $currentYearMonth;
            if($contractSeq != "") {
                $poNo = $checkPoNo .'-'. $contractSeq;
            } else {
//            $sql = "SELECT RIGHT(po_no, 1) + 1 AS next_po FROM contract WHERE po_no LIKE '{$checkPoNo}%' ORDER BY entry_date DESC LIMIT 1";
//            $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//            $rowPo = $resultPo->fetch_object();
//            $nextPoNo = $rowPo->next_po;
//            $poNo = $checkPoNo .'-'. $nextPoNo;
                $sql = "SELECT po_no FROM contract WHERE company_id = {$_SESSION['companyId']} AND po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
                $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultPo->num_rows == 1) {
                    $rowPo = $resultPo->fetch_object();
                    $splitPoNo = explode('-', $rowPo->po_no);
                    $lastExplode = count($splitPoNo) - 1;
            		$nextPoNo = ((float) $splitPoNo[$lastExplode]) + 1;
                    $poNo = $checkPoNo .'-'. $nextPoNo;
                } else {
                    $poNo = $checkPoNo .'-1';
                }
            }*/
            
            
            $sql = "INSERT INTO `contract` (contract_type, po_no, contract_no, vendor_id, currency_id, exchange_rate, price, price_converted, "
                    . "quantity, notes, company_id, entry_by, entry_date, entry_date2, qty_rule, return_shipment, return_shipment_id,mutasi_type) VALUES ("
                    . "'{$contractType}', '{$poNo}', '{$contractNo}', {$vendorId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, "
                    . "{$qty}, '{$notes}', {$_SESSION['companyId']}, {$_SESSION['userId']}, 
					STR_TO_DATE('$contractDate', '%d/%m/%Y %H:%i:%s'),STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$qty_rule}, {$returnShipment}, {$shipmentId},{$mutasiType})";
        } else {
           $sql = "SELECT * FROM contract WHERE contract_id = {$contractId}";
            $resultContract = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            $rowContract = $resultContract->fetch_object();
			
			$contractNo3 = substr($rowContract->contract_no, 0, -2);
         /*   
            $sql = "SELECT * FROM vendor WHERE vendor_id = {$vendorId}";
            $resultVendor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultVendor !== false && $resultVendor->num_rows == 1) {
                $rowVendor = $resultVendor->fetch_object();
                $vendorCode = $rowVendor->vendor_code;
            }
            
           if($vendorId != $rowContract->vendor_id) {
                $checkPoNo = $contractType .'-'. $vendorCode .'-'. $currentYearMonth;
    //            $sql = "SELECT RIGHT(po_no, 1) + 1 AS next_po FROM contract WHERE po_no LIKE '{$checkPoNo}%' ORDER BY entry_date DESC LIMIT 1";
    //            $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    //            $rowPo = $resultPo->fetch_object();
    //            $nextPoNo = $rowPo->next_po;
    //            $poNo = $checkPoNo .'-'. $nextPoNo;
                $sql = "SELECT po_no FROM contract WHERE company_id = {$_SESSION['companyId']} AND po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
                $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultPo->num_rows == 1) {
                    $rowPo = $resultPo->fetch_object();
                    $splitPoNo = explode('-', $rowPo->po_no);
                    $lastExplode = count($splitPoNo) - 1;
            		$nextPoNo = ((float) $splitPoNo[$lastExplode]) + 1;
                    $poNo = $checkPoNo .'-'. $nextPoNo;
                } else {
                    $poNo = $checkPoNo .'-1';
                }
            } else {
                $poNo = $rowContract->po_no;
            }
            */
            if($quantity != $rowContract->quantity) {
                $sql = "SELECT * FROM stockpile_contract WHERE contract_id = {$contractId}";
                $resultSC = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSC->num_rows == 1) {
                    $boolUpdate = true;
                } else {
                    $sql = "DELETE FROM stockpile_contract WHERE contract_id = {$contractId}";
                    $resultDel = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $addMessage = ' Please add stockpile in stockpile tab.';
                }
                
                $boolRecalculate = true;
                
                if((float) $quantity > (float) $rowContract->quantity) {
                    $boolQuantityUp = true;
                } else {
                    $boolQuantityDown = true;
                }
            }
            
            if($price != $rowContract->price) {
                $boolRecalculate = true;
                
                if((float) $price > (float) $rowContract->price) {
                    $boolPriceUp = true;
                } else {
                    $boolPriceDown = true;
                }
            }
			
			$sql = "UPDATE contract SET contract_no = REPLACE(contract_no, '{$contractNo3}', '{$contractNo2}') WHERE contract_id = {$contractId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			$sql = "UPDATE po_pks pop LEFT JOIN po_contract poc ON poc.po_pks_id = pop.po_pks_id SET pop.contract_no = '{$contractNo2}' WHERE poc.contract_id = {$contractId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            
            $sql = "UPDATE `contract` SET "
                    . "quantity = {$qty}, "
					. "adjustment = '{$adjustment}', "
					. "notes = '{$notes}', "
					. "entry_date = STR_TO_DATE('$contractDate', '%d/%m/%Y %H:%i:%s'), "
					. "qty_rule = '{$qty_rule}' "
                    . "WHERE contract_id = {$contractId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            if($boolNew) {
                $contractId = $myDatabase->insert_id;
                
                $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                        . "{$stockpileId}, {$contractId}, {$qty}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
				
				if($boolNew && $result!==false){
					$id = $myDatabase->insert_id;
					 $sqlsp = "CALL surattugas_generate2({$id})";
						$resultsp = $myDatabase->query($sqlsp, MYSQLI_STORE_RESULT);
						if($resultsp->num_rows == 1) {
							$rowsp = $resultsp->fetch_object();
							//$stockpileContractIds = $rowSC->stockpile_contract_ids;
						} 
				}
				
				$sql = "INSERT INTO po_contract (po_pks_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                        . "{$po_pks_id}, {$contractId}, {$qty}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
				$sql = "UPDATE po_pks SET lock_contract = 1 WHERE po_pks_id = {$po_pks_id}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
				if($qty == $balance){
					$sql = "UPDATE po_pks SET po_status = 1 WHERE po_pks_id = {$po_pks_id}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				}
					
            } else {
                if($boolUpdate) {
                    $sql = "UPDATE stockpile_contract SET quantity = {$qty} WHERE contract_id = {$contractId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
					$sql = "UPDATE po_contract SET quantity = {$qty} WHERE contract_id = {$contractId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                
                if($boolRecalculate) {
                    $stockpileContractIds = "";
                    
                    // get stockpile_contract_id to update payment, transaction
                    $sql = "SELECT group_concat(stockpile_contract_id) AS stockpile_contract_ids FROM stockpile_contract
                                WHERE contract_id = {$contractId}";
                    $resultSC = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultSC->num_rows == 1) {
                        $rowSC = $resultSC->fetch_object();
                        $stockpileContractIds = $rowSC->stockpile_contract_ids;
                    } 
                    
                    if($stockpileContractIds != "") {
                        if($boolPriceUp || $boolQuantityUp) {
                            // change all payment_status in contract = 0
                            // change all payment_method to 2 in payment
                            // change unit_price & inventory_value in transaction => if price up only
                            // change inventory_value in delivery => if price up only
                            // change cogs_amount in shipment & inventory_value in transaction for shipment => if price up only
                            // change payment if payment_id in shipment is not null
                        } elseif($boolPriceDown || $boolQuantityDown) {
                            
                        }
                    }
                }
            }
			
			 
            $return_value = '|OK|Contract has successfully inserted/updated.'. $addMessage .'|'. $contractId .'|';
            //$contractId = $myDatabase->insert_id;
            insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);
            
            unset($_SESSION['contract']);
        } else {
            $return_value = '|FAIL|Insert/update contract failed.'. $addMessage .'|'.$sql.'|';
        }
		/*}else {
            $return_value = '|FAIL|Contract No. already exists.||';
        }*/
			}
			else {
				 $return_value = '|FAIL|Please fill the required fields.'. $addMessage .'||';
        
    }
	}else {
       $return_value = '|FAIL|The quantity exceed the balance of the contract.|';
    }
    
    echo $return_value;
    // </editor-fold>
}/*
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'invoice_data') {
    // <editor-fold defaultstate="collapsed" desc="invoice_data">
    
    $return_value = '';
    $addMessage = '';
    $boolNew = false;
    $boolContinue = true;
    $boolUpdate = false;
    $boolInsertVendor = false;
    $boolVendorExists = false;
    $boolRecalculate = false;
    $boolPriceUp = false;
    $boolPriceDown = false;
    $boolQuantityUp = false;
    $boolQuantityDown = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $invoiceId = $myDatabase->real_escape_string($_POST['invoiceId']);
   // $contractType = $myDatabase->real_escape_string($_POST['contractType']);
   	$generatedInvoiceNo = $myDatabase->real_escape_string($_POST['generatedInvoiceNo']);
	$invoiceNo = $generatedInvoiceNo;
    //$contractSeq = $myDatabase->real_escape_string($_POST['contractSeq']);
    $generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId']);
    //$vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    //$vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    //$vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    //$npwp = $myDatabase->real_escape_string($_POST['npwp']);
    //$ppn = $myDatabase->real_escape_string($_POST['ppn']);
    //$pph = $myDatabase->real_escape_string($_POST['pph']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    //$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
	$amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
    // </editor-fold>
    
   
    
    if ($invoiceId == '') {
        $boolNew = true;
       // if($stockpileId == '') {
         //   $boolContinue = false;
        //}
    }
    
    if($generalVendorId != '' && $currencyId != '' && $price != '' && $quantity != '' && $amount != '' && $boolContinue) {
        
        if($exchangeRate == '') {
            $exchangeRate = 1;
        }
        
        
        
        if($boolNew) {
            
            
            $checkInvoiceNo = 'INV/JPJ/'. $currentYearMonth;
   
        $sql = "SELECT invoice_no FROM invoice WHERE company_id = {$_SESSION['companyId']} AND invoice_no LIKE '{$checkInvoiceNo}%' ORDER BY invoice_id DESC LIMIT 1";
        $resultInvoice = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($resultInvoice->num_rows == 1) {
            $rowInvoice = $resultInvoice->fetch_object();
            $splitInvoiceNo = explode('-', $rowInvoice->invoice_no);
            $lastExplode = count($splitInvoiceNo) - 1;
            $nextInvoiceNo = ((float) $splitInvoiceNo[$lastExplode]) + 1;
            $InvoiceNo = $checkPoNo .'/'. $nextInvoiceNo;
        } else {
            $InvoiceNo = $checkInvoiceNo .'/1';
        
    
            }
            $priceConverted = $price * $exchangeRate;
            
            $sql = "INSERT INTO `invoice` (invoice_no, general_vendor_id, currency_id, exchange_rate, quantity, price, price_converted, "
                    . "amount, company_id, entry_by, entry_date) VALUES ("
                    . "'{$invoiceNo}', {$generalVendorId}, {$currencyId}, {$exchangeRate}, {$quantity}, {$price}, {$priceConverted}, "
                    . "{$amount}, {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        } else {
            $sql = "SELECT * FROM invoice WHERE contract_id = {$invoiceId}";
            $resultInvoice = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            $rowInvoice = $resultInvoice->fetch_object();
            
           
            
            if($generalVendorId != $rowContract->general_vendor_id) {
                $checkInvoiceNo = 'INV/JPJ/'. $currentYearMonth;
   
        $sql = "SELECT invoice_no FROM invoice WHERE company_id = {$_SESSION['companyId']} AND invoice_no LIKE '{$checkInvoiceNo}%' ORDER BY invoice_id DESC LIMIT 1";
        $resultInvoice = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($resultInvoice->num_rows == 1) {
            $rowInvoice = $resultInvoice->fetch_object();
            $splitInvoiceNo = explode('-', $rowInvoice->invoice_no);
            $lastExplode = count($splitInvoiceNo) - 1;
            $nextInvoiceNo = ((float) $splitInvoiceNo[$lastExplode]) + 1;
            $InvoiceNo = $checkPoNo .'/'. $nextInvoiceNo;
        } else {
            $InvoiceNo = $checkInvoiceNo .'/1';
        
    
            }
            } else {
                $InvoiceNo = $rowInvoice->invoice_no;
            }
           
            
            $sql = "UPDATE `invoice` SET "
                    . "invoice_no = '{$invoiceNo}', "
                    . "general_vendor_id = {$generalVendorId}, "
                    . "currency_id = {$currencyId}, "
                    . "exchange_rate = {$exchangeRate}, "
                    . "price = {$price}, "
					. "amount = {$amount}, "
                    . "price_converted = {$priceConverted}, "
                    . "quantity = {$quantity} "
                    . "WHERE invoice_id = {$invoiceId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

       if($result !== false) {
        

            $return_value = '|OK|Contract has successfully inserted/updated.'. $addMessage .'|'. $invoiceId .'|';
            
           // insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", $contractId);
            
            unset($_SESSION['contract']);
        } else {
            $return_value = '|FAIL|Insert/update contract failed.'. $addMessage .'||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.'. $addMessage .'||';
    }
    
    echo $return_value;
    // </editor-fold>
}
*/
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'contract_stockpile_data') {
    // <editor-fold defaultstate="collapsed" desc="contract_stockpile_data">
    
    $return_value = '';
    $boolNew = false;
    $boolExceedQuantity = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    // </editor-fold>
    
    if ($stockpileContractId == '') {
        $boolNew = true;
    }
    
    if($stockpileId != '' && $quantity != '') {
        $sql = "SELECT * FROM contract WHERE contract_id = {$contractId}";
        $resultContract = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($resultContract !== false && $resultContract->num_rows == 1) {
            $rowContract = $resultContract->fetch_object();
            $totalQuantity = $rowContract->quantity;
        }
        
        $currentQuantity = 0;
        
        if($boolNew) {
            $sql = "SELECT * FROM `stockpile_contract` WHERE stockpile_id = {$stockpileId} AND contract_id = {$contractId}";
            $sqlQuantity = "SELECT COALESCE(SUM(quantity), 0) AS current_quantity FROM stockpile_contract WHERE stockpile_id = {$stockpileId} AND contract_id = {$contractId}";
        } else {
            $sql = "SELECT * FROM `stockpile_contract` WHERE stockpile_id = {$stockpileId} AND contract_id = {$contractId} AND stockpile_contract_id <> {$stockpileContractId}";
            $sqlQuantity = "SELECT COALESCE(SUM(quantity), 0) AS current_quantity FROM stockpile_contract WHERE stockpile_id = {$stockpileId} AND contract_id = {$contractId} AND stockpile_contract_id NOT IN ({$stockpileContractId})";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        $resultQuantity = $myDatabase->query($sqlQuantity, MYSQLI_STORE_RESULT);
        if($resultQuantity !== false && $resultQuantity->num_rows == 1) {
            $rowQuantity = $resultQuantity->fetch_object();
            $currentQuantity = $rowQuantity->current_quantity;
        }
        
        $maxQuantity = $totalQuantity - $currentQuantity;
        if($quantity > $maxQuantity) {
            $boolExceedQuantity = true;
        }

        if($result !== false && $result->num_rows == 0 && !$boolExceedQuantity) {
            if($boolNew) {
                $sql = "INSERT INTO `stockpile_contract` (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                        . "{$stockpileId}, {$contractId}, {$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `stockpile_contract` SET "
                        . "quantity = {$quantity}, "
						. "stockpile_id = {$stockpileId} "
                        . "WHERE stockpile_contract_id = {$stockpileContractId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			
			if($boolNew && $result!==false){
				$id = $myDatabase->insert_id;
				 $sqlsp = "CALL surattugas_generate2({$id})";
                    $resultsp = $myDatabase->query($sqlsp, MYSQLI_STORE_RESULT);
                    if($resultsp->num_rows == 1) {
                        $rowsp = $resultsp->fetch_object();
                        //$stockpileContractIds = $rowSC->stockpile_contract_ids;
                    } 
			}
			
            if($result !== false) {
                $return_value = '|OK|Stockpile has successfully inserted/updated.|';
            } else {
                $return_value = '|FAIL|Insert/update stockpile failed.|';
            }
        } else {
            if($boolExceedQuantity) {
                $return_value = '|FAIL|Quantity exceed total quantity.|';
            } else {
                $return_value = '|FAIL|Stockpile already exists.|';
            }
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'contract_condition_data') {
    // <editor-fold defaultstate="collapsed" desc="contract_condition_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $conditionId = $myDatabase->real_escape_string($_POST['conditionId']);
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    $categoryId = $myDatabase->real_escape_string($_POST['categoryId']);
    $rule = $myDatabase->real_escape_string($_POST['rule']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    // </editor-fold>
    
    if ($conditionId == '') {
        $boolNew = true;
    }
    
    if($categoryId != '' && $rule != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `condition` WHERE category_id = {$categoryId} AND contract_id = {$contractId}";
        } else {
            $sql = "SELECT * FROM `condition` WHERE category_id = {$categoryId} AND contract_id = {$contractId} AND condition_id <> {$conditionId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `condition` (category_id, contract_id, rule, remarks, entry_by, entry_date) VALUES ("
                        . "{$categoryId}, {$contractId}, '{$rule}', '{$remarks}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `condition` SET "
                        . "category_id = {$categoryId}, "
                        . "rule = '{$rule}', "
                        . "remarks = '{$remarks}' "
                        . "WHERE condition_id = {$conditionId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Condition has successfully inserted/updated.|';
            } else {
                $return_value = '|FAIL|Insert/update condition failed.|';
            }
        } else {
            $return_value = '|FAIL|Category already exists.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_transaction') {
    // <editor-fold defaultstate="collapsed" desc="delete_transaction">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $transactionId = $myDatabase->real_escape_string($_POST['transactionId']);
    // </editor-fold>
    
    if($transactionId != '') {
        $sql = "DELETE FROM `transaction` WHERE transaction_id = {$transactionId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Transaction has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete transaction failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
/**
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_data">
    
    $return_value = '';
    $boolQuantity = true;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
    $transactionDate = $myDatabase->real_escape_string($_POST['transactionDate']);
    $loadingDate = $myDatabase->real_escape_string($_POST['loadingDate']);
    $transactionDate2 = $myDatabase->real_escape_string($_POST['transactionDate2']);
    $vehicleNo = $myDatabase->real_escape_string($_POST['vehicleNo']);
    $vehicleNo2 = $myDatabase->real_escape_string($_POST['vehicleNo2']);
    $unloadingCostId = $myDatabase->real_escape_string($_POST['unloadingCostId']);
    $unloadingDate = $myDatabase->real_escape_string($_POST['unloadingDate']);
    $freightCostId = $myDatabase->real_escape_string($_POST['freightCostId']);
	$handlingCostId = $myDatabase->real_escape_string($_POST['handlingCostId']);
    $permitNo = $myDatabase->real_escape_string($_POST['permitNo']);
    $transactionType = $myDatabase->real_escape_string($_POST['transactionType']);
    $sendWeightRule = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight']));
	$sendWeightPKS = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeightPKS']));
    $sendWeight2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight2']));
    $blWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['blWeight']));
    $brutoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['brutoWeight']));
    $tarraWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['tarraWeight']));
    $nettoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['nettoWeight']));
    $notes = $myDatabase->real_escape_string($_POST['notes']);
	$notes2 = $myDatabase->real_escape_string($_POST['notes2']);
    $driver = $myDatabase->real_escape_string($_POST['driver']);
    $block = $myDatabase->real_escape_string($_POST['block']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $supplierId = $myDatabase->real_escape_string($_POST['supplierId']);
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $isTaxable = $myDatabase->real_escape_string($_POST['isTaxable']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $stockpileCode = '';
    $unitPrice = 0;
    $balanceQuantity = 0;
    $contractId = 0;
    $custTaxId = 'NULL';
    $curahTaxId = 'NULL';
    $ucTaxId = 0;
    $fcTaxId = 0;
	$t_date = str_replace('/', '-', $unloadingDate);
	$t_date2 = str_replace('/', '-', $transactionDate2);
	$currentYear2 = date('y', strtotime($t_date));
	$currentYear3 = date('y', strtotime($t_date2));
	$slipUpload = $myDatabase->real_escape_string($_POST['idSuratTugas']);
    // </editor-fold>
	
	
	$allowInsert = false;
	$allowInsert2 = false;
	$date = new DateTime();
	$todayDate = $date->format('Y-m-d');
	$date1 = new DateTime($todayDate);
	
	$dateTrans = str_replace("/", "-", $myDatabase->real_escape_string($_POST['unloadingDate']));
	$dt = date('Y-m-d',strtotime($dateTrans));
	$date2 = new DateTime($dt);
	$a = $date1->format('Y-m-d');
	$b = $date2->format('Y-m-d');
	$diff =date_diff(date_create($a),date_create($b));
    $interval = $diff->days;
	
	$dateTrans2 = str_replace("/", "-", $myDatabase->real_escape_string($_POST['transactionDate2']));
	$dt2 = date('Y-m-d',strtotime($dateTrans2));
	$date22 = new DateTime($dt2);
	$a2 = $date1->format('Y-m-d');
	$b2 = $date22->format('Y-m-d');
	$diff2 =date_diff(date_create($a2),date_create($b2));
    $interval2 = $diff2->days;
	
	if($interval < 5){
		$allowInsert = true;
	}
	
	if($interval2 < 5){
		$allowInsert2 = true;
	}
    
	$sql = "SELECT * FROM user_module WHERE user_id = {$_SESSION['userId']} and module_id = 30";
	$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
	if($result->num_rows > 0) {
    while($row = $result->fetch_object()) {
        if($row->module_id == 30) {
            $allowInsert = true;
			$allowInsert2 = true;
        }
	}
}
	
    if($isTaxable == '') {
        $isTaxable = 0;
    }
    
    if($ppn == '') {
        $ppn = 0;
    }
    
    if($pph == '') {
        $pph = 0;
    }
	
    
    if($transactionType == 1) {
		if($allowInsert){
        // <editor-fold defaultstate="collapsed" desc="IN">
        if($stockpileId != '' && $stockpileContractId != '' && $loadingDate != '' && $vehicleNo != '' && $unloadingCostId != '' &&
                $unloadingDate != '' && $freightCostId != '' && $handlingCostId != '' && $transactionType != '' && $sendWeightRule != '' &&
                $brutoWeight != '' && $tarraWeight != '' && $driver != '' && $vendorId != '' && $laborId != '') {

            if($supplierId == '') {
                $supplierId = "NULL";
            }
            if($slipUpload == '') {
			$slipUpload = 0;
			}
			
			if($sendWeightPKS != ''){
				if($sendWeightPKS == $sendWeightRule ){
					$posting = 0;
				}else{
					$posting = 1;
				}
			}else{
				$posting = 0;
			}
			

            // check balance contract & get unit price
            $sql = "SELECT s.stockpile_code, con.price_converted, sc.contract_id, con.contract_type, con.qty_rule,
                        ((SELECT COALESCE(SUM(quantity), 0) FROM stockpile_contract WHERE contract_id = sc.contract_id
                        ) - con.adjustment) - (
                            SELECT CASE WHEN c.contract_type = 'C' THEN COALESCE(SUM(t.quantity), 0)
                ELSE COALESCE(SUM(t.send_weight), 0) END 
                FROM TRANSACTION t LEFT JOIN stockpile_contract sc ON t.stockpile_contract_id = sc.`stockpile_contract_id`
                LEFT JOIN contract c ON c.contract_id = sc.contract_id
                WHERE sc.contract_id =  con.contract_id
                        ) AS balance, s.freight_weight_rule, s.curah_weight_rule, v.pph_tax_id
                    FROM stockpile_contract sc
                    INNER JOIN stockpile s
                        ON s.stockpile_id = sc.stockpile_id
                    INNER JOIN contract con
                        ON con.contract_id = sc.contract_id
                    INNER JOIN vendor v
                        ON v.vendor_id = con.vendor_id
                    WHERE stockpile_contract_id = {$stockpileContractId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $contractId = $rowStockpile->contract_id;
                $unitPrice = $rowStockpile->price_converted;
                $contractType = $rowStockpile->contract_type;
                $freightWeightRule = $rowStockpile->freight_weight_rule;
                $curahWeightRule = $rowStockpile->curah_weight_rule;
                if($contractType == 'P') {
                    $balanceQuantity = $rowStockpile->balance;
                } elseif($contractType == 'C') {
                    $balanceQuantity = $rowStockpile->balance;
                    if($rowStockpile->pph_tax_id != 0 && $rowStockpile->pph_tax_id != '') {
                        $curahTaxId = $rowStockpile->pph_tax_id;
                    }
                }
				$qty_rule = $rowStockpile->qty_rule;
				if($qty_rule == 0){
					$sendWeight = $sendWeightRule;
				}else if($qty_rule == 1){
					$sendWeight = $nettoWeight;
				}else{
					if($sendWeightRule < $nettoWeight){
						$sendWeight = $sendWeightRule;
					} elseif($nettoWeight < $sendWeightRule) {
						$sendWeight = $nettoWeight;
					}else{
						$sendWeight = $sendWeightRule;
					}
				
				}
            }

            // get netto weight
            //$nettoWeight = $brutoWeight - $tarraWeight;
            
            // get freight weight
			$sqlfc = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                    $resultfc = $myDatabase->query($sqlfc, MYSQLI_STORE_RESULT);
                    if($resultFreight !== false && $resultFreight->num_rows == 1) {
                        $rowFreight = $resultFreight->fetch_object();
                        $freightRule = $rowFreight->freight_rule;
					
                       
                    }
			
			if($freightWeightRule == 0 && $freightRule == 1) {
				$freightQuantity = $sendWeight;
            }elseif($freightWeightRule == 0 && $freightRule == 0) {
                if($nettoWeight < $sendWeight) {
                    $freightQuantity = $nettoWeight;
                } elseif($nettoWeight > $sendWeight) {
                    $freightQuantity = $sendWeight;
                } else {
                    $freightQuantity = $sendWeight;
                }
            } elseif($freightWeightRule == 1) {
                $freightQuantity = $sendWeight;
            } elseif($freightWeightRule == 2) {
                $freightQuantity = $nettoWeight;
            } else {
                $freightQuantity = $sendWeight;
            }

            // get shrink condition
//            $quantity = $nettoWeight;
//            $sql = "SELECT * FROM `condition` WHERE category_id = 1 AND contract_id = {$contractId}";
//            $resultCondition = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//            if($resultCondition !== false && $resultCondition->num_rows == 1) {
//                $rowCondition = $resultCondition->fetch_object();
//                $quantity = ${$rowCondition->rule};
//            }

            if($sendWeight <= $balanceQuantity || ($contractType == 'C' && $balanceQuantity >=0)) {
                // get shrink
                $shrink = 0;
                if($contractType == 'P') {
                    if($nettoWeight < $sendWeight) {
                        $quantity = $nettoWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } elseif($nettoWeight > $sendWeight) {
                        $quantity = $sendWeight;
                        $shrink = 0;
                    } else {
                        $quantity = $sendWeight;
                    }
                } elseif($contractType == 'C') {
                    if($curahWeightRule == 0) {
                        if($nettoWeight < $sendWeight) {
                            $quantity = $nettoWeight;
                            $shrink = $sendWeight - $nettoWeight;
                        } elseif($nettoWeight > $sendWeight) {
                            $quantity = $sendWeight;
                            $shrink = 0;
                        } else {
                            $quantity = $sendWeight;
                        }
                    } elseif($curahWeightRule == 1) {
                        $quantity = $sendWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } elseif($curahWeightRule == 2) {
                        $quantity = $nettoWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } else {
                        $quantity = $sendWeight;
                    }
                }

                // get next slip no
                
					$checkSlipNo = $stockpileCode .'-'. $currentYear2;
				
//                $sql = "SELECT LPAD(COUNT(1) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ";
//                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;

                // get freight cost
                if ($active_from == $todayDate) {
                    if ($freightCostId == 'NONE') {
                        $freightCostId = 'NULL';
                        $freightPrice = 0;
                        $freightQuantity2111 = 0;
                    } else {
                        $sql = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                        $resultFreight = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($resultFreight !== false && $resultFreight->num_rows == 1) {
                            $rowFreight = $resultFreight->fetch_object();
                            $freightPrice = $rowFreight->price_converted;
                            if ($rowFreight->freight_rule == 1) {
                                $freightQuantity2111 = $sendWeight;
                            } else {
                                $freightQuantity2111 = $freightQuantity;
                            }
                            if ($rowFreight->pph_tax_id != 0 && $rowFreight->pph_tax_id != '') {
                                $fcTaxId = $rowFreight->pph_tax_id;
                            } else {
                                $fcTaxId = 0;
                            }
                        }
                    }
                } else {
                       if ($freightCostId == 'NONE') {
                        $freightCostId = 'NULL';
                        $freightPrice = 0;
                        $freightQuantity2111 = 0;
                    } else {
                        $sql = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                        $resultFreight = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($resultFreight !== false && $resultFreight->num_rows == 1) {
                            $rowFreight = $resultFreight->fetch_object();
                            $freightPrice = $rowFreight->price_converted;
                            if ($rowFreight->freight_rule == 1) {
                                $freightQuantity2111 = $sendWeight;
                            } else {
                                $freightQuantity2111 = $freightQuantity;
                            }
                            if ($rowFreight->pph_tax_id != 0 && $rowFreight->pph_tax_id != '') {
                                $fcTaxId = $rowFreight->pph_tax_id;
                            } else {
                                $fcTaxId = 0;
                            }
                        }
                    }
                }
//                 if($freightCostId == 'NONE') {
//                    $freightCostId = 'NULL';
//                    $freightPrice = 0;
//					$freightQuantity2111 = 0;
//                } else {
//                    $sql = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
//                            FROM `freight_cost` fc
//                            INNER JOIN freight f
//                                ON f.freight_id = fc.freight_id
//                            WHERE fc.freight_cost_id = {$freightCostId}";
//                    $resultFreight = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                    if($resultFreight !== false && $resultFreight->num_rows == 1) {
//                        $rowFreight = $resultFreight->fetch_object();
//                        $freightPrice = $rowFreight->price_converted;
//					if($rowFreight->freight_rule == 1){
//							$freightQuantity2111 = $sendWeight;
//						}else{
//							$freightQuantity2111 = $freightQuantity;
//						}
//                        if($rowFreight->pph_tax_id != 0 && $rowFreight->pph_tax_id != '') {
//                            $fcTaxId = $rowFreight->pph_tax_id;
//                        }else{
//							$fcTaxId = 0;
//						}
//                    }
//                }
			
			// get handling cost
				 if($handlingCostId == 'NONE') {
                    $handlingCostId = 'NULL';
					$handlingQuantity = 0;
					$handlingPrice = 0;
                } else {
                    $sql = "SELECT vhc.vendor_handling_id, vhc.price_converted, vh.pph_tax_id, vh.vendor_handling_rule
                            FROM `vendor_handling_cost` vhc 
                            INNER JOIN vendor_handling vh
                                ON vh.vendor_handling_id = vhc.vendor_handling_id
                            WHERE vhc.handling_cost_id = {$handlingCostId}";
                    $resultHandling = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultHandling !== false && $resultHandling->num_rows == 1) {
                        $rowHandling = $resultHandling->fetch_object();
                        $handlingPrice = $rowHandling->price_converted;
					if($rowHandling->vendor_handling_rule == 1){
							$handlingQuantity = $sendWeight;
						}else{
							$handlingQuantity = $nettoWeight;
						}
                        
                    }
                }
				
                // get unloading cost
                if($unloadingCostId == 'NONE') {
                    $unloadingCostId = 'NULL';
                    $unloadingPrice = 0;
                } else {
                    $sql = "SELECT uc.price_converted 
                            FROM `unloading_cost` uc 
                            WHERE uc.unloading_cost_id = {$unloadingCostId}";
                    $resultUnloading = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultUnloading !== false && $resultUnloading->num_rows == 1) {
                        $rowUnloading = $resultUnloading->fetch_object();
                        $unloadingPrice = $rowUnloading->price_converted;
                    }
                }
                
                if($laborId == 'NONE') {
                    $laborId = 'NULL';
                } else {
                    $sql = "SELECT l.pph_tax_id
                            FROM `labor` l
                            WHERE l.labor_id = {$laborId}";
                    $resultLabor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultLabor !== false && $resultLabor->num_rows == 1) {
                        $rowLabor = $resultLabor->fetch_object();
                        if($rowLabor->pph_tax_id != 0 && $rowLabor->pph_tax_id != '') {
                            $ucTaxId = $rowLabor->pph_tax_id;
                        } else{
							 $ucTaxId = 0;
						}
                    }
                }
                
                // get inventory value
                $inventoryValue = ($freightQuantity * $freightPrice) + $unloadingPrice + ($quantity * $unitPrice);

                // insert into transaction
                $sql = "INSERT INTO `transaction` (slip_no, t_timbangan, stockpile_contract_id, transaction_date, loading_date, vehicle_no, labor_id, unloading_cost_id, "
                        . "unloading_date, freight_cost_id, handling_cost_id, permit_no, transaction_type, vendor_id, send_weight, bruto_weight, tarra_weight, "
                        . "netto_weight, notes, driver, freight_quantity, handling_quantity, quantity, shrink, freight_price, handling_price, unloading_price, unit_price, "
                        . "inventory_value, block, curah_tax_id, uc_tax_id, fc_tax_id, entry_by, entry_date, posting_status) "
                        . "VALUES ('{$slipNo}', '{$slipUpload}', {$stockpileContractId}, STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), STR_TO_DATE('{$loadingDate}', '%d/%m/%Y'), "
                        . "'{$vehicleNo}', {$laborId}, {$unloadingCostId}, STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), {$freightCostId}, {$handlingCostId}, '{$permitNo}', "
                        . "{$transactionType}, {$supplierId}, {$sendWeight}, {$brutoWeight}, {$tarraWeight}, {$nettoWeight}, '{$notes}', "
                        . "'{$driver}', {$freightQuantity}, {$handlingQuantity}, {$quantity}, {$shrink}, {$freightPrice}, {$handlingPrice}, {$unloadingPrice}, {$unitPrice}, {$inventoryValue}, '{$block}', "
                        . "{$curahTaxId}, {$ucTaxId}, {$fcTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$posting})";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $return_value = '|OK|Transaction has inserted successfully.|';
                    
                    $transactionId = $myDatabase->insert_id;
                    
                    // if curah update contract and stockpile_contract quantity
                    if($contractType == 'C') {
                        
                    }
						
						$sql = "UPDATE transaction_timbangan SET notim_status = 1 WHERE transaction_id = '{$slipUpload}'";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
					
						$sql = "CALL sp_shrink_weight({$transactionId})";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
						
						if($qty_rule !== 0){
						$sql = "INSERT INTO contract_netto (transaction_id, send_weight) VALUES ({$transactionId},{$sendWeightRule})";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
						}
                    
                   // insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                    
                    unset($_SESSION['transaction']);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.| '.$sql.'';
                }
            } else {
                $return_value = '|FAIL|The quantity exceed the balance of the contract.|';
            }
        } else {
            $return_value = '|FAIL|Please fill the required fields.|'.$sql.'';
        }
		
	}else{
		$return_value = '|FAIL|Tanggal transaksi sudah lebih dari 5 hari.|';
	}
        // </editor-fold>
    } elseif($transactionType == 2) {
        // <editor-fold defaultstate="collapsed" desc="OUT">
		if($allowInsert2){
        if($stockpileId != '' && $salesId != '' && $shipmentId != '' && $transactionDate2 != '' && $vehicleNo2 != '' && $sendWeight2 != '' && $blWeight != '') {
           
			$boolPosting = true;
		   // check stockpile detail & transaction balance
            $sql = "SELECT s.stockpile_code, s.stockpile_name, 
                        (
                            SELECT COALESCE(SUM(t.quantity), 0) FROM `transaction` t
                            INNER JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                            WHERE sc.stockpile_id = s.stockpile_id
                            AND t.transaction_type = 1
                        ) AS available_balance,
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction` 
                            WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                            AND transaction_type = 2
                        ) AS delivered_balance,
                        (
                            SELECT COUNT(posting_status) FROM `transaction` t
                            INNER JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                            WHERE sc.stockpile_id = s.stockpile_id
                            AND (posting_status = 0 OR posting_status = 1)
                            AND t.transaction_type = 1
                        ) AS posting
                    FROM stockpile s
                    WHERE s.stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $stockpileName = $rowStockpile->stockpile_name;
                $availableBalance = $rowStockpile->available_balance;
                $deliveredBalance = $rowStockpile->delivered_balance;
				$posting = $rowStockpile->posting;
				
				if($posting > 0){
					$boolPosting = false;
				}else{
					$boolPosting = true;
				}
            }
            
			if($boolPosting){
            // get sales detail
            $sql = "SELECT sl.quantity, sl.price_converted, sl.currency_id, sl.exchange_rate, sl.price, cust.pph_tax_id, sl.stockpileContractId
                    FROM sales sl 
                    INNER JOIN customer cust
                        ON cust.customer_id = sl.customer_id
                    WHERE sl.sales_id = {$salesId}";
            $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSales !== false && $resultSales->num_rows == 1) {
                $rowSales = $resultSales->fetch_object();
                $salesBalance = $rowSales->quantity;
                $salesUnitPrice = $rowSales->price_converted;
                $salesCurrencyId = $rowSales->currency_id;
                $salesExchangeRate = $rowSales->exchange_rate;
                $salesOriginalUnitPrice = $rowSales->price;
                $custTaxId = $rowSales->pph_tax_id;
				$stockpileContractIdShipment = $rowSales->stockpileContractId;
            }

            // get next slip no
			
					$checkSlipNo = $stockpileCode .'-'. $currentYear3;
				
            
//            $sql = "SELECT LPAD(COUNT(1) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ";
//            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSlip->num_rows == 0) {
                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }
            $rowSlipNo = $resultSlip->fetch_object();
            $nextSlipNo = $rowSlipNo->next_id;
            $slipNo = $checkSlipNo .'-'. $nextSlipNo;
            

//            if($sendWeight2 <= $availableBalance && $blWeight <= ($salesBalance - $deliveredBalance)) {
            if($sendWeight2 <= $availableBalance) {    
                $shrink = $sendWeight2 - $blWeight;
                
                // insert into transaction
                $sql = "INSERT INTO `transaction` (slip_no, shipment_id, transaction_date,unloading_date, vehicle_no, transaction_type, "
                        . "send_weight, notes, quantity, shrink, cust_tax_id, entry_by, entry_date,posting_status) "
                        . "VALUES ('{$slipNo}', {$shipmentId}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), '{$vehicleNo2}', "
                        . "{$transactionType}, {$sendWeight2}, '{$notes2}', {$blWeight}, {$shrink}, {$custTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),2)";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $transactionId = $myDatabase->insert_id;
                    
                    $return_value = '|OK|Transaction has inserted successfully.|';
                    
                    // insert into delivery
					echo 'AAAA'
					echo $stockpileContractIdShipment;
					if($stockpileContractIdShipment == 0 && $stockpileContractIdShipment == 'NULL' && $stockpileContractIdShipment == ''){
                    $sql = "SELECT t.* 
                            FROM transaction t 
                            WHERE t.stockpile_contract_id IN (
                                SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                            ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                              ORDER BY t.unloading_date ASC, t.slip_no ASC";
                    $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $totalInventoryValue = 0;
                    if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                        $balanceLeft = $sendWeight2;
                        while($rowDelivery = $resultDelivery->fetch_object()) {
                            $syncStatus = 0;
                            if($rowDelivery->sync_status == 1) {
                                $syncStatus = 2;
                            }
                            
                            if($balanceLeft > 0) {
                                if($rowDelivery->delivery_status == 0) {
                                    if($balanceLeft >= $rowDelivery->quantity) {
                                        $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                        $quantityTaken = $rowDelivery->quantity;
                                        $percentTaken = 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < $rowDelivery->quantity) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } elseif($rowDelivery->delivery_status == 2) {
                                    $totalTaken = 0;
                                    $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                    $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                        $rowTaken = $resultTaken->fetch_object();
                                        $totalTaken = $rowTaken->total_taken;
                                    }
                                    
                                    if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                        $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                        $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } 
                                
                                $deliveryValue = $quantityTaken * $salesUnitPrice;
                                $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                $percentTaken = $percentTaken * 100;

                                $sql = "INSERT INTO `delivery` (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                        . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                        . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                                $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus}, sync_status = {$syncStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    }
					
					}else{
						$sql = "SELECT t.* 
                            FROM transaction t 
                            WHERE t.stockpile_contract_id = {$stockpileContractIdShipment} AND t.transaction_type = 1 AND t.delivery_status <> 1
                              ORDER BY t.unloading_date ASC, t.slip_no ASC";
                    $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $totalInventoryValue = 0;
                    if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                        $balanceLeft = $sendWeight2;
                        while($rowDelivery = $resultDelivery->fetch_object()) {
                            $syncStatus = 0;
                            if($rowDelivery->sync_status == 1) {
                                $syncStatus = 2;
                            }
                            
                            if($balanceLeft > 0) {
                                if($rowDelivery->delivery_status == 0) {
                                    if($balanceLeft >= $rowDelivery->quantity) {
                                        $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                        $quantityTaken = $rowDelivery->quantity;
                                        $percentTaken = 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < $rowDelivery->quantity) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } elseif($rowDelivery->delivery_status == 2) {
                                    $totalTaken = 0;
                                    $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                    $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                        $rowTaken = $resultTaken->fetch_object();
                                        $totalTaken = $rowTaken->total_taken;
                                    }
                                    
                                    if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                        $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                        $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } 
                                
                                $deliveryValue = $quantityTaken * $salesUnitPrice;
                                $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                $percentTaken = $percentTaken * 100;

                                $sql = "INSERT INTO `delivery` (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                        . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                        . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                                $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus}, sync_status = {$syncStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    }
						
					}
                    
                    //$updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                    $updateInventoryValue = $totalInventoryValue;
                    
                    $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    
                    // update shipment
                    $cogsAmount = $updateInventoryValue;
                    if($salesCurrencyId != 1) {
                        $cogsAmount = $updateInventoryValue / $salesExchangeRate;
                    }
                    $invoiceAmount = $blWeight * $salesOriginalUnitPrice;
                    $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                            . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$blWeight}, shipment_status = 1 "
                            . "WHERE shipment_id = {$shipmentId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    
                    // update sales
                    $boolUpdateSales = false;
                    if($blWeight == ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 1;
                        $boolUpdateSales = true;
                    } elseif($blWeight < ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 2;
                        $boolUpdateSales = true;
                    }
                    
                    if($boolUpdateSales) {
                        $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
						
						$sql = "UPDATE sales SET used_status = 1 WHERE sales_id = {$salesId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }
                    
                     insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                     
                    unset($_SESSION['transaction']);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.|';
                }
            } else {
                if($sendWeight2 > $availableBalance) {
                    $return_value = '|FAIL|Available quantity in '. $stockpileName .' is '. number_format($availableBalance, 4, '.', ',') .' Kg.|';
                } elseif($sendWeight2 > ($salesBalance - $deliveredBalance)) {
                    $return_value = '|FAIL|Sales agreement balance is '. ($salesBalance - $deliveredBalance) .' Kg.|';
                }
            }
		
		 } else {
            $return_value = '|FAIL|Transaksi Notim IN belum diposting.|';
        }
		
        } else {
            $return_value = '|FAIL|Please fill the required fields.|';
        }
        
		}else{
		$return_value = '|FAIL|Tanggal transaksi sudah lebih dari 5 hari.|';
	}// </editor-fold>
    }
    
    echo $return_value;
    // </editor-fold>
}*/
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_adjustment_audit') {
    // <editor-fold defaultstate="collapsed" desc="delete_account">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $auditId = $myDatabase->real_escape_string($_POST['auditId']);
    // </editor-fold>
    
    if($auditId != '') {
        
        
            $sql = "DELETE FROM `adjustment_audit` WHERE audit_id = {$auditId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Account has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete account failed.|';
            }
        
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'adjustment_audit') {
    // <editor-fold defaultstate="collapsed" desc="user_data">
    
    $return_value = '';
    $boolNew = false;
    // </editor-fold>
    
    
    $auditId = $myDatabase->real_escape_string($_POST['auditId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
    $adjustmentDate = $myDatabase->real_escape_string($_POST['adjustmentDate']);
	$quantity = $myDatabase->real_escape_string($_POST['quantity']);
	$cogsPKS = $myDatabase->real_escape_string($_POST['cogsPKS']);
	$cogsOA = $myDatabase->real_escape_string($_POST['cogsOA']);
	$cogsOB = $myDatabase->real_escape_string($_POST['cogsOB']);
	$cogsHandling = $myDatabase->real_escape_string($_POST['cogsHandling']);
	$notes = $myDatabase->real_escape_string($_POST['notes']);
	$t_date = str_replace('/', '-', $adjustmentDate);
	$currentYear2 = date('y', strtotime($t_date));
    
    // </editor-fold>
    
    
    if ($auditId == '') {
        $boolNew = true;
    }
   
        if($stockpileId != '' && $shipmentId != '' && $adjustmentDate != '' && $quantity != '' && $cogsPKS != '' && $cogsOA != '' && $cogsOB != '' && $cogsHandling != '') {
           if($boolNew) {
                $sql = "INSERT INTO `adjustment_audit`(`shipment_id`,`stockpile_id`,quantity,cogs_pks,cogs_oa,cogs_ob,cogs_handling,adjustment_date,notes,entry_by,entry_date)
						VALUES
						('{$shipmentId}','{$stockpileId}','{$quantity}','{$cogsPKS}','{$cogsOA}','{$cogsOB}','{$cogsHandling}',STR_TO_DATE('{$adjustmentDate}', '%d/%m/%Y'),'{$notes}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `adjustment_audit` SET "
                            . "shipment_id = '{$shipmentId}', "
                            . "stockpile_id = '{$stockpileId}', "
                            . "quantity = '{$quantity}', "
							. "cogs_pks = '{$cogsPKS}', "
							. "cogs_oa = '{$cogsOA}', "
							. "cogs_ob = '{$cogsOB}', "
							. "cogs_handling = '{$cogsHandling}', "
							. "notes = '{$notes}', "
                            . "adjustment_date = STR_TO_DATE('{$adjustmentDate}', '%d/%m/%Y')"
                            . "WHERE audit_id = {$auditId}";
            }
           
                    
                
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                
                if($result !== false) {
                    
                    $return_value = '|OK|adjustment has successfully inserted/updated.||';
					
					if ($auditId == '') {
					$auditId = $myDatabase->insert_id;
					}
					
					$sql1 = "UPDATE adjustment_audit_qty SET audit_id = {$auditId} WHERE shipment_id = {$shipmentId} AND audit_id IS NULL";
					$result = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
					//echo $sql1;
					
				$sql = "SELECT a.*, SUBSTR(b.`shipment_no`,-2) AS susut FROM adjustment_audit a LEFT JOIN shipment b ON a.shipment_id = b.shipment_id WHERE a.shipment_id = {$shipmentId}";
				$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
					if ($result !== false && $result->num_rows == 1) {
						$row = $result->fetch_object();
						
						if($row->susut == '-S'){
							
						  $adjustmentId = $row->audit_id;
						   $quantity = $row->quantity * -1;
						   $cogs_pks = $row->cogs_pks;
						   $cogs_oa = $row->cogs_oa;
						   $cogs_ob = $row->cogs_ob;
						   $cogs_handling = $row->cogs_handling;
						   $adjustment_date = $row->adjustment_date;
						   $notes = $row->notes;
							
						}else{
							
						   $adjustmentId = $row->audit_id;
						   $quantity = $row->quantity;
						   $cogs_pks = $row->cogs_pks;
						   $cogs_oa = $row->cogs_oa;
						   $cogs_ob = $row->cogs_ob;
						   $cogs_handling = $row->cogs_handling;
						   $adjustment_date = $row->adjustment_date;
						   $notes = $row->notes;
							
						}
					   
					   
						
					} 
					
				if($boolNew) {	
				$sql = "SELECT * FROM stockpile WHERE stockpile_id = {$stockpileId}";
				$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
					if ($result !== false && $result->num_rows == 1) {
						$row = $result->fetch_object();
					   
					   $stockpileCode = $row->stockpile_code;
						
					} 

					
				//	insertGeneralLedger($myDatabase, 'CONTRACT ADJUSTMENT', "NULL", "NULL", $contractId);
				$checkSlipNo = $stockpileCode .'-'. $currentYear2;
				
//                $sql = "SELECT LPAD(COUNT(1) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ";
//                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				
				
				
				
				$sql = "INSERT INTO TRANSACTION (slip_no, transaction_date,unloading_date,send_weight,netto_weight,handling_quantity,freight_quantity,quantity,freight_price,handling_price,unloading_price,unit_price,posting_status,entry_by,entry_date,adjustmentAudit_id,notes) VALUES ('{$slipNo}', '{$adjustment_date}', '{$adjustment_date}', '{$quantity}', '{$quantity}', '{$quantity}', '{$quantity}', '{$quantity}', '{$cogs_oa}', '{$cogs_handling}', '{$cogs_ob}', '{$cogs_pks}',2,{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$adjustmentId},'{$notes}')";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
				if($result !== false) {
					if ($transactionId == '') {
					$transactionId = $myDatabase->insert_id;
					}
				}
				
				}else{
					
				$sql = "UPDATE `transaction` SET "
                            . "transaction_date = '{$adjustment_date}', "
                            . "unloading_date = '{$adjustment_date}', "
                            . "send_weight = '{$quantity}', "
							. "netto_weight = '{$quantity}', "
							. "handling_quantity = '{$quantity}', "
							. "freight_quantity = '{$quantity}', "
							. "quantity = '{$quantity}', "
							. "freight_price = '{$cogs_oa}', "
							. "handling_price = '{$cogs_handling}', "
							. "unloading_price = '{$cogs_ob}', "
							. "unit_price = '{$cogs_pks}', "
							. "notes = '{$notes}' "
							. "WHERE adjustmentAudit_id = {$adjustmentId}";
				$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
				$sql = "SELECT * FROM transaction WHERE adjustmentAudit_id = {$adjustmentId}";
				$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
					if ($result !== false && $result->num_rows == 1) {
						$row = $result->fetch_object();
					   
					   $transactionId = $row->transaction_id;
						
					} 
					
				}
				
				echo $transactionId;
				insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
					
					
                } else {
                    $return_value = '|FAIL|Insert/update adjustment failed.||';
					echo $sql;
                }
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'set_unit_cost') {
    // <editor-fold defaultstate="collapsed" desc="delete_vehicle">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
    $quantity = $myDatabase->real_escape_string($_POST['quantity']);
	
    // </editor-fold>

    if($shipmentId != '' && $quantity != '') {
			
		$sql = "DELETE FROM adjustment_audit_qty WHERE shipment_id = {$shipmentId}";
              $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
		
        $sql = "SELECT d.*,
            t.quantity AS quantity_notim,
            t.send_weight, t.netto_weight, con.price_converted AS contract_price,
            d.quantity * con.price_converted AS cogs_amount,
            t.freight_quantity, t.freight_price, 
			CASE WHEN t.delivery_status = 2 THEN (d.percent_taken / 100) * (t.quantity * t.freight_price)
			ELSE (d.percent_taken / 100) * (t.freight_quantity * t.freight_price) END AS freight_total,
			CASE WHEN t.delivery_status = 2 AND t.freight_cost_id IS NOT NULL THEN (d.quantity/t.freight_quantity) * COALESCE((SELECT amt_claim FROM transaction_shrink_weight WHERE transaction_id = d.transaction_id),0)
	    WHEN t.freight_cost_id IS NOT NULL THEN COALESCE((SELECT amt_claim FROM transaction_shrink_weight WHERE transaction_id = d.transaction_id),0) ELSE 0 END AS freight_shrink,
            t.unloading_price, (d.percent_taken / 100) * t.unloading_price AS unloading_total,
			vhc.price AS vh_price, t.handling_quantity,
			CASE WHEN t.delivery_status = 2 THEN (d.percent_taken / 100) * (t.handling_quantity * vhc.price)
			ELSE (d.percent_taken / 100) * (t.handling_quantity * vhc.price) END AS handling_total,
			vh1.pph_tax_id AS vh_pph_tax_id, vh1.pph AS vh_pph, vhtx.tax_category AS vh_pph_tax_category,
            f.ppn_tax_id AS fc_ppn_tax_id, f.ppn AS fc_ppn, fctxppn.tax_category AS fc_ppn_tax_category,
            t.fc_tax_id AS fc_pph_tax_id, fctxpph.tax_value AS fc_pph, fctxpph.tax_category AS fc_pph_tax_category,
            l.ppn_tax_id AS uc_ppn_tax_id, l.ppn AS uc_ppn, uctxppn.tax_category AS uc_ppn_tax_category,
            l.pph_tax_id AS uc_pph_tax_id, l.pph AS uc_pph, uctxpph.tax_category AS uc_pph_tax_category,
			ac.amt_claim
			
                     FROM delivery d
        LEFT JOIN `transaction` t
        	ON t.transaction_id = d.transaction_id
        LEFT JOIN stockpile_contract sc
            ON sc.stockpile_contract_id = t.stockpile_contract_id
		
        LEFT JOIN contract con
            ON con.contract_id = sc.contract_id
        LEFT JOIN vendor v1
            ON v1.vendor_id = con.vendor_id
        LEFT JOIN unloading_cost uc
            ON uc.unloading_cost_id = t.unloading_cost_id
        LEFT JOIN transaction_shrink_weight ac
			ON ac.transaction_id = d.transaction_id
        LEFT JOIN freight_cost fc
            ON fc.freight_cost_id = t.freight_cost_id
        LEFT JOIN freight f
            ON f.freight_id = fc.freight_id
        LEFT JOIN vendor v2
            ON v2.vendor_id = fc.vendor_id
        LEFT JOIN vendor v3
            ON v3.vendor_id = t.vendor_id
        LEFT JOIN shipment sh
            ON sh.shipment_id = d.shipment_id
        LEFT JOIN sales sl
            ON sl.sales_id = sh.sales_id
        LEFT JOIN stockpile s2
            ON s2.stockpile_id = sl.stockpile_id
        LEFT JOIN customer cust
            ON cust.customer_id = sl.customer_id
        LEFT JOIN tax fctxpph
	        ON fctxpph.tax_id = t.fc_tax_id
        LEFT JOIN tax fctxppn
	        ON fctxppn.tax_id = f.ppn_tax_id
	    LEFT JOIN labor l
            ON l.labor_id = t.labor_id
	    LEFT JOIN tax uctxpph
	        ON uctxpph.tax_id = l.pph_tax_id
        LEFT JOIN tax uctxppn
	        ON uctxppn.tax_id = l.ppn_tax_id	
		LEFT JOIN vendor_handling_cost vhc
			ON vhc.handling_cost_id = t.handling_cost_id
		LEFT JOIN vendor_handling vh1
			ON vh1.vendor_handling_id = vhc.vendor_handling_id
		LEFT JOIN tax vhtx
			ON vh1.pph_tax_id = vhtx.tax_id WHERE d.shipment_id = {$shipmentId} ORDER BY d.delivery_id DESC";
                    $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $totalInventoryValue = 0;
                    if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                        $balanceLeft = $quantity;
                        while($rowDelivery = $resultDelivery->fetch_object()) {
                            
                            
                            if($balanceLeft > 0) {
                                
                                    if($balanceLeft >= $rowDelivery->quantity) {
                                        $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                        $quantityTaken = $rowDelivery->quantity;
                                        $percentTaken = 1;
                                        //$deliveryStatus = 1;
                                    } elseif($balanceLeft < $rowDelivery->quantity) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        //$deliveryStatus = 2;
                                    }
									
									
					$percentTaken = $percentTaken * 100;
					
				if($quantityTaken < $rowDelivery->quantity_notim){
					$amountHandling = ($quantityTaken * $rowDelivery->vh_price);
					
				}else{
					$amountHandling = $quantityTaken * $rowDelivery->vh_price;
					
				}
				//$amountHandling = $quantityTaken * $rowDelivery->vh_price;
									
				if($rowDelivery->vh_pph_tax_category == 1 && $rowDelivery->vh_pph_tax_id != ''){
			         $pphvh2 = ($amountHandling / ((100 - $rowDelivery->vh_pph) / 100)) - $amountHandling;
				 
				 }elseif($rowDelivery->vh_pph_tax_category == 0 && $rowDelivery->vh_pph_tax_id != ''){
					  $pphvh2 =  0;  
					 //$pphfc =  $row->freight_total - ($row->freight_total * ((100 - $fc_pph) / 100));
				 }else{
				 	$pphvh2 = 0;
				 }
				 
				 $handlingTotal2 = $amountHandling - $pphvh2;	
				 
				 
				if($quantityTaken < $rowDelivery->quantity_notim){
					$amountFreight =  ($quantityTaken * $rowDelivery->freight_price);
					$amountShrink = ($quantityTaken/$rowDelivery->freight_quantity)*$rowDelivery->amt_claim;
				}else{
					$amountFreight = $rowDelivery->freight_quantity * $rowDelivery->freight_price;
					$amountShrink = $rowDelivery->amt_claim;
				}
				//$amountFreight = $quantityTaken * $rowDelivery->freight_price;
				//$amountShrink = ($quantityTaken/$rowDelivery->freight_quantity)*$rowDelivery->amt_claim;
               
					
		         if($rowDelivery->fc_pph_tax_category == 1 && $rowDelivery->fc_pph_tax_id != ''){
			         $pphfc2 = ($amountFreight/ ((100 - $rowDelivery->fc_pph) / 100)) - $amountFreight;
					 $pphfcShrink = ($amountShrink / ((100 - $rowDelivery->fc_pph) / 100)) - $amountShrink;
					 
				 
				 }elseif($rowDelivery->fc_pph_tax_category == 0 && $rowDelivery->fc_pph_tax_id != ''){
					  $pphfc2 =  0;  
					  $pphfcShrink = 0;
					 //$pphfc =  $row->freight_total - ($row->freight_total * ((100 - $fc_pph) / 100));
				 }else{
				 	$pphfc2 = 0;
					$pphfcShrink = 0;
				 }
				 /*
				 if($row->fc_ppn_tax_id != ''){
					 $ppnfc = ($row->freight_total * ((100 + $row->fc_ppn) / 100)) - $row->freight_total;
				 }else{
				     $ppnfc = 0;
			     }*/
				 
				 $freightTotal2 = ($amountFreight + $pphfc2) - ($amountShrink + $pphfcShrink);	
				 
				 
				 if($rowDelivery->uc_pph_tax_category == 1 &&$rowDelivery->uc_pph_tax_id != ''){
			         $pphuc2 = (($percentTaken/100)*$rowDelivery->unloading_price / ((100 - $rowDelivery->uc_pph) / 100)) - ($percentTaken/100)*$rowDelivery->unloading_price;
					 
				 }elseif($rowDelivery->uc_pph_tax_category == 0 && $rowDelivery->uc_pph_tax_id != ''){
					 $pphuc2 =  0;
					 //$pphuc =  $row->unloading_total - ($row->unloading_total * ((100 - $row->uc_pph) / 100));
				 }else{
				 	$pphuc2 = 0;
				 }
				 
				 
				 $unloadingTotal2 = (($percentTaken/100)* $rowDelivery->unloading_price) + $pphuc2;	
    
					$inventoryValue = $quantityTaken * $rowDelivery->contract_price;
					$totalAmount = $inventoryValue + $unloadingTotal2 + $handlingTotal2 + $freightTotal2 ;
	 
                                
                                //$deliveryValue = $quantityTaken * $salesUnitPrice;
                                //$inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                //$totalInventoryValue = $totalInventoryValue + $inventoryValue;
								//$totalAmount = 0;
                                

                                $sql = "INSERT INTO `adjustment_audit_qty` (shipment_id, transaction_id, percent_taken, qty, cogs_pks,cogs_oa,cogs_handling,cogs_ob,total_amount) VALUES ("
                                        . "{$shipmentId}, {$rowDelivery->transaction_id}, {$percentTaken}, "
                                        . "{$quantityTaken}, {$inventoryValue}, {$freightTotal2}, {$handlingTotal2}, {$unloadingTotal2}, {$totalAmount})";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                                
                            }
                        }
                    }



            if($result !== false) {
                $return_value = '|OK|Data has successfully created.|';
            } else {
                $return_value = '|FAIL|Rejected data failed.|';
            }

    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'return_notim_in_posting') {
    // <editor-fold defaultstate="collapsed" desc="delete_sales">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $transactionId2 = $myDatabase->real_escape_string($_POST['transactionId']);
	$returnInDate = $todayDate2;
	$t_date = str_replace('/', '-', $returnInDate);
	$currentYear2 = date('y', strtotime($t_date));
	 
    // </editor-fold>
    
						
    if($transactionId2 != '') {
		$sql = "UPDATE transaction SET posting_status = 3 WHERE transaction_id = {$transactionId2}";
						$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode FROM `transaction` t WHERE t.transaction_id = {$transactionId2}";
	$resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
            if($resultR !== false && $resultR->num_rows == 1) {
                $rowR = $resultR->fetch_object();
				//$R = "R";
				//$U = "-U";
                
				//$slipU = $rowR->slip_no .''. $U;
				$checkSlipNo = $rowR->stockpileCode .'-'. $currentYear2;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				$slipR = $rowR->slip_no .'-R';
				$slipU = $rowR->slip_no .'-U';
				$dateR = $date->format('Y-m-d');
				$sendW = $rowR->send_weight * -1;
				$brutoW = $rowR->bruto_weight * -1;
				$tarraW = $rowR->tarra_weight * -1;
				$nettoW = $rowR->netto_weight * -1;
				$handlingW = $rowR->handling_quantity * -1;
				$freightW = $rowR->freight_quantity * -1;
				$quantityW = $rowR->quantity * -1;
				$shrinkW = $rowR->shrink * -1;
				$unloadingP = $rowR->unloading_price * -1;
				
				if($rowR->shipment_id == ''){
					$shipment_id = 'NULL';	
				}else{
					$shipment_id = $rowR->shipment_id;	
				}
				if($rowR->labor_id == ''){
					$labor_id = 'NULL';
				}else{
					$labor_id = $rowR->labor_id;
				}
				if($rowR->unloading_cost_id == ''){
					$unloading_cost_id = 'NULL';
				}else{
					$unloading_cost_id = $rowR->unloading_cost_id;
				}
				if($rowR->handling_cost_id == ''){
					$handling_cost_id = 'NULL';
				}else{
					$handling_cost_id = $rowR->handling_cost_id;
				}
				if($rowR->freight_cost_id == ''){
					$freight_cost_id = 'NULL';
				}else{
					$freight_cost_id = $rowR->freight_cost_id;
				}
				if($rowR->permit_no == ''){
					$permit_no = 'NULL';
				}else{
					$permit_no = $rowR->permit_no;
				}
				if($rowR->vendor_id == ''){
					$vendor_id = 'NULL';
				}else{
					$vendor_id = $rowR->vendor_id;
				}
				if($rowR->cust_tax_id == ''){
					$cust_tax_id = 'NULL';
				}else{
					$cust_tax_id = $rowR->cust_tax_id;
				}
				if($rowR->curah_tax_id == ''){
					$curah_tax_id = 'NULL';
				}else{
					$curah_tax_id = $rowR->curah_tax_id;
				}
				if($rowR->uc_tax_id == ''){
					$uc_tax_id = 'NULL';
				}else{
					$uc_tax_id = $rowR->uc_tax_id;
				}
				if($rowR->fc_tax_id == ''){
					$fc_tax_id = 'NULL';
				}else{
					$fc_tax_id = $rowR->fc_tax_id;
				}
				if($rowR->block == ''){
					$block = 'NULL';
				}else{
					$block = $rowR->block;
				}
				//if($rowR->payment_id == ''){
					$payment_id = 'NULL';
				//}else{
					//$payment_id = $rowR->payment_id;
				//}
				//if($rowR->fc_payment_id == ''){
					$fc_payment_id = 'NULL';
				//}else{
					//$fc_payment_id = $rowR->fc_payment_id;
				//}
				//if($rowR->hc_payment_id == ''){
					$hc_payment_id = 'NULL';
				//}else{
					//$hc_payment_id = $rowR->hc_payment_id;
				//}
				//if($rowR->uc_payment_id == ''){
					$uc_payment_id = 'NULL';
				//}else{
					//$uc_payment_id = $rowR->uc_payment_id;
				//}
				if($rowR->notes == ''){
					$notes = 'NULL';
				}else{
					$notes = $rowR->notes;
				}
				$delivery_status = 0;
			}
				
	$sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,handling_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date,posting_status)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},{$rowR->stockpile_contract_id},{$shipment_id},STR_TO_DATE('{$returnInDate}', '%d/%m/%Y'),STR_TO_DATE('{$returnInDate}', '%d/%m/%Y'),'{$rowR->vehicle_no}',{$labor_id},{$unloading_cost_id},STR_TO_DATE('{$returnInDate}', '%d/%m/%Y'),{$handling_cost_id},{$freight_cost_id},'{$permit_no}',{$rowR->transaction_type},{$vendor_id},'{$sendW}','{$brutoW}','{$tarraW}','{$nettoW}','{$notes}','{$rowR->driver}','{$handlingW}','{$freightW}','{$quantityW}','{$shrinkW}','{$rowR->freight_price}','{$rowR->handling_price}','{$unloadingP}','{$rowR->unit_price}','{$rowR->inventory_value}',{$cust_tax_id},{$curah_tax_id},{$uc_tax_id},{$fc_tax_id},{$delivery_status},'{$block}',{$payment_id},{$fc_payment_id},{$hc_payment_id},{$uc_payment_id},{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),3)";
    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
       if($resultLog !== false) {     
    //echo $sqlLog;
	$transactionId = $myDatabase->insert_id;
	
	$sql = "UPDATE `transaction` SET notim_status = 1 WHERE transaction_id = {$transactionId2}";
	$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
	$sql = "CALL sp_shrink_weight_retur({$transactionId},{$transactionId2})";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
	//insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
	   
	   
				$return_value = '|OK|Nota Timbang has successfully Returned.|' . $transactionId2 .'|';
        } else {
            $return_value = '|FAIL|Returned Nota Timbang failed.|'.$sqlLog.'';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'return_notim_in') {
    // <editor-fold defaultstate="collapsed" desc="delete_sales">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $transactionId2 = $myDatabase->real_escape_string($_POST['transactionId']);
	$returnInDate = $myDatabase->real_escape_string($_POST['returnInDate']);
	$t_date = str_replace('/', '-', $returnInDate);
	$currentYear2 = date('y', strtotime($t_date));
	 
    // </editor-fold>
    
						
    if($transactionId2 != '') {
		$sql = "UPDATE transaction SET posting_status = 3 WHERE transaction_id = {$transactionId2}";
						$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode FROM `transaction` t WHERE t.transaction_id = {$transactionId2}";
	$resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
            if($resultR !== false && $resultR->num_rows == 1) {
                $rowR = $resultR->fetch_object();
				//$R = "R";
				//$U = "-U";
                
				//$slipU = $rowR->slip_no .''. $U;
				$checkSlipNo = $rowR->stockpileCode .'-'. $currentYear2;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				$slipR = $rowR->slip_no .'-R';
				$slipU = $rowR->slip_no .'-U';
				$dateR = $date->format('Y-m-d');
				$sendW = $rowR->send_weight * -1;
				$brutoW = $rowR->bruto_weight * -1;
				$tarraW = $rowR->tarra_weight * -1;
				$nettoW = $rowR->netto_weight * -1;
				$handlingW = $rowR->handling_quantity * -1;
				$freightW = $rowR->freight_quantity * -1;
				$quantityW = $rowR->quantity * -1;
				$shrinkW = $rowR->shrink * -1;
				$unloadingP = $rowR->unloading_price * -1;
				
				if($rowR->shipment_id == ''){
					$shipment_id = 'NULL';	
				}else{
					$shipment_id = $rowR->shipment_id;	
				}
				if($rowR->labor_id == ''){
					$labor_id = 'NULL';
				}else{
					$labor_id = $rowR->labor_id;
				}
				if($rowR->unloading_cost_id == ''){
					$unloading_cost_id = 'NULL';
				}else{
					$unloading_cost_id = $rowR->unloading_cost_id;
				}
				if($rowR->handling_cost_id == ''){
					$handling_cost_id = 'NULL';
				}else{
					$handling_cost_id = $rowR->handling_cost_id;
				}
				if($rowR->freight_cost_id == ''){
					$freight_cost_id = 'NULL';
				}else{
					$freight_cost_id = $rowR->freight_cost_id;
				}
				if($rowR->permit_no == ''){
					$permit_no = 'NULL';
				}else{
					$permit_no = $rowR->permit_no;
				}
				if($rowR->vendor_id == ''){
					$vendor_id = 'NULL';
				}else{
					$vendor_id = $rowR->vendor_id;
				}
				if($rowR->cust_tax_id == ''){
					$cust_tax_id = 'NULL';
				}else{
					$cust_tax_id = $rowR->cust_tax_id;
				}
				if($rowR->curah_tax_id == ''){
					$curah_tax_id = 'NULL';
				}else{
					$curah_tax_id = $rowR->curah_tax_id;
				}
				if($rowR->uc_tax_id == ''){
					$uc_tax_id = 'NULL';
				}else{
					$uc_tax_id = $rowR->uc_tax_id;
				}
				if($rowR->fc_tax_id == ''){
					$fc_tax_id = 'NULL';
				}else{
					$fc_tax_id = $rowR->fc_tax_id;
				}
				if($rowR->block == ''){
					$block = 'NULL';
				}else{
					$block = $rowR->block;
				}
				//if($rowR->payment_id == ''){
					$payment_id = 'NULL';
				//}else{
					//$payment_id = $rowR->payment_id;
				//}
				//if($rowR->fc_payment_id == ''){
					$fc_payment_id = 'NULL';
				//}else{
					//$fc_payment_id = $rowR->fc_payment_id;
				//}
				//if($rowR->hc_payment_id == ''){
					$hc_payment_id = 'NULL';
				//}else{
					//$hc_payment_id = $rowR->hc_payment_id;
				//}
				//if($rowR->uc_payment_id == ''){
					$uc_payment_id = 'NULL';
				//}else{
					//$uc_payment_id = $rowR->uc_payment_id;
				//}
				if($rowR->notes == ''){
					$notes = 'NULL';
				}else{
					$notes = $rowR->notes;
				}
				$delivery_status = 0;
			}
				
	$sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,handling_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date,posting_status)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},{$rowR->stockpile_contract_id},{$shipment_id},STR_TO_DATE('{$returnInDate}', '%d/%m/%Y'),STR_TO_DATE('{$returnInDate}', '%d/%m/%Y'),'{$rowR->vehicle_no}',{$labor_id},{$unloading_cost_id},STR_TO_DATE('{$returnInDate}', '%d/%m/%Y'),{$handling_cost_id},{$freight_cost_id},'{$permit_no}',{$rowR->transaction_type},{$vendor_id},'{$sendW}','{$brutoW}','{$tarraW}','{$nettoW}','{$notes}','{$rowR->driver}','{$handlingW}','{$freightW}','{$quantityW}','{$shrinkW}','{$rowR->freight_price}','{$rowR->handling_price}','{$unloadingP}','{$rowR->unit_price}','{$rowR->inventory_value}',{$cust_tax_id},{$curah_tax_id},{$uc_tax_id},{$fc_tax_id},{$delivery_status},'{$block}',{$payment_id},{$fc_payment_id},{$hc_payment_id},{$uc_payment_id},{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),3)";
    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
       if($resultLog !== false) {     
    //echo $sqlLog;
	$transactionId = $myDatabase->insert_id;
	
	$sql = "UPDATE `transaction` SET notim_status = 1 WHERE transaction_id = {$transactionId2}";
	$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
	$sql = "CALL sp_shrink_weight_retur({$transactionId},{$transactionId2})";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
	insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
	   insertReportGL($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
	   
				$return_value = '|OK|Nota Timbang has successfully Returned.|' . $transactionId2 .'|';
        } else {
            $return_value = '|FAIL|Returned Nota Timbang failed.|'.$sqlLog.'';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'fixedAsset_data') {
    // <editor-fold defaultstate="collapsed" desc="vehicle_data">
    
    $return_value = '';
    $boolNew = false;
	
	
	$fixedAssetId = $myDatabase->real_escape_string($_POST['fixedAssetId']);;
	$dateofAcquisition= $myDatabase->real_escape_string($_POST['dateofAcquisition']);;
	$nopol= $myDatabase->real_escape_string($_POST['nopol']);;
	$assetName =  $myDatabase->real_escape_string($_POST['assetName']);;
	$merk= $myDatabase->real_escape_string($_POST['merk']);;
	$type= $myDatabase->real_escape_string($_POST['type']);;
	$rangka= $myDatabase->real_escape_string($_POST['rangka']);;
	$mesin= $myDatabase->real_escape_string($_POST['mesin']);;
	$unit= $myDatabase->real_escape_string($_POST['unit']);;
	$acquisitionCost= $myDatabase->real_escape_string($_POST['acquisitionCost']);;
	$usageYear= $myDatabase->real_escape_string($_POST['usageYear']);;
	$usageMonth= $myDatabase->real_escape_string($_POST['usageMonth']);;
	$depresitionType= $myDatabase->real_escape_string($_POST['depresitionId']);;
	$stockpileId= $myDatabase->real_escape_string($_POST['stockpileId']);;
	$masterAssettypeId= $myDatabase->real_escape_string($_POST['masterAssettypeId']);;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    // </editor-fold>
    
    if ($fixedAssetId == '') {
        $boolNew = true;
    }
    
    if($dateofAcquisition != '' && $assetName != '' && $unit != '' && $acquisitionCost != '' && $usageYear != '' && $usageMonth != '' && $depresitionType != '') {
		$date = new DateTime();
		$currentmonth = $date->format('m');
		$currentyear = $date->format('Y');
        $checkAssetCode = 'AST/'.$currentmonth.'/'. $currentyear;   
        $sql = "SELECT assetcode FROM fixed_asset WHERE assetcode LIKE '%{$checkAssetCode}' ORDER BY fixed_asset_id DESC LIMIT 1";
        $resultFA = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($resultFA->num_rows == 1) {
            $rowFA = $resultFA->fetch_object();
            $splitFACode = explode('/', $rowFA->assetcode);
            $lastExplode = count($splitFACode) - 4;
            $nextFACode = ((float) $splitFACode[$lastExplode]) + 1;
			$FACode = str_pad($nextFACode, 4, '0', STR_PAD_LEFT);
            $Asset_Code =  $FACode.'/'.$checkAssetCode;
        } else {
            $Asset_Code = '0001/'.$checkAssetCode;
			}
        
            if($boolNew) {
                $sql = "INSERT INTO `fixed_asset`(`AssetCode`,`DateofAcquisition`,
						`NoPol`,`AssetName`,`Merk`,`Type`,`Rangka`,`Mesin`,`Unit`,`AcquisitionCost`,`UsageYear`,`UsageMonth`,`DepresitionType`,
						`entry_by`,`entry_date`,`stockpile_id`,`master_assettype_id`)
						VALUES
						('$Asset_Code',STR_TO_DATE('{$dateofAcquisition}', '%d/%m/%Y'),'$nopol','$assetName','$merk',
						'$type','$rangka','$mesin',$unit,$acquisitionCost,$usageYear,$usageMonth,'$depresitionType',
						{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),$stockpileId,$masterAssettypeId)";
            } else {
                $sql = "UPDATE `fixed_asset`
						SET
						`DateofAcquisition` = STR_TO_DATE('{$dateofAcquisition}', '%d/%m/%Y'),
						`NoPol` = '$nopol',
						`AssetName` = '$assetName',
						`Merk` = '$merk',
						`Type` = '$type',
						`Rangka` = '$rangka',
						`Mesin` = '$mesin',
						`Unit` = $unit,
						`AcquisitionCost` = $acquisitionCost,
						`UsageYear` = $usageYear,
						`UsageMonth` = $usageMonth,
						`DepresitionType` = '$depresitionType',
						`entry_by` = {$_SESSION['userId']},
						`entry_date` = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),
						`stockpile_id` = $stockpileId,
						`master_assettype_id` = $masterAssettypeId
						WHERE `fixed_asset_id` = $fixedAssetId;
						";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $itemId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Fixed Asset has successfully inserted/updated.|'. $itemId .'|';
            } else {
                $return_value = '|FAIL|Insert/update Fixed Asset failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    echo $sql;
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_contract_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_contract_data">
    
    $return_value = '';
    $boolInsertVendor = false;
    $boolVendorExists = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $contractType = $myDatabase->real_escape_string($_POST['contractType']);
    $contractNo = $myDatabase->real_escape_string($_POST['contractNo']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    $vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    // </editor-fold>
    
    if($vendorId == 'INSERT') {
        if($vendorCode != '' && $vendorName != '') {
            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$vendorCode}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($result !== false && $result->num_rows > 0) {
                $boolVendorExists = true;
            } elseif($result !== false && $result->num_rows == 0) {
                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, entry_by, entry_date) VALUES ("
                        . "UPPER('{$vendorCode}'), '{$vendorName}', '{$vendorAddress}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $vendorId = $myDatabase->insert_id;
                    $boolInsertVendor = true;
                } 
            }
        } else {
            $boolInsertVendor = false;
        }
    } else {
        $boolInsertVendor = true;
    }
    
    if($contractType != '' && $vendorId != '' && $currencyId != '' && $price != '' && 
            $boolInsertVendor && !$boolVendorExists) {
        
        if($quantity == '') {
            $quantity = 'NULL';
        }
        
        if($exchangeRate == '') {
            $exchangeRate = 1;
        }
        
        $priceConverted = $price * $exchangeRate;
        
        $sql = "SELECT * FROM vendor WHERE vendor_id = {$vendorId}";
        $resultVendor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($resultVendor !== false && $resultVendor->num_rows == 1) {
            $rowVendor = $resultVendor->fetch_object();
            $vendorCode = $rowVendor->vendor_code;
        }

        $checkPoNo = $contractType .'-'. $vendorCode .'-'. $currentYearMonth;
        $sql = "SELECT * FROM contract WHERE company_id = {$_SESSION['companyId']} AND po_no LIKE '{$checkPoNo}%'";
        $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $nextPoNo = $resultPo->num_rows + 1;
        $poNo = $checkPoNo .'-'. $nextPoNo;

        $sql = "INSERT INTO `contract` (contract_type, po_no, contract_no, vendor_id, currency_id, exchange_rate, price, price_converted, quantity, entry_by, entry_date) VALUES ("
                . "'{$contractType}', '{$poNo}', '{$contractNo}', {$vendorId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, {$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $contractId = $myDatabase->insert_id;
            
            $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                    . "{$stockpileId}, {$contractId}, {$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            
            if($result !== false) {
                $stockpileContractId = $myDatabase->insert_id;
                $return_value = '|OK|Contract has successfully inserted.|CONTRACT~'. $stockpileContractId .'|';
            } else {
                $sql = "DELETE FROM `contract` WHERE contract_id = {$contractId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                
                $return_value = '|FAIL|Insert contract failed.||';
            }
        } else {
            $return_value = '|FAIL|Insert contract failed.||';
        }
    } else {
        if($boolVendorExists) {
            $return_value = '|FAIL|Vendor already exists.||';
        } elseif(!$boolInsertVendor) {
            $return_value = '|FAIL|Insert vendor failed.||';
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_unloading_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_unloading_data">
    
    $return_value = '';
    $boolInsertVehicle = false;
    $boolVehicleExists = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $vehicleId = $myDatabase->real_escape_string($_POST['vehicleId']);
    $vehicleName = $myDatabase->real_escape_string($_POST['vehicleName']);
    // </editor-fold>
    
    if($vehicleId == 'INSERT') {
        if($vehicleName != '') {
            $sql = "SELECT * FROM `vehicle` WHERE UPPER(vehicle_name) = UPPER('{$vehicleName}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($result !== false && $result->num_rows > 0) {
                $boolVehicleExists = true;
            } elseif($result !== false && $result->num_rows == 0) {
                $sql = "INSERT INTO `vehicle` (vehicle_name, entry_by, entry_date) VALUES ("
                        . "'{$vehicleName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $vehicleId = $myDatabase->insert_id;
                    $boolInsertVehicle = true;
                } 
            }
        } else {
            $boolInsertVehicle = false;
        }
    } else {
        $boolInsertVehicle = true;
    }
    
    if($vehicleId != '' && $currencyId != '' && $price != '' && 
            $boolInsertVehicle && !$boolVehicleExists) {
        
        if($exchangeRate == '') {
            $exchangeRate = 1;
        }
        
        $priceConverted = $price * $exchangeRate;
        
        $sql = "INSERT INTO `unloading_cost` (vehicle_id, stockpile_id, currency_id, exchange_rate, price, price_converted, entry_by, entry_date) VALUES ("
                . "{$vehicleId}, {$stockpileId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $unloadingCostId = $myDatabase->insert_id;
            
            $return_value = '|OK|Vehicle has successfully inserted.|UNLOADING~'. $unloadingCostId .'|';
        } else {
            $return_value = '|FAIL|Insert vehicle failed.||';
        }
    } else {
        if($boolVehicleExists) {
            $return_value = '|FAIL|Vehicle already exists.||';
        } elseif(!$boolInsertVehicle) {
            $return_value = '|FAIL|Insert vehicle failed.||';
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_freight_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_freight_data">
    
    $return_value = '';
    $boolInsertFreight = false;
    $boolFreightExists = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $paymentNotes = $myDatabase->real_escape_string($_POST['paymentNotes']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    $freightCode = $myDatabase->real_escape_string($_POST['freightCode']);
    $freightSupplier = $myDatabase->real_escape_string($_POST['freightSupplier']);
    $freightAddress = $myDatabase->real_escape_string($_POST['freightAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>
    
//    $sql = "SELECT con.vendor_id FROM `contract` con 
//            WHERE con.contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = {$stockpileContractId})";
//    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//    if($result !== false && $result->num_rows == 1) {
//        $row = $result->fetch_object();
//        $vendorId = $row->vendor_id;
//    }
    
    if($freightId == 'INSERT') {
        if($freightCode != '' && $freightSupplier != '' && $vendorId != '' && $freightAddress != '' && $npwp != '' && 
                $ppn != '' && $pph != '') {
            $sql = "SELECT * FROM `freight` WHERE UPPER(freight_supplier) = UPPER('{$freightSupplier}') AND UPPER(freight_code) = UPPER('{$freightCode}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($result !== false && $result->num_rows > 0) {
                $boolFreightExists = true;
            } elseif($result !== false && $result->num_rows == 0) {
                $ppnValue = 0;
                $pphValue = 0;

                $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
                $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
                if($resultPPN !== false && $resultPPN->num_rows == 1) {
                    $rowPPN = $resultPPN->fetch_object();
                    $ppnValue = $rowPPN->tax_value;
                }

                $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
                $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                if($resultPPh !== false && $resultPPh->num_rows == 1) {
                    $rowPPh = $resultPPh->fetch_object();
                    $pphValue = $rowPPh->tax_value;
                }
                
                $sql = "INSERT INTO `freight` (freight_code, freight_supplier, freight_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                        . "UPPER('{$freightCode}'), '{$freightSupplier}', '{$freightAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $freightId = $myDatabase->insert_id;
                    $boolInsertFreight = true;
                } 
            }
        } else {
            $boolInsertFreight = false;
        }
    } else {
        $boolInsertFreight = true;
    }
    
    if($freightId != '' && $currencyId != '' && $price != '' && $vendorId != '' &&
            $boolInsertFreight && !$boolFreightExists) {
        
        if($exchangeRate == '') {
            $exchangeRate = 1;
        }
        
        $priceConverted = $price * $exchangeRate;
        
        $sql = "INSERT INTO `freight_cost` (freight_id, stockpile_id, vendor_id, currency_id, exchange_rate, price, price_converted, payment_notes, remarks, entry_by, entry_date) VALUES ("
                . "{$freightId}, {$stockpileId}, {$vendorId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, '{$paymentNotes}', '{$remarks}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $freightCostId = $myDatabase->insert_id;
            
            $return_value = '|OK|Freight Supplier has successfully inserted.|FREIGHT~'. $freightCostId .'|';
        } else {
            $return_value = '|FAIL|Insert freight supplier failed.||';
        }
    } else {
        if($boolFreightExists) {
            $return_value = '|FAIL|Freight supplier already exists.||';
        } elseif(!$boolInsertFreight) {
            $return_value = '|FAIL|Insert freight supplier failed.||';
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_vendor_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_vendor_data">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId0']);
    $vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    $vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>
    
    if($vendorId == 'INSERT') {
        if($vendorCode != '' && $vendorName != '' && $vendorAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$vendorCode}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($result !== false && $result->num_rows == 0) {
                $ppnValue = 0;
                $pphValue = 0;

                $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
                $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
                if($resultPPN !== false && $resultPPN->num_rows == 1) {
                    $rowPPN = $resultPPN->fetch_object();
                    $ppnValue = $rowPPN->tax_value;
                }

                $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
                $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                if($resultPPh !== false && $resultPPh->num_rows == 1) {
                    $rowPPh = $resultPPh->fetch_object();
                    $pphValue = $rowPPh->tax_value;
                }

                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                        . "UPPER('{$vendorCode}'), '{$vendorName}', '{$vendorAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $vendorId = $myDatabase->insert_id;

                    $return_value = '|OK|Vendor has successfully inserted.|VENDOR~'. $vendorId .'|';
                } else {
                    $return_value = '|FAIL|Insert vendor failed.||';
                }
            } else {
                $return_value = '|FAIL|Vendor already exists.||';
            }
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    } elseif($vendorId != '') {
        $return_value = '|OK|Vendor has successfully inserted.|VENDOR~'. $vendorId .'|';
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_sales_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_sales_data">
    
    $return_value = '';
//    $boolInsertCustomer = false;
//    $boolCustomerExists = false;
    $boolExists = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    $customerName = $myDatabase->real_escape_string($_POST['customerName']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    $loading = $myDatabase->real_escape_string($_POST['portLoading']);
    $destination = $myDatabase->real_escape_string($_POST['destination']);
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $salesNo = $myDatabase->real_escape_string($_POST['salesNo']);
    $totalShipment = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalShipment']));
    // </editor-fold>
    
    $sql = "SELECT * FROM `sales` WHERE company_id = {$_SESSION['companyId']} AND sales_no = '{$salesNo}'";
    $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    if($resultSales->num_rows > 0) {
        $boolExists = true;
    }
    
    if($customerId != '' && $currencyId != '' && $price != '' && $salesNo != '' && $quantity != '' && $totalShipment != '' &&
            !$boolExists) {
        
        if($exchangeRate == '') {
            $exchangeRate = 1;
        }
        
        $priceConverted = $price * $exchangeRate;
        
        // get next slip no
//        $checkShipmentNo = $shipmentCode .'-'. $currentYear;
//        $sql = "SELECT LPAD(COUNT(1) + 1, 3, '0') AS next_id FROM shipment WHERE shipment_no LIKE '{$checkShipmentNo}%'";
//        $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//        $rowShipmentNo = $resultShipment->fetch_object();
//        $nextShipmentNo = $rowShipmentNo->next_id;
//        $shipmentNo = $checkShipmentNo .'-'. $nextShipmentNo;
            
        $sql = "INSERT INTO `sales` (sales_no, sales_date, sales_type, customer_id, stockpile_id, destination, notes, "
                . "currency_id, exchange_rate, price, price_converted, quantity, total_shipment, entry_by, entry_date) VALUES ("
                . "'{$salesNo}', STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), 2, {$customerId}, {$loading}, '{$destination}', "
                . "'{$notes}', {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, {$quantity}, {$totalShipment}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $salesId = $myDatabase->insert_id;
            
            for($i = 1; $i <= $totalShipment; $i++) {
                $shipmentCode = $salesNo .'-'. $i;

                $sql = "INSERT INTO `shipment` (shipment_code, sales_id, entry_by, entry_date) VALUES ("
                        . "'{$shipmentCode}', {$salesId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }
            
            $return_value = '|OK|Sales Agreement has successfully inserted.|SALES~'. $salesId .'|';
        } else {
            $return_value = '|FAIL|Insert sales failed.||';
        }
    } else {
        if($boolExists) {
            $return_value = '|FAIL|Sales No. already exists.||';
//        } elseif(!$boolInsertCustomer) {
//            $return_value = '|FAIL|Insert customer failed.||';
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_customer_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_customer_data">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $customerName = $myDatabase->real_escape_string($_POST['customerName']);
    $customerAddress = $myDatabase->real_escape_string($_POST['customerAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>
    
    if($customerName != '' && $customerAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
        $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$customerName}')";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;
            
            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }
            
            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }
            
            $sql = "INSERT INTO `customer` (customer_name, customer_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                    . "'{$customerName}', '{$customerAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $customerId = $myDatabase->insert_id;
                
                $return_value = '|OK|Buyer has successfully inserted.|CUSTOMER~'. $customerId .'|';
            } else {
                $return_value = '|FAIL|Insert buyer failed.||';
            }
        } else {
            $return_value = '|FAIL|Buyer already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_labor_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_labor_data">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $laborName = $myDatabase->real_escape_string($_POST['laborName']);
    $laborAddress = $myDatabase->real_escape_string($_POST['laborAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>
    
    if($laborName != '' && $laborAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
        $sql = "SELECT * FROM `labor` WHERE UPPER(labor_name) = UPPER('{$laborName}')";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;

            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }

            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }
            
            $sql = "INSERT INTO `labor` (labor_name, labor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                    . "'{$laborName}', '{$laborAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $laborId = $myDatabase->insert_id;
                
                $return_value = '|OK|Labor Workers has successfully inserted.|LABOR~'. $laborId .'|';
            } else {
                $return_value = '|FAIL|Insert labor workers failed.||';
            }
        } else {
            $return_value = '|FAIL|Labor Workers already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_supplier_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_supplier_data">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    $vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>
    
    if($vendorCode != '' && $vendorName != '' && $vendorAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
        $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$vendorCode}')";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;

            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }

            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }
            
            $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                        . "UPPER('{$vendorCode}'), '{$vendorName}', '{$vendorAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $vendorId = $myDatabase->insert_id;

                $return_value = '|OK|Supplier has successfully inserted.|SUPPLIER~'. $vendorId .'|';
            } else {
                $return_value = '|FAIL|Insert vendor failed.||';
            }
        } else {
            $return_value = '|FAIL|Supplier already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_transaction_data') {
    // <editor-fold defaultstate="collapsed" desc="update_transaction_data">
    
    $return_value = '';
    $boolQuantity = true;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $transactionId = $myDatabase->real_escape_string($_POST['transactionId']);
	$transactionId2 = $transactionId;
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
    $transactionDate = $myDatabase->real_escape_string($_POST['transactionDate']);
    $loadingDate = $myDatabase->real_escape_string($_POST['loadingDate']);
    $transactionDate2 = $myDatabase->real_escape_string($_POST['transactionDate2']);
    $vehicleNo = $myDatabase->real_escape_string($_POST['vehicleNo']);
    $vehicleNo2 = $myDatabase->real_escape_string($_POST['vehicleNo2']);
    $unloadingCostId = $myDatabase->real_escape_string($_POST['unloadingCostId']);
    $unloadingDate = $myDatabase->real_escape_string($_POST['unloadingDate']);
    $freightCostId = $myDatabase->real_escape_string($_POST['freightCostId']);
	$handlingCostId = $myDatabase->real_escape_string($_POST['handlingCostId']);
    $permitNo = $myDatabase->real_escape_string($_POST['permitNo']);
    $transactionType = $myDatabase->real_escape_string($_POST['transactionType']);
    $sendWeightRule = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight']));
	$sendWeightPKS = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeightPKS']));
    $sendWeight2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight2']));
    $blWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['blWeight']));
    $brutoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['brutoWeight']));
    $tarraWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['tarraWeight']));
    $nettoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['nettoWeight']));
    $notes = $myDatabase->real_escape_string($_POST['notes']);
	$notes2 = $myDatabase->real_escape_string($_POST['notes2']);
    $driver = $myDatabase->real_escape_string($_POST['driver']);
    $block = $myDatabase->real_escape_string($_POST['block']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $supplierId = $myDatabase->real_escape_string($_POST['supplierId']);
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $isTaxable = $myDatabase->real_escape_string($_POST['isTaxable']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $stockpileCode = '';
    $unitPrice = 0;
    $balanceQuantity = 0;
    $contractId = 0;
    $custTaxId = 'NULL';
    $curahTaxId = 'NULL';
    $ucTaxId = 0;
    $fcTaxId = 0;
	$t_date = str_replace('/', '-', $unloadingDate);
	$t_date2 = str_replace('/', '-', $transactionDate2);
	$currentYear2 = date('y', strtotime($t_date));
	$currentYear3 = date('y', strtotime($t_date2));
	$slipUpload = $myDatabase->real_escape_string($_POST['idSuratTugas']);
    // </editor-fold>
	
	$allowInsert = false;
	$allowInsert2 = false;
	$date = new DateTime();
	$todayDate = $date->format('Y-m-d');
	$date1 = new DateTime($todayDate);
	
	$dateTrans = str_replace("/", "-", $myDatabase->real_escape_string($_POST['unloadingDate']));
	$dt = date('Y-m-d',strtotime($dateTrans));
	$date2 = new DateTime($dt);
	$a = $date1->format('Y-m-d');
	$b = $date2->format('Y-m-d');
	$diff =date_diff(date_create($a),date_create($b));
    $interval = $diff->days;
	
	$dateTrans2 = str_replace("/", "-", $myDatabase->real_escape_string($_POST['transactionDate2']));
	$dt2 = date('Y-m-d',strtotime($dateTrans2));
	$date22 = new DateTime($dt2);
	$a2 = $date1->format('Y-m-d');
	$b2 = $date22->format('Y-m-d');
	$diff2 =date_diff(date_create($a2),date_create($b2));
    $interval2 = $diff2->days;
	
	if($interval < 5){
		$allowInsert = true;
	}
	
	if($interval2 < 5){
		$allowInsert2 = true;
	}
    
    //insert to log table
	/*if($transactionId == 257942){
	$sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode FROM `transaction` t WHERE t.transaction_id = {$transactionId}";
	$resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
            if($resultR !== false && $resultR->num_rows == 1) {
                $rowR = $resultR->fetch_object();
				//$R = "R";
				//$U = "-U";
                
				//$slipU = $rowR->slip_no .''. $U;
				$checkSlipNo = $rowR->stockpileCode .'-'. $currentYear;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				$slipR = $rowR->slip_no .'-R';
				$slipU = $rowR->slip_no .'-U';
				$dateR = $date->format('Y-m-d');
				$sendW = $rowR->send_weight * -1;
				$brutoW = $rowR->bruto_weight * -1;
				$tarraW = $rowR->tarra_weight * -1;
				$nettoW = $rowR->netto_weight * -1;
				$handlingW = $rowR->handling_quantity * -1;
				$freightW = $rowR->freight_quantity * -1;
				$quantityW = $rowR->quantity * -1;
				$shrinkW = $rowR->shrink * -1;
				$unloadingP = $rowR->unloading_price * -1;
				
				if($rowR->shipment_id == ''){
					$shipment_id = 'NULL';	
				}else{
					$shipment_id = $rowR->shipment_id;	
				}
				if($rowR->labor_id == ''){
					$labor_id = 'NULL';
				}else{
					$labor_id = $rowR->labor_id;
				}
				if($rowR->unloading_cost_id == ''){
					$unloading_cost_id = 'NULL';
				}else{
					$unloading_cost_id = $rowR->unloading_cost_id;
				}
				if($rowR->handling_cost_id == ''){
					$handling_cost_id = 'NULL';
				}else{
					$handling_cost_id = $rowR->handling_cost_id;
				}
				if($rowR->freight_cost_id == ''){
					$freight_cost_id = 'NULL';
				}else{
					$freight_cost_id = $rowR->freight_cost_id;
				}
				if($rowR->permit_no == ''){
					$permit_no = 'NULL';
				}else{
					$permit_no = $rowR->permit_no;
				}
				if($rowR->vendor_id == ''){
					$vendor_id = 'NULL';
				}else{
					$vendor_id = $rowR->vendor_id;
				}
				if($rowR->cust_tax_id == ''){
					$cust_tax_id = 'NULL';
				}else{
					$cust_tax_id = $rowR->cust_tax_id;
				}
				if($rowR->curah_tax_id == ''){
					$curah_tax_id = 'NULL';
				}else{
					$curah_tax_id = $rowR->curah_tax_id;
				}
				if($rowR->uc_tax_id == ''){
					$uc_tax_id = 'NULL';
				}else{
					$uc_tax_id = $rowR->uc_tax_id;
				}
				if($rowR->fc_tax_id == ''){
					$fc_tax_id = 'NULL';
				}else{
					$fc_tax_id = $rowR->fc_tax_id;
				}
				if($rowR->block == ''){
					$block = 'NULL';
				}else{
					$block = $rowR->block;
				}
				//if($rowR->payment_id == ''){
					$payment_id = 'NULL';
				//}else{
					//$payment_id = $rowR->payment_id;
				//}
				//if($rowR->fc_payment_id == ''){
					$fc_payment_id = 'NULL';
				//}else{
					//$fc_payment_id = $rowR->fc_payment_id;
				//}
				//if($rowR->hc_payment_id == ''){
					$hc_payment_id = 'NULL';
				//}else{
					//$hc_payment_id = $rowR->hc_payment_id;
				//}
				//if($rowR->uc_payment_id == ''){
					$uc_payment_id = 'NULL';
				//}else{
					//$uc_payment_id = $rowR->uc_payment_id;
				//}
				if($rowR->notes == ''){
					$notes = 'NULL';
				}else{
					$notes = $rowR->notes;
				}
				$delivery_status = 0;
			}
				
	$sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},{$rowR->stockpile_contract_id},{$shipment_id},'{$dateR}','{$dateR}','{$rowR->vehicle_no}',{$labor_id},{$unloading_cost_id},'{$dateR}',{$handling_cost_id},{$freight_cost_id},'{$permit_no}',{$rowR->transaction_type},{$vendor_id},'{$sendW}','{$brutoW}','{$tarraW}','{$nettoW}','{$notes}','{$rowR->driver}','{$handlingW}','{$freightW}','{$quantityW}','{$shrinkW}','{$rowR->freight_price}','{$unloadingP}','{$rowR->unit_price}','{$rowR->inventory_value}',{$cust_tax_id},{$curah_tax_id},{$uc_tax_id},{$fc_tax_id},{$delivery_status},'{$block}',{$payment_id},{$fc_payment_id},{$hc_payment_id},{$uc_payment_id},{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
       if($resultLog !== false) {     
    //echo $sqlLog;
	$transactionId = $myDatabase->insert_id;
	
	insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
	   }
	   
	}*/
    
    if($isTaxable == '') {
        $isTaxable = 0;
    }
    
    if($ppn == '') {
        $ppn = 0;
    }
    
    if($pph == '') {
        $pph = 0;
    }
    
    if($transactionType == 1) {
		//echo 'test2';
		//$transactionId2 = 0;
        // <editor-fold defaultstate="collapsed" desc="IN">
        if($stockpileId != '' && $stockpileContractId != '' && $loadingDate != '' && $vehicleNo != '' && $unloadingCostId != '' &&
                $unloadingDate != '' && $freightCostId != '' && $handlingCostId != '' && $permitNo != '' && $transactionType != '' && $sendWeightRule != '' &&
                $brutoWeight != '' && $tarraWeight != '' && $driver != '' && $vendorId != '' && $laborId != '') {

            if($supplierId == '') {
                $supplierId = "NULL";
            }
			
			if($slipUpload == '') {
			$slipUpload = 0;
			}
			
			if($sendWeightPKS != ''){
				if($sendWeightPKS == $sendWeightRule ){
					$posting = 0;
				}else{
					$posting = 1;
				}
			}else{
				$posting = 0;
			}
           
            // check balance contract & get unit price
           $sql = "SELECT s.stockpile_code, con.price_converted, sc.contract_id, con.contract_type, con.qty_rule,
                        ((SELECT COALESCE(SUM(quantity), 0) FROM stockpile_contract WHERE contract_id = sc.contract_id
                        ) - con.adjustment) - (
                            SELECT CASE WHEN c.contract_type = 'C' THEN COALESCE(SUM(t.quantity), 0)
                ELSE COALESCE(SUM(t.send_weight), 0) END 
                FROM TRANSACTION t LEFT JOIN stockpile_contract sc ON t.stockpile_contract_id = sc.`stockpile_contract_id`
                LEFT JOIN contract c ON c.contract_id = sc.contract_id
                WHERE sc.contract_id =  con.contract_id
                        ) AS balance, s.freight_weight_rule, s.curah_weight_rule, v.pph_tax_id
                    FROM stockpile_contract sc
                    INNER JOIN stockpile s
                        ON s.stockpile_id = sc.stockpile_id
                    INNER JOIN contract con
                        ON con.contract_id = sc.contract_id
                    INNER JOIN vendor v
                        ON v.vendor_id = con.vendor_id
                    WHERE stockpile_contract_id = {$stockpileContractId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $contractId = $rowStockpile->contract_id;
                $unitPrice = $rowStockpile->price_converted;
                $contractType = $rowStockpile->contract_type;
                $freightWeightRule = $rowStockpile->freight_weight_rule;
                $curahWeightRule = $rowStockpile->curah_weight_rule;
                if($contractType == 'P') {
                    $balanceQuantity = $rowStockpile->balance;
                } elseif($contractType == 'C') {
                    $balanceQuantity = $rowStockpile->balance;
                    if($rowStockpile->pph_tax_id != 0 && $rowStockpile->pph_tax_id != '') {
                        $curahTaxId = $rowStockpile->pph_tax_id;
                    }
                }
				$qty_rule = $rowStockpile->qty_rule;
				if($qty_rule == 0){
					$sendWeight = $sendWeightRule;
				}else if($qty_rule == 1){
					$sendWeight = $nettoWeight;
				}else{
					if($sendWeightRule < $nettoWeight){
						$sendWeight = $sendWeightRule;
					} elseif($nettoWeight < $sendWeightRule) {
						$sendWeight = $nettoWeight;
					}else{
						$sendWeight = $sendWeightRule;
					}
				
				}
            }

            // get netto weight
            //$nettoWeight = $brutoWeight - $tarraWeight;
            
			// get freight weight
			$sqlfc = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                    $resultFreight = $myDatabase->query($sqlfc, MYSQLI_STORE_RESULT);
                    if($resultFreight !== false && $resultFreight->num_rows == 1) {
                        $rowFreight = $resultFreight->fetch_object();
                        $freightRule = $rowFreight->freight_rule;
					
                       
                    }
					
            // get freight weight
           if($freightWeightRule == 0 && $freightRule == 1) {
				$freightQuantity = $sendWeight;
            }elseif($freightWeightRule == 0 && $freightRule == 0) {
                if($nettoWeight < $sendWeight) {
                    $freightQuantity = $nettoWeight;
                } elseif($nettoWeight > $sendWeight) {
                    $freightQuantity = $sendWeight;
                } else {
                    $freightQuantity = $sendWeight;
                }
            } elseif($freightWeightRule == 1) {
                $freightQuantity = $sendWeight;
            } elseif($freightWeightRule == 2) {
                $freightQuantity = $nettoWeight;
            } else {
                $freightQuantity = $sendWeight;
            }

            // get shrink condition
//            $quantity = $nettoWeight;
//            $sql = "SELECT * FROM `condition` WHERE category_id = 1 AND contract_id = {$contractId}";
//            $resultCondition = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//            if($resultCondition !== false && $resultCondition->num_rows == 1) {
//                $rowCondition = $resultCondition->fetch_object();
//                $quantity = ${$rowCondition->rule};
//            }
			if($sendWeight > $balanceQuantity && $balanceQuantity > 0){
				$balanceQuantity = $sendWeight;
					
			}

            if($sendWeight <= $balanceQuantity || $balanceQuantity == 0) {
                // get shrink
                $shrink = 0;
                if($contractType == 'P') {
                    if($nettoWeight < $sendWeight) {
                        $quantity = $nettoWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } elseif($nettoWeight > $sendWeight) {
                        $quantity = $sendWeight;
                        $shrink = 0;
                    } else {
                        $quantity = $sendWeight;
                    }
                } elseif($contractType == 'C') {
                    if($curahWeightRule == 0) {
                        if($nettoWeight < $sendWeight) {
                            $quantity = $nettoWeight;
                            $shrink = $sendWeight - $nettoWeight;
                        } elseif($nettoWeight > $sendWeight) {
                            $quantity = $sendWeight;
                            $shrink = $sendWeight - $nettoWeight;
                        } else {
                            $quantity = $sendWeight;
                        }
                    } elseif($curahWeightRule == 1) {
                        $quantity = $sendWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } elseif($curahWeightRule == 2) {
                        $quantity = $nettoWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } else {
                        $quantity = $sendWeight;
                    }
                }
				/*if($transactionId2 == 257942){
                $checkSlipNo = $rowR->stockpileCode .'-'. $currentYear;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				}*/
                // get freight cost
                if ($active_from == $todayDate) {
                    if ($freightCostId == 'NONE') {
                        $freightCostId = 'NULL';
                        $freightPrice = 0;
                        $freightQuantity2111 = 0;
                    } else {
                        $sql = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                        $resultFreight = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($resultFreight !== false && $resultFreight->num_rows == 1) {
                            $rowFreight = $resultFreight->fetch_object();
                            $freightPrice = $rowFreight->price_converted;
                            if ($rowFreight->freight_rule == 1) {
                                $freightQuantity2111 = $sendWeight;
                            } else {
                                $freightQuantity2111 = $freightQuantity;
                            }
                            if ($rowFreight->pph_tax_id != 0 && $rowFreight->pph_tax_id != '') {
                                $fcTaxId = $rowFreight->pph_tax_id;
                            } else {
                                $fcTaxId = 0;
                            }
                        }
                    }
                } else {
                       if ($freightCostId == 'NONE') {
                        $freightCostId = 'NULL';
                        $freightPrice = 0;
                        $freightQuantity2111 = 0;
                    } else {
                        $sql = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                        $resultFreight = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($resultFreight !== false && $resultFreight->num_rows == 1) {
                            $rowFreight = $resultFreight->fetch_object();
                            $freightPrice = $rowFreight->price_converted;
                            if ($rowFreight->freight_rule == 1) {
                                $freightQuantity2111 = $sendWeight;
                            } else {
                                $freightQuantity2111 = $freightQuantity;
                            }
                            if ($rowFreight->pph_tax_id != 0 && $rowFreight->pph_tax_id != '') {
                                $fcTaxId = $rowFreight->pph_tax_id;
                            } else {
                                $fcTaxId = 0;
                            }
                        }
                    }
                }
				
				// get handling cost
				 if($handlingCostId == 'NONE') {
                    $handlingCostId = 'NULL';
					$handlingQuantity = 0;
					$handlingPrice = 0;
                } else {
                    $sql = "SELECT vhc.vendor_handling_id, vhc.price_converted, vh.pph_tax_id, vh.vendor_handling_rule
                            FROM `vendor_handling_cost` vhc 
                            INNER JOIN vendor_handling vh
                                ON vh.vendor_handling_id = vhc.vendor_handling_id
                            WHERE vhc.handling_cost_id = {$handlingCostId}";
                    $resultHandling = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultHandling !== false && $resultHandling->num_rows == 1) {
                        $rowHandling = $resultHandling->fetch_object();
                        $handlingPrice = $rowHandling->price_converted;
					if($rowHandling->vendor_handling_rule == 1){
							$handlingQuantity = $sendWeight;
						}else{
							$handlingQuantity = $nettoWeight;
						}
                        
                    }
                }
				
                // get unloading cost
                if($unloadingCostId == 'NONE') {
                    $unloadingCostId = 'NULL';
                    $unloadingPrice = 0;
                } else {
                    $sql = "SELECT uc.price_converted 
                            FROM `unloading_cost` uc 
                            WHERE uc.unloading_cost_id = {$unloadingCostId}";
                    $resultUnloading = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultUnloading !== false && $resultUnloading->num_rows == 1) {
                        $rowUnloading = $resultUnloading->fetch_object();
                        $unloadingPrice = $rowUnloading->price_converted;
                    }
                }
                
                if($laborId == 'NONE') {
                    $laborId = 'NULL';
                } else {
                    $sql = "SELECT l.pph_tax_id
                            FROM `labor` l
                            WHERE l.labor_id = {$laborId}";
                    $resultLabor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultLabor !== false && $resultLabor->num_rows == 1) {
                        $rowLabor = $resultLabor->fetch_object();
                        if($rowLabor->pph_tax_id != 0 && $rowLabor->pph_tax_id != '') {
                            $ucTaxId = $rowLabor->pph_tax_id;
                        } else{
							 $ucTaxId = 0;
						}
                    }
                }
                
                $syncStatus = 0;
                $sql = "SELECT sync_status FROM `transaction` WHERE transaction_id = {$transactionId}";
                $resultTrans = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultTrans !== false && $resultTrans->num_rows == 1) {
                    $rowTrans = $resultTrans->fetch_object();
                    if($rowTrans->sync_status == 1) {
                        $syncStatus = 2;
                    } 
                }
                
                // get inventory value
               $inventoryValue = ($freightQuantity * $freightPrice) + $unloadingPrice + ($quantity * $unitPrice) + ($handlingQuantity * $handlingPrice); 
                
				/*if($transactionId2 == 257942){
                // insert into transaction
				$sql = "INSERT INTO `transaction` (slip_no, slip_retur, stockpile_contract_id, transaction_date, loading_date, vehicle_no, labor_id, unloading_cost_id, "
                        . "unloading_date, freight_cost_id, handling_cost_id, permit_no, transaction_type, vendor_id, send_weight, bruto_weight, tarra_weight, "
                        . "netto_weight, notes, driver, freight_quantity, handling_quantity, quantity, shrink, freight_price, unloading_price, unit_price, "
                        . "inventory_value, block, curah_tax_id, uc_tax_id, fc_tax_id, entry_by, entry_date, modify_by, modify_date) "
                        . "VALUES ('{$slipNo}', '{$slipU}',{$stockpileContractId}, '{$dateR}', '{$dateR}', "
                        . "'{$vehicleNo}', {$laborId}, {$unloadingCostId}, '{$dateR}', {$freightCostId}, {$handlingCostId}, '{$permitNo}', "
                        . "{$transactionType}, {$supplierId}, {$sendWeight}, {$brutoWeight}, {$tarraWeight}, {$nettoWeight}, '{$notes}', "
                        . "'{$driver}', {$freightQuantity}, {$handlingQuantity}, {$quantity}, {$shrink}, {$freightPrice}, {$unloadingPrice}, {$unitPrice}, {$inventoryValue}, '{$block}', "
                        . "{$curahTaxId}, {$ucTaxId}, {$fcTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				}else{*/
                $sql = "UPDATE `transaction` SET "
                        . "stockpile_contract_id = {$stockpileContractId}, "
                        . "loading_date = STR_TO_DATE('{$loadingDate}', '%d/%m/%Y'), "
                        . "vehicle_no = '{$vehicleNo}', "
                        . "labor_id = {$laborId}, "
                        . "unloading_cost_id = {$unloadingCostId}, "
						. "transaction_date = STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), "
                        . "unloading_date = STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), "
                        . "freight_cost_id = {$freightCostId}, "
						. "handling_cost_id = {$handlingCostId}, "
                        . "permit_no = '{$permitNo}', "
                        . "vendor_id = {$supplierId}, "
                        . "send_weight = {$sendWeight}, "
                        . "bruto_weight = {$brutoWeight}, "
                        . "tarra_weight = {$tarraWeight}, "
                        . "netto_weight = {$nettoWeight}, "
                        . "notes = '{$notes}', "
                        . "driver = '{$driver}', "
                        . "freight_quantity = {$freightQuantity}, "
						. "handling_quantity = {$handlingQuantity}, "
                        . "quantity = {$quantity}, "
                        . "shrink = {$shrink}, "
						//. "susut_qty = {$qtySusut}, "
						//. "susut_price = {$hargaSusut}, "
                        . "freight_price = {$freightPrice}, "
						. "handling_price = {$handlingPrice}, "
                        . "unloading_price = {$unloadingPrice}, "
                        . "unit_price = {$unitPrice}, "
                        . "inventory_value = {$inventoryValue}, "
						. "fc_tax_id = {$fcTaxId}, "
						. "uc_tax_id = {$ucTaxId}, "
                        . "block = '{$block}', "
						. "posting_status = '{$posting}', "
                        . "sync_status = {$syncStatus}, "
                        . "modify_by = {$_SESSION['userId']}, "
                        . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE transaction_id = {$transactionId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				//}
                if($result !== false) {
                    $return_value = '|OK|Transaction has updated successfully.|';
                    
                    // if curah update contract and stockpile_contract quantity
                    if($contractType == 'C') {
                       /* $sql = "UPDATE contract SET quantity = {$quantity} WHERE contract_id = {$contractId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        
                        $sql = "UPDATE stockpile_contract SET quantity = {$quantity} WHERE stockpile_contract_id = {$stockpileContractId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/
                    }
					
					$sql = "CALL sp_shrink_weight({$transactionId})";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
						
					if($qty_rule !== 0){
						$sql = "UPDATE contract_netto SET send_weight = {$sendWeightRule} WHERE transaction_id ={$transactionId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
						}
                    
                    //insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.'. $sql .'|';
                }
            } else {
                $return_value = '|FAIL|The quantity exceed the balance of the contract.|';
            }
        } else {
            $return_value = '|FAIL|Please fill the required fields.|';
        }
        // </editor-fold>
        
    } elseif($transactionType == 2) {
        // <editor-fold defaultstate="collapsed" desc="OUT">
        if($stockpileId != '' && $salesId != '' && $shipmentId != '' && $transactionDate2 != '' && $vehicleNo2 != '' && $sendWeight2 != '' && $blWeight != '') {
			
			$sql = "UPDATE `transaction` SET "
                        . "vehicle_no = '{$vehicleNo2}', "
                        . "transaction_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                        . "unloading_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                        . "notes = '{$notes2}', "
                        . "modify_by = {$_SESSION['userId']}, "
                        . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE transaction_id = {$transactionId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				if($result !== false) {
                    
					$return_value = '|OK|Transaction has updated successfully.|';
                    
					//insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.'. $sql .'|';
                }
            // check stockpile detail & transaction balance
			/*$sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode FROM `transaction` t WHERE t.transaction_id = {$transactionId}";
	$resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
            if($resultR !== false && $resultR->num_rows == 1) {
                $rowR = $resultR->fetch_object();
				//$R = "R";
				//$U = "-U";
                //$sql = "UPDATE `transaction` SET shipment_id = NULL WHERE transaction_id = {$transactionId}";
                //$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				//$slipU = $rowR->slip_no .''. $U;
				$checkSlipNo = $rowR->stockpileCode .'-'. $currentYear2;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				$slipR = $rowR->slip_no .'-R';
				$slipU = $rowR->slip_no .'-U';
				$dateR = $date->format('Y-m-d');
				$sendW = $rowR->send_weight * -1;
				$quantityW = $rowR->quantity * -1;
				$shrinkW = $rowR->shrink * -1;
				//$unloadingP = $rowR->unloading_price * -1;
				if($rowR->notes == '')
				$notes = 'NULL';
			}
				
	$sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},NULL,{$shipmentId},'{$rowR->transaction_date}',NULL,'{$rowR->vehicle_no}',NULL,NULL,'{$rowR->transaction_date}',NULL,NULL,NULL,{$rowR->transaction_type},NULL,'{$sendW}',0,0,0,'{$notes}',NULL,0,0,'{$quantityW}','{$shrinkW}',0,0,0,0,0,NULL,NULL,NULL,0,NULL,NULL,NULL,NULL,NULL,{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
       if($resultLog !== false) {     
    //echo $sqlLog;
	$transactionId = $myDatabase->insert_id;
	
	insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
	
	// delete from delivery and update delivery_status in transaction
                    $sql = "SELECT d.*, t.sync_status 
                            FROM delivery d
                            INNER JOIN `transaction` t
                                ON t.transaction_id = d.transaction_id
                            WHERE d.shipment_id = {$shipmentId}";
                    $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultShipment !== false && $resultShipment->num_rows > 0) {
                        while($rowShipment = $resultShipment->fetch_object()) {
                            $syncStatus = 0;
                            if($rowShipment->sync_status == 1) {
                                $syncStatus = 2;
                            }
                            
                            if($rowShipment->percent_taken == 100) {
                                $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } else {
                                $sqlOther = "SELECT * FROM delivery WHERE shipment_id <> {$shipmentId} AND transaction_id = {$rowShipment->transaction_id}";
                                $resultOther = $myDatabase->query($sqlOther, MYSQLI_STORE_RESULT);
                                
                                if($resultOther->num_rows > 0) {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 2, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                } else {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                }
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            }
                        }
                        
                        $sqlDelete = "DELETE FROM delivery WHERE shipment_id = {$shipmentId}";
                        $resultDelete = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);
						
                    }
					//$sql = "UPDATE `transaction` SET shipment_id = NULL WHERE transaction_id = {$transactionId}";
						//$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
	   }*/
					
	  // echo $sqlLog;
	  //insert new delivery
			/*$sql = "SELECT s.stockpile_code, s.stockpile_name, 
                        (
                            SELECT COALESCE(SUM(t.quantity), 0) FROM `transaction` t
                            INNER JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                            WHERE sc.stockpile_id = s.stockpile_id
                            AND t.transaction_type = 1
                        ) AS available_balance,
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction` 
                            WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                            AND transaction_type = 2
                        ) AS delivered_balance
                    FROM stockpile s
                    WHERE s.stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $stockpileName = $rowStockpile->stockpile_name;
                $availableBalance = $rowStockpile->available_balance;
                $deliveredBalance = $rowStockpile->delivered_balance;
            }
            
            // get sales detail
            $sql = "SELECT sl.quantity, sl.price_converted, sl.currency_id, sl.exchange_rate, sl.price, cust.pph_tax_id
                    FROM sales sl 
                    INNER JOIN customer cust
                        ON cust.customer_id = sl.customer_id
                    WHERE sl.sales_id = {$salesId}";
            $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSales !== false && $resultSales->num_rows == 1) {
                $rowSales = $resultSales->fetch_object();
                $salesBalance = $rowSales->quantity;
                $salesUnitPrice = $rowSales->price_converted;
                $salesCurrencyId = $rowSales->currency_id;
                $salesExchangeRate = $rowSales->exchange_rate;
                $salesOriginalUnitPrice = $rowSales->price;
                $custTaxId = $rowSales->pph_tax_id;
            }

            // get next slip no
			
					$checkSlipNo = $stockpileCode .'-'. $currentYear3;
				
            //$checkSlipNo = $stockpileCode /*.'-'. $currentYear*///;
//            $sql = "SELECT LPAD(COUNT(1) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ";
//            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            /*$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSlip->num_rows == 0) {
                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }
            $rowSlipNo = $resultSlip->fetch_object();
            $nextSlipNo = $rowSlipNo->next_id;
            $slipNo = $checkSlipNo .'-'. $nextSlipNo;
            

//            if($sendWeight2 <= $availableBalance && $blWeight <= ($salesBalance - $deliveredBalance)) {
            if($sendWeight2 <= $availableBalance) {    
                $shrink = $sendWeight2 - $blWeight;
                
                // insert into transaction
                $sql = "INSERT INTO `transaction` (slip_no, slip_retur, shipment_id, transaction_date,unloading_date, vehicle_no, transaction_type, "
                        . "send_weight, notes, quantity, shrink, cust_tax_id, entry_by, entry_date) "
                        . "VALUES ('{$slipNo}', '{$slipU}', {$shipmentId}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), '{$vehicleNo2}', "
                        . "{$transactionType}, {$sendWeight2}, '{$notes2}', {$blWeight}, {$shrink}, {$custTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $transactionId = $myDatabase->insert_id;
                    
                    $return_value = '|OK|Transaction has inserted successfully.|';
                    
                    // insert into delivery
                    $sql = "SELECT t.* 
                            FROM transaction t 
                            WHERE t.stockpile_contract_id IN (
                                SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                            ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                              ORDER BY t.unloading_date ASC, t.slip_no ASC";
                    $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $totalInventoryValue = 0;
                    if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                        $balanceLeft = $sendWeight2;
                        while($rowDelivery = $resultDelivery->fetch_object()) {
                            $syncStatus = 0;
                            if($rowDelivery->sync_status == 1) {
                                $syncStatus = 2;
                            }
                            
                            if($balanceLeft > 0) {
                                if($rowDelivery->delivery_status == 0) {
                                    if($balanceLeft >= $rowDelivery->quantity) {
                                        $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                        $quantityTaken = $rowDelivery->quantity;
                                        $percentTaken = 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < $rowDelivery->quantity) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } elseif($rowDelivery->delivery_status == 2) {
                                    $totalTaken = 0;
                                    $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                    $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                        $rowTaken = $resultTaken->fetch_object();
                                        $totalTaken = $rowTaken->total_taken;
                                    }
                                    
                                    if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                        $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                        $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } 
                                
                                $deliveryValue = $quantityTaken * $salesUnitPrice;
                                $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                $percentTaken = $percentTaken * 100;

                                $sql = "INSERT INTO `delivery` (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                        . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                        . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                                $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus}, sync_status = {$syncStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    }
                    
                    //$updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                    $updateInventoryValue = $totalInventoryValue;
                    
                    $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    
                    // update shipment
                    $cogsAmount = $updateInventoryValue;
                    if($salesCurrencyId != 1) {
                        $cogsAmount = $updateInventoryValue / $salesExchangeRate;
                    }
                    $invoiceAmount = $blWeight * $salesOriginalUnitPrice;
                    $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                            . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$blWeight}, shipment_status = 1 "
                            . "WHERE shipment_id = {$shipmentId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    
                    // update sales
                    $boolUpdateSales = false;
                    if($blWeight == ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 1;
                        $boolUpdateSales = true;
                    } elseif($blWeight < ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 2;
                        $boolUpdateSales = true;
                    }
                    
                    if($boolUpdateSales) {
                        $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }
                    
                     insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                     
                    unset($_SESSION['transaction']);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.|';
                }
            } else {
                if($sendWeight2 > $availableBalance) {
                    $return_value = '|FAIL|Available quantity in '. $stockpileName .' is '. number_format($availableBalance, 4, '.', ',') .' Kg.|';
                } elseif($sendWeight2 > ($salesBalance - $deliveredBalance)) {
                    $return_value = '|FAIL|Sales agreement balance is '. ($salesBalance - $deliveredBalance) .' Kg.|';
                }
            }*/
          /*  $sql = "SELECT s.stockpile_code, s.stockpile_name, 
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction` 
                            WHERE stockpile_id = s.stockpile_id
                            AND transaction_type = 1
                        ) AS available_balance,
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction` 
                            WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                            AND transaction_type = 2
                        ) AS delivered_balance
                    FROM stockpile s
                    WHERE s.stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $stockpileName = $rowStockpile->stockpile_name;
                $availableBalance = $rowStockpile->available_balance;
                $deliveredBalance = $rowStockpile->delivered_balance;
            }
            
            // get sales detail
            $sql = "SELECT quantity, price_converted, currency_id, exchange_rate, price FROM sales WHERE sales_id = {$salesId}";
            $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSales !== false && $resultSales->num_rows == 1) {
                $rowSales = $resultSales->fetch_object();
                $salesBalance = $rowSales->quantity;
                $salesUnitPrice = $rowSales->price_converted;
                $salesCurrencyId = $rowSales->currency_id;
                $salesExchangeRate = $rowSales->exchange_rate;
                $salesOriginalUnitPrice = $rowSales->price;
            }

            if($sendWeight2 != 0 && $blWeight != 0) {
                
                $shrink = $sendWeight2 - $blWeight;
                
                $syncStatus = 0;
                $sql = "SELECT sync_status FROM `transaction` WHERE transaction_id = {$transactionId}";
                $resultTrans = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultTrans !== false && $resultTrans->num_rows == 1) {
                    $rowTrans = $resultTrans->fetch_object();
                    if($rowTrans->sync_status == 1) {
                        $syncStatus = 2;
                    } 
                }
                
                // insert into transaction
                $sql = "UPDATE `transaction` SET "
                        . "shipment_id = {$shipmentId}, "
                        . "vehicle_no = '{$vehicleNo2}', "
                        . "send_weight = {$sendWeight2}, "
						. "notes = '{$notes2}', "
                        . "quantity = {$blWeight}, "
                        . "shrink = {$shrink}, "
                        . "sync_status = {$syncStatus}, "
                        . "modify_by = {$_SESSION['userId']}, "
                        . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE transaction_id = {$transactionId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $transactionId = $myDatabase->insert_id;
                    
                    $return_value = '|OK|Transaction has updated successfully.|';
                    
                    // delete from delivery and update delivery_status in transaction
                    $sql = "SELECT d.*, t.sync_status 
                            FROM delivery d
                            INNER JOIN `transaction` t
                                ON t.transaction_id = d.transaction_id
                            WHERE d.shipment_id = {$shipmentId}";
                    $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultShipment !== false && $resultShipment->num_rows > 0) {
                        while($rowShipment = $resultShipment->fetch_object()) {
                            $syncStatus = 0;
                            if($rowShipment->sync_status == 1) {
                                $syncStatus = 2;
                            }
                            
                            if($rowShipment->percent_taken == 100) {
                                $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } else {
                                $sqlOther = "SELECT * FROM delivery WHERE shipment_id <> {$shipmentId} AND transaction_id = {$rowShipment->transaction_id}";
                                $resultOther = $myDatabase->query($sqlOther, MYSQLI_STORE_RESULT);
                                
                                if($resultOther->num_rows > 0) {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 2, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                } else {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                }
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            }
                        }
                        
                        $sqlDelete = "DELETE FROM delivery WHERE shipment_id = {$shipmentId}";
                        $resultDelete = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);
                    }
                    
                    
                    // insert into delivery
						$sql = "SELECT t.* 
                            FROM transaction t 
                            WHERE t.stockpile_contract_id IN (
                                SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                            ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                            ORDER BY  t.unloading_date ASC, t.slip_no ASC";
                    $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $totalInventoryValue = 0;
                    if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                        $balanceLeft = $sendWeight2;
                        while($rowDelivery = $resultDelivery->fetch_object()) {
                            $syncStatus = 0;
                            if($rowDelivery->sync_status == 1) {
                                $syncStatus = 2;
                            }
                            
                            if($balanceLeft > 0) {
                                if($rowDelivery->delivery_status == 0) {
                                    if($balanceLeft >= $rowDelivery->quantity) {
                                        $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                        $quantityTaken = $rowDelivery->quantity;
                                        $percentTaken = 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < $rowDelivery->quantity) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } elseif($rowDelivery->delivery_status == 2) {
                                    $totalTaken = 0;
                                    $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                    $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                        $rowTaken = $resultTaken->fetch_object();
                                        $totalTaken = $rowTaken->total_taken;
                                    }
                                    
                                    if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                        $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                        $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                }  
                                
                                $deliveryValue = $quantityTaken * $salesUnitPrice;
                                $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                $percentTaken = $percentTaken * 100;

                                $sql = "INSERT INTO delivery (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                        . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                        . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                                $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus}, sync_status = {$syncStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    }
                    
                    $updateInventoryValue = $totalInventoryValue;
//                    $updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                    
                    $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    
                    // update shipment
                    $cogsAmount = $updateInventoryValue;
                    if($salesCurrencyId != 1) {
                        $cogsAmount = $updateInventoryValue / $salesExchangeRate;
                    }
                    $invoiceAmount = $blWeight * $salesOriginalUnitPrice;
                    $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                            . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$blWeight}, shipment_status = 1 "
                            . "WHERE shipment_id = {$shipmentId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    
                    // update sales
                    $boolUpdateSales = false;
                    if($sendWeight2 == ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 1;
                        $boolUpdateSales = true;
                    } elseif($sendWeight2 < ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 2;
                        $boolUpdateSales = true;
                    }
                    
                    if($boolUpdateSales) {
                        $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }
					
					insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                     
                    unset($_SESSION['transaction']);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.|';
					echo $sql;
                }
            } else {
                if($sendWeight2 > $availableBalance) {
                    $return_value = '|FAIL|Available quantity in '. $stockpileName .' is '. number_format($availableBalance, 4, '.', ',') .' Kg.|';
                } elseif($sendWeight2 > ($salesBalance - $deliveredBalance)) {
                    $return_value = '|FAIL|Sales agreement balance is '. ($salesBalance - $deliveredBalance) .' Kg.|';
                }
            }*/
        } else {
            $return_value = '|FAIL|Please fill the required fields.|';
        }
        // </editor-fold>
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_transaction_data_new') {
    // <editor-fold defaultstate="collapsed" desc="update_transaction_data">
    
    $return_value = '';
    $boolQuantity = true;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $transactionId = $myDatabase->real_escape_string($_POST['transactionId']);
	$transactionId2 = $transactionId;
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
    $transactionDate = $myDatabase->real_escape_string($_POST['transactionDate']);
    $loadingDate = $myDatabase->real_escape_string($_POST['loadingDate']);
    $transactionDate2 = $myDatabase->real_escape_string($_POST['transactionDate2']);
    $vehicleNo = $myDatabase->real_escape_string($_POST['vehicleNo']);
    $vehicleNo2 = $myDatabase->real_escape_string($_POST['vehicleNo2']);
    $unloadingCostId = $myDatabase->real_escape_string($_POST['unloadingCostId']);
    $unloadingDate = $myDatabase->real_escape_string($_POST['unloadingDate']);
    $freightCostId = $myDatabase->real_escape_string($_POST['freightCostId']);
	$handlingCostId = $myDatabase->real_escape_string($_POST['handlingCostId']);
    $permitNo2 = $myDatabase->real_escape_string($_POST['permitNo2']);
    $transactionType = $myDatabase->real_escape_string($_POST['transactionType']);
    $sendWeightRule = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight']));
	$sendWeightPKS = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeightPKS']));
    $sendWeight2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight2']));
    $blWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['blWeight']));
    $brutoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['brutoWeight']));
    $tarraWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['tarraWeight']));
    $nettoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['nettoWeight']));
    $notes = $myDatabase->real_escape_string($_POST['notes']);
	$notes2 = $myDatabase->real_escape_string($_POST['notes2']);
    $driver = $myDatabase->real_escape_string($_POST['driver']);
    $block = $myDatabase->real_escape_string($_POST['block']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $supplierId = $myDatabase->real_escape_string($_POST['supplierId']);
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $isTaxable = $myDatabase->real_escape_string($_POST['isTaxable']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $stockpileCode = '';
    $unitPrice = 0;
    $balanceQuantity = 0;
    $contractId = 0;
    $custTaxId = 'NULL';
    $curahTaxId = 'NULL';
    $ucTaxId = 0;
    $fcTaxId = 0;
	$t_date = str_replace('/', '-', $unloadingDate);
	$t_date2 = str_replace('/', '-', $transactionDate2);
	$currentYear2 = date('y', strtotime($t_date));
	$currentYear3 = date('y', strtotime($t_date2));
	$slipUpload = $myDatabase->real_escape_string($_POST['idSuratTugas']);
    // </editor-fold>
	
	
	$allowInsert = false;
	$allowInsert2 = false;
	$date = new DateTime();
	$todayDate = $date->format('Y-m-d');
	$date1 = new DateTime($todayDate);
	
	$dateTrans = str_replace("/", "-", $myDatabase->real_escape_string($_POST['unloadingDate']));
	$dt = date('Y-m-d',strtotime($dateTrans));
	$date2 = new DateTime($dt);
	$a = $date1->format('Y-m-d');
	$b = $date2->format('Y-m-d');
	$diff =date_diff(date_create($a),date_create($b));
    $interval = $diff->days;
	
	$dateTrans2 = str_replace("/", "-", $myDatabase->real_escape_string($_POST['transactionDate2']));
	$dt2 = date('Y-m-d',strtotime($dateTrans2));
	$date22 = new DateTime($dt2);
	$a2 = $date1->format('Y-m-d');
	$b2 = $date22->format('Y-m-d');
	$diff2 =date_diff(date_create($a2),date_create($b2));
    $interval2 = $diff2->days;
	
	if($interval < 5){
		$allowInsert = true;
	}
	
	if($interval2 < 5){
		$allowInsert2 = true;
	}
    // </editor-fold>
    
    //insert to log table
	/*if($transactionId == 257942){
	$sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode FROM `transaction` t WHERE t.transaction_id = {$transactionId}";
	$resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
            if($resultR !== false && $resultR->num_rows == 1) {
                $rowR = $resultR->fetch_object();
				//$R = "R";
				//$U = "-U";
                
				//$slipU = $rowR->slip_no .''. $U;
				$checkSlipNo = $rowR->stockpileCode .'-'. $currentYear;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				$slipR = $rowR->slip_no .'-R';
				$slipU = $rowR->slip_no .'-U';
				$dateR = $date->format('Y-m-d');
				$sendW = $rowR->send_weight * -1;
				$brutoW = $rowR->bruto_weight * -1;
				$tarraW = $rowR->tarra_weight * -1;
				$nettoW = $rowR->netto_weight * -1;
				$handlingW = $rowR->handling_quantity * -1;
				$freightW = $rowR->freight_quantity * -1;
				$quantityW = $rowR->quantity * -1;
				$shrinkW = $rowR->shrink * -1;
				$unloadingP = $rowR->unloading_price * -1;
				
				if($rowR->shipment_id == ''){
					$shipment_id = 'NULL';	
				}else{
					$shipment_id = $rowR->shipment_id;	
				}
				if($rowR->labor_id == ''){
					$labor_id = 'NULL';
				}else{
					$labor_id = $rowR->labor_id;
				}
				if($rowR->unloading_cost_id == ''){
					$unloading_cost_id = 'NULL';
				}else{
					$unloading_cost_id = $rowR->unloading_cost_id;
				}
				if($rowR->handling_cost_id == ''){
					$handling_cost_id = 'NULL';
				}else{
					$handling_cost_id = $rowR->handling_cost_id;
				}
				if($rowR->freight_cost_id == ''){
					$freight_cost_id = 'NULL';
				}else{
					$freight_cost_id = $rowR->freight_cost_id;
				}
				if($rowR->permit_no == ''){
					$permit_no = 'NULL';
				}else{
					$permit_no = $rowR->permit_no;
				}
				if($rowR->vendor_id == ''){
					$vendor_id = 'NULL';
				}else{
					$vendor_id = $rowR->vendor_id;
				}
				if($rowR->cust_tax_id == ''){
					$cust_tax_id = 'NULL';
				}else{
					$cust_tax_id = $rowR->cust_tax_id;
				}
				if($rowR->curah_tax_id == ''){
					$curah_tax_id = 'NULL';
				}else{
					$curah_tax_id = $rowR->curah_tax_id;
				}
				if($rowR->uc_tax_id == ''){
					$uc_tax_id = 'NULL';
				}else{
					$uc_tax_id = $rowR->uc_tax_id;
				}
				if($rowR->fc_tax_id == ''){
					$fc_tax_id = 'NULL';
				}else{
					$fc_tax_id = $rowR->fc_tax_id;
				}
				if($rowR->block == ''){
					$block = 'NULL';
				}else{
					$block = $rowR->block;
				}
				//if($rowR->payment_id == ''){
					$payment_id = 'NULL';
				//}else{
					//$payment_id = $rowR->payment_id;
				//}
				//if($rowR->fc_payment_id == ''){
					$fc_payment_id = 'NULL';
				//}else{
					//$fc_payment_id = $rowR->fc_payment_id;
				//}
				//if($rowR->hc_payment_id == ''){
					$hc_payment_id = 'NULL';
				//}else{
					//$hc_payment_id = $rowR->hc_payment_id;
				//}
				//if($rowR->uc_payment_id == ''){
					$uc_payment_id = 'NULL';
				//}else{
					//$uc_payment_id = $rowR->uc_payment_id;
				//}
				if($rowR->notes == ''){
					$notes = 'NULL';
				}else{
					$notes = $rowR->notes;
				}
				$delivery_status = 0;
			}
				
	$sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},{$rowR->stockpile_contract_id},{$shipment_id},'{$dateR}','{$dateR}','{$rowR->vehicle_no}',{$labor_id},{$unloading_cost_id},'{$dateR}',{$handling_cost_id},{$freight_cost_id},'{$permit_no}',{$rowR->transaction_type},{$vendor_id},'{$sendW}','{$brutoW}','{$tarraW}','{$nettoW}','{$notes}','{$rowR->driver}','{$handlingW}','{$freightW}','{$quantityW}','{$shrinkW}','{$rowR->freight_price}','{$unloadingP}','{$rowR->unit_price}','{$rowR->inventory_value}',{$cust_tax_id},{$curah_tax_id},{$uc_tax_id},{$fc_tax_id},{$delivery_status},'{$block}',{$payment_id},{$fc_payment_id},{$hc_payment_id},{$uc_payment_id},{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
       if($resultLog !== false) {     
    //echo $sqlLog;
	$transactionId = $myDatabase->insert_id;
	
	insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
	   }
	   
	}*/
    
    if($isTaxable == '') {
        $isTaxable = 0;
    }
    
    if($ppn == '') {
        $ppn = 0;
    }
    
    if($pph == '') {
        $pph = 0;
    }
	
    
    if($transactionType == 1) {
		if($allowInsert){
        // <editor-fold defaultstate="collapsed" desc="IN">
        if($stockpileId != '' && $stockpileContractId != '' && $loadingDate != '' && $vehicleNo != '' && $unloadingCostId != '' &&
                $unloadingDate != '' && $freightCostId != '' && $handlingCostId != '' && $transactionType != '' && $sendWeightRule != '' &&
                $brutoWeight != '' && $tarraWeight != '' && $driver != '' && $vendorId != '' && $laborId != '') {

            if($supplierId == '') {
                $supplierId = "NULL";
            }
            if($slipUpload == '') {
			$slipUpload = 0;
			}
			
			if($sendWeightPKS != ''){
				if($sendWeightPKS == $sendWeightRule ){
					$posting = 0;
				}else{
					$posting = 1;
				}
			}else{
				$posting = 0;
			}
           
           // check balance contract & get unit price
            $sql = "SELECT s.stockpile_code, con.price_converted, sc.contract_id, con.contract_type, con.qty_rule,
                        ((SELECT COALESCE(SUM(quantity), 0) FROM stockpile_contract WHERE contract_id = sc.contract_id
                        ) - con.adjustment) - (
                            SELECT CASE WHEN c.contract_type = 'C' THEN COALESCE(SUM(t.quantity), 0)
                ELSE COALESCE(SUM(t.send_weight), 0) END 
                FROM TRANSACTION t LEFT JOIN stockpile_contract sc ON t.stockpile_contract_id = sc.`stockpile_contract_id`
                LEFT JOIN contract c ON c.contract_id = sc.contract_id
                WHERE sc.contract_id =  con.contract_id
                        ) AS balance, s.freight_weight_rule, s.curah_weight_rule, v.pph_tax_id
                    FROM stockpile_contract sc
                    INNER JOIN stockpile s
                        ON s.stockpile_id = sc.stockpile_id
                    INNER JOIN contract con
                        ON con.contract_id = sc.contract_id
                    INNER JOIN vendor v
                        ON v.vendor_id = con.vendor_id
                    WHERE stockpile_contract_id = {$stockpileContractId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $contractId = $rowStockpile->contract_id;
                $unitPrice = $rowStockpile->price_converted;
                $contractType = $rowStockpile->contract_type;
                $freightWeightRule = $rowStockpile->freight_weight_rule;
                $curahWeightRule = $rowStockpile->curah_weight_rule;
                if($contractType == 'P') {
                    $balanceQuantity = $rowStockpile->balance;
                } elseif($contractType == 'C') {
                    $balanceQuantity = $rowStockpile->balance;
                    if($rowStockpile->pph_tax_id != 0 && $rowStockpile->pph_tax_id != '') {
                        $curahTaxId = $rowStockpile->pph_tax_id;
                    }
                }
				$qty_rule = $rowStockpile->qty_rule;
				if($qty_rule == 0){
					$sendWeight = $sendWeightRule;
				}else if($qty_rule == 1){
					$sendWeight = $nettoWeight;
				}else{
					if($sendWeightRule < $nettoWeight){
						$sendWeight = $sendWeightRule;
					} elseif($nettoWeight < $sendWeightRule) {
						$sendWeight = $nettoWeight;
					}else{
						$sendWeight = $sendWeightRule;
					}
				
				}
            }

            // get netto weight
            //$nettoWeight = $brutoWeight - $tarraWeight;
            
            // get freight weight
			$sqlfc = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                    $resultfc = $myDatabase->query($sqlfc, MYSQLI_STORE_RESULT);
                    if($resultFreight !== false && $resultFreight->num_rows == 1) {
                        $rowFreight = $resultFreight->fetch_object();
                        $freightRule = $rowFreight->freight_rule;
					
                       
                    }
			
			if($freightWeightRule == 0 && $freightRule == 1) {
				$freightQuantity = $sendWeight;
            }elseif($freightWeightRule == 0 && $freightRule == 0) {
                if($nettoWeight < $sendWeight) {
                    $freightQuantity = $nettoWeight;
                } elseif($nettoWeight > $sendWeight) {
                    $freightQuantity = $sendWeight;
                } else {
                    $freightQuantity = $sendWeight;
                }
            } elseif($freightWeightRule == 1) {
                $freightQuantity = $sendWeight;
            } elseif($freightWeightRule == 2) {
                $freightQuantity = $nettoWeight;
            } else {
                $freightQuantity = $sendWeight;
            }

            // get shrink condition
//            $quantity = $nettoWeight;
//            $sql = "SELECT * FROM `condition` WHERE category_id = 1 AND contract_id = {$contractId}";
//            $resultCondition = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//            if($resultCondition !== false && $resultCondition->num_rows == 1) {
//                $rowCondition = $resultCondition->fetch_object();
//                $quantity = ${$rowCondition->rule};
//            }

            if($sendWeight >= $balanceQuantity || ($contractType == 'C' && $balanceQuantity >=0)) {
                // get shrink
                $shrink = 0;
                if($contractType == 'P') {
                    if($nettoWeight < $sendWeight) {
                        $quantity = $nettoWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } elseif($nettoWeight > $sendWeight) {
                        $quantity = $sendWeight;
                        $shrink = 0;
                    } else {
                        $quantity = $sendWeight;
                    }
                } elseif($contractType == 'C') {
                    if($curahWeightRule == 0) {
                        if($nettoWeight < $sendWeight) {
                            $quantity = $nettoWeight;
                            $shrink = $sendWeight - $nettoWeight;
                        } elseif($nettoWeight > $sendWeight) {
                            $quantity = $sendWeight;
                            $shrink = 0;
                        } else {
                            $quantity = $sendWeight;
                        }
                    } elseif($curahWeightRule == 1) {
                        $quantity = $sendWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } elseif($curahWeightRule == 2) {
                        $quantity = $nettoWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } else {
                        $quantity = $sendWeight;
                    }
                }
				/*if($transactionId2 == 257942){
                $checkSlipNo = $rowR->stockpileCode .'-'. $currentYear;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				}*/
                // get freight cost
                if ($active_from == $todayDate) {
                    if ($freightCostId == 'NONE') {
                        $freightCostId = 'NULL';
                        $freightPrice = 0;
                        $freightQuantity2111 = 0;
                    } else {
                        $sql = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                        $resultFreight = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($resultFreight !== false && $resultFreight->num_rows == 1) {
                            $rowFreight = $resultFreight->fetch_object();
                            $freightPrice = $rowFreight->price_converted;
                            if ($rowFreight->freight_rule == 1) {
                                $freightQuantity2111 = $sendWeight;
                            } else {
                                $freightQuantity2111 = $freightQuantity;
                            }
                            if ($rowFreight->pph_tax_id != 0 && $rowFreight->pph_tax_id != '') {
                                $fcTaxId = $rowFreight->pph_tax_id;
                            } else {
                                $fcTaxId = 0;
                            }
                        }
                    }
                } else {
                       if ($freightCostId == 'NONE') {
                        $freightCostId = 'NULL';
                        $freightPrice = 0;
                        $freightQuantity2111 = 0;
                    } else {
                        $sql = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                        $resultFreight = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($resultFreight !== false && $resultFreight->num_rows == 1) {
                            $rowFreight = $resultFreight->fetch_object();
                            $freightPrice = $rowFreight->price_converted;
                            if ($rowFreight->freight_rule == 1) {
                                $freightQuantity2111 = $sendWeight;
                            } else {
                                $freightQuantity2111 = $freightQuantity;
                            }
                            if ($rowFreight->pph_tax_id != 0 && $rowFreight->pph_tax_id != '') {
                                $fcTaxId = $rowFreight->pph_tax_id;
                            } else {
                                $fcTaxId = 0;
                            }
                        }
                    }
                }
				
				// get handling cost
				 if($handlingCostId == 'NONE') {
                    $handlingCostId = 'NULL';
					$handlingQuantity = 0;
					$handlingPrice = 0;
                } else {
                    $sql = "SELECT vhc.vendor_handling_id, vhc.price_converted, vh.pph_tax_id, vh.vendor_handling_rule
                            FROM `vendor_handling_cost` vhc 
                            INNER JOIN vendor_handling vh
                                ON vh.vendor_handling_id = vhc.vendor_handling_id
                            WHERE vhc.handling_cost_id = {$handlingCostId}";
                    $resultHandling = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultHandling !== false && $resultHandling->num_rows == 1) {
                        $rowHandling = $resultHandling->fetch_object();
                        $handlingPrice = $rowHandling->price_converted;
					if($rowHandling->vendor_handling_rule == 1){
							$handlingQuantity = $sendWeight;
						}else{
							$handlingQuantity = $nettoWeight;
						}
                        
                    }
                }
				
                // get unloading cost
                if($unloadingCostId == 'NONE') {
                    $unloadingCostId = 'NULL';
                    $unloadingPrice = 0;
                } else {
                    $sql = "SELECT uc.price_converted 
                            FROM `unloading_cost` uc 
                            WHERE uc.unloading_cost_id = {$unloadingCostId}";
                    $resultUnloading = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultUnloading !== false && $resultUnloading->num_rows == 1) {
                        $rowUnloading = $resultUnloading->fetch_object();
                        $unloadingPrice = $rowUnloading->price_converted;
                    }
                }
                
                if($laborId == 'NONE') {
                    $laborId = 'NULL';
                } else {
                    $sql = "SELECT l.pph_tax_id
                            FROM `labor` l
                            WHERE l.labor_id = {$laborId}";
                    $resultLabor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultLabor !== false && $resultLabor->num_rows == 1) {
                        $rowLabor = $resultLabor->fetch_object();
                        if($rowLabor->pph_tax_id != 0 && $rowLabor->pph_tax_id != '') {
                            $ucTaxId = $rowLabor->pph_tax_id;
                        } else{
							 $ucTaxId = 0;
						}
                    }
                }
                
                $syncStatus = 0;
                $sql = "SELECT sync_status FROM `transaction` WHERE transaction_id = {$transactionId}";
                $resultTrans = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultTrans !== false && $resultTrans->num_rows == 1) {
                    $rowTrans = $resultTrans->fetch_object();
                    if($rowTrans->sync_status == 1) {
                        $syncStatus = 2;
                    } 
                }
                
                // get inventory value
               $inventoryValue = ($freightQuantity * $freightPrice) + $unloadingPrice + ($quantity * $unitPrice) + ($handlingQuantity * $handlingPrice); 
                
				/*if($transactionId2 == 257942){
                // insert into transaction
				$sql = "INSERT INTO `transaction` (slip_no, slip_retur, stockpile_contract_id, transaction_date, loading_date, vehicle_no, labor_id, unloading_cost_id, "
                        . "unloading_date, freight_cost_id, handling_cost_id, permit_no, transaction_type, vendor_id, send_weight, bruto_weight, tarra_weight, "
                        . "netto_weight, notes, driver, freight_quantity, handling_quantity, quantity, shrink, freight_price, unloading_price, unit_price, "
                        . "inventory_value, block, curah_tax_id, uc_tax_id, fc_tax_id, entry_by, entry_date, modify_by, modify_date) "
                        . "VALUES ('{$slipNo}', '{$slipU}',{$stockpileContractId}, '{$dateR}', '{$dateR}', "
                        . "'{$vehicleNo}', {$laborId}, {$unloadingCostId}, '{$dateR}', {$freightCostId}, {$handlingCostId}, '{$permitNo}', "
                        . "{$transactionType}, {$supplierId}, {$sendWeight}, {$brutoWeight}, {$tarraWeight}, {$nettoWeight}, '{$notes}', "
                        . "'{$driver}', {$freightQuantity}, {$handlingQuantity}, {$quantity}, {$shrink}, {$freightPrice}, {$unloadingPrice}, {$unitPrice}, {$inventoryValue}, '{$block}', "
                        . "{$curahTaxId}, {$ucTaxId}, {$fcTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				}else{*/
                $sql = "UPDATE `transaction` SET "
                        . "stockpile_contract_id = {$stockpileContractId}, "
                        . "loading_date = STR_TO_DATE('{$loadingDate}', '%d/%m/%Y'), "
                        . "vehicle_no = '{$vehicleNo}', "
                        . "labor_id = {$laborId}, "
                        . "unloading_cost_id = {$unloadingCostId}, "
						. "transaction_date = STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), "
                        . "unloading_date = STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), "
                        . "freight_cost_id = {$freightCostId}, "
						. "handling_cost_id = {$handlingCostId}, "
                        . "do_no = '{$permitNo2}', "
						. "permit_no = '{$permitNo2}', "
                        . "vendor_id = {$supplierId}, "
                        . "send_weight = {$sendWeight}, "
                        . "bruto_weight = {$brutoWeight}, "
                        . "tarra_weight = {$tarraWeight}, "
                        . "netto_weight = {$nettoWeight}, "
                        . "notes = '{$notes}', "
                        . "driver = '{$driver}', "
                        . "freight_quantity = {$freightQuantity}, "
						. "handling_quantity = {$handlingQuantity}, "
                        . "quantity = {$quantity}, "
                        . "shrink = {$shrink}, "
						//. "susut_qty = {$qtySusut}, "
						//. "susut_price = {$hargaSusut}, "
                        . "freight_price = {$freightPrice}, "
						. "handling_price = {$handlingPrice}, "
                        . "unloading_price = {$unloadingPrice}, "
                        . "unit_price = {$unitPrice}, "
                        . "inventory_value = {$inventoryValue}, "
						. "fc_tax_id = {$fcTaxId}, "
						. "uc_tax_id = {$ucTaxId}, "
                        . "block = '{$block}', "
						. "posting_status = {$posting}, "
                        . "sync_status = {$syncStatus}, "
                        . "modify_by = {$_SESSION['userId']}, "
                        . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE transaction_id = {$transactionId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				//}
                if($result !== false) {
                    $return_value = '|OK|Transaction has updated successfully.|';
                    
                    // if curah update contract and stockpile_contract quantity
                    if($contractType == 'C') {
                      /*  $sql = "UPDATE contract SET quantity = {$quantity} WHERE contract_id = {$contractId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        
                        $sql = "UPDATE stockpile_contract SET quantity = {$quantity} WHERE stockpile_contract_id = {$stockpileContractId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/
                    }
					
					$sql = "CALL sp_shrink_weight({$transactionId})";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
					
					if($qty_rule !== 0){
						$sql = "UPDATE contract_netto SET send_weight = {$sendWeightRule} WHERE transaction_id ={$transactionId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
						}
                    
                   // insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.'. $sql .'|';
                }
            } else {
                $return_value = '|FAIL|The quantity exceed the balance of the contract.|';
            }
        } else {
            $return_value = '|FAIL|Please fill the required fields.|';
        }
        // </editor-fold>
		}else{
		$return_value = '|FAIL|Tanggal transaksi sudah lebih dari 5 hari.|';
	}
        
    } elseif($transactionType == 2) {
        // <editor-fold defaultstate="collapsed" desc="OUT">
        if($stockpileId != '' && $salesId != '' && $shipmentId != '' && $transactionDate2 != '' && $vehicleNo2 != '' && $sendWeight2 != '' && $blWeight != '') {
			
			$sql = "UPDATE `transaction` SET "
                        . "vehicle_no = '{$vehicleNo2}', "
                        . "transaction_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                        . "unloading_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                        . "notes = '{$notes2}', "
                        . "modify_by = {$_SESSION['userId']}, "
                        . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE transaction_id = {$transactionId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				if($result !== false) {
                    
					$return_value = '|OK|Transaction has updated successfully.|';
                    
					insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.'. $sql .'|';
                }
            // check stockpile detail & transaction balance
			/*$sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode FROM `transaction` t WHERE t.transaction_id = {$transactionId}";
	$resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
            if($resultR !== false && $resultR->num_rows == 1) {
                $rowR = $resultR->fetch_object();
				//$R = "R";
				//$U = "-U";
                //$sql = "UPDATE `transaction` SET shipment_id = NULL WHERE transaction_id = {$transactionId}";
                //$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				//$slipU = $rowR->slip_no .''. $U;
				$checkSlipNo = $rowR->stockpileCode .'-'. $currentYear2;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				$slipR = $rowR->slip_no .'-R';
				$slipU = $rowR->slip_no .'-U';
				$dateR = $date->format('Y-m-d');
				$sendW = $rowR->send_weight * -1;
				$quantityW = $rowR->quantity * -1;
				$shrinkW = $rowR->shrink * -1;
				//$unloadingP = $rowR->unloading_price * -1;
				if($rowR->notes == '')
				$notes = 'NULL';
			}
				
	$sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},NULL,{$shipmentId},'{$rowR->transaction_date}',NULL,'{$rowR->vehicle_no}',NULL,NULL,'{$rowR->transaction_date}',NULL,NULL,NULL,{$rowR->transaction_type},NULL,'{$sendW}',0,0,0,'{$notes}',NULL,0,0,'{$quantityW}','{$shrinkW}',0,0,0,0,0,NULL,NULL,NULL,0,NULL,NULL,NULL,NULL,NULL,{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
       if($resultLog !== false) {     
    //echo $sqlLog;
	$transactionId = $myDatabase->insert_id;
	
	insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
	
	// delete from delivery and update delivery_status in transaction
                    $sql = "SELECT d.*, t.sync_status 
                            FROM delivery d
                            INNER JOIN `transaction` t
                                ON t.transaction_id = d.transaction_id
                            WHERE d.shipment_id = {$shipmentId}";
                    $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultShipment !== false && $resultShipment->num_rows > 0) {
                        while($rowShipment = $resultShipment->fetch_object()) {
                            $syncStatus = 0;
                            if($rowShipment->sync_status == 1) {
                                $syncStatus = 2;
                            }
                            
                            if($rowShipment->percent_taken == 100) {
                                $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } else {
                                $sqlOther = "SELECT * FROM delivery WHERE shipment_id <> {$shipmentId} AND transaction_id = {$rowShipment->transaction_id}";
                                $resultOther = $myDatabase->query($sqlOther, MYSQLI_STORE_RESULT);
                                
                                if($resultOther->num_rows > 0) {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 2, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                } else {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                }
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            }
                        }
                        
                        $sqlDelete = "DELETE FROM delivery WHERE shipment_id = {$shipmentId}";
                        $resultDelete = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);
						
                    }
					//$sql = "UPDATE `transaction` SET shipment_id = NULL WHERE transaction_id = {$transactionId}";
						//$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
	   }*/
					
	  // echo $sqlLog;
	  //insert new delivery
			/*$sql = "SELECT s.stockpile_code, s.stockpile_name, 
                        (
                            SELECT COALESCE(SUM(t.quantity), 0) FROM `transaction` t
                            INNER JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                            WHERE sc.stockpile_id = s.stockpile_id
                            AND t.transaction_type = 1
                        ) AS available_balance,
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction` 
                            WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                            AND transaction_type = 2
                        ) AS delivered_balance
                    FROM stockpile s
                    WHERE s.stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $stockpileName = $rowStockpile->stockpile_name;
                $availableBalance = $rowStockpile->available_balance;
                $deliveredBalance = $rowStockpile->delivered_balance;
            }
            
            // get sales detail
            $sql = "SELECT sl.quantity, sl.price_converted, sl.currency_id, sl.exchange_rate, sl.price, cust.pph_tax_id
                    FROM sales sl 
                    INNER JOIN customer cust
                        ON cust.customer_id = sl.customer_id
                    WHERE sl.sales_id = {$salesId}";
            $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSales !== false && $resultSales->num_rows == 1) {
                $rowSales = $resultSales->fetch_object();
                $salesBalance = $rowSales->quantity;
                $salesUnitPrice = $rowSales->price_converted;
                $salesCurrencyId = $rowSales->currency_id;
                $salesExchangeRate = $rowSales->exchange_rate;
                $salesOriginalUnitPrice = $rowSales->price;
                $custTaxId = $rowSales->pph_tax_id;
            }

            // get next slip no
			
					$checkSlipNo = $stockpileCode .'-'. $currentYear3;
				
            //$checkSlipNo = $stockpileCode /*.'-'. $currentYear*///;
//            $sql = "SELECT LPAD(COUNT(1) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ";
//            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            /*$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSlip->num_rows == 0) {
                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }
            $rowSlipNo = $resultSlip->fetch_object();
            $nextSlipNo = $rowSlipNo->next_id;
            $slipNo = $checkSlipNo .'-'. $nextSlipNo;
            

//            if($sendWeight2 <= $availableBalance && $blWeight <= ($salesBalance - $deliveredBalance)) {
            if($sendWeight2 <= $availableBalance) {    
                $shrink = $sendWeight2 - $blWeight;
                
                // insert into transaction
                $sql = "INSERT INTO `transaction` (slip_no, slip_retur, shipment_id, transaction_date,unloading_date, vehicle_no, transaction_type, "
                        . "send_weight, notes, quantity, shrink, cust_tax_id, entry_by, entry_date) "
                        . "VALUES ('{$slipNo}', '{$slipU}', {$shipmentId}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), '{$vehicleNo2}', "
                        . "{$transactionType}, {$sendWeight2}, '{$notes2}', {$blWeight}, {$shrink}, {$custTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $transactionId = $myDatabase->insert_id;
                    
                    $return_value = '|OK|Transaction has inserted successfully.|';
                    
                    // insert into delivery
                    $sql = "SELECT t.* 
                            FROM transaction t 
                            WHERE t.stockpile_contract_id IN (
                                SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                            ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                              ORDER BY t.unloading_date ASC, t.slip_no ASC";
                    $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $totalInventoryValue = 0;
                    if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                        $balanceLeft = $sendWeight2;
                        while($rowDelivery = $resultDelivery->fetch_object()) {
                            $syncStatus = 0;
                            if($rowDelivery->sync_status == 1) {
                                $syncStatus = 2;
                            }
                            
                            if($balanceLeft > 0) {
                                if($rowDelivery->delivery_status == 0) {
                                    if($balanceLeft >= $rowDelivery->quantity) {
                                        $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                        $quantityTaken = $rowDelivery->quantity;
                                        $percentTaken = 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < $rowDelivery->quantity) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } elseif($rowDelivery->delivery_status == 2) {
                                    $totalTaken = 0;
                                    $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                    $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                        $rowTaken = $resultTaken->fetch_object();
                                        $totalTaken = $rowTaken->total_taken;
                                    }
                                    
                                    if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                        $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                        $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } 
                                
                                $deliveryValue = $quantityTaken * $salesUnitPrice;
                                $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                $percentTaken = $percentTaken * 100;

                                $sql = "INSERT INTO `delivery` (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                        . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                        . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                                $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus}, sync_status = {$syncStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    }
                    
                    //$updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                    $updateInventoryValue = $totalInventoryValue;
                    
                    $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    
                    // update shipment
                    $cogsAmount = $updateInventoryValue;
                    if($salesCurrencyId != 1) {
                        $cogsAmount = $updateInventoryValue / $salesExchangeRate;
                    }
                    $invoiceAmount = $blWeight * $salesOriginalUnitPrice;
                    $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                            . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$blWeight}, shipment_status = 1 "
                            . "WHERE shipment_id = {$shipmentId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    
                    // update sales
                    $boolUpdateSales = false;
                    if($blWeight == ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 1;
                        $boolUpdateSales = true;
                    } elseif($blWeight < ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 2;
                        $boolUpdateSales = true;
                    }
                    
                    if($boolUpdateSales) {
                        $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }
                    
                     insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                     
                    unset($_SESSION['transaction']);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.|';
                }
            } else {
                if($sendWeight2 > $availableBalance) {
                    $return_value = '|FAIL|Available quantity in '. $stockpileName .' is '. number_format($availableBalance, 4, '.', ',') .' Kg.|';
                } elseif($sendWeight2 > ($salesBalance - $deliveredBalance)) {
                    $return_value = '|FAIL|Sales agreement balance is '. ($salesBalance - $deliveredBalance) .' Kg.|';
                }
            }*/
          /*  $sql = "SELECT s.stockpile_code, s.stockpile_name, 
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction` 
                            WHERE stockpile_id = s.stockpile_id
                            AND transaction_type = 1
                        ) AS available_balance,
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction` 
                            WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                            AND transaction_type = 2
                        ) AS delivered_balance
                    FROM stockpile s
                    WHERE s.stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $stockpileName = $rowStockpile->stockpile_name;
                $availableBalance = $rowStockpile->available_balance;
                $deliveredBalance = $rowStockpile->delivered_balance;
            }
            
            // get sales detail
            $sql = "SELECT quantity, price_converted, currency_id, exchange_rate, price FROM sales WHERE sales_id = {$salesId}";
            $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSales !== false && $resultSales->num_rows == 1) {
                $rowSales = $resultSales->fetch_object();
                $salesBalance = $rowSales->quantity;
                $salesUnitPrice = $rowSales->price_converted;
                $salesCurrencyId = $rowSales->currency_id;
                $salesExchangeRate = $rowSales->exchange_rate;
                $salesOriginalUnitPrice = $rowSales->price;
            }

            if($sendWeight2 != 0 && $blWeight != 0) {
                
                $shrink = $sendWeight2 - $blWeight;
                
                $syncStatus = 0;
                $sql = "SELECT sync_status FROM `transaction` WHERE transaction_id = {$transactionId}";
                $resultTrans = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultTrans !== false && $resultTrans->num_rows == 1) {
                    $rowTrans = $resultTrans->fetch_object();
                    if($rowTrans->sync_status == 1) {
                        $syncStatus = 2;
                    } 
                }
                
                // insert into transaction
                $sql = "UPDATE `transaction` SET "
                        . "shipment_id = {$shipmentId}, "
                        . "vehicle_no = '{$vehicleNo2}', "
                        . "send_weight = {$sendWeight2}, "
						. "notes = '{$notes2}', "
                        . "quantity = {$blWeight}, "
                        . "shrink = {$shrink}, "
                        . "sync_status = {$syncStatus}, "
                        . "modify_by = {$_SESSION['userId']}, "
                        . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE transaction_id = {$transactionId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $transactionId = $myDatabase->insert_id;
                    
                    $return_value = '|OK|Transaction has updated successfully.|';
                    
                    // delete from delivery and update delivery_status in transaction
                    $sql = "SELECT d.*, t.sync_status 
                            FROM delivery d
                            INNER JOIN `transaction` t
                                ON t.transaction_id = d.transaction_id
                            WHERE d.shipment_id = {$shipmentId}";
                    $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultShipment !== false && $resultShipment->num_rows > 0) {
                        while($rowShipment = $resultShipment->fetch_object()) {
                            $syncStatus = 0;
                            if($rowShipment->sync_status == 1) {
                                $syncStatus = 2;
                            }
                            
                            if($rowShipment->percent_taken == 100) {
                                $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } else {
                                $sqlOther = "SELECT * FROM delivery WHERE shipment_id <> {$shipmentId} AND transaction_id = {$rowShipment->transaction_id}";
                                $resultOther = $myDatabase->query($sqlOther, MYSQLI_STORE_RESULT);
                                
                                if($resultOther->num_rows > 0) {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 2, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                } else {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                }
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            }
                        }
                        
                        $sqlDelete = "DELETE FROM delivery WHERE shipment_id = {$shipmentId}";
                        $resultDelete = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);
                    }
                    
                    
                    // insert into delivery
						$sql = "SELECT t.* 
                            FROM transaction t 
                            WHERE t.stockpile_contract_id IN (
                                SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                            ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                            ORDER BY  t.unloading_date ASC, t.slip_no ASC";
                    $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $totalInventoryValue = 0;
                    if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                        $balanceLeft = $sendWeight2;
                        while($rowDelivery = $resultDelivery->fetch_object()) {
                            $syncStatus = 0;
                            if($rowDelivery->sync_status == 1) {
                                $syncStatus = 2;
                            }
                            
                            if($balanceLeft > 0) {
                                if($rowDelivery->delivery_status == 0) {
                                    if($balanceLeft >= $rowDelivery->quantity) {
                                        $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                        $quantityTaken = $rowDelivery->quantity;
                                        $percentTaken = 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < $rowDelivery->quantity) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } elseif($rowDelivery->delivery_status == 2) {
                                    $totalTaken = 0;
                                    $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                    $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                        $rowTaken = $resultTaken->fetch_object();
                                        $totalTaken = $rowTaken->total_taken;
                                    }
                                    
                                    if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                        $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                        $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                }  
                                
                                $deliveryValue = $quantityTaken * $salesUnitPrice;
                                $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                $percentTaken = $percentTaken * 100;

                                $sql = "INSERT INTO delivery (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                        . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                        . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                                $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus}, sync_status = {$syncStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    }
                    
                    $updateInventoryValue = $totalInventoryValue;
//                    $updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                    
                    $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    
                    // update shipment
                    $cogsAmount = $updateInventoryValue;
                    if($salesCurrencyId != 1) {
                        $cogsAmount = $updateInventoryValue / $salesExchangeRate;
                    }
                    $invoiceAmount = $blWeight * $salesOriginalUnitPrice;
                    $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                            . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$blWeight}, shipment_status = 1 "
                            . "WHERE shipment_id = {$shipmentId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    
                    // update sales
                    $boolUpdateSales = false;
                    if($sendWeight2 == ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 1;
                        $boolUpdateSales = true;
                    } elseif($sendWeight2 < ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 2;
                        $boolUpdateSales = true;
                    }
                    
                    if($boolUpdateSales) {
                        $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }
					
					insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                     
                    unset($_SESSION['transaction']);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.|';
					echo $sql;
                }
            } else {
                if($sendWeight2 > $availableBalance) {
                    $return_value = '|FAIL|Available quantity in '. $stockpileName .' is '. number_format($availableBalance, 4, '.', ',') .' Kg.|';
                } elseif($sendWeight2 > ($salesBalance - $deliveredBalance)) {
                    $return_value = '|FAIL|Sales agreement balance is '. ($salesBalance - $deliveredBalance) .' Kg.|';
                }
            }*/
        } else {
            $return_value = '|FAIL|Please fill the required fields.|';
        }
        // </editor-fold>
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_POST['action']) && $_POST['action'] == 'import_transaction') {  
    // <editor-fold defaultstate="collapsed" desc="import_transaction">
    
    $return_value = '';
    $boolContinue = true;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    
    // </editor-fold>
    
    if($stockpileId != '' && isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import/stockpile-" . $stockpileId;
        
        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if($boolContinue) {

            $importResult = excelImportTransaction($myDatabase, $attachmentPath, $stockpileId, $vendorId, $stockpileContractId);
            $importResult = explode("|", $importResult);

            if($importResult[0] == 'OK') {
                $return_value = '|OK|'. $importResult[1] .'|';
            } else {
                $return_value = '|FAIL|'. $importResult[1] .'|';
            }

        }
    } else {
        $return_value = '|FAIL|Please fill required fields.|';
    }
    
    echo $return_value;
    
    // </editor-fold>
}
elseif (isset($_POST['action']) && $_POST['action'] == 'import_general_vendor') {  
    // <editor-fold defaultstate="collapsed" desc="import_transaction">
    
    $return_value = '';
    $boolContinue = true;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    //$vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    //$stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    
    // </editor-fold>
    
    if($stockpileId != '' && isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import/stockpile-" . $stockpileId;
        
        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if($boolContinue) {

            $importResult = excelImportGeneralVendor($myDatabase, $attachmentPath, $stockpileId);
            $importResult = explode("|", $importResult);

            if($importResult[0] == 'OK') {
                $return_value = '|OK|'. $importResult[1] .'|';
            } else {
                $return_value = '|FAIL|'. $importResult[1] .'|';
            }

        }
    } else {
        $return_value = '|FAIL|Please fill required fields.|';
    }
    
    echo $return_value;
    
    // </editor-fold>
}
elseif (isset($_POST['action']) && $_POST['action'] == 'import_jurnal') {  
    // <editor-fold defaultstate="collapsed" desc="import_transaction">
    
    $return_value = '';
    $boolContinue = true;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    
    //$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    //$vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    //$stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    
    // </editor-fold>
    
    if(isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import/jurnal/";
        
        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if($boolContinue) {

            $importResult = excelImportJurnal($myDatabase, $attachmentPath);
            $importResult = explode("|", $importResult);

            if($importResult[0] == 'OK') {
                $return_value = '|OK|'. $importResult[1] .'|';
            } else {
                $return_value = '|FAIL|'. $importResult[1] .'|';
            }

        }
    } else {
        $return_value = '|FAIL|Please fill required fields.|';
    }
    
    echo $return_value;
    
    // </editor-fold>
}
elseif (isset($_POST['action']) && $_POST['action'] == 'import_user_signature') {  
    // <editor-fold defaultstate="collapsed" desc="import_transaction">
    
    $return_value = '';
    $boolContinue = true;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    
   $userId = $myDatabase->real_escape_string($_POST['userId']);
   // $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
   // $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    
    // </editor-fold>
    
    if(isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import/signature/";
		$imageName = $_FILES['imagefile']['name'];
        
        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" .basename($imageName);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if($boolContinue && $userId != '') {

            $sql = "INSERT INTO user_signature (user_id, signature) VALUES ({$userId}, '{$imageName}')";
        	$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Stockpile added successfully.|';
        } else {
            $return_value = '|FAIL|Failed adding signature.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }
    
    echo $return_value;
	}
    // </editor-fold>
}
elseif (isset($_POST['action']) && $_POST['action'] == 'import_payment') {  
    // <editor-fold defaultstate="collapsed" desc="import_transaction">
    
    $return_value = '';
    $boolContinue = true;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    
    //$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    //$vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    //$stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    
    // </editor-fold>
    
    if(isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import/payment-";
        
        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if($boolContinue) {

            $importResult = excelImportPayment($myDatabase, $attachmentPath);
            $importResult = explode("|", $importResult);

            if($importResult[0] == 'OK') {
                $return_value = '|OK|'. $importResult[1] .'|';
            } else {
                $return_value = '|FAIL|'. $importResult[1] .'|';
            }

        }
    } else {
        $return_value = '|FAIL|Please fill required fields.|';
    }
    
    echo $return_value;
    
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_sales') {
    // <editor-fold defaultstate="collapsed" desc="delete_sales">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    // </editor-fold>
    
    if($salesId != '') {
        $sql = "DELETE FROM `sales` WHERE sales_id = {$salesId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Sales agreement has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete sales agreement failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}



elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'sales_detail_data') {
    // <editor-fold defaultstate="collapsed" desc="bank_data">
    
    $return_value = '';
    $boolNew = false;
    $salesHeaderId = $myDatabase->real_escape_string($_POST['salesHeaderId']);
	$salesDetailId = $myDatabase->real_escape_string($_POST['salesDetailId']);
	$customerId = $myDatabase->real_escape_string($_POST['customerId']);
	$vessel = $myDatabase->real_escape_string($_POST['vessel']);
	$shipmentNo = $myDatabase->real_escape_string($_POST['shipmentNo']);
	$quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
	$statsType = $myDatabase->real_escape_string($_POST['statsType']);
	$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
	$tolerance = str_replace(",", "", $myDatabase->real_escape_string($_POST['tolerance']));
	$moisture = str_replace(",", "", $myDatabase->real_escape_string($_POST['moisture']));
	$ncv = str_replace(",", "", $myDatabase->real_escape_string($_POST['ncv']));
	$tax_base = str_replace(",", "", $myDatabase->real_escape_string($_POST['tax_base']));
	$fm = str_replace(",", "", $myDatabase->real_escape_string($_POST['fm']));
	$fob = str_replace(",", "", $myDatabase->real_escape_string($_POST['fob']));
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    // </editor-fold>
    
    if ($salesDetailId == '') {
        $boolNew = true;
    }

            if($boolNew) {
                $sql = "INSERT INTO `sales_detail`
						(`sales_header_id`,
						`customer_id`,
						`vessel`,
						`qty`,
						`stockpile_id`,
						`stats`,
						`shipment_no`,
						`tolerance`,
						`moisture`,
						`ncv`,
						`tax_base`,
						`fm`,
						`fob`,
						`entry_by`,
						`entry_date`)
						VALUES
						($salesHeaderId,
						$customerId,
						'$vessel',
						$quantity,
						$stockpileId,
						'$statsType',
						'$shipmentNo',						
						$moisture,
						$tolerance,
						$ncv,
						$tax_base,
						$fm,
						$fob,
						{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `sales_detail`
						SET
						`sales_header_id` = $salesHeaderId,
						`customer_id` = $customerId,
						`vessel` = '$vessel',
						`qty` = $quantity,
						`stats` = '$statsType',
						`shipment_no` = '$shipmentNo',
						`tolerance` = $tolerance,
						`moisture` = $moisture,
						`ncv` = $ncv,
						`tax_base` = $tax_base,
						`fm` = $fm,
						`fob` = $fob,
						`entry_by` = {$_SESSION['userId']},
						`entry_date` = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s')
						WHERE `sales_detail_id` = $salesDetailId";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $salesDetailId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Sales Schedule has successfully inserted/updated.|'. $salesDetailId .'|';
            } else {
                $return_value = '|FAIL|Insert/update sales schedule failed.||';
            }
        
    
    echo $sql;
    echo $return_value;
    // </editor-fold>
}




elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'sales_header_data') {
    // <editor-fold defaultstate="collapsed" desc="bank_data">
    
    $return_value = '';
    $boolNew = false;
    
	$salesHeaderId = $myDatabase->real_escape_string($_POST['salesHeaderId']);
	$dateFrom = $myDatabase->real_escape_string($_POST['dateFrom']);
	$dateTo = $myDatabase->real_escape_string($_POST['dateTo']);
	$eta = $myDatabase->real_escape_string($_POST['eta']);
	$salesNo = str_replace(",", "", $myDatabase->real_escape_string($_POST['salesNo']));
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    // </editor-fold>
    
    if ($salesHeaderId == '') {
        $boolNew = true;
    }

            if($boolNew) {
                $sql = "INSERT INTO `sales_header`
						(`date_from`,
						`date_to`,
						`eta`,
						`sales_no`,
						`entry_by`,
						`entry_date`)
						VALUES
						(STR_TO_DATE('{$dateFrom}','%d/%m/%Y'),
						STR_TO_DATE('{$dateTo}','%d/%m/%Y'),
						STR_TO_DATE('{$eta}','%d/%m/%Y'),
						'$salesNo',
						{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `sales_header`
						SET
						`date_from` = STR_TO_DATE('{$dateFrom}','%d/%m/%Y'),
						`date_to` = STR_TO_DATE('{$dateTo}','%d/%m/%Y'),
						`eta` = STR_TO_DATE('{$eta}','%d/%m/%Y'),
						`sales_no` = '$salesNo',						
						`entry_by` = {$_SESSION['userId']},
						`entry_date` = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s')
						WHERE `sales_header_id` = $salesHeaderId";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $salesHeaderId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Sales has successfully inserted/updated.|'. $salesHeaderId .'|';
            } else {
                $return_value = '|FAIL|Insert/update sales failed.||';
            }
        
    
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_price_rate_sales') {
    // <editor-fold defaultstate="collapsed" desc="sales_data">
    
    $return_value = '';
    /*$boolNew = false;
    $boolExists = true;
    $boolShipment = true;
    $boolUpdateShipment = false;
    $boolInsertCustomer = false;
    $boolCustomerExists = false;
    $addMessage = "";*/
    
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRateUpdate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceUpdate']));
    
	// </editor-fold>
    
    
    
    if($salesId != '' && $exchangeRate != '' && $price != '' ) {
        
            
            $priceConverted = $price * $exchangeRate;
            
            
                $sql = "UPDATE `sales` sl SET "
                        . "sl.exchange_rate = {$exchangeRate}, "
                        . "sl.price = {$price}, "
                        . "sl.price_converted = {$priceConverted}, "
						. "sl.sales_status = 3 "
                        . "WHERE sl.sales_id = {$salesId}";
            
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                
				$sql = "SELECT sl.sales_id, t.transaction_id
						FROM sales sl 
						LEFT JOIN shipment sh ON sh.`sales_id` = sl.`sales_id`
						LEFT JOIN `transaction` t ON t.`shipment_id` = sh.`shipment_id` 
						WHERE sl.sales_id = {$salesId}";
				$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				if($result->num_rows > 0) {
				while($row = $result->fetch_object()) {
					
				$transactionId = $row->transaction_id;
				
				insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
						
						}
					}
				
				

                $return_value = '|OK|Sales Agreement has successfully inserted/updated.'. $salesId .'|';
            } else {
                $return_value = '|FAIL|Insert/update sales agreement failed.||';
				echo $sql;
            }
        
    } else {
        
            $return_value = '|FAIL|Please fill the required fields.||';
        
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'sales_data') {
    // <editor-fold defaultstate="collapsed" desc="sales_data">
    
    $return_value = '';
    $boolNew = false;
    $boolExists = true;
    $boolShipment = true;
    $boolUpdateShipment = false;
    $boolInsertCustomer = false;
    $boolCustomerExists = false;
    $addMessage = "";
    
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
	$accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $salesNo = $myDatabase->real_escape_string($_POST['salesNo']);
	$shipmentNo = $myDatabase->real_escape_string($_POST['shipmentNo']);
    $salesDate = $myDatabase->real_escape_string($_POST['salesDate']);
	$shipmentDate = $myDatabase->real_escape_string($_POST['shipmentDate']);
    $salesType = $myDatabase->real_escape_string($_POST['salesType']);
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    $customerName = $myDatabase->real_escape_string($_POST['customerName']);
    $customerAddress = $myDatabase->real_escape_string($_POST['customerAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $destination = $myDatabase->real_escape_string($_POST['destination']);
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    $totalShipment = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalShipment']));
    $oldTotalShipment = str_replace(",", "", $myDatabase->real_escape_string($_POST['oldTotalShipment']));
    $bkp_jkp = $myDatabase->real_escape_string($_POST['bkp_jkp']);
	$peb_fp_no = $myDatabase->real_escape_string($_POST['peb_fp_no']);
	$pebDate = $myDatabase->real_escape_string($_POST['pebDate']);
    $ggl = $myDatabase->real_escape_string($_POST['ggl']);
    $rsb = $myDatabase->real_escape_string($_POST['rsb']);
	$mothervessel = $myDatabase->real_escape_string($_POST['mothervessel']);

echo "AA " . $motherVessel;
	// </editor-fold>
    
    if($customerId == 'INSERT') {
        if($customerName != '' && $customerAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
            $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$customerName}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($result !== false && $result->num_rows > 0) {
                $boolCustomerExists = true;
            } elseif($result !== false && $result->num_rows == 0) {
                $ppnValue = 0;
                $pphValue = 0;

                $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
                $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
                if($resultPPN !== false && $resultPPN->num_rows == 1) {
                    $rowPPN = $resultPPN->fetch_object();
                    $ppnValue = $rowPPN->tax_value;
                }

                $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
                $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                if($resultPPh !== false && $resultPPh->num_rows == 1) {
                    $rowPPh = $resultPPh->fetch_object();
                    $pphValue = $rowPPh->tax_value;
                }
                
                $sql = "INSERT INTO `customer` (customer_name, customer_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                    . "'{$customerName}', '{$customerAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $customerId = $myDatabase->insert_id;
                    $boolInsertCustomer = true;
                } 
            }
        } else {
            $boolInsertCustomer = false;
        }
    } else {
        $boolInsertCustomer = true;
    }
    
    if ($salesId == '') {
        $boolNew = true;
    } else {
        if($totalShipment != $oldTotalShipment) {
            if($totalShipment < $oldTotalShipment) {
                $boolShipment = false;
            }
        }
    }
    
    if($salesDate != '' && $salesNo != '' && $salesType != '' && $customerId != '' && $currencyId != '' &&
            $price != '' && $quantity != '' && $totalShipment != '' && $stockpileId != '' && $boolShipment &&
            $boolInsertCustomer && !$boolCustomerExists) {
        
        if($boolNew) {
            $sql = "SELECT * FROM `sales` WHERE company_id = {$_SESSION['companyId']} AND sales_no = '{$salesNo}'";
            $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSales->num_rows > 0) {
                $boolExists = false;
            }
        } 

        if($boolExists) {
            if($exchangeRate == '') {
                $exchangeRate = 1;
            }
            
            $priceConverted = $price * $exchangeRate;
            
            if($boolNew) {
                $sqlA = "INSERT INTO `sales` (sales_no, sales_date, sales_type, customer_id, "
                        . "stockpile_id, account_id, destination, notes, currency_id, exchange_rate, price, price_converted, quantity, "
                        . "total_shipment, shipment_date, bkp_jkp, peb_fp_no, peb_fp_date, company_id, entry_by, entry_date, mother_vessel) VALUES ("
                        . "'{$salesNo}', STR_TO_DATE('{$salesDate}', '%d/%m/%Y'), {$salesType}, "
                        . "{$customerId}, {$stockpileId}, {$accountId}, '{$destination}', '{$notes}', {$currencyId}, {$exchangeRate}, {$price}, "
                        . "{$priceConverted}, {$quantity}, {$totalShipment}, STR_TO_DATE('{$shipmentDate}', '%m/%Y'), '{$bkp_jkp}', '{$peb_fp_no}', "
                        . "STR_TO_DATE('{$pebDate}', '%d/%m/%Y'), {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$mothervessel}')";
            } else {
                $sqlA = "UPDATE `sales` sl INNER JOIN shipment sh ON sl.sales_id = sh.sales_id SET "
                        . "sh.shipment_no = '{$shipmentNo}', "
						. "sl.sales_no = '{$salesNo}', "
                        . "sl.sales_date = STR_TO_DATE('{$salesDate}', '%d/%m/%Y'), "
                        . "sl.sales_type = {$salesType}, "
                        . "sl.customer_id = {$customerId}, "
                        . "sl.stockpile_id = {$stockpileId}, "
						. "sl.account_id = {$accountId}, "
                        . "sl.destination = '{$destination}', "
                        . "sl.notes = '{$notes}', "
                        . "sl.currency_id = {$currencyId}, "
                        . "sl.exchange_rate = {$exchangeRate}, "
                        . "sl.price = {$price}, "
                        . "sl.price_converted = {$priceConverted}, "
                        . "sl.quantity = {$quantity}, "
                        . "sl.total_shipment = {$totalShipment}, "
						. "sl.shipment_date = STR_TO_DATE('{$shipmentDate}', '%m/%Y'), "
						. "sl.bkp_jkp = '{$bkp_jkp}', "
						. "sl.peb_fp_no = '{$peb_fp_no}', "
						. "sl.mother_vessel = '{$mothervessel}', "
						. "sl.peb_fp_date = STR_TO_DATE('{$pebDate}', '%d/%m/%Y') "
                        . "WHERE sl.sales_id = {$salesId}";
            }
			
            $result = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $salesId = $myDatabase->insert_id;
                    $j = 1;
                    $boolUpdateShipment = true;
                } else {
                    if($totalShipment > $oldTotalShipment) {
                        $j = $oldTotalShipment + 1;
                        $boolUpdateShipment = true;
                    } else {
                        $addMessage = " Total shipment cannot be updated.";
                    }
                    
//                    $sql = "DELETE FROM `shipment` WHERE sales_id = {$salesId}";
//                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                
                if($boolUpdateShipment) {
                    for($i = $j; $i <= $totalShipment; $i++) {
                        $shipmentCode = $salesNo .'-'. $i;

                        $sql = "INSERT INTO `shipment` (shipment_code, shipment_no, sales_id, entry_by, entry_date) VALUES ("
                                . "'{$shipmentCode}', '{$shipmentNo}', {$salesId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }
                }

                $return_value = '|OK|Sales Agreement has successfully inserted/updated.'. $addMessage .'|'. $salesId .'|' . $sql;;
            } else {
                $return_value = '|FAIL|Insert/update sales agreement failed.||';
				echo $sql;
            }
        } else {
            $return_value = '|FAIL|Sales agreement already exists.||';
        }
    } else {
        if(!$boolShipment) {
            $return_value = '|FAIL|Total shipment cant be less than before.||';
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    }
    
    echo $return_value;
    // </editor-fold>
}


elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'shipment_data') {
    // <editor-fold defaultstate="collapsed" desc="shipment_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
    $shipmentCode = $myDatabase->real_escape_string($_POST['shipmentCode']);
    $shipmentDate = $myDatabase->real_escape_string($_POST['shipmentDate']);
    $shipmentType = $myDatabase->real_escape_string($_POST['shipmentType']);
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    $destination = $myDatabase->real_escape_string($_POST['destination']);
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = $myDatabase->real_escape_string($_POST['exchangeRate']);
    $price = $myDatabase->real_escape_string($_POST['price']);
    $quantity = $myDatabase->real_escape_string($_POST['quantity']);
    // </editor-fold>
    
    if ($shipmentId == '') {
        $boolNew = true;
    }
    
    if($shipmentCode != '' && $shipmentDate != '' && $shipmentType != '' && $customerId != '' && $currencyId != '' &&
            $price != '' && $quantity != '') {
        
        if($boolNew) {
            // get next slip no
            $checkShipmentNo = $shipmentCode .'-'. $currentYearMonth;
            $sql = "SELECT LPAD(COUNT(1) + 1, 3, '0') AS next_id FROM shipment WHERE shipment_no LIKE '{$checkShipmentNo}%'";
            $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            $rowShipmentNo = $resultShipment->fetch_object();
            $nextShipmentNo = $rowShipmentNo->next_id;
            $shipmentNo = $checkShipmentNo .'-'. $nextShipmentNo;
        } 

        if($shipmentNo != '') {
            if($exchangeRate == '') {
                $exchangeRate = 1;
            }
            
            $priceConverted = $price * $exchangeRate;
            
            if($boolNew) {
                $sql = "INSERT INTO `shipment` (shipment_no, shipment_code, shipment_date, shipment_type, customer_id, "
                        . "destination, notes, currency_id, exchange_rate, price, price_converted, quantity, entry_by, entry_date) VALUES ("
                        . "'{$shipmentNo}', UPPER('{$shipmentCode}'), STR_TO_DATE('{$shipmentDate}', '%d/%m/%Y'), {$shipmentType}, "
                        . "{$customerId}, '{$destination}', '{$notes}', {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, "
                        . "{$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `shipment` SET "
                        . "shipment_date = STR_TO_DATE('{$shipmentDate}', '%d/%m/%Y'), "
                        . "shipment_type = {$shipmentType}, "
                        . "customer_id = {$customerId}, "
                        . "destination = '{$destination}', "
                        . "notes = '{$notes}', "
                        . "currency_id = {$currencyId}, "
                        . "exchange_rate = {$exchangeRate}, "
                        . "price = {$price}, "
                        . "price_converted = {$priceConverted}, "
                        . "quantity = {$quantity} "
                        . "WHERE shipment_id = {$shipmentId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $shipmentId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Sales Agreement has successfully inserted/updated.|'. $shipmentId .'|';
            } else {
                $return_value = '|FAIL|Insert/update sales agreement failed.||';
            }
        } else {
            $return_value = '|FAIL|Sales agreement already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_payment') {
    // <editor-fold defaultstate="collapsed" desc="delete_payment">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentId = $myDatabase->real_escape_string($_POST['paymentId']);
    // </editor-fold>
    
    if($paymentId != '') {
        // check dp di shipment
        
        $sql = "SELECT p.*, b.currency_id AS b_currency_id, con.contract_id, con.contract_type, con.price_converted, con.quantity
                FROM payment p 
                INNER JOIN bank b
                    ON b.bank_id = p.bank_id
                LEFT JOIN stockpile_contract sc
                    ON sc.stockpile_contract_id = p.stockpile_contract_id
                LEFT JOIN contract con
                    ON con.contract_id = sc.contract_id
                WHERE p.payment_id = {$paymentId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();

            if($row->stockpile_contract_id != '') {
                if($row->contract_type == 'P') {
                    if($row->payment_method == 1) {
                        $sqlUpdate = "UPDATE contract set payment_status = 0 WHERE contract_id = {$row->contract_id}";
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

                        if($row->original_amount_converted != $row->amount_converted) {
                            $sqlDP = "SELECT p.*, b.currency_id AS b_currency_id 
                                    FROM payment p
                                    INNER JOIN bank b
                                        ON b.bank_id = p.bank_id
                                    WHERE p.stockpile_contract_id = {$row->stockpile_contract_id} 
                                    AND p.payment_method = 2
                                    AND p.payment_status = 0";
                            $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                            if($resultDP !== false && $resultDP->num_rows > 0) {
                                while($rowDP = $resultDP->fetch_object()) {
                                    $sqlUpdate = "UPDATE payment SET amount = {$rowDP->original_amount}, amount_converted = {$rowDP->original_amount_converted}
                                                WHERE payment_id = {$rowDP->payment_id}";
                                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                                }
                            }
                        }
                    }
                } 

                $sqlUpdate = "UPDATE `transaction` set payment_id = NULL where payment_id = {$paymentId}";
                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
            } elseif($row->vendor_id != '' || $row->freight_id != '' || $row->labor_id != ''|| $row->general_vendor_id != '') {
                if($row->vendor_id != '') {
                    $whereProperty = " p.vendor_id = {$row->vendor_id} ";

                    $sqlUpdate = "UPDATE `transaction` set payment_id = NULL where payment_id = {$paymentId}";
                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                } elseif($row->freight_id != '') {
                    $whereProperty = " p.freight_id = {$row->freight_id} ";

                    $sqlUpdate = "UPDATE `transaction` set fc_payment_id = NULL where fc_payment_id = {$paymentId}";
                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                } elseif($row->labor_id != '') {
                    $whereProperty = " p.labor_id = {$row->labor_id} ";

                    $sqlUpdate = "UPDATE `transaction` set uc_payment_id = NULL where uc_payment_id = {$paymentId}";
                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                } elseif($row->general_vendor_id != '') {
                    $whereProperty = " p.general_vendor_id = {$row->general_vendor_id} ";
                }

                if($row->payment_method == 1) {

                    $takenDP = $row->amount - $row->original_amount;
                    $takenDPConverted = $row->amount_coverted - $row->original_amount_converted;

                    if($takenDP > 0) {
                        $sqlDP = "SELECT p.*, b.currency_id AS b_currency_id 
                                FROM payment p
                                INNER JOIN bank b
                                    ON b.bank_id = p.bank_id
                                WHERE {$whereProperty}
                                AND p.payment_method = 2
                                AND .ppayment_status = 0
                                ORDER BY p.payment_id ASC";
                        $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                        if($resultDP !== false && $resultDP->num_rows > 0) {
                            while($rowDP = $resultDP->fetch_object()) {
                                if($takenDP > 0) {
                                    if($row->b_currency_id == $rowDP->b_currency_id) {
                                        $amount = $takenDP - $rowDP->original_amount;
                                        $amountConverted = $takenDPConverted - $rowDP->original_amount_converted;
                                        $takenDP = $takenDP - $amount;
                                    } elseif($row->b_currency_id != $rowDP->b_currency_id) {
                                        if($rowDP->b_currency_id == 2) {
                                            $amount = ceil($takenDP / $rowDP->exchange_rate) - $rowDP->original_amount;
                                            $amountConverted = ceil($takenDPConverted / $rowDP->exchange_rate) - $rowDP->original_amount_converted;
                                            $takenDP = $takenDP - ceil($amount * $rowDP->exchange_rate);
                                        } else {
                                            $amount = ceil($takenDP * $rowDP->exchange_rate) - $rowDP->original_amount;
                                            $amountConverted = ceil($takenDPConverted * $rowDP->exchange_rate) - $rowDP->original_amount_converted;
                                            $takenDP = $takenDP - ceil($amount / $rowDP->exchange_rate);
                                        }
                                    } else {
                                        $amount = $takenDP - $rowDP->original_amount;
                                        $amountConverted = $takenDPConverted - $rowDP->original_amount_converted;
                                        $takenDP = $takenDP - $amount;
                                    }

                                    $sqlUpdate = "UPDATE payment SET amount = {$amount}, amount_converted = {$amountConverted}
                                                WHERE payment_id = {$rowDP->payment_id}";
                                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                                }
                            }
                        }
                    }
                }
            } elseif($row->sales_id != '') {
                if($row->payment_method == 1) {
                    $sqlUpdate = "UPDATE shipment SET payment_id = NULL WHERE payment_id = {$paymentId}";
                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                } elseif($row->payment_method == 2) {
                    $sqlShipment = "SELECT pd.*, sh.dp_amount
                            FROM payment_detail pd 
                            INNER JOIN shipment sh
                                ON sh.shipment_id = pd.shipment_id
                            WHERE pd.payment_id = {$paymentId}";
                    $resultShipment = $myDatabase->query($sqlShipment, MYSQLI_STORE_RESULT);
                    if($resultShipment !== false && $resultShipment->num_rows > 0) {
                        while($rowShipment = $resultShipment->fetch_object()) {
                            $newDP = $rowShipment->dp_amount - $rowShipment->amount_converted;

                            $sqlUpdate = "UPDATE shipment SET dp_amount = {$newDP} WHERE shipment_id = {$rowShipment->shipment_id}";
                            $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                        }
                    }
                }
            }
        }
        
        
        $sql = "DELETE FROM `payment` WHERE payment_id = {$paymentId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Payment has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete payment failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'return_payment') {
    // <editor-fold defaultstate="collapsed" desc="return_payment">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentId = $myDatabase->real_escape_string($_POST['paymentId']);
	$returnPaymentDate = $myDatabase->real_escape_string($_POST['returnPaymentDate']);
    // </editor-fold>
    
    if($paymentId != '') {
        
       $sql = "UPDATE `payment` SET "
                        . "payment_status = 1, "
                        . "edit_by = {$_SESSION['userId']}, "
                        . "edit_date = STR_TO_DATE('$returnPaymentDate', '%d/%m/%Y %H:%i:%s'), "
						. "exec_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . " WHERE payment_id = {$paymentId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        // echo "OEK" . $sql;
        if($result !== false) {
			
            $sqlD = "DELETE FROM temp_payment_return WHERE payment_id = {$paymentId}";
            $resultD = $myDatabase->query($sqlD, MYSQLI_STORE_RESULT);

            $sqlA = "SELECT * FROM payment WHERE payment_id = {$paymentId}";
            $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
            if($resultA !== false && $resultA->num_rows > 0) {
                while($rowA = $resultA->fetch_object()) {
                    if($rowA->freight_id != ''){ //FREIGHT
                        $sqlU = "SELECT  CASE WHEN p.payment_method = 1 THEN t.transaction_id ELSE 0 END AS transactionId, CASE WHEN p.payment_method = 1 THEN po.qty ELSE pp.total_qty END AS quantity,
                                        CASE WHEN p.payment_method = 1 THEN po.price ELSE pp.price END AS price, inv.inv_notim_id, inv.idpp, 
                                        IFNULL(po.shrink/ts.trx_shrink_claim,0) as qtyShrink, IFNULL(ts.trx_shrink_claim,0) as trx_shrink_claim, IFNULL(po.shrink,0) as shrink, IFNULL(po.additional_shrink,0) as addshrink,
                                        pp.termin,  CASE WHEN p.payment_method = 1 THEN po.dpp else inv.dpp END AS dpp, CASE WHEN p.payment_method = 1 THEN IFNULL(((po.dpp- (po.shrink + po.additional_shrink)) * (po.ppn_value/100)),0) ELSE IFNULL(inv.total_ppn,0) END AS ppnVal,
                                        CASE WHEN p.payment_method = 1 THEN IFNULL(((po.dpp-(po.shrink + po.additional_shrink)) * (po.pph_value/100)),0) ELSE IFNULL(inv.total_pph,0) END AS pphVal, 
                                        CASE WHEN p.payment_method = 1 THEN po.total_amount ELSE inv.amount END AS totalAmount, p.edit_date, p.payment_method, p.freight_id,
                                        CASE WHEN p.payment_method = 1 THEN 100 else pp.termin END as termin1
                                FROM payment p
                                    LEFT JOIN payment_oa po
                                        ON po.payment_id = p.payment_id
                                    LEFT JOIN TRANSACTION t
                                        ON t.transaction_id = po.transaction_id
                                    LEFT JOIN invoice_notim inv 
                                        ON  inv.payment_id = p.payment_id
                                    LEFT JOIN pengajuan_payment pp
                                        ON pp.idPP = inv.idPP
                                    LEFT JOIN transaction_shrink_weight ts
							            ON t.transaction_id = ts.transaction_id 
                                 WHERE p.payment_id = {$paymentId}";
                        $resultU = $myDatabase->query($sqlU, MYSQLI_STORE_RESULT);
                        if($resultU !== false && $resultU->num_rows > 0) {
                            while($rowU = $resultU->fetch_object()) {
                                $priceShrink = 0;
                                $totalShrink = 0;
                                $totalAddShrink = 0;
                                if($rowU->trx_shrink_claim > 0 || $rowU->shrink > 0 || $rowU->addshrink > 0){
                                   $priceShrink = $rowU->trx_shrink_claim;
                                   $totalShrink = $rowU->shrink;
                                   $totalAddShrink = $rowU->addshrink;
                                }
                                $sqlT = "INSERT INTO temp_payment_return (payment_id, payment_method, transaction_id, idpp, inv_notim_id,  freight_id, qty, price, termin, amount, 
                                                    shrink_qty_claim, shrink_price_claim, shrink_amount, add_shrink, ppn_value, pph_value, total_amount, entry_date, entry_by, return_date) 
                                        VALUES ({$paymentId}, {$rowU->payment_method}, {$rowU->transactionId}, {$rowU->idpp}, {$rowU->inv_notim_id}, {$rowU->freight_id}, {$rowU->quantity}, {$rowU->price}, {$rowU->termin1}, {$rowU->dpp}, 
                                        {$rowU->qtyShrink}, {$priceShrink}, {$totalShrink}, {$totalAddShrink}, {$rowU->ppnVal}, {$rowU->pphVal}, {$rowU->totalAmount}, 
                                                STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),  {$_SESSION['userId']}, '{$rowU->edit_date}')";
                                $resultT = $myDatabase->query($sqlT, MYSQLI_STORE_RESULT);

                                echo " return f => ". $sqlT;
                            }
                        }
                    }else if($rowA->labor_id > 0 || $rowA->vendor_id > 0 || $rowA->vendor_handling_id > 0 || $rowA->invoice_id > 0){
                        $vendorId = '';
                        $pengajuanId = '';
                        $invoiceId = '';

                        $pengajuanId = "idpp";
                        $invoiceId = "inv_notim_id";
                        if($rowA->labor_id > 0){
                            $vendorId = "labor_id";
                            $sqlU = "SELECT  CASE WHEN p.payment_method = 1 THEN t.transaction_id ELSE 0 END AS transactionId, CASE WHEN p.payment_method = 1 THEN t.quantity ELSE pp.total_qty END AS quantity,
                                            CASE WHEN p.payment_method = 1 THEN uc.price ELSE pp.price END AS price, inv.inv_notim_id, inv.idpp,
                                            pp.termin,  CASE WHEN p.payment_method = 1 THEN pob.dpp else inv.dpp END AS dpp, CASE WHEN p.payment_method = 1 THEN IFNULL((pob.dpp * (pob.ppn_value/100)),0) ELSE IFNULL(inv.total_ppn,0) END AS ppnVal,
                                            CASE WHEN p.payment_method = 1 THEN IFNULL((pob.dpp * (pob.pph_value/100)),0) ELSE IFNULL(inv.total_pph,0) END AS pphVal, 
                                            CASE WHEN p.payment_method = 1 THEN pob.total_amount ELSE inv.amount END AS totalAmount, p.edit_date, p.payment_method, p.labor_id as vendorId,
                                            CASE WHEN p.payment_method = 1 THEN 100 else pp.termin END as termin1
                                    FROM payment p
                                        LEFT JOIN payment_ob pob
                                            ON pob.payment_id = p.payment_id
                                        LEFT JOIN TRANSACTION t
                                            ON t.transaction_id = pob.transaction_id
                                        LEFT JOIN invoice_notim inv 
                                            ON  inv.payment_id = p.payment_id
                                        LEFT JOIN pengajuan_payment pp
                                            ON pp.idPP = inv.idPP
                                        LEFT JOIN unloading_cost uc
                                            ON uc.unloading_cost_id = t.unloading_cost_id
                                    WHERE p.payment_id = {$paymentId}";
                        }else if($rowA->vendor_handling_id > 0){
                            $vendorId = "handling_id";
                            $sqlU = "SELECT  CASE WHEN p.payment_method = 1 THEN t.transaction_id ELSE 0 END AS transactionId, CASE WHEN p.payment_method = 1 THEN ph.qty ELSE pp.total_qty END AS quantity,
                                        CASE WHEN p.payment_method = 1 THEN ph.price ELSE pp.price END AS price, inv.inv_notim_id, inv.idpp,
                                        pp.termin,  CASE WHEN p.payment_method = 1 THEN ph.dpp else inv.dpp END AS dpp, CASE WHEN p.payment_method = 1 THEN IFNULL((ph.dpp * (ph.ppn_value/100)),0) ELSE IFNULL(inv.total_ppn,0) END AS ppnVal,
                                        CASE WHEN p.payment_method = 1 THEN IFNULL((ph.dpp * (ph.pph_value/100)),0) ELSE IFNULL(inv.total_pph,0) END AS pphVal, 
                                        CASE WHEN p.payment_method = 1 THEN ph.total_amount ELSE inv.amount END AS totalAmount, p.edit_date, p.payment_method, p.vendor_handling_id as vendorId,
                                        CASE WHEN p.payment_method = 1 THEN 100 else pp.termin END as termin1
                                    FROM payment p
                                    LEFT JOIN payment_handling ph
                                        ON ph.payment_id = p.payment_id
                                    LEFT JOIN TRANSACTION t
                                        ON t.transaction_id = ph.transaction_id
                                    LEFT JOIN invoice_notim inv 
                                        ON  inv.payment_id = p.payment_id
                                    LEFT JOIN pengajuan_payment pp
                                        ON pp.idPP = inv.idPP
                                    WHERE p.payment_id = {$paymentId}";
                        }else if($rowA->vendor_id > 0){
                            $vendorId = "vendor_id";
                            $sqlU = "SELECT  CASE WHEN p.payment_method = 1 THEN t.transaction_id ELSE 0 END AS transactionId, CASE WHEN p.payment_method = 1 THEN pc.qty ELSE pp.total_qty END AS quantity,
                                        CASE WHEN p.payment_method = 1 THEN pc.price ELSE pp.price END AS price, inv.inv_notim_id, inv.idpp,
                                        pp.termin,  CASE WHEN p.payment_method = 1 THEN pc.dpp else inv.dpp END AS dpp, CASE WHEN p.payment_method = 1 THEN IFNULL((pc.dpp * (pc.ppn_value/100)),0) ELSE IFNULL(inv.total_ppn,0) END AS ppnVal,
                                        CASE WHEN p.payment_method = 1 THEN IFNULL((pc.dpp * (pc.pph_value/100)),0) ELSE IFNULL(inv.total_pph,0) END AS pphVal, 
                                        CASE WHEN p.payment_method = 1 THEN pc.total_amount ELSE inv.amount END AS totalAmount, p.edit_date, p.payment_method, p.vendor_id as vendorId,
                                        CASE WHEN p.payment_method = 1 THEN 100 else pp.termin END as termin1
                                    FROM payment p
                                    LEFT JOIN payment_curah pc
                                        ON pc.payment_id = p.payment_id
                                    LEFT JOIN TRANSACTION t
                                        ON t.transaction_id = pc.transaction_id
                                    LEFT JOIN invoice_notim inv 
                                        ON  inv.payment_id = p.payment_id
                                    LEFT JOIN pengajuan_payment pp
                                        ON pp.idPP = inv.idPP
                                    WHERE p.payment_id = {$paymentId}";
                        }else if($rowA->invoice_id > 0 && $rowA->general_vendor_id > 0){
                            $vendorId = "general_vendor_id";
                            $pengajuanId = "pg_id";
                            $invoiceId = "invoice_detail_id";

                            $sqlU = "SELECT  0 AS transactionId, invd.qty AS quantity, invd.price AS price,  invd.termin AS termin1,  invd.invoice_detail_id AS inv_notim_id, pg.pengajuan_general_id AS idpp,
                                        invd.amount AS dpp, invd.ppn AS ppnVal, invd.pph AS pphVal, 
                                        ((invd.amount + invd.ppn) - invd.pph) AS totalAmount, p.edit_date, p.payment_method, p.general_vendor_id AS vendorId
                                    FROM payment p
                                    LEFT JOIN invoice inv
                                        ON inv.invoice_id = p.invoice_id
                                    LEFT JOIN invoice_detail invd
                                        ON invd.invoice_id = inv.invoice_id
                                    LEFT JOIN pengajuan_general pg
                                        ON pg.invoice_id = inv.invoice_id
                                    WHERE p.payment_id = {$paymentId}";
                        }
                        $resultU = $myDatabase->query($sqlU, MYSQLI_STORE_RESULT);
                        if($resultU !== false && $resultU->num_rows > 0) {
                            while($rowU = $resultU->fetch_object()) {
                                $sqlT = "INSERT INTO temp_payment_return (payment_id, payment_method, transaction_id, {$pengajuanId}, {$invoiceId},  {$vendorId}, qty, price, termin, 
                                            amount, ppn_value, pph_value, total_amount, entry_date, entry_by, return_date) 
                                        VALUES ({$paymentId}, {$rowU->payment_method}, {$rowU->transactionId}, {$rowU->idpp}, {$rowU->inv_notim_id}, {$rowU->vendorId}, {$rowU->quantity}, 
                                            {$rowU->price}, {$rowU->termin1}, {$rowU->dpp}, {$rowU->ppnVal}, {$rowU->pphVal}, {$rowU->totalAmount}, 
                                                STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),  {$_SESSION['userId']}, '{$rowU->edit_date}')";
                                $resultT = $myDatabase->query($sqlT, MYSQLI_STORE_RESULT);
                                echo $sqlT;
                            }
                        }
                    }
                
                }
            }
            // echo $sqlU;
            // die();
			 insertGeneralLedger($myDatabase, 'RETURN PAYMENT', "NULL", "NULL", "NULL", "NULL", "NULL", $paymentId);
			insertReportGL($myDatabase, 'RETURN PAYMENT', "NULL", "NULL", "NULL", "NULL", "NULL", $paymentId);

            $sql = "SELECT p.*, b.currency_id AS b_currency_id, con.contract_id, con.contract_type, con.price_converted, con.quantity
                    FROM payment p 
                    INNER JOIN bank b
                        ON b.bank_id = p.bank_id
                    LEFT JOIN stockpile_contract sc
                        ON sc.stockpile_contract_id = p.stockpile_contract_id
                    LEFT JOIN contract con
                        ON con.contract_id = sc.contract_id
                    WHERE p.payment_id = {$paymentId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            
            if($result !== false && $result->num_rows == 1) {
                $row = $result->fetch_object();
                
                if($row->stockpile_contract_id != '') {
                    if($row->contract_type == 'P') {
                        if($row->payment_method == 1) {
                            $sqlUpdate = "UPDATE contract set payment_status = 0 WHERE contract_id = {$row->contract_id}";
                            $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            
                            if($row->original_amount_converted != $row->amount_converted) {
                                $sqlDP = "SELECT p.*, b.currency_id AS b_currency_id 
                                        FROM payment p
                                        INNER JOIN bank b
                                            ON b.bank_id = p.bank_id
                                        WHERE p.stockpile_contract_id = {$row->stockpile_contract_id} 
                                        AND p.payment_method = 2
                                        AND p.payment_status = 0";
                                $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                                if($resultDP !== false && $resultDP->num_rows > 0) {
                                    while($rowDP = $resultDP->fetch_object()) {
                                        $sqlUpdate = "UPDATE payment SET amount = {$rowDP->original_amount}, amount_converted = {$rowDP->original_amount_converted}
                                                    WHERE payment_id = {$rowDP->payment_id}";
                                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                                    }
                                }
                            }
                        }
                    } 
                    
                    // $sqlUpdate = "UPDATE `transaction` set payment_id = NULL where payment_id = {$paymentId}";
                    // $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                }elseif($row->vendor_id != '' || $row->freight_id != '' || $row->labor_id != ''|| $row->general_vendor_id != '' || $row->invoice_id != '') {
                    if($row->vendor_id != '') {
                        $whereProperty = " p.vendor_id = {$row->vendor_id} ";

                        $sqlUpdate = "UPDATE `transaction` set payment_id = NULL where payment_id = {$paymentId}";
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    } elseif($row->freight_id != '') {
                        $whereProperty = " p.freight_id = {$row->freight_id} ";

                        $sqlUpdate = "UPDATE `transaction` set fc_payment_id = NULL where fc_payment_id = {$paymentId}";
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    } elseif($row->labor_id != '') {
                        $whereProperty = " p.labor_id = {$row->labor_id} ";

                        $sqlUpdate = "UPDATE `transaction` set uc_payment_id = NULL where uc_payment_id = {$paymentId}";
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    } elseif($row->general_vendor_id != '') {
                        $whereProperty = " p.general_vendor_id = {$row->general_vendor_id} ";
                    }
                    
                    //  elseif($row->invoice_id != '') {
                    //      $sqlUpdate = "UPDATE invoice set payment_status = 0 WHERE invoice_id = {$row->invoice_id}";
                    //      $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    // }
                    
                    if($row->payment_method == 1) {

                        $takenDP = $row->amount - $row->original_amount;
                        $takenDPConverted = $row->amount_coverted - $row->original_amount_converted;

                        if($takenDP > 0) {
                            $sqlDP = "SELECT p.*, b.currency_id AS b_currency_id 
                                    FROM payment p
                                    INNER JOIN bank b
                                        ON b.bank_id = p.bank_id
                                    WHERE {$whereProperty}
                                    AND p.payment_method = 2
                                    AND .ppayment_status = 0
                                    ORDER BY p.payment_id ASC";
                            $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                            if($resultDP !== false && $resultDP->num_rows > 0) {
                                while($rowDP = $resultDP->fetch_object()) {
                                    if($takenDP > 0) {
                                        if($row->b_currency_id == $rowDP->b_currency_id) {
                                            $amount = $takenDP - $rowDP->original_amount;
                                            $amountConverted = $takenDPConverted - $rowDP->original_amount_converted;
                                            $takenDP = $takenDP - $amount;
                                        } elseif($row->b_currency_id != $rowDP->b_currency_id) {
                                            if($rowDP->b_currency_id == 2) {
                                                $amount = ceil($takenDP / $rowDP->exchange_rate) - $rowDP->original_amount;
                                                $amountConverted = ceil($takenDPConverted / $rowDP->exchange_rate) - $rowDP->original_amount_converted;
                                                $takenDP = $takenDP - ceil($amount * $rowDP->exchange_rate);
                                            } else {
                                                $amount = ceil($takenDP * $rowDP->exchange_rate) - $rowDP->original_amount;
                                                $amountConverted = ceil($takenDPConverted * $rowDP->exchange_rate) - $rowDP->original_amount_converted;
                                                $takenDP = $takenDP - ceil($amount / $rowDP->exchange_rate);
                                            }
                                        } else {
                                            $amount = $takenDP - $rowDP->original_amount;
                                            $amountConverted = $takenDPConverted - $rowDP->original_amount_converted;
                                            $takenDP = $takenDP - $amount;
                                        }

                                        $sqlUpdate = "UPDATE payment SET amount = {$amount}, amount_converted = {$amountConverted}
                                                    WHERE payment_id = {$rowDP->payment_id}";
                                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                                        // echo "AKA" . $sqlUpdate;
                                    }
                                }
                            }
                        }
                    }
                } 
                elseif($row->sales_id != '') {
                    if($row->payment_method == 1) {
                        $sqlUpdate = "UPDATE shipment SET payment_id = NULL WHERE payment_id = {$paymentId}";
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    } elseif($row->payment_method == 2) {
                        $sqlShipment = "SELECT pd.*, sh.dp_amount
                                FROM payment_detail pd 
                                INNER JOIN shipment sh
                                    ON sh.shipment_id = pd.shipment_id
                                WHERE pd.payment_id = {$paymentId}";
                        $resultShipment = $myDatabase->query($sqlShipment, MYSQLI_STORE_RESULT);
                        if($resultShipment !== false && $resultShipment->num_rows > 0) {
                            while($rowShipment = $resultShipment->fetch_object()) {
                                $newDP = $rowShipment->dp_amount - $rowShipment->amount_converted;
                                
                                $sqlUpdate = "UPDATE shipment SET dp_amount = {$newDP} WHERE shipment_id = {$rowShipment->shipment_id}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            }
                        }
                    }
                }
            }
			
            //add by yeni
            $sqlA = "SELECT * FROM logbook_new WHERE payment_id = {$paymentId}";
            $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
            if($resultA !== false && $resultA->num_rows > 0) {
                $rowA = $resultA->fetch_object();
                if($rowA->internalTf_id != ''){
                    $sqlLog = "UPDATE logbook_new set status1 = 4, payment_id = NULL where payment_id = {$paymentId}";

                    $sqlInv = "UPDATE pengajuan_internaltf set payment_id = NULL where pengajuan_interalTF_id = {$rowA->internalTf_id}";
                    $resultInv = $myDatabase->query($sqlInv, MYSQLI_STORE_RESULT);

                }else if($rowA->ppayment_id != ''){
                    $UpdateInv = "UPDATE invoice_notim SET status_payment = 2, return_remarks = 'RETURN PAYMENT VOUCHER' WHERE payment_id = {$paymentId}";
                    $resultUpdate = $myDatabase->query($UpdateInv, MYSQLI_STORE_RESULT);
                    $sqlLog = "UPDATE logbook_new set status1 = 1, payment_id = NULL where payment_id = {$paymentId}";
                }else if($rowA->pgeneral_id != ''){
                    $UpdateInv = "UPDATE invoice SET payment_status = 2, return_remarks = 'RETURN PAYMENT VOUCHER' WHERE invoice_id = {$rowA->inv_general_id}";
                    $resultUpdate = $myDatabase->query($UpdateInv, MYSQLI_STORE_RESULT);

                    $sqlB = "UPDATE payment SET invoice_id = NULL WHERE payment_id = {$paymentId}";
                    $resultB = $myDatabase->query($sqlB, MYSQLI_STORE_RESULT);

                    $sqlLog = "UPDATE logbook_new set status1 = 1, payment_id = NULL where payment_id = {$paymentId}";
                }
                $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
            }

            $return_value = '|OK|Payment has successfully returned.|' . $paymentId ;
        } else {
            $return_value = '|FAIL|Return payment failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'return_pc') {
    // <editor-fold defaultstate="collapsed" desc="return_payment">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentId = $myDatabase->real_escape_string($_POST['pc_id']);
	$returnPaymentDate = $myDatabase->real_escape_string($_POST['returnPaymentDate']);
    // </editor-fold>
    
    if($paymentId != '') {
        
       $sql = "UPDATE `payment` SET "
                        . "payment_status = 1, "
                        . "edit_by = {$_SESSION['userId']}, "
                        . "edit_date = STR_TO_DATE('$returnPaymentDate', '%d/%m/%Y %H:%i:%s'), "
						. "exec_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . " WHERE payment_id = {$paymentId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
			
			 insertGeneralLedger($myDatabase, 'RETURN PAYMENT', "NULL", "NULL", "NULL", "NULL", "NULL", $paymentId);
			
			
            $sql = "SELECT p.*, b.currency_id AS b_currency_id, con.contract_id, con.contract_type, con.price_converted, con.quantity
                    FROM payment p 
                    INNER JOIN bank b
                        ON b.bank_id = p.bank_id
                    LEFT JOIN stockpile_contract sc
                        ON sc.stockpile_contract_id = p.stockpile_contract_id
                    LEFT JOIN contract con
                        ON con.contract_id = sc.contract_id
                    WHERE p.payment_id = {$paymentId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            
            if($result !== false && $result->num_rows == 1) {
                $row = $result->fetch_object();
                
                if($row->vendor_id != '' || $row->freight_id != '' || $row->labor_id != ''|| $row->general_vendor_id != '' || $row->payment_cash_id != '') {
                    if($row->vendor_id != '') {
                        $whereProperty = " p.vendor_id = {$row->vendor_id} ";

                        $sqlUpdate = "UPDATE `transaction` set payment_id = NULL where payment_id = {$paymentId}";
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    } elseif($row->freight_id != '') {
                        $whereProperty = " p.freight_id = {$row->freight_id} ";

                        $sqlUpdate = "UPDATE `transaction` set fc_payment_id = NULL where fc_payment_id = {$paymentId}";
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    } elseif($row->labor_id != '') {
                        $whereProperty = " p.labor_id = {$row->labor_id} ";

                        $sqlUpdate = "UPDATE `transaction` set uc_payment_id = NULL where uc_payment_id = {$paymentId}";
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    } elseif($row->general_vendor_id != '') {
                        $whereProperty = " p.general_vendor_id = {$row->general_vendor_id} ";
                    } elseif($row->payment_cash_id != '') {
                         $sqlUpdate = "UPDATE payment_cash set payment_cash_status = 2 WHERE payment_id = {$paymentId}";
                         $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    }
                    
                  
                } 
            }
            
           // insertGeneralLedger($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", $paymentId);
            
            $return_value = '|OK|Payment has successfully returned.|' . $paymentId . '|';
			
        } else {
            $return_value = '|FAIL|Return payment failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_payment') {
    // <editor-fold defaultstate="collapsed" desc="return_payment">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    //$paymentId = $myDatabase->real_escape_string($_POST['paymentId']);
    // </editor-fold>
	 $sqlNotim = "SELECT * FROM `payment` WHERE payment_id IN (80439)";
                        $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
                        if($resultNotim !== false && $resultNotim->num_rows > 0) {
                            while($rowNotim = $resultNotim->fetch_object()) {
                                $paymentId = $rowNotim->payment_id;
    
    if($paymentId != '') {
        
        //    insertGeneralLedger($myDatabase, 'RETURN PAYMENT', "NULL", "NULL", "NULL", "NULL", "NULL", $paymentId);
		//    insertReportGL($myDatabase, 'RETURN PAYMENT', "NULL", "NULL", "NULL", "NULL", "NULL", $paymentId);
        insertGeneralLedger($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", "NULL", "NULL", $paymentId);
		   insertReportGL($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", "NULL", "NULL", $paymentId);
            
            $return_value = '|OK|Payment has successfully returned.|';
        
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
	
	}
						}
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_petty_cash') {
    // <editor-fold defaultstate="collapsed" desc="return_payment">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    //$paymentId = $myDatabase->real_escape_string($_POST['paymentId']);
    // </editor-fold>
	 $sqlNotim = "SELECT * FROM `payment` WHERE payment_id IN (54039
)";
                        $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
                        if($resultNotim !== false && $resultNotim->num_rows > 0) {
                            while($rowNotim = $resultNotim->fetch_object()) {
                                $paymentId = $rowNotim->payment_id;
    
    if($paymentId != '') {
        
      
            //insertGeneralLedger($myDatabase, 'PETTY CASH', "NULL", "NULL", "NULL", "NULL", $paymentId);
           insertGeneralLedger($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", "NULL", $paymentId);
            
            $return_value = '|OK|Payment has successfully returned.|';
        
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
	
	}
						}
    
    echo $return_value;
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_accrue') {
    // <editor-fold defaultstate="collapsed" desc="return_payment"a2a>

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    //$invoiceId = 7322;
    // </editor-fold>
    $sqlNotim = "SELECT * FROM `accrue_prediction_detail` WHERE prediction_detail_id IN (386)";
	//$sqlNotim = "SELECT * FROM invoice_detail WHERE entry_date BETWEEN '2020-05-01' AND '2020-05-31'";
    $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
    if ($resultNotim !== false && $resultNotim->num_rows > 0) {
        while ($rowNotim = $resultNotim->fetch_object()) {
            $accrueId = $rowNotim->prediction_detail_id;


            if ($accrueId != '') {
				
				insertGeneralLedger($myDatabase, 'JURNAL ACCRUE', "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", $accrueId);
				insertReportGL($myDatabase, 'JURNAL ACCRUE', "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", $accrueId);

                //insertGeneralLedger($myDatabase, 'INVOICE DETAIL', $prediction_detail_id);
                ///insertReportGL($myDatabase, 'INVOICE DETAIL', $prediction_detail_id);

                /*$sqlA = "SELECT invoice_detail_id FROM invoice_detail
                                WHERE invoice_id = $invoiceId}";
                $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                if ($resultA !== false && $resultA->num_rows > 0) {
                    while ($rowA = $resultA->fetch_object()) {

                        $invoiceId = $rowA->invoice_detail_id;*/

                        //insertReportGL($myDatabase, 'INVOICE DETAIL', $invoiceId);
						
						echo $accrueId;

                 //   }
               // }


                $return_value = '|OK|Jurnal Accrue has successfully Created.|';

            } else {
                $return_value = '|FAIL|Record not found.|';
            }

        }
    }
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_cancel_accrue') {
    // <editor-fold defaultstate="collapsed" desc="return_payment"a2a>

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    //$invoiceId = 7322;
    // </editor-fold>
    $sqlNotim = "SELECT * FROM `accrue_prediction_detail` WHERE prediction_detail_id IN (184)";
	//$sqlNotim = "SELECT * FROM invoice_detail WHERE entry_date BETWEEN '2020-05-01' AND '2020-05-31'";
    $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
    if ($resultNotim !== false && $resultNotim->num_rows > 0) {
        while ($rowNotim = $resultNotim->fetch_object()) {
            $accrueId = $rowNotim->prediction_detail_id;


            if ($accrueId != '') {
				
				insertGeneralLedger($myDatabase, 'JURNAL ACCRUE', "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", $accrueId);
				insertReportGL($myDatabase, 'JURNAL ACCRUE', "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", $accrueId);

                //insertGeneralLedger($myDatabase, 'INVOICE DETAIL', $prediction_detail_id);
                ///insertReportGL($myDatabase, 'INVOICE DETAIL', $prediction_detail_id);

                /*$sqlA = "SELECT invoice_detail_id FROM invoice_detail
                                WHERE invoice_id = $invoiceId}";
                $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                if ($resultA !== false && $resultA->num_rows > 0) {
                    while ($rowA = $resultA->fetch_object()) {

                        $invoiceId = $rowA->invoice_detail_id;*/

                        //insertReportGL($myDatabase, 'INVOICE DETAIL', $invoiceId);
						
						echo $accrueId;

                 //   }
               // }


                $return_value = '|OK|Jurnal Accrue has successfully Created.|';

            } else {
                $return_value = '|FAIL|Record not found.|';
            }

        }
    }
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_contract') {
    // <editor-fold defaultstate="collapsed" desc="return_payment">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    //$contractId = $myDatabase->real_escape_string($_POST['contractId']);
    // </editor-fold>
	
	$sqlNotim = "SELECT * FROM `contract` WHERE contract_id IN (5597,5598)";
                        $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
                        if($resultNotim !== false && $resultNotim->num_rows > 0) {
                            while($rowNotim = $resultNotim->fetch_object()) {
                                $contractId = $rowNotim->contract_id;
                                
								
    if($contractId != '') {
        
      
            
           insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);
            
            $return_value = '|OK|Payment has successfully returned.|';
        
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
							}
						}
    
    
    
    echo $return_value;
    // </editor-fold>
}//surya update-------------------------------------------------------------------------------
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_reject_contract') {
    // <editor-fold defaultstate="collapsed" desc="return_payment">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
	$rejectContractDate = $myDatabase->real_escape_string($_POST['rejectContractDate']);
	
    // </editor-fold>

    if($contractId != '') {

      $sqlUpdate = "UPDATE contract SET contract_status = 2 , `contract_no`=concat(contract_no,'REJECTED') , `po_no`=concat(po_no,'REJECTED'), sync_by = {$_SESSION['userId']}, 
            sync_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), 
			reject_date = STR_TO_DATE('$rejectContractDate', '%d/%m/%Y %H:%i:%s'),
			reject_by = {$_SESSION['userId']}			
					WHERE contract_id = {$contractId}";
      $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
			if($resultUpdate !== false) {

           insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);

            $return_value = '|OK|Payment has successfully rejected.|' . $contractId . '|' ;
			}
			else{
				$return_value = '|FAIL|Record not found.|';
			}
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
}
//surya update-------------------------------------------------------------

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_invoice') {
    // <editor-fold defaultstate="collapsed" desc="jurnal_invoice">
    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    //$invoiceId = 7322;
    // </editor-fold>
    $sqlNotim = "SELECT * FROM `invoice_detail` WHERE invoice_detail_id IN (66200, 66199)";
    //$sqlNotim = "SELECT * FROM invoice_detail WHERE entry_date BETWEEN '2020-05-01' AND '2020-05-31'";
    $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
    echo $sqlNotim;
    if ($resultNotim !== false && $resultNotim->num_rows > 0) {
        while ($rowNotim = $resultNotim->fetch_object()) {
            $invoiceId = $rowNotim->invoice_detail_id;
			$accrueId = $rowNotim->prediction_detail_id;
            if ($invoiceId != '') {
                insertGeneralLedger($myDatabase, 'RETURN INVOICE', $invoiceId);
                insertReportGL($myDatabase, 'RETURN INVOICE', $invoiceId);
				
				if ($accrueId != '') {
							insertGeneralLedger($myDatabase, 'JURNAL ACCRUE', "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", $accrueId);
							insertReportGL($myDatabase, 'JURNAL ACCRUE', "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", $accrueId);
					}
						
							
							
                  
                $return_value = '|OK|Invoice has successfully Created.|';

            } else {
                $return_value = '|FAIL|Record not found.|';
            }

        }
    }
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_invoice_return') {
    // <editor-fold defaultstate="collapsed" desc="return_payment">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
   $sqlNotim = "SELECT * FROM `invoice_detail` WHERE invoice_detail_id IN
                    (13802

)";
                        $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
                        if($resultNotim !== false && $resultNotim->num_rows > 0) {
                            while($rowNotim = $resultNotim->fetch_object()) {
                                $invoiceId = $rowNotim->invoice_detail_id;
    
                      
                            
    if($invoiceId != '') {
              
			insertGeneralLedger($myDatabase, 'RETURN INVOICE', $invoiceId);
            
            $return_value = '|OK|Invoice has successfully Created.|';
        
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
							}
						}
							
    
    echo $return_value;
    // </editor-fold>
}
	elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_notim') {
		// <editor-fold defaultstate="collapsed" desc="return_payment">
		
		$return_value = '';		
		//$sqlNotim = "SELECT * FROM `transaction` WHERE slip_no IN ('MAR-19-0000002195','MAR-19-0000002196')";
		$sqlNotim = "SELECT * FROM `transaction` WHERE transaction_id IN 
        (
            452742
       )";						
		$resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
		    if($resultNotim !== false && $resultNotim->num_rows > 0) {
			    while($rowNotim = $resultNotim->fetch_object()) {
				        $transactionId = $rowNotim->transaction_id;
                        if($transactionId != '') {
                                testGL($myDatabase, $transactionId);
                                //testRgl($myDatabase, $transactionId);
                                $return_value = '|OK|Payment has successfully returned.|';
                                // insertReportGL_notim($myDatabase, 'NOTA TIMBANG', $transactionId);

                        } else {
                            $return_value = '|FAIL|Record not found.|';
                        }
		                testRgl($myDatabase, $transactionId);
                        $sqlTest = "SELECT * FROM general_ledger WHERE transaction_id = {$transactionId}";
                        $resultTest = $myDatabase->query($sqlTest, MYSQLI_STORE_RESULT);


				}
			}
		
		echo $sqlTest;

		// </editor-fold>
	}
	
	elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_invoice_notim') {
    // <editor-fold defaultstate="collapsed" desc="return_payment"a2a>
    //echo 'XX';
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    //$invoiceId = 7322;
    // </editor-fold>
    $sqlNotim = "SELECT * FROM `invoice_notim` WHERE inv_notim_id IN (398,395)";
                        $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
                        if($resultNotim !== false && $resultNotim->num_rows > 0) {
                            while($rowNotim = $resultNotim->fetch_object()) {
                                $invoiceId = $rowNotim->inv_notim_id;
                                
								
    if($invoiceId != '') {
              
			insertGeneralLedger($myDatabase, 'RETURN INVOICE NOTIM', "NULL", $invoiceId);
			insertReportGL($myDatabase, 'RETURN INVOICE NOTIM', "NULL", $invoiceId);
            
            $return_value = '|OK|Invoice has successfully Created.|';
        
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
							}
						}
    echo $return_value;
	
    // </editor-fold>
}
	
	
	
	elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'posting_notim') {
		// <editor-fold defaultstate="collapsed" desc="return_payment">
		
		$return_value = '';
		
		// <editor-fold defaultstate="collapsed" desc="POST variables">
		$transactionId = $myDatabase->real_escape_string($_POST['transactionId']);
		// </editor-fold>
		
		//$sqlNotim = "SELECT * FROM `transaction` WHERE slip_no IN ('MAR-19-0000002195','MAR-19-0000002196')";
		/*$sqlNotim = "SELECT * FROM `transaction` WHERE slip_no IN ('SAM-20-0000000001')";						
							$resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
							if($resultNotim !== false && $resultNotim->num_rows > 0) {
								while($rowNotim = $resultNotim->fetch_object()) {
									$transactionId = $rowNotim->transaction_id;*/

		if($transactionId != '') {
			
				$sql = "UPDATE transaction SET posting_status = 2 WHERE transaction_id = {$transactionId}";
				$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
			   insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
				
				$return_value = '|OK|Notim has successfully posted.|';
			
		} else {
			$return_value = '|FAIL|Record not found.|';
		}
		
								//}
							//}
		
		echo $return_value;
		// </editor-fold>
	}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'susut_notim') {
		// <editor-fold defaultstate="collapsed" desc="return_payment">
		
		$return_value = '';
		
		// <editor-fold defaultstate="collapsed" desc="POST variables">
		//$transactionId = $myDatabase->real_escape_string($_POST['transactionId']);
		// </editor-fold>
		
		//$sqlNotim = "SELECT * FROM `transaction` WHERE slip_no IN ('MAR-19-0000002195','MAR-19-0000002196')";
		$sqlNotim = "SELECT * FROM `transaction` WHERE transaction_id IN (296173)";						
							$resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
							if($resultNotim !== false && $resultNotim->num_rows > 0) {
								while($rowNotim = $resultNotim->fetch_object()) {
									$transactionId = $rowNotim->transaction_id;
									
		if($transactionId != '') {
			
		  
				
			  $sql = "CALL sp_shrink_weight({$transactionId})";
              $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
				$return_value = '|OK|Payment has successfully returned.|';
			
		} else {
			$return_value = '|FAIL|Record not found.|';
		}
		
								}
							}
		
		echo $return_value;
		// </editor-fold>
	} 
     elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'pengajuan_payment1') {
        $return_value = '';
        $boolContinue = false;
        $boolBank = false;
        $boolUpdateTransaction = false;
        $boolContinue2 = true;
        $boolContinue3 = true;
        $tempStamp = '';
        $periodPaymentFrom='';
        $periodPaymentTo='';
        $updateP = '';
        $swift = 'NULL';
        $uploadDocument = true;
        $fromTable = '';
        $fromTable2 = '';
        $dppShrinkPrice = 0;
        $slipNos = "";
        $tempLog = '';
        $tempFile = '';
        $statusDp = 0; // 1 = checked
        $wherePropertyDp = '';

        $idPP = $myDatabase->real_escape_string($_POST['idPP']);
        $paymentMethod = $myDatabase->real_escape_string($_POST['paymentMethod']);
        $paymentType = $myDatabase->real_escape_string($_POST['paymentType']);
        $stockpileLocation = $myDatabase->real_escape_string($_POST['stockpileLocationId']);
        $paymentFor = $myDatabase->real_escape_string($_POST['paymentFor']);
    
        $total_amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalAllPrice']));
        $total_ppn = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalPPn']));
        $total_pph = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalPPh']));
        $ppnStatus = $myDatabase->real_escape_string($_POST['ppnStatus']);
        $pphStatus = $myDatabase->real_escape_string($_POST['pphStatus']);
        $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
        $total_qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalQty']));
        $total_dpp = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalDpp'])); 
        $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));

        //Curah
        $paymentFromCur = $myDatabase->real_escape_string($_POST['paymentFromCur']);
        $paymentToCur = $myDatabase->real_escape_string($_POST['paymentToCur']);
        $stockpileIdCurah = $myDatabase->real_escape_string($_POST['stockpileIdCurah']);
        $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
        $curahBankId =  $myDatabase->real_escape_string($_POST['curahBankId']);  
        $totalDppDpCur =  $myDatabase->real_escape_string($_POST['totalDppDpCur']);  

        //Curah DP
        $stockpileIdCurahDp = $myDatabase->real_escape_string($_POST['stockpileIdCurahDp']);
        $vendorIdCurahDp = $myDatabase->real_escape_string($_POST['vendorIdCurahDp']);
        $contractCurahDp = $myDatabase->real_escape_string($_POST['contractCurahDp']);
        $curahBankDp = $myDatabase->real_escape_string($_POST['curahBankDp']);
        $cDp_ppnId =  $myDatabase->real_escape_string($_POST['taxidPpnC']); 
        $cDp_ppnVal =  $myDatabase->real_escape_string($_POST['ppnC']); 
        $cDp_ppnStatus =  $myDatabase->real_escape_string($_POST['ppnStatusC']); 
        $cDp_pphId =  $myDatabase->real_escape_string($_POST['taxidPphC']); 
        $cDp_pphVal =  $myDatabase->real_escape_string($_POST['pphC']); 
        $cDp_pphStatus =  $myDatabase->real_escape_string($_POST['pphStatusC']); 
        $qtyCurahDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyCurah']));
        $priceCurahDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceCurah']));
        $terminCurahDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminCurah']));

        //Freight Payment
        $freightId_1 = $myDatabase->real_escape_string($_POST['freightId_1']);
        $paymentFromFP = $myDatabase->real_escape_string($_POST['paymentFromFP']);
        $paymentToFP = $myDatabase->real_escape_string($_POST['paymentToFP']);
        $freightBankId_1 = $myDatabase->real_escape_string($_POST['freightBankId_1']);
        $contractIds = $myDatabase->real_escape_string($_POST['contractIds']); 
        $stockpileIdFreight =  $myDatabase->real_escape_string($_POST['stockpileIdFreight']); 
        $grandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal']));
        $totalShrink = $myDatabase->real_escape_string($_POST['totaldppShrink']);	
        $totalShrink2 = $myDatabase->real_escape_string($_POST['totaldppShrink2']);	


        //Freight Settle
        $DppGrandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['DppGrandTotal']));
        $totalDownPayment = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalDownPayment']));
        $totalDppDpFC = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalDppDpFC']));

        //Freight DP
        $stockpileIdFcDp = $myDatabase->real_escape_string($_POST['stockpileIdFcDp']);
        $freightIdFcDp = $myDatabase->real_escape_string($_POST['freightIdFcDp']);
        $freightBankDp = $myDatabase->real_escape_string($_POST['freightBankDp']);
        $supplierIdDp = $myDatabase->real_escape_string($_POST['supplierIdDp']);
        $contractNoDp = $myDatabase->real_escape_string($_POST['contractNoDp']); 
        $fDp_ppnId =  $myDatabase->real_escape_string($_POST['taxidPpn']); 
        $fDp_ppnVal =  $myDatabase->real_escape_string($_POST['ppn']); 
        $fDp_ppnStatus =  $myDatabase->real_escape_string($_POST['ppnStatus']); 
        $fDp_pphId =  $myDatabase->real_escape_string($_POST['taxidPph']); 
        $fDp_pphVal =  $myDatabase->real_escape_string($_POST['pph']); 
        $fDp_pphStatus =  $myDatabase->real_escape_string($_POST['pphStatus']); 
        $qtyFreightDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyFreight']));
        $priceFreightDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceFreight']));
        $terminFreightDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminFreight']));
        $originalAmountDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['originalAmountDp']));

        //Handling Payment
        $stockpileIdHandling = $myDatabase->real_escape_string($_POST['stockpileIdHandling']); 
        $vendorHandlingId =  $myDatabase->real_escape_string($_POST['vendorHandlingId']);
        $paymentFromHP =  $myDatabase->real_escape_string($_POST['paymentFromHP']);
        $paymentToHP =  $myDatabase->real_escape_string($_POST['paymentToHP']);
        $vendorHandlingBankId =  $myDatabase->real_escape_string($_POST['vendorHandlingBankId']);
        $totalDppDpHC = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalDppDpHC']));


        //Handling DP
        $stockpileVhDp = $myDatabase->real_escape_string($_POST['stockpileVhDp']);
        $vendorHandlingDp = $myDatabase->real_escape_string($_POST['vendorHandlingDp']);
        $vendorHandlingBankDp = $myDatabase->real_escape_string($_POST['vendorHandlingBankDp']);
        $contractHandlingDp = $myDatabase->real_escape_string($_POST['contractHandlingDp']); 
        $hDp_ppnId =  $myDatabase->real_escape_string($_POST['taxidPpnH']); 
        $hDp_ppnVal =  $myDatabase->real_escape_string($_POST['ppnH']); 
        $hDp_ppnStatus =  $myDatabase->real_escape_string($_POST['ppnStatusHC']); 
        $hDp_pphId =  $myDatabase->real_escape_string($_POST['taxidPphH']); 
        $hDp_pphVal =  $myDatabase->real_escape_string($_POST['pphH']); 
        $hDp_pphStatus =  $myDatabase->real_escape_string($_POST['pphStatusHC']); 
        $qtyHandlingDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyHandlingDP']));
        $priceHandlingDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceHandlingDP']));
        $terminHandlingDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminHandlingDP']));

        //Unloading Payment
        $paymentFromUP = $myDatabase->real_escape_string($_POST['paymentFromUP']); 
        $paymentToUP =  $myDatabase->real_escape_string($_POST['paymentToUP']);
        $stockpileOB =  $myDatabase->real_escape_string($_POST['stockpileOB']);
        $laborId =  $myDatabase->real_escape_string($_POST['laborId']);
        $laborBankId =  $myDatabase->real_escape_string($_POST['laborBankId']);
        $totalDppDpUC = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalDppDpUC']));


        //Unloading DP
        $stockpileLaborDp = $myDatabase->real_escape_string($_POST['stockpileLaborDp']);
        $laborDp = $myDatabase->real_escape_string($_POST['laborDp']);
        $laborBankDp = $myDatabase->real_escape_string($_POST['laborBankDp']);
        $lDp_ppnId =  $myDatabase->real_escape_string($_POST['taxidPpnOB']); 
        $lDp_ppnVal =  $myDatabase->real_escape_string($_POST['ppnOB']); 
        $lDp_ppnStatus =  $myDatabase->real_escape_string($_POST['ppnStatusOb']); 
        $lDp_pphId =  $myDatabase->real_escape_string($_POST['taxidPphOB']); 
        $lDp_pphVal =  $myDatabase->real_escape_string($_POST['pphOB']); 
        $lDp_pphStatus =  $myDatabase->real_escape_string($_POST['pphStatusOb']); 
        $qtyLaborDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyLabor']));
        $priceLaborDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceLabor']));
        $terminLaborDp = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminLabor']));

        $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
        $bank = $myDatabase->real_escape_string($_POST['bank']);
        $rek = $myDatabase->real_escape_string($_POST['rek']);
        $swift = $myDatabase->real_escape_string($_POST['swift']);
    
        $taxInvoice = $myDatabase->real_escape_string($_POST['taxInvoice']);
        $invoiceNo = $myDatabase->real_escape_string($_POST['invoiceNo']);
        $invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
        $remarks = $myDatabase->real_escape_string($_POST['remarks']);
        $urgent_payment_type = $myDatabase->real_escape_string($_POST['tipeBayar']);
        if($urgent_payment_type == 1){
            $urgent_payment_date = $myDatabase->real_escape_string($_POST['requestPaymentDate1']);
        }else{
            $urgent_payment_date = $myDatabase->real_escape_string($_POST['requestPaymentDate']);
        }
        $settle = $myDatabase->real_escape_string($_POST['settle']);
        if($paymentMethod == 3){
            if($settle == ''){
                $settle = 0;
            }else{
                $settle = $myDatabase->real_escape_string($_POST['settle']);
            }

        }
        $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);

        //FILE
        if (isset($_FILES['file']) && $_FILES['file']['size'] > 0) {
            $allowed = array('png', 'jpg', 'pdf', 'doc', 'docs', 'xls', 'xlsx');
            $fileName = $_FILES['file']['name'];
            $x = explode('.', $fileName);
            $ekstensi = strtolower(end($x));
            $ukuran = $_FILES['file']['size'];
            $file_tmp = $_FILES['file']['tmp_name'];
    
            if (in_array($ekstensi, $allowed) === true) {
    
                $attachmentPath = "./import/pengajuan-notim/.$currentYearMonth.";
                    if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
                        $temp = mkdir($attachmentPath, 0755, TRUE);
                    else
                        $temp = TRUE;
    
                    if ($temp === TRUE) {
                        $attachmentPath .= "/" . date("ymdHis") . "-" . basename($fileName);
                            if (!move_uploaded_file($file_tmp, $attachmentPath)) {
                                echo '|FAIL|Error while uploading file.|';
                                die();
                            }
                    } else {
                        echo '|FAIL|Error while creating directory.|';
                        die();
                    }
    
                
            } else {
                echo '|FAIL|EKSTENSI FILE YANG DI UPLOAD TIDAK DI PERBOLEHKAN.|';
                die();
            }
        } else {
            $attachmentPath = 'NULL';
            $uploadDocument = false;
        }

        //CURAH
        if($paymentFor == 1) {  
            $vendorHandlingId = 0;
            $freightId = 0;
            $laborId = 0;
            $totalShrink2 = 0;
            $totalShrink = 0;

            if($paymentMethod != 2 && $stockpileIdCurah != '' && $vendorId != '') 
            {
                $periodPaymentFrom=$paymentFromCur;
                $periodPaymentTo=$paymentToCur;
                $stockpileId = $stockpileIdCurah;
                $vendorBank = $curahBankId;
                $total_amount = $total_dpp;
                if($paymentMethod == 1){
                    $settle = 0;
                }
                $termin = 0;
                if($total_ppn > 0) {
                    if($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
                if($total_ppn == 0){
                    $ppnStatus = 0;
                }else{
                    $ppnStatus = 1;
                }
            
                if($total_pph == 0){
                    $pphStatus = 0;
                }else{
                    $pphStatus = 1;
                }
            } //DP
            else if($paymentMethod == 2 && $stockpileIdCurahDp != '' && $vendorIdCurahDp != '' && $contractCurahDp != '' && $amount != 0) 
            {
                $boolContinue = true;
                $stockpileId = $stockpileIdCurahDp;
                $vendorBank = $curahBankDp;
                $vendorId = $vendorIdCurahDp;
                $contractIds = $contractCurahDp;
                $total_qty = $qtyCurahDp;
                $totalPrice = $priceCurahDp;
                $termin = $terminCurahDp;
                $total_dpp = $originalAmountDp;
                $total_amount = $originalAmountDp;
                $ppnStatus = $cDp_ppnStatus;
                $pphStatus = $cDp_pphStatus;
                $settle = 0;

                if($ppnStatus == 0){
                    $total_ppn = 0;
                }else{
                    $total_ppn = $total_dpp * ($cDp_ppnVal/100);
                }
    
                if($pphStatus == 0){
                    $total_pph = 0;
                }else{
                    $total_pph = $total_dpp * ($cDp_pphVal/100);  
                }
            }
          }else if($paymentFor == 2) { //FREIGHT
            $vendorHandlingId = 0;
            $laborId = 0;
            //DP
            if($paymentMethod == 2 && $stockpileIdFcDp != '' && $freightIdFcDp != '' && $amount != 0 && $supplierIdDp != '' && $contractNoDp != '' && $freightBankDp != '') {
              
                $boolContinue = true;
                $vendorBank = $freightBankDp;
                $freightId = $freightIdFcDp;
                $total_qty = $qtyFreightDp;
                $totalPrice = $priceFreightDp;
                $total_dpp = $originalAmountDp;
                $totalShrink2 = 0;
                $totalShrink = 0;
                $termin = $terminFreightDp;
                $total_amount = $originalAmountDp;
                $ppnStatus = $fDp_ppnStatus;
                $pphStatus = $fDp_pphStatus;
                $settle = 0;
                $vendorId = $supplierIdDp;
                $contractIds = $contractNoDp;
                $stockpileId = $stockpileIdFcDp;
    
                if($ppnStatus == 0){
                    $total_ppn = 0;
                }else{
                    $total_ppn = $total_dpp * ($fDp_ppnVal/100);
                }
    
                if($pphStatus == 0){
                    $total_pph = 0;
                }else{
                    $total_pph = $total_dpp * ($fDp_pphVal/100);  
                }
           //     echo 'NILAI '.$pphStatus.' || '.$pph. '||' .$ppn. '|| ' .$ppnStatus;
            }else if($paymentMethod != 2 && $stockpileIdFreight != '' && $freightId_1 != '' && $grandTotal >= 0) {
                $periodPaymentFrom = $paymentFromFP;
                $periodPaymentTo = $paymentToFP;
                $vendorId = 0;
                if($total_ppn > 0) {
                    if($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
                $termin = 0;
                $vendorBank = $freightBankId_1;
                $freightId = $freightId_1;
                $vendorFreightId = $vendorFreightId_1;
                if($paymentMethod == 1){
                    $settle = 0;
                }
              
                $stockpileId = $stockpileIdFreight;
                $amount = $grandTotal;
              
                if($total_ppn == 0){
                    $ppnStatus = 0;
                }else{
                    $ppnStatus = 1;
                }
    
                if($total_pph == 0){
                    $pphStatus = 0;
                }else{
                    $pphStatus = 1;
                }
            }
        }else if($paymentFor == 9) { //Handling
            $freightId = 0;
            $vendorId = 0;
            $laborId = 0;
            $totalShrink2 = 0;
            $totalShrink = 0;
            
            // PAYMENT && SETTLE
            if($paymentMethod != 2 && $stockpileIdHandling != '' && $vendorHandlingId != '' && $grandTotal >= 0 ) {
                $periodPaymentFrom = $paymentFromHP;
                $periodPaymentTo = $paymentToHP;
                $stockpileId = $stockpileIdHandling;
                $termin = 0;

                if($total_ppn > 0) {
                    if($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
                $vendorBank = $vendorHandlingBankId;
                $total_amount = $total_dpp;
                if($paymentMethod == 1){
                    $settle = 0;
                }
                
                if($total_ppn == 0){
                    $ppnStatus = 0;
                }else{
                    $ppnStatus = 1;
                }
    
                if($total_pph == 0){
                    $pphStatus = 0;
                }else{
                    $pphStatus = 1;
                }
            } //HANDLING DP
            else if($paymentMethod == 2 && $stockpileVhDp != '' && $vendorHandlingDp != '' && $vendorHandlingBankDp != '' && $amount != 0) {
              
                $boolContinue = true;
                $stockpileId = $stockpileVhDp;
                $vendorHandlingId = $vendorHandlingDp;
                $vendorBank = $vendorHandlingBankDp;
                $total_qty = $qtyHandlingDp;
                $totalPrice = $priceHandlingDp;
                $total_dpp = $originalAmountDp;
                $termin = $terminHandlingDp;
                $total_amount = $originalAmountDp;
                $ppnStatus = $hDp_ppnStatus;
                $pphStatus = $hDp_pphStatus;
                $settle = 0;
                $contractIds = $contractHandlingDp;

                if($ppnStatus == 0){
                    $total_ppn = 0;
                }else{
                    $total_ppn = $total_amount * ($hDp_ppnVal/100);
                }
    
                if($pphStatus == 0){
                    $total_pph = 0;
                }else{
                    $total_pph = $total_amount * ($hDp_pphVal/100);  
                }
            }
        }else if($paymentFor == 3) {// UNLOADING 
            $freightId = 0;
            $vendorId = 0;
            $vendorHandlingId = 0;
            $totalShrink2 = 0;
            $totalShrink = 0;

            if(($paymentMethod == 1 || $paymentMethod == 3 )&& $stockpileOB != '' && $laborId != '' && $grandTotal >= 0 )  {
                $periodPaymentFrom=$paymentFromUP;
                $periodPaymentTo=$paymentToUP;
                $stockpileId = $stockpileOB;
                $totalPrice = $total_dpp;
                $total_amount = $total_dpp;
                $termin = 0;
                if($paymentMethod == 1){
                    $settle = 0;
                }
               
                $vendorBank = $laborBankId;
                $termin = 0;
               
                
                if($total_ppn > 0) {
                    if($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
             
                if($total_ppn == 0){
                    $ppnStatus = 0;
                }else{
                    $ppnStatus = 1;
                }
    
                if($total_pph == 0){
                    $pphStatus = 0;
                }else{
                    $pphStatus = 1;
                }
            }//DP
            else if($paymentMethod == 2 && $stockpileLaborDp != '' && $laborDp != '' && $amount != 0){
                $boolContinue = true;
               $stockpileId = $stockpileLaborDp;
               $vendorBank = $laborBankDp;
               $laborId = $laborDp;
               $total_qty = $qtyLaborDp;
               $totalPrice = $priceLaborDp;
               $total_dpp = $originalAmountDp;
               $termin = $terminLaborDp;
               $total_amount = $originalAmountDp;
               $ppnStatus = $lDp_ppnStatus;
                $pphStatus = $lDp_pphStatus;
                $settle = 0;
                if($ppnStatus == 0){
                    $total_ppn = 0;
                }else{
                    $total_ppn = $total_amount * ($lDp_ppnVal/100);
                }
    
                if($pphStatus == 0){
                    $total_pph = 0;
                }else{
                    $total_pph = $total_amount * ($lDp_pphVal/100);  
                }
            }
        }

        if ($_POST['_method'] == 'INSERT') {
            if($idPP == '' && $uploadDocument){
                if($paymentType != '' && $boolContinue && ($attachmentPath == 'NULL' || $attachmentPath != '')) {
                    //Transaction Id
                    if (isset($_POST['checkedSlips'])) {                                            
                        $checks = $_POST['checkedSlips'];
                        for ($i = 0; $i < sizeof($checks); $i++) {
                            if($slipNos == '') {
                                $slipNos .= $checks[$i];
                            } else {
                                $slipNos .= ','. $checks[$i];            
                            }
                        }
                    }

                    //Curah
                    if($paymentFor == 1) {
                        $paymentIds = '';
                        if (isset($_POST['checkedSlipsDP'])) {
                            $checksDP = $_POST['checkedSlipsDP'];
                            for ($i = 0; $i < sizeof($checksDP); $i++) {
                                if($paymentIds == '') {
                                    $paymentIds .= $checksDP[$i];
                                } else {
                                    $paymentIds .= ','. $checksDP[$i];         
                                }
                            }
                        }
                        
                        $wherePropertyDp = " AND p.vendor_id = {$vendorId} AND p.payment_id IN ({$paymentIds})";
                        $statusDp = $paymentIds;

                        $sqlPrice = "SELECT round(t.unit_price,2) as unitPrice FROM TRANSACTION t
                                        LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                                        LEFT JOIN contract con ON con.contract_id = sc.contract_id
                                        WHERE transaction_id IN ({$slipNos}) GROUP BY con.contract_id";
                          //  echo $sqlprice;
                            $resultPrice =  $myDatabase->query($sqlPrice, MYSQLI_STORE_RESULT);    
                            if($resultPrice !== false) {
                                $totalPrice = 0;
                                while($row = $resultPrice->fetch_object()){
                                    $totalPrice = $totalPrice + $row->unitPrice;
                                }
                            }

                            if($paymentMethod == 2){
                                $sqlA = "SELECT vendor_name FROM vendor WHERE vendor_id = {$vendorIdCurahDp}";
                                $resultA =  $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                                if($resultA !== false) {
                                    $rowA = $resultA->fetch_object();
                                    $vendorName = $rowA->freight_supplier;
                                }
                            }
                          
                    } 

                    //FREIGHT
                   else if($paymentFor == 2) {
                        if($paymentMethod != 2){
                            if (isset($_POST['checkedSlipsDP'])) {
                                $checksDP = $_POST['checkedSlipsDP'];
                                for ($i = 0; $i < sizeof($checksDP); $i++) {
                                    if($paymentIds == '') {
                                        $paymentIds .= $checksDP[$i];
                                    } else {
                                        $paymentIds .= ','. $checksDP[$i];
                                    }
                                }
                            }
                            $wherePropertyDp = "  AND p.freight_id = {$freightId_1} AND p.payment_id IN ({$paymentIds})";
                            $statusDp = $paymentIds;
                        

                            $sqlPrice = "SELECT t.freight_price FROM TRANSACTION t
                                        LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                                        LEFT JOIN contract con ON con.contract_id = sc.contract_id
                                        WHERE transaction_id IN ({$slipNos}) GROUP BY con.contract_id";
                            $resultPrice =  $myDatabase->query($sqlPrice, MYSQLI_STORE_RESULT);    
                            if($resultPrice !== false) {
                                $totalPrice = 0;
                                while($row = $resultPrice->fetch_object()){
                                    $totalPrice = $totalPrice + $row->freight_price;
                                }
                            }
                        }

                        if($paymentMethod == 2){
                            $sqlA = "SELECT freight_supplier FROM freight WHERE freight_id = {$freightIdFcDp}";
                            $resultA =  $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                            if($resultA !== false) {
                                $rowA = $resultA->fetch_object();
                                $vendorName = $rowA->freight_supplier;
                            }
                        }
                    }  //HANDLING
                    else if($paymentFor == 9) {
                        $paymentIds = '';
                        if($paymentMethod != 2){
                            if (isset($_POST['checkedSlipsDP'])) {
                                $checksDP = $_POST['checkedSlipsDP'];
                                for ($i = 0; $i < sizeof($checksDP); $i++) {
                                    if($paymentIds == '') {
                                        $paymentIds .= $checksDP[$i];
                                    } else {
                                        $paymentIds .= ','. $checksDP[$i];
                                    }
                                }
                            }
                            $wherePropertyDp = " AND p.vendor_handling_id = {$vendorHandlingId} AND p.payment_id IN ({$paymentIds})";
                            $statusDp = $paymentIds;
                        

                            $sqlPrice = "SELECT t.handling_price FROM TRANSACTION t
                                        LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                                        LEFT JOIN contract con ON con.contract_id = sc.contract_id
                                        LEFT JOIN vendor_handling_cost vhc ON vhc.`handling_cost_id` = t.`handling_cost_id`
                                        WHERE transaction_id IN ({$slipNos}) GROUP BY con.contract_id";
                            $resultPrice =  $myDatabase->query($sqlPrice, MYSQLI_STORE_RESULT);    
                            if($resultPrice !== false) {
                                $totalPrice = 0;
                                while($row = $resultPrice->fetch_object()){
                                    $totalPrice = $totalPrice + $row->handling_price;
                                }
                            }
                        }

                        if($paymentMethod == 2){
                            $sqlA = "SELECT vendor_handling_name FROM vendor_handling WHERE vendor_handling_id = {$vendorHandlingDp}";
                            $resultA =  $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                            if($resultA !== false) {
                                $rowA = $resultA->fetch_object();
                                $vendorName = $rowA->vendor_handling_name;
                            }
                        }

                    }   //UNLOADING
                    else if($paymentFor == 3) {
                        $paymentIds = '';
                        if($paymentMethod != 2){
                            if (isset($_POST['checkedSlipsDP'])) {
                                $checksDP = $_POST['checkedSlipsDP'];
                                for ($i = 0; $i < sizeof($checksDP); $i++) {
                                    if($paymentIds == '') {
                                        $paymentIds .= $checksDP[$i];
                                    } else {
                                        $paymentIds .= ','. $checksDP[$i];         
                                    }
                                }
                            }
                        
                            $wherePropertyDp = " AND p.labor_id = {$laborId} AND p.payment_id IN ({$paymentIds})";
                            $statusDp = $paymentIds;
                        }

                        if($paymentMethod == 2){
                            $sqlA = "SELECT labor_name FROM labor WHERE labor_id = {$laborDp}";
                            $resultA =  $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                            if($resultA !== false) {
                                $rowA = $resultA->fetch_object();
                                $vendorName = $rowA->labor_name;
                            }
                        }

                    } 

                    if(($paymentMethod == 3 && $statusDp != 0) || (($paymentMethod == 1 || $paymentMethod == 2))) {
                        
                        $sql = "INSERT INTO pengajuan_payment(payment_method, payment_type, stockpile_location, stockpile_id, payment_for, vendor_id, vendor_name, vendor_bank_id, 
                                freight_id, vendor_handling_id, labor_id, total_qty, price, total_dpp, total_shrink2, total_shrink, termin, total_amount, currency_id, total_ppn_amount,status_ppn, 
                                total_pph_amount, status_pph, grand_total, tax_invoice, invoice_no, invoice_date, file, remarks, beneficiary,  bank, rek, swift, periodeFrom, periodeTo, entry_date, status, settlement_status, user, urgent_payment_type, urgent_payment_date) 
                                values ({$paymentMethod}, {$paymentType}, {$stockpileLocation}, {$stockpileId}, {$paymentFor}, {$vendorId}, '{$vendorName}', {$vendorBank}, 
                                {$freightId}, {$vendorHandlingId}, {$laborId}, {$total_qty}, {$totalPrice}, {$total_dpp}, {$totalShrink2}, {$totalShrink}, {$termin}, {$total_amount}, 1, {$total_ppn}, {$ppnStatus}, {$total_pph}, {$pphStatus}, {$amount},
                                '{$taxInvoice}', '{$invoiceNo}', STR_TO_DATE('$invoiceDate', '%d/%m/%Y %H:%i:%s'), '{$attachmentPath}', '{$remarks}', '{$beneficiary}', '{$bank}', '{$rek}', '{$swift}', 
                                STR_TO_DATE('{$periodPaymentFrom}', '%d/%m/%Y'),STR_TO_DATE('{$periodPaymentTo}', '%d/%m/%Y'), STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), 0, {$settle}, {$_SESSION['userId']}, {$urgent_payment_type}, STR_TO_DATE('$urgent_payment_date', '%d/%m/%Y %H:%i:%s'))";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);    
                     //  echo " INPUT " . $sql;
                        if($result !== false) {
                            $idPP = $myDatabase->insert_id;
                            $return_value = '|OK|Pengajuan payment  has inserted successfully |';

                            $tempLog = '[INSERT][Pengajuan-OA]'. '['.$idPP.']';
                            $log = "INSERT INTO log_pengajuan_payment(entry_by, entry_date, log, request_payment_date) value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}', STR_TO_DATE('$urgent_payment_date', '%d/%m/%Y %H:%i:%s'))";
                            $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);

                            if($paymentFor == 2 || $paymentFor == 9 || $paymentFor == 1){ //Payment DAN SETTLE
                                $sqlContract ="SELECT contract_id FROM contract WHERE contract_id IN ({$contractIds})";
                                $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);
                              //  echo "Contract ". $sqlContract;
                                if($resultContract->num_rows > 0){
                                    while($rowCon = $resultContract->fetch_object()){
                                        $sql = "INSERT INTO pengajuan_pks_contract(idPP, contract_id) values ({$idPP}, {$rowCon->contract_id})";
                                        $result1 = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    
                                    }
                                }
                            }
                            
//-----------------  ---------------------------------------------------------------PAYMENT & SETTLEMENT-----------------------------------------------------------------------------------------------------------------------
                            if($paymentMethod != 2){ //PAYMENT
                                $totalAvailableAmount = 0;
                                $dppDpAvailable = 0;
                                $tempAvailableDp = 0;
                                
                                $sql22 = "SELECT SUM(amount_converted) AS notimDp FROM payment WHERE payment_id IN ({$paymentIds})  ";
                                    $result22 = $myDatabase->query($sql22, MYSQLI_STORE_RESULT);
                                    if($result22->num_rows == 1) {
                                        $row22 = $result22->fetch_object();
                                        $jumlahDP = $row22->notimDp;
                                        $tempAvailableDp = $jumlahDP;
                                    }

                                $sqlz = "SELECT  sc.stockpile_id, f.freight_rule, fc.freight_id, con.po_no, 
                                    ROUND(CASE WHEN ts.trx_shrink_tolerance_kg > 0 AND ((t.shrink * -1) - ts.trx_shrink_tolerance_kg) > 0 AND (SELECT transaction_id FROM transaction_shrink_weight WHERE transaction_id = t.transaction_id) IS NOT NULL AND t.slip_retur IS NOT NULL THEN ((t.shrink *-1) - ts.trx_shrink_tolerance_kg) *-1
                                            WHEN ts.trx_shrink_tolerance_kg > 0 AND (t.shrink - ts.trx_shrink_tolerance_kg) > 0 AND (SELECT transaction_id FROM transaction_shrink_weight WHERE transaction_id = t.transaction_id) IS NOT NULL THEN t.shrink - ts.trx_shrink_tolerance_kg
                                            WHEN ts.trx_shrink_tolerance_persen > 0 AND ((t.shrink/t.send_weight) * 100 > ts.trx_shrink_tolerance_persen) AND (SELECT transaction_id FROM transaction_shrink_weight WHERE transaction_id = t.transaction_id) IS NOT NULL AND t.slip_retur IS NOT NULL THEN ((t.shrink *-1) - (SELECT weight_persen FROM transaction_shrink_weight WHERE transaction_id = t.transaction_id))*-1
                                            WHEN ts.trx_shrink_tolerance_persen > 0 AND ((t.shrink/t.send_weight) * 100 > ts.trx_shrink_tolerance_persen) AND (SELECT transaction_id FROM transaction_shrink_weight WHERE transaction_id = t.transaction_id) IS NOT NULL THEN t.shrink - (SELECT weight_persen FROM transaction_shrink_weight WHERE transaction_id = t.transaction_id)
                                        ELSE 0 END,10) AS qtyClaim, COALESCE(hsw.amt_claim) as hsw_amt_claim, COALESCE(ts.amt_claim,0) AS amt_claim,
                                    ts.`trx_shrink_claim`,
                                    txpph.tax_id AS pph_tax_id, txpph.tax_value AS pph_tax_value,  txpph.tax_category AS pph_tax_category, 
                                    f.ppn_tax_id, txppn.tax_category AS ppn_tax_category, txppn.tax_value AS ppn_tax_value,
                                    v.vendor_code,v.vendor_name,

                                    -- HANDLING
                                    vhc.vendor_handling_id, v.vendor_code AS vendor_codeH, v.vendor_name AS vendor_nameH, vh.vendor_handling_rule, 
                                    vh.ppn_tax_id AS ppntxidH, txppnH.tax_value AS ppn_tax_valueH, txppnH.tax_category AS ppn_tax_categoryH,
                                    txpphH.tax_id AS pph_tax_idH, txpphH.tax_value AS pph_tax_valueH, txpphH.tax_category AS pph_tax_categoryH, 
                                    
                                    -- UNLOADING
                                    l.ppn_tax_id AS ppn_tx_idL, txppnL.tax_value AS ppn_tax_valueL, txppnL.tax_category AS ppn_tax_categoryL, 
                                    txpphL.tax_id AS pph_tax_idL, txpphL.tax_value AS pph_tax_valueL, txpphL.tax_category AS pph_tax_categoryL, 

                                    -- CURAH
                                    con.vendor_id,con.contract_no,con.po_no, vv.ppn_tax_id as tax_ppn_idC, txppnC.tax_value AS ppn_tax_valueC, txppnC.tax_category AS ppn_tax_categoryC,
                                    txpphC.tax_id AS pph_tax_idC, txpphC.tax_value AS pph_tax_valueC, txpphC.tax_category AS pph_tax_categoryC, 

                                    CASE WHEN t.fc_payment_status = 2 THEN (SELECT MAX(total_amount) FROM payment_oa WHERE transaction_id = t.transaction_id AND payment_method = 3 AND (STATUS != 2 || STATUS != 4)) ELSE 0 END AS split_oa,
                                    CASE WHEN t.fc_payment_status = 2 THEN  (SELECT max(qty) FROM payment_oa WHERE transaction_id = t.transaction_id and payment_method = 3 and status = 0) ELSE 0 END AS qty_oa,
                                    CASE WHEN t.fc_payment_status = 2 THEN (SELECT max(shrink) FROM payment_oa WHERE transaction_id = t.transaction_id and payment_method = 3 and status = 0) ELSE 0 END AS split_shrink,
                                    CASE WHEN t.fc_payment_status = 2 THEN (SELECT max(additional_shrink) FROM payment_oa WHERE transaction_id = t.transaction_id and payment_method = 3 and status = 0) ELSE 0 END AS split_shrink2,

                                    CASE WHEN t.uc_payment_status = 2 THEN (SELECT total_amount FROM payment_ob WHERE transaction_id = t.transaction_id AND payment_method = 3 AND STATUS = 0 ORDER BY payment_ob_id DESC LIMIT 1) ELSE 0 END AS split_ob,

                                    CASE WHEN t.hc_payment_status = 2 THEN (SELECT MAX(total_amount) FROM payment_handling WHERE transaction_id = t.transaction_id AND payment_method = 3 AND (STATUS != 2 || STATUS != 4)) ELSE 0 END AS split_hc,
                                    CASE WHEN t.hc_payment_status = 2 THEN  (SELECT max(qty) FROM payment_handling WHERE transaction_id = t.transaction_id and payment_method = 3 and status = 0) ELSE 0 END AS qty_hc,

                                    CASE WHEN t.curah_payment_status = 2 THEN (SELECT MAX(total_amount) FROM payment_curah WHERE transaction_id = t.transaction_id AND payment_method = 3 AND (STATUS != 2 || STATUS != 4)) ELSE 0 END AS split_curah,
                                    CASE WHEN t.curah_payment_status = 2 THEN  (SELECT max(qty) FROM payment_curah WHERE transaction_id = t.transaction_id and payment_method = 3 and status = 0) ELSE 0 END AS qty_curah,

                                    t.*
                                    FROM TRANSACTION t
                                    LEFT JOIN freight_cost fc ON fc.freight_cost_id = t.freight_cost_id
                                    LEFT JOIN freight f ON f.freight_id = fc.freight_id
                                    LEFT JOIN tax txppn ON txppn.tax_id = f.ppn_tax_id
                                    LEFT JOIN tax txpph ON txpph.tax_id = t.fc_tax_id
                                    LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                                    LEFT JOIN contract con ON con.contract_id = sc.contract_id
                                    LEFT JOIN stockpile s ON s.`stockpile_id` = sc.`stockpile_id`
                                    LEFT JOIN transaction_shrink_weight ts ON t.transaction_id = ts.transaction_id
                                    LEFT JOIN transaction_additional_shrink hsw ON t.transaction_id = hsw.transaction_id
                                    LEFT JOIN vendor_handling_cost vhc ON vhc.handling_cost_id = t.handling_cost_id
                                    LEFT JOIN vendor_handling vh ON vh.vendor_handling_id = vhc.vendor_handling_id
                                    LEFT JOIN tax txppnH ON txppnH.tax_id = vh.ppn_tax_id
                                    LEFT JOIN tax txpphH ON txpphH.tax_id = vh.pph_tax_id
                                    LEFT JOIN vendor v ON (fc.vendor_id = v.vendor_id OR vhc.vendor_id = v.vendor_id)
                                    LEFT JOIN labor l ON l.labor_id = t.labor_id
                                    LEFT JOIN tax txppnL ON txppnL.tax_id = l.ppn_tax_id
                                    LEFT JOIN tax txpphL ON txpphL.tax_id = t.uc_tax_id  
                                    LEFT JOIN vendor vv ON vv.vendor_id = con.vendor_id
                                    LEFT JOIN tax txppnC ON txppnC.tax_id = vv.ppn_tax_id
                                    LEFT JOIN tax txpphC ON txpphC.tax_id = t.curah_tax_id
                                    WHERE t.`transaction_id` IN ({$slipNos})";
                                $resultz = $myDatabase->query($sqlz, MYSQLI_STORE_RESULT);  

                               // echo " | SELECT Transaction | " . $sqlz;
                                if($resultz !== false && $resultz->num_rows > 0) {
                                    $totalPPN = 0;
                                    $totalPPh = 0;
                                    $totaldppShrink = 0;
                                    $totalDpp = 0;
                                    while($rowz = $resultz->fetch_object()) {  
                                        if($rowz->qtyClaim != ''){
                                            $qtyClaim = $rowz->qtyClaim;
                                        }else{
                                            $qtyClaim = 0;
                                        } 

                                        if($paymentFor == 2){ //FREIGHT
                                            $dppTotalPrice = 0;
                                            $dppShrinkPrice = 0;
                                            $divShrink = 0;
                                            $percentShrink = 0;
                                            $divShrink2 = 0;
                                            $percentShrink2 = 0;
                                            $divDpp = 0;
                                            $percentDpp = 0;
                                            $fp = 0;
                                            if ($rowz->freight_rule == 1) {
                                                $fq = $rowz->send_weight - $rowz->qty_oa;
                                                $fp = ($rowz->freight_price * $fq) ;
                                                // $fp = ($rowz->freight_price * $fq)- $rowz->split_oa;
                                                $tempOri =$fp;

                                                $originalAmount = $tempOri;
                                                // $fq = $rowz->send_weight;
                                            } else {
                                                $fq = ($rowz->freight_quantity - $rowz->qty_oa);
                                                $fp = ($rowz->freight_price * $fq);	 
                                                // $fp = ($rowz->freight_price * $rowz->quantity)- $rowz->split_oa; // fc.200 * t.7978.1
                                                $tempOri = $fp;
                                                $originalAmount = $tempOri;
                                                // $fq = $rowz->quantity; //7978,10
                                            }

                                            if ($rowz->transaction_date >= '2015-10-05' && $rowz->stockpile_id == 1 && ($rowz->pph_tax_id == 0 || $rowz->pph_tax_id == '')) { //khusus Jambi
                                                $dppTotalPrice = $fp;
                                                $dppShrinkPrice = ($rowz->qtyClaim * $rowz->trx_shrink_claim) - $rowz->split_shrink;
                                                $hswAmtClaim = $rowz->hsw_amt_claim - $rowz->split_shrink2; //susut Luar biasa

                                            } else {
                                                if ($rowz->pph_tax_id == 0 || $rowz->pph_tax_id == '') {
                                                    $dppTotalPrice = $fp;
                                                    $dppShrinkPrice = ($rowz->qtyClaim * $rowz->trx_shrink_claim)-$rowz->split_shrink;
                                                    $hswAmtClaim = $rowz->hsw_amt_claim - $rowz->split_shrink2; //susut Luar biasa

                                                } else {
                                                    if ($rowz->pph_tax_category == 1 && $rowz->transaction_date >= '2015-10-05' && $rowz->stockpile_id == 1) { // Jambi
                                                        $dppTotalPrice = ($fp) / ((100 - $rowz->pph_tax_value) / 100);
                                                        $originalAmount = ($tempOri) / ((100 - $rowz->pph_tax_value) / 100);
                                                        $dppShrinkPrice = (($rowz->qtyClaim * $rowz->trx_shrink_claim) - $rowz->split_shrink) / ((100 - $rowz->pph_tax_value) / 100);
                                                        $hswAmtClaim = $rowz->hsw_amt_claim - $rowz->split_shrink2; //susut Luar biasa

                                                    } else {
                                                        if ($rowz->pph_tax_category == 1) {
                                                            $dppTotalPrice = ($fp) / ((100 - $rowz->pph_tax_value) / 100);
                                                            $originalAmount = ($tempOri)/ ((100 - $rowz->pph_tax_value) / 100);
                                                            $dppShrinkPrice = (($rowz->qtyClaim * $rowz->trx_shrink_claim) - $rowz->split_shrink) / ((100 - $rowz->pph_tax_value) / 100);
                                                            $hswAmtClaim = $rowz->hsw_amt_claim - $rowz->split_shrink2; //susut Luar biasa

                                                        } else {
                                                            $dppTotalPrice = $fp;
                                                            $dppShrinkPrice = ($rowz->qtyClaim * $rowz->trx_shrink_claim) - $rowz->split_shrink;
                                                            $hswAmtClaim = $rowz->hsw_amt_claim - $rowz->split_shrink2; //susut Luar biasa

                                                        }
                                                    }
                                                }
                                            }

                                            $freightPrice = 0;
                                            if ($rowz->transaction_date >= '2015-10-05' && $rowz->stockpile_id == 1) { //jambi
                                                $freightPrice = $fp;
                                            } else {
                                                $freightPrice = $fp;
                                            }

                                            if($rowz->ppn_tax_id == 0){
                                                $ppnValue = 0;
                                            }else{
                                                $ppnValue = $rowz->ppn_tax_value;
                                            }
                                            if($rowz->pph_tax_id == 0 || $rowz->pph_tax_id == ''){
                                                $pphValue = 0;
                                                $pphId = 0;
                                            }else{
                                                $pphValue = $rowz->pph_tax_value;
                                                $pphId = $rowz->pph_tax_id;
                                            }

                                          //  $dppPrice_dppShrink = $dppTotalPrice - $dppShrinkPrice;
                                           
                                            $dppPrice_dppShrink = $dppTotalPrice - ($dppShrinkPrice + $hswAmtClaim);
                                            $totalOriginalAmount = $originalAmount - ($dppShrinkPrice + $hswAmtClaim);
                                            $divShrink = ($dppShrinkPrice/$dppPrice_dppShrink);
                                            $percentShrink = ($divShrink * 100);
                                            $divShrink2 = ($hswAmtClaim/$dppPrice_dppShrink); //susut luar biasa
                                            $percentShrink2 = ($divShrink2 * 100);
                                            $divDpp = ($dppTotalPrice/$dppPrice_dppShrink);
                                            $percentDpp = ($divDpp*100);

                                            if($settle == 0){
                                                $avaliableQty = 0;
                                                $avaliableQty = ($dppTotalPrice/$rowz->freight_price);
                                                $sqlPayment = "INSERT INTO payment_oa(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                               ." shrink, additional_shrink, total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, old_status, status) "
                                                               ." VALUES({$idPP}, {$rowz->transaction_id},{$paymentMethod}, {$rowz->freight_price}, {$avaliableQty}, {$dppTotalPrice}, "
                                                               ." {$dppShrinkPrice}, {$hswAmtClaim}, {$dppPrice_dppShrink}, {$totalOriginalAmount}, {$rowz->ppn_tax_id}, {$ppnValue}, "
                                                               ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$rowz->fc_payment_status}, 0)";
                                                $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT);  
                                           //     echo " OA || " .$sqlPayment; 
                                               $sql3 = "UPDATE `transaction` SET fc_payment_status = 1 WHERE transaction_id =  {$rowz->transaction_id}";
                                               $result3 = $myDatabase->query($sql3, MYSQLI_STORE_RESULT);
                                                                                      
                                            }else if($settle == 1){
                                                if($tempAvailableDp > 0){ //1250000
                                                    $avaliableQty = 0;
                                                    if ($tempAvailableDp > $dppPrice_dppShrink){ //1250000 > 4193800
                                                        $avaliableQty = ($dppTotalPrice/$rowz->freight_price);
                                                        $sqlPayment = "INSERT INTO payment_oa(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                                        ." shrink, additional_shrink, total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, old_status, status) "
                                                                        ." VALUES({$idPP}, {$rowz->transaction_id},{$paymentMethod}, {$rowz->freight_price}, {$avaliableQty}, {$dppTotalPrice}, "
                                                                        ." {$dppShrinkPrice}, {$hswAmtClaim}, {$dppPrice_dppShrink}, {$totalOriginalAmount}, {$rowz->ppn_tax_id}, {$ppnValue}, "
                                                                        ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),  {$rowz->fc_payment_status}, 0)";
                                                        $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT); 
                                                        $tempAvailableDp = ($tempAvailableDp - $dppPrice_dppShrink);   

                                                        $sql3 = "UPDATE `transaction` SET fc_payment_status = 1 WHERE transaction_id =  {$rowz->transaction_id}";
                                                        $result3 = $myDatabase->query($sql3, MYSQLI_STORE_RESULT);
                                                                        
                                                    }else{
                                                        $QtyTaken = 0;
                                                        $splitAmount = 0;
                                                        $tempDpp = 0;
                                                        $dppTaken = 0;
                                                        $dppShrinkTaken = 0;
                                                        $splitAmount = $tempAvailableDp;  //1250000                                                        
                                                        $dppShrinkTaken = (($percentShrink/100) * $tempAvailableDp);
                                                        $dppShrinkTaken2 = (($percentShrink2/100) * $tempAvailableDp);
                                                        $dppTaken = (($percentDpp/100) * $tempAvailableDp);
                                                        $QtyTaken = ($dppTaken/$rowz->freight_price);
                                                        $sqlPayment = "INSERT INTO payment_oa(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                                        ." shrink, additional_shrink, total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, old_status, status) "
                                                                        ." VALUES({$idPP}, {$rowz->transaction_id},{$paymentMethod}, {$rowz->freight_price}, {$QtyTaken}, {$dppTaken}, "
                                                                        ." {$dppShrinkTaken}, {$dppShrinkTaken2}, {$tempAvailableDp}, {$dppPrice_dppShrink}, {$rowz->ppn_tax_id}, {$ppnValue}, "
                                                                        ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),  {$rowz->fc_payment_status}, 0)";
                                                        $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT); 

                                                        $sql5 = "UPDATE `transaction` SET fc_payment_status = 2 WHERE transaction_id = {$rowz->transaction_id}";
                                                        $result5 = $myDatabase->query($sql5, MYSQLI_STORE_RESULT);
                                                    }
                                                    //$dppTotalPrice
                                                }
                                            }       
                                        } //HANDLING
                                        else if($paymentFor == 9){
                                            $hp = 0;
                                            $dppTotalPrice = 0;
                                            $divDpp = 0;
                                            $percentDpp = 0;
                                            // $hp = ($rowz->handling_price * $rowz->handling_quantity)-$rowz->split_hc;
                                            $hq = $rowz->handling_quantity-$rowz->qty_hc;
                                            $hp = ($rowz->handling_price * $hq);

                                            $tempOri = $hp;
                                            $originalAmount = $tempOri;
                                          
                                            if ($rowz->transaction_date >= '2015-10-05' && $rowz->stockpile_id == 1 && ($rowz->pph_tax_idH == 0 || $rowz->pph_tax_idH == '')) {
                                                $dppTotalPrice = $hp;
                                            } else {
                                                if ($rowz->pph_tax_idH == 0 || $rowz->pph_tax_idH == '') {
                                                    $dppTotalPrice = $hp;
                                                } else {
                                                    if ($rowz->pph_tax_categoryH == 1 && $rowz->transaction_date >= '2015-10-05' && $rowz->stockpile_id == 1) {
                                                        $dppTotalPrice = ($hp) / ((100 - $rowz->pph_tax_valueH) / 100);
                                                        $originalAmount = ($tempOri) / ((100 - $rowz->pph_tax_valueH) / 100);
                                                    } else {
                                                        if ($rowz->pph_tax_categoryH == 1) {
                                                            $dppTotalPrice = ($hp) / ((100 - $rowz->pph_tax_valueH) / 100);
                                                            $originalAmount = ($tempOri) / ((100 - $rowz->pph_tax_valueH) / 100);
                                                        } else {
                                                            $dppTotalPrice = $hp;
                                                        }
                                                    }
                                
                                                }
                                            }
                                            if($rowz->ppntxidH == 0){
                                                $ppnValue = 0;
                                            }else{
                                                $ppnValue = $rowz->ppn_tax_valueH;
                                            }
                                            if($rowz->pph_tax_idH == 0 || $rowz->pph_tax_idH == ''){
                                                $pphValue = 0;
                                                $pphId = 0;
                                            }else{
                                                $pphValue = $rowz->pph_tax_valueH;
                                                $pphId =  $rowz->pph_tax_idH;
                                            }
                                            
                                            $dppPrice_dppShrink = $dppTotalPrice;
                                            $totalOriginalAmount = $originalAmount;
                                            $divDpp = ($dppTotalPrice/$dppPrice_dppShrink);
                                            $percentDpp = ($divDpp*100);

                                            if($settle == 0){
                                                $avaliableQty = ($dppTotalPrice/$rowz->handling_price);
                                                $sqlPayment = "INSERT INTO payment_handling(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                               ."  total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, old_status, status) "
                                                               ." VALUES({$idPP}, {$rowz->transaction_id},{$paymentMethod}, {$rowz->handling_price}, {$avaliableQty}, {$dppTotalPrice}, "
                                                               ." {$dppPrice_dppShrink}, {$totalOriginalAmount}, {$rowz->ppntxidH}, {$ppnValue}, "
                                                               ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$rowz->hc_payment_status}, 0)";
                                                $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT);    
                                                //echo " PAY " .$avaliableQty;        
                                                $sql3 = "UPDATE `transaction` SET hc_payment_status = 1 WHERE transaction_id =  {$rowz->transaction_id}";
                                                $result3 = $myDatabase->query($sql3, MYSQLI_STORE_RESULT); 
                                                                                 
                                            }else if($settle == 1){
                                                if($tempAvailableDp > 0){ //1250000
                                                    $avaliableQty = 0;
                                                    if ($tempAvailableDp > $dppPrice_dppShrink){ //1250000 > 4193800
                                                        $avaliableQty = ($dppTotalPrice/$rowz->handling_price);
                                                        $sqlPayment = "INSERT INTO payment_handling(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                                    ."  total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, old_status, status) "
                                                                    ." VALUES({$idPP}, {$rowz->transaction_id},{$paymentMethod}, {$rowz->handling_price}, {$avaliableQty}, {$dppTotalPrice}, "
                                                                    ." {$dppPrice_dppShrink}, {$totalOriginalAmount}, {$rowz->ppntxidH}, {$ppnValue}, "
                                                                    ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$rowz->hc_payment_status}, 0)";
                                                        $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT); 
                                                        $tempAvailableDp = ($tempAvailableDp - $dppPrice_dppShrink);   

                                                        $sql3 = "UPDATE `transaction` SET hc_payment_status = 1 WHERE transaction_id =  {$rowz->transaction_id}";
                                                        $result3 = $myDatabase->query($sql3, MYSQLI_STORE_RESULT);
                                                                        
                                                    }else{
                                                        $QtyTaken = 0;
                                                        $splitAmount = 0;
                                                        $tempDpp = 0;
                                                        $dppTaken = 0;
                                                        $splitAmount = $tempAvailableDp;  //1250000                                                        
                                                        $dppTaken = (($percentDpp/100) * $tempAvailableDp);
                                                        $QtyTaken = ($dppTaken/$rowz->handling_price);
                                                        $sqlPayment = "INSERT INTO payment_handling(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                                    ."  total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, old_status, status) "
                                                                    ." VALUES({$idPP}, {$rowz->transaction_id},{$paymentMethod}, {$rowz->handling_price}, {$QtyTaken}, {$dppTaken}, "
                                                                    ." {$tempAvailableDp}, {$dppPrice_dppShrink}, {$rowz->ppntxidH}, {$ppnValue}, "
                                                                    ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$rowz->hc_payment_status}, 0)";
                                                        $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT); 

                                                        $sql5 = "UPDATE `transaction` SET hc_payment_status = 2 WHERE transaction_id = {$rowz->transaction_id}";
                                                        $result5 = $myDatabase->query($sql5, MYSQLI_STORE_RESULT);
                                                    }
                                                    //$dppTotalPrice
                                                }

                                            }       
                                        } //UNLOADING
                                        else if($paymentFor == 3){
                                            $dppTotalPrice = 0;
                                            $tempOri = 0;
                                            if ($rowz->pph_tax_idL == 0 || $rowz->pph_tax_idL == '') {
                                                $dppTotalPrice = $rowz->unloading_price - $rowz->split_ob;
                                                $tempOri = $dppTotalPrice;
                                            } else {
                                                if ($rowz->pph_tax_categoryL == 1) {
                                                    $dppTotalPrice = ($rowz->unloading_price - $rowz->split_ob) / ((100 - $rowz->pph_tax_valueL) / 100);
                                                    $originalAmount = $tempOri / ((100 - $rowz->pph_tax_valueL) / 100);
                                                } else {
                                                    $dppTotalPrice = $rowz->unloading_price - $rowz->split_ob;
                                                    $originalAmount =  $tempOri;
                                                }
                                            }

                                            if($rowz->ppn_tx_idL == 0){
                                                $ppnValue = 0;
                                            }else{
                                                $ppnValue = $rowz->ppn_tax_valueL;
                                            }
                                            if($rowz->pph_tax_idL == 0 || $rowz->pph_tax_idL == '' ){
                                                $pphValue = 0;
                                                $pphId = 0;
                                            }else{
                                                $pphValue = $rowz->pph_tax_valueL;
                                                $pphId = $rowz->pph_tax_idL;
                                            }
                                            
                                            $dppPrice_dppShrink = $dppTotalPrice;
                                            $totalOriginalAmount = $originalAmount;

                                            if($settle == 0){
                                                $avaliableQty = 0;
                                                $sqlPayment = "INSERT INTO payment_ob(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                               ."  total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, old_status, status) "
                                                               ." VALUES({$idPP}, {$rowz->transaction_id},{$paymentMethod}, {$rowz->unloading_price}, {$avaliableQty}, {$dppTotalPrice}, "
                                                               ." {$dppPrice_dppShrink}, {$dppPrice_dppShrink}, {$rowz->ppn_tx_idL}, {$ppnValue}, "
                                                               ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$rowz->uc_payment_status}, 0)";
                                                $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT);  

                                                $sql3 = "UPDATE `transaction` SET uc_payment_status = 1 WHERE transaction_id =  {$rowz->transaction_id}";
                                                $result3 = $myDatabase->query($sql3, MYSQLI_STORE_RESULT); 
 
                                                //echo " PAY " .$avaliableQty;                                               
                                            }else if($settle == 1){
                                                if($tempAvailableDp > 0){
                                                    $avaliableQty = 0;
                                                    if ($tempAvailableDp > $dppPrice_dppShrink){
                                                        $avaliableQty = 0;
                                                        $sqlPayment = "INSERT INTO payment_ob(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                            ."  total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, old_status, status) "
                                                            ." VALUES({$idPP}, {$rowz->transaction_id},{$paymentMethod}, {$rowz->unloading_price}, {$avaliableQty}, {$dppTotalPrice}, "
                                                            ." {$dppPrice_dppShrink}, {$dppPrice_dppShrink}, {$rowz->ppn_tx_idL}, {$ppnValue}, "
                                                            ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$rowz->uc_payment_status}, 0)";
                                                        $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT);  
                                                        $tempAvailableDp = ($tempAvailableDp - $dppPrice_dppShrink);   

                                                        $sql3 = "UPDATE `transaction` SET uc_payment_status = 1 WHERE transaction_id =  {$rowz->transaction_id}";
                                                        $result3 = $myDatabase->query($sql3, MYSQLI_STORE_RESULT);
                                                    }else{
                                                        $splitAmount = 0;
                                                        $splitAmount = $tempAvailableDp;  //1250000                                                        
                                                        $sqlPayment = "INSERT INTO payment_ob(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                                ."  total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, old_status, status) "
                                                                ." VALUES({$idPP}, {$rowz->transaction_id},{$paymentMethod}, {$splitAmount}, 0, {$splitAmount}, "
                                                                ." {$splitAmount}, {$dppPrice_dppShrink}, {$rowz->ppn_tx_idL}, {$ppnValue}, "
                                                                ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$rowz->uc_payment_status}, 0)";
                                                        $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT); 

                                                        $sql5 = "UPDATE `transaction` SET uc_payment_status = 2 WHERE transaction_id = {$rowz->transaction_id}";
                                                        $result5 = $myDatabase->query($sql5, MYSQLI_STORE_RESULT);

                                                    }
                                                
                                                }
                                            }
                                        }//CURAH
                                        else if($paymentFor == 1){
                                            $dppTotalPrice = 0;
                                            $unitPrice = 0;
                                            $divDpp = 0;
                                            $percentDpp = 0;
                                            $curahQty = 0;

                                            $curahQty = $rowz->quantity-$rowz->qty_curah;
                                            $unitPrice = round($rowz->unit_price,2);
                                            $cp = $unitPrice * $curahQty;

                                            $tempOri = $cp;
                                         
                                            // echo $unitPrice;
                                            if ($rowz->pph_tax_idC == 0) {
                                                $dppTotalPrice = round($cp);
                                                $originalAmount = $tempOri;
                                            } else {
                                                if ($rowz->pph_tax_categoryC == 1) {
                                                    $dppTotalPrice = ($cp) / ((100 - $rowz->pph_tax_valueC) / 100);
                                                    $originalAmount = ($tempOri) / ((100 - $rowz->pph_tax_valueC) / 100);
                                                } else {
                                                    $dppTotalPrice = ($cp);
                                                    $originalAmount = ($tempOri);

                                                }
                                            }

                                            if($rowz->tax_ppn_idC == 0){
                                                $ppnValue = 0;
                                                $ppnId = 0;
                                            }else{
                                                $ppnValue = $rowz->ppn_tax_valueC;
                                                $ppnId = $rowz->tax_ppn_idC ;
                                            }
                                            if($rowz->pph_tax_idC != 0 || $rowz->pph_tax_idC != ''){
                                                $pphValue = $rowz->pph_tax_valueC;
                                                $pphId = $rowz->pph_tax_idC;
                                            }else{
                                                $pphValue = 0;
                                                $pphId = 0;
                                            }
                                            
                                            $dppPrice_dppShrink = $dppTotalPrice;
                                            $totalOriginalAmount = $originalAmount;
                                            $divDpp = ($dppTotalPrice/$dppPrice_dppShrink);
                                            $percentDpp = ($divDpp*100);

                                            if($settle == 0){
                                                $avaliableQty = $dppTotalPrice/$unitPrice;
                                                $sqlPayment = "INSERT INTO payment_curah(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                               ."  total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, old_status, status) "
                                                               ." VALUES({$idPP}, {$rowz->transaction_id},{$paymentMethod}, {$unitPrice}, {$avaliableQty}, {$dppTotalPrice}, "
                                                               ." {$dppPrice_dppShrink}, {$totalOriginalAmount}, {$ppnId}, {$ppnValue}, "
                                                               ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$rowz->curah_payment_status}, 0)";
                                                $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT);  
                                                
                                                $sql3 = "UPDATE `transaction` SET curah_payment_status = 1 WHERE transaction_id =  {$rowz->transaction_id}";
                                                $result3 = $myDatabase->query($sql3, MYSQLI_STORE_RESULT);

                                           //     echo " PAY " .$sqlPayment;                                               
                                            }else if($settle == 1){
                                                if($tempAvailableDp > 0){ 
                                                    $avaliableQty = 0;
                                                    if ($tempAvailableDp > $dppPrice_dppShrink){ 
                                                        $avaliableQty = ($dppTotalPrice/$unitPrice);
                                                        $sqlPayment = "INSERT INTO payment_curah(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                                    ."  total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, old_status, status) "
                                                                    ." VALUES({$idPP}, {$rowz->transaction_id},{$paymentMethod}, {$unitPrice}, {$avaliableQty}, {$dppTotalPrice}, "
                                                                    ." {$dppPrice_dppShrink}, {$totalOriginalAmount}, {$ppnId}, {$ppnValue}, "
                                                                    ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$rowz->curah_payment_status}, 0)";
                                                        $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT); 
                                                        $tempAvailableDp = ($tempAvailableDp - $dppPrice_dppShrink);   
                                                   //     echo " | KE 1 |" . $sqlPayment;
                                                        $sql3 = "UPDATE `transaction` SET curah_payment_status = 1 WHERE transaction_id =  {$rowz->transaction_id}";
                                                        $result3 = $myDatabase->query($sql3, MYSQLI_STORE_RESULT);
                                                                        
                                                    }else{
                                                        $QtyTaken = 0;
                                                        $splitAmount = 0;
                                                        $tempDpp = 0;
                                                        $dppTaken = 0;
                                                        $splitAmount = $tempAvailableDp;  //1250000                                                        
                                                        $dppTaken = (($percentDpp/100) * $tempAvailableDp);
                                                        $QtyTaken = ($dppTaken/$unitPrice);
                                                        $sqlPayment = "INSERT INTO payment_curah(idpp, transaction_id, payment_method, price, qty, dpp, "
                                                                    ."  total_amount, original_amount, ppn_id, ppn_value, pph_id, pph_value, entry_date, old_status, status) "
                                                                    ." VALUES({$idPP}, {$rowz->transaction_id},{$paymentMethod}, {$unitPrice}, {$QtyTaken}, {$dppTaken}, "
                                                                    ." {$tempAvailableDp}, {$dppPrice_dppShrink}, {$ppnId}, {$ppnValue}, "
                                                                    ." {$pphId}, {$pphValue}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$rowz->curah_payment_status}, 0)";
                                                        $resultPay = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT); 
                                                        //      echo " | KE 2 |" . $sqlPayment;
                                                        $sql5 = "UPDATE `transaction` SET curah_payment_status = 2 WHERE transaction_id = {$rowz->transaction_id}";
                                                        $result5 = $myDatabase->query($sql5, MYSQLI_STORE_RESULT);
                                                    }
                                                  // echo "SLIP " . $resultPay;
                                                }
                                            } 
                                        }
                                    }	
                                }
                            } 
//---------------------------------------------SETTLEMENT---------------------------------------------------------------------------------------------------------------------------------------------
                            //INSERT pengajuan_payment_dp, Update amount_convert, amount di payment jika settle
                            if($paymentMethod == 3 && $statusDp != 0){
                                if($grandTotal <= 0) {
                                    $sql01 = "SELECT p.*, f.pph AS fpph, f.ppn AS fppn, vh.`pph` AS vhpph , vh.ppn as vhppn, v.`ppn` AS vppn, 
                                                l.ppn as lppn, l.pph as lpph, c.`contract_no` AS contractNo, c.`po_no` AS poNo,
                                                (SELECT bank_code FROM bank WHERE bank_id = p.bank_id) AS bank_code, 
                                                (SELECT bank_type FROM bank WHERE bank_id = p.bank_id) AS bank_type,
                                                (SELECT currency_code FROM currency WHERE currency_id = p.currency_id) AS pcur_currency_code,
                                                CASE WHEN p.payment_location = 0 THEN 'HOF'
                                                        ELSE (SELECT stockpile_name FROM stockpile WHERE stockpile_id = p.payment_location) 
                                                    END AS payment_location
                                            FROM `payment` p 
                                            LEFT JOIN freight f ON f.`freight_id` = p.`freight_id` 
                                            LEFT JOIN vendor_handling vh ON vh.`vendor_handling_id` = p.`vendor_handling_id`
                                            LEFT JOIN vendor v ON v.`vendor_id` = p.`vendor_id`
                                            LEFT JOIN labor l on l.labor_id = p.labor_id
                                            LEFT JOIN contract c ON c.`contract_id` = p.`freightContract`
                                            WHERE p.payment_type = {$paymentType}
                                            AND p.payment_method = 2 AND p.payment_status = 0
                                            {$wherePropertyDp}
                                            AND p.amount_converted > 0
                                            AND p.company_id = {$_SESSION['companyId']}
                                            ORDER BY p.amount_converted ASC";
                                    $result = $myDatabase->query($sql01, MYSQLI_STORE_RESULT);
                                //    echo "Dpp Dp " . $sql01 ;
                                    if($result !== false && $result->num_rows > 0) {
                                        $availableDP1 = '';	
                                        while($row = $result->fetch_object()) {
                                        //  echo 'Yeni';
                                            $voucherCode = '';
                                            $concatVoucherCode = '';
                                            $ppn_percent = 0;
                                            $pph_percent = 0;
                                            $availableDP = $total_amount;  //412,190
                                            $voucherCode = $row->payment_location .'/'. $row->bank_code .'/'. $row->pcur_currency_code;
                                            if($row->bank_type == 1) {
                                                $voucherCode .= ' - B';
                                            } elseif($row->bank_type == 2) {
                                                $voucherCode .= ' - P';
                                            } elseif($row->bank_type == 3) {
                                                $voucherCode .= ' - CAS';
                                            }
                                            
                                            if($row->bank_type != 3) {
                                                if($row->payment_type == 1) {
                                                    $voucherCode .= 'RV';
                                                } else {
                                                    $voucherCode .= 'PV';
                                                }
                                            }
                                            $concatVoucherCode = $voucherCode .' # '. $row->payment_no;
                                            if($availableDP > 0) {
                                                $dppTotalTaken = 0;
                                                $totalTaken = 0;
                                                $sqltest = "SELECT SUM(p.amount_converted) AS total_taken, f.pph AS fpph, f.ppn AS fppn, vh.`pph` AS vhpph, 
                                                            v.`ppn` AS vppn, v.pph as vpph, l.ppn AS lppn, l.pph AS lpph
                                                        FROM payment p
                                                        LEFT JOIN freight f ON p.`freight_id` = f.`freight_id` 
                                                        LEFT JOIN vendor_handling vh ON vh.`vendor_handling_id` = p.`vendor_handling_id`
                                                        LEFT JOIN vendor v ON v.`vendor_id` = p.`vendor_id`
                                                        LEFT JOIN labor l ON l.labor_id = p.labor_id
                                                        WHERE payment_id = {$row->payment_id} ORDER BY p.amount_converted ASC";
                                                $resultTaken = $myDatabase->query($sqltest, MYSQLI_STORE_RESULT);
                                              // echo " A " . $sqltest;
                                                if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                                    $rowTaken = $resultTaken->fetch_object();
                                                    $dppTotalTaken = $rowTaken->total_taken;  //200,000
                                                    if($paymentFor == 2){
                                                        $takenPPN = $dppTotalTaken * ($row->fppn/100);
                                                        $takenPPh = $dppTotalTaken * ($row->fpph/100);
                                                        $totalTaken = ($dppTotalTaken + $takenPPN) - $takenPPh;
                                                    }else if($paymentFor == 9){
                                                        $takenPPN = $dppTotalTaken * ($row->vhppn/100);
                                                        $takenPPh = $dppTotalTaken * ($row->vhpph/100);
                                                        $totalTaken = ($dppTotalTaken + $takenPPN) - $takenPPh;
                                                    }else if($paymentFor == 3){
                                                        $takenPPN = $dppTotalTaken * ($row->lppn/100);
                                                        $takenPPh = $dppTotalTaken * ($row->lpph/100);
                                                        $totalTaken = ($dppTotalTaken + $takenPPN) - $takenPPh; 
                                                    }else if($paymentFor == 1){
                                                        $takenPPN = $dppTotalTaken * ($row->vppn/100);
                                                        $takenPPh = $dppTotalTaken * ($row->vpph/100);
                                                        $totalTaken = ($dppTotalTaken + $takenPPN) - $takenPPh; 
                                                    }
                                                    
                                                }
                                                //412,190, //200,000
                                                if($availableDP >= $dppTotalTaken && $availableDP1 == '') { 
                                                    $availableDP1 = $availableDP - $dppTotalTaken; 
                                                  // echo "AA " .$availableDP ." | " . $dppTotalTaken;

                                                    $quantityTaken = 0;
                                                } else if($availableDP >= $dppTotalTaken && $availableDP1 > $dppTotalTaken) {
                                                   
                                                    if($availableDP1 != ''){
                                                        $quantityTaken = $dppTotalTaken - $availableDP1;
                                                    }else{
                                                        $quantityTaken = $dppTotalTaken - $availableDP;	
                                                    }
                                                //    echo "AB " .$availableDP ." | " . $availableDP1 . " | " . $dppTotalTaken;
                                                    
                                                    $availableDP = 0;
                                                    
                                                }else if($availableDP1 < $dppTotalTaken ) {
                                                    if($availableDP1 != ''){
                                                        $quantityTaken = $dppTotalTaken - $availableDP1;
                                                    }else{
                                                        $quantityTaken = $dppTotalTaken - $availableDP;	
                                                    }
                                                    $availableDP = 0;
                                                   // echo " | QRY " . $quantityTaken;
                                                }
                                            }
                                            
                                            $sql2 = "UPDATE payment SET amount = ". $quantityTaken/$row->exchange_rate .", amount_converted = ". $quantityTaken ." 
                                            WHERE payment_id = {$row->payment_id}";
                                            $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                                        //    echo " B " . $sql2;
        
                                            //FOR APPROVE
                                            //  $originalAmount = $row->amount_converted;
                                            if($quantityTaken > 0){
                                                if($paymentFor == 2){
                                                    $dppDpAvailable = $quantityTaken;
                                                    $dppDpSettleValue = $dppTotalTaken - $dppDpAvailable; //13.000.000 - 8.673.900
                                                    $dpPPN = $quantityTaken * ($row->fppn/100);
                                                    $dpPPh = $quantityTaken * ($row->fpph/100);
                                                    $totalAvailableAmount = ($quantityTaken + $dpPPN) - $dpPPh ;
                                                    $settleDp = $totalTaken - $totalAvailableAmount;//(($quantityTaken + $dpPPN)-$dpPPh);
                                                }else if($paymentFor == 9){
                                                    $dppDpAvailable = $quantityTaken;
                                                    $dppDpSettleValue = $dppTotalTaken - $dppDpAvailable;
                                                    $dpPPN = $quantityTaken * ($row->vhppn/100);
                                                    $dpPPh = $quantityTaken * ($row->vhpph/100);
                                                    $totalAvailableAmount = ($quantityTaken + $dpPPN) - $dpPPh ;
                                                    $settleDp = $totalTaken - $totalAvailableAmount;//(($quantityTaken + $dpPPN)-$dpPPh);
                                                }else if($paymentFor == 3){
                                                    $dppDpAvailable = $quantityTaken;
                                                    $dppDpSettleValue = $dppTotalTaken - $dppDpAvailable;
                                                    $dpPPN = $quantityTaken * ($row->lppn/100);
                                                    $dpPPh = $quantityTaken * ($row->lpph/100);
                                                    $totalAvailableAmount = ($quantityTaken + $dpPPN) - $dpPPh ;
                                                    $settleDp = $totalTaken - $totalAvailableAmount;
                                                }else if($paymentFor == 1){
                                                    $dppDpAvailable = $quantityTaken;
                                                    $dppDpSettleValue = $dppTotalTaken - $dppDpAvailable;
                                                    $dpPPN = $quantityTaken * ($row->vppn/100);
                                                    $dpPPh = $quantityTaken * ($row->vpph/100);
                                                    $totalAvailableAmount = ($quantityTaken + $dpPPN) - $dpPPh ;
                                                    $settleDp = $totalTaken - $totalAvailableAmount;
                                                }
                                            }else{
                                                if($paymentFor == 2){
                                                    $dppDpAvailable = $row->amount_converted;
                                                    $dppDpSettleValue = $dppDpAvailable;
                                                    $dpPPN = $row->amount_converted * ($row->fppn/100);
                                                    $dpPPh = $row->amount_converted * ($row->fpph/100);
                                                    $totalAvailableAmount = ($row->amount_converted + $dpPPN) - $dpPPh ;
                                                    $settleDp = $totalAvailableAmount;
                                                }else if($paymentFor == 9){
                                                    $dppDpAvailable = $row->amount_converted;
                                                    $dppDpSettleValue = $dppDpAvailable;
                                                    $dpPPN = $row->amount_converted * ($row->vhppn/100);
                                                    $dpPPh = $row->amount_converted * ($row->vhpph/100);
                                                    $totalAvailableAmount = ($row->amount_converted + $dpPPN) - $dpPPh ;
                                                    $settleDp = $totalAvailableAmount;
                                                }else if($paymentFor == 3){
                                                    $dppDpAvailable = $row->amount_converted;
                                                    $dppDpSettleValue = $dppDpAvailable;
                                                    $dpPPN = $row->amount_converted * ($row->lppn/100);
                                                    $dpPPh = $row->amount_converted * ($row->lpph/100);
                                                    $totalAvailableAmount = ($row->amount_converted + $dpPPN) - $dpPPh ;
                                                    $settleDp = $totalAvailableAmount;
                                                }else if($paymentFor == 1){
                                                    $dppDpAvailable = $row->amount_converted;
                                                    $dppDpSettleValue = $dppDpAvailable;
                                                    $dpPPN = $row->amount_converted * ($row->vppn/100);
                                                    $dpPPh = $row->amount_converted * ($row->vpph/100);
                                                    $totalAvailableAmount = ($row->amount_converted + $dpPPN) - $dpPPh ;
                                                    $settleDp = $totalAvailableAmount;
                                                }
                                            }
        
                                            if($paymentMethod == 3 && $grandTotal <= 0 && $settle == 1){
                                                $totalAvailableAmount = 0;
                                                $dppDpAvailable = 0;
                                                $dpPPh = 0;
                                                $dpPPn = 0;
                                            }

                                            $sqlyn = "INSERT INTO pengajuan_payment_dp(idPP, payment_id, payment_no, voucher_code, po_no, contract_no, "
                                                    . " dpp_dp_settle, dpp_available_amount, dp_ppn_value, dp_pph_value, settle_amount, available_amount, status) "
                                                    . " VALUES ({$idPP}, {$row->payment_id}, '{$row->payment_no}', '{$concatVoucherCode}', '{$row->poNo}', '{$row->contractNo}', {$dppDpSettleValue}, {$dppDpAvailable}, "
                                                    . " {$dpPPN}, {$dpPPh}, {$settleDp}, {$totalAvailableAmount}, 0)";
                                            $resultyn = $myDatabase->query($sqlyn, MYSQLI_STORE_RESULT);
                                            if($resultyn !== false){
                                                $pp_dp_id = $myDatabase->insert_id;
                                            }
                                        }
                                    }
                                } else if($grandTotal > 0) {
                                    $sql0 = "SELECT p.*, f.pph AS fpph, f.ppn AS fppn, vh.`pph` AS vhpph , vh.ppn as vhppn, v.`ppn` AS vppn, 
                                            c.`contract_no` AS contractNo, c.`po_no` AS poNo,  l.ppn as lppn, l.pph as lpph,
                                            (SELECT bank_code FROM bank WHERE bank_id = p.bank_id) AS bank_code, 
                                            (SELECT bank_type FROM bank WHERE bank_id = p.bank_id) AS bank_type,
                                            (SELECT currency_code FROM currency WHERE currency_id = p.currency_id) AS pcur_currency_code,
                                            CASE WHEN p.payment_location = 0 THEN 'HOF'
                                                ELSE (SELECT stockpile_name FROM stockpile WHERE stockpile_id = p.payment_location) 
                                            END AS payment_location
                                            FROM `payment` p 
                                            LEFT JOIN freight f ON f.`freight_id` = p.`freight_id` 
                                            LEFT JOIN vendor_handling vh ON vh.`vendor_handling_id` = p.`vendor_handling_id`
                                            LEFT JOIN vendor v ON v.`vendor_id` = p.`vendor_id`
                                            LEFT JOIN labor l on l.labor_id = p.labor_id
                                            LEFT JOIN contract c ON c.`contract_id` = p.`freightContract`
                                            WHERE p.payment_type = {$paymentType}
                                            AND p.payment_method = 2
                                            {$wherePropertyDp}
                                            AND p.company_id = {$_SESSION['companyId']}
                                            ORDER BY p.amount_converted ASC";
                                    $result = $myDatabase->query($sql0, MYSQLI_STORE_RESULT);
                                      //echo "GET PAYMENT ". $sql0;
                                
                                    if($result !== false && $result->num_rows > 0) {
                                        while($row = $result->fetch_object()) {
                                            $voucherCode = '';
                                            $concatVoucherCode = '';

                                            $voucherCode = $row->payment_location .'/'. $row->bank_code .'/'. $row->pcur_currency_code;
                                            if($row->bank_type == 1) {
                                                $voucherCode .= ' - B';
                                            } elseif($row->bank_type == 2) {
                                                $voucherCode .= ' - P';
                                            } elseif($row->bank_type == 3) {
                                                $voucherCode .= ' - CAS';
                                            }
                                            
                                            if($row->bank_type != 3) {
                                                if($row->payment_type == 1) {
                                                    $voucherCode .= 'RV';
                                                } else {
                                                    $voucherCode .= 'PV';
                                                }
                                            }
                                            $concatVoucherCode = $voucherCode .' # '. $row->payment_no;

                                            if($paymentFor == 2){
                                                $dpPPn = $row->amount_converted * ($row->fppn/100);
                                                $dpPPh = $row->amount_converted * ($row->fpph/100);
                                                $settleDp = ($row->amount_converted + $dpPPn) - $dpPPh ;
                                            }else if($paymentFor == 9){
                                                $dpPPn = $row->amount_converted * ($row->vhppn/100);
                                                $dpPPh = $row->amount_converted * ($row->vhpph/100);
                                                $settleDp = ($row->amount_converted + $dpPPn) - $dpPPh ;
                                            }else if($paymentFor == 3){
                                                $dpPPn = $row->amount_converted * ($row->lppn/100);
                                                $dpPPh = $row->amount_converted * ($row->lpph/100);
                                                $settleDp = ($row->amount_converted + $dpPPn) - $dpPPh ;
                                            }else if($paymentFor == 1){
                                                $dpPPn = $row->amount_converted * ($row->vppn/100);
                                                $dpPPh = $row->amount_converted * ($row->vpph/100);
                                                $settleDp = ($row->amount_converted + $dpPPn) - $dpPPh ;
                                            }
                                            $dppDpSettleValue = $row->amount_converted;
                                            $sqlyn = "INSERT INTO pengajuan_payment_dp(idPP, payment_id, payment_no, voucher_code, po_no, contract_no, "
                                                    . " dpp_dp_settle, dpp_available_amount, dp_ppn_value, dp_pph_value, settle_amount, available_amount, status) "
                                                    ." VALUES ({$idPP}, {$row->payment_id}, '{$row->payment_no}', '{$concatVoucherCode}', '{$row->poNo}', '{$row->contractNo}', "
                                                    . " {$dppDpSettleValue}, 0, {$dpPPn}, {$dpPPh}, {$settleDp}, 0, 0)";
                                            $resultyn = $myDatabase->query($sqlyn, MYSQLI_STORE_RESULT);
                                         //echo "PENGAJUAN DP " . $sqlyn;
            
                                        }
                                    }
                                    $sql123 = "UPDATE `payment` p SET p.amount = 0, p.amount_converted = 0
                                            WHERE p.payment_type = {$paymentType}
                                            AND p.payment_method = 2
                                            {$wherePropertyDp}";
                                    $result = $myDatabase->query($sql123, MYSQLI_STORE_RESULT);
                                } 
                            }
                                    //log_pengajuan_oa
  //------------------------------------------INPUT LOGBOOK DATA-----------------------------------------------------------------------------------------------------------------------------------------
                          
                            if($paymentMethod == 3 && $grandTotal <= 0 ){
                                $sql = "UPDATE pengajuan_payment SET settlement_status = 1 where idpp = {$idPP}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }

                            // if($amount > 0){
                                $sqlLog = "INSERT INTO logbook_new (ppayment_id, type_pengajuan, entry_date, status1, urgent_payment_date) values ({$idPP}, 1, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),0, STR_TO_DATE('$urgent_payment_date', '%d/%m/%Y %H:%i:%s'))";
                                $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
                            // }
                            // echo " SL => " . $sqlLog;
                    } else {
                            $return_value = '|FAIL| Fail to insert data.| ' . $sql;
                        }  
                    }else{
                        $return_value = '|FAIL| Please check Down Payment.| ';
                    }     
                } else {
                    $return_value = '|FAIL| pengajuan payment type/boolContinue is null.| '.$boolContinue;
                }
            }else{
                $return_value = '|FAIL| Dokumen invoice belum di upload.| ';
            }
            echo $return_value;
    } else if($_POST['_method'] == 'UPDATE'){
        $updateDP = '';

        if($attachmentPath != 'NULL'){
            $tempFile = " file = '{$attachmentPath}', ";
        }

        if($paymentMethod == 2){
            $updateDP = "stockpile_id = {$stockpileId},
                        vendor_id = {$vendorId},
                        vendor_bank_id = {$vendorBank},
                        freight_id = {$freightId},
                        vendor_handling_id = {$vendorHandlingId},
                        labor_id = {$laborId},
                        total_qty = {$total_qty},
                        price = {$totalPrice},
                        termin = {$termin},
                        total_amount = {$total_amount},
                        total_ppn_amount = {$total_ppn},
                        status_ppn = {$ppnStatus},
                        total_pph_amount = {$total_pph},
                        status_pph = {$pphStatus},
                        grand_total = {$amount},
                        beneficiary = '{$beneficiary}',
                        bank = '{$bank}',
                        rek = '{$rek}', 
                        swift = '{$swift}', ";

            $sql1 = "UPDATE pengajuan_pks_contract SET contract_id = {$contractIds} WHERE idPP = {$idPP}";
            $result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
        }

        $sql = "UPDATE pengajuan_payment
            SET tax_invoice = '{$taxInvoice}',
                {$updateDP}
                invoice_no = '{$invoiceNo}',
                invoice_date = STR_TO_DATE('$invoiceDate', '%d/%m/%Y %H:%i:%s'),
                urgent_payment_type = {$urgent_payment_type},
                urgent_payment_date = STR_TO_DATE('$urgent_payment_date', '%d/%m/%Y %H:%i:%s'),
                status = 0, email_date = NULL, 
                {$tempFile}
                remarks = '{$remarks}'
            WHERE idPP = {$idPP}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
          

            if($result !== false) {
                $tempLog = '[UPDATE][Pengajuan-OA]'. '['.$idPP.']';
                $log = "INSERT INTO log_pengajuan_payment(entry_by, entry_date, log, request_payment_date) value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}', STR_TO_DATE('$urgent_payment_date', '%d/%m/%Y %H:%i:%s'))";
                $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);

                $LogbooUpdate = "UPDATE logbook_new SET status1 = 0, urgent_payment_date = STR_TO_DATE('$urgent_payment_date', '%d/%m/%Y %H:%i:%s') WHERE ppayment_id = {$idPP}";
                $resultLogbook = $myDatabase->query($LogbooUpdate, MYSQLI_STORE_RESULT);

                // echo " update logbook 1<br> " . $LogbooUpdate;
                $return_value = '|OK|Update successfully. ';
            }else {
                $return_value = '|FAIL| Fail to update data.| ' . $sql;
            }
    }elseif ($_POST['_method'] == 'CANCEL'){
               
        $reject_remarks = $_POST['reject_remarks'];
        $idPP = $_POST['idPP'];
        $paymentMethod = $_POST['paymentMethod'];
        $paymentFor = $_POST['paymentFor'];
        $tableProperty = '';
        $updateProperty = '';
        $logRemaks = '';

         $sql = "UPDATE pengajuan_payment SET reject_remarks = '{$reject_remarks}', reject_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') WHERE idPP = {$idPP}";
         $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
       
         if($result !== false) {
              $updateProperty = 2;
              $logRemaks = '[CANCEL][Pengajuan-OA]';
                $sqlPP = "UPDATE pengajuan_payment SET status = 2  WHERE idPP = {$idPP}"; //UPDATE status Pengajuan Payment
               $resultPP = $myDatabase->query($sqlPP, MYSQLI_STORE_RESULT);

            //IF SETTLE
            if($paymentMethod == 3){
                $sqlxx = "SELECT payment_id, settle_amount, available_amount, dpp_dp_settle, dpp_available_amount FROM pengajuan_payment_dp where idPP = {$idPP}";
                $resultxx = $myDatabase->query($sqlxx, MYSQLI_STORE_RESULT);
                if($resultxx !== false && $resultxx->num_rows > 0) {
                    while($rowxx = $resultxx->fetch_object()) {
                        $amountDp = $rowxx->dpp_dp_settle + $rowxx->dpp_available_amount;
                        $updt = "UPDATE payment SET amount_converted = {$amountDp}, amount = {$amountDp} WHERE payment_id = {$rowxx->payment_id}";
                        $result = $myDatabase->query($updt, MYSQLI_STORE_RESULT);
                    }
                }
                              
                $sqly = "UPDATE pengajuan_payment_dp SET status = {$updateProperty} WHERE idPP = {$idPP}";
                $resulty = $myDatabase->query($sqly, MYSQLI_STORE_RESULT);
            }

            //UPDATE fc_payment_status di table TRANSACTION
            $statusColumn = '';
            if($paymentFor == 2){
                $sqlxy = "SELECT transaction_id, old_status FROM payment_oa where idPP = {$idPP}";
                $tableProperty = "payment_oa";
                $statusColumn = "fc_payment_status";
            }else if($paymentFor == 9){
                $sqlxy = "SELECT transaction_id, old_status FROM payment_handling where idPP = {$idPP}";
                $tableProperty = "payment_handling";
                $statusColumn = "hc_payment_status";

            }else if($paymentFor == 3){
                $sqlxy = "SELECT transaction_id, old_status FROM payment_ob where idPP = {$idPP}";
                $tableProperty = "payment_ob";
                $statusColumn = "uc_payment_status";

            }else if($paymentFor == 1){
                $sqlxy = "SELECT transaction_id, old_status FROM payment_curah where idPP = {$idPP}";
                $tableProperty = "payment_curah";
                $statusColumn = "curah_payment_status";

            }
            $resultxy = $myDatabase->query($sqlxy, MYSQLI_STORE_RESULT);
            if($resultxy !== false && $resultxy->num_rows > 0) {
                while($rowxy = $resultxy->fetch_object()) {
                    $sqlxy1 = "UPDATE TRANSACTION SET {$statusColumn} = {$rowxy->old_status} WHERE transaction_id = {$rowxy->transaction_id}";
                    $resultxy1 = $myDatabase->query($sqlxy1, MYSQLI_STORE_RESULT);
                }
            }     
               
            //Update PENGAJUAN_PKS_CONTRACT IF FREIGHT || HANDLING
            if($paymentFor != 3){
                $sqlx = "UPDATE pengajuan_pks_contract SET status = {$updateProperty} WHERE idPP = {$idPP}";
                $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);
            }
                      
            // UPDATE payment_oa, payment_ob, payment_handling, payment_curah status  = 4 || 2
            $sqlz = "UPDATE {$tableProperty} SET status = {$updateProperty} WHERE idPP = {$idPP}";
            $resultz = $myDatabase->query($sqlz, MYSQLI_STORE_RESULT); 
                  
            $sql1 = "UPDATE `pengajuan_payment` SET status = {$updateProperty} WHERE idPP = {$idPP}";
            $result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
                  
            $sqlLog = "UPDATE logbook_new set status1 = 2 where ppayment_id = {$idPP}";
            $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);

            $tempLog = $logRemaks. '['.$idPP.']';
            $log = "INSERT INTO log_pengajuan_payment(entry_by, entry_date, log ) 
                    value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
            $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
            if($result_log !== false) {
                $log_id = $myDatabase->insert_id;
            }  

            // echo " I I " . $sql . ' || ' . $sqlxy . ' || ' . $sqlxy1 . '||' . $sqlz . '||' . $sqlx;    

            $return_value = '|OK|Returned/Canceled  No.'.$idPP.' has successfully.|' .$testing . '||' .$sql1. '||' .$sql2;
         }else {
             $return_value = '|FAIL|Returned/canceled '. $idPP.' failed.|';
         }
     } 
    echo $return_value;
} 
 elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'approve_invoice_notim') {
        // <editor-fold defaultstate="collapsed" desc="return_payment">
        $return_value = '';
        $vendorAll = '';
        $exchangeRate = 1;
        $uploadDocument = true;
        $whereproperty = '';
        $vendorBankId = '';
    
        $duedate = $myDatabase->real_escape_string($_POST['duedate']);
        $paymentMethod = $myDatabase->real_escape_string($_POST['paymentMethod']);
        $idPP = $myDatabase->real_escape_string($_POST['idPP']);
        $paymentFor = $myDatabase->real_escape_string($_POST['paymentForId']);
        $generatedInvoiceNo = $myDatabase->real_escape_string($_POST['generatedInvoiceNo']);
        $vendorId1 = $myDatabase->real_escape_string($_POST['vendorId']);
        $freightId = $myDatabase->real_escape_string($_POST['freightId_1']);
        $laborId = $myDatabase->real_escape_string($_POST['laborId']);
      //  echo " B " .$laborId;
        $vendorHandlingId = $myDatabase->real_escape_string($_POST['vendorHandlingId']);
        $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
        $dpp = str_replace(",", "", $myDatabase->real_escape_string($_POST['dppamount']));
        $ppn = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalppn']));
        $pph = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalpph']));
        $totalPrice = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalprice']));
        $remarks = str_replace(",", "", $myDatabase->real_escape_string($_POST['remarks'])); 
        $taxInvoice = str_replace(",", "", $myDatabase->real_escape_string($_POST['taxInvoice'])); 
    
        //FreightDownPayment
        $freightIdFcDp = $myDatabase->real_escape_string($_POST['freightIdFcDp']); //currency kosong
        $vendorHandlingDp = $myDatabase->real_escape_string($_POST['vendorHandlingDp']); //currency kosong
        $laborDp = $myDatabase->real_escape_string($_POST['laborDp']);
        $invId = $myDatabase->real_escape_string($_POST['invId']);

        $curahBankId = $myDatabase->real_escape_string($_POST['curahBankId']);
        $curahBankDp = $myDatabase->real_escape_string($_POST['curahBankDp']);
        $freightBankId_1 = $myDatabase->real_escape_string($_POST['freightBankId_1']);
        $freightBankDp = $myDatabase->real_escape_string($_POST['freightBankDp']);
        $laborBankId = $myDatabase->real_escape_string($_POST['laborBankId']);
        $laborBankDp = $myDatabase->real_escape_string($_POST['laborBankDp']);
        $handlingBankId = $myDatabase->real_escape_string($_POST['vendorHandlingBankId']);
        $handlingBankIdDp = $myDatabase->real_escape_string($_POST['vendorHandlingBankDp']);

        $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
        $bankText = $myDatabase->real_escape_string($_POST['bank']);
        $Norek = $myDatabase->real_escape_string($_POST['rek']);
        $swift = $myDatabase->real_escape_string($_POST['swift']);




        //FILE
        if (isset($_FILES['file2']) && $_FILES['file2']['size'] > 0) {
            $allowed = array('png', 'jpg', 'pdf', 'doc', 'docs', 'xls', 'xlsx');
            $fileName = $_FILES['file2']['name'];
            $x = explode('.', $fileName);
            $ekstensi = strtolower(end($x));
            $ukuran = $_FILES['file2']['size'];
            $file_tmp = $_FILES['file2']['tmp_name'];
    
            if (in_array($ekstensi, $allowed) === true) {
    
                $attachmentPath = "./import/pengajuan-bukti-email/";
                    if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
                        $temp = mkdir($attachmentPath, 0755, TRUE);
                    else
                        $temp = TRUE;
    
                    if ($temp === TRUE) {
                        $attachmentPath .= "/" . date("ymdHis") . "-" . basename($fileName);
                        if (!move_uploaded_file($file_tmp, $attachmentPath)) {
                            echo '|FAIL|Error while uploading file.|';
                            die();
                        }
                    } else {
                        echo '|FAIL|Error while creating directory.|';
                        die();
                    }
    
                
            } else {
                echo '|FAIL|EKSTENSI FILE YANG DI UPLOAD TIDAK DI PERBOLEHKAN.|';
                die();
            }
        } else {
            $attachmentPath = 'NULL';
            $uploadDocument = false;
        }
    
        if ($paymentFor == 1) {
            //CURAH
            $freightId = 0;
            $laborId = 0;
            $vendorHandlingId = 0;
            $vendorBankId = $curahBankId;
            if($paymentMethod == 2){
                $vendorBankId = $curahBankDp;
            }
        } else if ($paymentFor == 9) {
            // HandlingC payment
            $laborId = 0;
            $freightId = 0;
            $vendorId1 = 0;
            $vendorBankId = $handlingBankId;
            if($paymentMethod == 2){
                $vendorHandlingId = $vendorHandlingId;
                $vendorBankId = $handlingBankIdDp;
            }
        } else if ($paymentFor == 2) { //FREIGHT
            $laborId = 0;
            $vendorId1 = 0;
            $vendorHandlingId = 0;
            $vendorBankId = $freightBankId_1;
            if ($paymentMethod == 2) {
                //DP
                $freightId = $freightIdFcDp;
                $vendorBankId = $freightBankDp;
             } 
            
        } else if ($paymentFor == 3) {
            // UNLOADING C payment
            $vendorBankId = $laborBankId;
            $freightId = 0;
            $vendorId1 = 0;
            $vendorHandlingId = 0;
            if ($paymentMethod == 2) {
                $vendorBankId = $laborBankDp;
            }
        }
    
        $amountConvert = 0;
        $amountConvert = $amount * $exchangeRate;
        if ($_POST['_method'] == 'INSERT') {
            if ($idPP != '' ) {// && $uploadDocument
                // if($amount > 0){
                //     $statusPayment = 0;
                // }else if($amount <= 0){
                //     $statusPayment = 1;
                // }
                $statusPayment = 0;

                if($invId != ''){
                    $sql = "UPDATE invoice_notim SET idPP = NULL WHERE inv_notim_id = {$invId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);      
                    // echo " A " . $sql;  
                }
            
                $sql = "INSERT INTO invoice_notim (idPP, type_transaction_id, inv_notim_no, vendor_id, freightId, laborId,
                                    vendorHandlingId, dpp, total_ppn, total_pph, amount, amount_converted, file1, entry_date, entry_by, due_date_inv, status_payment, invoice_status )
                            values ({$idPP}, {$paymentFor}, '{$generatedInvoiceNo}', {$vendorId1}, {$freightId}, {$laborId}, {$vendorHandlingId}, {$dpp}, {$ppn}, {$pph}, {$amount},
                                    {$amount}, '{$attachmentPath}', STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']}, 
                                    STR_TO_DATE('{$duedate}', '%d/%m/%Y %H:%i:%s'), {$statusPayment}, 1)";
          
              $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
              
                if($result !== false) {
                    $inv_notim_id = $myDatabase->insert_id;
                    $invoiceId = $inv_notim_id;			
                    
                    // if($amount <= 0){
                    //     $sqlPP = "UPDATE pengajuan_payment SET status = 3, remarks = '{$remarks}', tax_invoice = '{$taxInvoice}'
                    //             WHERE idPP = {$idPP}"; //UPDATE status Pengajuan Payment
                    //     $resultPP = $myDatabase->query($sqlPP, MYSQLI_STORE_RESULT);
                    // }
                    // else if($amount > 0){
                    //     $sqlPP = "UPDATE pengajuan_payment SET status = 1, remarks = '{$remarks}', tax_invoice = '{$taxInvoice}'  WHERE idPP = {$idPP}"; //UPDATE status Pengajuan Payment
                    //     $resultPP = $myDatabase->query($sqlPP, MYSQLI_STORE_RESULT);
                    // }
                    $sqlx = "UPDATE pengajuan_payment SET status = 1, remarks = '{$remarks}', tax_invoice = '{$taxInvoice}',
                             vendor_bank_id = {$vendorBankId}, beneficiary = '{$beneficiary}', bank = '{$bankText}',
                            rek = '{$Norek}', swift = '{$swift}' WHERE idPP = {$idPP}"; 
                    $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);
                // echo $sqlx;
    
                    //SETTLE 50%
                    if($paymentMethod == 3){
                        $sql = "UPDATE pengajuan_payment_dp SET status = 1, inv_notim_id = {$inv_notim_id} WHERE idpp = {$idPP}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }
    
                    if($paymentFor == 2 && $paymentMethod != 2 ){
                        $sqlx = "UPDATE payment_oa SET inv_notim_id = {$inv_notim_id} WHERE idpp = {$idPP}";
                        $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);

                    }else if($paymentFor == 9 && $paymentMethod != 2){
                        $sqlx = "UPDATE payment_handling SET inv_notim_id = {$inv_notim_id} WHERE idpp = {$idPP}";
                        $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);
                    }else if($paymentFor == 3 && $paymentMethod != 2){
                        $sqlx = "UPDATE payment_ob SET inv_notim_id = {$inv_notim_id} WHERE idpp = {$idPP}";
                        $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);
    
                    }else if($paymentFor == 1){
                        $sqlx = "UPDATE payment_curah SET inv_notim_id = {$inv_notim_id} WHERE idpp = {$idPP}";
                        $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);
                    }
    
                    //UPDATE LOGBOOK PKS
        
                    $sqlLog = "UPDATE logbook_new set inv_notim_id = {$inv_notim_id}, status1 = 1 where ppayment_id = {$idPP}";
                    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
    
                    $tempLog = '[INSERT][APPROVE-INVOICE-NOTIM]'. '['.$inv_notim_id.']';
                    $log = "INSERT INTO log_approve_invoice_notim(entry_by, entry_date, log) value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
                    $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
                    if($result_log !== false) {
                        $log_id = $myDatabase->insert_id;
                    }
    
                 //   insertGeneralLedger($myDatabase, 'INVOICE NOTIM', "NULL", $inv_notim_id);
                 //    insertReportGL($myDatabase, 'INVOICE NOTIM', "NULL", $inv_notim_id);
    
                    $return_value = '|OK|Approve Pengajuan Invoice Berhasil|'.$sql;
                }else {
                    $return_value = '|FAIL|Approve Pengajuan Invoice failed.|'.$sql;
                }
            }else {
                $return_value = '|OK|GAGAL, Dokumen belum di upload.|'; 
            }
        }else if ($_POST['_method'] == 'UPDATE') {

            if($attachmentPath != 'NULL'){
                $tempFile = " file1 = '{$attachmentPath}', ";
            }

            $sql1 = "UPDATE invoice_notim
                    SET {$tempFile} due_date_inv = STR_TO_DATE('$duedate', '%d/%m/%Y %H:%i:%s'), invoice_status = 1
                    WHERE idPP = {$idPP}";
            $result1 = $myDatabase->query($sql1, MYSQLI_STORE_RESULT);
            if($result1 !== false) {
                $sqlPP = "UPDATE pengajuan_payment SET remarks = '{$remarks}', tax_invoice = '{$taxInvoice}'  WHERE idPP = {$idPP}"; //UPDATE status Pengajuan Payment
                $resultPP = $myDatabase->query($sqlPP, MYSQLI_STORE_RESULT);

                $return_value = '|OK|Update Success|'.$sql;
            }else{
                $return_value = '|OK|Update Fail|'.$sql;
            }
        }elseif ($_POST['_method'] == 'RETURNED') {
            $reject_remarks = $_POST['reject_remarks'];
            $invId = $_POST['invId'];
            $idPP = $_POST['idPP'];
            $paymentMethod = $_POST['method'];
            $paymentFor = $_POST['paymentFor'];

            $sql = "UPDATE invoice_notim SET payment_id = NULL, invoice_status = 2, return_remarks = '{$reject_remarks}', return_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') WHERE inv_notim_id = {$invId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($result !== false) {
                if($paymentFor == 2 && $paymentMethod != 2 ){
                    $sqlx = "UPDATE payment_oa SET inv_notim_id = NULL, old_inv_id = {$invId} WHERE idpp = {$idPP}";
                    $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);

                }else if($paymentFor == 9 && $paymentMethod != 2){
                    $sqlx = "UPDATE payment_handling SET inv_notim_id = NULL, old_inv_id = {$invId}  WHERE idpp = {$idPP}";
                    $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);
                }else if($paymentFor == 3 && $paymentMethod != 2){
                    $sqlx = "UPDATE payment_ob SET inv_notim_id = NULL, old_inv_id = {$invId}  WHERE idpp = {$idPP}";
                    $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);

                }else if($paymentFor == 1){
                    $sqlx = "UPDATE payment_curah SET inv_notim_id = NULL, old_inv_id = {$invId}  WHERE idpp = {$idPP}";
                    $resultx = $myDatabase->query($sqlx, MYSQLI_STORE_RESULT);
                }

                $sqlLog = "UPDATE logbook_new set inv_notim_id = NULL, status1 = 0 where ppayment_id = {$idPP}";
                $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
                
                // echo " RETRURN " . $sqlx. ' || ' . $sql . ' || ' . $sqlLog;

                $tempLog = '[INSERT][RETURNED-INVOICE-NOTIM]'. '['.$inv_notim_id.']';
                $log = "INSERT INTO log_approve_invoice_notim(entry_by, entry_date, log) value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
                $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
                if($result_log !== false) {
                    $log_id = $myDatabase->insert_id;
                }

                // insertGeneralLedger($myDatabase, 'RETURN INVOICE NOTIM', "NULL", $invId);
                //  insertReportGL($myDatabase, 'RETURN INVOICE NOTIM', "NULL", $invId);	

                $return_value = '|OK|Return Invoice Berhasil|'.$idPP;
            }else{
                $return_value = '|FAIL|Return Invoice failed.|'.$invId;

            }
        }else if ($_POST['_method'] == 'REJECT') {
    
            $reject_remarks = $_POST['reject_remarks'];
            $idPP = $_POST['idPP'];
            $invId = $_POST['invId'];
    
            $sqlUpdate = "UPDATE `pengajuan_payment` SET  status = 4, reject_remarks = '{$reject_remarks}', reject_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),
                             email_date = NULL WHERE idPP = {$idPP}";
            $resultsUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
            //echo $sqlUpdate;
            if($resultsUpdate !== false) {
                $return_value = '|OK|.No.Reject  ' . $reject_id.' has successfully||' .$sqlUpdate;
        
                $sql = "UPDATE invoice_notim SET idPP = NULL WHERE inv_notim_id = {$invId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                // echo "BB" .$sql;
    
                $tempLog = '[REJECT][Pengajuan-OA]'. '['.$idPP.']';
                $log = "INSERT INTO log_pengajuan_payment(entry_by, entry_date, log) 
                        value ({$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$tempLog}')";
                $result_log = $myDatabase->query($log, MYSQLI_STORE_RESULT);
            }else{
                $return_value = '|FAIL|Reject FAIL ||' .$sqlUpdate;
            }   
       }
        echo $return_value;
        
    }elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnalInvNotim') {
        // <editor-fold defaultstate="collapsed" desc="return_payment">
        
        $return_value = '';
        
        $sqlNotim = "SELECT * FROM `invoice_notim` WHERE inv_notim_id IN (78)";
        $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
    //  echo $sqlNotim;
        if($resultNotim !== false && $resultNotim->num_rows > 0) {
            while($rowNotim = $resultNotim->fetch_object()) {
                $invoiceId = $rowNotim->inv_notim_id;
                if($invoiceId != '') {

                   insertGeneralLedger($myDatabase, 'INVOICE NOTIM', "NULL", $invoiceId);
                   insertReportGL($myDatabase, 'INVOICE NOTIM', "NULL", $invoiceId);
                    // insertGeneralLedger($myDatabase, 'RETURN INVOICE NOTIM', $invoiceId);
                    // insertReportGL($myDatabase, 'RETURN INVOICE NOTIM', $invoiceId);

                        $return_value = '|OK|Inv has successfully.|' .$rowNotim->idPP;
                    
                } else {
                    $return_value = '|FAIL|Record not found.|';
                }
            }
        }
        echo $return_value;
        // </editor-fold>
    }elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'internalTF_data') {
        $return_value = '';
        $vendorAll = '';
        $exchangeRate = 1;
        $uploadDocument = true;
        $whereproperty = '';
    
        $paymentMethod = $myDatabase->real_escape_string($_POST['paymentMethod']);
        $paymentFor = $myDatabase->real_escape_string($_POST['paymentFor']);
        $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
        $exchangeRate = $myDatabase->real_escape_string($_POST['exchangeRate']);
        $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
        $stockpile =  $myDatabase->real_escape_string($_POST['stockpile']);
        $stockpileLocation = $myDatabase->real_escape_string($_POST['stockpileLocation']);
        $paymentType = $myDatabase->real_escape_string($_POST['paymentType']);
        $periodeFrom = $myDatabase->real_escape_string($_POST['periodeFrom']);
        $periodeTo = $myDatabase->real_escape_string($_POST['periodeTo']);
        $remarks = $myDatabase->real_escape_string($_POST['remarks']);
        $internalTF_id = $myDatabase->real_escape_string($_POST['internalTF_id']);
        $bankId = $myDatabase->real_escape_string($_POST['bankId']);
        $requestpaymentType = $myDatabase->real_escape_string($_POST['requestpaymentType']);
        if($requestpaymentType == 1){
            $requestPaymentDate = $myDatabase->real_escape_string($_POST['requestPaymentDate1']);
        }else{
            $requestPaymentDate = $myDatabase->real_escape_string($_POST['requestPaymentDate']);
        }
    
        $tempFile = '';
        $reject_remarks = '';
    
        //FILE    
        if (isset($_FILES['file']) && $_FILES['file']['size'] > 0) {
            echo $_FILES['file']['size'] ;
            $allowed = array('png', 'jpg', 'pdf', 'doc', 'docs', 'xls', 'xlsx');
            $fileName = $_FILES['file']['name'];
            $x = explode('.', $fileName);
            $ekstensi = strtolower(end($x));
            $ukuran = $_FILES['file']['size'];
            $file_tmp = $_FILES['file']['tmp_name'];
    
            if (in_array($ekstensi, $allowed) === true) {
    
                $attachmentPath = "./import/dokument-internal-transfer/";
                    if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
                        $temp = mkdir($attachmentPath, 0755, TRUE);
                    else
                        $temp = TRUE;
    
                    if ($temp === TRUE) {
                        $attachmentPath .= "/" . date("ymdHis") . "-" . basename($fileName);
                            if (!move_uploaded_file($file_tmp, $attachmentPath)) {
                                echo '|FAIL|Error while uploading file.|';
                                die();
                            }
                    } else {
                        echo '|FAIL|Error while creating directory.|';
                        die();
                    }
    
                
            } else {
                echo '|FAIL|EKSTENSI FILE YANG DI UPLOAD TIDAK DI PERBOLEHKAN.|';
                die();
            }
        } 
    
        if ($_POST['_method'] == 'INSERT' && $internalTF_id == '') {
                if($amount > 0){
                    $statusPayment = 0;
                }else if($amount <= 0){
                    $statusPayment = 1;
                }
                $sql = "INSERT INTO pengajuan_internalTF (stockpile, payment_method, payment_type, payment_for, periode_from,
                                    periode_to, amount, remarks, file, entry_date, entry_by, bank_id, request_payment_type, request_payment_date)
                            values ({$stockpileLocation}, {$paymentMethod}, {$paymentType}, {$paymentFor}, STR_TO_DATE('$periodeFrom', '%d/%m/%Y %H:%i:%s'), STR_TO_DATE('$periodeTo', '%d/%m/%Y %H:%i:%s'), 
                                    {$amount}, '{$remarks}', '{$attachmentPath}', STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$_SESSION['userId']}, {$bankId}, {$requestpaymentType}, STR_TO_DATE('$requestPaymentDate', '%d/%m/%Y'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                // echo $sql;
    
                if($result !== false) {
                    $internalTF_id = $myDatabase->insert_id;
                    $sqlLog = "INSERT INTO logbook_new (internalTf_id, type_pengajuan, entry_date, status1, urgent_payment_date) 
                                values ({$internalTF_id}, 6, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),0, STR_TO_DATE('$requestPaymentDate', '%d/%m/%Y'))";
                    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);

                    echo " aA " . $sqlLog;

                    $return_value = '|OK|Data internal transfer berhasil di input|'.$sql;
                }else {
                    $return_value = '|FAIL|Data internal transfer gagal di input|'.$sql;
                }
        }
        else if ($_POST['_method'] == 'UPDATE' && $internalTF_id != '') {
            $whereStatus = '';
            if($attachmentPath != ''){
                $tempFile = " file = '{$attachmentPath}', ";
            }
            $sql = "UPDATE pengajuan_internalTF
                    SET {$tempFile}
                    periode_from = STR_TO_DATE('$periodeFrom', '%d/%m/%Y %H:%i:%s'),
                    periode_to = STR_TO_DATE('$periodeTo', '%d/%m/%Y %H:%i:%s'),
                    amount = {$amount},
                    stockpile = {$stockpileLocation},
                    remarks = '{$remarks}',
                    bank_id = {$bankId},
                    request_payment_type = {$requestpaymentType},
                    request_payment_date = STR_TO_DATE('$requestPaymentDate', '%d/%m/%Y'),
                    status = 0
                    WHERE pengajuan_interalTF_id = {$internalTF_id}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        //    echo "UPDATE " . $sql;
            if($result !== false) {
                $return_value = '|OK|Update successfully. ';
                $sqlLog = "UPDATE logbook_new set internalTf_id = {$internalTF_id}, status1 = 0  where internalTf_id = {$internalTF_id}";
                $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);

            }else {
                 $return_value = '|FAIL| Fail to update data.| ' . $sql;
             }
        }
       else if ($_POST['_method'] == 'APPROVED'){
       
            $sql = "UPDATE pengajuan_internalTF
                    SET status = 1, remarks = '{$remarks}', user_HO = {$_SESSION['userId']}, remaks_reject = ''
                    WHERE pengajuan_interalTF_id = {$internalTF_id}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    
            if ($result != false) {
                $return_value = '|OK|Approved  has successfully||' .$sqlUpdate;
            } else {
                $return_value = '|Fail|. Approved  FAIL!|| '.$sql;
    
            }
    
        } 

        else if ($_POST['_method'] == 'REJECT'){
            $reject_remarks = $_POST['reject_remarks'];
       
            $sql = "UPDATE pengajuan_internalTF
                    SET status = 2, remaks_reject = '{$reject_remarks}', user_HO = {$_SESSION['userId']}
                    WHERE pengajuan_interalTF_id = {$internalTF_id}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    
            if ($result != false) {
                    $sqlLog = "UPDATE logbook_new set internalTf_id = {$internalTF_id}, status1 = 4  where internalTf_id = {$internalTF_id}";
                    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);

                    $return_value = '|OK|Reject  has successfully||' .$sqlUpdate;
            } else {
                $return_value = '|Fail|. Reject  FAIL!|| '.$sql;
    
            }
    
        }elseif ($_POST['_method'] == 'CANCEL'){
               
            $reject_remarks = $_POST['reject_remarks'];
            $internalTF_id = $_POST['internalTF_id'];
    
             $sql = "UPDATE pengajuan_internaltf SET status = 2, remaks_reject = '{$reject_remarks}', reject_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') WHERE pengajuan_interalTF_id = {$internalTF_id}";
             $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            //  echo "YENI " . $sql;
             if($result !== false) {	
                $sqlLog = "UPDATE logbook_new set status1 = 2 where internalTf_id = {$internalTF_id}";
                $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
    
                $return_value = '|OK|Returned/Canceled  No.'.$internalTF_id.' has successfully.|';
             }else {
                 $return_value = '|FAIL|Returned/canceled '. $internalTF_id.' failed.|';
             }
         }
        echo $return_value;
    }elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'payment_data_notim') {
        // <editor-fold defaultstate="collapsed" desc="payment_data">
    
        $return_value = '';
        $boolContinue = false;
        $boolBank = false;
        $boolUpdateTransaction = false;
        $boolUpdateShipment = false;
        $boolContinue2 = true;
        $tempStamp = '';
        $periodPaymentFrom='';
        $periodPaymentTo='';
        $paymentId = '';
        $amount2 = 0;
        // <editor-fold defaultstate="collapsed" desc="POST variables">
        $paymentMethod = $myDatabase->real_escape_string($_POST['paymentMethod']);
        $paymentDate = $myDatabase->real_escape_string($_POST['paymentDate']);
        $paymentType = $myDatabase->real_escape_string($_POST['paymentType']);
        $payment_type = $myDatabase->real_escape_string($_POST['payment_type']);
        $bankId = $myDatabase->real_escape_string($_POST['bankId']);
        $paymentFor = $myDatabase->real_escape_string($_POST['paymentFor']);
        $accountId = $myDatabase->real_escape_string($_POST['accountId']);
        $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
        $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
        $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
        $stockpileContractId2 = $myDatabase->real_escape_string($_POST['stockpileContractId2']);
        $stockpileContractId3 = $myDatabase->real_escape_string($_POST['stockpileContractId3']);
        $stockpileId1 = $myDatabase->real_escape_string($_POST['stockpileCurahId']);
        $vendorId1 = $myDatabase->real_escape_string($_POST['invoiceVendorCurahId']);
        $stockpileId2 = $myDatabase->real_escape_string($_POST['stockpileOAId']);
        $freightId = $myDatabase->real_escape_string($_POST['invoiceFreightId']);
        $stockpileId4 = $myDatabase->real_escape_string($_POST['stockpileHandlingId']);
        $vendorHandlingId = $myDatabase->real_escape_string($_POST['invoiceVendorHandlingId']);
        $stockpileId3 = $myDatabase->real_escape_string($_POST['stockpileOBId']);
        $laborId = $myDatabase->real_escape_string($_POST['invoiceLaborId']);
        $customerId = $myDatabase->real_escape_string($_POST['customerId']);
        $salesId = $myDatabase->real_escape_string($_POST['salesId']);
        $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
        $shipmentId1 = $myDatabase->real_escape_string($_POST['shipmentId1']);
        $contractId = $myDatabase->real_escape_string($_POST['contractId']);
        $generalVendorId = $myDatabase->real_escape_string($_POST['gvId']);
        $gvEmail = $myDatabase->real_escape_string($_POST['gvEmail']);

        $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
        $bankCurrencyId = $myDatabase->real_escape_string($_POST['bankCurrencyId']);
        $journalCurrencyId = $myDatabase->real_escape_string($_POST['journalCurrencyId']);
        $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
        $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
        $tempAmount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
        $originalAmount = $amount;

        $totalDpp = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalDpp']));
        $totalAmount = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalAmount']));
        $totalPrice = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalPrice']));
        $downPayment = str_replace(",", "", $myDatabase->real_escape_string($_POST['downPayment']));
        $grandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal']));
        $ppn = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn']));
        $pph = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph']));

        $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
        $qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty']));
        $termin = str_replace(",", "", $myDatabase->real_escape_string($_POST['termin']));
        $fc_ppn_dp = str_replace(",", "", $myDatabase->real_escape_string($_POST['fc_ppn_dp']));
        $ppn1 = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn1']));
        $ppn2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn2']));
        $pph1 = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph1']));
        $ppnInvoice = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppnInvoice']));
        $pphInvoice = str_replace(",", "", $myDatabase->real_escape_string($_POST['pphInvoice']));
        $notes = $myDatabase->real_escape_string($_POST['paymentNotes']);
        $remarks = $myDatabase->real_escape_string($_POST['remarks']);
        $remarks2 = $myDatabase->real_escape_string($_POST['remarks2']);
        $paymentLocation = $myDatabase->real_escape_string($_POST['paymentLocation']);
        $stockpileLocation = $myDatabase->real_escape_string($_POST['stockpileLocation']);
        
        $chequeNo = $myDatabase->real_escape_string($_POST['chequeNo']);
        $chequeNo1 = $myDatabase->real_escape_string($_POST['chequeNo1']);

        $invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
        $invoiceId = $myDatabase->real_escape_string($_POST['invoiceId']);
        $taxInvoice = $myDatabase->real_escape_string($_POST['taxInvoice']);
        $invoiceNo = $myDatabase->real_escape_string($_POST['invoiceNo']);

        $paymentCashId = $paymentFor;
        $slipNos = "";
        $shipmentNos = "";

        $stockpileIdFcDp = $myDatabase->real_escape_string($_POST['stockpileIdFcDp']);
        $stockpileOAId = $myDatabase->real_escape_string($_POST['stockpileOAId']);
        $freightIdFcDp = $myDatabase->real_escape_string($_POST['freightIdFcDp']);
        $invoiceFreightId = $myDatabase->real_escape_string($_POST['invoiceFreightId']);  
        // $bankIdDp = $myDatabase->real_escape_string($_POST['bankIdDp']);
        $FreightbankDp = $myDatabase->real_escape_string($_POST['freightbankDp']);
    
        $vendorBankId = $myDatabase->real_escape_string($_POST['vendorBankId']);
        $stockpileVhDp = $myDatabase->real_escape_string($_POST['stockpileVhDp']);
        $vendorHandlingDp = $myDatabase->real_escape_string($_POST['vendorHandlingDp']);
        $vendorHandlingBankDp = $myDatabase->real_escape_string($_POST['vendorHandlingBankDp']);
        $vendorHandlingBankId = $myDatabase->real_escape_string($_POST['vendorHandlingBankId']);
        $freightBankId = $myDatabase->real_escape_string($_POST['freightBankId']);
        $stockpileLaborDp = $myDatabase->real_escape_string($_POST['stockpileLaborDp']);
        $laborDp = $myDatabase->real_escape_string($_POST['laborDp']);
        $laborBankDp = $myDatabase->real_escape_string($_POST['laborBankDp']);
        $laborBankId = $myDatabase->real_escape_string($_POST['laborBankId']);
        $gvBankId = $myDatabase->real_escape_string($_POST['gvBankId']);
        // $curahBankId = $myDatabase->real_escape_string($_POST['curahBankId']);
        $curahBankDp = $myDatabase->real_escape_string($_POST['curahBankDp']);
        $gvPCBankId = $myDatabase->real_escape_string($_POST['gvPCBankId']);
        $paymentFrom = $myDatabase->real_escape_string($_POST['paymentFrom']);
        $paymentFrom1 = $myDatabase->real_escape_string($_POST['paymentFrom1']);
        $paymentFromUP = $myDatabase->real_escape_string($_POST['paymentFromUP']);
        $paymentFromHP = $myDatabase->real_escape_string($_POST['paymentFromHP']);
        $paymentTo = $myDatabase->real_escape_string($_POST['paymentTo']);
        $paymentTo1 = $myDatabase->real_escape_string($_POST['paymentTo1']);
        $paymentToUP = $myDatabase->real_escape_string($_POST['paymentToUP']);
        $paymentToHP = $myDatabase->real_escape_string($_POST['paymentToHP']);
        $invoiceBankId = $myDatabase->real_escape_string($_POST['invoiceBankId']);
        $invoiceCurrencyId = $myDatabase->real_escape_string($_POST['invoiceCurrencyId']);
        $invoiceKurs = $myDatabase->real_escape_string($_POST['invoiceKurs']);
        $idPP = $myDatabase->real_escape_string($_POST['idPP']);
        $pengajuanInvId = $myDatabase->real_escape_string($_POST['inv_notim_id']);
        $idPG = $myDatabase->real_escape_string($_POST['idPG']);

        $priceDp = $myDatabase->real_escape_string($_POST['priceDp']);  
        $qtyDp = $myDatabase->real_escape_string($_POST['qtyDp']);

        $invoiceOAId = $myDatabase->real_escape_string($_POST['invoiceOAId']);
        $invoiceHandlingId = $myDatabase->real_escape_string($_POST['invoiceHandlingId']);
        $invoiceVendorHandlingId = $myDatabase->real_escape_string($_POST['invoiceVendorHandlingId']);
        $invoiceOBId = $myDatabase->real_escape_string($_POST['invoiceOBId']);
        $invoiceLaborId = $myDatabase->real_escape_string($_POST['invoiceLaborId']);
        $stockpileOBId = $myDatabase->real_escape_string($_POST['stockpileOBId']);
        $handlingBankDp = $myDatabase->real_escape_string($_POST['handlingBankDp']);
        $invoiceCurahId = $myDatabase->real_escape_string($_POST['invoiceCurahId']);
        $invoiceVendorCurahId = $myDatabase->real_escape_string($_POST['invoiceVendorCurahId']);
        $invoiceFreightText = $myDatabase->real_escape_string($_POST['invoiceFreightText']);
        $invoiceOAIdTest = $myDatabase->real_escape_string($_POST['invoiceOAIdTest']);
        $internalTF = $myDatabase->real_escape_string($_POST['internalTF']);
        $gv_email2 = $myDatabase->real_escape_string($_POST['gv_email2']);
        $typeOKS = $myDatabase->real_escape_string($_POST['typeOKS']);

        if($internalTF != '' || $internalTF != 0){
            $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount1']));
            $generalVendorId = NULL;
        }
      if($invoiceOAId == '') {
                $invoiceOAId = 0;
            }
        if($invoiceHandlingId == '') {
                $invoiceHandlingId = 0;
            }
            
            if($invoiceOBId == '') {
                $invoiceOBId = 0;
            }
            
            if($invoiceCurahId == '') {
                $invoiceCurahId = 0;
            }
    
        if($stockpileContractId2 == '' && $stockpileContractId3 == ''){
            $stockpileContract_Id = 'NULL';
        }elseif($stockpileContractId2 == '' && $stockpileContractId3 != ''){
            $stockpileContract_Id = $stockpileContractId3;
        }elseif($stockpileContractId3 == '' && $stockpileContractId2 != ''){
            $stockpileContract_Id = $stockpileContractId2;
        }
    
        if($shipmentId == '' && $shipmentId1 == ''){
            $shipment_Id = 'NULL';
        }elseif($shipmentId == '' && $shipmentId1 != ''){
            $shipment_Id = $shipmentId1;
        }elseif($shipmentId != '' && $shipmentId1 == ''){
            $shipment_Id = $shipmentId;
        }
    
        if($invoiceId == '') {
                $invoiceId = 'NULL';
            }
        if($vendorHandlingId == '') {
                $vendorHandlingId = 'NULL';
            }
        if($ppn12 == '') {
                $ppn12 = 0;
            }
        if($pph12 == '') {
                $pph12 = 0;
            }
        if($paymentCashId != 10 ) {
                $paymentCashId = 'NULL';
            }
            
        if($currencyId == 0 ) {
                $currencyId = 1;
            }
        if($gvEmail == ''){
            $gvEmail = NULL;
        }
    
        $sqlBankAcc = "SELECT account_id FROM bank WHERE bank_id = {$bankId}";
                        $resultBankAcc = $myDatabase->query($sqlBankAcc, MYSQLI_STORE_RESULT);
                        if($resultBankAcc->num_rows == 1) {
                            $rowBankAcc = $resultBankAcc->fetch_object();
    
                            if($rowBankAcc->account_id !== $accountId){
                                $boolBank = true;
                            }
                        }	
            
        $vendorBank = 'NULL';
    

        if($paymentFor == 0) {
            // PKS Kontrak
            if($stockpileId != '' && $vendorId != '' && $stockpileContractId != '' && $vendorBankId != '' && $grandTotal != 0) {
                if($paymentMethod == 1) {
                    if($ppn > 0) {
                        if($taxInvoice != '') {
                            $boolContinue = true;
                        }
                    } else {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                    $pph = 0;
                    $ppn = $ppn2;
                    $amount = $amount + $ppn;
                    $originalAmount = $originalAmount + $ppn;
                    if($ppn2 == '') {
                        $ppn = 0;
                    }
                }
                $salesId = 'NULL';
                $freightId = 'NULL';
                $laborId = 'NULL';
                $vendorId1 = 'NULL';
                $qty = 'NULL';
                $price = 'NULL';
                $generalVendorId = 'NULL';
                $vendorBank = $vendorBankId;
            }
        } else if($paymentFor == 1) {
          $periodPaymentFrom=$paymentFrom1;
          $periodPaymentTo=$paymentTo1;
          $chequeNo = $chequeNo1;
            if($paymentType == 1) {
                // Sales
                      if($customerId != '' && $salesId != '') {
                    $boolContinue = true;
                    $stockpileContractId = 'NULL';
                    $freightId = 'NULL';
                    $laborId = 'NULL';
                    $vendorId1 = 'NULL';
                    $qty = 'NULL';
                    $price = 'NULL';
                    $generalVendorId = 'NULL';
    
                    if($paymentMethod == 2) {
    
                        $ppn = 0;
    
                        $pph = 0;
                    }
                }
            } else if($paymentType == 2) {
                // PKS Curah
              if($paymentMethod == 1 && $stockpileId1 != '' && $vendorId1 != '' && $grandTotal >= 0 && $invoiceBankId != '') {
                $invoiceId = 'NULL';
    
                    if($ppn > 0) {
                        if($taxInvoice != '') {
                            $boolContinue = true;
                        }
                    } else {
                        $boolContinue = true;
                    }
                    $salesId = 'NULL';
                    $stockpileContractId = 'NULL';
                    $freightId = 'NULL';
                    $laborId = 'NULL';
                    $qty = $qtyDp;
                    $price = $priceDp;
                    $termin = 100;
                    $vendorBank = $curahBankDp;
                    $generalVendorId = 'NULL';
                    $amount = $grandTotal;
                    $originalAmount = $grandTotal;
                    $pph = $pphInvoice;
                    $ppn = $ppnInvoice;
                } elseif($paymentMethod == 2 && $stockpileId1 != '' && $vendorId1 != '') {
                    $boolContinue = true;
                    $salesId = 'NULL';
                    $stockpileContractId = 'NULL';
                    $freightId = 'NULL';
                    $laborId = 'NULL';
                    $qty = $qtyDp;
                    $price = $priceDp;
                    $termin = $termin;
                    $invoiceId = 'NULL';
                    $vendorBank = $curahBankDp;
                    $generalVendorId = 'NULL';
                    $ppn = 0;
                    $pph = 0;
                }
            }
        } else if($paymentFor == 9) {
            // HC payment
            $periodPaymentFrom=$paymentFromHP;
            $periodPaymentTo=$paymentToHP;
            $chequeNo = $chequeNo1;

            if($paymentMethod == 2 && $invoiceHandlingId != '' && $bankId != ''  && $stockpileId4 != '') {
                $boolContinue = true;
                $stockpileContractId = 'NULL';
                $salesId = 'NULL';
                $laborId = 'NULL';
                $vendorId1 = 'NULL';
                $freightId = 'NULL';
                $vendorBank = $handlingBankDp;
                $vendorHandlingId = $invoiceVendorHandlingId;
                $amountConverted = $amount;
                $originalAmount = $totalDpp;
                $ppn = $ppnInvoice;
                $pph = $pphInvoice;
                $stockpileLocation = $stockpileId4;
                $qty = $qtyDp;
                $price = $priceDp;
                $termin = $termin;
                $amountConverted = $totalDpp;
                $originalAmount = $totalDpp;
                $amount = $totalDpp;
                $generalVendorId = 'NULL';
                $pphJournal = 'NULL';
                $invoiceId = 'NULL';
                
                
    
            } elseif($paymentMethod == 1 && $stockpileId4 != '' && $invoiceVendorHandlingId != '' && $grandTotal >= 0 && $invoiceBankId != '') {
                if($ppn > 0) {
                    if($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
               
    
                $stockpileContractId = 'NULL';
                $salesId = 'NULL';
                $laborId = 'NULL';
                $freightId = 'NULL';
                $vendorId1 = 'NULL';
                $qty = $qtyDp;
                $price = $priceDp;
                $termin = 100;
                $vendorBank = $invoiceBankId;
                
                //$shipment_Id = 'NULL';
                //$stockpileContract_Id = 'NULL';
                //$shipmentId1 = 'NULL';
                //$stockpileContractId3 = 'NULL';
                $generalVendorId = 'NULL';
                $amount = $grandTotal;
                $originalAmount = $grandTotal;
                $pph = $pphInvoice;
                $ppn = $ppnInvoice;
            }
        }else if($paymentFor == 2) {
            // FC payment
            $periodPaymentFrom=$paymentFrom;
            $periodPaymentTo=$paymentTo;

            // echo " A " . $invoiceFreightId . ' | ' . $bankId . ' | ' . $stockpileOAId ;
            if($paymentMethod == 2 && $invoiceFreightId != '' && $bankId != '' && $stockpileOAId != '') { //Freight Dp && $stockpileIdFcDp != '' && $freightIdFcDp != '' && $freightBankDp != '' && $grandTotal != 0
                $chequeNo = $chequeNo1;
                $boolContinue = true;
                $stockpileContractId = 'NULL';
                $invoiceId = NULL;
                $salesId = 'NULL';
                $laborId = 'NULL';
                $vendorId1 = 'NULL';
                $qty = $qtyDp;
                $price = $priceDp;
                $termin = $termin;
                $freightId = $invoiceFreightId;
                $vendorBank = $FreightbankDp;
                $stockpileLocation = $stockpileOAId;
                $ppn = $ppnInvoice;
                $pph = $pphInvoice;
                $generalVendorId = 'NULL';
                $vendorHandlingId = 'NULL';
                $pphJournal = 'NULL';
                $amountConverted = $totalDpp;
                $originalAmount = $totalDpp;
                $amount = $totalDpp;
    
            } elseif($paymentMethod == 1 && $stockpileId2 == 10 && $freightId == 26 && $freightBankId != '') {
                $boolContinue = true;
                $ppn = 0;
                $pph = 0;
                $freightId = 26;
                $stockpileContractId = 'NULL';
                $salesId = 'NULL';
                $laborId = 'NULL';
                $vendorId1 = 'NULL';
                $qty = 'NULL';
                $price = 'NULL';
                $generalVendorId = 'NULL';
                $vendorBank = $freightBankId;
                $totalPrice = $grandTotal;
          }elseif($paymentMethod == 1 && $stockpileId2 != '' && $freightId != '' && $grandTotal >= 0 && $invoiceBankId != '') { //payment
              
                $pph = $pphInvoice;
                $ppn = $ppnInvoice;
                if($ppn > 0) {
                    if($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
                $stockpileContractId = 'NULL';
                $salesId = 'NULL';
                $laborId = 'NULL';
                $vendorId1 = 'NULL';
                $qty = $qtyDp;
                $price = $priceDp;
                $termin = 100;
                $vendorBank = $invoiceBankId;
                $generalVendorId = 'NULL';
                $amount = $grandTotal;
                $originalAmount = $grandTotal;
                $chequeNo = $chequeNo1;

            }
        } else if($paymentFor == 3) {
            // UC payment
            $periodPaymentFrom=$paymentFromUP;
            $periodPaymentTo=$paymentToUP;
           
            if($paymentMethod == 1 && $stockpileId3 != '' && $laborId != '' && $grandTotal >= 0 && $invoiceBankId != '')  {
                if($ppn > 0) {
                    if($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
                $chequeNo = $chequeNo1;
                $stockpileContractId = 'NULL';
                $salesId = 'NULL';
                $freightId = 'NULL';
                $vendorId1 = 'NULL';
                $qty = $qtyDp;
                $price = $priceDp;
                $termin = 100;
                $vendorBank = $invoiceBankId;
                $generalVendorId = 'NULL';
                $amount = $grandTotal;
                $originalAmount = $grandTotal;
                $pph = $pphInvoice;
                $ppn = $ppnInvoice;
                $invoiceId = 'NULL';
    
            } elseif($paymentMethod == 2 && $invoiceLaborId != '' && $bankId != '' && $stockpileOBId != '') {
                $invoiceId = 'NULL';
                $boolContinue = true;
                $stockpileContractId = 'NULL';
                $salesId = 'NULL';
                $freightId = 'NULL';
                $vendorId1 = 'NULL';
                //$shipmentId = 'NULL';
                $qty = $qtyDp;
                $price = $priceDp;
                $termin = $termin;
                $laborId = $invoiceLaborId;
                $vendorBank = $laborBankDp;
                $stockpileLocation = $stockpileOBId;
                $ppn = $ppnInvoice;
                $pph = $pphInvoice;
                $generalVendorId = 'NULL';
                $vendorHandlingId = 'NULL';
                $pphJournal = 'NULL';
                $amountConverted = $totalDpp;
                $originalAmount = $totalDpp;
                $amount = $totalDpp;
                $chequeNo = $chequeNo1;

            }
        } else {
            $boolContinue = true;
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $freightId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
            if($paymentFor == 8){ //INVOICE 
        
                $qty = $qtyDp;
                $price = $priceDp;
                $vendorBank = $gvBankId;
                $amount = $grandTotal;
                $originalAmount = $grandTotal;
                $tempAmount = $amount;
                $termin = 0;
                $ppn = $ppnInvoice;
                $pph = $pphInvoice;
                $chequeNo = $chequeNo1;
    
            }else if($paymentFor == 10){
                $vendorBank = $gvPCBankId;
            }else if($paymentFor == 7){ //INTERNAL TRANSFER
                $amountConverted = $amount;
                $originalAmount = $amount;
                $originalAmountConverted = $amount;
                $amountJournal = $amount;
                $invoiceId = 'NULL';
                $invoiceDate = $paymentDate;
                $termin = 100;
                $tempAmount = $amount;
            }
    
            if($generalVendorId == '') {
                $generalVendorId = 'NULL';
            }
             if($price == '') {
                $price = 'NULL';
            }
            if($qty == '') {
                $qty = 'NULL';
            }

             if($paymentType == 1 && ($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 7 || $paymentFor == 8 || $paymentFor == 10)) {
                $ppn1 = $ppn1;
                $pph1 = $pph1;
                $grandTotal = $amount;
                $totalPrice = $amount;
              

    
             }else if($paymentType == 1) {
    
                $ppn1 = 0;
                $pph1 = 0;
                $grandTotal = $amount;
            }
            if($paymentFor == 7 || $paymentMethod == 2) {
                $ppn = 0;
                $pph = 0;

            }
    
           if($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 8 || $paymentFor == 10) {
                if(is_numeric($ppn1)) {
                    $ppn = $ppn1;
                } else {
                    $ppn = 0;
                }
    
                if(is_numeric($pph1)) {
                    $pph = $pph1;
                } else {
                    $pph = 0;
                }

            }
        }
    if ($_POST['_method'] == 'INSERT') {
        if($boolBank){
            if($paymentDate != '' && $paymentType != '' && $paymentMethod != '' && $accountId != '' && $bankId != '' &&
                    $currencyId != ''  /*&& $boolContinue*/) {
            if($paymentMethod == 1 && $paymentType == 2 && ($paymentFor == 0 || $paymentFor == 1 || $paymentFor == 2 || $paymentFor == 3 || $paymentFor == 9)) {
                    // <editor-fold defaultstate="collapsed" desc="PAYMENT - OUT - PKS Curah/FC/UC - UPDATE TRANSACTION">
                    if($amount < $grandTotal || ($amount != 0 && $amount > $grandTotal)) {
                        $boolContinue2 = false;
                    } else {
                        $boolUpdateTransaction = true;
                        if($paymentFor == 0) {
                            $whereProperty = " AND stockpile_contract_id = {$stockpileContractId} ";
                            $updateProperty = " payment_id ";
    
                            $sql = "SELECT GROUP_CONCAT(transaction_id) AS transaction_ids "
                                    . "FROM `transaction` "
                                    . "WHERE stockpile_contract_id = {$stockpileContractId} ";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $slipNos = $row->transaction_id;
                            }
                        } else if($paymentFor == 1) {
                            $whereProperty = " AND vendor_id = {$vendorId1} ";
                            $updateProperty = " payment_id ";
                            $invoiceId = 'NULL';
    
                        } else if($paymentFor == 2) {
                            $whereProperty = " AND p.freight_id = {$freightId}";
                            $updateProperty = " fc_payment_id ";
                            $invoiceId = 'NULL';
                        } else if($paymentFor == 9) {
                            $whereProperty = " AND p.vendor_handling_id = {$vendorHandlingId} ";
                            $updateProperty = " hc_payment_id ";
                            $invoiceId = 'NULL';
    
                        } else if($paymentFor == 3) {
                            $whereProperty = " AND labor_id = {$laborId} ";
                            $updateProperty = " uc_payment_id ";
                            $invoiceId = 'NULL';
    
                        }
    
                        if (isset($_POST['checkedSlips'])) {
                            $checks = $_POST['checkedSlips'];
                            for ($i = 0; $i < sizeof($checks); $i++) {
                                if($slipNos == '') {
                                    $slipNos .= $checks[$i];
                                } else {
                                    $slipNos .= ','. $checks[$i];
                                }
                            }
                        }
    
                        if($grandTotal <= 0) {
                                
                                $amount = $grandTotal;
        
                                $sql = "SELECT p.*, f.pph
                                        FROM `payment` p
                                        LEFT JOIN freight f ON f.`freight_id` = p.`freight_id`
                                        WHERE p.payment_type = {$paymentType}
                                        AND p.payment_method = 2 AND p.payment_status = 0
                                        {$whereProperty}
                                        AND p.amount_converted > 0
                                        AND p.company_id = {$_SESSION['companyId']}
                                        ORDER BY p.payment_id ASC";

                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if($result !== false && $result->num_rows > 0) {
                                    $balanceLeft = $totalPrice;
                                    while($row = $result->fetch_object()) {
                                            $dp = $row->amount_converted;
                                            $availableDP = $dp - $balanceLeft;
                                        if($availableDP > 0) {
                                            $sql2 = "UPDATE payment SET amount = ". $availableDP/$row->exchange_rate .", amount_converted = ". $availableDP ." WHERE payment_id = {$row->payment_id}";
                                            $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                                        //  break;
                                        } elseif($availableDP <= 0) {
                                            $balanceLeft = $balanceLeft - $row->amount_converted;
                                            $sql2 = "UPDATE payment SET amount = 0, amount_converted = 0, pph_amount = 0  WHERE payment_id = {$row->payment_id}";
                                            $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                                        }
                                    }
                                }
                        } elseif($paymentFor == 0) {
                            ///if($freightId != 312 && $stockpileLocation != 8){
                            $amount = $grandTotal;
                                $sql = "UPDATE `payment` p SET p.amount = 0, p.amount_converted = 0
                                        WHERE p.payment_type = {$paymentType}
                                        AND p.payment_method = 2
                                        {$whereProperty}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                // echo " Y1 ". $sql;
                            //}
                        } //edited by alan
                        
                    }
             
                    // </editor-fold>
                }elseif($paymentMethod == 1 && $paymentType == 1 && ($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 8)) {
                    echo "Y2";
                    // <editor-fold defaultstate="collapsed" desc="PAYMENT - IN - Other with GV">
                    if($invoiceId != 'NULL') {
                        $sql = "SELECT p.*, b.currency_id AS b_currency_id
                                FROM `payment` p
                                INNER JOIN bank b
                                ON b.bank_id = p.bank_id
                                WHERE p.payment_type = {$paymentType}
                                AND p.payment_method = 2 AND p.payment_status = 0
                                AND p.invoice_id = {$invoiceId}
                                AND p.amount_converted > 0
                                AND p.company_id = {$_SESSION['companyId']}
                                ORDER BY p.payment_id ASC";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if($result !== false && $result->num_rows > 0) {
                            while($row = $result->fetch_object()) {
                                if($row->b_currency_id == $bankCurrencyId && $bankCurrencyId == $journalCurrencyId) {
                                    // IDR - IDR - IDR
                                    $addedAmount = $row->amount;
                                } elseif($row->b_currency_id != $bankCurrencyId && $bankCurrencyId == $journalCurrencyId) {
                                    // USD - IDR - IDR
                                    $addedAmount = $row->amount * $row->exchange_rate;
                                } elseif($row->b_currency_id == $bankCurrencyId && $bankCurrencyId != $journalCurrencyId) {
                                    // USD - USD - IDR
                                    $addedAmount = $row->amount;
                                } elseif($row->b_currency_id != $bankCurrencyId && $bankCurrencyId != $journalCurrencyId) {
                                    // IDR - USD - IDR
                                    $addedAmount = $row->amount / $row->exchange_rate;
                                }
                                $sql2 = "UPDATE payment SET amount = 0, amount_converted = 0 WHERE payment_id = {$row->payment_id}";
                                $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                            }
                        }
    
                        $amount = $amount + $addedAmount;
                    }
    
                    // </editor-fold>
                } elseif($paymentMethod == 1 && $paymentType == 2 && ($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 8)) {
                    // echo "Y3";
                    // <editor-fold defaultstate="collapsed" desc="PAYMENT - OUT - Other with GV">
                    if($generalVendorId != 'NULL') {
                        $sql = "SELECT p.*, b.currency_id AS b_currency_id
                                FROM `payment` p
                                INNER JOIN bank b
                                ON b.bank_id = p.bank_id
                                WHERE p.payment_type = {$paymentType}
                                AND p.payment_method = 2 AND p.payment_status = 0
                                AND p.invoice_id = {$invoiceId}
                                AND p.amount_converted > 0
                                AND p.company_id = {$_SESSION['companyId']}
                                ORDER BY p.payment_id ASC";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if($result !== false && $result->num_rows > 0) {
                            while($row = $result->fetch_object()) {
                                if($row->b_currency_id == $bankCurrencyId && $bankCurrencyId == $journalCurrencyId) {
                                    // IDR - IDR - IDR
                                    //$addedAmount = $row->amount;
                                    $addedAmount = 0;
                                } elseif($row->b_currency_id != $bankCurrencyId && $bankCurrencyId == $journalCurrencyId) {
                                    // USD - IDR - IDR
                                    //$addedAmount = $row->amount * $row->exchange_rate;
                                    $addedAmount = 0 * $row->exchange_rate;
                                } elseif($row->b_currency_id == $bankCurrencyId && $bankCurrencyId != $journalCurrencyId) {
                                    // USD - USD - IDR
                                    //$addedAmount = $row->amount;
                                    $addedAmount = 0;
                                } elseif($row->b_currency_id != $bankCurrencyId && $bankCurrencyId != $journalCurrencyId) {
                                    // IDR - USD - IDR
                                    //$addedAmount = $row->amount / $row->exchange_rate;
                                    $addedAmount = 0 * $row->exchange_rate;
                                }
                                $sql2 = "UPDATE payment SET amount = 0, amount_converted = 0 WHERE payment_id = {$row->payment_id}";
                                $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                            }
                        }
    
                        $amount = $amount + $addedAmount;
                    }
                }
                elseif($paymentMethod == 2 && $paymentType == 1 && $paymentFor != 4) {
    
                    // <editor-fold defaultstate="collapsed" desc="DOWN PAYMENT - IN - PKS">
                    $sql = "SELECT shipment_id, COALESCE(dp_amount, 0) AS dp_amount FROM shipment WHERE sales_id = {$salesId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($result->num_rows > 0) {
                        $tempStamp = 1;
                        while($row = $result->fetch_object()) {
    
                            $downPayment1 = $myDatabase->real_escape_string($_POST['downPayment'. $row->shipment_id]);
                            $ppn = $myDatabase->real_escape_string($_POST['ppnSales'. $row->shipment_id]);
                            $downPayment = $downPayment1 + $ppn;
                            if($downPayment != '' && $downPayment != 0) {
                                if($exchangeRate == '') {
                                    $exchangeRate = 1;
                                }
    
                                if($bankCurrencyId == $currencyId && $currencyId != $journalCurrencyId) {
                                    $downPaymentDetailConverted = $downPayment;
                                    $downPaymentDetailJournal = $downPayment * $exchangeRate;
                                } elseif($bankCurrencyId != $currencyId && $currencyId != $journalCurrencyId) {
                                    $downPaymentDetailConverted = $downPayment / $exchangeRate;
                                    $downPaymentDetailJournal = $downPayment;
                                } elseif($bankCurrencyId != $currencyId && $currencyId == $journalCurrencyId) {
                                    $downPaymentDetailConverted = $downPayment * $exchangeRate;
                                    $downPaymentDetailJournal = $downPayment * $exchangeRate;
                                } else {
                                    $downPaymentDetailConverted = $downPayment;
                                    $downPaymentDetailJournal = $downPayment;
                                }
    
    
                                $convertedDownPayment = $row->dp_amount + $downPaymentDetailConverted;
    
                                //untuk table payment
                                $amount = $amount + $downPayment;
                                $originalAmount = $originalAmount + $downPayment;
    
                                $sql = "INSERT INTO payment_detail (payment_id, amount, amount_converted, amount_journal, shipment_id) VALUES ("
                                        . "{$tempStamp}, {$downPayment}, {$downPaymentDetailConverted}, {$downPaymentDetailJournal}, {$row->shipment_id})";
                                $resultUpdate = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    
                                $sql = "UPDATE shipment SET dp_amount = {$convertedDownPayment} WHERE shipment_id = {$row->shipment_id}";
                                $resultUpdate = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    }
    
                    if($amount <= 0) {
                        $boolContinue2 = false;
                    }
                    // </editor-fold>
                }

                elseif($paymentMethod == 1 && $paymentType == 1 && $paymentFor == 1) {
                    // <editor-fold defaultstate="collapsed" desc="PAYMENT - IN - PKS">
    
    
                    if($exchangeRate == '') {
                        $exchangeRate = 1;
                    }
    
                    if($bankCurrencyId == $currencyId && $currencyId != $journalCurrencyId) {
                        // USD - USD - IDR
                        $amountConverted = $amount;
                        $grandTotalConverted = $grandTotal;
                    } elseif($bankCurrencyId != $currencyId && $currencyId != $journalCurrencyId) {
                        // IDR - USD - IDR
                        $amountConverted = $amount / $exchangeRate;
                        $grandTotalConverted = $grandTotal;
                    } elseif($bankCurrencyId != $currencyId && $currencyId == $journalCurrencyId) {
                        // USD - IDR - IDR
                        $amountConverted = $amount * $exchangeRate;
                        $grandTotalConverted = $grandTotal;
                    } else {
                        $amountConverted = $amount;
                        $grandTotalConverted = $grandTotal;
                    }
    
                    if($amountConverted < $grandTotalConverted || ($amountConverted != 0 && $amountConverted > $grandTotalConverted)) {
                        $boolContinue2 = false;
                    } else {
    
                        $boolUpdateShipment = true;
    
                        if (isset($_POST['checkedSlips'])) {
                            $checks = $_POST['checkedSlips'];
                            $tempStamp = 1;
                            for ($i = 0; $i < sizeof($checks); $i++) {
                                if($shipmentNos == '') {
                                    $shipmentNos .= $checks[$i];
                                } else {
                                    $shipmentNos .= ','. $checks[$i];
                                }
    
                                $sql = "SELECT sh.*
                                        FROM shipment sh
                                        WHERE sh.shipment_id = {$checks[$i]}";
                                $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $rowShipment = $resultShipment->fetch_object();
                                $shipmentPayment = $rowShipment->invoice_amount - $rowShipment->dp_amount;
    
                                if($bankCurrencyId == $currencyId && $currencyId != $journalCurrencyId) {
                                    $shipmentAmount = $shipmentPayment;
                                    $shipmentPaymentConverted = $shipmentPayment;
                                    $shipmentPaymentJournal = $shipmentPayment * $exchangeRate;
                                } elseif($bankCurrencyId != $currencyId && $currencyId != $journalCurrencyId) {
                                    $shipmentAmount = $shipmentPayment * $exchangeRate;
                                    $shipmentPaymentConverted = $shipmentPayment;
                                    $shipmentPaymentJournal = $shipmentPayment * $exchangeRate;
                                } elseif($bankCurrencyId != $currencyId && $currencyId == $journalCurrencyId) {
                                    $shipmentAmount = $shipmentPayment / $exchangeRate;
                                    $shipmentPaymentConverted = $shipmentPayment;
                                    $shipmentPaymentJournal = $shipmentPayment;
                                } else {
                                    $shipmentAmount = $shipmentPayment;
                                    $shipmentPaymentConverted = $shipmentPayment;
                                    $shipmentPaymentJournal = $shipmentPayment;
                                }
    
                                $sql = "INSERT INTO payment_detail (payment_id, amount, amount_converted, amount_journal, shipment_id) VALUES ("
                                        . "{$tempStamp}, {$shipmentAmount}, {$shipmentPaymentConverted}, {$shipmentPaymentJournal}, {$checks[$i]})";
                                $resultUpdate = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    
                            }
                        }
    
                        if($shipmentNos == "") {
                            $boolContinue2 = false;
                        }
                    }
                    // </editor-fold>
                }
            if($boolContinue2) {
                    $sql = "select DATE_FORMAT(STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), '%y%m') AS slip_prefix from dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $rowSlip = $resultSlip->fetch_object();
                    $checkPaymentNo = $rowSlip->slip_prefix;
    
    
                    $sql = "SELECT LPAD(RIGHT(payment_no, 5) + 1, 5, '0') AS next_id FROM payment WHERE company_id = {$_SESSION['companyId']} AND bank_id = {$bankId} AND payment_no LIKE '{$checkPaymentNo}%' ORDER BY payment_no DESC LIMIT 1";
                    $resultPaymentNo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultPaymentNo->num_rows == 0) {
                        $sql = "SELECT LPAD(1, 5, '0') AS next_id FROM dual LIMIT 1";
                        $resultPaymentNo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }
                    $rowPaymentNo = $resultPaymentNo->fetch_object();
                    $nextPaymentNo = $rowPaymentNo->next_id;
                    $paymentNo = $checkPaymentNo .'-'. $nextPaymentNo;
    
                    if($exchangeRate == '') {
                        $exchangeRate = 1;
                    }
                    
                  
                    if($bankCurrencyId == $currencyId && $currencyId != $journalCurrencyId) {
                        // USD - USD - IDR
                        echo " A1 ";
                        $originalAmountConverted = $tempAmount;
                        $amountConverted = $amount;
                        $ppnConverted = $ppn;
                        $pphConverted = $pph;
                        $amountJournal = $tempAmount * $exchangeRate;
                        $ppnJournal = $ppn * $exchangeRate;
                        $pphJournal = $pph * $exchangeRate;
                        $amount2 = $tempAmount;
                    } elseif($bankCurrencyId != $currencyId && $currencyId != $journalCurrencyId) {
                        // IDR - USD - IDR
                        echo " B1 ";
                        $originalAmountConverted = $tempAmount / $exchangeRate;
                        $amountConverted = $amount / $exchangeRate;
                        $ppnConverted = $ppn / $exchangeRate;
                        $pphConverted = $pph / $exchangeRate;
                        $amountJournal = $tempAmount;
                        $ppnJournal = $ppn;
                        $pphJournal = $pph;
                        $currencyId = $bankCurrencyId;
                        $amount2 = $tempAmount/$exchangeRate;
                    } elseif($bankCurrencyId != $currencyId && $currencyId == $journalCurrencyId) {
                        // USD - IDR - IDR
                        echo " C1 ";

                        $originalAmountConverted = $tempAmount * $exchangeRate;
                        $amountConverted = $amount * $exchangeRate;
                        $ppnConverted = $ppn * $exchangeRate;
                        $pphConverted = $pph * $exchangeRate;
                        $amountJournal = $tempAmount * $exchangeRate;
                        $ppnJournal = $ppn * $exchangeRate;
                        $pphJournal = $pph * $exchangeRate;
                        $currencyId = $bankCurrencyId;
                        $amount2 = $tempAmount * $exchangeRate;
                    } else {
                        echo " D1 ";

                        $originalAmountConverted = $tempAmount;
                        $amountConverted = $amount;
                        $ppnConverted = $ppn;
                        $pphConverted = $pph;
                        $amountJournal = $tempAmount;
                        $ppnJournal = $ppn;
                        $pphJournal = $pph;
                        $amount2 = $tempAmount;
                        // echo " AMOUNT 2 - ". $amount2 ; 

                    }
                        if($freightId != '' && $fc_ppn_dp != 0){
                            //$amountJournal = $originalAmount - $fc_ppn_dp;
                        }
                    
                    if(($idPP != ''|| $idPP != 0) && ($idPG = '' || $idPG == 0)){
                        $invoiceId = 'NULL';
                    }
                    $sql = "INSERT INTO payment (payment_no, payment_date, payment_type, payment_type2, payment_method, account_id, bank_id, stockpile_contract_id, invoice_id, payment_cash_id,"
                            . "vendor_id, sales_id, freight_id, vendor_handling_id, labor_id, stockpile_contract_id_2,shipment_id, vendor_bank_id, payment_notes, remarks, tax_invoice, invoice_no, currency_id, "
                            . "exchange_rate, qty, price, termin, amount, amount_converted, amount2, original_amount, original_amount_converted, ppn_amount, ppn_amount_converted, "
                            . "pph_amount, pph_amount_converted, amount_journal, ppn_journal, pph_journal, general_vendor_id, gv_email, payment_location, cheque_no, entry_by, "
                            . "entry_date, stockpile_location, invoice_date, period_from,period_to,remarks2, status, gv_email2) VALUES ("
                            . "'{$paymentNo}', STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), {$paymentType}, {$payment_type},{$paymentMethod}, {$accountId}, {$bankId}, "
                            . "{$stockpileContractId}, {$invoiceId}, {$paymentCashId}, {$vendorId1}, {$salesId}, {$freightId}, {$vendorHandlingId}, {$laborId}, {$stockpileContract_Id}, {$shipment_Id}, {$vendorBank}, '{$notes}', '{$remarks}', "
                            . "'{$taxInvoice}', '{$invoiceNo}', '{$currencyId}', {$exchangeRate}, "
                            . "{$qty}, {$price}, {$termin},'{$amount}', {$amountConverted}, {$amount2}, {$originalAmount}, {$originalAmountConverted}, {$ppn}, {$ppnConverted}, "
                            . "{$pph}, {$pphConverted}, {$amountJournal}, {$ppnJournal}, {$pphJournal}, {$generalVendorId}, '{$gvEmail}', {$paymentLocation}, '{$chequeNo}', "
                            . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$stockpileLocation},STR_TO_DATE('$invoiceDate', '%d/%m/%Y'),STR_TO_DATE('{$periodPaymentFrom}', "
                            . "'%d/%m/%Y'),STR_TO_DATE('{$periodPaymentTo}', '%d/%m/%Y'), '{$remarks2}', 1, '{$gv_email2}')";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                //    echo " OP " . $sql;
                    if($result !== false) {
                        $paymentId = $myDatabase->insert_id;

                        if($boolUpdateTransaction) {
                            if($paymentFor == 2){
                                $sql = "SELECT transaction_id FROM `payment_oa` WHERE inv_notim_id = {$invoiceOAId}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if($result !== false && $result->num_rows > 0) {
                                while($row = $result->fetch_object()) {
                                    
                                    $sqlU = "UPDATE `payment_oa` SET payment_id = '{$paymentId}' WHERE transaction_id = {$row->transaction_id} AND inv_notim_id = {$invoiceOAId}";
                                    $resultU = $myDatabase->query($sqlU, MYSQLI_STORE_RESULT);
    
                                    $sqlA = "UPDATE `transaction` SET fc_payment_id = '{$paymentId}' WHERE transaction_id = {$row->transaction_id}";
                                    $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                                    // echo $sqlA;
                                }
                            }
                            }elseif($paymentFor == 9){
                                    $sql = "SELECT transaction_id FROM `payment_handling` WHERE inv_notim_id = {$invoiceHandlingId}";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($result !== false && $result->num_rows > 0) {
                                    while($row = $result->fetch_object()) {
                                    
                                    $sqlU = "UPDATE `payment_handling` SET payment_id = '{$paymentId}' WHERE transaction_id = {$row->transaction_id} AND inv_notim_id = {$invoiceHandlingId}";
                                    $resultU = $myDatabase->query($sqlU, MYSQLI_STORE_RESULT);
        
                                    $sqlA = "UPDATE `transaction` SET hc_payment_id = '{$paymentId}' WHERE transaction_id = {$row->transaction_id}";
                                    $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                                    }
                                }
                            }elseif($paymentFor == 3){
                                    $sql = "SELECT transaction_id FROM `payment_ob` WHERE inv_notim_id = {$invoiceOBId}";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($result !== false && $result->num_rows > 0) {
                                    while($row = $result->fetch_object()) {
                                    
                                    $sqlU = "UPDATE `payment_ob` SET payment_id = '{$paymentId}' WHERE transaction_id = {$row->transaction_id} AND inv_notim_id = {$invoiceOBId}";
                                    $resultU = $myDatabase->query($sqlU, MYSQLI_STORE_RESULT);
                                    
                                    $sqlA = "UPDATE `transaction` SET uc_payment_id = '{$paymentId}' WHERE transaction_id = {$row->transaction_id}";
                                    $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                                    
                                    }
                                }
                            }elseif($paymentFor == 1){
                                $sql = "SELECT transaction_id FROM `payment_curah` WHERE inv_notim_id = {$invoiceCurahId}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if($result !== false && $result->num_rows > 0) {
                                while($row = $result->fetch_object()) {
                                
                                $sqlU = "UPDATE `payment_curah` SET payment_id = '{$paymentId}' WHERE transaction_id = {$row->transaction_id} AND inv_notim_id = {$invoiceCurahId}";
                                $resultU = $myDatabase->query($sqlU, MYSQLI_STORE_RESULT);
                                // echo " SQLU " .$sqlU;
                                
                                $sqlA = "UPDATE `transaction` SET payment_id = '{$paymentId}' WHERE transaction_id = {$row->transaction_id}";
                                $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                                
                                    }
                                }
                            }
                                
                            $sql = "SELECT transaction_id, sync_status FROM `transaction` WHERE transaction_id IN ($slipNos)";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result !== false && $result->num_rows > 0) {
                                while($row = $result->fetch_object()) {
                                    $syncStatus = 0;
                                    if($row->sync_status == 1) {
                                        $syncStatus = 2;
                                    }
    
                                    $sql2 = "UPDATE `transaction` SET sync_status = {$syncStatus} WHERE transaction_id = {$row->transaction_id}";
                                    $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                                }
                            }
                            
                        }
                        
                        
                        //Update by yeni
                        if($idPP != ''){
                            // echo 'A';
                            $sqlPP = "UPDATE pengajuan_payment SET status = 3 WHERE idPP = {$idPP}"; //UPDATE status Pengajuan Payment
                            $resultPP = $myDatabase->query($sqlPP, MYSQLI_STORE_RESULT);
                            //echo $sqlPP;

                            //UPDATE LOGBOOK PKS
                            $sqlLog = "UPDATE logbook_new set payment_id = {$paymentId}, status1 = 3,  type_pengajuan = 1 where ppayment_id = {$idPP}";
                            $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
                            
                            $sqlInvNotim = "UPDATE invoice_notim set payment_id = {$paymentId}, status_payment = 1 where idPP = {$idPP}";
                            $resultInvNotim = $myDatabase->query($sqlInvNotim, MYSQLI_STORE_RESULT);
                            
                        }else if($idPG != ''){
                            // echo 'B';
                            $sqlLog = "UPDATE logbook_new set payment_id = {$paymentId}, status1 = 3 where inv_general_id = {$invoiceId}";
                            $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
                            
                            $sqlInv = "UPDATE invoice set payment_status = 1 where invoice_id = {$invoiceId}";
                            $resultInv = $myDatabase->query($sqlInv, MYSQLI_STORE_RESULT);

                            $sqlInv = "UPDATE pengajuan_general set status_pengajuan = 3 where pengajuan_general_id = {$idPG}";
                            $resultInv = $myDatabase->query($sqlInv, MYSQLI_STORE_RESULT);

                            $sqlOKS = "UPDATE temp_oks_akt oks
                                        INNER JOIN pengajuan_general_detail pgd ON pgd.`pgd_id` = oks.`pgd_id`
                                        SET oks.`payment_id` = {$paymentId}
                                        WHERE pgd.pg_id = {$idPG}";
                            $resultOKS = $myDatabase->query($sqlOKS, MYSQLI_STORE_RESULT);

                            $sqlOKS_others = "UPDATE temp_oks_akt_others oks1
                                        INNER JOIN pengajuan_general pg ON pg.`pg_id` = oks1.`pg_id`
                                        SET oks1.`payment_id` = {$paymentId}
                                        WHERE pg.pg_id = {$idPG}";
                            $resultOKS1 = $myDatabase->query($sqlOKS_others, MYSQLI_STORE_RESULT);
                        }

                        else if($stockpileContractId != 'NULL'){ //KONTRAK PKS
                            // echo 'C' .$stockpileContractId;
                            //INSERT LOGBOOK INVOICE
                            $sqlPurchasing = "SELECT pur.purchasing_id FROM purchasing pur
                                                LEFT JOIN po_pks po ON po.purchasing_id = pur.purchasing_id
                                                LEFT JOIN po_contract poc ON poc.po_pks_id = po.po_pks_id
                                                LEFT JOIN contract con ON con.contract_id = poc.contract_id
                                                LEFT JOIN stockpile_contract sc ON sc.contract_id = con.contract_id
                                                WHERE stockpile_contract_id = {$stockpileContractId}";
                            $resultPurchasing = $myDatabase->query($sqlPurchasing, MYSQLI_STORE_RESULT);
                            if($resultPurchasing !== false && $resultPurchasing->num_rows == 1) {
                                $rowPurchasing = $resultPurchasing->fetch_object();
                                $purchasingId = $rowPurchasing->purchasing_id;
                                
                                $sqlLog = "UPDATE logbook_new set payment_id = {$paymentId}, status1 = 3 where purchasing_Id = {$purchasingId}";
                                $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
                                
                                $sqlPurchasing = "UPDATE purchasing set status = 2, payment_id = {$paymentId} where purchasing_Id = {$purchasingId}";
                                $resultPurchasing = $myDatabase->query($sqlPurchasing, MYSQLI_STORE_RESULT);
    
                            }
                        }else if($internalTF != '' || $internalTF != 0){
                            // echo 'D';
                            $sqlLog = "UPDATE logbook_new set payment_id = {$paymentId}, status1 = 3 where internalTf_id = {$internalTF}";
                            $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);

                            $sqlInv = "UPDATE pengajuan_internaltf set status = 3, payment_id = {$paymentId}, amount = {$amount} where pengajuan_interalTF_id = {$internalTF}";
                            $resultInv = $myDatabase->query($sqlInv, MYSQLI_STORE_RESULT);
                            // echo $sqlLog;
                            // echo $sqlInv;
                        }
    
                        if($boolUpdateShipment) {
                            $sql = "UPDATE `shipment` SET payment_id = {$paymentId} WHERE shipment_id IN ($shipmentNos)";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        }
    
                        if($tempStamp != '') {
                            $sql = "UPDATE payment_detail SET payment_id = {$paymentId} WHERE payment_id = {$tempStamp}";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        }
                        if($paymentFor == 0) {
                            $sql = "SELECT con.contract_id, con.price_converted * con.quantity AS contract_amount, SUM(p.amount_converted) AS paid_amount, v.ppn, v.pph
                                    FROM stockpile_contract sc
                                    INNER JOIN `contract` con
                                        ON con.contract_id = sc.contract_id
                                    INNER JOIN `payment` p
                                        ON p.stockpile_contract_id = sc.stockpile_contract_id
                                    INNER JOIN vendor v
                                        ON v.vendor_id = con.vendor_id
                                    WHERE sc.stockpile_contract_id = {$stockpileContractId}
                                    AND con.company_id = {$_SESSION['companyId']} AND p.payment_status = 0
                                    GROUP BY sc.stockpile_contract_id";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows > 0) {
                                $row = $result->fetch_object();
                                $ppn = $row->ppn;
                                $pph = $row->pph;
    
                                $ppnAmount = ($ppn/100) * $row->contract_amount;
                                $pphAmount = ($pph/100) * $row->contract_amount;
                                $total  = $pphAmount + $ppnAmount + $row->contract_amount;
    
    
                                if($row->paid_amount >= $total)
                            {
                                    $sqlUpdate = "UPDATE `contract` SET payment_status = 1 WHERE contract_id = {$row->contract_id}";
                                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                                }
                            }
                        }
    
                        if($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 8) {
                            if($paymentMethod == 1){
                                    $sqlUpdate = "UPDATE `invoice` SET payment_status = 1 WHERE invoice_id = {$invoiceId}";
                                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
    
                            }
                        }
    
                            $sql = "SELECT b.* FROM bank b LEFT JOIN payment p ON p.`bank_id` = b.`bank_id` WHERE p.payment_id = {$paymentId}";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result !== false && $result->num_rows > 0) {
                                while($row = $result->fetch_object()) {
                                    $bankType = $row->bank_type;
                                    $bankStockpile = $row->stockpile_id;
    
                                }
                            }
    
    
                        if($paymentFor == 10){
                                $sqlUpdate = "UPDATE `payment_cash` SET payment_id = {$paymentId}, payment_cash_method = {$paymentMethod} WHERE payment_id IS NULL AND entry_by = {$_SESSION['userId']}";
                                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
    
                                if($paymentMethod == 1){
                                    $sqlUpdate = "UPDATE `payment_cash` SET payment_cash_status = 1 WHERE payment_id = {$paymentId}";
                                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
    
                            }
                        }
                        unset($_SESSION['payment']);
                        
                        insertGeneralLedger($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", "NULL", "NULL", $paymentId);
                        insertReportGL($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", "NULL", "NULL", $paymentId);


                        $return_value = '|OK|Payment has inserted successfully.|'. $paymentId .'|' .$sqlInvNotim;
    
                    } else {
                        $return_value = '|FAIL|Failed insert payment1.||' . $sql . ' | '; //invoiceFreightText
                        
                        if($tempStamp != '') {
                            $sql = "DELETE FROM payment_detail WHERE payment_id = {$tempStamp}";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        }
                    }
                } else {
                    $return_value = '|FAIL|Please insert correct amount.||' . $sql;
                }
            } else {
                $return_value = '|FAIL|Please fill the required fields.||' . $invoiceFreightId;
               // echo $sql;
    
            }
            }else{
                $return_value = '|FAIL|Please Choose Different Bank.||';
            }
        }
    
        echo $return_value;
    }elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'reject_invoice_notim') {
        $return_value = '';
        $idPP1 = $_POST['idPP1'];
        $invId = $_POST['invId'];
        $internalTF = $_POST['internalTF'];
        $remarks = $_POST['return_remarks'];

        if($invId == 0){
            $invId = '';
        }
                
        if($idPP1 != ''){
            echo "A";
            $sqlUpdate = "UPDATE `invoice_notim` SET  invoice_status = '4', return_remarks = '{$remarks}'  WHERE idPP = {$idPP1}"; //reject Invoice
            $resultsUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

            $sqlLog = "UPDATE logbook_new set status1 = 1 where ppayment_id = {$idPP1}";
            $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);

        }else if($invId != ''){
            echo "B" .$invId;
            $sqlUpdate = "UPDATE `invoice` SET  invoice_status = '4' , return_remarks = '{$remarks}' WHERE invoice_id = {$invId}"; //Reject Invoice
            $resultsUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

            $sqlLog = "UPDATE logbook_new set status1 = 1 where inv_general_id = {$invId}";
            $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);

        }else if($internalTF != ''){
            echo "C";
            $sqlUpdate = "UPDATE `pengajuan_internaltf` SET  status = '4', remaks_reject = '{$remarks}'  WHERE pengajuan_interalTF_id = {$internalTF}"; //Reject Invoice
            $resultsUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

            $sqlLog = "UPDATE logbook_new set status1 = 0 where internalTf_id = {$internalTF}";
            $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
        }
                
      
    
        $return_value = '|OK|Cancel has successfully ||' .$sqlUpdate;
    
        echo $return_value;
    
    }
    
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'payment_data1') {
    // <editor-fold defaultstate="collapsed" desc="payment_data">

    $return_value = '';
    $boolContinue = false;
    $boolBank = false;
    $boolDate = false;
    $boolUpdateTransaction = false;
    $boolUpdateShipment = false;
    $boolContinue2 = true;
    $tempStamp = '';
    $periodPaymentFrom = '';
    $periodPaymentTo = '';
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentMethod = $myDatabase->real_escape_string($_POST['paymentMethod']);
    $paymentDate = $myDatabase->real_escape_string($_POST['paymentDate']);
    $paymentType = $myDatabase->real_escape_string($_POST['paymentType']);
    $payment_type = $myDatabase->real_escape_string($_POST['payment_type']);
    $bankId = $myDatabase->real_escape_string($_POST['bankId']);
    $paymentFor = $myDatabase->real_escape_string($_POST['paymentFor']);
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $stockpileContractId2 = $myDatabase->real_escape_string($_POST['stockpileContractId2']);
    $stockpileContractId3 = $myDatabase->real_escape_string($_POST['stockpileContractId3']);
    $stockpileId1 = $myDatabase->real_escape_string($_POST['stockpileId1']);
    $vendorId1 = $myDatabase->real_escape_string($_POST['vendorId1']);
    $stockpileId2 = $myDatabase->real_escape_string($_POST['stockpileId2']);
    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    $stockpileId4 = $myDatabase->real_escape_string($_POST['stockpileId4']);
    $vendorHandlingId = $myDatabase->real_escape_string($_POST['vendorHandlingId']);
    $stockpileId3 = $myDatabase->real_escape_string($_POST['stockpileId3']);
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
    $shipmentId1 = $myDatabase->real_escape_string($_POST['shipmentId1']);
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    $generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId']);
    $taxInvoice = $myDatabase->real_escape_string($_POST['taxInvoice']);
    $invoiceNo = $myDatabase->real_escape_string($_POST['invoiceNo']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $bankCurrencyId = $myDatabase->real_escape_string($_POST['bankCurrencyId']);
    $journalCurrencyId = $myDatabase->real_escape_string($_POST['journalCurrencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
    $originalAmount = $amount;
    $totalPrice = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalPrice']));
    $downPayment = str_replace(",", "", $myDatabase->real_escape_string($_POST['downPayment']));
    $grandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal']));
    $ppn = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn']));
    $pph = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty']));
    $fc_ppn_dp = str_replace(",", "", $myDatabase->real_escape_string($_POST['fc_ppn_dp']));
    $ppn1 = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn1']));
    $ppn2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn2']));
    $pph1 = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph1']));
    $notes = $myDatabase->real_escape_string($_POST['paymentNotes']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    $remarks2 = $myDatabase->real_escape_string($_POST['remarks2']);
    $paymentLocation = $myDatabase->real_escape_string($_POST['paymentLocation']);
    $stockpileLocation = $myDatabase->real_escape_string($_POST['stockpileLocation']);
    $chequeNo = $myDatabase->real_escape_string($_POST['chequeNo']);
    $invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
    $invoiceId = $myDatabase->real_escape_string($_POST['invoiceId']);
    $paymentCashId = $paymentFor;
    $slipNos = "";
    $shipmentNos = "";
    $priceFreight = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceFreight']));
    $qtyFreight = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyFreight']));
    $terminFreight = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminFreight']));
    $stockpileIdFcDp = $myDatabase->real_escape_string($_POST['stockpileIdFcDp']);
    $freightIdFcDp = $myDatabase->real_escape_string($_POST['freightIdFcDp']);
    $freightBankDp = $myDatabase->real_escape_string($_POST['freightBankDp']);
    $vendorBankId = $myDatabase->real_escape_string($_POST['vendorBankId']);
    $qtyHandlingDP = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyHandlingDP']));
    $priceHandlingDP = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceHandlingDP']));
    $terminHandlingDP = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminHandlingDP']));
    $stockpileVhDp = $myDatabase->real_escape_string($_POST['stockpileVhDp']);
    $vendorHandlingDp = $myDatabase->real_escape_string($_POST['vendorHandlingDp']);
    $vendorHandlingBankDp = $myDatabase->real_escape_string($_POST['vendorHandlingBankDp']);
    $vendorHandlingBankId = $myDatabase->real_escape_string($_POST['vendorHandlingBankId']);
    $freightBankId = $myDatabase->real_escape_string($_POST['freightBankId']);
    $qtyLabor = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyLabor']));
    $priceLabor = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceLabor']));
    $terminLabor = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminLabor']));
    $stockpileLaborDp = $myDatabase->real_escape_string($_POST['stockpileLaborDp']);
    $laborDp = $myDatabase->real_escape_string($_POST['laborDp']);
    $laborBankDp = $myDatabase->real_escape_string($_POST['laborBankDp']);
    $laborBankId = $myDatabase->real_escape_string($_POST['laborBankId']);
    $gvBankId = $myDatabase->real_escape_string($_POST['gvBankId']);
    $curahBankId = $myDatabase->real_escape_string($_POST['curahBankId']);
    $gvPCBankId = $myDatabase->real_escape_string($_POST['gvPCBankId']);
    $paymentFrom = $myDatabase->real_escape_string($_POST['paymentFrom']);
    $paymentFrom1 = $myDatabase->real_escape_string($_POST['paymentFrom1']);
    $paymentFromUP = $myDatabase->real_escape_string($_POST['paymentFromUP']);
    $paymentFromHP = $myDatabase->real_escape_string($_POST['paymentFromHP']);
    $paymentTo = $myDatabase->real_escape_string($_POST['paymentTo']);
    $paymentTo1 = $myDatabase->real_escape_string($_POST['paymentTo1']);
    $paymentToUP = $myDatabase->real_escape_string($_POST['paymentToUP']);
    $paymentToHP = $myDatabase->real_escape_string($_POST['paymentToHP']);

    $idPP = $myDatabase->real_escape_string($_POST['idPP']);
    $idPG = $myDatabase->real_escape_string($_POST['idPG']);
    $priceDp = $myDatabase->real_escape_string($_POST['priceDp']);
    $qtyDp = $myDatabase->real_escape_string($_POST['qtyDp']);

    $totalPrice2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalPrice2']));
    $contractHandling = $myDatabase->real_escape_string($_POST['contractHandling']);
    $contractHandlingDp = $myDatabase->real_escape_string($_POST['contractHandlingDp']);
    $contractFreight = $myDatabase->real_escape_string($_POST['contractFreight']);
    $contractFreightDp = $myDatabase->real_escape_string($_POST['contractFreightDp']);
    $contractCurah = $myDatabase->real_escape_string($_POST['contractCurah']);
    $contractCurahDp = $myDatabase->real_escape_string($_POST['contractCurahDp']);
    $stockpileIdCurahDp = $myDatabase->real_escape_string($_POST['stockpileIdCurahDp']);
    $vendorIdCurahDp = $myDatabase->real_escape_string($_POST['vendorIdCurahDp']);
    $curahBankDp = $myDatabase->real_escape_string($_POST['curahBankDp']);
    $downPaymentFC = str_replace(",", "", $myDatabase->real_escape_string($_POST['downPaymentFC']));
    $downPaymentHC = str_replace(",", "", $myDatabase->real_escape_string($_POST['downPaymentHC']));
    $downPaymentC = str_replace(",", "", $myDatabase->real_escape_string($_POST['downPaymentC']));
	$pengajuanIdOA = $myDatabase->real_escape_string($_POST['pengajuanNo']);


    $dateTrans = str_replace("/", "-", $myDatabase->real_escape_string($_POST['paymentDate']));
    $dt = date('Y-m-d', strtotime($dateTrans));
    $date2 = new DateTime($dt);
    $newDate = $date2->format('Y-m-d');
    // </editor-fold defaultstate="collapsed" desc="POST variables">
    if ($stockpileContractId2 == '' && $stockpileContractId3 == '') {
        $stockpileContract_Id = 'NULL';
    } elseif ($stockpileContractId2 == '' && $stockpileContractId3 != '') {
        $stockpileContract_Id = $stockpileContractId3;
    } elseif ($stockpileContractId3 == '' && $stockpileContractId2 != '') {
        $stockpileContract_Id = $stockpileContractId2;
    }

    if ($shipmentId == '' && $shipmentId1 == '') {
        $shipment_Id = 'NULL';
    } elseif ($shipmentId == '' && $shipmentId1 != '') {
        $shipment_Id = $shipmentId1;
    } elseif ($shipmentId != '' && $shipmentId1 == '') {
        $shipment_Id = $shipmentId;
    }

    if ($invoiceId == '') {
        $invoiceId = 'NULL';
    }
    if ($vendorHandlingId == '') {
        $vendorHandlingId = 'NULL';
    }
    if ($ppn12 == '') {
        $ppn12 = 0;
    }
    if ($pph12 == '') {
        $pph12 = 0;
    }
    if ($paymentCashId != 10) {
        $paymentCashId = 'NULL';
    }

    if ($totalPrice2 == '') {
        $totalPrice2 = 0;
    }

    if ($contractHandlingDp == '') {
        $contractHandlingDp = 0;
    }

    if ($contractHandling == '') {
        $contractHandling = 0;
    }

    if ($contractFreightDp == '') {
        $contractFreightDp = 0;
    }

    if ($contractFreight == '') {
        $contractFreight = 0;
    }

    if ($contractCurahDp == '') {
        $contractCurahDp = 0;
    }

    if ($contractCurah == '') {
        $contractCurah = 0;
    }
    if ($downPaymentFC == '') {
        $downPaymentFC = 0;
    }

    if ($downPaymentHC == '') {
        $downPaymentHC = 0;
    }

    if ($downPaymentC == '') {
        $downPaymentC = 0;
    }

    $sqlBankAcc = "SELECT account_id FROM bank WHERE bank_id = {$bankId}";
    $resultBankAcc = $myDatabase->query($sqlBankAcc, MYSQLI_STORE_RESULT);
    if ($resultBankAcc->num_rows == 1) {
        $rowBankAcc = $resultBankAcc->fetch_object();

        if ($rowBankAcc->account_id !== $accountId) {
            $boolBank = true;
        }
    }

    $termin = 'NULL';
    $vendorBank = 'NULL';
    $handlingContract = 0;
    $freightContract = 0;
    $curahContract = 0;

    if ($paymentFor == 0) {
        // PKS Kontrak
        if ($stockpileId != '' && $vendorId != '' && $stockpileContractId != '' && $vendorBankId != '' && $grandTotal != 0) {
            if ($paymentMethod == 1) {
                if ($ppn > 0) {
                    if ($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
            } else {
                $boolContinue = true;
                $pph = 0;
                $ppn = $ppn2;
                $amount = $amount + $ppn;
                $originalAmount = $originalAmount + $ppn;
                if ($ppn2 == '') {
                    $ppn = 0;
                }
            }
            $salesId = 'NULL';
            $freightId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
            $qty = 'NULL';
            $price = 'NULL';
            //$shipment_Id = 'NULL';
            //$stockpileContract_Id = 'NULL';
            //$shipmentId1 = 'NULL';
            //$stockpileContractId3 = 'NULL';
            $generalVendorId = 'NULL';
            $vendorBank = $vendorBankId;

            $sql = "SELECT DATE_FORMAT(c.entry_date,'%Y-%m-%d') AS contractDate, c.contract_no FROM contract c 
			LEFT JOIN stockpile_contract sc ON sc.contact_id = c.contract_id WHERE sc.stockpile_contract_id = {$stockpileContractId} LIMIT 1";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result !== false && $result->num_rows == 1) {
                $row = $result->fetch_object();
                $contractDate = $row->contractDate;
				$remarks = $remarks . ' (Contract No : ' . $row->contract_no . ')';
            }

            if ($contractDate <= $newDate) {
                $boolDate = true;
            }

        }
    } else if ($paymentFor == 1) {
        $periodPaymentFrom = $paymentFrom1;
        $periodPaymentTo = $paymentTo1;
        if ($paymentType == 1) {
            // Sales
            if ($customerId != '' && $salesId != '') {
                $boolContinue = true;
                $stockpileContractId = 'NULL';
                $freightId = 'NULL';
                $laborId = 'NULL';
                $vendorId1 = 'NULL';
                $qty = 'NULL';
                $price = 'NULL';
                // $shipment_Id = 'NULL';
                //$stockpileContract_Id = 'NULL';
                //$shipmentId1 = 'NULL';
                //$stockpileContractId3 = 'NULL';
                $generalVendorId = 'NULL';
                //$boolContinue = true;


                if ($paymentMethod == 2) {


                    $ppn = 0;

                    $pph = 0;
                }
//                $amount = 0;
//                $originalAmount = 0;

                $salesDate = $newDate;
                $sql = "SELECT DATE_FORMAT(sales_date,'%Y-%m-%d') AS salesDate FROM sales WHERE sales_id = {$salesId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if ($result !== false && $result->num_rows == 1) {
                    $row = $result->fetch_object();

                    if ($row->salesDate != '') {
                        $salesDate = $row->salesDate;
                    } else {
                        //$salesDate = $newDate;
                    }
                }

                if ($salesDate <= $newDate) {
                    $boolDate = true;
                }
                $boolDate = true;
            }
        } else if ($paymentType == 2) {
            // PKS Curah
            if ($paymentMethod == 1 && $stockpileId1 != '' && $vendorId1 != '' && $grandTotal != 0) {
                if ($ppn > 0) {
                    if ($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
                $salesId = 'NULL';
                $stockpileContractId = 'NULL';
                $freightId = 'NULL';
                $laborId = 'NULL';
                $qty = 'NULL';
                $price = 'NULL';
                $vendorBank = $curahBankId;
                //$shipment_Id = 'NULL';
                //$stockpileContract_Id = 'NULL';
                //$shipmentId1 = 'NULL';
                //$stockpileContractId3 = 'NULL';
                $generalVendorId = 'NULL';
                $boolDate = true;
                $curahContract = $contractCurah;
            } elseif ($paymentMethod == 2 && $stockpileId1 != '' && $vendorId1 != '' && $amount != 0) {
                $boolContinue = true;
                $salesId = 'NULL';
                $stockpileContractId = 'NULL';
                $freightId = 'NULL';
                $laborId = 'NULL';
                $qty = 'NULL';
                $price = 'NULL';
                $vendorBank = $curahBankDp;
                //$shipment_Id = 'NULL';
                //$stockpileContract_Id = 'NULL';
                //$shipmentId1 = 'NULL';
                //$stockpileContractId3 = 'NULL';
                $generalVendorId = 'NULL';
                $ppn = 0;
                $pph = 0;
                $boolDate = true;
                $curahContract = $contractCurahDp;
                $vendorId1 = $vendorIdCurahDp;
            }
        }
    } else if ($paymentFor == 9) {
        // HC payment
        $periodPaymentFrom = $paymentFromHP;
        $periodPaymentTo = $paymentToHP;
        if ($paymentMethod == 2 && $stockpileVhDp != '' && $vendorHandlingDp != '' && $vendorHandlingBankDp != '' && $amount != 0) {
            $boolContinue = true;
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
            $freightId = 'NULL';
            $qty = $qtyHandlingDP;
            $price = $priceHandlingDP;
            $termin = $terminHandlingDP;
            $vendorBank = $vendorHandlingBankDp;
            $vendorHandlingId = $vendorHandlingDp;
            $handlingContract = $contractHandlingDp;
            //$shipment_Id = 'NULL';
            //$stockpileContract_Id = 'NULL';
            //$shipmentId1 = 'NULL';
            //$stockpileContractId3 = 'NULL';
            $generalVendorId = 'NULL';
            $boolDate = true;
            $sql = "SELECT pph FROM vendor_handling WHERE vendor_handling_id = {$vendorHandlingDp}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result->num_rows == 1) {
                $row = $result->fetch_object();

                $pph = $amount * ($row->pph / 100);
            } else {
                $pph = 0;
            }
            $ppn = 0;

        } elseif ($paymentMethod == 1 && $stockpileId4 != '' && $vendorHandlingId != '' && $grandTotal >= 0 && $vendorHandlingBankId != '') {
            if ($ppn > 0) {
                if ($taxInvoice != '') {
                    $boolContinue = true;
                }
            } else {
                $boolContinue = true;
            }
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $laborId = 'NULL';
            $freightId = 'NULL';
            $vendorId1 = 'NULL';
            $qty = 'NULL';
            $price = 'NULL';
            $vendorBank = $vendorHandlingBankId;
            $handlingContract = $contractHandling;
            //$shipment_Id = 'NULL';
            //$stockpileContract_Id = 'NULL';
            //$shipmentId1 = 'NULL';
            //$stockpileContractId3 = 'NULL';
            $generalVendorId = 'NULL';
            $boolDate = true;
        }
    } else if ($paymentFor == 2) {
        // FC payment
        $periodPaymentFrom = $paymentFrom;
        $periodPaymentTo = $paymentTo;
        if ($paymentMethod == 2 && $stockpileIdFcDp != '' && $freightIdFcDp != '' && $freightBankDp != '' && $amount != 0) {
            $boolContinue = true;
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
            $qty = $qtyFreight;
            $price = $priceFreight;
            $termin = $terminFreight;
            $freightId = $freightIdFcDp;
            $vendorBank = $freightBankDp;
            $freightContract = $contractFreightDp;
            //$shipment_Id = 'NULL';
            //$stockpileContract_Id = 'NULL';
            //$shipmentId1 = 'NULL';
            //$stockpileContractId3 = 'NULL';
            $generalVendorId = 'NULL';
            $boolDate = true;
            $sql = "SELECT pph,ppn FROM freight WHERE freight_id = {$freightIdFcDp}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result->num_rows == 1) {
                $row = $result->fetch_object();
                $ppn = $amount * ($row->ppn / 100);
                $pph = $amount * ($row->pph / 100);
            } else {
                $pph = 0;
                $ppn = 0;
            }

        } elseif ($paymentMethod == 1 && $stockpileId2 == 10 && $freightId == 26 && $freightBankId != '') {
            $boolContinue = true;
            $ppn = 0;
            $pph = 0;
            $freightId = 26;
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
            $qty = 'NULL';
            $price = 'NULL';
            //$shipmentId = 'NULL';
            $generalVendorId = 'NULL';
            $vendorBank = $freightBankId;
            $freightContract = $contractFreight;
            //$shipment_Id = 'NULL';
            //$stockpileContract_Id = 'NULL';
            //$shipmentId1 = 'NULL';
            //$stockpileContractId3 = 'NULL';
            $totalPrice = $originalAmount;
            $grandTotal = $originalAmount;
            $boolDate = true;
        } elseif ($paymentMethod == 1 && $stockpileId2 != '' && $freightId != '' && $grandTotal >= 0 && $freightBankId != '') {
            if ($ppn > 0) {
                if ($taxInvoice != '') {
                    $boolContinue = true;
                }
            } else {
                $boolContinue = true;
            }
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
            $qty = 'NULL';
            $price = 'NULL';
            $vendorBank = $freightBankId;
            //$shipment_Id = 'NULL';
            //$stockpileContract_Id = 'NULL';
            //$shipmentId1 = 'NULL';
            //$stockpileContractId3 = 'NULL';
            $generalVendorId = 'NULL';
            $originalAmount = $amount + $fc_ppn_dp;
            $boolDate = true;
        }
    } else if ($paymentFor == 3) {
        // UC payment
        $periodPaymentFrom = $paymentFromUP;
        $periodPaymentTo = $paymentToUP;
        if ($paymentMethod == 1 && $stockpileId3 != '' && $laborId != '' && $grandTotal >= 0 && $laborBankId != '') {
            if ($ppn > 0) {
                if ($taxInvoice != '') {
                    $boolContinue = true;
                }
            } else {
                $boolContinue = true;
            }
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $freightId = 'NULL';
            $vendorId1 = 'NULL';
            $qty = 'NULL';
            $price = 'NULL';
            $vendorBank = $laborBankId;
            //$shipment_Id = 'NULL';
            //$stockpileContract_Id = 'NULL';
            //$shipmentId1 = 'NULL';
            //$stockpileContractId3 = 'NULL';
            $generalVendorId = 'NULL';
            $boolDate = true;
        } elseif ($paymentMethod == 2 && $stockpileLaborDp != '' && $laborDp != '' && $laborBankDp != '' && $amount != 0) {
            $boolContinue = true;
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $freightId = 'NULL';
            $vendorId1 = 'NULL';
            //$shipmentId = 'NULL';
            $qty = $qtyLabor;
            $price = $priceLabor;
            $termin = $terminLabor;
            $laborId = $laborDp;
            $vendorBank = $laborBankDp;
            //$shipment_Id = 'NULL';
            //$stockpileContract_Id = 'NULL';
            //$shipmentId1 = 'NULL';
            //$stockpileContractId3 = 'NULL';
            $generalVendorId = 'NULL';
            $ppn = 0;
            $pph = 0;
            $boolDate = true;
        }
    } else {
        $boolContinue = true;
        $stockpileContractId = 'NULL';
        $salesId = 'NULL';
        $freightId = 'NULL';
        $laborId = 'NULL';
        $vendorId1 = 'NULL';
        $boolDate = true;

        if ($invoiceId != '' && $invoiceId != 'NULL') {
            $sql = "SELECT DATE_FORMAT(invoice_date,'%Y-%m-%d') AS invoiceDate2 FROM invoice WHERE invoice_id = {$invoiceId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if ($result !== false && $result->num_rows == 1) {
                $row = $result->fetch_object();
                $invoiceDate2 = $row->invoiceDate2;
            }

            if ($invoiceDate2 <= $newDate) {
                $boolDate = true;
            } else {
                $boolDate = false;
            }
        }
        /*if($shipment_Id == '') {
            $shipment_Id = 'NULL';
        }
		if($stockpileContract_Id == '') {
            $stockpileContract_Id = 'NULL';
        }*/
        if ($paymentFor == 8) {
            $vendorBank = $gvBankId;
            $originalAmount = $grandTotal;
            $amount = $grandTotal;
            $totalPrice = $grandTotal;
        } else if ($paymentFor == 10) {
            $vendorBank = $gvPCBankId;
        }

        if ($generalVendorId == '') {
            $generalVendorId = 'NULL';
        }
        if ($price == '') {
            $price = 'NULL';
        }
        if ($qty == '') {
            $qty = 'NULL';
        }
        if ($paymentType == 1 && ($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 7 || $paymentFor == 8 || $paymentFor == 10)) {
            $ppn1 = $ppn1;
            $pph1 = $pph1;
            //$grandTotal = $amount;
            //$totalPrice = $amount;

        } else if ($paymentType == 1) {

            $ppn1 = 0;
            $pph1 = 0;
            //$grandTotal = $amount;
        }
        if ($paymentFor == 7 || $paymentMethod == 2) {
            $ppn = 0;
            $pph = 0;
        }

        if ($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 8 || $paymentFor == 10) {
            if (is_numeric($ppn1)) {
                $ppn = $ppn1;
            } else {
                $ppn = 0;
            }

            if (is_numeric($pph1)) {
                $pph = $pph1;
            } else {
                $pph = 0;
            }


        }
    }

    if ($boolDate) {
        if ($boolBank) {
            if ($paymentDate != '' && $paymentType != '' && $paymentMethod != '' && $accountId != '' && $bankId != '' &&
                $currencyId != '' && $boolContinue) {
                if ($paymentMethod == 1 && $paymentType == 2 && ($paymentFor == 0 || $paymentFor == 1 || $paymentFor == 2 || $paymentFor == 3 || $paymentFor == 9)) {
                    // <editor-fold defaultstate="collapsed" desc="PAYMENT - OUT - PKS Curah/FC/UC - UPDATE TRANSACTION">
                    if ($amount < $grandTotal || ($amount != 0 && $amount > $grandTotal)) {
                        $boolContinue2 = false;
                    } else {
                        $boolUpdateTransaction = true;

                        if ($paymentFor == 0) {
                            $whereProperty = " AND stockpile_contract_id = {$stockpileContractId} ";
                            $updateProperty = " payment_id ";

                            $sql = "SELECT GROUP_CONCAT(transaction_id) AS transaction_ids "
                                . "FROM `transaction` "
                                . "WHERE stockpile_contract_id = {$stockpileContractId} ";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $slipNos = $row->transaction_id;
                            }
                        } else if ($paymentFor == 1) {

                            $paymentIds = '';

                            if (isset($_POST['checkedSlipsDP'])) {
                                $checksDP = $_POST['checkedSlipsDP'];
                                for ($i = 0; $i < sizeof($checksDP); $i++) {
                                    if ($paymentIds == '') {
                                        $paymentIds .= $checksDP[$i];
                                    } else {
                                        $paymentIds .= ',' . $checksDP[$i];
                                    }
                                }
                            }

                            $whereProperty = " AND p.vendor_id = {$vendorId1} AND p.payment_id IN ({$paymentIds})";
                            $updateProperty = " payment_id ";
                        } else if ($paymentFor == 2) {

                            $paymentIds = '';

                            if (isset($_POST['checkedSlipsDP'])) {
                                $checksDP = $_POST['checkedSlipsDP'];
                                for ($i = 0; $i < sizeof($checksDP); $i++) {
                                    if ($paymentIds == '') {
                                        $paymentIds .= $checksDP[$i];
                                    } else {
                                        $paymentIds .= ',' . $checksDP[$i];
                                    }
                                }
                            }

                            $whereProperty = " AND p.freight_id = {$freightId} AND p.payment_id IN ({$paymentIds})";
                            $updateProperty = " fc_payment_id ";
                        } else if ($paymentFor == 9) {

                            $paymentIds = '';

                            if (isset($_POST['checkedSlipsDP'])) {
                                $checksDP = $_POST['checkedSlipsDP'];
                                for ($i = 0; $i < sizeof($checksDP); $i++) {
                                    if ($paymentIds == '') {
                                        $paymentIds .= $checksDP[$i];
                                    } else {
                                        $paymentIds .= ',' . $checksDP[$i];
                                    }
                                }
                            }

                            //$whereProperty = " AND p.vendor_handling_id = {$vendorHandlingId} AND p.handlingContract = {$handlingContract} AND p.payment_id IN ({$paymentIds})";
                            $whereProperty = " AND p.vendor_handling_id = {$vendorHandlingId} AND p.payment_id IN ({$paymentIds})";
                            $updateProperty = " hc_payment_id ";
                        } else if ($paymentFor == 3) {
                            $whereProperty = " AND labor_id = {$laborId} ";
                            $updateProperty = " uc_payment_id ";
                        }

                        if (isset($_POST['checkedSlips'])) {
                            $checks = $_POST['checkedSlips'];
                            for ($i = 0; $i < sizeof($checks); $i++) {
                                if ($slipNos == '') {
                                    $slipNos .= $checks[$i];
                                } else {
                                    $slipNos .= ',' . $checks[$i];
                                }
                            }
                        }

                        if ($grandTotal <= 0) {
                            $amount = $totalPrice;

                            $sql = "SELECT p.*, f.pph AS fpph, vh.`pph` AS vhpph , v.`ppn` AS vppn
							FROM `payment` p 
							LEFT JOIN freight f ON f.`freight_id` = p.`freight_id` 
							LEFT JOIN vendor_handling vh ON vh.`vendor_handling_id` = p.`vendor_handling_id`
							LEFT JOIN vendor v ON v.`vendor_id` = p.`vendor_id`
                            WHERE p.payment_type = {$paymentType}
                            AND p.payment_method = 2 AND p.payment_status = 0
                            {$whereProperty}
                            AND p.amount_converted > 0
                            AND p.company_id = {$_SESSION['companyId']}
                            ORDER BY p.amount_converted ASC";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                            $availableDP1 = '';
                            if ($result !== false && $result->num_rows > 0) {
                                //$balanceLeft = $totalPrice;
                                while ($row = $result->fetch_object()) {
                                    /* $dp = $row->amount_converted;
                                     $availableDP = $dp - $balanceLeft;
                                     if ($availableDP > 0) {
                                         $sql2 = "UPDATE payment SET amount = " . $availableDP / $row->exchange_rate . ", amount_converted = " . $availableDP . " WHERE payment_id = {$row->payment_id}";
                                         $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                                         //  break;
                                     } elseif ($availableDP <= 0) {
                                         $balanceLeft = $balanceLeft - $row->amount_converted;
                                         $sql2 = "UPDATE payment SET amount = 0, amount_converted = 0, pph_amount = 0  WHERE payment_id = {$row->payment_id}";
                                         $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                                     }*/

                                    $availableDP = $totalPrice2;

                                    //$availableDP1 = '';
                                    if ($availableDP > 0) {


                                        $totalTaken = 0;
                                        $sql = "SELECT SUM(amount_converted) AS total_taken FROM payment WHERE payment_id = {$row->payment_id}";
                                        $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        if ($resultTaken !== false && $resultTaken->num_rows == 1) {
                                            $rowTaken = $resultTaken->fetch_object();
                                            $totalTaken = $rowTaken->total_taken;
                                        }

                                        if ($availableDP >= $totalTaken && $availableDP1 == '') {
                                            $availableDP1 = $availableDP - $totalTaken;

                                            $quantityTaken = 0;

                                            echo 'BB';
                                        } else if ($availableDP >= $totalTaken && $availableDP1 > $totalTaken) {
                                            echo 'AA';
                                            if ($availableDP1 !== '') {
                                                $quantityTaken = $totalTaken - $availableDP1;
                                            } else {
                                                $quantityTaken = $totalTaken - $availableDP;
                                            }

                                            $availableDP = 0;

                                        } else if ($availableDP1 < $totalTaken) {
                                            echo 'AA';
                                            if ($availableDP1 !== '') {
                                                $quantityTaken = $totalTaken - $availableDP1;
                                            } else {
                                                $quantityTaken = $totalTaken - $availableDP;
                                            }

                                            $availableDP = 0;

                                        }
                                        //$availableDP = 0;
                                    }

                                    $sql2 = "UPDATE payment SET amount = " . $quantityTaken / $row->exchange_rate . ", amount_converted = " . $quantityTaken . " 
							 WHERE payment_id = {$row->payment_id}";
                                    $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);


                                    echo $sql2;
                                    echo '<br>';
                                    echo $availableDP;
                                    echo '<br>';
                                    echo $totalTaken;
                                    echo '<br>';
                                    echo $availableDP1;
                                }
                            }
                        } else {

                            ///if($freightId != 312 && $stockpileLocation != 8){
                            $amount = $totalPrice;

                            $sql = "UPDATE `payment` p SET p.amount = 0, p.amount_converted = 0
                            WHERE p.payment_type = {$paymentType}
                            AND p.payment_method = 2
                            {$whereProperty}";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            //}
                        } //edited by alan
                    }
                    // </editor-fold>
                } elseif ($paymentMethod == 1 && $paymentType == 1 && ($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 8)) {
                    // <editor-fold defaultstate="collapsed" desc="PAYMENT - IN - Other with GV">
                    if ($invoiceId != 'NULL') {
                        $sql = "SELECT p.*, b.currency_id AS b_currency_id
                        FROM `payment` p
                        INNER JOIN bank b
                        ON b.bank_id = p.bank_id
                        WHERE p.payment_type = {$paymentType}
                        AND p.payment_method = 2 AND p.payment_status = 0
                        AND p.invoice_id = {$invoiceId}
                        AND p.amount_converted > 0
                        AND p.company_id = {$_SESSION['companyId']}
                        ORDER BY p.payment_id ASC";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($result !== false && $result->num_rows > 0) {
                            while ($row = $result->fetch_object()) {
                                if ($row->b_currency_id == $bankCurrencyId && $bankCurrencyId == $journalCurrencyId) {
                                    // IDR - IDR - IDR
                                    $addedAmount = $row->amount;
                                } elseif ($row->b_currency_id != $bankCurrencyId && $bankCurrencyId == $journalCurrencyId) {
                                    // USD - IDR - IDR
                                    $addedAmount = $row->amount * $row->exchange_rate;
                                } elseif ($row->b_currency_id == $bankCurrencyId && $bankCurrencyId != $journalCurrencyId) {
                                    // USD - USD - IDR
                                    $addedAmount = $row->amount;
                                } elseif ($row->b_currency_id != $bankCurrencyId && $bankCurrencyId != $journalCurrencyId) {
                                    // IDR - USD - IDR
                                    $addedAmount = $row->amount / $row->exchange_rate;
                                }
                                $sql2 = "UPDATE payment SET amount = 0, amount_converted = 0 WHERE payment_id = {$row->payment_id}";
                                $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                            }
                        }

                        $amount = $amount + $addedAmount;
                    }

                    // </editor-fold>
                } elseif ($paymentMethod == 1 && $paymentType == 2 && ($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 8)) {
                    // <editor-fold defaultstate="collapsed" desc="PAYMENT - OUT - Other with GV">
                    if ($generalVendorId != 'NULL') {
                        $sql = "SELECT p.*, b.currency_id AS b_currency_id
                        FROM `payment` p
                        INNER JOIN bank b
                        ON b.bank_id = p.bank_id
                        WHERE p.payment_type = {$paymentType}
                        AND p.payment_method = 2 AND p.payment_status = 0
                        AND p.invoice_id = {$invoiceId}
                        AND p.amount_converted > 0
                        AND p.company_id = {$_SESSION['companyId']}
                        ORDER BY p.payment_id ASC";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if ($result !== false && $result->num_rows > 0) {
                            while ($row = $result->fetch_object()) {
                                if ($row->b_currency_id == $bankCurrencyId && $bankCurrencyId == $journalCurrencyId) {
                                    // IDR - IDR - IDR
                                    //$addedAmount = $row->amount;
                                    $addedAmount = 0;
                                } elseif ($row->b_currency_id != $bankCurrencyId && $bankCurrencyId == $journalCurrencyId) {
                                    // USD - IDR - IDR
                                    //$addedAmount = $row->amount * $row->exchange_rate;
                                    $addedAmount = 0 * $row->exchange_rate;
                                } elseif ($row->b_currency_id == $bankCurrencyId && $bankCurrencyId != $journalCurrencyId) {
                                    // USD - USD - IDR
                                    //$addedAmount = $row->amount;
                                    $addedAmount = 0;
                                } elseif ($row->b_currency_id != $bankCurrencyId && $bankCurrencyId != $journalCurrencyId) {
                                    // IDR - USD - IDR
                                    //$addedAmount = $row->amount / $row->exchange_rate;
                                    $addedAmount = 0 * $row->exchange_rate;
                                }
                                $sql2 = "UPDATE payment SET amount = 0, amount_converted = 0 WHERE payment_id = {$row->payment_id}";
                                $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                            }
                        }

                        $amount = $amount + $addedAmount;
                    }
                }
                // </editor-fold>

//        elseif($paymentMethod == 2 && $paymentType == 2) {
//            $ppn = 0;
//            $pph = 0;
//        }
                elseif ($paymentMethod == 2 && $paymentType == 1 && $paymentFor != 4) {
                    // <editor-fold defaultstate="collapsed" desc="DOWN PAYMENT - IN - PKS">
                    $sql = "SELECT shipment_id, COALESCE(dp_amount, 0) AS dp_amount FROM shipment WHERE sales_id = {$salesId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($result->num_rows > 0) {
                        $tempStamp = 1;
                        while ($row = $result->fetch_object()) {

                            $downPayment1 = $myDatabase->real_escape_string($_POST['downPayment' . $row->shipment_id]);
                            //$ppn = $myDatabase->real_escape_string($_POST['ppnSales'. $row->shipment_id]);
                            $ppn = 0;
                            $downPayment = $downPayment1 + $ppn;
                            if ($downPayment != '' && $downPayment != 0) {
                                if ($exchangeRate == '') {
                                    $exchangeRate = 1;
                                }

                                if ($bankCurrencyId == $currencyId && $currencyId != $journalCurrencyId) {
                                    $downPaymentDetailConverted = $downPayment;
                                    $downPaymentDetailJournal = $downPayment * $exchangeRate;
                                } elseif ($bankCurrencyId != $currencyId && $currencyId != $journalCurrencyId) {
                                    $downPaymentDetailConverted = $downPayment / $exchangeRate;
                                    $downPaymentDetailJournal = $downPayment;
                                } elseif ($bankCurrencyId != $currencyId && $currencyId == $journalCurrencyId) {
                                    $downPaymentDetailConverted = $downPayment * $exchangeRate;
                                    $downPaymentDetailJournal = $downPayment * $exchangeRate;
                                } else {
                                    $downPaymentDetailConverted = $downPayment;
                                    $downPaymentDetailJournal = $downPayment;
                                }


                                $convertedDownPayment = $row->dp_amount + $downPaymentDetailConverted;

                                //untuk table payment
                                //$amount = $amount + $downPayment;
                                //$originalAmount = $originalAmount + $downPayment;

                                $amount = $amount;
                                $originalAmount = $originalAmount;

                                //amount = ikut cur payment
                                //amount_converted = ikut cur sales
                                //amount_journal = idr
                                $sql = "INSERT INTO payment_detail (payment_id, amount, amount_converted, amount_journal, shipment_id) VALUES ("
                                    . "{$tempStamp}, {$downPayment}, {$downPaymentDetailConverted}, {$downPaymentDetailJournal}, {$row->shipment_id})";
                                $resultUpdate = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                $sql = "UPDATE shipment SET dp_amount = {$convertedDownPayment} WHERE shipment_id = {$row->shipment_id}";
                                $resultUpdate = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    }

                    if ($amount <= 0) {
                        $boolContinue2 = false;
                    }
                    // </editor-fold>
                } elseif ($paymentMethod == 1 && $paymentType == 1 && $paymentFor == 1) {
                    // <editor-fold defaultstate="collapsed" desc="PAYMENT - IN - PKS">


                    if ($exchangeRate == '') {
                        $exchangeRate = 1;
                    }

                    if ($bankCurrencyId == $currencyId && $currencyId != $journalCurrencyId) {
                        // USD - USD - IDR
                        $amountConverted = $amount;
                        $grandTotalConverted = $grandTotal;
                    } elseif ($bankCurrencyId != $currencyId && $currencyId != $journalCurrencyId) {
                        // IDR - USD - IDR
                        $amountConverted = $amount / $exchangeRate;
                        $grandTotalConverted = $grandTotal;
                    } elseif ($bankCurrencyId != $currencyId && $currencyId == $journalCurrencyId) {
                        // USD - IDR - IDR
                        $amountConverted = $amount * $exchangeRate;
                        $grandTotalConverted = $grandTotal;
                    } else {
                        $amountConverted = $amount;
                        $grandTotalConverted = $grandTotal;
                    }

                    if ($amountConverted < $grandTotalConverted || ($amountConverted != 0 && $amountConverted > $grandTotalConverted)) {
                        $boolContinue2 = false;
                    } else {

                        $boolUpdateShipment = true;

                        if (isset($_POST['checkedSlips'])) {
                            $checks = $_POST['checkedSlips'];
                            $tempStamp = 1;
                            for ($i = 0; $i < sizeof($checks); $i++) {
                                if ($shipmentNos == '') {
                                    $shipmentNos .= $checks[$i];
                                } else {
                                    $shipmentNos .= ',' . $checks[$i];
                                }

                                $sql = "SELECT sh.*
                                FROM shipment sh
                                WHERE sh.shipment_id = {$checks[$i]}";
                                $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $rowShipment = $resultShipment->fetch_object();
                                $shipmentPayment = $rowShipment->invoice_amount - $rowShipment->dp_amount;

                                if ($bankCurrencyId == $currencyId && $currencyId != $journalCurrencyId) {
                                    $shipmentAmount = $shipmentPayment;
                                    $shipmentPaymentConverted = $shipmentPayment;
                                    $shipmentPaymentJournal = $shipmentPayment * $exchangeRate;
                                } elseif ($bankCurrencyId != $currencyId && $currencyId != $journalCurrencyId) {
                                    $shipmentAmount = $shipmentPayment * $exchangeRate;
                                    $shipmentPaymentConverted = $shipmentPayment;
                                    $shipmentPaymentJournal = $shipmentPayment * $exchangeRate;
                                } elseif ($bankCurrencyId != $currencyId && $currencyId == $journalCurrencyId) {
                                    $shipmentAmount = $shipmentPayment / $exchangeRate;
                                    $shipmentPaymentConverted = $shipmentPayment;
                                    $shipmentPaymentJournal = $shipmentPayment;
                                } else {
                                    $shipmentAmount = $shipmentPayment;
                                    $shipmentPaymentConverted = $shipmentPayment;
                                    $shipmentPaymentJournal = $shipmentPayment;
                                }


                                $sql = "INSERT INTO payment_detail (payment_id, amount, amount_converted, amount_journal, shipment_id) VALUES ("
                                    . "{$tempStamp}, {$shipmentAmount}, {$shipmentPaymentConverted}, {$shipmentPaymentJournal}, {$checks[$i]})";
                                $resultUpdate = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                            }
                        }

                        if ($shipmentNos == "") {
                            $boolContinue2 = false;
                        }
                    }
                    // </editor-fold>
                }

                if ($boolContinue2) {
                    $sql = "select DATE_FORMAT(STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), '%y%m') AS slip_prefix from dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $rowSlip = $resultSlip->fetch_object();
                    $checkPaymentNo = $rowSlip->slip_prefix;

//            $checkPaymentNo = $currentYearMonth;

                    $sql = "SELECT LPAD(RIGHT(payment_no, 5) + 1, 5, '0') AS next_id FROM payment WHERE company_id = {$_SESSION['companyId']} AND bank_id = {$bankId} AND payment_no LIKE '{$checkPaymentNo}%' ORDER BY payment_no DESC LIMIT 1";
                    $resultPaymentNo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if ($resultPaymentNo->num_rows == 0) {
                        $sql = "SELECT LPAD(1, 5, '0') AS next_id FROM dual LIMIT 1";
                        $resultPaymentNo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }
                    $rowPaymentNo = $resultPaymentNo->fetch_object();
                    $nextPaymentNo = $rowPaymentNo->next_id;
                    $paymentNo = $checkPaymentNo . '-' . $nextPaymentNo;

                    if ($exchangeRate == '') {
                        $exchangeRate = 1;
                    }

                    if ($bankCurrencyId == $currencyId && $currencyId != $journalCurrencyId) {
                        // USD - USD - IDR
                        $originalAmountConverted = $originalAmount * $exchangeRate;
                        $amountConverted = $amount * $exchangeRate;
                        $ppnConverted = $ppn;
                        $pphConverted = $pph;
                        $amountJournal = $originalAmount * $exchangeRate;
                        $ppnJournal = $ppn * $exchangeRate;
                        $pphJournal = $pph * $exchangeRate;
                    } elseif ($bankCurrencyId != $currencyId && $currencyId != $journalCurrencyId) {
                        // IDR - USD - IDR
                        $originalAmountConverted = $originalAmount / $exchangeRate;
                        $amountConverted = $amount / $exchangeRate;
                        $ppnConverted = $ppn / $exchangeRate;
                        $pphConverted = $pph / $exchangeRate;
                        $amountJournal = $originalAmount;
                        $ppnJournal = $ppn;
                        $pphJournal = $pph;
                        $currencyId = $bankCurrencyId;
                    } elseif ($bankCurrencyId != $currencyId && $currencyId == $journalCurrencyId) {
                        // USD - IDR - IDR
                        $originalAmountConverted = $originalAmount * $exchangeRate;
                        $amountConverted = $amount * $exchangeRate;
                        $ppnConverted = $ppn * $exchangeRate;
                        $pphConverted = $pph * $exchangeRate;
                        $amountJournal = $originalAmount * $exchangeRate;
                        $ppnJournal = $ppn * $exchangeRate;
                        $pphJournal = $pph * $exchangeRate;
                        $currencyId = $bankCurrencyId;
                    } else {
                        $originalAmountConverted = $originalAmount;
                        $amountConverted = $amount;
                        $ppnConverted = $ppn;
                        $pphConverted = $pph;
                        $amountJournal = $originalAmount;
                        $ppnJournal = $ppn;
                        $pphJournal = $pph;

                    }
                    if ($freightId != '' && $fc_ppn_dp != 0) {
                        $amountJournal = $originalAmount - $fc_ppn_dp;
                    }elseif ($freightId != '' && $ppn != 0) {
                        $amountJournal = $originalAmount;
                    }elseif ($freightId != '' && $ppn == 0) {
                        $amountJournal = $amountConverted;
                    }
                    //closingDate
                    $newPaymentDate = implode("-", array_reverse(explode("/", $paymentDate)));
					echo $newPaymentDate;
                    //Belum Fix StockpileContractId nya gatau yang mana
                    $checkClosingDate = explode('-', closingDate($newPaymentDate, 'Payment - Payment'));
                    $boolClosing = $checkClosingDate[0];
                    $closingDate = $checkClosingDate[1];

                    if ($boolClosing) {
                        $sqlaa = "INSERT INTO payment (payment_no, payment_date, payment_type, payment_type2, payment_method, account_id, bank_id, stockpile_contract_id, invoice_id, payment_cash_id,"
                            . "vendor_id, sales_id, freight_id, vendor_handling_id, labor_id, stockpile_contract_id_2,shipment_id, vendor_bank_id, payment_notes, remarks, tax_invoice, invoice_no, currency_id, "
                            . "exchange_rate, qty, price, termin, amount, amount_converted, original_amount, original_amount_converted, ppn_amount, ppn_amount_converted, "
                            . "pph_amount, pph_amount_converted, amount_journal, ppn_journal, pph_journal, general_vendor_id, payment_location, cheque_no, entry_by, entry_date, stockpile_location, invoice_date,period_from,period_to,remarks2,handlingContract,freightContract,curahContract,freightDP,handlingDP,curahDP) VALUES ("
                            . "'{$paymentNo}', STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), {$paymentType}, {$payment_type},{$paymentMethod}, {$accountId}, {$bankId}, "
                            . "{$stockpileContractId}, {$invoiceId}, {$paymentCashId}, {$vendorId1}, {$salesId}, {$freightId}, {$vendorHandlingId}, {$laborId}, {$stockpileContract_Id}, {$shipment_Id}, {$vendorBank}, '{$notes}', '{$remarks}', "
                            . "'{$taxInvoice}', '{$invoiceNo}', {$currencyId}, {$exchangeRate}, "
                            . "{$qty}, {$price}, {$termin},{$amount}, {$amountConverted}, {$originalAmount}, {$originalAmountConverted}, {$ppn}, {$ppnConverted}, "
                            . "{$pph}, {$pphConverted}, {$amountJournal}, {$ppnJournal}, {$pphJournal}, {$generalVendorId}, {$paymentLocation}, '{$chequeNo}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$stockpileLocation},STR_TO_DATE('$invoiceDate', '%d/%m/%Y %H:%i:%s'),STR_TO_DATE('{$periodPaymentFrom}', '%d/%m/%Y'),STR_TO_DATE('{$periodPaymentTo}', '%d/%m/%Y'), '{$remarks2}', {$handlingContract}, {$freightContract}, {$curahContract},{$downPaymentFC},{$downPaymentHC},{$downPaymentC})";
                        $result = $myDatabase->query($sqlaa, MYSQLI_STORE_RESULT);
                    //    echo $sqlaa;

                        if ($result !== false) {
                            $paymentId = $myDatabase->insert_id;

                            $return_value = '|OK|Payment has inserted successfully.|' . $paymentId . '|';

                            if ($boolUpdateTransaction) {
                                $sql = "UPDATE `transaction` SET {$updateProperty} = {$paymentId} WHERE transaction_id IN ($slipNos)";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                $sql = "SELECT transaction_id, sync_status FROM `transaction` WHERE transaction_id IN ($slipNos)";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if ($result !== false && $result->num_rows > 0) {
                                    while ($row = $result->fetch_object()) {
                                        $syncStatus = 0;
                                        if ($row->sync_status == 1) {
                                            $syncStatus = 2;
                                        }

                                        $sql2 = "UPDATE `transaction` SET sync_status = {$syncStatus} WHERE transaction_id = {$row->transaction_id}";
                                        $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                                    }
                                }
                            }

                              //add by Yeni
							if($invoiceId == 'NULL'){
								$invoiceId = 0;
							}else if($pengajuanIdOA == 'NULL'){
								$pengajuanIdOA = 0;
							}else if($stockpileContractId == 'NULL'){
								$stockpileContractId = 0;
							}
							
							//echo "OA ". $pengajuanIdOA;
                            if ($invoiceId != 0) { //General
                                $sqlLog = "UPDATE logbook_new set payment_id = {$paymentId}, status1 = 3 where invoice_id = {$invoiceId}";
                                $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);

                                $sqlInv = "UPDATE invoice set invoice_status = 1 where invoice_id = {$invoiceId}";
                                $resultInv = $myDatabase->query($sqlInv, MYSQLI_STORE_RESULT);
                                // echo "INV". $sqlInv;
                            } else if($pengajuanIdOA != '' || $pengajuanIdOA != 0 ){ //SEMENTEARA
								$sqlLog = "UPDATE logbook_new set payment_id = {$paymentId}, status1 = 3 where ppayment_id = {$pengajuanIdOA}";
                                $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
								//echo "Lobook " . $pengajuanIdOA;

                                $sqlOA = "UPDATE pengajuan_payment set status = 3, payment_id = {$paymentId} where idPP = {$pengajuanIdOA}";
                                $resultOA = $myDatabase->query($sqlOA, MYSQLI_STORE_RESULT);
								
							} else if ($stockpileContractId != '') { //KONTRAK PKS
                                //INSERT LOGBOOK INVOICE
                                $sqlPurchasing = "SELECT pur.purchasing_id FROM purchasing pur
										LEFT JOIN po_pks po ON po.purchasing_id = pur.purchasing_id
										LEFT JOIN po_contract poc ON poc.po_pks_id = po.po_pks_id
										LEFT JOIN contract con ON con.contract_id = poc.contract_id
										LEFT JOIN stockpile_contract sc ON sc.contract_id = con.contract_id
										WHERE stockpile_contract_id = {$stockpileContractId}";
                                $resultPurchasing = $myDatabase->query($sqlPurchasing, MYSQLI_STORE_RESULT);
                                if ($resultPurchasing !== false && $resultPurchasing->num_rows == 1) {
                                    $rowPurchasing = $resultPurchasing->fetch_object();
                                    $purchasingId = $rowPurchasing->purchasing_id;

                                    $sqlLog = "UPDATE logbook_new set payment_id = {$paymentId}, status1 = 3 where purchasing_Id = {$purchasingId}";
                                    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);

                                    $sqlPurchasing = "UPDATE purchasing set status = 2, payment_id = {$paymentId} where purchasing_Id = {$purchasingId}";
                                    $resultPurchasing = $myDatabase->query($sqlPurchasing, MYSQLI_STORE_RESULT);

                                }
                            }

                            if ($boolUpdateShipment) {
                                $sql = "UPDATE `shipment` SET payment_id = {$paymentId} WHERE shipment_id IN ($shipmentNos)";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }

                            if ($tempStamp != '') {
                                $sql = "UPDATE payment_detail SET payment_id = {$paymentId} WHERE payment_id = {$tempStamp}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                            if ($paymentFor == 0) {
                                $sql = "SELECT con.contract_id, con.price_converted * con.quantity AS contract_amount, SUM(p.amount_converted) AS paid_amount, v.ppn, v.pph
                            FROM stockpile_contract sc
                            INNER JOIN `contract` con
                                ON con.contract_id = sc.contract_id
                            INNER JOIN `payment` p
                                ON p.stockpile_contract_id = sc.stockpile_contract_id
							INNER JOIN vendor v
								ON v.vendor_id = con.vendor_id
                            WHERE sc.stockpile_contract_id = {$stockpileContractId}
                            AND con.company_id = {$_SESSION['companyId']} AND p.payment_status = 0
                            GROUP BY sc.stockpile_contract_id";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if ($result->num_rows > 0) {
                                    $row = $result->fetch_object();
                                    $ppn = $row->ppn;
                                    $pph = $row->pph;

                                    $ppnAmount = ($ppn / 100) * $row->contract_amount;
                                    $pphAmount = ($pph / 100) * $row->contract_amount;
                                    $total = $pphAmount + $ppnAmount + $row->contract_amount;


                                    if ($row->paid_amount >= $total) {
                                        $sqlUpdate = "UPDATE `contract` SET payment_status = 1 WHERE contract_id = {$row->contract_id}";
                                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                                    }
                                }
                            }

                            if ($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 8) {
                                if ($paymentMethod == 1) {
                                    $sqlUpdate = "UPDATE `invoice` SET payment_status = 1 WHERE invoice_id = {$invoiceId}";
                                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

                                }
                            }


                            $sql = "SELECT b.* FROM bank b LEFT JOIN payment p ON p.`bank_id` = b.`bank_id` WHERE p.payment_id = {$paymentId}";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if ($result !== false && $result->num_rows > 0) {
                                while ($row = $result->fetch_object()) {
                                    $bankType = $row->bank_type;
                                    $bankStockpile = $row->stockpile_id;

                                }
                            }


                            if ($paymentFor == 10) {
                                $sqlUpdate = "UPDATE `payment_cash` SET payment_id = {$paymentId}, payment_cash_method = {$paymentMethod} WHERE payment_id IS NULL AND entry_by = {$_SESSION['userId']}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

                                if ($paymentMethod == 1) {
                                    $sqlUpdate = "UPDATE `payment_cash` SET payment_cash_status = 1 WHERE payment_id = {$paymentId}";
                                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

                                }
                            }
                            if ($paymentFor == 10 && $bankType == 2) {
                                insertGeneralLedger($myDatabase, 'PETTY CASH', "NULL", "NULL", "NULL", "NULL", $paymentId);
                                insertReportGL($myDatabase, 'PETTY CASH', "NULL", "NULL", "NULL", "NULL", $paymentId);
                            } elseif ($bankStockpile != 10) {
                                insertGeneralLedger($myDatabase, 'PAYMENT ADMIN', "NULL", "NULL", "NULL", "NULL", $paymentId);
                                insertReportGL($myDatabase, 'PAYMENT ADMIN', "NULL", "NULL", "NULL", "NULL", $paymentId);
                            } else {
                                insertGeneralLedger($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", "NULL", $paymentId);
                                insertReportGL($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", "NULL", $paymentId);
                            }
                            unset($_SESSION['payment']);
                        } else {
                            $return_value = '|FAIL|Failed insert payment.|' . $sqlaa . '|';
                            if ($tempStamp != '') {
                                $sql = "DELETE FROM payment_detail WHERE payment_id = {$tempStamp}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    } else {
                        echo $closingDate;
                        die();
                    }//close closing date
                } else {
                    $return_value = '|FAIL|Please insert correct amount.||';
                }
            } else {
                $return_value = '|FAIL|Please fill the required fields.||';
                echo $paymentDate;
                echo $paymentType;
                echo $paymentMethod;
                echo $accountId;
                echo $bankId;
                echo $currencyId;
                echo $boolContinue;

            }
        } else {
            $return_value = '|FAIL|Please Choose Different Bank.||';
        }
    } else {
        $return_value = '|FAIL|Tanggal Input harus sama/melebihi tanggal kontrak/invoice.|';
    }
    echo $return_value;

    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'payment_account_data') {
    // <editor-fold defaultstate="collapsed" desc="payment_account_data">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $accountType = $myDatabase->real_escape_string($_POST['accountType']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $accountName = $myDatabase->real_escape_string($_POST['accountName']);
    // </editor-fold>
    
    if($accountNo != '' && $accountName != '') {
        $sql = "SELECT * FROM `account` WHERE UPPER(account_no) = UPPER('{$accountNo}')";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result !== false && $result->num_rows == 0) {
            $sql = "INSERT INTO `account` (account_type, account_no, account_name, entry_by, entry_date) VALUES ("
                    . "{$accountType}, '{$accountNo}', '{$accountName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $accountId = $myDatabase->insert_id;
                
                $return_value = '|OK|Account has successfully inserted.|ACCOUNT~'. $accountId .'|';
            } else {
                $return_value = '|FAIL|Insert account failed.||';
            }
        } else {
            $return_value = '|FAIL|Account No. already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'payment_bank_data') {
    // <editor-fold defaultstate="collapsed" desc="payment_bank_data">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
    $bankAccountNo = $myDatabase->real_escape_string($_POST['bankAccountNo']);
    $bankAccountName = $myDatabase->real_escape_string($_POST['bankAccountName']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $openingBalance = str_replace(",", "", $myDatabase->real_escape_string($_POST['openingBalance']));
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $bankType = $myDatabase->real_escape_string($_POST['bankType']);
    $bankCode = $myDatabase->real_escape_string($_POST['bankCode']);
    // </editor-fold>
    
    if($bankName != '' && $bankAccountNo != '' && $bankAccountName != '' && $currencyId != '' && $accountId != '' && $openingBalance != '' &&
            $bankType != '' && $bankCode != '') {
        $sql = "SELECT * FROM `bank` WHERE UPPER(bank_name) = UPPER('{$bankName}') AND UPPER(bank_account_no) = UPPER('{$bankAccountNo}')";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result !== false && $result->num_rows == 0) {
            $sql = "INSERT INTO `bank` (bank_name, bank_type, bank_code, bank_account_no, bank_account_name, currency_id, opening_balance, account_id, entry_by, entry_date) VALUES ("
                    . "'{$bankName}', {$bankType}, '{$bankCode}', '{$bankAccountNo}', UPPER('{$bankAccountName}'), {$currencyId}, {$openingBalance}, {$accountId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $bankId = $myDatabase->insert_id;
                
                $return_value = '|OK|Bank has successfully inserted.|BANK~'. $bankId .'|';
            } else {
                $return_value = '|FAIL|Insert bank failed.||';
            }
        } else {
            $return_value = '|FAIL|Bank Account already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'payment_general_vendor_data') {
    // <editor-fold defaultstate="collapsed" desc="payment_general_vendor_data">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    $vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
	$npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>
    
    if($vendorName != '' && $vendorAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
        $sql = "SELECT * FROM `general_vendor` WHERE UPPER(general_vendor_name) = UPPER('{$vendorName}')";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;
            
            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }
            
            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }
            
            if($ppn == 'NONE') {
                $ppn = 0;
            }
            
            if($pph == 'NONE') {
                $pph = 0;
            }
            
            $sql = "INSERT INTO `general_vendor` (general_vendor_name, general_vendor_address, npwp, npwp_name, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                    . "'{$vendorName}', '{$vendorAddress}', '{$npwp}', '{$npwp_name}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $vendorId = $myDatabase->insert_id;

                $return_value = '|OK|General Vendor has successfully inserted.|GENERALVENDOR~'. $vendorId .'|';
            } else {
                $return_value = '|FAIL|Insert general vendor failed.'. $sql .'||';
            }
        } else {
            $return_value = '|FAIL|General Vendor already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'logout') {
    // <editor-fold defaultstate="collapsed" desc="Logout and go back to index page">
    
    session_unset();
    echo 1;
    // </editor-fold>
}

elseif (isset($_POST['action']) && $_POST['action'] == 'import_contract') {  
    // <editor-fold defaultstate="collapsed" desc="import_contract">
    
    $return_value = '';
    $boolContinue = true;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    
    if($stockpileId == '') {
        $stockpileId = 0;
    }
    
    // </editor-fold>
    
    if(isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import";
        
        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if($boolContinue) {

            $importResult = excelImportContract($myDatabase, $attachmentPath, $stockpileId);
            $importResult = explode("|", $importResult);

            if($importResult[0] == 'OK') {
                $return_value = '|OK|'. $importResult[1] .'|';
            } else {
                $return_value = '|FAIL|'. $importResult[1] .'|';
            }

        }
    } else {
        $return_value = '|FAIL|Please fill required fields.|';
    }
    
    echo $return_value;
    
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_vendor_branch') {
    // <editor-fold defaultstate="collapsed" desc="module_data">
    
    $return_value = '';
    //$boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	$vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
	$branchPKS = $myDatabase->real_escape_string($_POST['branchPKS']);
	
	$freightId = $myDatabase->real_escape_string($_POST['freightId']);
	$branchOA = $myDatabase->real_escape_string($_POST['branchOA']);
	
	$laborId = $myDatabase->real_escape_string($_POST['laborId']);
	$branchOB = $myDatabase->real_escape_string($_POST['branchOB']);
	
	$vendorHandlingId = $myDatabase->real_escape_string($_POST['vendorHandlingId']);
    $branchHC = $myDatabase->real_escape_string($_POST['branchHC']);
	
	$generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId']);
	$branchGV = $myDatabase->real_escape_string($_POST['branchGV']);
    // </editor-fold>
    
    //if ($moduleId == '') {
    //    $boolNew = true;
    //}
    
    if($vendorId != '' ) {
        
        $sql = "UPDATE vendor SET "
                . "branch = '{$branchPKS}'"
                . "WHERE vendor_id = {$vendorId}";
						
	}else if($freightId != '' ) {
		
		$sql = "UPDATE freight SET "
                . "branch = '{$branchOA}'"
                . "WHERE freight_id = {$freightId}";
						
	}else if($laborId != '' ) {
		
		$sql = "UPDATE labor SET "
                . "branch = '{$branchOB}'"
                . "WHERE labor_id = {$laborId}";
				
	}else if($vendorHandlingId != '' ) {
		
		$sql = "UPDATE vendor_handling SET "
                . "branch = '{$branchHC}'"
                . "WHERE vendor_handling_id = {$vendorHandlingId}";
				
	}else if($generalVendorId != '' ) {
		
		$sql = "UPDATE general_vendor SET "
                . "branch = '{$branchGV}'"
                . "WHERE general_vendor_id = {$generalVendorId}";
				
	}
		$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                
                $return_value = '|OK|Successfully Updated.|';
            } else {
                $return_value = '|FAIL|Update Failed.||';
            }
        
    //} else {
      //  $return_value = '|FAIL|Please fill the required fields.||';
    //}
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_do_timbangan') {
    // <editor-fold defaultstate="collapsed" desc="module_data">
    
    $return_value = '';
    //$boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	$slipId = $myDatabase->real_escape_string($_POST['slip_id']);
	$noDo = $myDatabase->real_escape_string($_POST['no_do']);
    
    // </editor-fold>
    
    //if ($moduleId == '') {
    //    $boolNew = true;
    //}
    
    if($slipId != '' ) {
        
                $sql = "UPDATE transaction_upload SET "
                        . "no_do = '{$noDo}'"
                        . "WHERE slip_id = {$slipId}";
            
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                

                $return_value = '|OK|Successfully Updated.|'. $invoiceId .'|';
            } else {
                $return_value = '|FAIL|Update Failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_POST['action']) && $_POST['action'] == 'import_timbangan') {  
    // <editor-fold defaultstate="collapsed" desc="import_contract">
    
    $return_value = '';
    $boolContinue = true;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpile']);
    
    if($stockpileId == '') {
        $stockpileId = 0;
    }
    
    // </editor-fold>
    
    if(isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import";
        
        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if($boolContinue) {

            $importResult = excelImportTimbangan($myDatabase, $attachmentPath, $stockpileId);
            $importResult = explode("|", $importResult);

            if($importResult[0] == 'OK') {
                $return_value = '|OK|'. $importResult[1] .'|';
            } else {
                $return_value = '|FAIL|'. $importResult[1] .'|';
            }

        }
    } else {
        $return_value = '|FAIL|Please fill required fields.|';
    }
    
    echo $return_value;
    
    // </editor-fold>
}elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'contract_sharing') {
    // <editor-fold defaultstate="collapsed" desc="contract_sharing">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $actionType = $myDatabase->real_escape_string($_POST['actionType']);
    $freightFrom = $myDatabase->real_escape_string($_POST['freightFrom']);
    $freightTo = $myDatabase->real_escape_string($_POST['freightTo']);
    $id = isset($_POST['id']) ? $_POST['id'] : 0;

    // </editor-fold>
    if ($freightFrom == $freightTo) {
        if ($actionType == 'INSERT') {
            $sql = "INSERT INTO `freight_contract_sharing` (freight_id, freight_id_sharing,entry_by,entry_date) VALUES ('{$freightFrom}',{$freightTo},{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        } elseif ($actionType == 'UPDATE') {
            $sql = "UPDATE `freight_contract_sharing` SET freight_id = {$freightFrom},freight_id_sharing = {$freightTo} WHERE id = {$id}";
        } elseif ($actionType == 'DELETE') {
            $sql = "DELETE FROM `freight_contract_sharing` WHERE id = {$id}";
        } else {

        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false) {
            if ($actionType == 'INSERT') {
                $return_value = '|OK|Contract Sharing has successfully inserted';
            } elseif ($actionType == 'UPDATE') {
                $return_value = '|OK|Contract Sharing has successfully updated';
            } elseif ($actionType == 'DELETE') {
                $return_value = '|OK|Contract Sharing has successfully deleted';
            }

        } else {
            $return_value = '|FAIL|Insert/update Contract Sharing failed.||';
            echo $sql;
        }
    }else{
        $return_value = '|FAIL|Freight Tidak boleh sama!||';
    }
    echo $return_value;
    // </editor-fold>
} 

function closingDate($transactionDate, $module)
{
    // <editor-fold defaultstate="collapsed" desc="closingDate">

    global $myDatabase;


    $sqlClosingDate = "SELECT DATE_FORMAT(closing_date,'%d %M %Y') as cd_format,
    DATE_FORMAT(start_period,'%d %M %Y') as sp_format, 
    DATE_FORMAT(end_period,'%d %M %Y') as ep_format,
    closing_date,start_period,end_period,cd.`status`,cd.`active`,cdl.label,s.stockpile_name,s.stockpile_id
    FROM closing_date cd 
    LEFT JOIN closing_date_label cdl ON cdl.closing_date_label_id = cd.closing_date_label_id
    LEFT JOIN stockpile s ON s.stockpile_id = cd.stockpile_id
    LEFT JOIN user_stockpile us ON us.stockpile_id = cd.stockpile_id
    WHERE cd.active = 1 AND cdl.label = '{$module}' AND us.user_id = {$_SESSION['userId']}
    AND (closing_date <= '{$transactionDate}' OR start_period <= '{$transactionDate}' AND end_period >= '{$transactionDate}') LIMIT 1 ";

    $resultClosingDate = $myDatabase->query($sqlClosingDate, MYSQLI_STORE_RESULT);
    if ($resultClosingDate !== false && $resultClosingDate->num_rows > 0) {
        $rowClosingDate = $resultClosingDate->fetch_object();
    } else {
        $sqlClosingDate = "SELECT DATE_FORMAT(closing_date,'%d %M %Y') as cd_format,
        DATE_FORMAT(start_period,'%d %M %Y') as sp_format, 
        DATE_FORMAT(end_period,'%d %M %Y') as ep_format,
        closing_date,start_period,end_period,cd.`status`,cd.`active`,cdl.label,s.stockpile_name,s.stockpile_id
        FROM closing_date cd 
        LEFT JOIN closing_date_label cdl ON cdl.closing_date_label_id = cd.closing_date_label_id
        LEFT JOIN stockpile s ON s.stockpile_id = cd.stockpile_id
        WHERE cdl.label = '{$module}' AND cd.stockpile_id IS NULL AND cd.active = 1
        AND (closing_date <= '{$transactionDate}' OR start_period <= '{$transactionDate}' AND end_period >= '{$transactionDate}') LIMIT 1 ";
        $resultClosingDate = $myDatabase->query($sqlClosingDate, MYSQLI_STORE_RESULT);
        $rowClosingDate = $resultClosingDate->fetch_object();
    }
    $closing = false;

    if ($resultClosingDate !== false && $resultClosingDate->num_rows > 0) {
        // $closingDate = $rowClosingDate->closing_date;
        // $startPeriod = $rowClosingDate->start_period;
        // $endPeriod = $rowClosingDate->end_period;
        // $status = $rowClosingDate->status;
        // $active = $rowClosingDate->active;
        // $closingDateFormat = $rowClosingDate->cd_format;
        // $startPeriodFormat = $rowClosingDate->sp_format;
        // $endPeriodFormat = $rowClosingDate->ep_format;
        $closing = '1-Sukses';
    } else {
        $closing = '0-|Fail|Transaction has been closed.';
    }
    return $closing;

    // if ($status == 0) {
    //     if ($transactionDate >= $closingDate) {
    //         $closing = 1;
    //     } else {
    //         $closing = '0|at ' . '' . $closingDateFormat;
    //     }
    // } elseif ($status == 1) {
    //     if ($transactionDate >= $startPeriod && $transactionDate <= $endPeriod OR $transactionDate >= $closingDate) {
    //         $closing = 1;
    //     } else {
    //         $closing = '0|Period From ' . $startPeriodFormat . ' To ' . $endPeriodFormat.' And Closing At '.$closingDateFormat;
    //     }
    // }

    // return $closing;
    // </editor-fold>
}

function get_ip_address() {
    // <editor-fold defaultstate="collapsed" desc="get_ip_address">
    foreach (array('HTTP_CLIENT_IP', 'HTTP_X_FORWARDED_FOR', 'REMOTE_ADDR') as $key) {
        if (array_key_exists($key, $_SERVER)) {
            foreach (explode(',', $_SERVER[$key]) as $ip) {
                if (filter_var($ip, FILTER_VALIDATE_IP)) {
                    return $ip;
                }
            }
        }
    }
    return "0";
    // </editor-fold>
}

function generateRandomString($length = 10) {
    // <editor-fold defaultstate="collapsed" desc="generateRandomString">
    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $randomString = '';
    for ($i = 0; $i < $length; $i++) {
        $randomString .= $characters[rand(0, strlen($characters) - 1)];
    }
    return $randomString;
    // </editor-fold>
}

function excelImportContract($myDatabase, $fileName = "", $stockpileId = 0, $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1) {
    // <editor-fold defaultstate="collapsed" desc="excelImportContract($myDatabase, $fileName = "", $stockpileId = 0, $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1)">
    if (file_exists(realpath($fileName))) {
        $fileNameRealPath = realpath($fileName);
        
        require_once './assets/extensions/PHPExcel.php';
        require_once './assets/extensions/PHPExcel/IOFactory.php';
        require_once './assets/extensions/PHPExcel/Cell/AdvancedValueBinder.php';

        $objReader = PHPExcel_IOFactory::createReader('Excel5');

        $objPHPExcel = $objReader->load($fileNameRealPath);
        
        $readStartAtRow = 1; 
        $totalCols = 11;

        $result = $myDatabase->query("START TRANSACTION", MYSQLI_STORE_RESULT);
        
//        $sheetCount = $objPHPExcel->getSheetCount();
        $sheetCount = 1;
        for ($onSheet; $onSheet < $sheetCount; $onSheet++) {
            $objPHPExcel->setActiveSheetIndex($onSheet);
            $objWorksheet = $objPHPExcel->getActiveSheet();

            $rows = $objWorksheet->getHighestRow();
            $cols = PHPExcel_Cell::columnIndexFromString($objWorksheet->getHighestColumn());
            if ($toRow == -1)
                $toRow = $rows;
            if ($toCol == -1)
                $toCol = $cols;
            
            $key = array();
            $columnName = array();
            $getColumnAName = false;
            
            if($toCol == $totalCols) {
                for ($row = $fromRow; $row <= $rows; $row++) {
                    for ($i = $fromCol; $i < $cols; $i++) {
                        $columnName[$i] = "column_" . $i;
                        if (isset($columnName[$i])) {
                            if (PHPExcel_Shared_Date::isDateTime($objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row))) { 
                                $tmp = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 

                                if (is_numeric($tmp)) { 
                                    $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'YYYY-MM-DD'); 
                                } else { 
                                    $key[$row][$i]['value'] = substr($tmp, 6, 4) . "-" . substr($tmp, 3, 2) . "-" . substr($tmp, 0, 2); 
                                } 
//                                $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'DD-MMM-YYYY'); 
                            } else { 
//                                $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                $check = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                if (substr($check, 0, 1) == "=") {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getCalculatedValue(); 
                                } else {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                }
                            }
                        }
                    }
                }

                $getColumnAName = true;
            } else {
                return 'FAIL|Template is wrong.';
            }
        }
        
        if ($getColumnAName) {
            $temporaryTable = '';
            $temporaryTableWarning = '';
            $temporaryTableDuplicate = '';
            $fieldNames = '';

            foreach ($columnName as $i => $names) {
                if (trim($names) != '') {
                    $temporaryTable .= ( ($temporaryTable == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableWarning .= ( ($temporaryTableWarning == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableDuplicate .= ( ($temporaryTableDuplicate == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $fieldNames .= ( ($fieldNames == '') ? '' : ', ') . "`" . trim($names) . "`";
                }
            }

            $tempTable = '`tmp_contract_' . uniqid() . '`';
//            $temporaryTable = 'CREATE TEMPORARY TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableWarning = '`jb_sdw_' . uniqid() . '`';
//            $temporaryTableWarning = 'CREATE TEMPORARY TABLE ' . $tempTableWarning . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableWarning . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableDuplicate = '`jb_sdd_' . uniqid() . '`';
//            $temporaryTableDuplicate = 'CREATE TEMPORARY TABLE ' . $tempTableDuplicate . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableDuplicate . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
            $temporaryTable = 'CREATE TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';

//            return "0|". $temporaryTable;

            $result = $myDatabase->query($temporaryTable, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error create table '. $myDatabase->errorMessage;
            }

            $insertInto = '';
            foreach ($key as $row => $colData) {
                if ($colData[1] != null) {
                    $insertIntoCol = '';
                    foreach ($colData as $col => $colDatas) {
                        if (strpos($colDatas['value'], "NULL") !== false || $colDatas['value'] == '')
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "NULL";
                        else {
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "'". $colDatas['value'] ."'";
                        }
                    }
                    $insertInto .= ( ($insertInto == '') ? '' : ', ') . "(" . $insertIntoCol . ")";
//                die("INSERT INTO $temp_table ($fieldnames) VALUES " . $insertinto . ";");
                }
            }

            $insertIntoTemp = "INSERT INTO $tempTable ($fieldNames) VALUES " . $insertInto . ";";

            $result = $myDatabase->query($insertIntoTemp, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error insert table '. $myDatabase->errorMessage;
            }
            
//            return 'OK|Table created.';
            
            $sqlSelect = "select SUBSTR(a.column_1, 1, 1) as contract_type, a.* from $tempTable a;";
            $resultSelect = $myDatabase->query($sqlSelect, MYSQLI_STORE_RESULT);
            $successRow = 0;
            $errorRow = 0;
            $warningRow = 0;
            $counterRow = 1;
            $errorMessage = '';
            
            date_default_timezone_set('Asia/Jakarta');

            $date = new DateTime();
            $currentDate = $date->format('d/m/Y H:i:s');
            $currentYear = $date->format('y');
            $currentYearMonth = $date->format('ym');
            
            while($importedData = $resultSelect->fetch_object()) {
                if ($counterRow >= $readStartAtRow) {
                    // check Vendor
                    $boolInsertVendor = false;
                    $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$importedData->column_2}')";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($result !== false && $result->num_rows > 0) {
                        $rowVendor = $result->fetch_object();
                        $vendorId = $rowVendor->vendor_id;
                        $boolInsertVendor = true;
                    } elseif($result !== false && $result->num_rows == 0) {
                        $ppn = 0;
                        $pph = 0;
                        $ppnValue = 0;
                        $pphValue = 0;
                        
                        if(strtoupper($importedData->column_4) == 'PPN') {
                            $ppn = 1;
                            $ppnValue = 10;
                        }
                        
                        if($importedData->column_5 != '') {
                            $sqlPPh = "SELECT * FROM tax WHERE UPPER(tax_name) = UPPER({$importedData->column_4})";
                            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                                $rowPPh = $resultPPh->fetch_object();
                                $pph = $rowPPh->tax_id;
                                $pphValue = $rowPPh->tax_value;
                            }
                        }

                        $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                                . "UPPER('{$importedData->column_2}'), UPPER('{$importedData->column_3}'), '', '', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                        if($result !== false) {
                            $vendorId = $myDatabase->insert_id;
                            $boolInsertVendor = true;
                        } 
                    }
                    
                    if($boolInsertVendor) {
                        $sql = "SELECT * FROM contract WHERE UPPER(contract_no) = UPPER('{$importedData->column_7}')";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if($result !== false && $result->num_rows == 0) {
                            if($importedData->column_1 == '-' || $importedData->column_1 == '' || $importedData->column_1 == null) {
                                $checkPoNo = $importedData->contract_type .'-'. $importedData->column_2 .'-'. $currentYearMonth;
                                $sql = "SELECT po_no FROM contract WHERE company_id = {$_SESSION['companyId']} AND po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
                                $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if($resultPo->num_rows == 1) {
                                    $rowPo = $resultPo->fetch_object();
                                    $splitPoNo = explode('-', $rowPo->po_no);
                                    $nextPoNo = ((float) $splitPoNo[3]) + 1;
                                    $poNo = $checkPoNo .'-'. $nextPoNo;
                                } else {
                                    $poNo = $checkPoNo .'-1';
                                }
                            } else {
                                $poNo = $importedData->column_1;
                            }
                            
                            if($importedData->column_9 == '-' || $importedData->column_9 == '' || $importedData->column_9 == null) {
                                $quantity = 0;
                            } else {
                                $quantity = $importedData->column_9;
                            }

                            $sql = "INSERT INTO `contract` (contract_type, po_no, contract_no, vendor_id, currency_id, exchange_rate, price, price_converted, "
                                    . "quantity, company_id, entry_by, entry_date) VALUES ("
                                    . "'{$importedData->contract_type}', '{$poNo}', '{$importedData->column_7}', {$vendorId}, 1, 1, {$importedData->column_8}, {$importedData->column_8}, "
                                    . "{$quantity}, {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                            if($result !== false) {
                                $contractId = $myDatabase->insert_id;

                                $sql = "SELECT * FROM `stockpile` WHERE UPPER(stockpile_name) = UPPER('{$importedData->column_10}')";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if($result !== false && $result->num_rows > 0) {
                                    $rowSP = $result->fetch_object();
                                    $stockpileId = $rowSP->stockpile_id;

                                    $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                                            . "{$stockpileId}, {$contractId}, {$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                } else {
                                    $warningRow = $warningRow + 1;
                                }

                                insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", $contractId);

                                $successRow = $successRow + 1;
                            } else {
                                $errorRow = $errorRow + 1;
                            }
                        } else {
                            $warningRow = $warningRow + 1;
                        }
                    } else {
                        $errorRow = $errorRow + 1;
                    }
                }
                $counterRow++;
            }
            
            if(($successRow+$warningRow) >= ($counterRow-1) && $errorRow == 0) {
                $result = $myDatabase->query("COMMIT", MYSQLI_STORE_RESULT);
                
                $sql = "DROP TABLE {$tempTable}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                

                return "OK|". $successRow ." Row(s) import successfully, ". $warningRow ." Row(s) failed with warning. ". $errorMessage;
            } else {
                $result = $myDatabase->query("ROLLBACK", MYSQLI_STORE_RESULT);

                return "FAIL|Import failed. ". $errorRow ." Rows(s) can not be imported. Please contact administrator. ";
            }
            
        }
    } else {
        return 'FAIL|File not exists.';
    }
    // </editor-fold>
}

function excelImportPayment($myDatabase, $fileName = "", $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1) {
    // <editor-fold defaultstate="collapsed" desc="function excelImportTransaction($myDatabase, $fileName = "", $stockpileId = 0, $vendorId = 0, $stockpileContractId = 0, $onSheet = 0, $fromRow = 1, $toRow = -1, $fromCol = 0, $toCol = -1)">
    if (file_exists(realpath($fileName))) {
        $fileNameRealPath = realpath($fileName);
        
        require_once './assets/extensions/PHPExcel.php';
        require_once './assets/extensions/PHPExcel/IOFactory.php';
        require_once './assets/extensions/PHPExcel/Cell/AdvancedValueBinder.php';

        $objReader = PHPExcel_IOFactory::createReader('Excel5');

        $objPHPExcel = $objReader->load($fileNameRealPath);
        
        $readStartAtRow = 1; 
        $totalCols = 23;

        $result = $myDatabase->query("START TRANSACTION", MYSQLI_STORE_RESULT);
        
//        $sheetCount = $objPHPExcel->getSheetCount();
        $sheetCount = 1;
        for ($onSheet; $onSheet < $sheetCount; $onSheet++) {
            $objPHPExcel->setActiveSheetIndex($onSheet);
            $objWorksheet = $objPHPExcel->getActiveSheet();

            $rows = $objWorksheet->getHighestRow();
            $cols = PHPExcel_Cell::columnIndexFromString($objWorksheet->getHighestColumn());
            if ($toRow == -1)
                $toRow = $rows;
            if ($toCol == -1)
                $toCol = $cols;
            
            $key = array();
            $columnName = array();
            $getColumnAName = false;
            
            if($toCol == $totalCols) {
                for ($row = $fromRow; $row <= $rows; $row++) {
                    for ($i = $fromCol; $i < $cols; $i++) {
                        $columnName[$i] = "column_" . $i;
                        if (isset($columnName[$i])) {
                            if (PHPExcel_Shared_Date::isDateTime($objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row))) { 
                                $tmp = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 

                                if (is_numeric($tmp)) { 
                                    $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'YYYY-MM-DD'); 
                                } else { 
                                    $key[$row][$i]['value'] = substr($tmp, 6, 4) . "-" . substr($tmp, 3, 2) . "-" . substr($tmp, 0, 2); 
                                } 
//                                $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'DD-MMM-YYYY'); 
                            } else { 
//                                $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                $check = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                if (substr($check, 0, 1) == "=") {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getCalculatedValue(); 
                                } else {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                }
                            }
                        }
                    }
                }

                $getColumnAName = true;
            } else {
                return 'FAIL|Template is wrong.';
            }
        }
        
        if ($getColumnAName) {
            $temporaryTable = '';
            $temporaryTableWarning = '';
            $temporaryTableDuplicate = '';
            $fieldNames = '';

            foreach ($columnName as $i => $names) {
                if (trim($names) != '') {
                    $temporaryTable .= ( ($temporaryTable == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableWarning .= ( ($temporaryTableWarning == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableDuplicate .= ( ($temporaryTableDuplicate == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $fieldNames .= ( ($fieldNames == '') ? '' : ', ') . "`" . trim($names) . "`";
                }
            }

            $tempTable = '`tmp_payment_' . uniqid() . '`';
//            $temporaryTable = 'CREATE TEMPORARY TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableWarning = '`jb_sdw_' . uniqid() . '`';
//            $temporaryTableWarning = 'CREATE TEMPORARY TABLE ' . $tempTableWarning . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableWarning . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableDuplicate = '`jb_sdd_' . uniqid() . '`';
//            $temporaryTableDuplicate = 'CREATE TEMPORARY TABLE ' . $tempTableDuplicate . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableDuplicate . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
            $temporaryTable = 'CREATE TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';

//            return "0|". $temporaryTable;

            $result = $myDatabase->query($temporaryTable, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error create table '. $myDatabase->errorMessage;
            }

            $insertInto = '';
            foreach ($key as $row => $colData) {
                if ($colData[1] != null) {
                    $insertIntoCol = '';
                    foreach ($colData as $col => $colDatas) {
                        if (strpos($colDatas['value'], "NULL") !== false || $colDatas['value'] == '')
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "NULL";
                        else {
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "'". $colDatas['value'] ."'";
                        }
                    }
                    $insertInto .= ( ($insertInto == '') ? '' : ', ') . "(" . $insertIntoCol . ")";
//                die("INSERT INTO $temp_table ($fieldnames) VALUES " . $insertinto . ";");
                }
            }

            $insertIntoTemp = "INSERT INTO $tempTable ($fieldNames) VALUES " . $insertInto . ";";

            $result = $myDatabase->query($insertIntoTemp, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error insert table '. $myDatabase->errorMessage;
            }
		   
		    $sqlSelect = "SELECT a.*, DATE_FORMAT(a.column_2, '%y') AS trans_year, COALESCE(a.column_15, 0) AS tarra FROM $tempTable a ORDER BY id ASC;";
            $resultSelect = $myDatabase->query($sqlSelect, MYSQLI_STORE_RESULT);
            $successRow = 0;
            $errorRow = 0;
            $warningRow = 0;
            $counterRow = 1;
            $errorMessage = '';
            $shipmentError = 0;
            $categoryError = 0;
            $rateError = 0;
            $currencyError = 0;
            $insuredError = 0;
            $countryFromError = 0;
            $countryToError = 0;
            $duplicateError = 0;
            $duplicateQuotation = '';
            $shipmentQuotation = '';
            $categoryQuotation = '';
            $rateQuotation = '';
            $currencyQuotation = '';
            $insuredQuotation = '';
            $countryFromQuotation = '';
            $countryToQuotation = '';
            
            date_default_timezone_set('Asia/Jakarta');

            $date = new DateTime();
            $currentDate = $date->format('d/m/Y H:i:s');
            
           /* $sqlStockpile = "SELECT * FROM stockpile WHERE stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sqlStockpile, MYSQLI_STORE_RESULT);
            $rowStockpile = $resultStockpile->fetch_object();
            $freightWeightRule = $rowStockpile->freight_weight_rule;
            $curahWeightRule = $rowStockpile->curah_weight_rule;
            $stockpileCode = $rowStockpile->stockpile_code;
            */
            while($importedData = $resultSelect->fetch_object()) {
                if ($counterRow >= $readStartAtRow) {
                   // $custTaxId = 'NULL';
                    //$curahTaxId = 'NULL';
                    //$ucTaxId = 'NULL';
                    //$fcTaxId = 'NULL';
                 
                    if(strtoupper($importedData->column_0) == 'PAYMENT' && strtoupper($importedData->column_1) == 'OUT' && strtoupper($importedData->column_0) == 'FREIGHT COST') {
                        if($importedData->column_6 != '0' && strtoupper($importedData->column_6) != 'NONE' && $importedData->column_6 != '' && $importedData->column_11 != '-' && $importedData->column_6 != null) {
                            $sql = "SELECT * FROM stockpile WHERE UPPER(stockpile_name) = UPPER('{$importedData->column_6}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $stockpileId = $row->stockpile_id;
                            }
                        }
						
						if($importedData->column_11 != '0' && strtoupper($importedData->column_11) != 'NONE' && $importedData->column_11 != '' && $importedData->column_11 != '-' && $importedData->column_11 != null) {
                            $sql = "SELECT * FROM `freight` WHERE UPPER(freight_supplier) = UPPER('{$importedData->column_11}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $freightId = $row->freight_id;
                            }
                        }
                        
                        if($importedData->column_11 != '0' && strtoupper($importedData->column_11) != 'NONE' && $importedData->column_11 != '' && $importedData->column_11 != '-' && $importedData->column_11 != null) {
                            $sql = "SELECT * FROM `contract` WHERE UPPER(contract_no) = UPPER('{$importedData->column_11}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $vendorId = $row->vendor_id;
                            }
                        }
                        
                        if($importedData->column_10 != '0' && strtoupper($importedData->column_10) != 'NONE' && $importedData->column_10 != '' && $importedData->column_10 != '-' && $importedData->column_10 != null) {
                            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_name) = UPPER('{$importedData->column_10}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $supplierId = $row->vendor_id;
                            } else {
                                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, entry_by, entry_date) VALUES ("
                                        . "'". strtoupper(substr($importedData->column_10, 0, 3)) ."', '{$importedData->column_10}', "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $supplierId = $myDatabase->insert_id;
                            }
                        }
                        
//                        if($vendorId == "") {
//                            $vendorId = $supplierId;
//                        }
                        
                        if($supplierId == "") {
                            $supplierId = 'NULL';
                        }
                        
                        // </editor-fold>
                        
                        // <editor-fold defaultstate="collapsed" desc="check vehicle and unloading cost">
                        if($importedData->column_4 != '0' && strtoupper($importedData->column_4) != 'NONE' && $importedData->column_4 != '' && $importedData->column_4 != '-' && $importedData->column_4 != null) {
                            $sql = "SELECT * FROM `vehicle` WHERE UPPER(vehicle_name) = UPPER('{$importedData->column_4}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $vehicleId = $row->vehicle_id;
                            } else {
                                $sql = "INSERT INTO `vehicle` (vehicle_name, entry_by, entry_date) VALUES ("
                                        . "'{$importedData->column_4}', "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $vehicleId = $myDatabase->insert_id;
                            }
                        }
                        
                        if($importedData->column_32 != '0' && strtoupper($importedData->column_32) != 'NONE' && $importedData->column_32 != '' && $importedData->column_32 != '-' && $importedData->column_32 != null) {
                            $sql = "SELECT * FROM `labor` WHERE UPPER(labor_name) = UPPER('{$importedData->column_32}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $laborId = $row->labor_id;
                                $ucTaxId = $row->pph_tax_id;
                            } else {
								
                                $ppn = 0;
                                $pph = 0;
                                $ppnValue = 0;
                                $pphValue = 0;

                                if(strtoupper($importedData->column_33) == 'PPN') {
                                    $ppn = 1;
                                    $ppnValue = 10;
                                }

                                if($importedData->column_34 != '' || $importedData->column_34 != null) {
                                    $sqlPPh = "SELECT * FROM tax WHERE UPPER(tax_name) = UPPER('{$importedData->column_34}')";
                                    $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                                    if($resultPPh !== false && $resultPPh->num_rows == 1) {
                                        $rowPPh = $resultPPh->fetch_object();
                                        $pph = $rowPPh->tax_id;
                                        $pphValue = $rowPPh->tax_value;
                                    }
                                }
                                
                                $sql = "INSERT INTO `labor` (labor_name, labor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                                        . "'{$importedData->column_32}', '', '', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $laborId = $myDatabase->insert_id;
                                
                                $ucTaxId = $pph;
                            }
                        }
                        
                        if(($importedData->column_22 != '' && strtoupper($importedData->column_22) != 'NONE' && $importedData->column_22 != '0' && $importedData->column_22 != '-' && $importedData->column_22 != null) && $vehicleId != '') {
                            $sql = "SELECT * FROM unloading_cost WHERE vehicle_id = {$vehicleId} AND stockpile_id = {$stockpileId} AND price_converted = {$importedData->column_22} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $unloadingCostId = $row->unloading_cost_id;
                            } else {
                                $sql = "INSERT INTO `unloading_cost` (vehicle_id, stockpile_id, currency_id, exchange_rate, price, price_converted, entry_by, entry_date) VALUES ("
                                        . "{$vehicleId}, {$stockpileId}, 1, 1, {$importedData->column_22}, {$importedData->column_22}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $unloadingCostId = $myDatabase->insert_id;
                            }
                        } else {
                            $unloadingCostId = 'NULL';
                        }
                        
                        if($vehicleId == "") {
                            $unloadingCostId = 'NULL';
                        }
						if($laborId == "") {
                            $laborId = 'NULL';
                        }
                        
                        // </editor-fold>
                        
                        // <editor-fold defaultstate="collapsed" desc="check freight and freight cost">
                        if($importedData->column_6 != '0' && strtoupper($importedData->column_6) != 'NONE' && $importedData->column_6 != '' && $importedData->column_6 != '-' && $importedData->column_6 != null) {
                            $sql = "SELECT * FROM `freight` WHERE UPPER(freight_supplier) = UPPER('{$importedData->column_28}') AND UPPER(freight_code) = UPPER('{$importedData->column_29}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $freightId = $row->freight_id;
                                $fcTaxId = $row->pph_tax_id;
                            } else {
								
                                $ppn = 0;
                                $pph = 0;
                                $ppnValue = 0;
                                $pphValue = 0;

                                if(strtoupper($importedData->column_30) == 'PPN') {
                                    $ppn = 1;
                                    $ppnValue = 10;
                                }

                                if($importedData->column_31 != '' || $importedData->column_31 != null) {
                                    $sqlPPh = "SELECT * FROM tax WHERE UPPER(tax_name) = UPPER('{$importedData->column_31}')";
                                    $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                                    if($resultPPh !== false && $resultPPh->num_rows == 1) {
                                        $rowPPh = $resultPPh->fetch_object();
                                        $pph = $rowPPh->tax_id;
                                        $pphValue = $rowPPh->tax_value;
                                    }
                                }
                                
                                $sql = "INSERT INTO `freight` (freight_code, freight_supplier, freight_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                                        . "'". strtoupper($importedData->column_29) ."', '{$importedData->column_28}', '', '', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $freightId = $myDatabase->insert_id;
                                
                                $fcTaxId = $pph;
                            }
                        }
                        
                        $freightQuantity = 0;
                        if(($importedData->column_21 != '' || $importedData->column_21 != '0' || $importedData->column_21 != '-' || $importedData->column_21 != null) && $freightId != '') {
                            // get freight weight
                            if($freightWeightRule == 0) {
                                if((float) $importedData->column_16 < (float) $importedData->column_13) {
                                    $freightQuantity = (float) $importedData->column_16;
                                } elseif((float) $importedData->column_16 > (float) $importedData->column_13) {
                                    $freightQuantity = (float) $importedData->column_13;
                                } else {
                                    $freightQuantity = (float) $importedData->column_13;
                                }
                            } elseif($freightWeightRule == 1) {
                                $freightQuantity = (float) $importedData->column_13;
                            } elseif($freightWeightRule == 2) {
                                $freightQuantity = (float) $importedData->column_16;
                            } else {
                                $freightQuantity = (float) $importedData->column_13;
                            }
                            
                            $freightPrice = (float) $importedData->column_21 / $freightQuantity;
                            
                            $sql = "SELECT * FROM freight_cost WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId} AND vendor_id = {$vendorId} AND price_converted = {$freightPrice} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $freightCostId = $row->freight_cost_id;
                            } else {
                                $sql = "INSERT INTO `freight_cost` (freight_id, stockpile_id, vendor_id, currency_id, exchange_rate, price, price_converted, entry_by, entry_date) VALUES ("
                                        . "{$freightId}, {$stockpileId}, {$vendorId}, 1, 1, {$freightPrice}, {$freightPrice}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $freightCostId = $myDatabase->insert_id;
                            }
                        }
                        
                        if($freightId == "") {
                            $freightCostId = 'NULL';
                        }
                        
                        // </editor-fold>
                        
                        //curah
                        $boolNewContract = false;
                        $boolContinue = false;
                        $boolUpdateCurah = false;
                        if(strtoupper($importedData->column_24) == 'CURAH') {
                            $contractType = 'C';
                            
                            $totalSend = (float) $importedData->column_13;
                            $totalNetto = (float) $importedData->column_16;
                            
                            $sqlContract = "SELECT con.*, v.pph_tax_id 
                                    FROM contract con 
                                    INNER JOIN vendor v
                                        ON v.vendor_id = con.vendor_id
                                    WHERE contract_type = '{$contractType}' AND contract_no = '{$importedData->column_11}'";
                            $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);
                            if($resultContract->num_rows == 1) {
                                $rowContract = $resultContract->fetch_object();
                                $contractId = $rowContract->contract_id;
                                $unitPrice = $rowContract->price;
                                $curahTaxId = $rowContract->pph_tax_id;

                                $sqlStockpileContract = "SELECT * FROM stockpile_contract WHERE contract_id = {$contractId} AND stockpile_id = {$stockpileId}";
                                $resultStockpileContract = $myDatabase->query($sqlStockpileContract, MYSQLI_STORE_RESULT);
                                if($resultStockpileContract->num_rows == 1) {
                                    $rowStockpileContract = $resultStockpileContract->fetch_object();
                                    $stockpileContractId = $rowStockpileContract->stockpile_contract_id;
                                    $currentQuantity = $rowStockpileContract->quantity;
                                    $boolContinue = true;
                                    $boolUpdateCurah = true;
                                } 
                            } 
                            
//                            $boolContinue = true;
//                            $boolNewContract = true;
                        } elseif(strtoupper($importedData->column_24) == 'PKS') {
                            $contractType = 'P';
                            
                            if(($importedData->column_8 != '' || $importedData->column_8 != '0' || $importedData->column_8 != '-' && $importedData->column_8 != 'NONE' && $importedData->column_8 != null) &&
                                    $importedData->column_11 != '' || $importedData->column_11 != '0' || $importedData->column_11 != '-' && $importedData->column_11 != 'NONE' && $importedData->column_11 != null) {
                                $sqlContract = "SELECT * FROM contract WHERE contract_type = '{$contractType}' AND contract_no = '{$importedData->column_11}'";
                                $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);
                                if($resultContract->num_rows == 1) {
                                    $rowContract = $resultContract->fetch_object();
                                    $contractId = $rowContract->contract_id;
                                    $unitPrice = $rowContract->price;
                                    
                                    $sqlStockpileContract = "SELECT * FROM stockpile_contract WHERE contract_id = {$contractId} AND stockpile_id = {$stockpileId}";
                                    $resultStockpileContract = $myDatabase->query($sqlStockpileContract, MYSQLI_STORE_RESULT);
                                    if($resultStockpileContract->num_rows == 1) {
                                        $rowStockpileContract = $resultStockpileContract->fetch_object();
                                        $stockpileContractId = $rowStockpileContract->stockpile_contract_id;
                                        $boolContinue = true;
                                    } 
                                } 
//                                else {
//                                    $sqlTemp = "SELECT SUM(column_13) AS total_send, SUM(column_16) AS total_netto FROM {$tempTable} WHERE column_8 = '{$importedData->column_8}' "
//                                            . "AND column_11 = '{$importedData->column_11}' AND UPPER(column_12) = UPPER('{$importedData->column_12}')";
//                                    $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
//                                    $rowTemp = $resultTemp->fetch_object();
//                                    
//                                    $totalSend = $rowTemp->total_send;
//                                    $totalNetto = $rowTemp->total_netto;
//                                    $boolNewContract = true;
//                                }
                            } else {
                                $totalSend = (float) $importedData->column_13;
                                $totalNetto = (float) $importedData->column_16;
//                                $boolContinue = true;
//                                $boolNewContract = true;
                            }
                        }
                        
//                        $boolContinue = true;
                        if($boolNewContract) {
                            // <editor-fold defaultstate="collapsed" desc="create new contract for curah">
                            
//                            $checkPoNo = $contractType .'-'. $vendorCode .'-'. $importedData->trans_year;
//                            $sql = "SELECT po_no FROM contract WHERE po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
//                            $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                            if($resultPo->num_rows == 1) {
//                                $rowPo = $resultPo->fetch_object();
//                                $splitPoNo = explode('-', $rowPo->po_no);
//                                $nextPoNo = ((float) $splitPoNo[3]) + 1;
//                                $poNo = $checkPoNo .'-'. $nextPoNo;
//                            } else {
//                                $poNo = $checkPoNo .'-1';
//                            }
//                            
//                            if($totalNetto < $totalSend) {
//                                $quantity = $totalNetto;
//                            } elseif($totalNetto > $totalSend) {
//                                $quantity = $totalSend;
//                            } else {
//                                $quantity = $totalSend;
//                            }
//                            
//                            $sql = "INSERT INTO contract (contract_type, po_no, contract_no, vendor_id, currency_id, exchange_rate, "
//                                    . "price, price_converted, quantity, entry_by, entry_date) VALUES ("
//                                    . "'{$contractType}', '{$poNo}', '{$importedData->column_11}', {$vendorId}, 1, 1, "
//                                    . "{$importedData->column_27}, {$importedData->column_27}, {$quantity}, "
//                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
//                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                            
//                            if($result === false) {
//                                $boolContinue = false;
//                            } else {
//                                $contractId = $myDatabase->insert_id;
//                                $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
//                                        . "{$stockpileId}, {$contractId}, {$quantity}, "
//                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
//                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                                if($result === false) {
//                                    $boolContinue = false;
//                                } else {
//                                    $stockpileContractId = $myDatabase->insert_id;
//                                }
//                            }
                            
                            // </editor-fold>
                        }
                        
                        if($boolContinue) {
                            $shrink = 0;
                            if($contractType == 'P') {
                                if((float) $importedData->column_16 < (float) $importedData->column_13) {
                                    $quantity = (float) $importedData->column_16;
                                    $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;
                                } elseif((float) $importedData->column_16 > (float) $importedData->column_13) {
                                    $quantity = (float) $importedData->column_13;
                                    $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;
                                } else {
                                    $quantity = (float) $importedData->column_13;
                                }
                            } elseif($contractType == 'C') {
                                if($curahWeightRule == 0) {
                                    if((float) $importedData->column_16 < (float) $importedData->column_13) {
                                        $quantity = (float) $importedData->column_16;
                                        $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;
                                    } elseif((float) $importedData->column_16 > (float) $importedData->column_13) {
                                        $quantity = (float) $importedData->column_13;
                                        $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;
                                    } else {
                                        $quantity = (float) $importedData->column_13;
                                    }
                                } elseif($curahWeightRule == 1) {
                                    $quantity = (float) $importedData->column_13;
                                    $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;
                                } elseif($curahWeightRule == 2) {
                                    $quantity = (float) $importedData->column_16;
                                    $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;
                                } else {
                                    $quantity = (float) $importedData->column_13;
                                }
                            }

                            // get next slip no
                            $checkSlipNo = $stockpileCode .'-'. $importedData->trans_year;
            //                $sql = "SELECT LPAD(COUNT(1) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ";
            //                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($resultSlip->num_rows == 0) {
                                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                            $rowSlipNo = $resultSlip->fetch_object();
                            $nextSlipNo = $rowSlipNo->next_id;
                            $slipNo = $checkSlipNo .'-'. $nextSlipNo;
                            
                            // get freight cost
                            if($freightCostId == 'NULL') {
                                $freightPrice = 0;
                            } 

                            // get unloading cost
                            
                            if($unloadingCostId == 'NULL') {
                                $unloadingPrice = 0;
                            } else {
                                $unloadingPrice = $importedData->column_22;
                            }
                            
//                            $unitPrice = $importedData->column_27;

                            // get inventory value
                            $inventoryValue = ($freightQuantity * $freightPrice) + $unloadingPrice + ($quantity * $unitPrice);

                            // insert into transaction
                            $sql = "INSERT INTO `transaction` (slip_no, stockpile_contract_id, transaction_date, loading_date, vehicle_no, labor_id, unloading_cost_id, "
                                    . "unloading_date, freight_cost_id, permit_no, transaction_type, vendor_id, send_weight, bruto_weight, tarra_weight, "
                                    . "netto_weight, notes, driver, freight_quantity, quantity, shrink, freight_price, unloading_price, unit_price, "
                                    . "inventory_value, block, uc_tax_id, fc_tax_id, curah_tax_id, entry_by, entry_date) "
                                    . "VALUES ('{$slipNo}', {$stockpileContractId}, STR_TO_DATE('{$importedData->column_2}', '%Y-%m-%d'), STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), "
                                    . "'{$importedData->column_3}', {$laborId}, {$unloadingCostId}, STR_TO_DATE('{$importedData->column_2}', '%Y-%m-%d'), {$freightCostId}, '{$importedData->column_7}', "
                                    . "1, {$supplierId}, {$importedData->column_13}, {$importedData->column_14}, {$importedData->tarra}, {$importedData->column_16}, '{$importedData->column_17}', "
                                    . "'{$importedData->column_18}', {$freightQuantity}, {$quantity}, {$shrink}, {$freightPrice}, {$unloadingPrice}, {$unitPrice}, {$inventoryValue}, 'NONE', "
                                    . "{$ucTaxId}, {$fcTaxId}, {$curahTaxId}, "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            
                            if($result !== false) {
                                $successRow = $successRow + 1;
                                
                                $transactionId = $myDatabase->insert_id;
                                
                                if($boolUpdateCurah) {
                                    /*$newQuantity = (float) $currentQuantity + (float) $totalSend;
                                    $sql = "UPDATE stockpile_contract SET quantity = {$newQuantity} WHERE stockpile_contract_id = {$stockpileContractId}";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    
                                    $sql = "UPDATE contract SET quantity = (SELECT SUM(quantity) FROM stockpile_contract_id WHERE contract_id = {$contractId}) WHERE contract_id = {$contractId}";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/
                                }
                                
                                $sql = "DELETE FROM {$tempTable} WHERE column_0 = {$importedData->column_0}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                                insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                            } else {
                                $errorRow = $errorRow + 1;
                            }
                        } else {
                            $errorRow = $errorRow + 1;
                        }
                        
                        // </editor-fold>
                    } elseif(strtoupper($importedData->column_12) == 'OUT') {
                        // <editor-fold defaultstate="collapsed" desc="OUT">
                        if(($importedData->column_10 != '0' || $importedData->column_10 != 'NONE' || $importedData->column_10 != '' || $importedData->column_10 != '-') &&
                                ($importedData->column_27 != '0' || $importedData->column_27 != 'NONE' || $importedData->column_27 != '' || $importedData->column_27 != '-')) {
                            $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$importedData->column_10}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $customerId = $row->customer_id;
                            } else {
                                $sql = "INSERT INTO `customer` (customer_name, entry_by, entry_date) VALUES ("
                                        . "'{$importedData->column_10}', "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $customerId = $myDatabase->insert_id;
                            }
                        }
                        
                        if($customerId != '') {
							
							
                            $salesNo = strtoupper(str_replace(' ', '', substr($importedData->column_10, 0, 5)));
                            
							
                            $sql = "SELECT * FROM sales WHERE UPPER(sales_no) = '{$salesNo}' AND customer_id = {$customerId} AND stockpile_id = {$stockpileId} "
                                    . "AND currency_id = 1 AND price = {$importedData->column_27} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $salesId = $row->sales_id;
                                $salesBalance = $row->quantity;
                            } else {
                                $sqlTemp = "SELECT count(1) AS total_shipment FROM {$tempTable} WHERE UPPER(column_10) = UPPER('{$importedData->column_10}') "
                                        . "AND UPPER(column_12) = UPPER('{$importedData->column_12}') AND column_27 = {$importedData->column_27}";
                                $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
                                $rowTemp = $resultTemp->fetch_object();
                                $totalShipment = $rowTemp->total_shipment;
                                
                                $sqlTemp = "SELECT MIN(column_5) AS sales_date, SUM(column_13) AS total_quantity FROM {$tempTable} WHERE UPPER(column_10) = UPPER('{$importedData->column_10}') "
                                        . "AND UPPER(column_12) = UPPER('{$importedData->column_12}') AND column_27 = {$importedData->column_27}";
                                $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
                                $rowTemp = $resultTemp->fetch_object();
                                $salesDate = $rowTemp->sales_date;
                                $totalQuantity = $rowTemp->total_quantity;
                                $salesBalance = $totalQuantity;
                                
								
                                $sql = "INSERT INTO sales (sales_no, sales_date, sales_type, customer_id, stockpile_id, currency_id, exchange_rate, "
                                        . "price, price_converted, quantity, total_shipment, entry_by, entry_date) VALUES ("
                                        . "'{$salesNo}', STR_TO_DATE('{$salesDate}', '%Y-%m-%d'), 1, {$customerId}, {$stockpileId}, 1, 1, "
                                        . "{$importedData->column_27}, {$importedData->column_27}, {$totalQuantity}, {$totalShipment}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                                $boolContinue = true;
                                if($result !== false) {
                                    $salesId = $myDatabase->insert_id;
                                    
                                    for($i = 1; $i <= $totalShipment; $i++) {
                                        $shipmentCode = $salesNo .'-'. $i;

                                        $sql = "INSERT INTO `shipment` (shipment_code, sales_id, entry_by, entry_date) VALUES ("
                                                . "'{$shipmentCode}', {$salesId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    }
                                } else {
                                    $boolContinue = false;
                                }
                            }
                            
                            if($boolContinue) {
                                $sql = "SELECT shipment_id FROM shipment WHERE shipment_code LIKE '{$salesNo}%' AND shipment_status = 0 ORDER BY shipment_code ASC LIMIT 1";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if($result->num_rows == 1) {
                                    $row = $result->fetch_object();
                                    $shipmentId = $row->shipment_id;
                                    
                                    $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;

                                    // get next slip no
                                    $checkSlipNo = $stockpileCode .'-'. $importedData->trans_year;
                                    $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultSlip->num_rows == 0) {
                                        $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM transaction LIMIT 1";
                                        $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    }

                                    $rowSlipNo = $resultSlip->fetch_object();
                                    $nextSlipNo = $rowSlipNo->next_id;
                                    $slipNo = $checkSlipNo .'-'. $nextSlipNo;
                                    
                                    $sql = "INSERT INTO `transaction` (slip_no, product_id, shipment_id, transaction_date, vehicle_no, transaction_type, "
                                            . "send_weight, quantity, shrink, entry_by, entry_date) VALUES ('{$slipNo}', 1, "
                                            . "{$shipmentId}, STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), '{$importedData->column_9}', 2, "
                                            . "{$importedData->column_13}, {$importedData->column_16}, {$shrink}, "
                                            . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    
                                    if($result !== false) {
                                        $transactionId = $myDatabase->insert_id;

                                        // insert into delivery
                                        $sql = "SELECT t.* 
                                                FROM transaction t 
                                                WHERE t.stockpile_contract_id IN (
                                                    SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                                                ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                                                ORDER BY t.unloading_date ASC";
                                        $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        $totalInventoryValue = 0;
                                        if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                                            $balanceLeft = (float) $importedData->column_13;
                                            while($rowDelivery = $resultDelivery->fetch_object()) {
                                                if($balanceLeft > 0) {
                                                    if($rowDelivery->delivery_status == 0) {
                                                        if($balanceLeft >= $rowDelivery->quantity) {
                                                            $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                                            $quantityTaken = $rowDelivery->quantity;
                                                            $percentTaken = 1;
                                                            $deliveryStatus = 1;
                                                        } elseif($balanceLeft < $rowDelivery->quantity) {
                                                            $quantityTaken = $balanceLeft;
                                                            $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                                            $balanceLeft = 0;
                                                            $deliveryStatus = 2;
                                                        }
                                                    } elseif($rowDelivery->delivery_status == 2) {
                                                        $totalTaken = 0;
                                                        $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                                        $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                                        if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                                            $rowTaken = $resultTaken->fetch_object();
                                                            $totalTaken = $rowTaken->total_taken;
                                                        }

                                                        if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                                            $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                                            $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                            $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                                            $deliveryStatus = 1;
                                                        } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                                            $quantityTaken = $balanceLeft;
                                                            $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                                            $balanceLeft = 0;
                                                            $deliveryStatus = 2;
                                                        }
                                                    } 

                                                    $deliveryValue = $quantityTaken * (float) $importedData->column_27;
                                                    $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                                    $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                                    $percentTaken = $percentTaken * 100;

                                                    $sql = "INSERT INTO delivery (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                                            . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), {$percentTaken}, "
                                                            . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                                    $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                                }
                                            }
                                        }

                                        //$updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                                        $updateInventoryValue = $totalInventoryValue;

                                        $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                        // update shipment
                                        $cogsAmount = $updateInventoryValue;
                                        $invoiceAmount = (float) $importedData->column_16 * (float) $importedData->column_27;
                                        $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), "
                                                . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$importedData->column_16}, shipment_status = 1 "
                                                . "WHERE shipment_id = {$shipmentId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                        $sql = "SELECT COALESCE(SUM(quantity), 0) AS delivered_balance FROM `transaction` 
                                                WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                                                AND transaction_type = 2
                                                AND transaction_id <> {$transactionId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        $row = $result->fetch_object();
                                        $deliveredBalance = $row->delivered_balance;
                                        
                                        // update sales
                                        $boolUpdateSales = false;
                                        if((float) $importedData->column_13 == ($salesBalance - $deliveredBalance)) {
                                            $salesStatus = 1;
                                            $boolUpdateSales = true;
                                        } elseif((float) $importedData->column_13 < ($salesBalance - $deliveredBalance)) {
                                            $salesStatus = 2;
                                            $boolUpdateSales = true;
                                        }

                                        if($boolUpdateSales) {
                                            $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        }
                                        
                                        $successRow = $successRow + 1;
                                    } else {
                                        $errorRow = $errorRow + 1;
                                    }
                                } else {
                                    $errorRow = $errorRow + 1;
                                }
                            }
                        }
                        
                        // </editor-fold>
                    }
                    
                }
                $counterRow++;
            } 
            
            if(($successRow+$warningRow) == ($counterRow-1) && $errorRow == 0) {
                $result = $myDatabase->query("COMMIT", MYSQLI_STORE_RESULT);
                
                $sql = "DROP TABLE {$tempTable}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                

                return "OK|". $successRow ." Row(s) import successfully, ". $warningRow ." Row(s) failed with warning. ". $errorMessage;
            } else {
                $result = $myDatabase->query("ROLLBACK", MYSQLI_STORE_RESULT);

                return "FAIL|Import failed. ". $errorRow ." Rows(s) can not be imported. Please contact administrator. ";
            }
        }
    } else {
        return 'FAIL|File not exists.';
    } 
    // </editor-fold>
}

function excelImportTransaction($myDatabase, $fileName = "", $stockpileId = 0, $vendorId = 0, $stockpileContractId = 0, $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1) {
    // <editor-fold defaultstate="collapsed" desc="function excelImportTransaction($myDatabase, $fileName = "", $stockpileId = 0, $vendorId = 0, $stockpileContractId = 0, $onSheet = 0, $fromRow = 1, $toRow = -1, $fromCol = 0, $toCol = -1)">
    if (file_exists(realpath($fileName))) {
        $fileNameRealPath = realpath($fileName);
        
        require_once './assets/extensions/PHPExcel.php';
        require_once './assets/extensions/PHPExcel/IOFactory.php';
        require_once './assets/extensions/PHPExcel/Cell/AdvancedValueBinder.php';

        $objReader = PHPExcel_IOFactory::createReader('Excel5');

        $objPHPExcel = $objReader->load($fileNameRealPath);
        
        $readStartAtRow = 1; 
        $totalCols = 35;

        $result = $myDatabase->query("START TRANSACTION", MYSQLI_STORE_RESULT);
        
//        $sheetCount = $objPHPExcel->getSheetCount();
        $sheetCount = 1;
        for ($onSheet; $onSheet < $sheetCount; $onSheet++) {
            $objPHPExcel->setActiveSheetIndex($onSheet);
            $objWorksheet = $objPHPExcel->getActiveSheet();

            $rows = $objWorksheet->getHighestRow();
            $cols = PHPExcel_Cell::columnIndexFromString($objWorksheet->getHighestColumn());
            if ($toRow == -1)
                $toRow = $rows;
            if ($toCol == -1)
                $toCol = $cols;
            
            $key = array();
            $columnName = array();
            $getColumnAName = false;
            
            if($toCol == $totalCols) {
                for ($row = $fromRow; $row <= $rows; $row++) {
                    for ($i = $fromCol; $i < $cols; $i++) {
                        $columnName[$i] = "column_" . $i;
                        if (isset($columnName[$i])) {
                            if (PHPExcel_Shared_Date::isDateTime($objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row))) { 
                                $tmp = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 

                                if (is_numeric($tmp)) { 
                                    $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'YYYY-MM-DD'); 
                                } else { 
                                    $key[$row][$i]['value'] = substr($tmp, 6, 4) . "-" . substr($tmp, 3, 2) . "-" . substr($tmp, 0, 2); 
                                } 
//                                $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'DD-MMM-YYYY'); 
                            } else { 
//                                $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                $check = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                if (substr($check, 0, 1) == "=") {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getCalculatedValue(); 
                                } else {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                }
                            }
                        }
                    }
                }

                $getColumnAName = true;
            } else {
                return 'FAIL|Template is wrong.';
            }
        }
        
        if ($getColumnAName) {
            $temporaryTable = '';
            $temporaryTableWarning = '';
            $temporaryTableDuplicate = '';
            $fieldNames = '';

            foreach ($columnName as $i => $names) {
                if (trim($names) != '') {
                    $temporaryTable .= ( ($temporaryTable == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableWarning .= ( ($temporaryTableWarning == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableDuplicate .= ( ($temporaryTableDuplicate == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $fieldNames .= ( ($fieldNames == '') ? '' : ', ') . "`" . trim($names) . "`";
                }
            }

            $tempTable = '`tmp_transaction_' . uniqid() . '`';
//            $temporaryTable = 'CREATE TEMPORARY TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableWarning = '`jb_sdw_' . uniqid() . '`';
//            $temporaryTableWarning = 'CREATE TEMPORARY TABLE ' . $tempTableWarning . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableWarning . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableDuplicate = '`jb_sdd_' . uniqid() . '`';
//            $temporaryTableDuplicate = 'CREATE TEMPORARY TABLE ' . $tempTableDuplicate . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableDuplicate . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
            $temporaryTable = 'CREATE TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';

//            return "0|". $temporaryTable;

            $result = $myDatabase->query($temporaryTable, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error create table '. $myDatabase->errorMessage;
            }

            $insertInto = '';
            foreach ($key as $row => $colData) {
                if ($colData[1] != null) {
                    $insertIntoCol = '';
                    foreach ($colData as $col => $colDatas) {
                        if (strpos($colDatas['value'], "NULL") !== false || $colDatas['value'] == '')
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "NULL";
                        else {
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "'". $colDatas['value'] ."'";
                        }
                    }
                    $insertInto .= ( ($insertInto == '') ? '' : ', ') . "(" . $insertIntoCol . ")";
//                die("INSERT INTO $temp_table ($fieldnames) VALUES " . $insertinto . ";");
                }
            }

            $insertIntoTemp = "INSERT INTO $tempTable ($fieldNames) VALUES " . $insertInto . ";";

            $result = $myDatabase->query($insertIntoTemp, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error insert table '. $myDatabase->errorMessage;
            }
//		}
//	}
//}

//            return 'OK|Table created.';
            
//            $insertIntoWarning = "INSERT INTO $tempTableWarning ($fieldNames) VALUES " . $insertInto . ";";
//
//            $resultWarning = $myDatabase->query($insertIntoWarning, MYSQLI_STORE_RESULT);
//            if($resultWarning === false) {
//                return 'FAIL|error insert warning table '. $myDatabase->errorMessage;
//            }
//            
//            $insertIntoDuplicate = "INSERT INTO $tempTableDuplicate ($fieldNames) VALUES " . $insertInto . ";";
//
//            $resultDuplicate = $myDatabase->query($insertIntoDuplicate, MYSQLI_STORE_RESULT);
//            if($resultDuplicate === false) {
//                return 'FAIL|error insert duplicate table '. $myDatabase->errorMessage;
//            }
            
//            return "0|". $temporaryTable;            
        
            $sqlSelect = "SELECT a.*, DATE_FORMAT(a.column_2, '%y') AS trans_year, COALESCE(a.column_15, 0) AS tarra FROM $tempTable a ORDER BY id ASC;";
            $resultSelect = $myDatabase->query($sqlSelect, MYSQLI_STORE_RESULT);
            $successRow = 0;
            $errorRow = 0;
            $warningRow = 0;
            $counterRow = 1;
            $errorMessage = '';
            $shipmentError = 0;
            $categoryError = 0;
            $rateError = 0;
            $currencyError = 0;
            $insuredError = 0;
            $countryFromError = 0;
            $countryToError = 0;
            $duplicateError = 0;
            $duplicateQuotation = '';
            $shipmentQuotation = '';
            $categoryQuotation = '';
            $rateQuotation = '';
            $currencyQuotation = '';
            $insuredQuotation = '';
            $countryFromQuotation = '';
            $countryToQuotation = '';
            
            date_default_timezone_set('Asia/Jakarta');

            $date = new DateTime();
            $currentDate = $date->format('d/m/Y H:i:s');
            
            $sqlStockpile = "SELECT * FROM stockpile WHERE stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sqlStockpile, MYSQLI_STORE_RESULT);
            $rowStockpile = $resultStockpile->fetch_object();
            $freightWeightRule = $rowStockpile->freight_weight_rule;
            $curahWeightRule = $rowStockpile->curah_weight_rule;
            $stockpileCode = $rowStockpile->stockpile_code;
            
            while($importedData = $resultSelect->fetch_object()) {
                if ($counterRow >= $readStartAtRow) {
                    $custTaxId = 'NULL';
                    $curahTaxId = 'NULL';
                    $ucTaxId = 'NULL';
                    $fcTaxId = 'NULL';
                    
                    if(strtoupper($importedData->column_12) == 'IN') {
                        // <editor-fold defaultstate="collapsed" desc="IN">
                        
                        // <editor-fold defaultstate="collapsed" desc="check vendor and supplier">
//                        if($importedData->column_9 != '0' || $importedData->column_9 != 'NONE' || $importedData->column_9 != '' || $importedData->column_9 != '-') {
//                            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_name) = UPPER('{$importedData->column_9}') LIMIT 1";
//                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                            if($result->num_rows == 1) {
//                                $row = $result->fetch_object();
//                                $vendorId = $row->vendor_id;
//                                $vendorCode = $row->vendor_code;
//                            } else {
//                                if($importedData->column_8 != '0' || $importedData->column_8 != 'NONE' || $importedData->column_8 != '' || $importedData->column_8 != '-') {
//                                    $vendorCode = strtoupper(substr($importedData->column_8, 2, 3)) ;
//                                } else {
//                                    $vendorCode = strtoupper(substr($importedData->column_9, 0, 3));
//                                }
//
//                                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, entry_by, entry_date) VALUES ("
//                                        . "'{$vendorCode}', '{$importedData->column_9}', "
//                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
//                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                                $vendorId = $myDatabase->insert_id;
//                            }
//                        }
                        
                        if($importedData->column_11 != '0' && strtoupper($importedData->column_11) != 'NONE' && $importedData->column_11 != '' && $importedData->column_11 != '-' && $importedData->column_11 != null) {
                            $sql = "SELECT * FROM `contract` WHERE UPPER(contract_no) = UPPER('{$importedData->column_11}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $vendorId = $row->vendor_id;
                            }
                        }
                        
                        if($importedData->column_10 != '0' && strtoupper($importedData->column_10) != 'NONE' && $importedData->column_10 != '' && $importedData->column_10 != '-' && $importedData->column_10 != null) {
                            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_name) = UPPER('{$importedData->column_10}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $supplierId = $row->vendor_id;
                            } else {
                                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, entry_by, entry_date) VALUES ("
                                        . "'". strtoupper(substr($importedData->column_10, 0, 3)) ."', '{$importedData->column_10}', "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $supplierId = $myDatabase->insert_id;
                            }
                        }
                        
//                        if($vendorId == "") {
//                            $vendorId = $supplierId;
//                        }
                        
                        if($supplierId == "") {
                            $supplierId = 'NULL';
                        }
                        
                        // </editor-fold>
                        
                        // <editor-fold defaultstate="collapsed" desc="check vehicle and unloading cost">
                        if($importedData->column_4 != '0' && strtoupper($importedData->column_4) != 'NONE' && $importedData->column_4 != '' && $importedData->column_4 != '-' && $importedData->column_4 != null) {
                            $sql = "SELECT * FROM `vehicle` WHERE UPPER(vehicle_name) = UPPER('{$importedData->column_4}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $vehicleId = $row->vehicle_id;
                            } else {
                                $sql = "INSERT INTO `vehicle` (vehicle_name, entry_by, entry_date) VALUES ("
                                        . "'{$importedData->column_4}', "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $vehicleId = $myDatabase->insert_id;
                            }
                        }
                        
                        if($importedData->column_32 != '0' && strtoupper($importedData->column_32) != 'NONE' && $importedData->column_32 != '' && $importedData->column_32 != '-' && $importedData->column_32 != null) {
                            $sql = "SELECT * FROM `labor` WHERE UPPER(labor_name) = UPPER('{$importedData->column_32}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $laborId = $row->labor_id;
                                $ucTaxId = $row->pph_tax_id;
                            } else {
								
                                $ppn = 0;
                                $pph = 0;
                                $ppnValue = 0;
                                $pphValue = 0;

                                if(strtoupper($importedData->column_33) == 'PPN') {
                                    $ppn = 1;
                                    $ppnValue = 10;
                                }

                                if($importedData->column_34 != '' || $importedData->column_34 != null) {
                                    $sqlPPh = "SELECT * FROM tax WHERE UPPER(tax_name) = UPPER('{$importedData->column_34}')";
                                    $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                                    if($resultPPh !== false && $resultPPh->num_rows == 1) {
                                        $rowPPh = $resultPPh->fetch_object();
                                        $pph = $rowPPh->tax_id;
                                        $pphValue = $rowPPh->tax_value;
                                    }
                                }
                                
                                $sql = "INSERT INTO `labor` (labor_name, labor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                                        . "'{$importedData->column_32}', '', '', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $laborId = $myDatabase->insert_id;
                                
                                $ucTaxId = $pph;
                            }
                        }
                        
                        if(($importedData->column_22 != '' && strtoupper($importedData->column_22) != 'NONE' && $importedData->column_22 != '0' && $importedData->column_22 != '-' && $importedData->column_22 != null) && $vehicleId != '') {
                            $sql = "SELECT * FROM unloading_cost WHERE vehicle_id = {$vehicleId} AND stockpile_id = {$stockpileId} AND price_converted = {$importedData->column_22} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $unloadingCostId = $row->unloading_cost_id;
                            } else {
                                $sql = "INSERT INTO `unloading_cost` (vehicle_id, stockpile_id, currency_id, exchange_rate, price, price_converted, entry_by, entry_date) VALUES ("
                                        . "{$vehicleId}, {$stockpileId}, 1, 1, {$importedData->column_22}, {$importedData->column_22}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $unloadingCostId = $myDatabase->insert_id;
                            }
                        } else {
                            $unloadingCostId = 'NULL';
                        }
                        
                        if($vehicleId == "") {
                            $unloadingCostId = 'NULL';
                        }
						if($laborId == "") {
                            $laborId = 'NULL';
                        }
                        
                        // </editor-fold>
                        
                        // <editor-fold defaultstate="collapsed" desc="check freight and freight cost">
                        if($importedData->column_6 != '0' && strtoupper($importedData->column_6) != 'NONE' && $importedData->column_6 != '' && $importedData->column_6 != '-' && $importedData->column_6 != null) {
                            $sql = "SELECT * FROM `freight` WHERE UPPER(freight_supplier) = UPPER('{$importedData->column_28}') AND UPPER(freight_code) = UPPER('{$importedData->column_29}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $freightId = $row->freight_id;
								$freightRule = $row->freight_rule;
                                $fcTaxId = $row->pph_tax_id;
                            } else {
								
                                $ppn = 0;
                                $pph = 0;
                                $ppnValue = 0;
                                $pphValue = 0;

                                if(strtoupper($importedData->column_30) == 'PPN') {
                                    $ppn = 1;
                                    $ppnValue = 10;
                                }

                                if($importedData->column_31 != '' || $importedData->column_31 != null) {
                                    $sqlPPh = "SELECT * FROM tax WHERE UPPER(tax_name) = UPPER('{$importedData->column_31}')";
                                    $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                                    if($resultPPh !== false && $resultPPh->num_rows == 1) {
                                        $rowPPh = $resultPPh->fetch_object();
                                        $pph = $rowPPh->tax_id;
                                        $pphValue = $rowPPh->tax_value;
                                    }
                                }
                                
                                $sql = "INSERT INTO `freight` (freight_code, freight_supplier, freight_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                                        . "'". strtoupper($importedData->column_29) ."', '{$importedData->column_28}', '', '', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $freightId = $myDatabase->insert_id;
                                
                                $fcTaxId = $pph;
                            }
                        }
                        
                        $freightQuantity = 0;
                        if(($importedData->column_21 != '' || $importedData->column_21 != '0' || $importedData->column_21 != '-' || $importedData->column_21 != null) && $freightId != '') {
                            // get freight weight
                            if($freightWeightRule == 0) {
                                if((float) $importedData->column_16 < (float) $importedData->column_13) {
                                    $freightQuantity = (float) $importedData->column_16;
                                } elseif((float) $importedData->column_16 > (float) $importedData->column_13) {
                                    $freightQuantity = (float) $importedData->column_13;
                                } else {
                                    $freightQuantity = (float) $importedData->column_13;
                                }
                            } elseif($freightWeightRule == 1) {
                                $freightQuantity = (float) $importedData->column_13;
                            } elseif($freightWeightRule == 2) {
                                $freightQuantity = (float) $importedData->column_16;
                            } else {
                                $freightQuantity = (float) $importedData->column_13;
                            }
                            
                            if($freightRule == 1){
							$freightPrice = (float) $importedData->column_21 / (float) $importedData->column_13;
							}else{
                            $freightPrice = (float) $importedData->column_21 / $freightQuantity;
							}
                            
                            $sql = "SELECT * FROM freight_cost WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId} AND vendor_id = {$vendorId} AND price_converted = {$freightPrice} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $freightCostId = $row->freight_cost_id;
                            } else {
                                $sql = "INSERT INTO `freight_cost` (freight_id, stockpile_id, vendor_id, currency_id, exchange_rate, price, price_converted, entry_by, entry_date) VALUES ("
                                        . "{$freightId}, {$stockpileId}, {$vendorId}, 1, 1, {$freightPrice}, {$freightPrice}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $freightCostId = $myDatabase->insert_id;
                            }
                        }
                        
                        if($freightId == '') {
                            $freightCostId = 'NULL';
                        }
                        
                        // </editor-fold>
                        
                        //curah
                        $boolNewContract = false;
                        $boolContinue = false;
                        $boolUpdateCurah = false;
                        if(strtoupper($importedData->column_24) == 'CURAH') {
                            $contractType = 'C';
                            
                            $totalSend = (float) $importedData->column_13;
                            $totalNetto = (float) $importedData->column_16;
                            
                            $sqlContract = "SELECT con.*, v.pph_tax_id 
                                    FROM contract con 
                                    INNER JOIN vendor v
                                        ON v.vendor_id = con.vendor_id
                                    WHERE contract_type = '{$contractType}' AND contract_no = '{$importedData->column_11}'";
                            $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);
                            if($resultContract->num_rows == 1) {
                                $rowContract = $resultContract->fetch_object();
                                $contractId = $rowContract->contract_id;
                                $unitPrice = $rowContract->price_converted;
                                $curahTaxId = $rowContract->pph_tax_id;

                                $sqlStockpileContract = "SELECT * FROM stockpile_contract WHERE contract_id = {$contractId} AND stockpile_id = {$stockpileId}";
                                $resultStockpileContract = $myDatabase->query($sqlStockpileContract, MYSQLI_STORE_RESULT);
                                if($resultStockpileContract->num_rows == 1) {
                                    $rowStockpileContract = $resultStockpileContract->fetch_object();
                                    $stockpileContractId = $rowStockpileContract->stockpile_contract_id;
                                    $currentQuantity = $rowStockpileContract->quantity;
                                    $boolContinue = true;
                                    $boolUpdateCurah = true;
                                } 
                            } 
                            
//                            $boolContinue = true;
//                            $boolNewContract = true;
                        } elseif(strtoupper($importedData->column_24) == 'PKS') {
                            $contractType = 'P';
                            
                            if(($importedData->column_8 != '' || $importedData->column_8 != '0' || $importedData->column_8 != '-' && $importedData->column_8 != 'NONE' && $importedData->column_8 != null) &&
                                    $importedData->column_11 != '' || $importedData->column_11 != '0' || $importedData->column_11 != '-' && $importedData->column_11 != 'NONE' && $importedData->column_11 != null) {
                                $sqlContract = "SELECT * FROM contract WHERE contract_type = '{$contractType}' AND contract_no = '{$importedData->column_11}'";
                                $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);
                                if($resultContract->num_rows == 1) {
                                    $rowContract = $resultContract->fetch_object();
                                    $contractId = $rowContract->contract_id;
                                    $unitPrice = $rowContract->price_converted;
                                    
                                    $sqlStockpileContract = "SELECT * FROM stockpile_contract WHERE contract_id = {$contractId} AND stockpile_id = {$stockpileId}";
                                    $resultStockpileContract = $myDatabase->query($sqlStockpileContract, MYSQLI_STORE_RESULT);
                                    if($resultStockpileContract->num_rows == 1) {
                                        $rowStockpileContract = $resultStockpileContract->fetch_object();
                                        $stockpileContractId = $rowStockpileContract->stockpile_contract_id;
                                        $boolContinue = true;
                                    } 
                                } 
//                                else {
//                                    $sqlTemp = "SELECT SUM(column_13) AS total_send, SUM(column_16) AS total_netto FROM {$tempTable} WHERE column_8 = '{$importedData->column_8}' "
//                                            . "AND column_11 = '{$importedData->column_11}' AND UPPER(column_12) = UPPER('{$importedData->column_12}')";
//                                    $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
//                                    $rowTemp = $resultTemp->fetch_object();
//                                    
//                                    $totalSend = $rowTemp->total_send;
//                                    $totalNetto = $rowTemp->total_netto;
//                                    $boolNewContract = true;
//                                }
                            } else {
                                $totalSend = (float) $importedData->column_13;
                                $totalNetto = (float) $importedData->column_16;
//                                $boolContinue = true;
//                                $boolNewContract = true;
                            }
                        }
                        
//                        $boolContinue = true;
                        if($boolNewContract) {
                            // <editor-fold defaultstate="collapsed" desc="create new contract for curah">
                            
//                            $checkPoNo = $contractType .'-'. $vendorCode .'-'. $importedData->trans_year;
//                            $sql = "SELECT po_no FROM contract WHERE po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
//                            $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                            if($resultPo->num_rows == 1) {
//                                $rowPo = $resultPo->fetch_object();
//                                $splitPoNo = explode('-', $rowPo->po_no);
//                                $nextPoNo = ((float) $splitPoNo[3]) + 1;
//                                $poNo = $checkPoNo .'-'. $nextPoNo;
//                            } else {
//                                $poNo = $checkPoNo .'-1';
//                            }
//                            
//                            if($totalNetto < $totalSend) {
//                                $quantity = $totalNetto;
//                            } elseif($totalNetto > $totalSend) {
//                                $quantity = $totalSend;
//                            } else {
//                                $quantity = $totalSend;
//                            }
//                            
//                            $sql = "INSERT INTO contract (contract_type, po_no, contract_no, vendor_id, currency_id, exchange_rate, "
//                                    . "price, price_converted, quantity, entry_by, entry_date) VALUES ("
//                                    . "'{$contractType}', '{$poNo}', '{$importedData->column_11}', {$vendorId}, 1, 1, "
//                                    . "{$importedData->column_27}, {$importedData->column_27}, {$quantity}, "
//                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
//                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                            
//                            if($result === false) {
//                                $boolContinue = false;
//                            } else {
//                                $contractId = $myDatabase->insert_id;
//                                $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
//                                        . "{$stockpileId}, {$contractId}, {$quantity}, "
//                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
//                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                                if($result === false) {
//                                    $boolContinue = false;
//                                } else {
//                                    $stockpileContractId = $myDatabase->insert_id;
//                                }
//                            }
                            
                            // </editor-fold>
                        }
                        
                        if($boolContinue) {
                            $shrink = 0;
                            if($contractType == 'P') {
                                if((float) $importedData->column_16 < (float) $importedData->column_13) {
                                    $quantity = (float) $importedData->column_16;
                                    $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;
                                } elseif((float) $importedData->column_16 > (float) $importedData->column_13) {
                                    $quantity = (float) $importedData->column_13;
                                    $shrink = 0;
                                } else {
                                    $quantity = (float) $importedData->column_13;
                                }
                            } elseif($contractType == 'C') {
                                if($curahWeightRule == 0) {
                                    if((float) $importedData->column_16 < (float) $importedData->column_13) {
                                        $quantity = (float) $importedData->column_16;
                                        $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;
                                    } elseif((float) $importedData->column_16 > (float) $importedData->column_13) {
                                        $quantity = (float) $importedData->column_13;
                                        $shrink = 0;
                                    } else {
                                        $quantity = (float) $importedData->column_13;
                                    }
                                } elseif($curahWeightRule == 1) {
                                    $quantity = (float) $importedData->column_13;
                                    $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;
                                } elseif($curahWeightRule == 2) {
                                    $quantity = (float) $importedData->column_16;
                                    $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;
                                } else {
                                    $quantity = (float) $importedData->column_13;
                                }
                            }

                            // get next slip no
							if($importedData->column_2 <= '2016-12-31'){
                            	$checkSlipNo = $stockpileCode;
							}else{
								$checkSlipNo = $stockpileCode .'-'. $importedData->trans_year;
							}
            //                $sql = "SELECT LPAD(COUNT(1) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ";
            //                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($resultSlip->num_rows == 0) {
                                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                            $rowSlipNo = $resultSlip->fetch_object();
                            $nextSlipNo = $rowSlipNo->next_id;
                            $slipNo = $checkSlipNo .'-'. $nextSlipNo;
                            
                            // get freight cost
                            if($freightCostId == 'NULL') {
                                $freightPrice = 0;
                            } 

                            // get unloading cost
                            
                            if($unloadingCostId == 'NULL') {
                                $unloadingPrice = 0;
                            } else {
                                $unloadingPrice = $importedData->column_22;
                            }
                            
//                            $unitPrice = $importedData->column_27;

                            // get inventory value
                            $inventoryValue = ($freightQuantity * $freightPrice) + $unloadingPrice + ($quantity * $unitPrice);

                            // insert into transaction
                            $sql = "INSERT INTO `transaction` (slip_no, stockpile_contract_id, transaction_date, loading_date, vehicle_no, labor_id, unloading_cost_id, "
                                    . "unloading_date, freight_cost_id, permit_no, transaction_type, vendor_id, send_weight, bruto_weight, tarra_weight, "
                                    . "netto_weight, notes, driver, freight_quantity, quantity, shrink, freight_price, unloading_price, unit_price, "
                                    . "inventory_value, block, uc_tax_id, fc_tax_id, curah_tax_id, entry_by, entry_date) "
                                    . "VALUES ('{$slipNo}', {$stockpileContractId}, STR_TO_DATE('{$importedData->column_2}', '%Y-%m-%d'), STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), "
                                    . "'{$importedData->column_3}', {$laborId}, {$unloadingCostId}, STR_TO_DATE('{$importedData->column_2}', '%Y-%m-%d'), {$freightCostId}, '{$importedData->column_7}', "
                                    . "1, {$supplierId}, {$importedData->column_13}, {$importedData->column_14}, {$importedData->tarra}, {$importedData->column_16}, '{$importedData->column_17}', "
                                    . "'{$importedData->column_18}', {$freightQuantity}, {$quantity}, {$shrink}, {$freightPrice}, {$unloadingPrice}, {$unitPrice}, {$inventoryValue}, 'NONE', "
                                    . "{$ucTaxId}, {$fcTaxId}, {$curahTaxId}, "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            
                            if($result !== false) {
                                $successRow = $successRow + 1;
                                
                                $transactionId = $myDatabase->insert_id;
                                
                                if($boolUpdateCurah) {
                                    /*$newQuantity = (float) $currentQuantity + (float) $totalSend;
                                    $sql = "UPDATE stockpile_contract SET quantity = {$newQuantity} WHERE stockpile_contract_id = {$stockpileContractId}";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    
                                    $sql = "UPDATE contract SET quantity = (SELECT SUM(quantity) FROM stockpile_contract_id WHERE contract_id = {$contractId}) WHERE contract_id = {$contractId}";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/
                                }
                                
                                $sql = "DELETE FROM {$tempTable} WHERE column_0 = {$importedData->column_0}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                               insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                            } else {
                                $errorRow = $errorRow + 1;
                            }
                        } else {
                            $errorRow = $errorRow + 1;
                        }
                        
                        // </editor-fold>
                    } elseif(strtoupper($importedData->column_12) == 'OUT') {
                        // <editor-fold defaultstate="collapsed" desc="OUT">
                        if(($importedData->column_10 != '0' || $importedData->column_10 != 'NONE' || $importedData->column_10 != '' || $importedData->column_10 != '-') &&
                                ($importedData->column_27 != '0' || $importedData->column_27 != 'NONE' || $importedData->column_27 != '' || $importedData->column_27 != '-')) {
                            $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$importedData->column_10}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $customerId = $row->customer_id;
                            } else {
                                $sql = "INSERT INTO `customer` (customer_name, entry_by, entry_date) VALUES ("
                                        . "'{$importedData->column_10}', "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $customerId = $myDatabase->insert_id;
                            }
                        }
                        
                        if($customerId != '') {
							
							
                           // $salesNo = strtoupper(str_replace(' ', '', substr($importedData->column_10, 0, 5)));
                            
							
                            $sql = "SELECT * FROM sales WHERE  customer_id = {$customerId} AND stockpile_id = {$stockpileId} "
                                    . "AND currency_id = 1 AND price = {$importedData->column_27} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $salesId = $row->sales_id;
                                $salesBalance = $row->quantity;
                            } else {
                                $sqlTemp = "SELECT count(1) AS total_shipment FROM {$tempTable} WHERE UPPER(column_10) = UPPER('{$importedData->column_10}') "
                                        . "AND UPPER(column_12) = UPPER('{$importedData->column_12}') AND column_27 = {$importedData->column_27}";
                                $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
                                $rowTemp = $resultTemp->fetch_object();
                                $totalShipment = $rowTemp->total_shipment;
                                
                                $sqlTemp = "SELECT MIN(column_5) AS sales_date, SUM(column_13) AS total_quantity FROM {$tempTable} WHERE UPPER(column_10) = UPPER('{$importedData->column_10}') "
                                        . "AND UPPER(column_12) = UPPER('{$importedData->column_12}') AND column_27 = {$importedData->column_27}";
                                $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
                                $rowTemp = $resultTemp->fetch_object();
                                $salesDate = $rowTemp->sales_date;
                                $totalQuantity = $rowTemp->total_quantity;
                                $salesBalance = $totalQuantity;
                                
								
                                $sql = "INSERT INTO sales (sales_no, sales_date, sales_type, customer_id, stockpile_id, currency_id, exchange_rate, "
                                        . "price, price_converted, quantity, total_shipment, entry_by, entry_date) VALUES ("
                                        . "'{$salesNo}', STR_TO_DATE('{$salesDate}', '%Y-%m-%d'), 1, {$customerId}, {$stockpileId}, 1, 1, "
                                        . "{$importedData->column_27}, {$importedData->column_27}, {$totalQuantity}, {$totalShipment}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                                $boolContinue = true;
                                if($result !== false) {
                                    $salesId = $myDatabase->insert_id;
                                    
                                    for($i = 1; $i <= $totalShipment; $i++) {
                                        $shipmentCode = $salesNo .'-'. $i;

                                        $sql = "INSERT INTO `shipment` (shipment_code, sales_id, entry_by, entry_date) VALUES ("
                                                . "'{$shipmentCode}', {$salesId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    }
                                } else {
                                    $boolContinue = false;
                                }
                            }
                            
                            if($boolContinue) {
                                $sql = "SELECT shipment_id FROM shipment WHERE shipment_code LIKE '{$salesNo}%' AND shipment_status = 0 ORDER BY shipment_code ASC LIMIT 1";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if($result->num_rows == 1) {
                                    $row = $result->fetch_object();
                                    $shipmentId = $row->shipment_id;
                                    
                                    $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;

                                    // get next slip no
                                    //$checkSlipNo = $stockpileCode /*.'-'. $importedData->trans_year*/;
								if($importedData->column_2 <= '2016-12-31'){
                            		$checkSlipNo = $stockpileCode;
								}else{
									$checkSlipNo = $stockpileCode .'-'. $importedData->trans_year;
								}
                                    $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultSlip->num_rows == 0) {
                                        $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM transaction LIMIT 1";
                                        $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    }

                                    $rowSlipNo = $resultSlip->fetch_object();
                                    $nextSlipNo = $rowSlipNo->next_id;
                                    $slipNo = $checkSlipNo .'-'. $nextSlipNo;
                                    
                                    $sql = "INSERT INTO `transaction` (slip_no, product_id, shipment_id, transaction_date, vehicle_no, transaction_type, "
                                            . "send_weight, quantity, shrink, entry_by, entry_date) VALUES ('{$slipNo}', 1, "
                                            . "{$shipmentId}, STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), '{$importedData->column_9}', 2, "
                                            . "{$importedData->column_13}, {$importedData->column_16}, {$shrink}, "
                                            . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    
                                    if($result !== false) {
                                        $transactionId = $myDatabase->insert_id;

                                        // insert into delivery
                                        $sql = "SELECT t.* 
                                                FROM transaction t 
                                                WHERE t.stockpile_contract_id IN (
                                                    SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                                                ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                                                ORDER BY t.slip_no ASC, t.unloading_date ASC";
                                        $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        $totalInventoryValue = 0;
                                        if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                                            $balanceLeft = (float) $importedData->column_13;
                                            while($rowDelivery = $resultDelivery->fetch_object()) {
                                                if($balanceLeft > 0) {
                                                    if($rowDelivery->delivery_status == 0) {
                                                        if($balanceLeft >= $rowDelivery->quantity) {
                                                            $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                                            $quantityTaken = $rowDelivery->quantity;
                                                            $percentTaken = 1;
                                                            $deliveryStatus = 1;
                                                        } elseif($balanceLeft < $rowDelivery->quantity) {
                                                            $quantityTaken = $balanceLeft;
                                                            $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                                            $balanceLeft = 0;
                                                            $deliveryStatus = 2;
                                                        }
                                                    } elseif($rowDelivery->delivery_status == 2) {
                                                        $totalTaken = 0;
                                                        $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                                        $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                                        if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                                            $rowTaken = $resultTaken->fetch_object();
                                                            $totalTaken = $rowTaken->total_taken;
                                                        }

                                                        if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                                            $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                                            $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                            $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                                            $deliveryStatus = 1;
                                                        } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                                            $quantityTaken = $balanceLeft;
                                                            $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                                            $balanceLeft = 0;
                                                            $deliveryStatus = 2;
                                                        }
                                                    } 

                                                    $deliveryValue = $quantityTaken * (float) $importedData->column_27;
                                                    $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                                    $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                                    $percentTaken = $percentTaken * 100;

                                                    $sql = "INSERT INTO delivery (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                                            . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), {$percentTaken}, "
                                                            . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                                    $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                                }
                                            }
                                        }

                                        //$updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                                        $updateInventoryValue = $totalInventoryValue;

                                        $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                        // update shipment
                                        $cogsAmount = $updateInventoryValue;
                                        $invoiceAmount = (float) $importedData->column_16 * (float) $importedData->column_27;
                                        $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), "
                                                . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$importedData->column_16}, shipment_status = 1 "
                                                . "WHERE shipment_id = {$shipmentId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                        $sql = "SELECT COALESCE(SUM(quantity), 0) AS delivered_balance FROM `transaction` 
                                                WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                                                AND transaction_type = 2
                                                AND transaction_id <> {$transactionId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        $row = $result->fetch_object();
                                        $deliveredBalance = $row->delivered_balance;
                                        
                                        // update sales
                                        $boolUpdateSales = false;
                                        if((float) $importedData->column_13 == ($salesBalance - $deliveredBalance)) {
                                            $salesStatus = 1;
                                            $boolUpdateSales = true;
                                        } elseif((float) $importedData->column_13 < ($salesBalance - $deliveredBalance)) {
                                            $salesStatus = 2;
                                            $boolUpdateSales = true;
                                        }

                                        if($boolUpdateSales) {
                                            $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        }
                                        
                                        $successRow = $successRow + 1;
                                    } else {
                                        $errorRow = $errorRow + 1;
                                    }
                                } else {
                                    $errorRow = $errorRow + 1;
                                }
                            }
                        }
                        
                        // </editor-fold>
                    }
                    
                }
                $counterRow++;
            } 
            
            if(($successRow+$warningRow) == ($counterRow-1) && $errorRow == 0) {
                $result = $myDatabase->query("COMMIT", MYSQLI_STORE_RESULT);
                
                $sql = "DROP TABLE {$tempTable}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                

                return "OK|". $successRow ." Row(s) import successfully, ". $warningRow ." Row(s) failed with warning. ". $errorMessage;
            } else {
                $result = $myDatabase->query("ROLLBACK", MYSQLI_STORE_RESULT);

                return "FAIL|Import failed. ". $errorRow ." Rows(s) can not be imported. Please contact administrator. ";
            }
        }
    } else {
        return 'FAIL|File not exists.';
    } 
    // </editor-fold>
}
function excelImportGeneralVendor($myDatabase, $fileName = "", $stockpileId = 0, $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1) {
    // <editor-fold defaultstate="collapsed" desc="function excelImportTransaction($myDatabase, $fileName = "", $stockpileId = 0, $vendorId = 0, $stockpileContractId = 0, $onSheet = 0, $fromRow = 1, $toRow = -1, $fromCol = 0, $toCol = -1)">
    if (file_exists(realpath($fileName))) {
        $fileNameRealPath = realpath($fileName);
        
        require_once './assets/extensions/PHPExcel.php';
        require_once './assets/extensions/PHPExcel/IOFactory.php';
        require_once './assets/extensions/PHPExcel/Cell/AdvancedValueBinder.php';

        $objReader = PHPExcel_IOFactory::createReader('Excel5');

        $objPHPExcel = $objReader->load($fileNameRealPath);
        
        $readStartAtRow = 1; 
        $totalCols = 14;

        $result = $myDatabase->query("START TRANSACTION", MYSQLI_STORE_RESULT);
        
//        $sheetCount = $objPHPExcel->getSheetCount();
        $sheetCount = 1;
        for ($onSheet; $onSheet < $sheetCount; $onSheet++) {
            $objPHPExcel->setActiveSheetIndex($onSheet);
            $objWorksheet = $objPHPExcel->getActiveSheet();

            $rows = $objWorksheet->getHighestRow();
            $cols = PHPExcel_Cell::columnIndexFromString($objWorksheet->getHighestColumn());
            if ($toRow == -1)
                $toRow = $rows;
            if ($toCol == -1)
                $toCol = $cols;
            
            $key = array();
            $columnName = array();
            $getColumnAName = false;
            
            if($toCol == $totalCols) {
                for ($row = $fromRow; $row <= $rows; $row++) {
                    for ($i = $fromCol; $i < $cols; $i++) {
                        $columnName[$i] = "column_" . $i;
                        if (isset($columnName[$i])) {
                            if (PHPExcel_Shared_Date::isDateTime($objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row))) { 
                                $tmp = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 

                                if (is_numeric($tmp)) { 
                                    $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'YYYY-MM-DD'); 
                                } else { 
                                    $key[$row][$i]['value'] = substr($tmp, 6, 4) . "-" . substr($tmp, 3, 2) . "-" . substr($tmp, 0, 2); 
                                } 
//                                $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'DD-MMM-YYYY'); 
                            } else { 
//                                $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                $check = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                if (substr($check, 0, 1) == "=") {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getCalculatedValue(); 
                                } else {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                }
                            }
                        }
                    }
                }

                $getColumnAName = true;
            } else {
                return 'FAIL|Template is wrong.';
            }
        }
        
        if ($getColumnAName) {
            $temporaryTable = '';
            $temporaryTableWarning = '';
            $temporaryTableDuplicate = '';
            $fieldNames = '';

            foreach ($columnName as $i => $names) {
                if (trim($names) != '') {
                    $temporaryTable .= ( ($temporaryTable == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableWarning .= ( ($temporaryTableWarning == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableDuplicate .= ( ($temporaryTableDuplicate == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $fieldNames .= ( ($fieldNames == '') ? '' : ', ') . "`" . trim($names) . "`";
                }
            }

            $tempTable = '`tmp_general_vendor_' . uniqid() . '`';
//            $temporaryTable = 'CREATE TEMPORARY TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableWarning = '`jb_sdw_' . uniqid() . '`';
//            $temporaryTableWarning = 'CREATE TEMPORARY TABLE ' . $tempTableWarning . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableWarning . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableDuplicate = '`jb_sdd_' . uniqid() . '`';
//            $temporaryTableDuplicate = 'CREATE TEMPORARY TABLE ' . $tempTableDuplicate . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableDuplicate . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
            $temporaryTable = 'CREATE TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';

//            return "0|". $temporaryTable;

            $result = $myDatabase->query($temporaryTable, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error create table '. $myDatabase->errorMessage;
            }

            $insertInto = '';
            foreach ($key as $row => $colData) {
                if ($colData[1] != null) {
                    $insertIntoCol = '';
                    foreach ($colData as $col => $colDatas) {
                        if (strpos($colDatas['value'], "NULL") !== false || $colDatas['value'] == '')
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "NULL";
                        else {
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "'". $colDatas['value'] ."'";
                        }
                    }
                    $insertInto .= ( ($insertInto == '') ? '' : ', ') . "(" . $insertIntoCol . ")";
//                die("INSERT INTO $temp_table ($fieldnames) VALUES " . $insertinto . ";");
                }
            }

            $insertIntoTemp = "INSERT INTO $tempTable ($fieldNames) VALUES " . $insertInto . ";";

            $result = $myDatabase->query($insertIntoTemp, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error insert table '. $myDatabase->errorMessage;
            }
//		}
//	}
//}

//            return 'OK|Table created.';
            
//            $insertIntoWarning = "INSERT INTO $tempTableWarning ($fieldNames) VALUES " . $insertInto . ";";
//
//            $resultWarning = $myDatabase->query($insertIntoWarning, MYSQLI_STORE_RESULT);
//            if($resultWarning === false) {
//                return 'FAIL|error insert warning table '. $myDatabase->errorMessage;
//            }
//            
//            $insertIntoDuplicate = "INSERT INTO $tempTableDuplicate ($fieldNames) VALUES " . $insertInto . ";";
//
//            $resultDuplicate = $myDatabase->query($insertIntoDuplicate, MYSQLI_STORE_RESULT);
//            if($resultDuplicate === false) {
//                return 'FAIL|error insert duplicate table '. $myDatabase->errorMessage;
//            }
            
//            return "0|". $temporaryTable;            
        
            $sqlSelect = "SELECT a.* FROM $tempTable a ORDER BY id ASC;";
            $resultSelect = $myDatabase->query($sqlSelect, MYSQLI_STORE_RESULT);
            $successRow = 0;
            $errorRow = 0;
            $warningRow = 0;
            $counterRow = 1;
            $errorMessage = '';
            $shipmentError = 0;
            $categoryError = 0;
            $rateError = 0;
            $currencyError = 0;
            $insuredError = 0;
            $countryFromError = 0;
            $countryToError = 0;
            $duplicateError = 0;
            $duplicateQuotation = '';
            $shipmentQuotation = '';
            $categoryQuotation = '';
            $rateQuotation = '';
            $currencyQuotation = '';
            $insuredQuotation = '';
            $countryFromQuotation = '';
            $countryToQuotation = '';
            
            date_default_timezone_set('Asia/Jakarta');

            $date = new DateTime();
            $currentDate = $date->format('d/m/Y H:i:s');
            
            $sqlStockpile = "SELECT * FROM stockpile WHERE stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sqlStockpile, MYSQLI_STORE_RESULT);
            $rowStockpile = $resultStockpile->fetch_object();
            //$freightWeightRule = $rowStockpile->freight_weight_rule;
            //$curahWeightRule = $rowStockpile->curah_weight_rule;
            $stockpileCode = $rowStockpile->stockpile_code;
			$stockpileId = $rowStockpile->stockpile_id;
            
            while($importedData = $resultSelect->fetch_object()) {
                if ($counterRow >= $readStartAtRow) {
                    $generalVendorName = $importedData->column_2;
					$generalVendorAddress = 'NULL';
                    $npwp = 'NULL';
                    $npwpName = 'NULL';
					$npwpAddress = 'NULL';
                    $bankName = 'NULL';
					$branch = 'NULL';
					$accountNo = 'NULL';
					$beneficiary = 'NULL';
					$swiftCode	 = 'NULL';
					$ppnTaxId = 0;
					$pphTaxId = 0;
					$ppnTax = 0;
					$pphTax = 0;
                    
                   
					if($importedData->column_3 != '0' && strtoupper($importedData->column_3) != 'NONE' && $importedData->column_3 != '' && $importedData->column_3 != '-' && $importedData->column_3 != null) {
						$accountNo = $importedData->column_3;
					}
					if($importedData->column_4 != '0' && strtoupper($importedData->column_4) != 'NONE' && $importedData->column_4 != '' && $importedData->column_4 != '-' && $importedData->column_4 != null) {
						$generalVendorAddress = $importedData->column_4;
					}
					if($importedData->column_5 != '0' && strtoupper($importedData->column_5) != 'NONE' && $importedData->column_5 != '' && $importedData->column_5 != '-' && $importedData->column_5 != null) {
						$beneficiary = $importedData->column_5;
					}
					if($importedData->column_6 != '0' && strtoupper($importedData->column_6) != 'NONE' && $importedData->column_6 != '' && $importedData->column_6 != '-' && $importedData->column_6 != null) {
						$bankName = $importedData->column_6;
					}
					if($importedData->column_7 != '0' && strtoupper($importedData->column_7) != 'NONE' && $importedData->column_7 != '' && $importedData->column_7 != '-' && $importedData->column_7 != null) {
						$branch = $importedData->column_7;
					}
					if($importedData->column_8 != '0' && strtoupper($importedData->column_8) != 'NONE' && $importedData->column_8 != '' && $importedData->column_8 != '-' && $importedData->column_8 != null) {
						$swiftCode = $importedData->column_8;
					}
					if($importedData->column_9 != '0' && strtoupper($importedData->column_9) != 'NONE' && $importedData->column_9 != '' && $importedData->column_9 != '-' && $importedData->column_9 != null) {
						$npwp = $importedData->column_9;
					}
					if($importedData->column_10 != '0' && strtoupper($importedData->column_10) != 'NONE' && $importedData->column_10 != '' && $importedData->column_10 != '-' && $importedData->column_10 != null) {
						$npwpName = $importedData->column_10;
					}
					if($importedData->column_11 != '0' && strtoupper($importedData->column_11) != 'NONE' && $importedData->column_11 != '' && $importedData->column_11 != '-' && $importedData->column_11 != null) {
						$npwpAddress = $importedData->column_11;
					}
				
                        
                     if($importedData->column_12 != '0' && strtoupper($importedData->column_12) != 'NONE' && $importedData->column_12 != '' && $importedData->column_12 != '-' && $importedData->column_12 != null) {
                            $sql = "SELECT * FROM `tax` WHERE UPPER(tax_name) = UPPER('{$importedData->column_12}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $ppnTaxId = $row->tax_id;
								$ppnTax = $row->tax_value;
							}
                        }
					
					if($importedData->column_13 != '0' && strtoupper($importedData->column_13) != 'NONE' && $importedData->column_13 != '' && $importedData->column_13 != '-' && $importedData->column_13 != null) {
                            $sql = "SELECT * FROM `tax` WHERE UPPER(tax_name) = UPPER('{$importedData->column_13}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $pphTaxId = $row->tax_id;
								$pphTax = $row->tax_value;
                            }
                        }
                        

                            // insert into transaction
                            $sql = "INSERT INTO `general_vendor` (general_vendor_name, general_vendor_address, npwp, npwp_name, npwp_address, bank_name, branch, account_no, beneficiary, swift_code, ppn_tax_id, pph_tax_id, ppn, pph, stockpile_id, active, entry_by, entry_date)
                                    VALUES ('{$generalVendorName}', '{$generalVendorAddress}', '{$npwp}', '{$npwpName}', '{$npwpAddress}', '{$bankName}', '{$branch}', '{$accountNo}', '{$beneficiary}', '{$swiftCode}', '{$ppnTaxId}', '{$pphTaxId}', '{$ppnTax}', '{$pphTax}', {$stockpileId}, 1, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            
                            if($result !== false) {
                                $successRow = $successRow + 1;
                                                       
                                
                                $sql = "DELETE FROM {$tempTable} WHERE column_0 = {$importedData->column_0}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                              
                            } else {
                                $errorRow = $errorRow + 1;
                            }
                        
                        
                        // </editor-fold>
                     
                    
                }
                $counterRow++;
            } 
            
            if(($successRow+$warningRow) == ($counterRow-1) && $errorRow == 0) {
                $result = $myDatabase->query("COMMIT", MYSQLI_STORE_RESULT);
                
                $sql = "DROP TABLE {$tempTable}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                

                return "OK|". $successRow ." Row(s) import successfully, ". $warningRow ." Row(s) failed with warning. ". $errorMessage;
            } else {
                $result = $myDatabase->query("ROLLBACK", MYSQLI_STORE_RESULT);
				echo $sql;
                return "FAIL|Import failed. ". $errorRow ." Rows(s) can not be imported. Please contact administrator. ";
            }
        }
    } else {
        return 'FAIL|File not exists.';
    } 
    // </editor-fold>
}
function excelImportJurnal($myDatabase, $fileName = "", $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1) {
   
    if (file_exists(realpath($fileName))) {
        $fileNameRealPath = realpath($fileName);
        
        require_once './assets/extensions/PHPExcel.php';
        require_once './assets/extensions/PHPExcel/IOFactory.php';
        require_once './assets/extensions/PHPExcel/Cell/AdvancedValueBinder.php';

        $objReader = PHPExcel_IOFactory::createReader('Excel5');

        $objPHPExcel = $objReader->load($fileNameRealPath);
        
        $readStartAtRow = 1; 
        $totalCols = 16;

        $result = $myDatabase->query("START JURNAL", MYSQLI_STORE_RESULT);
        
//        $sheetCount = $objPHPExcel->getSheetCount();
        $sheetCount = 1;
        for ($onSheet; $onSheet < $sheetCount; $onSheet++) {
            $objPHPExcel->setActiveSheetIndex($onSheet);
            $objWorksheet = $objPHPExcel->getActiveSheet();

            $rows = $objWorksheet->getHighestRow();
            $cols = PHPExcel_Cell::columnIndexFromString($objWorksheet->getHighestColumn());
            if ($toRow == -1)
                $toRow = $rows;
            if ($toCol == -1)
                $toCol = $cols;
            
            $key = array();
            $columnName = array();
            $getColumnAName = false;
            
            if($toCol == $totalCols) {
                for ($row = $fromRow; $row <= $rows; $row++) {
                    for ($i = $fromCol; $i < $cols; $i++) {
                        $columnName[$i] = "column_" . $i;
                        if (isset($columnName[$i])) {
                            if (PHPExcel_Shared_Date::isDateTime($objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row))) { 
                                $tmp = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 

                                if (is_numeric($tmp)) { 
                                    $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'YYYY-MM-DD'); 
                                } else { 
                                    $key[$row][$i]['value'] = substr($tmp, 6, 4) . "-" . substr($tmp, 3, 2) . "-" . substr($tmp, 0, 2); 
                                } 
//                                $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'DD-MMM-YYYY'); 
                            } else { 
//                                $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                $check = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                if (substr($check, 0, 1) == "=") {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getCalculatedValue(); 
                                } else {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                }
                            }
                        }
                    }
                }

                $getColumnAName = true;
            } else {
                return 'FAIL|Template is wrong.';
            }
        }
        
        if ($getColumnAName) {
            $temporaryTable = '';
            $temporaryTableWarning = '';
            $temporaryTableDuplicate = '';
            $fieldNames = '';

            foreach ($columnName as $i => $names) {
                if (trim($names) != '') {
                    $temporaryTable .= ( ($temporaryTable == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableWarning .= ( ($temporaryTableWarning == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableDuplicate .= ( ($temporaryTableDuplicate == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $fieldNames .= ( ($fieldNames == '') ? '' : ', ') . "`" . trim($names) . "`";
                }
            }

            $tempTable = '`tmp_jurnal_' . uniqid() . '`';
//            $temporaryTable = 'CREATE TEMPORARY TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableWarning = '`jb_sdw_' . uniqid() . '`';
//            $temporaryTableWarning = 'CREATE TEMPORARY TABLE ' . $tempTableWarning . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableWarning . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableDuplicate = '`jb_sdd_' . uniqid() . '`';
//            $temporaryTableDuplicate = 'CREATE TEMPORARY TABLE ' . $tempTableDuplicate . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableDuplicate . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
            $temporaryTable = 'CREATE TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';

//            return "0|". $temporaryTable;

            $result = $myDatabase->query($temporaryTable, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error create table '. $myDatabase->errorMessage;
            }

            $insertInto = '';
            foreach ($key as $row => $colData) {
                if ($colData[1] != null) {
                    $insertIntoCol = '';
                    foreach ($colData as $col => $colDatas) {
                        if (strpos($colDatas['value'], "NULL") !== false || $colDatas['value'] == '')
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "NULL";
                        else {
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "'". $colDatas['value'] ."'";
                        }
                    }
                    $insertInto .= ( ($insertInto == '') ? '' : ', ') . "(" . $insertIntoCol . ")";
//                die("INSERT INTO $temp_table ($fieldnames) VALUES " . $insertinto . ";");
                }
            }

            $insertIntoTemp = "INSERT INTO $tempTable ($fieldNames) VALUES " . $insertInto . ";";

            $result = $myDatabase->query($insertIntoTemp, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error insert table '. $myDatabase->errorMessage;
            }
		//		}
//	}
//}

//            return 'OK|Table created.';
            
//            $insertIntoWarning = "INSERT INTO $tempTableWarning ($fieldNames) VALUES " . $insertInto . ";";
//
//            $resultWarning = $myDatabase->query($insertIntoWarning, MYSQLI_STORE_RESULT);
//            if($resultWarning === false) {
//                return 'FAIL|error insert warning table '. $myDatabase->errorMessage;
//            }
//            
//            $insertIntoDuplicate = "INSERT INTO $tempTableDuplicate ($fieldNames) VALUES " . $insertInto . ";";
//
//            $resultDuplicate = $myDatabase->query($insertIntoDuplicate, MYSQLI_STORE_RESULT);
//            if($resultDuplicate === false) {
//                return 'FAIL|error insert duplicate table '. $myDatabase->errorMessage;
//            }
            
//            return "0|". $temporaryTable;            
        
            $sqlSelect = "SELECT a.* FROM $tempTable a ORDER BY a.id ASC, a.column_1 ASC;";
            $resultSelect = $myDatabase->query($sqlSelect, MYSQLI_STORE_RESULT);
            $successRow = 0;
            $errorRow = 0;
            $warningRow = 0;
            $counterRow = 1;
            $errorMessage = '';
            $shipmentError = 0;
            $categoryError = 0;
            $rateError = 0;
            $currencyError = 0;
            $insuredError = 0;
            $countryFromError = 0;
            $countryToError = 0;
            $duplicateError = 0;
            $duplicateQuotation = '';
            $shipmentQuotation = '';
            $categoryQuotation = '';
            $rateQuotation = '';
            $currencyQuotation = '';
            $insuredQuotation = '';
            $countryFromQuotation = '';
            $countryToQuotation = '';
            $boolContinue = true;
			
            date_default_timezone_set('Asia/Jakarta');

            $date = new DateTime();
            $currentDate = $date->format('d/m/Y H:i:s');
            $currentYearMonth = $date->format('ym');
			
            while($importedData = $resultSelect->fetch_object()) {
                if ($counterRow >= $readStartAtRow) {
            
			/*$gl_add_no = 'NULL';
			//$sqlColumn = "SELECT column_1 FROM $tempTable GROUP BY column_1";
			$sqlColumn = "SELECT gl_add_id, gl_add_no FROM gl_add WHERE gl_add_no = UPPER('{$importedData->column_1}')";
            $resultColumn = $myDatabase->query($sqlColumn, MYSQLI_STORE_RESULT);
			while($rowColumn = $resultColumn->fetch_object()) {
            $gl_add_no = $rowColumn->gl_add_no;
			}
                    if(strtoupper($importedData->column_1) == strtoupper($gl_add_no)) {
						$gl_type = 0;
						$gl_add_id = 0;
						$amountConverted = 0;
						$amount = 0;
						$notes = 'NULL';
						
						
                        $sql = "SELECT gl_add_id, gl_add_no FROM gl_add WHERE gl_add_no = UPPER('{$importedData->column_1}')";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $gl_add_id = $row->gl_add_id;
                            }
							
							
                        if($importedData->column_18 != '0' && strtoupper($importedData->column_18) != 'NONE' && $importedData->column_18 != '' && $importedData->column_18 != '-' && $importedData->column_18 != null) {
                            $gl_type = 2;
							$amount = $importedData->column_18;
							$amountConverted = $importedData->column_18 * $importedData->column_16;
                        }
						
						if($importedData->column_17 != '0' && strtoupper($importedData->column_17) != 'NONE' && $importedData->column_17 != '' && $importedData->column_17 != '-' && $importedData->column_17 != null) {
                            $gl_type = 1;
							$amount = $importedData->column_17;
							$amountConverted = $importedData->column_17 * $importedData->column_16;
                        }
                        
                        if($importedData->column_11 != '0' && strtoupper($importedData->column_11) != 'NONE' && $importedData->column_11 != '' && $importedData->column_11 != '-' && $importedData->column_11 != null) {
                            $sql = "SELECT * FROM `stockpile` WHERE UPPER(stockpile_name) = UPPER('{$importedData->column_11}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $stockpileId = $row->stockpile_id;
                            }
                        }
                        
                        // <editor-fold defaultstate="collapsed" desc="check vehicle and unloading cost">
                        if($importedData->column_13 != '0' && strtoupper($importedData->column_13) != 'NONE' && $importedData->column_13 != '' && $importedData->column_13 != '-' && $importedData->column_13 != null) {
                            $sql = "SELECT * FROM `account` WHERE UPPER(account_no) = UPPER({$importedData->column_13}) LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $accountId = $row->account_id;
                            } 
                        }
                        
                        if($importedData->column_15 != '0' && strtoupper($importedData->column_15) != 'NONE' && $importedData->column_15 != '' && $importedData->column_15 != '-' && $importedData->column_15 != null) {
                            $sql = "SELECT * FROM `currency` WHERE UPPER(currency_code) = UPPER('{$importedData->column_15}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $currencyId = $row->currency_id;
                                
                            }
                        }
                         if($importedData->column_12 != '0' || $importedData->column_12 != 'NONE' || $importedData->column_12 != '' || $importedData->column_12 != '-') {
						  $notes = $importedData->column_12;
					   }
                        
                        if($boolContinue) {
                           
						   	$notes = $importedData->column_12;
                            // insert into transaction
                            $sql = "INSERT INTO `gl_detail` (gl_add_id, gl_type, stockpile_id, account_id, currency_id, exchange_rate, amount, "
                                    . "amount_converted, notes, entry_by, entry_date)"
                                    . "VALUES ('{$gl_add_id}', '{$gl_type}', '{$stockpileId}', '{$accountId}', '{$currencyId}',"
                                    . "'{$importedData->column_16}', '{$amount}', '{$amountConverted}', '{$notes}',"
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            
                            if($result !== false) {
                                $successRow = $successRow + 1;
                                
                                $jurnalId = $myDatabase->insert_id;
                              
                                
                                $sql = "DELETE FROM {$tempTable} WHERE column_0 = {$importedData->column_0}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                               insertGeneralLedger($myDatabase, 'JURNAL MEMORIAL', "NULL", "NULL", "NULL", "NULL", "NULL", $jurnalId);
                            } else {
                                $errorRow = $errorRow + 1;
								echo 'FALSE1';
								echo $sql;
                            } 
                        } else {
                            $errorRow = $errorRow + 1;
							echo 'FALSE2';
                        }
                        
                        // </editor-fold>
                    } elseif(strtoupper($importedData->column_1) != strtoupper($gl_add_no)) {
                        // <editor-fold defaultstate="collapsed" desc="OUT">
                        if($importedData->column_2 != '0' || $importedData->column_2 != 'NONE' || $importedData->column_2 != '' || $importedData->column_2 != '-') {
							$generalVendorId = 0;
							$vendorId = 0;
							$contractId = 0;
							$invoiceId = 0;
							$transactionId = 0;
							$shipmentId = 0;
							$qty = 0;
							$price = 0;
							$notes = 'NULL';
							 
							$sql = "SELECT * FROM stockpile WHERE UPPER(stockpile_name) = UPPER('{$importedData->column_2}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $stockpileId = $row->stockpile_id;
							}
							
							$str = $importedData->column_0;
							$dateJurnal = DateTime::createFromFormat('Y-m-d', $str);
							$jurnalYearMonth = $dateJurnal->format('ym');
	
		
						$checkJurnalNo = 'JM/JPJ/'. $jurnalYearMonth;
 
						$sql = "SELECT gl_add_no FROM gl_add WHERE gl_add_no LIKE '{$checkJurnalNo}%' ORDER BY gl_add_id DESC LIMIT 1";
					$resultJurnal = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
					if($resultJurnal->num_rows == 1) {
            $rowJurnal = $resultJurnal->fetch_object();
            $splitJurnalNo = explode('/', $rowJurnal->gl_add_no);
            $lastExplode = count($splitJurnalNo) - 1;
            $nextJurnalNo = ((float) $splitJurnalNo[$lastExplode]) + 1;
            $jurnalNo = $checkJurnalNo .'/'. $nextJurnalNo;
        } else {
            $jurnalNo = $checkJurnalNo .'/1';
        
    }
                        
                        
                       if($importedData->column_3 != '0' && strtoupper($importedData->column_3) != 'NONE' && $importedData->column_3 != '' && $importedData->column_3 != '-' && $importedData->column_3 != null) {
						  $sql = "SELECT * FROM general_vendor WHERE UPPER(general_vendor_name) = UPPER('{$importedData->column_3}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $generalVendorId = $row->general_vendor_id;
							}
						 
					   }
					   
					   if($importedData->column_4 != '0' && strtoupper($importedData->column_4) != 'NONE' && $importedData->column_4 != '' && $importedData->column_4 != '-' && $importedData->column_4 != null) {
						  $sql = "SELECT * FROM vendor WHERE UPPER(vendor_name) = UPPER('{$importedData->column_4}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $vendorId = $row->vendor_id;
							}
						   
					   }
					   
					   if($importedData->column_5 != '0' && strtoupper($importedData->column_5) != 'NONE' && $importedData->column_5 != '' && $importedData->column_5 != '-' && $importedData->column_5 != null) {
						  $sql = "SELECT sc.* FROM stockpile_contract sc LEFT JOIN contract c ON sc.`contract_id` = c.`contract_id` 
						  		  WHERE UPPER(c.po_no) = UPPER('{$importedData->column_5}') AND sc.stockpile_id = {$stockpileId} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $contractId = $row->contract_id;
							}
						   
					   }
					   
					   if($importedData->column_6 != '0' && strtoupper($importedData->column_6) != 'NONE' && $importedData->column_6 != '' && $importedData->column_6 != '-' && $importedData->column_6 != null) {
						  $sql = "SELECT * FROM invoice WHERE UPPER(invoice_no) = UPPER('{$importedData->column_6}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $invoiceId = $row->invoice_id;
							}
						   
					   }
					   
					   if($importedData->column_7 != '0' && strtoupper($importedData->column_7) != 'NONE' && $importedData->column_7 != '' && $importedData->column_7 != '-' && $importedData->column_7 != null) {
						  $sql = "SELECT * FROM `transaction` WHERE UPPER(slip_no) = UPPER('{$importedData->column_7}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $transactionId = $row->transaction_id;
							}
						   
					   }
					   
					   if($importedData->column_10 != '0' && strtoupper($importedData->column_10) != 'NONE' && $importedData->column_10 != '' && $importedData->column_10 != '-' && $importedData->column_10 != null) {
						  $sql = "SELECT * FROM `shipment` WHERE UPPER(shipment_no) = UPPER('{$importedData->column_10}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $shipmentId = $row->shipment_id;
							}
						   
					   }
					   
					     
					    if($importedData->column_12 != '0' && strtoupper($importedData->column_12) != 'NONE' && $importedData->column_12 != '' && $importedData->column_12 != '-' && $importedData->column_12 != null) {
                            $notes = $importedData->column_12;
                        }
						
						 if($importedData->column_8 != '0' && strtoupper($importedData->column_8) != 'NONE' && $importedData->column_18 != '' && $importedData->column_8 != '-' && $importedData->column_8 != null) {
                            $qty = $importedData->column_8;
                        }
						
						 if($importedData->column_9 != '0' && strtoupper($importedData->column_9) != 'NONE' && $importedData->column_9 != '' && $importedData->column_9 != '-' && $importedData->column_9 != null) {
                            $price = $importedData->column_9;
                        }
							
                            
                            if($boolContinue) {
                      
					  
							
									
                                    $sql = "INSERT INTO `gl_add` (gl_add_date, gl_add_no, stockpile_id, general_vendor_id, vendor_id, contract_id, transaction_id, "
											."shipment_id, invoice_id, notes, quantity, price, input_by, input_date) VALUES "
							. "('{$importedData->column_0}', '{$jurnalNo}', '{$stockpileId}', '{$generalVendorId}', '{$vendorId}',"
                                            . "'{$contractId}', '{$transactionId}', '{$shipmentId}', '{$invoiceId}', '{$notes}', '{$qty}', "
                                            . "'{$price}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                            
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    
                                    if($result !== false) {
                                        $gl_add_id = $myDatabase->insert_id;
										$gl_type = 0;
										$amountConverted = 0;
										$amount = 0;
										$notes = 'NULL';
                                        // insert into delivery
                                         
					   if($importedData->column_18 != '0' && strtoupper($importedData->column_18) != 'NONE' && $importedData->column_18 != '' && $importedData->column_18 != '-' && $importedData->column_18 != null) {
                            $gl_type = 2;
							$amount = $importedData->column_18;
							$amountConverted = $importedData->column_18 * $importedData->column_16;
                        }
						
						if($importedData->column_17 != '0' && strtoupper($importedData->column_17) != 'NONE' && $importedData->column_17 != '' && $importedData->column_17 != '-' && $importedData->column_17 != null) {
                            $gl_type = 1;
							$amount = $importedData->column_17;
							$amountConverted = $importedData->column_17 * $importedData->column_16;
                        }
                        
                        if($importedData->column_11 != '0' && strtoupper($importedData->column_11) != 'NONE' && $importedData->column_11 != '' && $importedData->column_11 != '-' && $importedData->column_11 != null) {
                            $sql = "SELECT * FROM `stockpile` WHERE UPPER(stockpile_name) = UPPER('{$importedData->column_11}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $stockpileId = $row->stockpile_id;
                            }
                        }
                        
                        // <editor-fold defaultstate="collapsed" desc="check vehicle and unloading cost">
                        if($importedData->column_13 != '0' && strtoupper($importedData->column_13) != 'NONE' && $importedData->column_13 != '' && $importedData->column_13 != '-' && $importedData->column_13 != null) {
                            $sql = "SELECT * FROM `account` WHERE UPPER(account_no) = UPPER({$importedData->column_13}) LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $accountId = $row->account_id;
                            } 
                        }
                        
                        if($importedData->column_15 != '0' && strtoupper($importedData->column_15) != 'NONE' && $importedData->column_15 != '' && $importedData->column_15 != '-' && $importedData->column_15 != null) {
                            $sql = "SELECT * FROM `currency` WHERE UPPER(currency_code) = UPPER('{$importedData->column_15}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $currencyId = $row->currency_id;
                                
                            }
                        }
						
						 if($importedData->column_12 != '0' || $importedData->column_12 != 'NONE' || $importedData->column_12 != '' || $importedData->column_12 != '-') {
						  $notes = $importedData->column_12;
					   }

                             $sql = "INSERT INTO `gl_detail` (gl_add_id, gl_type, stockpile_id, account_id, currency_id, exchange_rate, amount, "
                                    . "amount_converted, notes, entry_by, entry_date) "
                                    . "VALUES ('{$gl_add_id}', '{$gl_type}', '{$stockpileId}', '{$accountId}', '{$currencyId}',"
                                    . "'{$importedData->column_16}', '{$amount}', '{$amountConverted}', '{$notes}',"
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                             if($result !== false) {
                                $successRow = $successRow + 1;
                                
                                $jurnalId = $myDatabase->insert_id;
                              
                                
                                $sql = "DELETE FROM {$tempTable} WHERE column_0 = {$importedData->column_0}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                               insertGeneralLedger($myDatabase, 'JURNAL MEMORIAL', "NULL", "NULL", "NULL", "NULL", "NULL", $jurnalId);
                            	} else {
                                	$errorRow = $errorRow + 1;
									echo 'FALSE4';
                           		 } 
							
                        } else {
                                        $errorRow = $errorRow + 1;
										echo 'FALSE5';
										echo $sql;
                               }
                                
                            }
                        
						}
                        // </editor-fold>
                    }*/
                   $sql = "INSERT INTO `rpt_upload` (gl_module, payment_no, slip_no, supplier_name, contract_no, po_no, invoice_no, shipment_code, quantity, price, gl_date, stockpile_name, account_no, account_name, amounts, description) "
                                    . "VALUES ('{$importedData->column_0}', '{$importedData->column_1}', '{$importedData->column_2}', '{$importedData->column_3}', '{$importedData->column_4}', '{$importedData->column_5}', '{$importedData->column_6}', '{$importedData->column_7}', '{$importedData->column_8}', '{$importedData->column_9}', '{$importedData->column_10}', '{$importedData->column_11}', '{$importedData->column_12}', '{$importedData->column_13}', '{$importedData->column_14}', '{$importedData->column_15}')";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                             if($result !== false) {
                                $successRow = $successRow + 1;
                                
                                $jurnalId = $myDatabase->insert_id;
                              
                                
                                $sql = "DELETE FROM {$tempTable} WHERE column_0 = {$importedData->column_0}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                             //  insertGeneralLedger($myDatabase, 'JURNAL MEMORIAL', "NULL", "NULL", "NULL", "NULL", "NULL", $jurnalId);
                            	} else {
                                	$errorRow = $errorRow + 1;
									echo 'FALSE4';
                           		 }
                }
                $counterRow++;
            } 
            
            if(($successRow+$warningRow) == ($counterRow-1) && $errorRow == 0) {
                $result = $myDatabase->query("COMMIT", MYSQLI_STORE_RESULT);
                
                $sql = "DROP TABLE {$tempTable}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                

                return "OK|". $successRow ." Row(s) import successfully, ". $warningRow ." Row(s) failed with warning. ". $errorMessage;
            } else {
                $result = $myDatabase->query("ROLLBACK", MYSQLI_STORE_RESULT);

                return "FAIL|Import failed. ". $errorRow ." Rows(s) can not be imported. Please contact administrator. ";
            }
        }
    } else {
        return 'FAIL|File not exists.';
    } 
    // </editor-fold>
}
function excelImportTimbangan($myDatabase, $fileName = "", $stockpileId = 0, $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1) {
    // <editor-fold defaultstate="collapsed" desc="excelImportContract($myDatabase, $fileName = "", $stockpileId = 0, $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1)">
    if (file_exists(realpath($fileName))) {
        $fileNameRealPath = realpath($fileName);
        
        require_once './assets/extensions/PHPExcel.php';
        require_once './assets/extensions/PHPExcel/IOFactory.php';
        require_once './assets/extensions/PHPExcel/Cell/AdvancedValueBinder.php';

        $objReader = PHPExcel_IOFactory::createReader('Excel5');

        $objPHPExcel = $objReader->load($fileNameRealPath);
        
        $readStartAtRow = 1; 
        $totalCols = 18;

        $result = $myDatabase->query("START TRANSACTION", MYSQLI_STORE_RESULT);
        
//        $sheetCount = $objPHPExcel->getSheetCount();
        $sheetCount = 1;
        for ($onSheet; $onSheet < $sheetCount; $onSheet++) {
            $objPHPExcel->setActiveSheetIndex($onSheet);
            $objWorksheet = $objPHPExcel->getActiveSheet();

            $rows = $objWorksheet->getHighestRow();
            $cols = PHPExcel_Cell::columnIndexFromString($objWorksheet->getHighestColumn());
            if ($toRow == -1)
                $toRow = $rows;
            if ($toCol == -1)
                $toCol = $cols;
            
            $key = array();
            $columnName = array();
            $getColumnAName = false;
            
            if($toCol == $totalCols) {
                for ($row = $fromRow; $row <= $rows; $row++) {
                    for ($i = $fromCol; $i < $cols; $i++) {
                        $columnName[$i] = "column_" . $i;
                        if (isset($columnName[$i])) {
                            if (PHPExcel_Shared_Date::isDateTime($objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row))) { 
                                $tmp = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 

                                if (is_numeric($tmp)) { 
                                    $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'YYYY-MM-DD'); 
                                } else { 
                                    $key[$row][$i]['value'] = substr($tmp, 6, 4) . "-" . substr($tmp, 3, 2) . "-" . substr($tmp, 0, 2); 
                                } 
//                                $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'DD-MMM-YYYY'); 
                            } else { 
//                                $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                $check = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                if (substr($check, 0, 1) == "=") {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getCalculatedValue(); 
                                } else {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                }
                            }
                        }
                    }
                }

                $getColumnAName = true;
            } else {
                return 'FAIL|Template is wrong.';
            }
        }
        
        if ($getColumnAName) {
            $temporaryTable = '';
            $temporaryTableWarning = '';
            $temporaryTableDuplicate = '';
            $fieldNames = '';

            foreach ($columnName as $i => $names) {
                if (trim($names) != '') {
                    $temporaryTable .= ( ($temporaryTable == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableWarning .= ( ($temporaryTableWarning == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableDuplicate .= ( ($temporaryTableDuplicate == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $fieldNames .= ( ($fieldNames == '') ? '' : ', ') . "`" . trim($names) . "`";
                }
            }

            $tempTable = '`tmp_timbangan_' . uniqid() . '`';
//            $temporaryTable = 'CREATE TEMPORARY TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableWarning = '`jb_sdw_' . uniqid() . '`';
//            $temporaryTableWarning = 'CREATE TEMPORARY TABLE ' . $tempTableWarning . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableWarning . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableDuplicate = '`jb_sdd_' . uniqid() . '`';
//            $temporaryTableDuplicate = 'CREATE TEMPORARY TABLE ' . $tempTableDuplicate . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableDuplicate . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
            $temporaryTable = 'CREATE TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';

//            return "0|". $temporaryTable;

            $result = $myDatabase->query($temporaryTable, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error create table '. $myDatabase->errorMessage;
            }

            $insertInto = '';
            foreach ($key as $row => $colData) {
                if ($colData[1] != null) {
                    $insertIntoCol = '';
                    foreach ($colData as $col => $colDatas) {
                        if (strpos($colDatas['value'], "NULL") !== false || $colDatas['value'] == '')
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "NULL";
                        else {
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "'". $colDatas['value'] ."'";
                        }
                    }
                    $insertInto .= ( ($insertInto == '') ? '' : ', ') . "(" . $insertIntoCol . ")";
//                die("INSERT INTO $temp_table ($fieldnames) VALUES " . $insertinto . ";");
                }
            }

            $insertIntoTemp = "INSERT INTO $tempTable ($fieldNames) VALUES " . $insertInto . ";";

            $result = $myDatabase->query($insertIntoTemp, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error insert table '. $myDatabase->errorMessage;
            }
            
			$sql = "DELETE FROM $tempTable WHERE column_0 IS NULL";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                
            //return 'OK|Table created.';
            
            $sqlSelect = "SELECT  a.* FROM $tempTable a WHERE a.column_0 IS NOT NULL;";
            $resultSelect = $myDatabase->query($sqlSelect, MYSQLI_STORE_RESULT);
            $successRow = 0;
            $errorRow = 0;
            $warningRow = 0;
            $counterRow = 1;
            $errorMessage = '';
            
            date_default_timezone_set('Asia/Jakarta');

            $date = new DateTime();
            $currentDate = $date->format('d/m/Y H:i:s');
            $currentYear = $date->format('y');
            $currentYearMonth = $date->format('ym');
            
            while($importedData = $resultSelect->fetch_object()) {
                if ($counterRow >= $readStartAtRow) {
                    // check Vendor
                    /*$boolInsertVendor = false;
                    $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$importedData->column_2}')";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($result !== false && $result->num_rows > 0) {
                        $rowVendor = $result->fetch_object();
                        $vendorId = $rowVendor->vendor_id;
                        $boolInsertVendor = true;
                    } elseif($result !== false && $result->num_rows == 0) {
                        $ppn = 0;
                        $pph = 0;
                        $ppnValue = 0;
                        $pphValue = 0;
                        
                        if(strtoupper($importedData->column_4) == 'PPN') {
                            $ppn = 1;
                            $ppnValue = 10;
                        }
                        
                        if($importedData->column_5 != '') {
                            $sqlPPh = "SELECT * FROM tax WHERE UPPER(tax_name) = UPPER({$importedData->column_4})";
                            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                                $rowPPh = $resultPPh->fetch_object();
                                $pph = $rowPPh->tax_id;
                                $pphValue = $rowPPh->tax_value;
                            }
                        }

                        $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                                . "UPPER('{$importedData->column_2}'), UPPER('{$importedData->column_3}'), '', '', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                        if($result !== false) {
                            $vendorId = $myDatabase->insert_id;
                            $boolInsertVendor = true;
                        } 
                    }*/
                    
                    /*if($boolInsertVendor) {
                        $sql = "SELECT * FROM contract WHERE UPPER(contract_no) = UPPER('{$importedData->column_7}')";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if($result !== false && $result->num_rows == 0) {
                            if($importedData->column_1 == '-' || $importedData->column_1 == '' || $importedData->column_1 == null) {
                                $checkPoNo = $importedData->contract_type .'-'. $importedData->column_2 .'-'. $currentYearMonth;
                                $sql = "SELECT po_no FROM contract WHERE company_id = {$_SESSION['companyId']} AND po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
                                $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if($resultPo->num_rows == 1) {
                                    $rowPo = $resultPo->fetch_object();
                                    $splitPoNo = explode('-', $rowPo->po_no);
                                    $nextPoNo = ((float) $splitPoNo[3]) + 1;
                                    $poNo = $checkPoNo .'-'. $nextPoNo;
                                } else {
                                    $poNo = $checkPoNo .'-1';
                                }
                            } else {
                                $poNo = $importedData->column_1;
                            }
                            */
                            if($importedData->column_11 == '-' || $importedData->column_11 == '' || $importedData->column_11 == null) {
                                $potPercen = 0;
                            } else {
                                $potPercen = $importedData->column_11;
                            }
							if($importedData->column_12 == '-' || $importedData->column_12 == '' || $importedData->column_12 == null) {
                                $potKg = 0;
                            } else {
                                $potKg = $importedData->column_12;
                            }


                            $sql = "INSERT INTO `transaction_upload` (stockpile_id, no_slip, tgl_masuk, tgl_keluar, no_kendaraan, nama_barang, nama_customer, no_do, "
                                    . "supir, timbang1, timbang2, bruto, pot_percen, pot_kg, netto, keterangan, user_input, cetakan, editBy, upload_by, upload_date) VALUES ("
                                    . "{$stockpileId}, '{$importedData->column_0}', '{$importedData->column_1}','{$importedData->column_2}', '{$importedData->column_3}', '{$importedData->column_4}', '{$importedData->column_5}', '{$importedData->column_6}', '{$importedData->column_7}', {$importedData->column_8}, {$importedData->column_9}, {$importedData->column_10}, {$potPercen}, {$potKg}, {$importedData->column_13}, '{$importedData->column_14}',"
                                    . "'{$importedData->column_15}', '{$importedData->column_16}', '{$importedData->column_17}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                            if($result !== false) {
                              /*  $contractId = $myDatabase->insert_id;

                                $sql = "SELECT * FROM `stockpile` WHERE UPPER(stockpile_name) = UPPER('{$importedData->column_10}')";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if($result !== false && $result->num_rows > 0) {
                                    $rowSP = $result->fetch_object();
                                    $stockpileId = $rowSP->stockpile_id;

                                    $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                                            . "{$stockpileId}, {$contractId}, {$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                } else {
                                    $warningRow = $warningRow + 1;
                                }*/

                               // insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", $contractId);

                                $successRow = $successRow + 1;
                            } else {
                                $errorRow = $errorRow + 1;
                            }
                        /*} else {
                            $warningRow = $warningRow + 1;
                        }
                    } else {
                        $errorRow = $errorRow + 1;
                    }*/
                }
                $counterRow++;
            }
            
            if(($successRow+$warningRow) >= ($counterRow-1) && $errorRow == 0) {
                $result = $myDatabase->query("COMMIT", MYSQLI_STORE_RESULT);
                
                $sql = "DROP TABLE {$tempTable}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
				$sql = "DELETE FROM transaction_upload WHERE no_slip = ''";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                

                return "OK|". $successRow ." Row(s) import successfully, ". $warningRow ." Row(s) failed with warning. ". $errorMessage;
            } else {
                $result = $myDatabase->query("ROLLBACK", MYSQLI_STORE_RESULT);

                return "FAIL|Import failed. ". $errorRow ." Rows(s) can not be imported. Please contact administrator. ". $sql ."";
            }
            
        }
    } else {
        return 'FAIL|File not exists.';
    }
    // </editor-fold>
}
function excelImportTransactionBACKUP($myDatabase, $fileName = "", $stockpileId = 0, $vendorId = 0, $stockpileContractId = 0, $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1) {
    // <editor-fold defaultstate="collapsed" desc="function excelImportTransaction($myDatabase, $fileName = "", $stockpileId = 0, $vendorId = 0, $stockpileContractId = 0, $onSheet = 0, $fromRow = 1, $toRow = -1, $fromCol = 0, $toCol = -1)">
    if (file_exists(realpath($fileName))) {
        $fileNameRealPath = realpath($fileName);
        
        require_once './assets/extensions/PHPExcel.php';
        require_once './assets/extensions/PHPExcel/IOFactory.php';
        require_once './assets/extensions/PHPExcel/Cell/AdvancedValueBinder.php';

        $objReader = PHPExcel_IOFactory::createReader('Excel5');

        $objPHPExcel = $objReader->load($fileNameRealPath);
        
        $readStartAtRow = 1; 
        $totalCols = 28;

        $result = $myDatabase->query("START TRANSACTION", MYSQLI_STORE_RESULT);
        
//        $sheetCount = $objPHPExcel->getSheetCount();
        $sheetCount = 1;
        for ($onSheet; $onSheet < $sheetCount; $onSheet++) {
            $objPHPExcel->setActiveSheetIndex($onSheet);
            $objWorksheet = $objPHPExcel->getActiveSheet();

            $rows = $objWorksheet->getHighestRow();
            $cols = PHPExcel_Cell::columnIndexFromString($objWorksheet->getHighestColumn());
            if ($toRow == -1)
                $toRow = $rows;
            if ($toCol == -1)
                $toCol = $cols;
            
            $key = array();
            $columnName = array();
            $getColumnAName = false;
            
            if($toCol == $totalCols) {
                for ($row = $fromRow; $row <= $rows; $row++) {
                    for ($i = $fromCol; $i < $cols; $i++) {
                        $columnName[$i] = "column_" . $i;
                        if (isset($columnName[$i])) {
                            if (PHPExcel_Shared_Date::isDateTime($objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row))) { 
                                $tmp = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 

                                if (is_numeric($tmp)) { 
                                    $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'YYYY-MM-DD'); 
                                } else { 
                                    $key[$row][$i]['value'] = substr($tmp, 6, 4) . "-" . substr($tmp, 3, 2) . "-" . substr($tmp, 0, 2); 
                                } 
//                                $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'DD-MMM-YYYY'); 
                            } else { 
//                                $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                $check = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                if (substr($check, 0, 1) == "=") {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getCalculatedValue(); 
                                } else {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                }
                            }
                        }
                    }
                }

                $getColumnAName = true;
            } else {
                return 'FAIL|Template is wrong.';
            }
        }
        
        if ($getColumnAName) {
            $temporaryTable = '';
            $temporaryTableWarning = '';
            $temporaryTableDuplicate = '';
            $fieldNames = '';

            foreach ($columnName as $i => $names) {
                if (trim($names) != '') {
                    $temporaryTable .= ( ($temporaryTable == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableWarning .= ( ($temporaryTableWarning == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableDuplicate .= ( ($temporaryTableDuplicate == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $fieldNames .= ( ($fieldNames == '') ? '' : ', ') . "`" . trim($names) . "`";
                }
            }

            $tempTable = '`tmp_transaction_' . uniqid() . '`';
//            $temporaryTable = 'CREATE TEMPORARY TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableWarning = '`jb_sdw_' . uniqid() . '`';
//            $temporaryTableWarning = 'CREATE TEMPORARY TABLE ' . $tempTableWarning . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableWarning . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableDuplicate = '`jb_sdd_' . uniqid() . '`';
//            $temporaryTableDuplicate = 'CREATE TEMPORARY TABLE ' . $tempTableDuplicate . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableDuplicate . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
            $temporaryTable = 'CREATE TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';

//            return "0|". $temporaryTable;

            $result = $myDatabase->query($temporaryTable, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error create table '. $myDatabase->errorMessage;
            }

            $insertInto = '';
            foreach ($key as $row => $colData) {
                if ($colData[1] != null) {
                    $insertIntoCol = '';
                    foreach ($colData as $col => $colDatas) {
                        if (strpos($colDatas['value'], "NULL") !== false || $colDatas['value'] == '')
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "NULL";
                        else {
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "'". $colDatas['value'] ."'";
                        }
                    }
                    $insertInto .= ( ($insertInto == '') ? '' : ', ') . "(" . $insertIntoCol . ")";
//                die("INSERT INTO $temp_table ($fieldnames) VALUES " . $insertinto . ";");
                }
            }

            $insertIntoTemp = "INSERT INTO $tempTable ($fieldNames) VALUES " . $insertInto . ";";

            $result = $myDatabase->query($insertIntoTemp, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error insert table '. $myDatabase->errorMessage;
            }
            
//            return 'OK|Table created.';
            
//            $insertIntoWarning = "INSERT INTO $tempTableWarning ($fieldNames) VALUES " . $insertInto . ";";
//
//            $resultWarning = $myDatabase->query($insertIntoWarning, MYSQLI_STORE_RESULT);
//            if($resultWarning === false) {
//                return 'FAIL|error insert warning table '. $myDatabase->errorMessage;
//            }
//            
//            $insertIntoDuplicate = "INSERT INTO $tempTableDuplicate ($fieldNames) VALUES " . $insertInto . ";";
//
//            $resultDuplicate = $myDatabase->query($insertIntoDuplicate, MYSQLI_STORE_RESULT);
//            if($resultDuplicate === false) {
//                return 'FAIL|error insert duplicate table '. $myDatabase->errorMessage;
//            }
            
//            return "0|". $temporaryTable;            
            
            $sqlSelect = "SELECT a.*, DATE_FORMAT(a.column_2, '%y') AS trans_year FROM $tempTable a ORDER BY column_0 ASC;";
            $resultSelect = $myDatabase->query($sqlSelect, MYSQLI_STORE_RESULT);
            $successRow = 0;
            $errorRow = 0;
            $warningRow = 0;
            $counterRow = 0;
            $errorMessage = '';
            $shipmentError = 0;
            $categoryError = 0;
            $rateError = 0;
            $currencyError = 0;
            $insuredError = 0;
            $countryFromError = 0;
            $countryToError = 0;
            $duplicateError = 0;
            $duplicateQuotation = '';
            $shipmentQuotation = '';
            $categoryQuotation = '';
            $rateQuotation = '';
            $currencyQuotation = '';
            $insuredQuotation = '';
            $countryFromQuotation = '';
            $countryToQuotation = '';
            
            date_default_timezone_set('Asia/Jakarta');

            $date = new DateTime();
            $currentDate = $date->format('d/m/Y H:i:s');
            
            $sqlStockpile = "SELECT * FROM stockpile WHERE stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sqlStockpile, MYSQLI_STORE_RESULT);
            $rowStockpile = $resultStockpile->fetch_object();
            $freightWeightRule = $rowStockpile->freight_weight_rule;
            $stockpileCode = $rowStockpile->stockpile_code;
            
            while($importedData = $resultSelect->fetch_object()) {
                if ($counterRow >= $readStartAtRow) {
                    
                    if(strtoupper($importedData->column_12) == 'IN') {
                        // <editor-fold defaultstate="collapsed" desc="IN">
                        
                        // <editor-fold defaultstate="collapsed" desc="check vendor and supplier">
                        if($importedData->column_9 != '0' || $importedData->column_9 != 'NONE' || $importedData->column_9 != '' || $importedData->column_9 != '-') {
                            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_name) = UPPER('{$importedData->column_9}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $vendorId = $row->vendor_id;
                                $vendorCode = $row->vendor_code;
                            } else {
                                if($importedData->column_8 != '0' || $importedData->column_8 != 'NONE' || $importedData->column_8 != '' || $importedData->column_8 != '-') {
                                    $vendorCode = strtoupper(substr($importedData->column_8, 2, 3)) ;
                                } else {
                                    $vendorCode = strtoupper(substr($importedData->column_9, 0, 3));
                                }

                                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, entry_by, entry_date) VALUES ("
                                        . "'{$vendorCode}', '{$importedData->column_9}', "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $vendorId = $myDatabase->insert_id;
                            }
                        }
                        
                        if($importedData->column_10 != '0' || $importedData->column_10 != 'NONE' || $importedData->column_10 != '' || $importedData->column_10 != '-') {
                            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_name) = UPPER('{$importedData->column_10}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $supplierId = $row->vendor_id;
                            } else {
                                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, entry_by, entry_date) VALUES ("
                                        . "'". strtoupper(substr($importedData->column_10, 0, 3)) ."', '{$importedData->column_10}', "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $supplierId = $myDatabase->insert_id;
                            }
                        }
                        
                        if($vendorId == "") {
                            $vendorId = $supplierId;
                        }
                        
                        if($supplierId == "") {
                            $supplierId = 'NULL';
                        }
                        
                        // </editor-fold>
                        
                        // <editor-fold defaultstate="collapsed" desc="check vehicle and unloading cost">
                        if($importedData->column_4 != '0' || $importedData->column_4 != 'NONE' || $importedData->column_4 != '' || $importedData->column_4 != '-') {
                            $sql = "SELECT * FROM `vehicle` WHERE UPPER(vehicle_name) = UPPER('{$importedData->column_4}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $vehicleId = $row->vehicle_id;
                            } else {
                                $sql = "INSERT INTO `vehicle` (vehicle_name, entry_by, entry_date) VALUES ("
                                        . "'{$importedData->column_4}', "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $vehicleId = $myDatabase->insert_id;
                            }
                        }
                        
                        if(($importedData->column_22 != '' || $importedData->column_22 != '0' || $importedData->column_22 != '-') && $vehicleId != '') {
                            $sql = "SELECT * FROM unloading_cost WHERE vehicle_id = {$vehicleId} AND stockpile_id = {$stockpileId} AND price_converted = {$importedData->column_22} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $unloadingCostId = $row->unloading_cost_id;
                            } else {
                                $sql = "INSERT INTO `unloading_cost` (vehicle_id, stockpile_id, currency_id, exchange_rate, price, price_converted, entry_by, entry_date) VALUES ("
                                        . "{$vehicleId}, {$stockpileId}, 1, 1, {$importedData->column_22}, {$importedData->column_22}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $unloadingCostId = $myDatabase->insert_id;
                            }
                        }
                        
                        if($vehicleId == "") {
                            $unloadingCostId = 'NULL';
                        }
                        
                        // </editor-fold>
                        
                        // <editor-fold defaultstate="collapsed" desc="check freight and freight cost">
                        if($importedData->column_6 != '0' || $importedData->column_6 != 'NONE' || $importedData->column_6 != '' || $importedData->column_6 != '-') {
                            $sql = "SELECT * FROM `freight` WHERE UPPER(freight_supplier) = UPPER('{$importedData->column_6}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $freightId = $row->freight_id;
                            } else {
                                $sql = "INSERT INTO `freight` (freight_code, freight_supplier, entry_by, entry_date) VALUES ("
                                        . "'". strtoupper(substr($importedData->column_6, 0, 3)) ."', '{$importedData->column_6}', "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $freightId = $myDatabase->insert_id;
                            }
                        }
                        
                        if(($importedData->column_21 != '' || $importedData->column_21 != '0' || $importedData->column_21 != '-') && $freightId != '') {
                            // get freight weight
                            if($freightWeightRule == 0) {
                                if((float) $importedData->column_16 < (float) $importedData->column_13) {
                                    $freightQuantity = (float) $importedData->column_16;
                                } elseif((float) $importedData->column_16 > (float) $importedData->column_13) {
                                    $freightQuantity = (float) $importedData->column_13;
                                } else {
                                    $freightQuantity = (float) $importedData->column_13;
                                }
                            } elseif($freightWeightRule == 1) {
                                $freightQuantity = (float) $importedData->column_13;
                            } elseif($freightWeightRule == 2) {
                                $freightQuantity = (float) $importedData->column_16;
                            } else {
                                $freightQuantity = (float) $importedData->column_13;
                            }
                            
                            $freightPrice = (float) $importedData->column_21 / $freightQuantity;
                            
                            $sql = "SELECT * FROM freight_cost WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId} AND vendor_id = {$vendorId} AND price_converted = {$freightPrice} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $freightCostId = $row->freight_cost_id;
                            } else {
                                $sql = "INSERT INTO `freight_cost` (freight_id, stockpile_id, vendor_id, currency_id, exchange_rate, price, price_converted, entry_by, entry_date) VALUES ("
                                        . "{$freightId}, {$stockpileId}, {$vendorId}, 1, 1, {$freightPrice}, {$freightPrice}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $freightCostId = $myDatabase->insert_id;
                            }
                        }
                        
                        if($freightId == "") {
                            $freightCostId = 'NULL';
                        }
                        
                        // </editor-fold>
                        
                        //curah
                        $boolNewContract = false;
                        if(strtoupper($importedData->column_24) == 'CURAH') {
                            $contractType = 'C';
                            
                            $totalSend = (float) $importedData->column_13;
                            $totalNetto = (float) $importedData->column_16;
                            $boolNewContract = true;
                        } elseif(strtoupper($importedData->column_24) == 'PKS') {
                            $contractType = 'P';
                            
                            if(($importedData->column_8 != '' || $importedData->column_8 != '0' || $importedData->column_8 != '-' && $importedData->column_8 != 'NONE') &&
                                    $importedData->column_11 != '' || $importedData->column_11 != '0' || $importedData->column_11 != '-' && $importedData->column_11 != 'NONE') {
                                $sqlContract = "SELECT * FROM contract WHERE contract_type = '{$contractType}' AND contract_no = '{$importedData->column_11}' AND vendor_id = {$vendorId}";
                                $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);
                                if($resultContract->num_rows == 1) {
                                    $rowContract = $resultContract->fetch_object();
                                    $contractId = $rowContract->contract_id;
                                    
                                    $sqlStockpileContract = "SELECT * FROM stockpile_contract WHERE contract_id = {$contractId} AND stockpile_id = {$stockpileId}";
                                    $resultStockpileContract = $myDatabase->query($sqlStockpileContract, MYSQLI_STORE_RESULT);
                                    if($resultStockpileContract->num_rows == 1) {
                                        $rowStockpileContract = $resultStockpileContract->fetch_object();
                                        $stockpileContractId = $rowStockpileContract->stockpile_contract_id;
                                    } 
                                } else {
                                    $sqlTemp = "SELECT SUM(column_13) AS total_send, SUM(column_16) AS total_netto FROM {$tempTable} WHERE column_8 = '{$importedData->column_8}' "
                                            . "AND column_11 = '{$importedData->column_11}' AND UPPER(column_12) = UPPER('{$importedData->column_12}')";
                                    $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
                                    $rowTemp = $resultTemp->fetch_object();
                                    
                                    $totalSend = $rowTemp->total_send;
                                    $totalNetto = $rowTemp->total_netto;
                                    $boolNewContract = true;
                                }
                            } else {
                                $totalSend = (float) $importedData->column_13;
                                $totalNetto = (float) $importedData->column_16;
                                $boolNewContract = true;
                            }
                        }
                        
                        $boolContinue = true;
                        if($boolNewContract) {
                            $checkPoNo = $contractType .'-'. $vendorCode .'-'. $importedData->trans_year;
                            $sql = "SELECT po_no FROM contract WHERE po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
                            $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($resultPo->num_rows == 1) {
                                $rowPo = $resultPo->fetch_object();
                                $splitPoNo = explode('-', $rowPo->po_no);
                                $nextPoNo = ((float) $splitPoNo[3]) + 1;
                                $poNo = $checkPoNo .'-'. $nextPoNo;
                            } else {
                                $poNo = $checkPoNo .'-1';
                            }
                            
                            if($totalNetto < $totalSend) {
                                $quantity = $totalNetto;
                            } elseif($totalNetto > $totalSend) {
                                $quantity = $totalSend;
                            } else {
                                $quantity = $totalSend;
                            }
                            
                            $sql = "INSERT INTO contract (contract_type, po_no, contract_no, vendor_id, currency_id, exchange_rate, "
                                    . "price, price_converted, quantity, entry_by, entry_date) VALUES ("
                                    . "'{$contractType}', '{$poNo}', '{$importedData->column_11}', {$vendorId}, 1, 1, "
                                    . "{$importedData->column_27}, {$importedData->column_27}, {$quantity}, "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            
                            if($result === false) {
                                $boolContinue = false;
                            } else {
                                $contractId = $myDatabase->insert_id;
                                $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                                        . "{$stockpileId}, {$contractId}, {$quantity}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if($result === false) {
                                    $boolContinue = false;
                                } else {
                                    $stockpileContractId = $myDatabase->insert_id;
                                }
                            }
                        }
                        
                        if($boolContinue) {
                            $shrink = 0;
                            if((float) $importedData->column_16 < (float) $importedData->column_13) {
                                $quantity = (float) $importedData->column_16;
                                $shrink = $quantity - (float) $importedData->column_13;
                            } elseif((float) $importedData->column_16 > (float) $importedData->column_13) {
                                $quantity = (float) $importedData->column_13;
                            } else {
                                $quantity = (float) $importedData->column_13;
                            }

                            // get next slip no
                            $checkSlipNo = $stockpileCode .'-'. $importedData->trans_year;
                            $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($resultSlip->num_rows == 0) {
                                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM transaction LIMIT 1";
                                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                            
                            $rowSlipNo = $resultSlip->fetch_object();
                            $nextSlipNo = $rowSlipNo->next_id;
                            $slipNo = $checkSlipNo .'-'. $nextSlipNo;
                            
                            // get freight cost
                            if($freightCostId == 'NULL') {
                                $freightPrice = 0;
                            } 

                            // get unloading cost
                            if($unloadingCostId == 'NULL') {
                                $unloadingPrice = 0;
                            } else {
                                $unloadingPrice = $importedData->column_22;
                            }
                            
                            $unitPrice = $importedData->column_27;

                            // get inventory value
                            $inventoryValue = ($freightQuantity * $freightPrice) + $unloadingPrice + ($quantity * $unitPrice);

                            // insert into transaction
                            $sql = "INSERT INTO `transaction` (slip_no, stockpile_contract_id, transaction_date, loading_date, vehicle_no, labor_id, unloading_cost_id, "
                                    . "unloading_date, freight_cost_id, permit_no, transaction_type, vendor_id, send_weight, bruto_weight, tarra_weight, "
                                    . "netto_weight, notes, driver, freight_quantity, quantity, shrink, freight_price, unloading_price, unit_price, "
                                    . "inventory_value, block, entry_by, entry_date) "
                                    . "VALUES ('{$slipNo}', {$stockpileContractId}, STR_TO_DATE('{$importedData->column_2}', '%Y-%m-%d'), STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), "
                                    . "'{$importedData->column_3}', 1, {$unloadingCostId}, STR_TO_DATE('{$importedData->column_2}', '%Y-%m-%d'), {$freightCostId}, '{$importedData->column_7}', "
                                    . "1, {$supplierId}, {$importedData->column_13}, {$importedData->column_14}, {$importedData->column_15}, {$importedData->column_16}, '{$importedData->column_17}', "
                                    . "'{$importedData->column_18}', {$freightQuantity}, {$quantity}, {$shrink}, {$freightPrice}, {$unloadingPrice}, {$unitPrice}, {$inventoryValue}, 'NONE', "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            
                            if($result !== false) {
                                $successRow = $successRow + 1;
                            } else {
                                $errorRow = $errorRow + 1;
                            }
                        } else {
                            $errorRow = $errorRow + 1;
                        }
                        
                        // </editor-fold>
                    } elseif(strtoupper($importedData->column_12) == 'OUT') {
                        // <editor-fold defaultstate="collapsed" desc="OUT">
                        if(($importedData->column_10 != '0' || $importedData->column_10 != 'NONE' || $importedData->column_10 != '' || $importedData->column_10 != '-') &&
                                ($importedData->column_27 != '0' || $importedData->column_27 != 'NONE' || $importedData->column_27 != '' || $importedData->column_27 != '-')) {
                            $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$importedData->column_10}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $customerId = $row->customer_id;
                            } else {
                                $sql = "INSERT INTO `customer` (customer_name, entry_by, entry_date) VALUES ("
                                        . "'{$importedData->column_10}', "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $customerId = $myDatabase->insert_id;
                            }
                        }
                        
                        if($customerId != '') {
                            $salesNo = strtoupper(str_replace(' ', '', substr($importedData->column_10, 0, 5)));
                            
                            $sql = "SELECT * FROM sales WHERE UPPER(sales_no) = '{$salesNo}' AND customer_id = {$customerId} AND stockpile_id = {$stockpileId} "
                                    . "AND currency_id = 1 AND price = {$importedData->column_27} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $salesId = $row->sales_id;
                                $salesBalance = $row->quantity;
                            } else {
                                $sqlTemp = "SELECT count(1) AS total_shipment FROM {$tempTable} WHERE UPPER(column_10) = UPPER('{$importedData->column_10}') "
                                        . "AND UPPER(column_12) = UPPER('{$importedData->column_12}') AND column_27 = {$importedData->column_27}";
                                $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
                                $rowTemp = $resultTemp->fetch_object();
                                $totalShipment = $rowTemp->total_shipment;
                                
                                $sqlTemp = "SELECT MIN(column_5) AS sales_date, SUM(column_13) AS total_quantity FROM {$tempTable} WHERE UPPER(column_10) = UPPER('{$importedData->column_10}') "
                                        . "AND UPPER(column_12) = UPPER('{$importedData->column_12}') AND column_27 = {$importedData->column_27}";
                                $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
                                $rowTemp = $resultTemp->fetch_object();
                                $salesDate = $rowTemp->sales_date;
                                $totalQuantity = $rowTemp->total_quantity;
                                $salesBalance = $totalQuantity;
                                
                                $sql = "INSERT INTO sales (sales_no, sales_date, sales_type, customer_id, stockpile_id, currency_id, exchange_rate, "
                                        . "price, price_converted, quantity, total_shipment, entry_by, entry_date) VALUES ("
                                        . "'{$salesNo}', STR_TO_DATE('{$salesDate}', '%Y-%m-%d'), 1, {$customerId}, {$stockpileId}, 1, 1, "
                                        . "{$importedData->column_27}, {$importedData->column_27}, {$totalQuantity}, {$totalShipment}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                                $boolContinue = true;
                                if($result !== false) {
                                    $salesId = $myDatabase->insert_id;
                                    
                                    for($i = 1; $i <= $totalShipment; $i++) {
                                        $shipmentCode = $salesNo .'-'. $i;

                                        $sql = "INSERT INTO `shipment` (shipment_code, sales_id, entry_by, entry_date) VALUES ("
                                                . "'{$shipmentCode}', {$salesId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    }
                                } else {
                                    $boolContinue = false;
                                }
                            }
                            
                            if($boolContinue) {
                                $sql = "SELECT shipment_id FROM shipment WHERE shipment_code LIKE '{$salesNo}%' AND shipment_status = 0 ORDER BY shipment_code ASC LIMIT 1";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if($result->num_rows == 1) {
                                    $row = $result->fetch_object();
                                    $shipmentId = $row->shipment_id;
                                    
                                    $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;

                                    // get next slip no
                                    $checkSlipNo = $stockpileCode .'-'. $importedData->trans_year;
                                    $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultSlip->num_rows == 0) {
                                        $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM transaction LIMIT 1";
                                        $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    }

                                    $rowSlipNo = $resultSlip->fetch_object();
                                    $nextSlipNo = $rowSlipNo->next_id;
                                    $slipNo = $checkSlipNo .'-'. $nextSlipNo;
                                    
                                    $sql = "INSERT INTO `transaction` (slip_no, product_id, shipment_id, transaction_date, vehicle_no, transaction_type, "
                                            . "send_weight, quantity, shrink, entry_by, entry_date) VALUES ('{$slipNo}', 1, "
                                            . "{$shipmentId}, STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), '{$importedData->column_9}', 2, "
                                            . "{$importedData->column_13}, {$importedData->column_16}, {$shrink}, "
                                            . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    
                                    if($result !== false) {
                                        $transactionId = $myDatabase->insert_id;

                                        // insert into delivery
                                        $sql = "SELECT t.* 
                                                FROM transaction t 
                                                WHERE t.stockpile_contract_id IN (
                                                    SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                                                ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                                                ORDER BY t.unloading_date ASC";
                                        $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        $totalInventoryValue = 0;
                                        if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                                            $balanceLeft = (float) $importedData->column_13;
                                            while($rowDelivery = $resultDelivery->fetch_object()) {
                                                if($balanceLeft > 0) {
                                                    if($rowDelivery->delivery_status == 0) {
                                                        if($balanceLeft >= $rowDelivery->quantity) {
                                                            $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                                            $quantityTaken = $rowDelivery->quantity;
                                                            $percentTaken = 1;
                                                            $deliveryStatus = 1;
                                                        } elseif($balanceLeft < $rowDelivery->quantity) {
                                                            $quantityTaken = $balanceLeft;
                                                            $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                                            $balanceLeft = 0;
                                                            $deliveryStatus = 2;
                                                        }
                                                    } elseif($rowDelivery->delivery_status == 2) {
                                                        $totalTaken = 0;
                                                        $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                                        $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                                        if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                                            $rowTaken = $resultTaken->fetch_object();
                                                            $totalTaken = $rowTaken->total_taken;
                                                        }

                                                        if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                                            $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                                            $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                            $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                                            $deliveryStatus = 1;
                                                        } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                                            $quantityTaken = $balanceLeft;
                                                            $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                                            $balanceLeft = 0;
                                                            $deliveryStatus = 2;
                                                        }
                                                    } 

                                                    $deliveryValue = $quantityTaken * (float) $importedData->column_27;
                                                    $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                                    $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                                    $percentTaken = $percentTaken * 100;

                                                    $sql = "INSERT INTO delivery (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                                            . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), {$percentTaken}, "
                                                            . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                                    $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                                }
                                            }
                                        }

                                        //$updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                                        $updateInventoryValue = $totalInventoryValue;

                                        $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                        // update shipment
                                        $cogsAmount = $updateInventoryValue;
                                        $invoiceAmount = (float) $importedData->column_16 * (float) $importedData->column_27;
                                        $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), "
                                                . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$importedData->column_16}, shipment_status = 1 "
                                                . "WHERE shipment_id = {$shipmentId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                        $sql = "SELECT COALESCE(SUM(quantity), 0) AS delivered_balance FROM `transaction` 
                                                WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                                                AND transaction_type = 2
                                                AND transaction_id <> {$transactionId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        $row = $result->fetch_object();
                                        $deliveredBalance = $row->delivered_balance;
                                        
                                        // update sales
                                        $boolUpdateSales = false;
                                        if((float) $importedData->column_13 == ($salesBalance - $deliveredBalance)) {
                                            $salesStatus = 1;
                                            $boolUpdateSales = true;
                                        } elseif((float) $importedData->column_13 < ($salesBalance - $deliveredBalance)) {
                                            $salesStatus = 2;
                                            $boolUpdateSales = true;
                                        }

                                        if($boolUpdateSales) {
                                            $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        }
                                        
                                        $successRow = $successRow + 1;
                                    } else {
                                        $errorRow = $errorRow + 1;
                                    }
                                } else {
                                    $errorRow = $errorRow + 1;
                                }
                            }
                        }
                        
                        // </editor-fold>
                    }
                    
//                    // <editor-fold defaultstate="collapsed" desc="validate shipment date">
//                    $shipmentDate = "";
//                    if(validateDate($importedData->column_2, 'Y-m-d')) {
//                        $shipmentDate = $importedData->column_2;
//                        $shipmentDate2 = $importedData->column_2.' 23:59:59';
//                    } else {
//                        $shipmentError = $shipmentError + 1;
//                        if($shipmentQuotation == '') {
//                            $shipmentQuotation = "'". $importedData->column_1 ."'";
//                        } else {
//                            $shipmentQuotation .= ",'". $importedData->column_1 ."'";
//                        }
//                        $warningRow = $warningRow + 1;
//                        $counterRow++;
//                        continue;
//                    }
//                    // </editor-fold>
//                    
//                    // <editor-fold defaultstate="collapsed" desc="get insured details">
//                    $insuredName = '';
//                    $insuredAddress = '';
//                    $sql = "SELECT i.*,
//                                CONCAT(CASE WHEN i.title=1 THEN 'Mr. ' WHEN i.title=2 THEN 'Ms. ' WHEN i.title=3 THEN 'Mrs. ' WHEN i.title=4 THEN 'PT. ' WHEN i.title=5 THEN 'CV. ' ELSE '' END  , i.insured_name) as insured_name2
//                            FROM insured i
//                            WHERE i.insured_id = {$insuredId}";
//                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                    if($result !== false && $result->num_rows == 1) {
//                        $row = $result->fetch_object();
//                        $insuredName = $row->insured_name;
//                        $insuredAddress = $row->address1;
//                    } else {
//                        $insuredError = $insuredError + 1;
//                        if($insuredQuotation == '') {
//                            $insuredQuotation = "'". $importedData->column_1 ."'";
//                        } else {
//                            $insuredQuotation .= ",'". $importedData->column_1 ."'";
//                        }
//                        $warningRow = $warningRow + 1;
//                        $counterRow++;
//                        continue;
//                    }
//                    // </editor-fold>
//                    
//                    // <editor-fold defaultstate="collapsed" desc="get currency id">
//                    $currencyId = "";
//                    $sql = "SELECT cur.currency_id
//                            FROM currency cur
//                            WHERE UPPER(cur.currency_code) = UPPER('{$importedData->column_6}')";
//                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                    if($result !== false && $result->num_rows == 1) {
//                        $row = $result->fetch_object();
//                        $currencyId = $row->currency_id;
//                        
//                        // <editor-fold defaultstate="collapsed" desc="get exchange rate to company">
//                
//                        if($currencyId == $companyCurrencyId) {
//                            $exchangeRate = 1;
//                            $operatorSign = '*';
//                        } else {
//                            $returnExchgRate = getExchangeRateGlobal($currencyId, $companyCurrencyId, $shipmentDate2);
//                            $returnExchgRate = explode("|", $returnExchgRate);
//
//                            $exchangeRate = $returnExchgRate[0];
//                            $operatorSign = $returnExchgRate[1];
//                        }
//
//                        // </editor-fold>
//                        
//                        // <editor-fold defaultstate="collapsed" desc="get exchange rate to report">
//                
//                        if($currencyId == $companyCurrencyIdReport) {
//                            $exchangeRate2Report = 1;
//                            $operatorSign2Report = '*';
//                        } else {
//                            $returnExchgRate = getExchangeRateGlobal($currencyId, $companyCurrencyIdReport, $shipmentDate2);
//                            $returnExchgRate = explode("|", $returnExchgRate);
//
//                            $exchangeRate2Report = $returnExchgRate[0];
//                            $operatorSign2Report = $returnExchgRate[1];
//                        }
//
//                        // </editor-fold>
//                    } else {
//                        $currencyError = $currencyError + 1;
//                        if($currencyQuotation == '') {
//                            $currencyQuotation = "'". $importedData->column_1 ."'";
//                        } else {
//                            $currencyQuotation .= ",'". $importedData->column_1 ."'";
//                        }                        
//                        $warningRow = $warningRow + 1;
//                        $counterRow++;
//                        continue;
//                    }
//                    // </editor-fold>
//                    
//                    // <editor-fold defaultstate="collapsed" desc="get category id & rate">
//                    $categoryId = "";
//                    $rate = "";
//                    $sql = "SELECT cat.category_id
//                            FROM category cat
//                            WHERE cat.appl_id = {$_SESSION['appID']} AND cat.category_module = 1 
//                            AND UPPER(cat.category_name) = UPPER('{$importedData->column_10}')";
//                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                    if($result !== false && $result->num_rows == 1) {
//                        $row = $result->fetch_object();
//                        $categoryId = $row->category_id;
//                        
//                        //get rate & premium
//                        if($currencyId != '') {
//                            $sql2 = "SELECT copcr.rate, copcr.currency_id
//                                    FROM client_op_category_rate copcr 
//                                    INNER JOIN client_open_policy cop 
//                                        ON cop.client_op_id = copcr.client_op_id 
//                                    WHERE copcr.client_op_id = {$clientOpId} AND copcr.category_id = {$categoryId}";
//                            $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
//                            if($result2 !== false && $result2->num_rows == 1) {
//                                $rowCatRate = $result2->fetch_object();
//                                $rate = $rowCatRate->rate;
//                                $maxCurrencyId = $rowCatRate->currency_id;
//
//                                // <editor-fold defaultstate="collapsed" desc="get exchange rate to max si">
//
//                                if($currencyId == $maxCurrencyId) {
//                                    $maxExchangeRate = 1;
//                                    $maxOperatorSign = '*';
//                                } else {
//                                    $returnExchgRate = getExchangeRateGlobal($currencyId, $maxCurrencyId);
//                                    $returnExchgRate = explode("|", $returnExchgRate);
//
//                                    $maxExchangeRate = $returnExchgRate[0];
//                                    $maxOperatorSign = $returnExchgRate[1];
//                                }
//
//                                // </editor-fold>
//                            } else {
//                                $rateError = $rateError + 1;
//                                if($rateQuotation == '') {
//                                    $rateQuotation = "'". $importedData->column_1 ."'";
//                                } else {
//                                    $rateQuotation .= ",'". $importedData->column_1 ."'";
//                                }
//                                $warningRow = $warningRow + 1;
//                                $counterRow++;
//                                continue;
//                            }
//                        }
//                    } else {
//                        $categoryError = $categoryError + 1;
//                        if($categoryQuotation == '') {
//                            $categoryQuotation = "'". $importedData->column_1 ."'";
//                        } else {
//                            $categoryQuotation .= ",'". $importedData->column_1 ."'";
//                        }
//                        $warningRow = $warningRow + 1;
//                        $counterRow++;
//                        continue;
//                    }
//                    // </editor-fold>
//                    
//                    // <editor-fold defaultstate="collapsed" desc="get country id">
//                    $countryFrom = "";
//                    $sql = "SELECT c.country_id
//                            FROM country c
//                            WHERE UPPER(c.name_of_country) = UPPER('{$importedData->column_12}')";
//                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                    if($result !== false && $result->num_rows == 1) {
//                        $row = $result->fetch_object();
//                        $countryFrom = $row->country_id;
//                    } else {
//                        $countryFromError = $countryFromError + 1;
//                        if($countryFromQuotation == '') {
//                            $countryFromQuotation = "'". $importedData->column_1 ."'";
//                        } else {
//                            $countryFromQuotation .= ",'". $importedData->column_1 ."'";
//                        }
//                        $warningRow = $warningRow + 1;
//                        $counterRow++;
//                        continue;
//                    }
//
//                    $countryTo = "";
//                    $sql = "SELECT c.country_id
//                            FROM country c
//                            WHERE UPPER(c.name_of_country) = UPPER('{$importedData->column_14}')";
//                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                    if($result !== false && $result->num_rows == 1) {
//                        $row = $result->fetch_object();
//                        $countryTo = $row->country_id;
//                    } else {
//                        $countryToError = $countryToError + 1;
//                        if($countryToQuotation == '') {
//                            $countryToQuotation = "'". $importedData->column_1 ."'";
//                        } else {
//                            $countryToQuotation .= ",'". $importedData->column_1 ."'";
//                        }
//                        $warningRow = $warningRow + 1;
//                        $counterRow++;
//                        continue;
//                    }
//                    // </editor-fold>
//                    
//                    if($shipmentDate != '' && $categoryId != '' && $rate != '' && $insuredName != '' && $insuredAddress != '' && $currencyId != '' &&
//                            $countryFrom != '' && $countryTo != '') {
//                        
//                        // Check duplication
//                        
//                        $sql = "SELECT * FROM jb_policy WHERE UPPER(quotation_no) = UPPER('{$importedData->column_1}')";
//                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                        
//                        if($result !== false && $result->num_rows == 0) {
//                            // <editor-fold defaultstate="collapsed" desc="Insert new row to next_folio_no">
//                            $folioNo = "";
//                            $sql = "INSERT INTO next_folio_no (entry_date) VALUES (STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
//                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//                            if($result !== false) {
//                                $folioNo = $myDatabase->insert_id;
//                            }
//                            // </editor-fold>
//
//                            $netPremium = round(((float) $importedData->column_11 * ($rate/100)), 2);
//
//                            $sql = "INSERT INTO jb_policy (op_id, quotation_no, policy_folio, business_type, cover_type, client_id, account_executive_id, "
//                                    . "category_id, insured_id, insured_name, insured_address, period_from, period_to, currency_id, exchange_rate, operator_sign, "
//                                    . "exchange_rate_2_report, operator_sign_2_report, brokerage, net_premium_client, closing_date, user_id, entry_date) VALUES ("
//                                    . "$opId, '{$importedData->column_1}', {$folioNo}, 1, {$coverType}, {$clientId}, {$aeId}, {$categoryId}, {$insuredId}, "
//                                    . "'{$insuredName}', '{$insuredAddress}', '{$opPeriodFrom}', '{$opPeriodTo}', {$currencyId}, {$exchangeRate}, '{$operatorSign}', "
//                                    . "{$exchangeRate2Report}, '{$operatorSign2Report}', {$brokerage}, {$netPremium}, '{$shipmentDate}', "
//                                    . "{$_SESSION['userID']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
//                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//                            if($result !== false) {
//                                $jbId = $myDatabase->insert_id;
//
//                                // <editor-fold defaultstate="collapsed" desc="Query Insert to jb_policy_underwriter">
//
//                                $sql = "INSERT INTO jb_policy_underwriter (jb_id, type, underwriter_id, share) "
//                                        . "SELECT {$jbId}, type, underwriter_id, share FROM open_policy_underwriter "
//                                        . "WHERE op_id = (SELECT op_id FROM client_open_policy WHERE client_op_id = {$clientOpId})";
//                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//                                // </editor-fold>
//
//                                
//                                $sql = "INSERT INTO jb_policy_detail (jb_id, shipment_date, country_of_origin, city_of_origin, country_of_destination, "
//                                        . "city_of_destination, invoice_no, awb_no, mawb_no, taken_from, original_currency, exchange_rate, "
//                                        . "operator_sign, exchg_rate_max_si, operator_sign_max_si, total_shipment_value, primary_insurance_value, "
//                                        . "howden_insured_value, rate, premium, notes) VALUES ("
//                                        . "{$jbId}, '{$shipmentDate}', {$countryFrom}, '{$importedData->column_13}', {$countryTo}, '{$importedData->column_15}', "
//                                        . "'{$importedData->column_4}', '{$importedData->column_3}', '{$importedData->column_5}', '{$importedData->column_8}', "
//                                        . "{$currencyId}, {$exchangeRate}, '{$operatorSign}', {$maxExchangeRate}, '{$maxOperatorSign}', "
//                                        . "{$importedData->column_7}, {$importedData->column_9}, {$importedData->column_11}, {$rate}, {$netPremium}, "
//                                        . "'{$importedData->column_16}')";
//                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//                                if($result !== false) {
//                                    // Insert to general_progress
//                                    $sql = "INSERT INTO general_progress (jb_id, progress_id, entry_by, entry_date) VALUES ("
//                                            . "{$jbId}, (SELECT progress_id FROM progress WHERE progress_code = '710' AND appl_id = ". $_SESSION['appID'] ." AND progress_module = 1), ". $_SESSION['userID'] .", STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
//                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);                                    
//
//                                    $successRow = $successRow + 1;
//                                } else {
//                                    $sql = "DELETE FROM jb_policy WHERE jb_id = {$jbId}";
//                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                                    $sql = "DELETE FROM jb_policy_underwriter WHERE jb_id = {$jbId}";
//                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                                    $errorRow = $errorRow + 1;
//                                }
//                            } else {
//                                $errorRow = $errorRow + 1;
//                            }
//                        } else {
//                            $duplicateError = $duplicateError + 1;
//                            $warningRow = $warningRow + 1;
//                            if($duplicateQuotation == '') {
//                                $duplicateQuotation = "'". $importedData->column_1 ."'";
//                            } else {
//                                $duplicateQuotation .= ",'". $importedData->column_1 ."'";
//                            }
//                        }
//                        
//                    } 
                }
                $counterRow++;
            }
            
            if(($successRow+$warningRow) == ($counterRow-1) && $errorRow == 0) {
                $result = $myDatabase->query("COMMIT", MYSQLI_STORE_RESULT);
                
                $sql = "DROP TABLE {$tempTable}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                
//                if($duplicateError > 0) {
//                    $errorMessage .= '<br/>'. $duplicateError . ' Row(s) failed to be import due to duplication data.';
//                }
//                if($shipmentError > 0) {
//                    $errorMessage .= '<br/>'. $shipmentError . ' Row(s)failed to be import due to invalid shipment date.';
//                }
//                if($categoryError > 0) {
//                    $errorMessage .= '<br/>'. $categoryError .' Row(s) failed to be import due to coverage information was not identify.';
//                }
//                if($rateError > 0) {
//                    $errorMessage .= '<br/>'. $rateError .' Row(s) failed to be import due to rate was not identify.';
//                }
//                if($currencyError > 0) {
//                    $errorMessage .= '<br/>'. $currencyError .' Row(s) failed to be import due to currency information was not identify.';
//                }
//                if($insuredError > 0) {
//                    $errorMessage .= '<br/>'. $insuredError .' Row(s) failed to be import due to insured information was not identify.';
//                }
//                if($countryFromError > 0) {
//                    $errorMessage .= '<br/>'. $countryFromError .' Row(s) failed to be import due to country information was not identify.';
//                }
//                if($countryToError > 0) {
//                    $errorMessage .= '<br/>'. $countryToError .' Row(s) failed to be import due to country information was not identify.';
//                }
//                
//                // prepare warning data
//                $fileLink = '';
//                if($warningRow > 0 || $duplicateError > 0) {
//                    // <editor-fold defaultstate="collapsed" desc="Define Style for excel">
//                    $styleArray = array(
//                        'font' => array(
//                            'bold' => true
//                        ),
//                        'alignment' => array(
//                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
//                        ),
//                        'borders' => array(
//                            'top' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            )
//                        ),
//                        'fill' => array(
//                            'type' => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
//                            'rotation' => 90,
//                            'startcolor' => array(
//                                'argb' => 'FFA0A0A0'
//                            ),
//                            'endcolor' => array(
//                                'argb' => 'FFFFFFFF'
//                            )
//                        )
//                    );
//
//                    $styleArray1 = array(
//                        'alignment' => array(
//                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
//                        )
//                    );
//
//                    $styleArray2 = array(
//                        'font' => array(
//                            'bold' => true,
//                            'size' => 14
//                        ),
//                        'alignment' => array(
//                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
//                        )
//                    );
//
//                    $styleArray3 = array(
//                        'font' => array(
//                            'bold' => true
//                        )
//                    );
//
//                    $styleArray4 = array(
//                        'font' => array(
//                            'bold' => true
//                        ),
//                        'alignment' => array(
//                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
//                        ),
//                        'borders' => array(
//                            'top' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'left' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'right' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'bottom' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            )
//                        )
//                    );
//
//                    $styleArray5 = array(
//                        'alignment' => array(
//                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT
//                        ),
//                        'borders' => array(
//                            'top' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'left' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'right' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'bottom' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            )
//                        )
//                    );
//
//                    $styleArray6 = array(
//                        'alignment' => array(
//                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
//                        ),
//                        'borders' => array(
//                            'top' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'left' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'right' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'bottom' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            )
//                        )
//                    );
//
//                    $styleArray7 = array(
//                        'alignment' => array(
//                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
//                        ),
//                        'borders' => array(
//                            'top' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'left' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'right' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'bottom' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            )
//                        )
//                    );
//
//                    $styleArray8 = array(
//                        'font' => array(
//                            'bold' => true
//                        ),
//                        'alignment' => array(
//                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
//                        )
//                    );
//
//                    $styleArray9 = array(
//                        'fill' => array(
//                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
//                            'color' => array('rgb' => 'FFFF00')
//                        )
//                    );
//                    // </editor-fold>
//
//                    $fileName = "JB Warning Import " . str_replace(" ", "-", $_SESSION['userName']) . " " . date("Ymd-His") . ".xls";
//                    $onSheet = 0;
//                    $lastColumn = "Q";
//
//                    // <editor-fold defaultstate="collapsed" desc="Create Excel and Define Warning Data's Header">
//                    $objPHPExcel2 = new PHPExcel();
//                    PHPExcel_Cell::setValueBinder(new PHPExcel_Cell_AdvancedValueBinder());
//
//                    $objPHPExcel2->setActiveSheetIndex($onSheet);
//                    $objPHPExcel2->getActiveSheet()->getSheetView()->setZoomScale(75);
//                    $objPHPExcel2->getActiveSheet()->getPageSetup()->setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);
//                    $objPHPExcel2->getDefaultStyle()->getFont()->setName('Arial');
//                    $objPHPExcel2->getDefaultStyle()->getFont()->setSize(12);
//                    $objPHPExcel2->getActiveSheet()->getDefaultRowDimension()->setRowHeight(15);
//
//                    $objPHPExcel2->getActiveSheet()->setTitle("Import Warning");
//                    
//                    $rowActive = 1;
//                    $headerRow = $rowActive;
//                    $bodyRowEnd = 0;
//                    $objPHPExcel2->getActiveSheet()->setCellValue("A{$rowActive}", "No");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("B{$rowActive}", "Ref. No.");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("C{$rowActive}", "Date");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("D{$rowActive}", "AWB No.");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("E{$rowActive}", "Invoice No.");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("F{$rowActive}", "Delivery No. (MAWB No.)");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("G{$rowActive}", "Currency");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("H{$rowActive}", "Total Value");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("I{$rowActive}", "Carrier");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("J{$rowActive}", "Primary Insurance with Carrier");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("K{$rowActive}", "Coverage");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("L{$rowActive}", "Insured Value");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("M{$rowActive}", "Country From");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("N{$rowActive}", "City From");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("O{$rowActive}", "Country To");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("P{$rowActive}", "City To");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("Q{$rowActive}", "Remarks");
//    //                $objPHPExcel2->getActiveSheet()->setCellValue("R{$rowActive}", "Warning Notes");
//
//                    $objPHPExcel2->getActiveSheet()->getStyle("A{$rowActive}:{$lastColumn}{$rowActive}")->applyFromArray($styleArray4);
//
//                    // </editor-fold>
//                    
//                    // <editor-fold defaultstate="collapsed" desc="Query warning data">
//                    $sqlWarning = "";
//                    $conditionWarning = "";
//                    if($shipmentQuotation != '') {
//                        $conditionWarning .= $shipmentQuotation;
//                    }
//
//                    if($categoryQuotation != '') {
//                        if($conditionWarning != '') {
//                            $conditionWarning .= " , ";
//                        }
//                        $conditionWarning .= $categoryQuotation;
//                    }
//
//                    if($rateQuotation != '') {
//                        if($conditionWarning != '') {
//                            $conditionWarning .= " , ";
//                        }
//                        $conditionWarning .= $rateQuotation;
//                    }
//
//                    if($currencyQuotation != '') {
//                        if($conditionWarning != '') {
//                            $conditionWarning .= " , ";
//                        }
//                        $conditionWarning .= $currencyQuotation;
//                    }
//
//                    if($insuredQuotation != '') {
//                        if($conditionWarning != '') {
//                            $conditionWarning .= " , ";
//                        }
//                        $conditionWarning .= $insuredQuotation;
//                    }
//
//                    if($countryFromQuotation != '') {
//                        if($conditionWarning != '') {
//                            $conditionWarning .= " , ";
//                        }
//                        $conditionWarning .= $countryFromQuotation;
//                    }
//
//                    if($countryToQuotation != '') {
//                        if($conditionWarning != '') {
//                            $conditionWarning .= " , ";
//                        }
//                        $conditionWarning .= $countryToQuotation;
//                    }
//                    // </editor-fold>
//
//                    if($conditionWarning != '') {
//                        // <editor-fold defaultstate="collapsed" desc="Create Excel Warning Data Body">
//                        
//                        $sqlWarning = "SELECT * FROM $tempTable WHERE column_1 IN ({$conditionWarning})";
//                        $resultWarning = $myDatabase->query($sqlWarning, MYSQLI_STORE_RESULT);
//
//                        $rowNo = 1;
//                        while($rowWarning = $resultWarning->fetch_object()) {
//                            $rowActive++;
//                            $objPHPExcel2->getActiveSheet()->setCellValue("A{$rowActive}", $rowNo);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("B{$rowActive}", $rowWarning->column_1);
//        //                    $objPHPExcel2->getActiveSheet()->setCellValue("C{$rowActive}", $rowWarning->column_2);
//                            $objPHPExcel2->getActiveSheet()->getCell("C{$rowActive}")->setValueExplicit(PHPExcel_Shared_Date::stringToExcel($rowWarning->column_2), PHPExcel_Cell_DataType::TYPE_NUMERIC);
//                            $checkShipmentDate = strpos($shipmentQuotation, $rowWarning->column_1);
//                            if($checkShipmentDate !== false) {
//                                $objPHPExcel2->getActiveSheet()->getStyle("C{$rowActive}")->applyFromArray($styleArray9);
//                            }
//                            $objPHPExcel2->getActiveSheet()->setCellValue("D{$rowActive}", $rowWarning->column_3);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("E{$rowActive}", $rowWarning->column_4);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("F{$rowActive}", $rowWarning->column_5);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("G{$rowActive}", $rowWarning->column_6);
//                            $checkCurrency = strpos($currencyQuotation, $rowWarning->column_1);
//                            if($checkCurrency !== false) {
//                                $objPHPExcel2->getActiveSheet()->getStyle("G{$rowActive}")->applyFromArray($styleArray9);
//                            }
//                            $objPHPExcel2->getActiveSheet()->setCellValue("H{$rowActive}", $rowWarning->column_7);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("I{$rowActive}", $rowWarning->column_8);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("J{$rowActive}", $rowWarning->column_9);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("K{$rowActive}", $rowWarning->column_10);
//                            $checkCoverage = strpos($categoryQuotation, $rowWarning->column_1);
//                            if($checkCoverage !== false) {
//                                $objPHPExcel2->getActiveSheet()->getStyle("K{$rowActive}")->applyFromArray($styleArray9);
//                            }
//                            $checkRate = strpos($rateQuotation, $rowWarning->column_1);
//                            if($checkRate !== false) {
//                                $objPHPExcel2->getActiveSheet()->getStyle("K{$rowActive}")->applyFromArray($styleArray9);
//                            }
//                            $objPHPExcel2->getActiveSheet()->setCellValue("L{$rowActive}", $rowWarning->column_11);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("M{$rowActive}", $rowWarning->column_12);
//                            $checkFrom = strpos($countryFromQuotation, $rowWarning->column_1);
//                            if($checkFrom !== false) {
//                                $objPHPExcel2->getActiveSheet()->getStyle("M{$rowActive}")->applyFromArray($styleArray9);
//                            }
//                            $objPHPExcel2->getActiveSheet()->setCellValue("N{$rowActive}", $rowWarning->column_13);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("O{$rowActive}", $rowWarning->column_14);
//                            $checkTo = strpos($countryToQuotation, $rowWarning->column_1);
//                            if($checkTo !== false) {
//                                $objPHPExcel2->getActiveSheet()->getStyle("O{$rowActive}")->applyFromArray($styleArray9);
//                            }
//                            $objPHPExcel2->getActiveSheet()->setCellValue("P{$rowActive}", $rowWarning->column_15);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("Q{$rowActive}", $rowWarning->column_16);
//
//                            $rowNo++;
//                        }
//                        $bodyRowEnd = $rowActive;
//                        
//                        // </editor-fold>
//                    }
//                    
//                    // <editor-fold defaultstate="collapsed" desc="Formating Excel Warning data">
//                    // Set column width
//                    for ($temp = ord("A"); $temp <= ord("Z"); $temp++) {
//                        $objPHPExcel2->getActiveSheet()->getColumnDimension(chr($temp))->setAutoSize(true);
//                        $objPHPExcel2->getActiveSheet()->getColumnDimension(chr($temp))->setAutoSize(true);
//                    }
//
//                    // Set format date in cell
//                    if ($bodyRowEnd > $headerRow) {
//                        $objPHPExcel2->getActiveSheet()->getStyle("C" . ($headerRow + 1) . ":C{$bodyRowEnd}")->getNumberFormat()->setFormatCode("M/D/YYYY");
//                    }
//
//                    // Set number format for Amount 
//                    $objPHPExcel2->getActiveSheet()->getStyle("H" . ($headerRow + 1) . ":H{$bodyRowEnd}")->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED1);
//                    $objPHPExcel2->getActiveSheet()->getStyle("J" . ($headerRow + 1) . ":J{$bodyRowEnd}")->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED1);
//                    $objPHPExcel2->getActiveSheet()->getStyle("L" . ($headerRow + 1) . ":L{$bodyRowEnd}")->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED1);
//
//                    // Set border for table
//                    $objPHPExcel2->getActiveSheet()->getStyle("A" . ($headerRow) . ":{$lastColumn}{$bodyRowEnd}")->getBorders()->getAllBorders()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
//
//                    // </editor-fold>
//                    
//                    // <editor-fold defaultstate="collapsed" desc="Create Excel and Define Duplication Data's Header">
//                    
//                    $objPHPExcel2->createSheet(1);
//                    // Rename sheet
////                    $objPHPExcel2->getSheet(1)->setTitle('Duplication');
//                    $objPHPExcel2->setActiveSheetIndex(1);
//                    $objPHPExcel2->getActiveSheet()->getSheetView()->setZoomScale(75);
//                    $objPHPExcel2->getActiveSheet()->getPageSetup()->setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);
//                    $objPHPExcel2->getDefaultStyle()->getFont()->setName('Arial');
//                    $objPHPExcel2->getDefaultStyle()->getFont()->setSize(12);
//                    $objPHPExcel2->getActiveSheet()->getDefaultRowDimension()->setRowHeight(15);
//
//                    $objPHPExcel2->getActiveSheet()->setTitle("Duplication");
//                    
//                    $rowActive = 1;
//                    $headerRow = $rowActive;
//                    $bodyRowEnd = 0;
//                    $objPHPExcel2->getActiveSheet()->setCellValue("A{$rowActive}", "No");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("B{$rowActive}", "Ref. No.");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("C{$rowActive}", "Date");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("D{$rowActive}", "AWB No.");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("E{$rowActive}", "Invoice No.");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("F{$rowActive}", "Delivery No. (MAWB No.)");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("G{$rowActive}", "Currency");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("H{$rowActive}", "Total Value");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("I{$rowActive}", "Carrier");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("J{$rowActive}", "Primary Insurance with Carrier");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("K{$rowActive}", "Coverage");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("L{$rowActive}", "Insured Value");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("M{$rowActive}", "Country From");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("N{$rowActive}", "City From");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("O{$rowActive}", "Country To");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("P{$rowActive}", "City To");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("Q{$rowActive}", "Remarks");
//    //                $objPHPExcel2->getActiveSheet()->setCellValue("R{$rowActive}", "Warning Notes");
//
//                    $objPHPExcel2->getActiveSheet()->getStyle("A{$rowActive}:{$lastColumn}{$rowActive}")->applyFromArray($styleArray4);
//                    
//                    // </editor-fold>
//                    
//                    // <editor-fold defaultstate="collapsed" desc="Query duplication data">
//                    $sqlDuplicate = "";
//                    if($duplicateQuotation != '') {
//                        $sqlDuplicate .= "SELECT * FROM $tempTable WHERE column_1 IN ({$duplicateQuotation})";
//                    }
//                    // </editor-fold>
//                    
//                    if($sqlDuplicate != '') {
//                        // <editor-fold defaultstate="collapsed" desc="Create Excel Duplication Data Body">
//                        
//                        $resultDuplicate = $myDatabase->query($sqlDuplicate, MYSQLI_STORE_RESULT);
//
//                        $rowNo = 1;
//                        while($rowDuplicate = $resultDuplicate->fetch_object()) {
//                            $rowActive++;
//                            $objPHPExcel2->getActiveSheet()->setCellValue("A{$rowActive}", $rowNo);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("B{$rowActive}", $rowDuplicate->column_1);
//        //                    $objPHPExcel2->getActiveSheet()->setCellValue("C{$rowActive}", $rowDuplicate->column_2);
//                            $objPHPExcel2->getActiveSheet()->getCell("C{$rowActive}")->setValueExplicit(PHPExcel_Shared_Date::stringToExcel($rowDuplicate->column_2), PHPExcel_Cell_DataType::TYPE_NUMERIC);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("D{$rowActive}", $rowDuplicate->column_3);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("E{$rowActive}", $rowDuplicate->column_4);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("F{$rowActive}", $rowDuplicate->column_5);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("G{$rowActive}", $rowDuplicate->column_6);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("H{$rowActive}", $rowDuplicate->column_7);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("I{$rowActive}", $rowDuplicate->column_8);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("J{$rowActive}", $rowDuplicate->column_9);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("K{$rowActive}", $rowDuplicate->column_10);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("L{$rowActive}", $rowDuplicate->column_11);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("M{$rowActive}", $rowDuplicate->column_12);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("N{$rowActive}", $rowDuplicate->column_13);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("O{$rowActive}", $rowDuplicate->column_14);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("P{$rowActive}", $rowDuplicate->column_15);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("Q{$rowActive}", $rowDuplicate->column_16);
//
//                            $rowNo++;
//                        }
//                        $bodyRowEnd = $rowActive;
//                        
//                        // </editor-fold>
//                    }
//                    
//                    // <editor-fold defaultstate="collapsed" desc="Formating Excel Duplication data">
//                    // Set column width
//                    for ($temp = ord("A"); $temp <= ord("Z"); $temp++) {
//                        $objPHPExcel2->getActiveSheet()->getColumnDimension(chr($temp))->setAutoSize(true);
//                        $objPHPExcel2->getActiveSheet()->getColumnDimension(chr($temp))->setAutoSize(true);
//                    }
//
//                    // Set format date in cell
//                    if ($bodyRowEnd > $headerRow) {
//                        $objPHPExcel2->getActiveSheet()->getStyle("C" . ($headerRow + 1) . ":C{$bodyRowEnd}")->getNumberFormat()->setFormatCode("M/D/YYYY");
//                    }
//
//                    // Set number format for Amount 
//                    $objPHPExcel2->getActiveSheet()->getStyle("H" . ($headerRow + 1) . ":H{$bodyRowEnd}")->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED1);
//                    $objPHPExcel2->getActiveSheet()->getStyle("J" . ($headerRow + 1) . ":J{$bodyRowEnd}")->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED1);
//                    $objPHPExcel2->getActiveSheet()->getStyle("L" . ($headerRow + 1) . ":L{$bodyRowEnd}")->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED1);
//
//                    // Set border for table
//                    $objPHPExcel2->getActiveSheet()->getStyle("A" . ($headerRow) . ":{$lastColumn}{$bodyRowEnd}")->getBorders()->getAllBorders()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
//
//                    // </editor-fold>
//
//                    $objPHPExcel2->setActiveSheetIndex($onSheet);
//                    
//                    // <editor-fold defaultstate="collapsed" desc="Save Excel and share link">
//                    ob_end_clean();
//                    header('Content-Type: application/vnd.ms-excel');
//                    header('Content-Disposition: attachment;filename="' . $fileName . '"');
//                    header('Cache-Control: max-age=0');
//                    $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel2, 'Excel5');
//                    $objWriter->save('./import/'.$fileName);
//                    $fileLink = './import/'.$fileName;
//                    // </editor-fold>
//                }
//                
//                if($fileLink != '') {
//                    $errorMessage .= '<br/>For more detail failed import data, please click this <a href="'. $fileLink .'" target="_blank" style="font-weight: bold; color: red;">link</a> to download and overview it again.';
//                }

                return "OK|". $successRow ." Row(s) import successfully, ". $warningRow ." Row(s) failed with warning. ". $errorMessage;
            } else {
                $result = $myDatabase->query("ROLLBACK", MYSQLI_STORE_RESULT);

                return "FAIL|Import failed. ". $errorRow ." Rows(s) can not be imported. Please contact administrator. ";
            }
        }
    } else {
        return 'FAIL|File not exists.';
    }
    // </editor-fold>
}

function validateDate($date, $format = 'Y-m-d H:i:s')
{
    $d = DateTime::createFromFormat($format, $date);
    return $d && $d->format($format) == $date;
}


function insertGeneralLedger($myDatabase, $source, $invoiceId = "NULL", $invoiceNotimId = "NULL", $i_id = "NULL", $contractId = "NULL", $transactionId = "NULL", $paymentId = "NULL", $jurnalId = "NULL", $accrueId = "NULL" , $returnId = "NULL" )
{
    
    $insertValues = "";
    $boolContinue = true;
    
    if ($accrueId != 'NULL') {
        // <editor-fold defaultstate="collapsed" desc="accrueId">
		$boolReverse = false;
		$sqlReverse = "SELECT * FROM invoice_detail WHERE prediction_detail_id = {$accrueId} ";
				$resultReverse = $myDatabase->query($sqlReverse, MYSQLI_STORE_RESULT);
			if ($resultReverse->num_rows == 1) {
                   $boolReverse = true;
              }
		$sqlCancel = "SELECT * FROM accrue_prediction_detail WHERE prediction_detail_id = {$accrueId} ";
				$resultCancel = $myDatabase->query($sqlCancel, MYSQLI_STORE_RESULT);
			if ($resultCancel->num_rows == 1) {
				$rowCancel = $resultCancel->fetch_object();
                   $journalStatus = $rowCancel->journal_status;
              }
		
		
		if($boolReverse){
			$sql = "DELETE FROM general_ledger WHERE accrue_id = {$accrueId} AND description = 'Reverse Journal'";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		}else if ($journalStatus == 2){
			$sql = "DELETE FROM general_ledger WHERE accrue_id = {$accrueId} AND description = 'Cancel Journal'";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		}else{
			$sql = "DELETE FROM general_ledger WHERE accrue_id = {$accrueId}";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		}
		
		
        $sql = "SELECT a.*,b.*, d.`account_no` FROM accrue_prediction_detail a
                LEFT JOIN accrue_prediction b ON a.prediction_id = b.prediction_id
                LEFT JOIN account d ON d.`account_id` = a.`account_id`
                WHERE a.prediction_detail_id = {$accrueId} ";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
			
			$accountNo = $row->account_no;
			$totalAmount = $row->total_amount * $row->exchange_rate;  //ini exchange rate punya PEB
			$journal_status = $row->journal_status;

                
				$sqlAccount1 = "SELECT account_id, account_no, account_name FROM account WHERE account_type = 6 AND account_no IN (220100, {$accountNo})";
                $resultAccount1 = $myDatabase->query($sqlAccount1, MYSQLI_STORE_RESULT);

                if ($resultAccount1 !== false && $resultAccount1->num_rows > 0) {
                    while ($rowAccount1 = $resultAccount1->fetch_object()) {
                        if ($insertValues != "") {
                            $insertValues .= ", ";
                        }
						
						if($boolReverse){
						
                        if ($totalAmount != 0 && $totalAmount != '') {
                            if ($rowAccount1->account_no == $accountNo) {
                                if ($totalAmount < 0) {
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 15, {$contractId}, {$invoiceId}, NULL, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId},0, 0,{$rowAccount1->account_id}, 'Reverse Journal', {$totalAmount})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 15, {$contractId}, {$invoiceId}, NULL, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId},0, 0,{$rowAccount1->account_id}, 'Reverse Journal', {$totalAmount})";
                                }
                            } elseif ($rowAccount1->account_no == 220100) {
                                if ($totalAmount < 0) {
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 15, {$contractId}, {$invoiceId}, NULL, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId},0, 0,{$rowAccount1->account_id}, 'Reverse Journal', {$totalAmount})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 15, {$contractId}, {$invoiceId}, NULL, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId},0, 0,{$rowAccount1->account_id}, 'Reverse Journal', {$totalAmount})";
                                }
                            } 
                        }
					}else{
						if ($totalAmount != 0 && $totalAmount != '') {
							if($journal_status == 2){
                            if ($rowAccount1->account_no == $accountNo) {
                                if ($totalAmount < 0) {
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 15, {$contractId}, {$invoiceId}, NULL, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId},0, 0,{$rowAccount1->account_id}, 'Cancel Journal', {$totalAmount})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 15, {$contractId}, {$invoiceId}, NULL, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId},0, 0,{$rowAccount1->account_id}, 'Cancel Journal', {$totalAmount})";
                                }
                            } elseif ($rowAccount1->account_no == 220100) {
                                if ($totalAmount < 0) {
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 15, {$contractId}, {$invoiceId}, NULL, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId},0, 0,{$rowAccount1->account_id}, 'Cancel Journal', {$totalAmount})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 15, {$contractId}, {$invoiceId}, NULL, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId},0, 0,{$rowAccount1->account_id}, 'Cancel Journal', {$totalAmount})";
                                }
                            }
						}else{
							if ($rowAccount1->account_no == $accountNo) {
                                if ($totalAmount < 0) {
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 15, {$contractId}, {$invoiceId}, NULL, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId},0, 0,{$rowAccount1->account_id}, NULL, {$totalAmount})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 15, {$contractId}, {$invoiceId}, NULL, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId},0, 0,{$rowAccount1->account_id}, NULL, {$totalAmount})";
                                }
                            } elseif ($rowAccount1->account_no == 220100) {
                                if ($totalAmount < 0) {
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 15, {$contractId}, {$invoiceId}, NULL, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId},0, 0,{$rowAccount1->account_id}, NULL, {$totalAmount})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 15, {$contractId}, {$invoiceId}, NULL, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId},0, 0,{$rowAccount1->account_id}, NULL, {$totalAmount})";
                                }
                            }
						}
                        }
						
					}

                    }
                } else {
                    $boolContinue = false;
                    echo 'FALSE1';
                }
            
        } else {
            $boolContinue = false;
            echo 'FALSE3';
        }

        // </editor-fold>
    }else if($contractId != 'NULL' && $source != 'STOCK TRANSIT' && $source == 'CONTRACT ADJUSTMENT') {
        // <editor-fold defaultstate="collapsed" desc="contract">
        $sql = "DELETE FROM general_ledger WHERE general_ledger_module = 'CONTRACT ADJUSTMENT' AND contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
       	$adjustment = 0;
		$ppn = 0;
		$totalAdjustment = 0;
		$adjustment1 = 0;
		$ppn1 = 0;
		$totalAdjustment1 = 0;
        $sql = "SELECT con.*, v.*, a.account_no FROM contract con 
                LEFT JOIN vendor v ON con.`vendor_id` = v.`vendor_id` LEFT JOIN account a ON a.account_id = con.adjustment_acc WHERE con.contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            
            if($row->contract_type == 'P') {
			
			$adjustment = $row->price_converted * $row->adjustment;
			if($row->adjustment_ppn == 1){
				$ppn = $adjustment * ($row->ppn/100);
			}else{
				$ppn = 0;
			}
			$totalAdjustment = $adjustment + $ppn;
			$totalAdjustment1 = $totalAdjustment;
			if($adjustment < 0 ){
				$adjustment1 = $adjustment * -1;
				$totalAdjustment1 = $totalAdjustment * -1;
				$ppn1 = $ppn * -1;
			}
			$accountNo = $row->account_no;	
			
			$sqlAccount1 = "SELECT account_id, account_no, account_name FROM account WHERE account_type = 1 AND account_no IN (130100, 150410, $accountNo)";
                $resultAccount1 = $myDatabase->query($sqlAccount1, MYSQLI_STORE_RESULT);
                
                if($resultAccount1 !== false && $resultAccount1->num_rows > 0) {
                    while($rowAccount1 = $resultAccount1->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
				if($adjustment != 0 && $adjustment != ''){
							if($rowAccount1->account_no == 130100) {
							if($adjustment < 0){
                            $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$adjustment1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$adjustment})";	
							}
							} elseif($rowAccount1->account_no == 150410) {
							if($adjustment < 0){
                            $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$ppn1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$ppn})";	
							}		
                        	} elseif($rowAccount1->account_no == 210102) {
							if($adjustment < 0){
							$insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$totalAdjustment1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$totalAdjustment1})";
							}
							} elseif($rowAccount1->account_no == 520100) {
                           if($adjustment < 0){
							$insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$totalAdjustment1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$totalAdjustment1})";
							}
							}elseif($rowAccount1->account_no == 150120) {
                           if($adjustment < 0){
							$insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$totalAdjustment1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$totalAdjustment1})";
							}
							}
						}
				
					}
					}else {
                    $boolContinue = false;
					echo 'FALSE1';
                }
			}else {
                $boolContinue = false;
				echo 'FALSE2';
            }
        } else {
            $boolContinue = false;
			echo 'FALSE3';
        }
        
        // </editor-fold>
    }elseif($contractId != 'NULL' && $source == 'STOCK TRANSIT' && $source != 'CONTRACT ADJUSTMENT') {

        // <editor-fold defaultstate="collapsed" desc="contract">
		
       $sql = "DELETE FROM general_ledger WHERE general_ledger_module = 'STOCK TRANSIT' AND contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
       
        $sql = "SELECT a.*, (c.`price_converted` * a.send_weight) AS amt_stock_transit FROM stock_transit a 
                LEFT JOIN stockpile_contract b ON a.`stockpile_contract_id` = b.`stockpile_contract_id`
                LEFT JOIN contract c ON b.`contract_id` = c.`contract_id` WHERE c.contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            
            $amt_stock_transit = $row->amt_stock_transit;
			//$amt_ospks = $row->amt_ospks;
			
			$sqlAccount1 = "SELECT account_id, account_no, account_name FROM account WHERE account_type = 1 AND account_no IN (130100,141000)";
                $resultAccount1 = $myDatabase->query($sqlAccount1, MYSQLI_STORE_RESULT);
                
                if($resultAccount1 !== false && $resultAccount1->num_rows > 0) {
                    while($rowAccount1 = $resultAccount1->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
				if($amt_stock_transit != 0 && $amt_stock_transit != ''){
							if($rowAccount1->account_no == 130100) {
							if($amt_stock_transit < 0){
                            $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$amt_stock_transit})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$amt_stock_transit})";	
							}
							} elseif($rowAccount1->account_no == 141000) {
							if($amt_stock_transit < 0){
                            $insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$amt_stock_transit})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount1->account_id}, NULL, {$amt_stock_transit})";	
							}		
                        	} 
						}
				
					}
					}else {
                    $boolContinue = false;
					echo 'FALSE1';
                }
			
        } else {
            $boolContinue = false;
			echo 'FALSE3';
			echo $sql;
        }
        
        // </editor-fold>
    }elseif($contractId != 'NULL' && $source != 'STOCK TRANSIT' && $source != 'CONTRACT ADJUSTMENT') {
        // <editor-fold defaultstate="collapsed" desc="contract">
        
		   //update surya-----------------------------------------------------------------------------------------------------
        $sql = "SELECT contract_status FROM contract
       WHERE contract_id = {$contractId}";
       $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

       if($result !== false && $result->num_rows == 1) {
           $row = $result->fetch_object();
           
               $contractStatus = $row->contract_status;}
        //----------------------------------------------------------------------------------------------------------------------------------


		 if($contractStatus !=2){
          $sql = "DELETE FROM general_ledger WHERE contract_id = {$contractId}";
          $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        }
		
        $sql = "SELECT con.*, v.* FROM contract con 
                LEFT JOIN vendor v ON con.`vendor_id` = v.`vendor_id`  WHERE con.contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            
           
			
			
			if($row->contract_type == 'P') {
                
                $amount = $row->price_converted * $row->quantity;
				
				if($row->ppn != 0){
				$totalAmount = $amount * 1.1;
				}else{
				$totalAmount = $amount;
				}
				$ppn = $totalAmount - $amount;
				
				
				
                $sqlAccount = "SELECT account_id, account_no, account_name FROM account WHERE account_type = 1 AND account_no IN (130100, 210102, 150410)";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
						
                        if($contractStatus !=2){
                          if($rowAccount->account_no == 130100) {
                              $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Kontrak beli cangkang kontrak', {$amount})";
                          } elseif($rowAccount->account_no == 210102) {
                              $insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalAmount})";
                          } elseif($rowAccount->account_no == 150410) {
                              $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";
                          }
                        }else {
                          if($rowAccount->account_no == 130100) {
                              $insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'cancel kontrak', {$amount})";
                          } elseif($rowAccount->account_no == 210102) {
                              $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalAmount})";
                          } elseif($rowAccount->account_no == 150410) {
                              $insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";
                          }
                        }
                    }
                } else {
                    $boolContinue = false;
					echo 'FALSE1';
                }
            } else {
                $boolContinue = false;
				echo 'FALSE2';
            }
        } else {
            $boolContinue = false;
			echo 'FALSE3';
        }
        
        // </editor-fold>
    }  elseif($jurnalId != 'NULL') {
        // <editor-fold defaultstate="collapsed" desc="contract">
				
        $sql = "DELETE FROM general_ledger WHERE jurnal_id = {$jurnalId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
				
		
        $sql = "SELECT * FROM gl_detail WHERE gl_detail_id = {$jurnalId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            
				
				$sqlAccount = "SELECT account_id, account_no, account_name FROM account WHERE account_id = {$row->account_id}";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
                        
                        if($row->gl_type == 1) {
							$insertValues .= "(1, '{$source}', NULL, NULL, 11, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_converted})";
                        } elseif($row->gl_type == 2) {
                            $insertValues .= "(2, '{$source}', NULL, NULL, 11, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_converted})";
                        }
					}
                } else {
                    $boolContinue = false;
				}
				
				
				
            
        } else {
            $boolContinue = false;
			echo 'FALSE3';
			echo $jurnalId;
        }
        
        // </editor-fold>
    }elseif($invoiceId != 'NULL' && $source == 'RETURN INVOICE') {
        // <editor-fold defaultstate="collapsed" desc="invoiceDetail">
		$sql = "DELETE FROM general_ledger WHERE invoice_id = {$invoiceId} AND general_ledger_module = 'RETURN INVOICE'";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
      /// echo 'test';
		$sql88 = "SELECT invoice_detail_id FROM invoice_detail WHERE invoice_detail_id IN ({$invoiceId})";
		$result88 = $myDatabase->query($sql88, MYSQLI_STORE_RESULT);
        if($result88 !== false && $result88->num_rows >= 0) {
			while($row88 = $result88->fetch_object()) {
				$invoiceId = $row88->invoice_detail_id;
                $sql = "SELECT id.*,i.*,  a.`account_no`, a.`account_type`, apph.`account_no` AS a_pph FROM invoice_detail id
                        LEFT JOIN invoice i ON i.`invoice_id` = id.`invoice_id`
                        LEFT JOIN account a ON id.`account_id` = a.`account_id`
                        LEFT JOIN tax txpph ON id.`pphID` = txpph.`tax_id`
                        LEFT JOIN tax txppn ON id.`ppnID` = txppn.`tax_id`
                        LEFT JOIN account apph ON apph.`account_id` = txpph.`account_id` 
                        WHERE id.invoice_detail_id = {$invoiceId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
                if($result !== false && $result->num_rows == 1) {
                    $row = $result->fetch_object();
            
                        $amount = $row->amount_converted;
                        $ppn = $row->ppn_converted;
                        $pph = $row->pph_converted;
                        $totalAmount = $row->tamount_converted;
                        $account_no = $row->account_no;
                        $invoiceMethod = $row->invoice_method_detail;
                        $gvId = $row->general_vendor_id;
                        $paymentStatus = $row->payment_status;
                        $invoiceStatus = $row->invoice_status;
                    
                    if($invoiceMethod = 1){/* DP ADMIN BANK*/
                        $sql9 = "SELECT idp.*, id.invoice_id, aid.`account_no` AS accNo, adp.`account_no` AS acc_pph, dptx.tax_value AS pph_dp, id.pph AS dpPPh,
                            adpppn.`account_no` AS acc_ppn, dpppn.tax_value AS ppn_dp, id.ppn AS dpPPn FROM invoice_dp idp
                            LEFT JOIN invoice_detail id ON id.`invoice_detail_id` = idp.invoice_detail_dp
                            LEFT JOIN tax dptx ON id.`pphID` = dptx.`tax_id`
                            LEFT JOIN account adp ON dptx.`account_id` = adp.`account_id`
                            LEFT JOIN tax dpppn ON id.`ppnID` = dpppn.`tax_id`
                            LEFT JOIN account adpppn ON dpppn.`account_id` = adpppn.`account_id`  
                            LEFT JOIN account aid ON aid.`account_id` = id.`account_id`       
                            WHERE idp.invoice_detail_id = {$invoiceId} AND aid.`account_no` = 700080 ORDER BY id.invoice_id ASC";
                        $result9 = $myDatabase->query($sql9, MYSQLI_STORE_RESULT);
                
                        if($result9 !== false && $result9->num_rows >= 0) {
                            while($row9 = $result9->fetch_object()) {
                                //echo 'test2';
                                $tamount2 = $row9->amount_payment;
                                $i_id2 = $row9->invoice_id;
                                $accNo2 = $row9->accNo;
                                    //$accountNo = $row8->accNo;
                                    //$ppnDP = $row8->ppn_converted;
                                    //$pphDP = $row8->pph_converted;
                                $acc_ppn2 = $row9->acc_ppn;
                                $acc_pph2 = $row9->acc_pph;
                                if($row9->dpPPn == 0){
                                    $ppnDP2 = 0;	
                                }else{
                                    $ppnDP2 = $tamount2 * ($row9->ppn_dp/100);
                                }
                                if($row9->dpPPh == 0){
                                    $pphDP2 = 0;	
                                }else{
                                    $pphDP2 = $tamount2 * ($row9->pph_dp/100);
                                }

                                $sqlAccountDP2 = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in ('{$acc_pph2}', 150410 , 700080)";
                                $resultAccountDP2 = $myDatabase->query($sqlAccountDP2, MYSQLI_STORE_RESULT);
                                        
                                if($resultAccountDP2 !== false && $resultAccountDP2->num_rows > 0) {
                                    while($rowAccountDP2 = $resultAccountDP2->fetch_object()) {
                                        if($insertValues != "") {
                                            $insertValues .= ", ";
                                        }
                                                
                                        if($rowAccountDP2->account_no == 700080) {
                                                    
                                            $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, {$i_id2}, 0, {$rowAccountDP2->account_id}, NULL, {$tamount2})";
                                                    
                                        }elseif($rowAccountDP2->account_no == 150410) {
                                                    
                                            $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, {$i_id2}, 0, {$rowAccountDP2->account_id}, NULL, {$ppnDP2})";	
                                                    
                                        }
                                        elseif($rowAccountDP2->account_no == $acc_pph2) {
                                                    
                                            $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, {$i_id2}, 0, {$rowAccountDP2->account_id}, NULL, {$pphDP2})";	 
                                                    
                                        }
                                    }
                                }
                            }
                        }else {
                            $boolContinue = false;			
                        }
                    }
                    
                    if($invoiceMethod = 1){
                        $totalAmountDp = 0;
                        $sql8 = "SELECT idp.*, id.invoice_id, aid.`account_no` AS accNo, adp.`account_no` AS acc_pph, dptx.tax_value AS pph_dp, id.pph AS dpPPh,
                                adpppn.`account_no` AS acc_ppn, dpppn.tax_value AS ppn_dp, id.ppn AS dpPPn FROM invoice_dp idp
                                LEFT JOIN invoice_detail id ON id.`invoice_detail_id` = idp.invoice_detail_dp
                                LEFT JOIN tax dptx ON id.`pphID` = dptx.`tax_id`
                                LEFT JOIN account adp ON dptx.`account_id` = adp.`account_id`
                                LEFT JOIN tax dpppn ON id.`ppnID` = dpppn.`tax_id`
                                LEFT JOIN account adpppn ON dpppn.`account_id` = adpppn.`account_id`  
                                LEFT JOIN account aid ON aid.`account_id` = id.`account_id`       
                                WHERE idp.invoice_detail_id = {$invoiceId} AND aid.`account_no` != 700080 ORDER BY id.invoice_id ASC";
                        $result8 = $myDatabase->query($sql8, MYSQLI_STORE_RESULT);
                
                        if($result8 !== false && $result8->num_rows >= 0) {
                            while($row8 = $result8->fetch_object()) {
                                //echo 'test2';
                                    $tamount = $row8->amount_payment;
                                    $i_id = $row8->invoice_id;
                                    $accNo = $row8->accNo;
                                    $acc_ppn = $row8->acc_ppn;
                                    $acc_pph = $row8->acc_pph;
                                    if($row8->dpPPn == 0){
                                    $ppnDP = 0;	
                                    }else{
                                    $ppnDP = $tamount * ($row8->ppn_dp/100);
                                    }
                                    if($row8->dpPPh == 0){
                                    $pphDP = 0;	
                                    }else{
                                    $pphDP = $tamount * ($row8->pph_dp/100);
                                    }
                                    echo $accNo;
                                    
                                    $amountDp = ($tamount + $ppnDP) - $pphDP;
                                    $totalAmountDp = $totalAmountDp + $amountDp;
                                    
                        
                                $sqlAccountDP = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in ('{$acc_pph}', 150410 ,'{$accNo}')";
                                $resultAccountDP = $myDatabase->query($sqlAccountDP, MYSQLI_STORE_RESULT);
                                
                                if($resultAccountDP !== false && $resultAccountDP->num_rows > 0) {
                                    while($rowAccountDP = $resultAccountDP->fetch_object()) {
                                        if($insertValues != "") {
                                            $insertValues .= ", ";
                                        }
                                        
                                        if($rowAccountDP->account_no == $accNo) {
                                            
                                            $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$tamount})";
                                            
                                        }elseif($rowAccountDP->account_no == 150410) {
                                            
                                            $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$ppnDP})";	
                                            
                                        }
                                        elseif($rowAccountDP->account_no == $acc_pph) {
                                            
                                            $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$pphDP})";	 
                                            
                                        }
                                    }
                                }
                            }
                        }else {
                            $boolContinue = false;			
                        }
                    }
                    
                    
                    if($invoiceMethod = 1){
                            
                        if($pph == 0){
                            $a_pph = 0;
                        }else{
                            $a_pph = $row->a_pph;
                        }
                        
                        //echo $row->account_type;
                        //echo $account_no;
                        //echo $a_pph;
                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in (210105, 150410, '{$account_no}', '{$a_pph}')";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                        
                        if($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while($rowAccount = $resultAccount->fetch_object()) {
                                if($insertValues != "") {
                                    $insertValues .= ", ";
                                }
                                if($rowAccount->account_no == $account_no) {
                                    if($invoiceStatus == 2){
                                    // $amount1 = $amount * -1;
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";	
                                    }else{
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                    }
                                    
                                }  elseif($rowAccount->account_no == 210105) {
                                    $totalAmount = $totalAmount - $totalAmountDp;
                                    if($invoiceStatus == 2){
                                       // $totalAmount1 = $totalAmount * -1;
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
                                    }else{
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
                                    }
                                    
                                }
                                elseif($rowAccount->account_no == 150410) {
                                    if($invoiceStatus == 2){
                                       // $ppn1 = $ppn * -1;
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";	 
                                    }else{
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";	
                                    } 
                                }
                                elseif($rowAccount->account_no == $a_pph) {
                                    if($invoiceStatus == 2){
                                       // $pph1 = $pph * -1; 
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph})";	 
                                    }else{
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph})";	
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                    }elseif($invoiceMethod = 2){
                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in (210105, 150410, '{$account_no}', '{$a_pph}')";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                        
                        if($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while($rowAccount = $resultAccount->fetch_object()) {
                                if($insertValues != "") {
                                    $insertValues .= ", ";
                                }
                                
                                if($rowAccount->account_no == $account_no) {
                                    
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                    
                                } elseif($rowAccount->account_no == 210105) {
                                    
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
                                    
                                }
                                elseif($rowAccount->account_no == 150410) {
                                    
                                    $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";
                                    
                                }
                                elseif($rowAccount->account_no == $a_pph) {
                                    
                                    $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph})";
                                    
                                } 
                            }
                        } else {
                            $boolContinue = false;
                        }
                    }
                        
                } else {
                    $boolContinue = false;
                }
	        }
	    }	
        // </editor-fold>
    }elseif($invoiceId != 'NULL' && $source == 'INVOICE DETAIL' ) {
        // <editor-fold defaultstate="collapsed" desc="invoiceDetail">
        
        $sql = "DELETE FROM general_ledger WHERE invoice_id = {$invoiceId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
         $sql = "SELECT id.*,i.*, a.`account_no`, a.`account_type`, apph.`account_no` AS a_pph FROM invoice_detail id
				LEFT JOIN invoice i ON i.`invoice_id` = id.`invoice_id`
				LEFT JOIN account a ON id.`account_id` = a.`account_id`
				LEFT JOIN tax txpph ON id.`pphID` = txpph.`tax_id`
				LEFT JOIN tax txppn ON id.`ppnID` = txppn.`tax_id`
				LEFT JOIN account apph ON apph.`account_id` = txpph.`account_id` 
				WHERE id.invoice_detail_id = {$invoiceId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
			
				/*if($row->amount_converted == 0 && $row->amount == 0 && $row->pph_converted == 0 && $row->ppn_converted != 0){
					$amount = $row->tamount_converted;
				}else{*/
					$amount = $row->amount_converted;
				//}
				$ppn = $row->ppn_converted;
                $pph = $row->pph_converted;
				$totalAmount = $row->tamount_converted;
				$account_no = $row->account_no;
				$invoiceMethod = $row->invoice_method_detail;
				$gvId = $row->general_vendor_id;
				$paymentStatus = $row->payment_status;
				$invoiceStatus = $row->invoice_status;
				
				if($invoiceMethod = 1){/* DP ADMIN BANK*/
					
			
				$sql9 = "SELECT idp.*, id.invoice_id, aid.`account_no` AS accNo, adp.`account_no` AS acc_pph, dptx.tax_value AS pph_dp, id.pph AS dpPPh,
                        adpppn.`account_no` AS acc_ppn, dpppn.tax_value AS ppn_dp, id.ppn AS dpPPn FROM invoice_dp idp
                        LEFT JOIN invoice_detail id ON id.`invoice_detail_id` = idp.invoice_detail_dp
                        LEFT JOIN tax dptx ON id.`pphID` = dptx.`tax_id`
                        LEFT JOIN account adp ON dptx.`account_id` = adp.`account_id`
                        LEFT JOIN tax dpppn ON id.`ppnID` = dpppn.`tax_id`
                        LEFT JOIN account adpppn ON dpppn.`account_id` = adpppn.`account_id`  
                        LEFT JOIN account aid ON aid.`account_id` = id.`account_id`       
                        WHERE idp.invoice_detail_id = {$invoiceId} AND aid.`account_no` = 700080 ORDER BY id.invoice_id ASC";
				$result9 = $myDatabase->query($sql9, MYSQLI_STORE_RESULT);
        
				if($result9 !== false && $result9->num_rows >= 0) {
				while($row9 = $result9->fetch_object()) {
					//echo 'test2';
			   			$tamount2 = $row9->amount_payment;
						$i_id2 = $row9->invoice_id;
						$accNo2 = $row9->accNo;
						//$accountNo = $row8->accNo;
						//$ppnDP = $row8->ppn_converted;
						//$pphDP = $row8->pph_converted;
						$acc_ppn2 = $row9->acc_ppn;
						$acc_pph2 = $row9->acc_pph;
						if($row9->dpPPn == 0){
						$ppnDP2 = 0;	
						}else{
						$ppnDP2 = $tamount2 * ($row9->ppn_dp/100);
						}
						if($row9->dpPPh == 0){
						$pphDP2 = 0;	
						}else{
						$pphDP2 = $tamount2 * ($row9->pph_dp/100);
						}
						echo $accNo2;
						
			
			$sqlAccountDP2 = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in ('{$acc_pph2}', 150410 , 700080)";
                $resultAccountDP2 = $myDatabase->query($sqlAccountDP2, MYSQLI_STORE_RESULT);
                
                if($resultAccountDP2 !== false && $resultAccountDP2->num_rows > 0) {
                    while($rowAccountDP2 = $resultAccountDP2->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
						
			 			if($rowAccountDP2->account_no == 700080) {
							
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, {$i_id2}, 0, {$rowAccountDP2->account_id}, NULL, {$tamount2})";
							
                        }elseif($rowAccountDP2->account_no == 150410) {
							
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, {$i_id2}, 0, {$rowAccountDP2->account_id}, NULL, {$ppnDP2})";	
							
                        }
						 elseif($rowAccountDP2->account_no == $acc_pph2) {
							 
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, {$i_id2}, 0, {$rowAccountDP2->account_id}, NULL, {$pphDP2})";	 
							 
						 }
			}
		}
	  }
	}else {
                    $boolContinue = false;
			
				echo 'FALSE2';
				echo $gvId;
			
                }
			}
			
			if($invoiceMethod = 1){
					
			
				$sql8 = "SELECT idp.*, id.invoice_id, aid.`account_no` AS accNo, adp.`account_no` AS acc_pph, dptx.tax_value AS pph_dp, id.pph AS dpPPh,
                        adpppn.`account_no` AS acc_ppn, dpppn.tax_value AS ppn_dp, id.ppn AS dpPPn FROM invoice_dp idp
                        LEFT JOIN invoice_detail id ON id.`invoice_detail_id` = idp.invoice_detail_dp
                        LEFT JOIN tax dptx ON id.`pphID` = dptx.`tax_id`
                        LEFT JOIN account adp ON dptx.`account_id` = adp.`account_id`
                        LEFT JOIN tax dpppn ON id.`ppnID` = dpppn.`tax_id`
                        LEFT JOIN account adpppn ON dpppn.`account_id` = adpppn.`account_id`  
                        LEFT JOIN account aid ON aid.`account_id` = id.`account_id`       
                        WHERE idp.invoice_detail_id = {$invoiceId} AND aid.`account_no` != 700080 ORDER BY id.invoice_id ASC";
				$result8 = $myDatabase->query($sql8, MYSQLI_STORE_RESULT);
        
				if($result8 !== false && $result8->num_rows >= 0) {
				while($row8 = $result8->fetch_object()) {
					//echo 'test2';
			   			$tamount = $row8->amount_payment;
						$i_id = $row8->invoice_id;
						$accNo = $row8->accNo;
						//$accountNo = $row8->accNo;
						//$ppnDP = $row8->ppn_converted;
						//$pphDP = $row8->pph_converted;
						$acc_ppn = $row8->acc_ppn;
						$acc_pph = $row8->acc_pph;
						if($row8->dpPPn == 0){
						$ppnDP = 0;	
						}else{
						$ppnDP = $tamount * ($row8->ppn_dp/100);
						}
						if($row8->dpPPh == 0){
						$pphDP = 0;	
						}else{
						$pphDP = $tamount * ($row8->pph_dp/100);
						}
						echo $accNo;
						
						$amountDp = ($tamount + $ppnDP) - $pphDP;
						$totalAmountDp = $totalAmountDp + $amountDp;
						
			
			$sqlAccountDP = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in ('{$acc_pph}', 150410 ,'{$accNo}')";
                $resultAccountDP = $myDatabase->query($sqlAccountDP, MYSQLI_STORE_RESULT);
                
                if($resultAccountDP !== false && $resultAccountDP->num_rows > 0) {
                    while($rowAccountDP = $resultAccountDP->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
						
			 			if($rowAccountDP->account_no == $accNo) {
							
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$tamount})";
							
                        }elseif($rowAccountDP->account_no == 150410) {
							
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$ppnDP})";	
							
                        }
						 elseif($rowAccountDP->account_no == $acc_pph) {
							 
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$pphDP})";	 
							 
						 }
			}
		}
	  }
	}else {
                    $boolContinue = false;
			
				echo 'FALSE3';
				echo $gvId;
			
                }
			}
			
			
			if($invoiceMethod = 1){
					
				if($pph == 0){
					$a_pph = 0;
				}else{
					$a_pph = $row->a_pph;
				}
				
				//echo $row->account_type;
				//echo $account_no;
				//echo $a_pph;
                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in (210105, 150410, '{$account_no}', '{$a_pph}')";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
                        
                        if($rowAccount->account_no == $account_no) {
							if($amount < 0){
								$amount1 = $amount ;
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";	
							}else{
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
							}
							
                        }  elseif($rowAccount->account_no == 210105) {
							// $totalAmount = $totalAmount - $totalAmountDp;
							if($totalAmount < 0){
								$totalAmount1 = $totalAmount;
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
							}
							
                        }
						 elseif($rowAccount->account_no == 150410) {
							if($ppn < 0){
								$ppn1 = $ppn ;
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn1})";	 
							}else{
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";	
							} 
                        }
						 elseif($rowAccount->account_no == $a_pph) {
							if($pph < 0){
								$pph1 = $pph; 
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph1})";	 
							}else{
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph})";	
							}
                        }
                    }
                } else {
                    $boolContinue = false;
                }
			}elseif($invoiceMethod = 2){
				$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in (210105, 150410, '{$account_no}', '{$a_pph}')";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
                        
                        if($rowAccount->account_no == $account_no) {
							
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";	
							
                        } elseif($rowAccount->account_no == 210105) {
							
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";	
							
                        }
						 elseif($rowAccount->account_no == 150410) {
							
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";	 
							 
                        }
						 elseif($rowAccount->account_no == $a_pph) {
							 
							 $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph})";	 
							 
                        } 
                    }
                } else {
                    $boolContinue = false;
                }
			}
				
        } else {
            $boolContinue = false;
        }
		
        // </editor-fold>
    } elseif($invoiceNotimId != 'NULL' && ($source == 'INVOICE NOTIM' || $source == 'RETURN INVOICE NOTIM' )) {
        // <editor-fold defaultstate="collapsed" desc="invoiceDetail">
        // echo 'Y';
        if($source == 'INVOICE NOTIM'){
            $sql = "DELETE FROM general_ledger WHERE invoice_notim_id = {$invoiceNotimId} AND general_ledger_module = 'INVOICE NOTIM'";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            echo " delete " . $sql;

        }else if($source == 'RETURN INVOICE NOTIM'){
            $sql = "DELETE FROM general_ledger WHERE invoice_notim_id = {$invoiceNotimId} AND general_ledger_module = 'RETURN INVOICE NOTIM'";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);    
        }

        $sql = "SELECT pp.payment_method, pp.total_dpp as original_amount2, 
                        pp.grand_total as amount2, inv.* FROM invoice_notim inv
                LEFT JOIN pengajuan_payment pp ON pp.`idPP` = inv.`idPP`
                WHERE inv.`inv_notim_id` = {$invoiceNotimId}";

        echo $sql;
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
			$invoiceStatus = $row->invoice_status;
         

            if($row->freightId != 'NULL' && $row->freightId != '' && $row->freightId != 0){ //FREIGHT
                if($invoiceStatus == 2){
                    $wherePropertyA = "pa.old_inv_id";
                }else{
                    $wherePropertyA = "pa.inv_notim_id";
                }
                if ($row->payment_method == 3 && $row->amount2 == 0){ //settle
                    $sqlDP = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph, appn.`account_no` AS a_ppn, ppd.`dpp_dp_settle` as dpp, 
                                    ppd.`dp_pph_value` as pph_amount, ppd.`dp_ppn_value` as ppn_amount, 
                                    (ppd.settle_amount) AS amount
                            FROM invoice_notim inv
                            INNER JOIN pengajuan_payment_dp ppd ON ppd.inv_notim_id = inv.inv_notim_id
                            LEFT JOIN freight f ON f.`freight_id` = inv.`freightId`
                            LEFT JOIN tax fpph ON fpph.`tax_id` = f.`pph_tax_id`
                            LEFT JOIN account apph ON apph.`account_id` = fpph.`account_id`
                            LEFT JOIN tax fppn ON fppn.`tax_id` = f.`ppn_tax_id`
                            LEFT JOIN account appn ON appn.`account_id` = fppn.`account_id`
                            WHERE inv.`inv_notim_id`= {$invoiceNotimId}";
                    $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                    // echo $sqlDP;       
                    if($resultDP !== false && $resultDP->num_rows > 0) {
                        while($rowDP = $resultDP->fetch_object()) {                
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (130003, 210103 , '{$rowDP->a_pph}', '{$rowDP->a_ppn}')";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if($rowAccount->account_no == 130003) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->dpp})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->dpp})";	
                                        }
                                    }elseif($rowAccount->account_no == $rowDP->a_pph) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(2, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->pph_amount})";	 
                                        }else{
                                            $insertValues .= "(1, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->pph_amount})";	 
                                        }
                                    } elseif($rowAccount->account_no == $rowDP->a_ppn) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(1, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->ppn_amount})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->ppn_amount})";	
                                        }
                                    }elseif($rowAccount->account_no == 210103) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(2, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->amount})";	
                                        }else{
                                            $insertValues .= "(1, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->amount})";	
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                            }	         
                        }
                    }

                    $sqlAccount2 = "SELECT inv.inv_notim_id, pa.`transaction_id`, t.`freight_price`, t.`freight_quantity`, pa.pph_id, 
                                            f.`freight_rule`, af.`account_no` AS aFreight, t.send_weight, 
                                            pa.`ppn_id` AS fppn , appn.`account_no` AS appn, pa.`ppn_value`, pa.pph_value, pa.total_amount, pa.shrink, pa.dpp, (pa.dpp - pa.shrink) as amount
                                    FROM invoice_notim inv
                                    LEFT JOIN payment_oa pa ON {$wherePropertyA} = inv.inv_notim_id
                                    LEFT JOIN `transaction` t ON t.`transaction_id` = pa.`transaction_id`
                                    LEFT JOIN freight_cost fc ON fc.`freight_cost_id` = t.`freight_cost_id`
                                    LEFT JOIN freight f ON f.`freight_id` = fc.`freight_id`
                                    LEFT JOIN tax ftx ON ftx.`tax_id` = t.`fc_tax_id`
                                    LEFT JOIN account af ON af.`account_id` = ftx.`account_id`
                                    LEFT JOIN tax fppn ON fppn.`tax_id` = f.`ppn_tax_id`
                                    LEFT JOIN account appn ON appn.`account_id` = fppn.`account_id`
                                    WHERE inv.`inv_notim_id` = {$invoiceNotimId}";
                        $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                        //  echo $sqlAccount2;
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {	
                            $totalFreightPrice = 0; $totalDpp = 0; $totalShrink = 0; $creditFreightPrice = 0;
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 2 AND account_no in (123456, 520100, '{$rowAccount2->aFreight}', '{$rowAccount2->appn}', 210103)";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                            //$taxValue = 0;
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                if($rowAccount2->fppn != '' || $rowAccount2->fppn != 0){
                                    $taxPPN = $rowAccount2->ppn_value;
                                }else{
                                    $taxPPN = 0;
                                }
                                if($rowAccount2->pph_id != '' || $rowAccount2->pph_id != 0){
                                    $taxValue = $rowAccount2->pph_value;
                                }else{
                                    $taxValue = 0;
                                }

                                if($rowAccount2->freight_price != '' && $rowAccount2->freight_price > 0) {
                                    $totalDpp = $rowAccount2->dpp;
                                    $totalShrink =  $rowAccount2->shrink;
                                    $totalFreightPrice =  $rowAccount2->amount;
                                    $creditFreightPrice = $totalFreightPrice + ($totalFreightPrice * ($taxPPN/100)) - ($totalFreightPrice * ($taxValue/100));
                                }else {
                                    $totalFreightPrice = 0;
                                    $creditFreightPrice = 0;
                                }
                                
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if($rowAccount->account_no == 123456) { //Unbilled Goods OA
                                        if($invoiceStatus == 2){ //2 = credit
                                            // $totalFreightPrice1 = $totalDpp * -1;
                                            $totalFreightPrice1 = $totalDpp;
                                            $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, 'Return Journal', {$totalFreightPrice1})";
                                        }else{ //1 = debit
                                            $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalDpp})";
                                        }
                                    }elseif($rowAccount->account_no == 520100) {  //SHRINK
                                        if($invoiceStatus == 2){ //2 = debit
                                           // $totalShrink1 = $totalShrink * -1;
                                            $totalShrink1 = $totalShrink;
                                            $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, 'Return Journal', {$totalShrink1})";
                                        }else{ 
                                            $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalShrink})";
                                        }
                                    }elseif($rowAccount->account_no == $rowAccount2->aFreight) { //pph
                                        $amount = $totalFreightPrice * ($taxValue / 100);
                                        if($invoiceStatus == 2){
                                            // $amount1 = $amount * -1;
                                            $amount1 = $amount;
                                            $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amount1})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                        }
                                    } elseif($rowAccount->account_no == $rowAccount2->appn) { //PPn/VAT
                                        $amountPPN = $totalFreightPrice * ($taxPPN / 100);
                                        if($invoiceStatus == 2){
                                            // $amountPPN1 = $amountPPN * -1;
                                            $amountPPN1 = $amountPPN;
                                            $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amountPPN1})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
                                        }
                                    }elseif($rowAccount->account_no == 210103) { //Account Payable OA (hutang dagang)
                                        if($invoiceStatus == 2){
                                            // $creditFreightPrice1 = $creditFreightPrice * -1;
                                            $creditFreightPrice1 = $creditFreightPrice;
                                            $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$creditFreightPrice1})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$creditFreightPrice})";
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                                echo 'e';
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }

                }else if (($row->payment_method == 1 || $row->payment_method == 3) && $row->amount2 > 0){//payment	oa

                    if($row->payment_method == 3){ //SETTLE TAPI ADA PAYMENT
                        $sqlDP = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph, appn.`account_no` AS a_ppn, ppd.`dpp_dp_settle` as dpp, 
                                    ppd.`dp_pph_value` as pph_amount, ppd.`dp_ppn_value` as ppn_amount, 
                                    (ppd.settle_amount) AS amount
                            FROM invoice_notim inv
                            INNER JOIN pengajuan_payment_dp ppd ON ppd.inv_notim_id = inv.inv_notim_id
                            LEFT JOIN freight f ON f.`freight_id` = inv.`freightId`
                            LEFT JOIN tax fpph ON fpph.`tax_id` = f.`pph_tax_id`
                            LEFT JOIN account apph ON apph.`account_id` = fpph.`account_id`
                            LEFT JOIN tax fppn ON fppn.`tax_id` = f.`ppn_tax_id`
                            LEFT JOIN account appn ON appn.`account_id` = fppn.`account_id`
                            WHERE inv.`inv_notim_id`= {$invoiceNotimId}";
                        $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                    // echo $sqlDP;       
                        if($resultDP !== false && $resultDP->num_rows > 0) {
                            while($rowDP = $resultDP->fetch_object()) {                
                                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (130003, 210103 , '{$rowDP->a_pph}', '{$rowDP->a_ppn}')";
                                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                    while($rowAccount = $resultAccount->fetch_object()) {
                                        if($insertValues != "") {
                                            $insertValues .= ", ";
                                        }

                                        if($rowAccount->account_no == 130003) {
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->dpp})";	
                                            }else{
                                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->dpp})";	
                                            }
                                        }  elseif($rowAccount->account_no == $rowDP->a_pph) {
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(2, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->pph_amount})";	
                                            }else{
                                                $insertValues .= "(1, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->pph_amount})";	
                                            }
                                        } elseif($rowAccount->account_no == $rowDP->a_ppn) {
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(1, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->ppn_amount})";	
                                            }else{
                                                $insertValues .= "(2, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->ppn_amount})";	 
                                            }
                                        }elseif($rowAccount->account_no == 210103) {
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(2, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->amount})";	
                                            }else{
                                                $insertValues .= "(1, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->amount})";	
                                            }
                                        }
                                    }
                                } else {
                                    $boolContinue = false;
                                }	         
                            }
                        }
                    }

                    $sqlAccount2 = "SELECT inv.inv_notim_id, pa.`transaction_id`, t.`freight_price`, t.`freight_quantity`, pa.pph_id, 
                                f.`freight_rule`, af.`account_no` AS aFreight, t.send_weight, 
                                pa.`ppn_id` AS fppn , appn.`account_no` AS appn, pa.`ppn_value`, pa.pph_value, pa.total_amount, pa.shrink, pa.dpp, (pa.dpp - pa.shrink) as amount
                                FROM invoice_notim inv
                                LEFT JOIN payment_oa pa ON {$wherePropertyA} = inv.inv_notim_id
                                LEFT JOIN `transaction` t ON t.`transaction_id` = pa.`transaction_id`
                                LEFT JOIN freight_cost fc ON fc.`freight_cost_id` = t.`freight_cost_id`
                                LEFT JOIN freight f ON f.`freight_id` = fc.`freight_id`
                                LEFT JOIN tax ftx ON ftx.`tax_id` = t.`fc_tax_id`
                                LEFT JOIN account af ON af.`account_id` = ftx.`account_id`
                                LEFT JOIN tax fppn ON fppn.`tax_id` = f.`ppn_tax_id`
                                LEFT JOIN account appn ON appn.`account_id` = fppn.`account_id`
                                WHERE inv.`inv_notim_id` = {$invoiceNotimId}";
                        $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                        //  echo $sqlAccount2;
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {	
                            $totalFreightPrice = 0; $totalDpp = 0; $totalShrink = 0; $creditFreightPrice = 0;
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 2 AND account_no in (123456, 520100, '{$rowAccount2->aFreight}', '{$rowAccount2->appn}', 210103)";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                            //$taxValue = 0;
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                if($rowAccount2->fppn != '' || $rowAccount2->fppn != 0){
                                    $taxPPN = $rowAccount2->ppn_value;
                                }else{
                                    $taxPPN = 0;
                                }
                                if($rowAccount2->pph_id != '' || $rowAccount2->pph_id != 0){
                                    $taxValue = $rowAccount2->pph_value;
                                }else{
                                    $taxValue = 0;
                                }

                                if($rowAccount2->freight_price != '' && $rowAccount2->freight_price > 0) {
                                    $totalDpp = $rowAccount2->dpp;
                                    $totalShrink =  $rowAccount2->shrink;
                                    $totalFreightPrice =  $rowAccount2->amount;
                                    $creditFreightPrice = $totalFreightPrice + ($totalFreightPrice * ($taxPPN/100)) - ($totalFreightPrice * ($taxValue/100));
                                }else {
                                    $totalFreightPrice = 0;
                                    $creditFreightPrice = 0;
                                }
                                
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if($rowAccount->account_no == 123456) { //Unbilled Goods OA
                                        if($invoiceStatus == 2){ //2 = credit
                                            // $totalFreightPrice1 = $totalDpp * -1;
                                            $totalFreightPrice1 = $totalDpp;
                                            $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, 'Return Journal', {$totalFreightPrice1})";
                                        }else{ //1 = debit
                                            $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalDpp})";
                                        }
                                    }elseif($rowAccount->account_no == 520100) {  //SHRINK
                                        if($invoiceStatus == 2){ //2 = debit
                                            // $totalShrink1 = $totalShrink * -1;
                                            $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, 'Return Journal', {$totalShrink})";
                                        }else{ //1 = credit
                                            $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalShrink})";
                                        }
                                    }elseif($rowAccount->account_no == $rowAccount2->aFreight) { //pph
                                        $amount = $totalFreightPrice * ($taxValue / 100);
                                        if($invoiceStatus == 2){
                                            // $amount1 = $amount * -1;
                                            $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amount})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                        }
                                    } elseif($rowAccount->account_no == $rowAccount2->appn) { //PPn/VAT
                                        $amountPPN = $totalFreightPrice * ($taxPPN / 100);
                                        if($invoiceStatus == 2){
                                            // $amountPPN1 = $amountPPN * -1;
                                            $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amountPPN})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
                                        }
                                    }elseif($rowAccount->account_no == 210103) { //Account Payable OA (hutang dagang)
                                        if($invoiceStatus == 2){
                                            // $creditFreightPrice1 = $creditFreightPrice * -1;
                                            $creditFreightPrice1 = $creditFreightPrice;
                                            $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$creditFreightPrice1})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$creditFreightPrice})";
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                                echo 'e';
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }elseif ($row->payment_method == 2){ //Downpayment
                    $sql = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph, appn.`account_no` AS a_ppn,pp.`total_dpp` as dpp, 
                                    pp.`total_pph_amount` as pph_amount, pp.`total_ppn_amount` as ppn_amount, 
                                    (pp.grand_total) AS amount
                            FROM invoice_notim inv
                            LEFT JOIN freight f ON f.`freight_id` = inv.`freightId`
                            LEFT JOIN tax fpph ON fpph.`tax_id` = f.`pph_tax_id`
                            LEFT JOIN account apph ON apph.`account_id` = fpph.`account_id`
                            LEFT JOIN tax fppn ON fppn.`tax_id` = f.`ppn_tax_id`
                            LEFT JOIN account appn ON appn.`account_id` = fppn.`account_id`
                            LEFT JOIN pengajuan_payment pp ON pp.`idPP` = inv.`idPP`
                            WHERE inv.`inv_notim_id`= {$invoiceNotimId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    // echo $sql;
                    if($result !== false && $result->num_rows == 1) {
                    $row = $result->fetch_object();
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (130003, 210103 , '{$row->a_pph}', '{$row->a_ppn}')";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                        if($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while($rowAccount = $resultAccount->fetch_object()) {
                                if($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if($rowAccount->account_no == 130003) {
                                    if($invoiceStatus == 2){
                                        $insertValues .= "(2, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->dpp})";	
                                    }else{
                                        $insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->dpp})";	
                                    }
                                }  elseif($rowAccount->account_no == $row->a_pph) {
                                    if($invoiceStatus == 2){
                                        $insertValues .= "(1, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->pph_amount})";	
                                    }else{
                                        $insertValues .= "(2, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_amount})";	
                                    }
                                } elseif($rowAccount->account_no == $row->a_ppn) {
                                    if($invoiceStatus == 2){
                                        $insertValues .= "(2, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->ppn_amount})";	
                                    }else{
                                        $insertValues .= "(1, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_amount})";	
                                    }
                                }elseif($rowAccount->account_no == 210103) {
                                    if($invoiceStatus == 2){
                                        $insertValues .= "(1, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->amount})";	
                                    }else{
                                        $insertValues .= "(2, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount})";	
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                    }
                }
            } else if($row->laborId != 'NULL' && $row->laborId != '' && $row->laborId != 0){ //UNLOADING
                if($invoiceStatus == 2){
                    $wherePropertyA = "pb.old_inv_id";
                }else{
                    $wherePropertyA = "pb.inv_notim_id";
                }
                if ($row->payment_method == 3 && $row->amount2 == 0){ //settle
                    //----------------------------- DP YG DIPAKE -------------------------
                    $sqlDP = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph, appn.`account_no` AS a_ppn, ppd.`dpp_dp_settle` as dpp, 
                                        ppd.`dp_pph_value` as pph_amount, ppd.`dp_ppn_value` as ppn_amount, (ppd.settle_amount) AS amount
                                FROM invoice_notim inv
                                INNER JOIN pengajuan_payment_dp ppd ON ppd.inv_notim_id = inv.inv_notim_id
                                LEFT JOIN labor l ON l.`labor_id` = inv.`laborId`
                                LEFT JOIN tax lpph ON lpph.`tax_id` = l.`pph_tax_id`
                                LEFT JOIN account apph ON apph.`account_id` = lpph.`account_id`
                                LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
                                LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
                                WHERE inv.`inv_notim_id`= {$invoiceNotimId}";
                    $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                        
                    if($resultDP !== false && $resultDP->num_rows > 0) {
                        while($rowDP = $resultDP->fetch_object()) {					
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (3, 7) AND account_no in (130004, 210104, '{$rowDP->a_pph}', '{$rowDP->a_ppn}')";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }
                                    if($rowAccount->account_no == 130004) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->dpp})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->dpp})";	
                                        }
                                    }  elseif($rowAccount->account_no == $rowDP->a_pph) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->pph_amount})";	
                                        }else{
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->pph_amount})";	
                                        }
                                    } elseif($rowAccount->account_no == $rowDP->a_ppn) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->ppn_amount})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->ppn_amount})";	
                                        }
                                    }elseif($rowAccount->account_no == 210104) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->amount})";	
                                        }else{
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->amount})";	
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                            }		
                        }
                    }

                    //----------------------- NILAI PENGAJUAN YG DIPAKE ---------------------------
                    $sqlAccount2 = "SELECT inv.*, pb.`transaction_id`, t.`unloading_price`, 
                                            t.`quantity`, t.`uc_tax_id`, al.`account_no` AS aLabor, t.send_weight, 
                                            pb.`pph_id` , pb.`pph_id` AS lppn, appn.`account_no` AS appn, pb.`ppn_value`, 
                                            pb.pph_value, pb.total_amount,
                                            pb.dpp as amount
                                    FROM invoice_notim inv
                                    LEFT JOIN payment_ob pb ON {$wherePropertyA} = inv.inv_notim_id
                                    LEFT JOIN `transaction` t ON t.`transaction_id` = pb.`transaction_id`
                                    LEFT JOIN unloading_cost uc ON uc.`unloading_cost_id` = t.`unloading_cost_id`
                                    LEFT JOIN labor l ON l.`labor_id` = t.`labor_id`
                                    LEFT JOIN tax ltx ON ltx.`tax_id` = t.`uc_tax_id`
                                    LEFT JOIN account al ON al.`account_id` = ltx.`account_id`
                                    LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
                                    LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
                                    WHERE inv.`inv_notim_id` = {$invoiceNotimId}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);

                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {	
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 3 AND account_no in (123457, '{$rowAccount2->aLabor}', '{$rowAccount2->appn}', 210104)";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            //$taxValue = 0;
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                if($rowAccount2->lppn != '' && $rowAccount2->lppn != 0){
                                    $taxPPN = $rowAccount2->ppn_value;
                                }else{
                                    $taxPPN = 0;
                                }

                                if($rowAccount2->pph_id != '' || $rowAccount2->pph_id != 0){
                                    $taxValue = $rowAccount2->pph_value;
                                }else{
                                    $taxValue = 0;
                                }

                                if($rowAccount2->unloading_price != '' && $rowAccount2->unloading_price > 0) {
                                    $totalDpp = $rowAccount2->amount;
                                    $totalUnloadingPrice =  $rowAccount2->amount;
                                    $creditUnloadingPrice = $totalUnloadingPrice + ($totalUnloadingPrice * ($taxPPN/100)) - ($totalUnloadingPrice * ($taxValue/100));
                                }else {
                                    $totalUnloadingPrice = 0;
                                    $creditUnloadingPrice = 0;
                                }
                                
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if($rowAccount->account_no == 123457) { //unbilled goods
                                        if($invoiceStatus == 2){
                                            $totalUnloadingPrice1 = $totalUnloadingPrice;
                                             $insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, 'Return Journal', {$totalUnloadingPrice1})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalUnloadingPrice})";
                                        }
                                    } elseif($rowAccount->account_no == $rowAccount2->aLabor) {
                                        $amount = $totalUnloadingPrice * ($taxValue / 100);
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amount})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                        }
                                    } elseif($rowAccount->account_no == $rowAccount2->appn) {
                                        $amountPPN = $totalUnloadingPrice * ($taxPPN / 100);
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amountPPN})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
                                        }
                                    }elseif($rowAccount->account_no == 210104) {
                                        if($invoiceStatus == 2){
                                            $creditUnloadingPrice1 = $creditUnloadingPrice;
                                            $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$creditUnloadingPrice1})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$creditUnloadingPrice})";
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                            }         
                        }
                    } else {
                        $boolContinue = false;
                    }
                } else if (($row->payment_method == 1 || $row->payment_method == 3) && $row->amount2 > 0){ //PAYMENT	
                    
                    if($row->payment_method == 3){
                        //----------------------------- SETTLE TAPI ADA PAYMENT -------------------------
                        $sqlDP = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph, appn.`account_no` AS a_ppn, ppd.`dpp_dp_settle` as dpp, 
                                        ppd.`dp_pph_value` as pph_amount, ppd.`dp_ppn_value` as ppn_amount, (ppd.settle_amount) AS amount
                            FROM invoice_notim inv
                            INNER JOIN pengajuan_payment_dp ppd ON ppd.inv_notim_id = inv.inv_notim_id
                            LEFT JOIN labor l ON l.`labor_id` = inv.`laborId`
                            LEFT JOIN tax lpph ON lpph.`tax_id` = l.`pph_tax_id`
                            LEFT JOIN account apph ON apph.`account_id` = lpph.`account_id`
                            LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
                            LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
                            WHERE inv.`inv_notim_id`= {$invoiceNotimId}";
                        $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);

                        if($resultDP !== false && $resultDP->num_rows > 0) {
                            while($rowDP = $resultDP->fetch_object()) {					
                                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (3, 7) AND account_no in (130004, 210104, '{$rowDP->a_pph}', '{$rowDP->a_ppn}')";
                                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                    while($rowAccount = $resultAccount->fetch_object()) {
                                        if($insertValues != "") {
                                            $insertValues .= ", ";
                                        }
                                        if($rowAccount->account_no == 130004) {
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->dpp})";	
                                            }else{
                                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->dpp})";	
                                            }
                                        }  elseif($rowAccount->account_no == $rowDP->a_pph) {
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->pph_amount})";	
                                            }else{
                                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->pph_amount})";	
                                            }
                                        } elseif($rowAccount->account_no == $rowDP->a_ppn) {
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->ppn_amount})";	
                                            }else{
                                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->ppn_amount})";	
                                            }
                                        }elseif($rowAccount->account_no == 210104) {
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->amount})";	
                                            }else{
                                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->amount})";	
                                            }
                                        }
                                    }
                                } else {
                                    $boolContinue = false;
                                }		
                            }
                        }
                    }
                    
                    $sqlAccount2 = "SELECT inv.*, pb.`transaction_id`, t.`unloading_price`, 
                                    t.`quantity`, t.`uc_tax_id`, al.`account_no` AS aLabor, t.send_weight, 
                                    pb.`pph_id` , pb.`pph_id` AS lppn, appn.`account_no` AS appn, pb.`ppn_value`, 
                                    pb.pph_value, pb.total_amount,
                                    pb.dpp as amount
                                    FROM invoice_notim inv
                                    LEFT JOIN payment_ob pb ON  {$wherePropertyA} = inv.inv_notim_id
                                    LEFT JOIN `transaction` t ON t.`transaction_id` = pb.`transaction_id`
                                    LEFT JOIN unloading_cost uc ON uc.`unloading_cost_id` = t.`unloading_cost_id`
                                    LEFT JOIN labor l ON l.`labor_id` = t.`labor_id`
                                    LEFT JOIN tax ltx ON ltx.`tax_id` = t.`uc_tax_id`
                                    LEFT JOIN account al ON al.`account_id` = ltx.`account_id`
                                    LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
                                    LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
                                    WHERE inv.`inv_notim_id` = {$invoiceNotimId}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                    // echo " --- LABOR --- " . $sqlAccount2;
                        
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {	
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 3 AND account_no in (123457, '{$rowAccount2->aLabor}', '{$rowAccount2->appn}', 210104)";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            //$taxValue = 0;
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                if($rowAccount2->lppn != '' && $rowAccount2->lppn != 0){
                                    $taxPPN = $rowAccount2->ppn_value;
                                }else{
                                    $taxPPN = 0;
                                }

                                if($rowAccount2->pph_id != '' || $rowAccount2->pph_id != 0){
                                    $taxValue = $rowAccount2->pph_value;
                                }else{
                                    $taxValue = 0;
                                }

                                if($rowAccount2->unloading_price != '' && $rowAccount2->unloading_price > 0) {
                                    $totalDpp = $rowAccount2->amount;
                                    $totalUnloadingPrice =  $rowAccount2->amount;
                                    $creditUnloadingPrice = $totalUnloadingPrice + ($totalUnloadingPrice * ($taxPPN/100)) - ($totalUnloadingPrice * ($taxValue/100));
                                }else {
                                    $totalUnloadingPrice = 0;
                                    $creditUnloadingPrice = 0;
                                }
                                
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if($rowAccount->account_no == 123457) { //unbilled goods
                                        if($invoiceStatus == 2){
                                            $totalUnloadingPrice1 = $totalUnloadingPrice;
                                        $insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, 'Return Journal', {$totalUnloadingPrice1})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalUnloadingPrice})";
                                        }
                                    } elseif($rowAccount->account_no == $rowAccount2->aLabor) {
                                        $amount = $totalUnloadingPrice * ($taxValue / 100);
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amount})";
                                        }else{
                                             $insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                        }
                                    } elseif($rowAccount->account_no == $rowAccount2->appn) {
                                        $amountPPN = $totalUnloadingPrice * ($taxPPN / 100);
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amountPPN})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
                                        }
                                    }elseif($rowAccount->account_no == 210104) {
                                        if($invoiceStatus == 2){
                                            $creditUnloadingPrice1 = $creditUnloadingPrice;
                                            $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$creditUnloadingPrice1})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$creditUnloadingPrice})";
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                                // echo 'e';
                            }         
                        }
                    } else {
                        $boolContinue = false;
                    }
                    
                }else if ($row->payment_method == 2){ //Down Payment
                    $sql = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph, appn.`account_no` AS a_ppn, pp.`total_dpp` as dpp, 
                                pp.`total_pph_amount` as pph_amount, pp.`total_ppn_amount` as ppn_amount, (pp.grand_total) AS amount
                            FROM invoice_notim inv
                            LEFT JOIN labor l ON l.`labor_id` = inv.`laborId`
                            LEFT JOIN tax lpph ON lpph.`tax_id` = l.`pph_tax_id`
                            LEFT JOIN account apph ON apph.`account_id` = lpph.`account_id`
                            LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
                            LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
                            LEFT JOIN pengajuan_payment pp ON pp.`idPP` = inv.`idPP`
                            WHERE inv.`inv_notim_id`= {$invoiceNotimId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    if($result !== false && $result->num_rows == 1) {
                    $row = $result->fetch_object();
                    //echo 'ZZ';
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (3, 7) AND account_no in (130004 , '{$row->a_pph}', '{$row->a_ppn}', 210104)";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if($rowAccount->account_no == 130004) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->dpp})";	
                                        }else{
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->dpp})";	
                                        }
                                    } elseif($rowAccount->account_no == $row->a_pph) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(1, '{$source}',  'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->pph_amount})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}',  'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_amount})";	
                                        }
                                    } elseif($rowAccount->account_no == $row->a_ppn) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(2, '{$source}',  'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->ppn_amount})";	
                                        }else{
                                            $insertValues .= "(1, '{$source}',  'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_amount})";	
                                        }
                                    }elseif($rowAccount->account_no == 210104) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(1, '{$source}',  'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->amount})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}',  'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount})";	
                                        }
                                    } 
                                }
                            } else {
                                $boolContinue = false;
                            }
                        }
                    }
            
            }else if($row->vendorHandlingId != 'NULL' && $row->vendorHandlingId != '' && $row->vendorHandlingId != 0){ //HANDLING
                if($invoiceStatus == 2){
                    $wherePropertyA = "ph.old_inv_id";
                }else{
                    $wherePropertyA = "ph.inv_notim_id";
                }
                if ($row->payment_method == 3 && $row->amount2 == 0){ //settlement1
                    $sqlDP = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph,appn.`account_no` AS a_ppn,  ppd.`dpp_dp_settle` as dpp, 
                            ppd.`dp_pph_value` as pph_amount,  ppd.`dp_ppn_value` as ppn_amount,  (ppd.settle_amount) AS amount
                                FROM invoice_notim inv
                                INNER JOIN pengajuan_payment_dp ppd ON ppd.inv_notim_id = inv.`inv_notim_id`
                                LEFT JOIN vendor_handling l ON l.`vendor_handling_id` = inv.`vendorHandlingId`
                                LEFT JOIN tax lpph ON lpph.`tax_id` = l.`pph_tax_id`
                                LEFT JOIN account apph ON apph.`account_id` = lpph.`account_id`
                                LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
                                LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
                                WHERE inv.`inv_notim_id`= {$invoiceNotimId}";
                    $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                    // echo "DO " . $sqlDP;
                        
                    if($resultDP !== false && $resultDP->num_rows > 0) {
                        while($rowDP = $resultDP->fetch_object()) {				
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (9, 7) AND account_no in (210106, 130006, '{$rowDP->a_pph}', '{$rowDP->a_ppn}')";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }
        
                                    if($rowAccount->account_no == 130006) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->dpp})";	
                                        }else{
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->dpp})";	
                                        }   
                                    }  elseif($rowAccount->account_no == $rowDP->a_pph) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(2, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->pph_amount})";	
                                        }else{
                                            $insertValues .= "(1, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->pph_amount})";	
                                        }
                                    } elseif($rowAccount->account_no == $rowDP->a_ppn) {
                                        if($invoiceStatus == 2){
                                            $insertValues .= "(1, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->ppn_amount})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->ppn_amount})";	
                                        }
                                    }elseif($rowAccount->account_no == 210106) {   
                                        if($invoiceStatus == 2){     
                                            $insertValues .= "(1, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->amount})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->amount})";	
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                            }	
                                
                                
                        }
                    }

                    $sqlAccount2 = "SELECT inv.*, ph.`transaction_id`, t.`handling_price`, t.`handling_quantity`, ph.`pph_id`, 
                                            vh.`vendor_handling_rule`, avh.`account_no` AS aVendorHandling, t.send_weight, 
                                            ph.`ppn_id` AS vhppn , appn.`account_no` AS appn, ph.`ppn_value`, ph.pph_value, ph.total_amount as amount,
                                            ph.dpp
                                    FROM invoice_notim inv
                                    LEFT JOIN payment_handling ph ON{$wherePropertyA} = inv.inv_notim_id
                                    LEFT JOIN `transaction` t ON t.`transaction_id` = ph.`transaction_id`
                                    LEFT JOIN vendor_handling vh ON vh.`vendor_handling_id` = inv.`vendorHandlingId`
                                    LEFT JOIN tax vhtx ON vhtx.`tax_id` = vh.`pph_tax_id`
                                    LEFT JOIN account avh ON avh.`account_id` = vhtx.`account_id`
                                    LEFT JOIN tax vhppn ON vhppn.`tax_id` = vh.`ppn_tax_id`
                                    LEFT JOIN account appn ON appn.`account_id` = vhppn.`account_id`
                                    WHERE inv.`inv_notim_id` = {$invoiceNotimId}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 9 AND account_no in (123458, '{$rowAccount2->aVendorHandling}', '{$rowAccount2->appn}', 210106)";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                if($rowAccount2->vhppn != '' && $rowAccount2->vhppn != 0){
                                    $taxPPN = $rowAccount2->ppn_value;
                                }else{
                                    $taxPPN = 0;
                                }

                                if($rowAccount2->pph_id != '' || $rowAccount2->pph_id != 0){
                                    $taxValue = $rowAccount2->pph_value;
                                }else{
                                    $taxValue = 0;
                                }

                                if($rowAccount2->handling_price != '' && $rowAccount2->handling_price > 0) {
                                    $totalDpp = $rowAccount2->dpp;
                                    $totalHandlingPrice =  $rowAccount2->amount;
                                    $creditHandlingPrice = $totalHandlingPrice + ($totalHandlingPrice * ($taxPPN/100)) - ($totalHandlingPrice * ($taxValue/100)) ;
                                }else {
                                    $totalHandlingPrice = 0;
                                    $creditHandlingPrice = 0;
                                    $taxValue = 0;
                                }
                                
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if($rowAccount->account_no == 123458) {
                                        if($invoiceStatus == 2){     
                                            $totalHandlingPrice1 = $totalHandlingPrice;
                                            $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, 'Return Journal', {$totalHandlingPrice1})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalHandlingPrice})";
                                        }
                                    } elseif($rowAccount->account_no == $rowAccount2->aVendorHandling) {
                                        $amount = $totalHandlingPrice * ($taxValue / 100);
                                        if($invoiceStatus == 2){     
                                            $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amount})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                        }
                                    } elseif($rowAccount->account_no == $rowAccount2->appn) {
                                        $amountPPN = $totalHandlingPrice * ($taxPPN / 100);
                                        if($invoiceStatus == 2){     
                                            $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amountPPN})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
                                        }
                                    }elseif($rowAccount->account_no == 210106) {
                                        if($invoiceStatus == 2){     
                                            $creditHandlingPrice1 = $creditHandlingPrice;
                                            $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$creditHandlingPrice1})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$creditHandlingPrice})";
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                            }	    
                        }
                    } else {
                        $boolContinue = false;
                    }

                }else if (($row->payment_method == 1 || $row->payment_method == 3) && $row->amount2 > 0){			
                    if($row->payment_method == 3){
                        $sqlDP = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph,appn.`account_no` AS a_ppn,ppd.`dpp_dp_settle` as dpp, 
                                    ppd.`dp_pph_value` as pph_amount,ppd.`dp_ppn_value` as ppn_amount,  (ppd.settle_amount) AS amount
                                    FROM invoice_notim inv
                                    INNER JOIN pengajuan_payment_dp ppd ON ppd.inv_notim_id = inv.inv_notim_id
                                    LEFT JOIN vendor_handling l ON l.`vendor_handling_id` = inv.`vendorHandlingId`
                                    LEFT JOIN tax lpph ON lpph.`tax_id` = l.`pph_tax_id`
                                    LEFT JOIN account apph ON apph.`account_id` = lpph.`account_id`
                                    LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
                                    LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
                                    WHERE inv.`inv_notim_id`= {$invoiceNotimId}";
                        $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);


                        if($resultDP !== false && $resultDP->num_rows > 0) {
                            while($rowDP = $resultDP->fetch_object()) {				
                                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (9, 7) AND account_no in (210106, '{$rowDP->a_pph}', '{$rowDP->a_ppn}', 130006)";
                                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                                
                                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                    while($rowAccount = $resultAccount->fetch_object()) {
                                        if($insertValues != "") {
                                            $insertValues .= ", ";
                                        }
            
                                        if($rowAccount->account_no == 130006) {
                                            if($invoiceStatus == 2){     
                                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->dpp})";	
                                            } else{
                                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->dpp})";	
                                            } 
                                        }  elseif($rowAccount->account_no == $rowDP->a_pph) {
                                            if($invoiceStatus == 2){   
                                                $insertValues .= "(2, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->pph_amount})";	
                                            }else{
                                                $insertValues .= "(1, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->pph_amount})";	
                                            }
                                        } elseif($rowAccount->account_no == $rowDP->a_ppn) {
                                            if($invoiceStatus == 2){   
                                                $insertValues .= "(1, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->ppn_amount})";	
                                            }else{
                                                $insertValues .= "(2, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->ppn_amount})";	
                                            }
                                        }elseif($rowAccount->account_no == 210106) {  
                                            if($invoiceStatus == 2){        
                                                $insertValues .= "(1, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->amount})";	
                                            }else{
                                                $insertValues .= "(2, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->amount})";	
                                            }
                                        }
                                    }
                                } else {
                                    $boolContinue = false;
                                }	
                                    
                                    
                            }
                        }
                    }

                    $sqlAccount2 = "SELECT inv.*, ph.`transaction_id`, t.`handling_price`, t.`handling_quantity`, ph.`pph_id`, 
                                            vh.`vendor_handling_rule`, avh.`account_no` AS aVendorHandling, t.send_weight, 
                                            ph.`ppn_id` AS vhppn , appn.`account_no` AS appn, ph.`ppn_value`, ph.pph_value, ph.total_amount as amount,
                                            ph.dpp
                                    FROM invoice_notim inv
                                    LEFT JOIN payment_handling ph ON {$wherePropertyA} = inv.inv_notim_id
                                    LEFT JOIN `transaction` t ON t.`transaction_id` = ph.`transaction_id`
                                    LEFT JOIN vendor_handling vh ON vh.`vendor_handling_id` = inv.`vendorHandlingId`
                                    LEFT JOIN tax vhtx ON vhtx.`tax_id` = vh.`pph_tax_id`
                                    LEFT JOIN account avh ON avh.`account_id` = vhtx.`account_id`
                                    LEFT JOIN tax vhppn ON vhppn.`tax_id` = vh.`ppn_tax_id`
                                    LEFT JOIN account appn ON appn.`account_id` = vhppn.`account_id`
                                    WHERE inv.`inv_notim_id` = {$invoiceNotimId}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                        
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 9 AND account_no in (123458, '{$rowAccount2->aVendorHandling}', '{$rowAccount2->appn}', 210106)";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                if($rowAccount2->vhppn != '' && $rowAccount2->vhppn != 0){
                                    $taxPPN = $rowAccount2->ppn_value;
                                }else{
                                    $taxPPN = 0;
                                }

                                if($rowAccount2->pph_id != '' || $rowAccount2->pph_id != 0){
                                    $taxValue = $rowAccount2->pph_value;
                                }else{
                                    $taxValue = 0;
                                }

                                if($rowAccount2->handling_price != '' && $rowAccount2->handling_price > 0) {
                                    $totalDpp = $rowAccount2->dpp;
                                    $totalHandlingPrice =  $rowAccount2->amount;
                                    $creditHandlingPrice = $totalHandlingPrice + ($totalHandlingPrice * ($taxPPN/100)) - ($totalHandlingPrice * ($taxValue/100)) ;
                                }else {
                                    $totalHandlingPrice = 0;
                                    $creditHandlingPrice = 0;
                                    $taxValue = 0;
                                }
                                
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if($rowAccount->account_no == 123458) {
                                        if($invoiceStatus == 2){        
                                            $totalHandlingPrice1 = $totalHandlingPrice;
                                            $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, 'Return Journal', {$totalHandlingPrice1})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalHandlingPrice})";
                                        }
                                    } elseif($rowAccount->account_no == $rowAccount2->aVendorHandling) {
                                        $amount = $totalHandlingPrice * ($taxValue / 100);
                                        if($invoiceStatus == 2){        
                                            $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amount})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                        }
                                    } elseif($rowAccount->account_no == $rowAccount2->appn) {
                                        $amountPPN = $totalHandlingPrice * ($taxPPN / 100);
                                        if($invoiceStatus == 2){        
                                            $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amountPPN})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
                                        }
                                    }elseif($rowAccount->account_no == 210106) {
                                        if($invoiceStatus == 2){        
                                            $creditHandlingPrice1 = $creditHandlingPrice;
                                            $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$creditHandlingPrice1})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$creditHandlingPrice})";
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                            }	    
                        }
                    } else {
                        $boolContinue = false;
                    }
                }else if ($row->payment_method == 2){
                    $sql = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph,appn.`account_no` AS a_ppn,pp.`total_dpp` as dpp, 
                            pp.`total_pph_amount` as pph_amount, pp.`total_ppn_amount` as ppn_amount, (pp.grand_total) AS amount
                            FROM invoice_notim inv
                            LEFT JOIN vendor_handling l ON l.`vendor_handling_id` = inv.`vendorHandlingId`
                            LEFT JOIN tax lpph ON lpph.`tax_id` = l.`pph_tax_id`
                            LEFT JOIN account apph ON apph.`account_id` = lpph.`account_id`
                            LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
                            LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
                            LEFT JOIN pengajuan_payment pp ON pp.`idPP` = inv.`idPP`
                            WHERE inv.`inv_notim_id`= {$invoiceNotimId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($result !== false && $result->num_rows == 1) {
                        $row = $result->fetch_object();
                        //echo 'ZZ';
                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (9, 7) AND account_no in (130006, '{$row->a_pph}', '{$row->a_ppn}', 210106)";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                                
                        if($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while($rowAccount = $resultAccount->fetch_object()) {
                                if($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if($rowAccount->account_no == 130006) {
                                    if($invoiceStatus == 2){        
                                        $insertValues .= "(2, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->dpp})";	
                                    }else{
                                        $insertValues .= "(1, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->dpp})";	
                                    }  
                                }  elseif($rowAccount->account_no == $row->a_pph) {
                                    if($invoiceStatus == 2){
                                        $insertValues .= "(1, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->pph_amount})";	
                                    }else{
                                        $insertValues .= "(2, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_amount})";	
                                    }
                                } elseif($rowAccount->account_no == $row->a_ppn) {
                                    if($invoiceStatus == 2){
                                        $insertValues .= "(2, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->ppn_amount})";	
                                    }else{
                                        $insertValues .= "(1, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_amount})";	
                                    }
                                }elseif($rowAccount->account_no == 210106) {    
                                    if($invoiceStatus == 2){    
                                        $insertValues .= "(1, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->amount})";	
                                    }else{
                                        $insertValues .= "(2, '{$source}',  'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount})";	
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                    }
                }
            }else if($row->vendor_id != 'NULL' && $row->vendor_id != '' && $row->vendor_id != 0){ //CURAH
                if($invoiceStatus == 2){
                    $wherePropertyA = "pc.old_inv_id";
                }else{
                    $wherePropertyA = "pc.inv_notim_id";
                }
                if ($row->payment_method == 3 && $row->amount2 == 0){ //SETLLE
                    $sqlDP = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph, appn.`account_no` AS a_ppn, ppd.`dpp_dp_settle` as dpp, ppd.`dp_pph_value` as pph_amount, 
                                    ppd.`dp_ppn_value` as ppn_amount, (ppd.settle_amount) AS amount
                                FROM invoice_notim inv
                                INNER JOIN pengajuan_payment_dp ppd ON ppd.inv_notim_id = inv.inv_notim_id
                                LEFT JOIN vendor v ON v.`vendor_id` = inv.`vendor_id`
                                LEFT JOIN tax vpph ON vpph.`tax_id` = v.`pph_tax_id`
                                LEFT JOIN account apph ON apph.`account_id` = vpph.`account_id`
                                LEFT JOIN tax vppn ON vppn.`tax_id` = v.`ppn_tax_id`
                                LEFT JOIN account appn ON appn.`account_id` = vppn.`account_id`
                                WHERE inv.`inv_notim_id`= {$invoiceNotimId}";
                    $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                            
                    if($resultDP !== false && $resultDP->num_rows > 0) {
                        while($rowDP = $resultDP->fetch_object()) {
                                                
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (130002 , 150410, 210101)"; // {$rowDP->a_ppn} => 150410
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }
        
                                    if($rowAccount->account_no == 130002) {
                                        if($invoiceStatus == 2){    
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->dpp})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->dpp})";	
                                        }
                                    }  elseif($rowAccount->account_no == 150410) {
                                        if($invoiceStatus == 2){    
                                            $insertValues .= "(1, '{$source}',  'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->ppn_amount})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}',  'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->ppn_amount})";	
                                        }
                                    } elseif($rowAccount->account_no == 210101) {
                                        if($invoiceStatus == 2){    
                                            $insertValues .= "(2, '{$source}',  'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->amount})";	
                                        }else{
                                            $insertValues .= "(1, '{$source}',  'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->amount})";	
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                            }
                        }
                    }


                    $sqlAccount2 = "SELECT inv.*, pc.`transaction_id`, t.`unit_price`, t.`quantity`, pc.`pph_id`, av.`account_no` AS aVendor, t.send_weight, 
                                    pc.`ppn_id` AS vppn , appn.`account_no` AS appn, pc.`ppn_value`, pc.pph_value, pc.total_amount as amount,  pc.dpp
                                    FROM invoice_notim inv
                                    LEFT JOIN payment_curah pc ON {$wherePropertyA} = inv.inv_notim_id
                                    LEFT JOIN `transaction` t ON t.`transaction_id` = pc.`transaction_id`
                                    LEFT JOIN vendor v ON v.`vendor_id` = inv.`vendor_id`
                                    LEFT JOIN tax vtx ON vtx.`tax_id` = v.`pph_tax_id`
                                    LEFT JOIN account av ON av.`account_id` = vtx.`account_id`
                                    LEFT JOIN tax vppn ON vppn.`tax_id` = v.`ppn_tax_id`
                                    LEFT JOIN account appn ON appn.`account_id` = vppn.`account_id`
                                    WHERE inv.`inv_notim_id` = {$invoiceNotimId}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type in (1, 7) AND account_no in (123459, 150410, 210101)"; // {$rowDP->a_ppn} => 150410 
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                                //$taxValue = 0;
                                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                    if($rowAccount2->vppn != '' && $rowAccount2->vppn != 0){
                                        $taxPPN = $rowAccount2->ppn_value;
                                    }else{
                                        $taxPPN = 0;
                                    }

                                    if($rowAccount2->pph_id != '' || $rowAccount2->pph_id != 0){
                                        $taxValue = $rowAccount2->pph_value;
                                    }else{
                                        $taxValue = 0;
                                    }

                                    if($rowAccount2->amount != '' && $rowAccount2->amount > 0) {
                                        echo " CC ";
                                        $totalDpp = $rowAccount2->dpp;
                                        $totalCurahPrice = $rowAccount2->amount;
                                        $creditCurahPrice = $totalCurahPrice + (($totalCurahPrice * ($taxPPN / 100)) - ($totalCurahPrice * ($taxValue/100)));
                                    }else {
                                        echo " BB AA ";
                                        $totalCurahPrice = 0;
                                        $creditCurahPrice = 0;
                                    }
                                    
                                    while($rowAccount = $resultAccount->fetch_object()) {
                                        if($insertValues != "") {
                                            $insertValues .= ", ";
                                        }

                                        if($rowAccount->account_no == 123459) {
                                            if($invoiceStatus == 2){
                                                $totalCurahPrice1 = $totalCurahPrice;
                                                $insertValues .= "(2, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, 'Return Journal', {$totalCurahPrice1})";
                                            }else{
                                                 $insertValues .= "(1, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalCurahPrice})";
                                            }
                                        }elseif($rowAccount->account_no ==150410) { // {$rowDP->a_ppn} => 150410 
                                            $amountPPN = $totalCurahPrice * ($taxPPN / 100);
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(2, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amountPPN})";
                                            }else{
                                                $insertValues .= "(1, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
                                            }
                                        } elseif($rowAccount->account_no == 210101) {
                                            if($invoiceStatus == 2){
                                                $creditCurahPrice1 = $creditCurahPrice;
                                                $insertValues .= "(1, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$creditCurahPrice1})";
                                            }else{
                                                $insertValues .= "(2, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$creditCurahPrice})";
                                            }
                                        }
                                    }
                                } else {
                                    $boolContinue = false;
                                    echo 'e';
                                }             
                        }
                    } else {
                        $boolContinue = false;
                    }
                }else if (($row->payment_method == 1 || $row->payment_method == 3) &&  $row->amount2 > 0){
                    if($row->payment_method == 3){
                        $sqlDP = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph,appn.`account_no` AS a_ppn, ppd.`dpp_dp_settle` as dpp, ppd.`dp_pph_value` as pph_amount, 
                                        ppd.`dp_ppn_value` as ppn_amount, (ppd.settle_amount) AS amount
                                FROM invoice_notim inv
                                INNER JOIN pengajuan_payment_dp ppd ON ppd.inv_notim_id = inv.inv_notim_id
                                LEFT JOIN vendor v ON v.`vendor_id` = inv.`vendor_id`
                                LEFT JOIN tax vpph ON vpph.`tax_id` = v.`pph_tax_id`
                                LEFT JOIN account apph ON apph.`account_id` = vpph.`account_id`
                                LEFT JOIN tax vppn ON vppn.`tax_id` = v.`ppn_tax_id`
                                LEFT JOIN account appn ON appn.`account_id` = vppn.`account_id`
                                WHERE inv.`inv_notim_id`= {$invoiceNotimId}";
                        $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                        if($resultDP !== false && $resultDP->num_rows > 0) {
                            while($rowDP = $resultDP->fetch_object()) {
                                                    
                                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (130002 , 150410, 210101)"; // {$rowDP->a_ppn} => 150410 
                                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                    while($rowAccount = $resultAccount->fetch_object()) {
                                        if($insertValues != "") {
                                            $insertValues .= ", ";
                                        }
            
                                        if($rowAccount->account_no == 130002) {
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->dpp})";	
                                            }else{
                                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->dpp})";	
                                            }
                                        } elseif($rowAccount->account_no == 150410) { //{$rowDP->a_ppn} => 150410
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(1, '{$source}',  'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->ppn_amount})";	
                                            }else{
                                                $insertValues .= "(2, '{$source}',  'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->ppn_amount})";	
                                            }
                                        } elseif($rowAccount->account_no == 210101) {
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(2, '{$source}',  'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$rowDP->amount})";	
                                            }else{
                                                $insertValues .= "(1, '{$source}',  'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->amount})";	
                                            }
                                        }
                                    }
                                } else {
                                    $boolContinue = false;
                                }
                            }
                        }
                    }

                    $sqlAccount2 = "SELECT inv.*, pc.`transaction_id`, t.`unit_price`, t.`quantity`, pc.`pph_id`, av.`account_no` AS aVendor, t.send_weight, 
                                    pc.`ppn_id` AS vppn , appn.`account_no` AS appn, pc.`ppn_value`, pc.pph_value, pc.total_amount as amount,  pc.dpp
                                    FROM invoice_notim inv
                                    LEFT JOIN payment_curah pc ON {$wherePropertyA} = inv.inv_notim_id
                                    LEFT JOIN `transaction` t ON t.`transaction_id` = pc.`transaction_id`
                                    LEFT JOIN vendor v ON v.`vendor_id` = inv.`vendor_id`
                                    LEFT JOIN tax vtx ON vtx.`tax_id` = v.`pph_tax_id`
                                    LEFT JOIN account av ON av.`account_id` = vtx.`account_id`
                                    LEFT JOIN tax vppn ON vppn.`tax_id` = v.`ppn_tax_id`
                                    LEFT JOIN account appn ON appn.`account_id` = vppn.`account_id`
                                    WHERE inv.`inv_notim_id` = {$invoiceNotimId}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);


                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type in (1,7) AND account_no in (123459, 150410, 210101)"; // {$rowDP->a_ppn} => 150410 
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            // echo " -- CURAH -- " . $sqlAccount;

                            //$taxValue = 0;
                                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                    if($rowAccount2->vppn != '' && $rowAccount2->vppn != 0){
                                        $taxPPN = $rowAccount2->ppn_value;
                                    }else{
                                        $taxPPN = 0;
                                    }

                                    if($rowAccount2->pph_id != '' || $rowAccount2->pph_id != 0){
                                        $taxValue = $rowAccount2->pph_value;
                                    }else{
                                        $taxValue = 0;
                                    }

                                    if($rowAccount2->amount != '' && $rowAccount2->amount > 0) {
                                        echo " CC ";
                                        $totalDpp = $rowAccount2->dpp;
                                        $totalCurahPrice = $rowAccount2->amount;
                                        $creditCurahPrice = $totalCurahPrice + (($totalCurahPrice * ($taxPPN / 100)) - ($totalCurahPrice * ($taxValue/100)));
                                    }else {
                                        echo " BB AA ";
                                        $totalCurahPrice = 0;
                                        $creditCurahPrice = 0;
                                    }
                                    
                                    while($rowAccount = $resultAccount->fetch_object()) {
                                        if($insertValues != "") {
                                            $insertValues .= ", ";
                                        }

                                        if($rowAccount->account_no == 123459) {
                                            if($invoiceStatus == 2){
                                                $totalCurahPrice1 = $totalCurahPrice;
                                                $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, 'Return Journal', {$totalCurahPrice1})";
                                            }else{
                                                 $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalCurahPrice})";
                                            }
                                        }elseif($rowAccount->account_no == 150410) {  //{$rowDP->a_ppn} => 150410 
                                            $amountPPN = $totalCurahPrice * ($taxPPN / 100);
                                            if($invoiceStatus == 2){
                                                $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$amountPPN})";
                                            }else{
                                                $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
                                            }
                                        } elseif($rowAccount->account_no == 210101) {
                                            if($invoiceStatus == 2){
                                                $creditCurahPrice1 = $creditCurahPrice;
                                                $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$creditCurahPrice})";
                                            }else{
                                                $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$creditCurahPrice})";
                                            }
                                        }
                                    }
                                } else {
                                    $boolContinue = false;
                                    // echo 'e';
                                }             
                        }
                    } else {
                        $boolContinue = false;
                    }
                    
            }elseif ($row->payment_method == 2){ //DOWNPAYMENT
                $sql = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph,appn.`account_no` AS a_ppn, pp.`total_dpp` as dpp, pp.`total_pph_amount` as pph_amount, 
                                pp.`total_ppn_amount` as ppn_amount,(pp.grand_total) AS amount
                        FROM invoice_notim inv
                        LEFT JOIN vendor v ON v.`vendor_id` = inv.`vendor_id`
                        LEFT JOIN tax vpph ON vpph.`tax_id` = v.`pph_tax_id`
                        LEFT JOIN account apph ON apph.`account_id` = vpph.`account_id`
                        LEFT JOIN tax vppn ON vppn.`tax_id` = v.`ppn_tax_id`
                        LEFT JOIN account appn ON appn.`account_id` = vppn.`account_id`
                        LEFT JOIN pengajuan_payment pp ON pp.idPP  = inv.idPP
                        WHERE inv.`inv_notim_id`= {$invoiceNotimId}";
                        // echo $sql;
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($result !== false && $result->num_rows == 1) {
                $row = $result->fetch_object();
                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (130002 ,  150410, 210101)"; //{$rowDP->a_ppn} => 150410 
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                        if($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while($rowAccount = $resultAccount->fetch_object()) {
                                if($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if($rowAccount->account_no == 130002) {
                                    if($invoiceStatus == 2){
                                        $insertValues .= "(2, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->dpp})";	
                                    }else{
                                        $insertValues .= "(1, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->dpp})";	
                                    }
                                } elseif($rowAccount->account_no ==150410) { //{$rowDP->a_ppn} => 150410 
                                    if($invoiceStatus == 2){
                                        $insertValues .= "(2, '{$source}',  'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->ppn_amount})";	
                                    }else{
                                        $insertValues .= "(1, '{$source}',  'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_amount})";	
                                    }
                                } elseif($rowAccount->account_no == 210101) {
                                    if($invoiceStatus == 2){
                                        $insertValues .= "(1, '{$source}',  'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'Return Journal', {$row->amount})";	
                                    }else{
                                        $insertValues .= "(2, '{$source}',  'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount})";	
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                    }
                }
            
            }
	    }	
}
/*elseif($invoiceId != 'NULL' && $source == 'RETURN INVOICE NOTIM' ) {
        //echo 'YZZZ';
        $sql = "DELETE FROM general_ledger WHERE invoice_id = {$invoiceId} AND general_ledger_module = 'RETURN INVOICE NOTIM'";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
        
        $sql = "SELECT pp.payment_method, pp.grand_total AS amount, pp.total_amount AS dpp, inv.inv_notim_id,
                        inv.freightId FROM invoice_notim inv
                     LEFT JOIN pengajuan_payment pp ON pp.`idPP` = inv.`idPP`
                WHERE inv.`inv_notim_id` = {$invoiceId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        //  echo $sql;
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
			

		if($row->freightId != 'NULL' && $row->freightId != '' && $row->freightId != 0){
            // echo 'XY';
            if (($row->payment_method == 1 || $row->payment_method == 3) && $row->amount < 0){ //settlement
                // echo 'XY';
                $sqlDP = "SELECT inv.*, (pp.original_amount - pp.amount) AS downPayment, f.`pph`, apph.`account_no` AS apph, f.`ppn`, appn.`account_no` AS appn
                            FROM invoice_notim inv
                            LEFT JOIN pengajuan_payment pp ON inv.`idPP` = pp.`idPP`
                            LEFT JOIN freight f ON f.`freight_id` = inv.`freightId`
                            LEFT JOIN tax fpph ON fpph.`tax_id` = f.`pph_tax_id`
                            LEFT JOIN account apph ON apph.`account_id` = fpph.`account_id`
                            LEFT JOIN tax fppn ON fppn.`tax_id` = f.`ppn_tax_id`
                            LEFT JOIN account appn ON appn.`account_id` = fppn.`account_id`
                            WHERE inv.`inv_notim_id` = {$invoiceId}";
                $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                    
                    if($resultDP !== false && $resultDP->num_rows > 0) {
                        while($rowDP = $resultDP->fetch_object()) {
                                            
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (210103, 130003, '{$rowDP->apph}', '{$rowDP->appn}')";
                                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                                
                                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                    while($rowAccount = $resultAccount->fetch_object()) {
                                        if($insertValues != "") {
                                            $insertValues .= ", ";
                                        }

                                        if($rowAccount->account_no == 130003) {
                                            
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->downPayment})";	
                                            
                                        } elseif($rowAccount->account_no == 210103) {
                                            $amount = $rowDP->downPayment + ($rowDP->downPayment * ($rowDP->ppn / 100)) - ($rowDP->downPayment * ($rowDP->pph / 100));
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";	
                                            
                                        } elseif($rowAccount->account_no == $rowDP->apph) {
                                            $pphDP = $rowDP->downPayment * ($rowDP->pph / 100);
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pphDP})";	
                                            
                                        } elseif($rowAccount->account_no == $rowDP->appn) {
                                            $ppnDP = $rowDP->downPayment * ($rowDP->ppn / 100);
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppnDP})";	
                                            
                                        }
                                    }
                                } else {
                                    $boolContinue = false;
                                }		
                            }
                        }
            }else if (($row->payment_method == 1 || $row->payment_method == 3) && $row->amount > 0){			
                $sqlAccount2 = "SELECT inv.inv_notim_id, t.`transaction_id`, t.`freight_price`, t.`freight_quantity`, pa.pph_id, 
                                    f.`freight_rule`, af.`account_no` AS aFreight, t.send_weight, 
                                    pa.`pph_id` AS fppn , appn.`account_no` AS appn, pa.`ppn_value`, pa.pph_value, pa.total_amount, pa.shrink, pa.dpp, (pa.dpp - pa.shrink) as amount
                            FROM invoice_notim inv
                            LEFT JOIN payment_oa pa ON pa.inv_notim_id = inv.inv_notim_id
                            LEFT JOIN `transaction` t ON t.`transaction_id` = pa.`transaction_id`
                            LEFT JOIN freight_cost fc ON fc.`freight_cost_id` = t.`freight_cost_id`
                            LEFT JOIN freight f ON f.`freight_id` = fc.`freight_id`
                            LEFT JOIN tax ftx ON ftx.`tax_id` = t.`fc_tax_id`
                            LEFT JOIN account af ON af.`account_id` = ftx.`account_id`
                            LEFT JOIN tax fppn ON fppn.`tax_id` = f.`ppn_tax_id`
                            LEFT JOIN account appn ON appn.`account_id` = fppn.`account_id`
                            WHERE inv.`inv_notim_id` = {$invoiceId}";
                $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                // echo $sqlAccount2;
                if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                    while($rowAccount2 = $resultAccount2->fetch_object()) {
                        //if($rowAccount2->freightId != 'NULL'){
                        $totalFreightPrice = 0; $totalDpp = 0; $totalShrink = 0; $creditFreightPrice = 0;
                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 2 AND account_no in (123456, 520100, '{$rowAccount2->aFreight}', '{$rowAccount2->appn}', 210103)";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                                //$taxValue = 0;
                        if($resultAccount !== false && $resultAccount->num_rows > 0) {
                            if($rowAccount2->fppn != '' && $rowAccount2->fppn != 0){
                                $taxPPN = $rowAccount2->ppn;
                            }else{
                                $taxPPN = 0;
                            }
                            if($rowAccount2->pph_id != '' && $rowAccount2->pph_id != 0) {
                                $taxValue = $rowAccount2->pph_value;
                            } else {
                                $taxValue = 0;
                            }
                            
                            if($rowAccount2->freight_price != '' && $rowAccount2->freight_price > 0) {
                                $totalDpp = $rowAccount2->dpp;
                                $totalShrink =  $rowAccount2->shrink;
                                $totalFreightPrice =  $rowAccount2->amount;
                                $creditFreightPrice = $totalFreightPrice + ($totalFreightPrice * ($taxPPN/100)) - ($totalFreightPrice * ($taxValue/100)) ;
                            }else {
                                $totalFreightPrice = 0;
                                $creditFreightPrice = 0;
                            }
                                    
                            while($rowAccount = $resultAccount->fetch_object()) {
                                if($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if($rowAccount->account_no == 123456) {
                                    if($rowAccount2->send_weight < 0){
                                        $totalFreightPrice1 = $totalFreightPrice * -1; //debit
                                        $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId},NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalFreightPrice1})";
                                        }else{ //credit
                                            $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalFreightPrice})";
                                        }
                                }elseif($rowAccount->account_no == 520100) {
                                    if($rowAccount2->send_weight < 0){ //2 = credit
                                        $totalShrink1 = $totalShrink * -1;
                                        $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalShrink1})";
                                    }else{ //1 = debit
                                        $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0,{$rowAccount->account_id}, NULL, {$totalShrink})";
                                    }
                                } elseif($rowAccount->account_no == $rowAccount2->aFreight) {
                                    $amount = $totalFreightPrice * ($taxValue / 100);
                                    if($rowAccount2->send_weight < 0){
                                        $amount1 = $amount * -1;
                                        $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                    }else{
                                        $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                    }
                                } elseif($rowAccount->account_no == $rowAccount2->appn) {
                                    $amountPPN = $totalFreightPrice * ($taxPPN / 100);
                                    if($rowAccount2->send_weight < 0){
                                        $amountPPN1 = $amountPPN * -1;
                                        $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN1})";
                                    }else{
                                        $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
                                    }
                                }elseif($rowAccount->account_no == 210103) {
                                    if($rowAccount2->send_weight < 0){
                                        $creditFreightPrice1 = $creditFreightPrice * -1;
                                        $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$creditFreightPrice1})";
                                    }else{
                                        $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, NULL, 0, 0, {$rowAccount->account_id}, NULL, {$creditFreightPrice})";
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                            echo 'e';
                        }
                    }
                } else {
                    $boolContinue = false;
                }	
            }elseif ($row->payment_method == 2){
                // echo 'XY11';
                $sql = "SELECT inv.inv_notim_id, apph.`account_no` AS a_pph,appn.`account_no` AS a_ppn, pp.`total_dpp` as dpp, pp.total_pph_amount as pph_amount, pp. total_ppn_amount as ppn_amount, ((pp.`total_dpp` + pp.`total_ppn_amount`) - pp.`total_pph_amount`) AS amount
                        FROM invoice_notim inv
                        LEFT JOIN freight f ON f.`freight_id` = inv.`freightId`
                        LEFT JOIN tax fpph ON fpph.`tax_id` = f.`pph_tax_id`
                        LEFT JOIN account apph ON apph.`account_id` = fpph.`account_id`
                        LEFT JOIN tax fppn ON fppn.`tax_id` = f.`ppn_tax_id`
                        LEFT JOIN account appn ON appn.`account_id` = fppn.`account_id`
                        LEFT JOIN pengajuan_payment pp ON pp.`idPP` = inv.`idPP`
                        WHERE inv.`inv_notim_id`= {$invoiceId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($result !== false && $result->num_rows == 1) {
                $row = $result->fetch_object();
                //echo 'ZZ';
                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (130003, 210103 , '{$row->a_pph}', '{$row->a_ppn}')";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                        
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130003) {
                                    
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->dpp})";	
                                    
                            } elseif($rowAccount->account_no == 210103) {
                                    
                                $insertValues .= "(1, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount})";	
                                    
                            } elseif($rowAccount->account_no == $row->a_pph) {
                                    
                                $insertValues .= "(1, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_amount})";	
                                    
                            } elseif($rowAccount->account_no == $row->a_ppn) {
                                    
                                $insertValues .= "(2, '{$source}',  'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_amount})";	
                                
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
            }
	    } else if($row->laborId != 'NULL' && $row->laborId != '' && $row->laborId != 0){
			
		if ($row->idPP == 0){ //settlement
			
			$sqlDP = "SELECT inv.*,l.`pph`, apph.`account_no` AS apph, l.`ppn`, appn.`account_no` AS appn,
(SELECT SUM(amount) FROM payment_ob WHERE inv_notim_id = inv.`inv_notim_id`) AS downPayment
FROM invoice_notim inv
LEFT JOIN labor l ON l.`labor_id` = inv.`laborId`
LEFT JOIN tax lpph ON lpph.`tax_id` = l.`pph_tax_id`
LEFT JOIN account apph ON apph.`account_id` = lpph.`account_id`
LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
WHERE inv.`inv_notim_id` = {$invoiceId}";
			 $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                    
                    if($resultDP !== false && $resultDP->num_rows > 0) {
                        while($rowDP = $resultDP->fetch_object()) {
										
				$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (3, 7) AND account_no in (210104, 130004, '{$rowDP->apph}', '{$rowDP->appn}')";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130004) {
								
								 $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->downPayment})";	
								
                            } elseif($rowAccount->account_no == 210104) {
								$amount = $rowDP->downPayment + ($rowDP->downPayment * ($rowDP->ppn / 100)) - ($rowDP->downPayment * ($rowDP->pph / 100));
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";	
								
                            } elseif($rowAccount->account_no == $rowDP->apph) {
								$pphDP = $rowDP->downPayment * ($rowDP->pph / 100);
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pphDP})";	
								
                            } elseif($rowAccount->account_no == $rowDP->appn) {
								$ppnDP = $rowDP->downPayment * ($rowDP->ppn / 100);
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppnDP})";	
								
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }	
							
							
						}
					}
		}	
			
		else if (($row->payment_method == 1 || $row->payment_method == 3) && $row->amount < $row->original_amount){
			echo 'XY';
			$sqlDP = "SELECT inv.*, (pp.original_amount - pp.amount) AS downPayment, l.`pph`, apph.`account_no` AS apph, l.`ppn`, appn.`account_no` AS appn
FROM invoice_notim inv
LEFT JOIN pengajuan_payment pp ON inv.`idPP` = pp.`idPP`
LEFT JOIN labor l ON l.`labor_id` = inv.`laborId`
LEFT JOIN tax lpph ON lpph.`tax_id` = l.`pph_tax_id`
LEFT JOIN account apph ON apph.`account_id` = lpph.`account_id`
LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
WHERE inv.`inv_notim_id` = {$invoiceId}";
			 $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                    
                    if($resultDP !== false && $resultDP->num_rows > 0) {
                        while($rowDP = $resultDP->fetch_object()) {
										
				$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (3, 7) AND account_no in (130004, 210104, '{$rowDP->apph}', '{$rowDP->appn}')";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130004) {
								
								 $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->downPayment})";	
								
                            } elseif($rowAccount->account_no == 210104) {
								$amount = $rowDP->downPayment + ($rowDP->downPayment * ($rowDP->ppn / 100)) - ($rowDP->downPayment * ($rowDP->pph / 100));
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";	
								
                            } elseif($rowAccount->account_no == $rowDP->apph) {
								$pphDP = $rowDP->downPayment * ($rowDP->pph / 100);
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pphDP})";	
								
                            } elseif($rowAccount->account_no == $rowDP->appn) {
								$ppnDP = $rowDP->downPayment * ($rowDP->ppn / 100);
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppnDP})";	
								
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }	
							
							
						}
					}
		}
			
		if ($row->idPP == 0){ //settlement			
                    
                    $sqlAccount2 = "SELECT inv.*, t.`transaction_id`, t.`unloading_price`, t.`quantity`, t.`uc_tax_id`, al.`account_no` AS aLabor, t.send_weight, 
lppn.`tax_id` AS lppn , appn.`account_no` AS appn, l.`ppn`, pb.amount
FROM invoice_notim inv
LEFT JOIN payment_ob pb ON pb.inv_notim_id = inv.inv_notim_id
LEFT JOIN `transaction` t ON t.`transaction_id` = pb.`transaction_id`
LEFT JOIN unloading_cost uc ON uc.`unloading_cost_id` = t.`unloading_cost_id`
LEFT JOIN labor l ON l.`labor_id` = t.`labor_id`
LEFT JOIN tax ltx ON ltx.`tax_id` = t.`uc_tax_id`
LEFT JOIN account al ON al.`account_id` = ltx.`account_id`
LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
WHERE inv.`inv_notim_id` = {$invoiceId}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {
							
		//if($rowAccount2->freightId != 'NULL'){
		$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 3 AND account_no in (210108, '{$rowAccount2->aLabor}', 210104, '{$rowAccount2->appn}')";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
				//$taxValue = 0;
                 if($resultAccount !== false && $resultAccount->num_rows > 0) {
					if($rowAccount2->lppn != '' && $rowAccount2->lppn != 0){
						$taxPPN = $rowAccount2->ppn;
					}else{
						$taxPPN = 0;
					}
                    if($rowAccount2->uc_tax_id != '' && $rowAccount2->uc_tax_id != 0 && $rowAccount2->unloading_price != '' && $rowAccount2->unloading_price > 0) {
                        $sqlTax = "SELECT * FROM tax WHERE tax_id = {$rowAccount2->uc_tax_id}";
                        $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
                        
                        if($resultTax !== false && $resultTax->num_rows > 0) {
                            $rowTax = $resultTax->fetch_object();
                            $taxValue = $rowTax->tax_value;
                            
                           
								$totalUnloading_Price = $rowAccount2->amount;
								
							
                            if($rowTax->tax_category == 1) {
                                $totalUnloadingPrice = ($totalUnloading_Price) / ((100 - $taxValue) / 100);
                                $creditUnloadingPrice = $totalUnloading_Price;
                            } else {
                                $totalUnloadingPrice = $totalUnloading_Price;
                                $creditUnloadingPrice = $totalUnloading_Price + (($totalUnloading_Price) * ($taxPPN / 100)) - (($totalUnloading_Price) * ($taxValue / 100));
                            }
                        } else {
                            $totalUnloadingPrice = $totalUnloading_Price;
                            $creditUnloadingPrice = $totalUnloading_Price + ($totalUnloading_Price * ($taxPPN / 100)) - ($totalUnloading_Price * ($taxValue / 100)) ;
                            $taxValue = 0;
                        }
                    } else if($rowAccount2->unloading_price != '' && $rowAccount2->unloading_price > 0) {
						
								$totalUnloading_Price = $rowAccount2->amount;
                        
								$totalUnloadingPrice = $totalUnloading_Price;
								$creditUnloadingPrice = $totalUnloadingPrice;
							
                        $taxValue = 0;
                    }else {
                        $totalUnloadingPrice = 0;
                        $creditUnloadingPrice = 0;
                        $taxValue = 0;
                    }
                    
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 210108) {
							if($rowAccount2->send_weight < 0){
								$totalUnloadingPrice1 = $totalUnloadingPrice * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalUnloadingPrice1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalUnloadingPrice})";
							}
                        } elseif($rowAccount->account_no == $rowAccount2->aLabor) {
                            $amount = $totalUnloadingPrice * ($taxValue / 100);
							if($rowAccount2->send_weight < 0){
								$amount1 = $amount * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
							}
                        } elseif($rowAccount->account_no == $rowAccount2->appn) {
                            $amountPPN = $totalUnloadingPrice * ($taxPPN / 100);
							if($rowAccount2->send_weight < 0){
								$amountPPN1 = $amountPPN * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
							}
                        }elseif($rowAccount->account_no == 210104) {
							if($rowAccount2->send_weight < 0){
								$creditUnloadingPrice1 = $creditUnloadingPrice * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditUnloadingPrice1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditUnloadingPrice})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
					echo 'e';
                }
						//}
						
                           
						    
                        }
                    } else {
                        $boolContinue = false;
                    }
				
		}else if ($row->payment_method == 1 || $row->payment_method == 3){			
                    echo 'A';
                    $sqlAccount2 = "SELECT inv.*, t.`transaction_id`, t.`unloading_price`, t.`quantity`, t.`uc_tax_id`, al.`account_no` AS aLabor, t.send_weight, 
lppn.`tax_id` AS lppn , appn.`account_no` AS appn, l.`ppn`,pb.amount
FROM invoice_notim inv
LEFT JOIN payment_ob pb ON pb.inv_notim_id = inv.inv_notim_id
LEFT JOIN `transaction` t ON t.`transaction_id` = pb.`transaction_id`
LEFT JOIN unloading_cost uc ON uc.`unloading_cost_id` = t.`unloading_cost_id`
LEFT JOIN labor l ON l.`labor_id` = t.`labor_id`
LEFT JOIN tax ltx ON ltx.`tax_id` = t.`uc_tax_id`
LEFT JOIN account al ON al.`account_id` = ltx.`account_id`
LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
WHERE inv.`inv_notim_id` = {$invoiceId}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {
							
		//if($rowAccount2->freightId != 'NULL'){
		$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 3 AND account_no in (210108, '{$rowAccount2->aLabor}', 210104, '{$rowAccount2->appn}')";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
				//$taxValue = 0;
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
					if($rowAccount2->lppn != '' && $rowAccount2->lppn != 0){
						$taxPPN = $rowAccount2->ppn;
					}else{
						$taxPPN = 0;
					}
                    if($rowAccount2->uc_tax_id != '' && $rowAccount2->uc_tax_id != 0 && $rowAccount2->unloading_price != '' && $rowAccount2->unloading_price > 0) {
                        $sqlTax = "SELECT * FROM tax WHERE tax_id = {$rowAccount2->uc_tax_id}";
                        $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
                        
                        if($resultTax !== false && $resultTax->num_rows > 0) {
                            $rowTax = $resultTax->fetch_object();
                            $taxValue = $rowTax->tax_value;
                            
                           
								$totalUnloading_Price = $rowAccount2->amount;
								
							
                            if($rowTax->tax_category == 1) {
                                $totalUnloadingPrice = ($totalUnloading_Price) / ((100 - $taxValue) / 100);
                                $creditUnloadingPrice = $totalUnloading_Price;
                            } else {
                                $totalUnloadingPrice = $totalUnloading_Price;
                                $creditUnloadingPrice = $totalUnloading_Price + (($totalUnloading_Price) * ($taxPPN / 100)) - (($totalUnloading_Price) * ($taxValue / 100));
                            }
                        } else {
                            $totalUnloadingPrice = $totalUnloading_Price;
                            $creditUnloadingPrice = $totalUnloading_Price + ($totalUnloading_Price * ($taxPPN / 100)) - ($totalUnloading_Price * ($taxValue / 100)) ;
                            $taxValue = 0;
                        }
                    } else if($rowAccount2->unloading_price != '' && $rowAccount2->unloading_price > 0) {
						
								$totalUnloading_Price = $rowAccount2->amount;
                        
								$totalUnloadingPrice = $totalUnloading_Price;
								$creditUnloadingPrice = $totalUnloadingPrice;
							
                        $taxValue = 0;
                    }else {
                        $totalUnloadingPrice = 0;
                        $creditUnloadingPrice = 0;
                        $taxValue = 0;
                    }
                    
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 210108) {
							if($rowAccount2->send_weight < 0){
								$totalUnloadingPrice1 = $totalUnloadingPrice * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalUnloadingPrice1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalUnloadingPrice})";
							}
                        } elseif($rowAccount->account_no == $rowAccount2->aLabor) {
                            $amount = $totalUnloadingPrice * ($taxValue / 100);
							if($rowAccount2->send_weight < 0){
								$amount1 = $amount * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
							}
                        } elseif($rowAccount->account_no == $rowAccount2->appn) {
                            $amountPPN = $totalUnloadingPrice * ($taxPPN / 100);
							if($rowAccount2->send_weight < 0){
								$amountPPN1 = $amountPPN * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
							}
                        }elseif($rowAccount->account_no == 210104) {
							if($rowAccount2->send_weight < 0){
								$creditUnloadingPrice1 = $creditUnloadingPrice * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditUnloadingPrice1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditUnloadingPrice})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
					echo 'e';
                }
						//}
						
                           
						    
                        }
                    } else {
                        $boolContinue = false;
                    }
				
		}else if ($row->payment_method == 2){
			//echo 'XYZ';
			$sql = "SELECT inv.*, apph.`account_no` AS a_pph,appn.`account_no` AS a_ppn,pp.`dpp`, pp.`pph_amount`, pp.`ppn_amount`, ((pp.`dpp` + pp.`ppn_amount`) - pp.`pph_amount`) AS amount
					FROM invoice_notim inv
					LEFT JOIN labor l ON l.`labor_id` = inv.`laborId`
					LEFT JOIN tax lpph ON lpph.`tax_id` = l.`pph_tax_id`
					LEFT JOIN account apph ON apph.`account_id` = lpph.`account_id`
					LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
					LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
					LEFT JOIN pengajuan_payment pp ON pp.`idPP` = inv.`idPP`
					WHERE inv.`inv_notim_id`= {$invoiceId}";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
			//echo 'ZZ';
			 $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (3, 7) AND account_no in (130004, 210104 , '{$row->a_pph}', '{$row->a_ppn}')";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130004) {
								
								 $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->dpp})";	
								
                            } elseif($rowAccount->account_no == 210104) {
								
								$insertValues .= "(1, '{$source}',  'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount})";	
								
                            } elseif($rowAccount->account_no == $row->a_pph) {
								
								$insertValues .= "(1, '{$source}',  'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_amount})";	
								
                            } elseif($rowAccount->account_no == $row->a_ppn) {
								
								$insertValues .= "(2, '{$source}',  'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_amount})";	
								
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
				}
			}
		
		}else if($row->vendorHandlingId != 'NULL' && $row->vendorHandlingId != '' && $row->vendorHandlingId != 0){
			
		if ($row->idPP == 0){ //settlement
			
			$sqlDP = "SELECT inv.*,vh.`pph`, apph.`account_no` AS apph, vh.`ppn`, appn.`account_no` AS appn,
(SELECT SUM(amount) FROM payment_handling WHERE inv_notim_id = inv.`inv_notim_id`) AS downPayment
FROM invoice_notim inv
LEFT JOIN vendor_handling vh ON vh.`vendor_handling_id` = inv.`vendorHandlingId`
LEFT JOIN tax vhpph ON vhpph.`tax_id` = vh.`pph_tax_id`
LEFT JOIN account apph ON apph.`account_id` = vhpph.`account_id`
LEFT JOIN tax vhppn ON vhppn.`tax_id` = vh.`ppn_tax_id`
LEFT JOIN account appn ON appn.`account_id` = vhppn.`account_id`
WHERE inv.`inv_notim_id` = {$invoiceId}";
			 $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                    
                    if($resultDP !== false && $resultDP->num_rows > 0) {
                        while($rowDP = $resultDP->fetch_object()) {
										
				$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (9, 7) AND account_no in (210106, 130006, '{$rowDP->apph}', '{$rowDP->appn}')";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130006) {
								
								 $insertValues .= "(1, '{$source}', 'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->downPayment})";	
								
                            } elseif($rowAccount->account_no == 210106) {
								$amount = $rowDP->downPayment + ($rowDP->downPayment * ($rowDP->ppn / 100)) - ($rowDP->downPayment * ($rowDP->pph / 100));
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";	
								
                            } elseif($rowAccount->account_no == $rowDP->apph) {
								$pphDP = $rowDP->downPayment * ($rowDP->pph / 100);
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pphDP})";	
								
                            } elseif($rowAccount->account_no == $rowDP->appn) {
								$ppnDP = $rowDP->downPayment * ($rowDP->ppn / 100);
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppnDP})";	
								
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }	
							
							
						}
					}
		}	
			
		else if (($row->payment_method == 1 || $row->payment_method == 3) && $row->amount < $row->original_amount){
			//echo 'XY';
			$sqlDP = "SELECT inv.*, (pp.original_amount - pp.amount) AS downPayment, vh.`pph`, apph.`account_no` AS apph, vh.`ppn`, appn.`account_no` AS appn
FROM invoice_notim inv
LEFT JOIN pengajuan_payment pp ON inv.`idPP` = pp.`idPP`
LEFT JOIN vendor_handling vh ON vh.`vendor_handling_id` = inv.`vendorHandlingId`
LEFT JOIN tax vhpph ON vhpph.`tax_id` = vh.`pph_tax_id`
LEFT JOIN account apph ON apph.`account_id` = vhpph.`account_id`
LEFT JOIN tax vhppn ON vhppn.`tax_id` = vh.`ppn_tax_id`
LEFT JOIN account appn ON appn.`account_id` = vhppn.`account_id`
WHERE inv.`inv_notim_id` =  {$invoiceId}";
			 $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                    
                    if($resultDP !== false && $resultDP->num_rows > 0) {
                        while($rowDP = $resultDP->fetch_object()) {
										
				$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (9, 7) AND account_no in (210106, 130006, '{$rowDP->apph}', '{$rowDP->appn}')";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130006) {
								
								 $insertValues .= "(1, '{$source}', 'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->downPayment})";	
								
                            } elseif($rowAccount->account_no == 210106) {
								$amount = $rowDP->downPayment + ($rowDP->downPayment * ($rowDP->ppn / 100)) - ($rowDP->downPayment * ($rowDP->pph / 100));
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";	
								
                            } elseif($rowAccount->account_no == $rowDP->apph) {
								$pphDP = $rowDP->downPayment * ($rowDP->pph / 100);
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pphDP})";	
								
                            } elseif($rowAccount->account_no == $rowDP->appn) {
								$ppnDP = $rowDP->downPayment * ($rowDP->ppn / 100);
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppnDP})";	
								
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }	
							
							
						}
					}
		}
			
		if ($row->idPP == 0){ //settlement			
                    
                    $sqlAccount2 = "SELECT inv.*, t.`transaction_id`, t.`handling_price`, t.`handling_quantity`, vh.`pph_tax_id`, vh.`vendor_handling_rule`, avh.`account_no` AS aVendorHandling, t.send_weight, 
vhppn.`tax_id` AS vhppn , appn.`account_no` AS appn, vh.`ppn`,ph.amount
FROM invoice_notim inv
LEFT JOIN payment_handling ph ON ph.inv_notim_id = inv.inv_notim_id
LEFT JOIN `transaction` t ON t.`transaction_id` = ph.`transaction_id`
LEFT JOIN vendor_handling vh ON vh.`vendor_handling_id` = inv.`vendorHandlingId`
LEFT JOIN tax vhtx ON vhtx.`tax_id` = vh.`pph_tax_id`
LEFT JOIN account avh ON avh.`account_id` = vhtx.`account_id`
LEFT JOIN tax vhppn ON vhppn.`tax_id` = vh.`ppn_tax_id`
LEFT JOIN account appn ON appn.`account_id` = vhppn.`account_id`
WHERE inv.`inv_notim_id` = {$invoiceId}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {
							
		//if($rowAccount2->freightId != 'NULL'){
		$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 9 AND account_no in (210109, '{$rowAccount2->aVendorHandling}', 210106, '{$rowAccount2->appn}')";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
				//$taxValue = 0;
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
					if($rowAccount2->vhppn != '' && $rowAccount2->vhppn != 0){
						$taxPPN = $rowAccount2->ppn;
					}else{
						$taxPPN = 0;
					}
                    if($rowAccount2->pph_tax_id != '' && $rowAccount2->pph_tax_id != 0 && $rowAccount2->handling_price != '' && $rowAccount2->handling_price > 0) {
                        $sqlTax = "SELECT * FROM tax WHERE tax_id = {$rowAccount2->pph_tax_id}";
                        $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
                        
                        if($resultTax !== false && $resultTax->num_rows > 0) {
                            $rowTax = $resultTax->fetch_object();
                            $taxValue = $rowTax->tax_value;
                            
                           if($rowAccount2->vendor_handling_rule == 1){
								$totalHandling_Price = $rowAccount2->amount;
								
							}else{
								$totalHandling_Price = $rowAccount2->amount;
								
							}
                            if($rowTax->tax_category == 1) {
                                $totalHandlingPrice = ($totalHandling_Price) / ((100 - $taxValue) / 100);
                                $creditHandlingPrice = $totalHandling_Price;
                            } else {
                                $totalHandlingPrice = $totalHandling_Price;
                                $creditHandlingPrice = $totalHandling_Price + (($totalHandling_Price) * ($taxPPN / 100)) - (($totalHandling_Price) * ($taxValue / 100));
                            }
                        } else {
                            $totalHandlingPrice = $rowAccount2->amount;
                            $creditHandlingPrice = ($rowAccount2->amount) + (($rowAccount2->amount) * ($taxPPN / 100)) - (($rowAccount2->amount) * ($taxValue / 100)) ;
                            $taxValue = 0;
                        }
                    } else if($rowAccount2->handling_price != '' && $rowAccount2->handling_price > 0) {
                        if($rowAccount2->vendor_handling_rule == 1){
								$totalHandlingPrice = $rowAccount2->amount;
								$creditHandlingPrice = $totalHandlingPrice;
							}else{
								$totalHandlingPrice = $rowAccount2->amount;
								$creditHandlingPrice = $totalHandlingPrice;
							}
                        $taxValue = 0;
                    }else {
                        $totalHandlingPrice = 0;
                        $creditHandlingPrice = 0;
                        $taxValue = 0;
                    }
                    
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 210109) {
							if($rowAccount2->send_weight < 0){
								$totalHandlingPrice1 = $totalHandlingPrice * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalHandlingPrice1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalHandlingPrice})";
							}
                        } elseif($rowAccount->account_no == $rowAccount2->aVendorHandling) {
                            $amount = $totalHandlingPrice * ($taxValue / 100);
							if($rowAccount2->send_weight < 0){
								$amount1 = $amount * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
							}
                        } elseif($rowAccount->account_no == $rowAccount2->appn) {
                            $amountPPN = $totalHandlingPrice * ($taxPPN / 100);
							if($rowAccount2->send_weight < 0){
								$amountPPN1 = $amountPPN * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
							}
                        }elseif($rowAccount->account_no == 210106) {
							if($rowAccount2->send_weight < 0){
								$creditHandlingPrice1 = $creditHandlingPrice * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditHandlingPrice1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditHandlingPrice})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
					echo 'e';
                }
						//}
						
                           
						    
                        }
                    } else {
                        $boolContinue = false;
                    }
				
		}else if ($row->payment_method == 1 || $row->payment_method == 3){			
                    echo 'A';
                    $sqlAccount2 = "SELECT inv.*, t.`transaction_id`, t.`handling_price`, t.`handling_quantity`, vh.`pph_tax_id`, vh.`vendor_handling_rule`, avh.`account_no` AS aVendorHandling, t.send_weight, 
vhppn.`tax_id` AS vhppn , appn.`account_no` AS appn, vh.`ppn`, ph.amount
FROM invoice_notim inv
LEFT JOIN payment_handling ph ON ph.inv_notim_id = inv.inv_notim_id
LEFT JOIN `transaction` t ON t.`transaction_id` = ph.`transaction_id`
LEFT JOIN vendor_handling vh ON vh.`vendor_handling_id` = inv.`vendorHandlingId`
LEFT JOIN tax vhtx ON vhtx.`tax_id` = vh.`pph_tax_id`
LEFT JOIN account avh ON avh.`account_id` = vhtx.`account_id`
LEFT JOIN tax vhppn ON vhppn.`tax_id` = vh.`ppn_tax_id`
LEFT JOIN account appn ON appn.`account_id` = vhppn.`account_id`
WHERE inv.`inv_notim_id` = {$invoiceId}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {
							
		//if($rowAccount2->freightId != 'NULL'){
		$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 9 AND account_no in (210109, '{$rowAccount2->aVendorHandling}', 210106, '{$rowAccount2->appn}')";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
				//$taxValue = 0;
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
					if($rowAccount2->vhppn != '' && $rowAccount2->vhppn != 0){
						$taxPPN = $rowAccount2->ppn;
					}else{
						$taxPPN = 0;
					}
                    if($rowAccount2->pph_tax_id != '' && $rowAccount2->pph_tax_id != 0 && $rowAccount2->handling_price != '' && $rowAccount2->handling_price > 0) {
                        $sqlTax = "SELECT * FROM tax WHERE tax_id = {$rowAccount2->pph_tax_id}";
                        $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
                        
                        if($resultTax !== false && $resultTax->num_rows > 0) {
                            $rowTax = $resultTax->fetch_object();
                            $taxValue = $rowTax->tax_value;
                            
                           if($rowAccount2->vendor_handling_rule == 1){
								$totalHandling_Price = $rowAccount2->amount;
								
							}else{
								$totalHandling_Price = $rowAccount2->amount;
								
							}
                            if($rowTax->tax_category == 1) {
                                $totalHandlingPrice = ($totalHandling_Price) / ((100 - $taxValue) / 100);
                                $creditHandlingPrice = $totalHandling_Price;
                            } else {
                                $totalHandlingPrice = $totalHandling_Price;
                                $creditHandlingPrice = $totalHandling_Price + (($totalHandling_Price) * ($taxPPN / 100)) - (($totalHandling_Price) * ($taxValue / 100));
                            }
                        } else {
                            $totalHandlingPrice = $rowAccount2->amount;
                            $creditHandlingPrice = ($rowAccount2->amount) + (($rowAccount2->amount) * ($taxPPN / 100)) - (($rowAccount2->amount) * ($taxValue / 100)) ;
                            $taxValue = 0;
                        }
                    } else if($rowAccount2->handling_price != '' && $rowAccount2->handling_price > 0) {
                        if($rowAccount2->vendor_handling_rule == 1){
								$totalHandlingPrice = $rowAccount2->amount;
								$creditHandlingPrice = $totalHandlingPrice;
							}else{
								$totalHandlingPrice = $rowAccount2->amount;
								$creditHandlingPrice = $totalHandlingPrice;
							}
                        $taxValue = 0;
                    }else {
                        $totalHandlingPrice = 0;
                        $creditHandlingPrice = 0;
                        $taxValue = 0;
                    }
                    
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 210109) {
							if($rowAccount2->send_weight < 0){
								$totalHandlingPrice1 = $totalHandlingPrice * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalHandlingPrice1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalHandlingPrice})";
							}
                        } elseif($rowAccount->account_no == $rowAccount2->aVendorHandling) {
                            $amount = $totalHandlingPrice * ($taxValue / 100);
							if($rowAccount2->send_weight < 0){
								$amount1 = $amount * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
							}
                        } elseif($rowAccount->account_no == $rowAccount2->appn) {
                            $amountPPN = $totalHandlingPrice * ($taxPPN / 100);
							if($rowAccount2->send_weight < 0){
								$amountPPN1 = $amountPPN * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
							}
                        }elseif($rowAccount->account_no == 210106) {
							if($rowAccount2->send_weight < 0){
								$creditHandlingPrice1 = $creditHandlingPrice * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditHandlingPrice1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditHandlingPrice})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
					echo 'e';
                }
						//}
						
                           
						    
                        }
                    } else {
                        $boolContinue = false;
                    }
				
		}else if ($row->payment_method == 2){
			echo 'XYZ';
			$sql = "SELECT inv.*, apph.`account_no` AS a_pph,appn.`account_no` AS a_ppn,pp.`dpp`, pp.`pph_amount`, pp.`ppn_amount`, ((pp.`dpp` + pp.`ppn_amount`) - pp.`pph_amount`) AS amount
					FROM invoice_notim inv
					LEFT JOIN vendor_handling l ON l.`vendor_handling_id` = inv.`vendorHandlingId`
					LEFT JOIN tax lpph ON lpph.`tax_id` = l.`pph_tax_id`
					LEFT JOIN account apph ON apph.`account_id` = lpph.`account_id`
					LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
					LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
					LEFT JOIN pengajuan_payment pp ON pp.`idPP` = inv.`idPP`
					WHERE inv.`inv_notim_id`= {$invoiceId}";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
			//echo 'ZZ';
			 $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (9, 7) AND account_no in (130006, 210106 , '{$row->a_pph}', '{$row->a_ppn}')";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130006) {
								
								 $insertValues .= "(2, '{$source}', 'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->dpp})";	
								
                            } elseif($rowAccount->account_no == 210106) {
								
								$insertValues .= "(1, '{$source}',  'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount})";	
								
                            } elseif($rowAccount->account_no == $row->a_pph) {
								
								$insertValues .= "(1, '{$source}',  'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_amount})";	
								
                            } elseif($rowAccount->account_no == $row->a_ppn) {
								
								$insertValues .= "(2, '{$source}',  'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_amount})";	
								
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
				}
			}
		
		}else if($row->vendor_id != 'NULL' && $row->vendor_id != '' && $row->vendor_id != 0){
			
		if ($row->idPP == 0){ //settlement
			
			$sqlDP = "SELECT inv.*,f.`pph`, apph.`account_no` AS apph, f.`ppn`, appn.`account_no` AS appn,
(SELECT SUM(amount) FROM payment_oa WHERE inv_notim_id = inv.`inv_notim_id`) AS downPayment
FROM invoice_notim inv
LEFT JOIN freight f ON f.`freight_id` = inv.`freightId`
LEFT JOIN tax fpph ON fpph.`tax_id` = f.`pph_tax_id`
LEFT JOIN account apph ON apph.`account_id` = fpph.`account_id`
LEFT JOIN tax fppn ON fppn.`tax_id` = f.`ppn_tax_id`
LEFT JOIN account appn ON appn.`account_id` = fppn.`account_id`
WHERE inv.`inv_notim_id` = {$invoiceId}";
			 $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                    
                    if($resultDP !== false && $resultDP->num_rows > 0) {
                        while($rowDP = $resultDP->fetch_object()) {
										
				$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (210103, 130003, '{$rowDP->apph}', '{$rowDP->appn}')";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130003) {
								
								 $insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->downPayment})";	
								
                            } elseif($rowAccount->account_no == 210103) {
								$amount = $rowDP->downPayment + ($rowDP->downPayment * ($rowDP->ppn / 100)) - ($rowDP->downPayment * ($rowDP->pph / 100));
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";	
								
                            } elseif($rowAccount->account_no == $rowDP->apph) {
								$pphDP = $rowDP->downPayment * ($rowDP->pph / 100);
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pphDP})";	
								
                            } elseif($rowAccount->account_no == $rowDP->appn) {
								$ppnDP = $rowDP->downPayment * ($rowDP->ppn / 100);
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppnDP})";	
								
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }	
							
							
						}
					}
		}	
			
		else if (($row->payment_method == 1 || $row->payment_method == 3) && $row->amount < $row->original_amount){
			//echo 'XY';
			$sqlDP = "SELECT inv.*, (pp.original_amount - pp.amount) AS downPayment, v.`pph`, apph.`account_no` AS apph, v.`ppn`, appn.`account_no` AS appn
FROM invoice_notim inv
LEFT JOIN pengajuan_payment pp ON inv.`idPP` = pp.`idPP`
LEFT JOIN vendor v ON v.`vendor_id` = inv.`vendor_id`
LEFT JOIN tax vpph ON vpph.`tax_id` = v.`pph_tax_id`
LEFT JOIN account apph ON apph.`account_id` = vpph.`account_id`
LEFT JOIN tax vppn ON vppn.`tax_id` = v.`ppn_tax_id`
LEFT JOIN account appn ON appn.`account_id` = vppn.`account_id`
WHERE inv.`inv_notim_id` =  {$invoiceId}";
			 $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                    
                    if($resultDP !== false && $resultDP->num_rows > 0) {
                        while($rowDP = $resultDP->fetch_object()) {
										
				$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (0, 7) AND account_no in (210101, 130002, '{$rowDP->apph}', '{$rowDP->appn}')";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130002) {
								
								 $insertValues .= "(1, '{$source}', 'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$rowDP->downPayment})";	
								
                            } elseif($rowAccount->account_no == 210101) {
								$amount = $rowDP->downPayment + ($rowDP->downPayment * ($rowDP->ppn / 100)) - ($rowDP->downPayment * ($rowDP->pph / 100));
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";	
								
                            } elseif($rowAccount->account_no == $rowDP->apph) {
								$pphDP = $rowDP->downPayment * ($rowDP->pph / 100);
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pphDP})";	
								
                            } elseif($rowAccount->account_no == $rowDP->appn) {
								$ppnDP = $rowDP->downPayment * ($rowDP->ppn / 100);
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppnDP})";	
								
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }	
							
							
						}
					}
		}
			
		if ($row->idPP == 0){ //settlement			
                    
                    $sqlAccount2 = "SELECT inv.*, t.`transaction_id`, t.`freight_price`, t.`freight_quantity`, t.`fc_tax_id`, f.`freight_rule`, af.`account_no` AS aFreight, t.send_weight, 
fppn.`tax_id` AS fppn , appn.`account_no` AS appn, f.`ppn`
FROM invoice_notim inv
LEFT JOIN payment_oa pa ON pa.inv_notim_id = inv.inv_notim_id
LEFT JOIN `transaction` t ON t.`transaction_id` = pa.`transaction_id`
LEFT JOIN freight_cost fc ON fc.`freight_cost_id` = t.`freight_cost_id`
LEFT JOIN freight f ON f.`freight_id` = fc.`freight_id`
LEFT JOIN tax ftx ON ftx.`tax_id` = t.`fc_tax_id`
LEFT JOIN account af ON af.`account_id` = ftx.`account_id`
LEFT JOIN tax fppn ON fppn.`tax_id` = f.`ppn_tax_id`
LEFT JOIN account appn ON appn.`account_id` = fppn.`account_id`
WHERE inv.`inv_notim_id` = {$invoiceId}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {
							
		//if($rowAccount2->freightId != 'NULL'){
		$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 2 AND account_no in (210110, '{$rowAccount2->aFreight}', 210103, '{$rowAccount2->appn}')";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
				//$taxValue = 0;
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
					if($rowAccount2->fppn != '' && $rowAccount2->fppn != 0){
						$taxPPN = $rowAccount2->ppn;
					}else{
						$taxPPN = 0;
					}
                    if($rowAccount2->fc_tax_id != '' && $rowAccount2->fc_tax_id != 0 && $rowAccount2->freight_price != '' && $rowAccount2->freight_price > 0) {
                        $sqlTax = "SELECT * FROM tax WHERE tax_id = {$rowAccount2->fc_tax_id}";
                        $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
                        
                        if($resultTax !== false && $resultTax->num_rows > 0) {
                            $rowTax = $resultTax->fetch_object();
                            $taxValue = $rowTax->tax_value;
                            
                           if($rowAccount2->freight_rule == 1){
								$totalFreight_Price = $rowAccount2->freight_price * $rowAccount2->send_weight;
								
							}else{
								$totalFreight_Price = $rowAccount2->freight_price * $rowAccount2->freight_quantity;
								
							}
                            if($rowTax->tax_category == 1) {
                                $totalFreightPrice = ($totalFreight_Price) / ((100 - $taxValue) / 100);
                                $creditFreightPrice = $totalFreight_Price;
                            } else {
                                $totalFreightPrice = $totalFreight_Price;
                                $creditFreightPrice = $totalFreight_Price + (($totalFreight_Price) * ($taxPPN / 100)) - (($totalFreight_Price) * ($taxValue / 100));
                            }
                        } else {
                            $totalFreightPrice = $rowAccount2->freight_price * $rowAccount2->freight_quantity;
                            $creditFreightPrice = ($rowAccount2->freight_price * $rowAccount2->freight_quantity) + (($rowAccount2->freight_price * $rowAccount2->freight_quantity) * ($taxPPN / 100)) - (($rowAccount2->freight_price * $rowAccount2->freight_quantity) * ($taxValue / 100)) ;
                            $taxValue = 0;
                        }
                    } else if($rowAccount2->freight_price != '' && $rowAccount2->freight_price > 0) {
                        if($rowAccount2->freight_rule == 1){
								$totalFreightPrice = $rowAccount2->freight_price * $rowAccount2->send_weight;
								$creditFreightPrice = $totalFreightPrice;
							}else{
								$totalFreightPrice = $rowAccount2->freight_price * $rowAccount2->freight_quantity;
								$creditFreightPrice = $totalFreightPrice;
							}
                        $taxValue = 0;
                    }else {
                        $totalFreightPrice = 0;
                        $creditFreightPrice = 0;
                        $taxValue = 0;
                    }
                    
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 210110) {
							if($rowAccount2->send_weight < 0){
								$totalFreightPrice1 = $totalFreightPrice * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalFreightPrice1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalFreightPrice})";
							}
                        } elseif($rowAccount->account_no == $rowAccount2->aFreight) {
                            $amount = $totalFreightPrice * ($taxValue / 100);
							if($rowAccount2->send_weight < 0){
								$amount1 = $amount * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
							}
                        } elseif($rowAccount->account_no == $rowAccount2->appn) {
                            $amountPPN = $totalFreightPrice * ($taxPPN / 100);
							if($rowAccount2->send_weight < 0){
								$amountPPN1 = $amountPPN * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
							}
                        }elseif($rowAccount->account_no == 210103) {
							if($rowAccount2->send_weight < 0){
								$creditFreightPrice1 = $creditFreightPrice * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditFreightPrice1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditFreightPrice})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
					echo 'e';
                }
						//}
						
                           
						    
                        }
                    } else {
                        $boolContinue = false;
                    }
				
		}else if ($row->payment_method == 1 || $row->payment_method == 3){			
                    echo 'A';
                    $sqlAccount2 = "SELECT inv.*, t.`transaction_id`, t.`unit_price`, t.`quantity`, v.`pph_tax_id`, av.`account_no` AS aVendor, t.send_weight, 
vppn.`tax_id` AS vppn , appn.`account_no` AS appn, v.`ppn`
FROM invoice_notim inv
LEFT JOIN payment_curah pc ON pc.inv_notim_id = inv.inv_notim_id
LEFT JOIN `transaction` t ON t.`transaction_id` = pc.`transaction_id`
LEFT JOIN vendor v ON v.`vendor_id` = inv.`vendor_id`
LEFT JOIN tax vtx ON vtx.`tax_id` = v.`pph_tax_id`
LEFT JOIN account av ON av.`account_id` = vtx.`account_id`
LEFT JOIN tax vppn ON vppn.`tax_id` = v.`ppn_tax_id`
LEFT JOIN account appn ON appn.`account_id` = vppn.`account_id`
WHERE inv.`inv_notim_id` = {$invoiceId}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {
							
		//if($rowAccount2->freightId != 'NULL'){
		$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 0 AND account_no in (210111, '{$rowAccount2->aVendor}', 210101, '{$rowAccount2->appn}')";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
				//$taxValue = 0;
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
					if($rowAccount2->vppn != '' && $rowAccount2->vppn != 0){
						$taxPPN = $rowAccount2->ppn;
					}else{
						$taxPPN = 0;
					}
                    if($rowAccount2->pph_tax_id != '' && $rowAccount2->pph_tax_id != 0 && $rowAccount2->unit_price != '' && $rowAccount2->unit_price > 0) {
                        $sqlTax = "SELECT * FROM tax WHERE tax_id = {$rowAccount2->pph_tax_id}";
                        $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
                        
                        if($resultTax !== false && $resultTax->num_rows > 0) {
                            $rowTax = $resultTax->fetch_object();
                            $taxValue = $rowTax->tax_value;
                            
                          
								$totalCurah_Price = $rowAccount2->unit_price * $rowAccount2->quantity;
								
							
                            if($rowTax->tax_category == 1) {
                                $totalCurahPrice = ($totalCurah_Price) / ((100 - $taxValue) / 100);
                                $creditCurahPrice = $totalCurah_Price;
                            } else {
                                $totalCurahPrice = $totalCurah_Price;
                                $creditCurahPrice = $totalCurah_Price + (($totalCurah_Price) * ($taxPPN / 100)) - (($totalCurah_Price) * ($taxValue / 100));
                            }
                        } else {
                            $totalCurahPrice = $rowAccount2->unit_price * $rowAccount2->quantity;
                            $creditCurahPrice = ($rowAccount2->unit_price * $rowAccount2->quantity) + (($rowAccount2->unit_price * $rowAccount2->quantity) * ($taxPPN / 100)) - (($rowAccount2->quantity * $rowAccount2->quantity) * ($taxValue / 100)) ;
                            $taxValue = 0;
                        }
                    } else if($rowAccount2->unit_price != '' && $rowAccount2->unit_price > 0) {
                       
								$totalCurahPrice = $rowAccount2->unit_price * $rowAccount2->quantity;
								$creditCurahPrice = $totalCurahPrice + (($rowAccount2->unit_price * $rowAccount2->quantity) * ($taxPPN / 100));
						        $taxValue = 0;
                    }else {
                        $totalCurahPrice = 0;
                        $creditCurahPrice = 0;
                        $taxValue = 0;
                    }
                    
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 210111) {
							if($rowAccount2->send_weight < 0){
								$totalCurahPrice1 = $totalCurahPrice * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCurahPrice1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCurahPrice})";
							}
                        } elseif($rowAccount->account_no == $rowAccount2->aVendor) {
                            $amount = $totalCurahPrice * ($taxValue / 100);
							if($rowAccount2->send_weight < 0){
								$amount1 = $amount * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
							}
                        } elseif($rowAccount->account_no == $rowAccount2->appn) {
                            $amountPPN = $totalCurahPrice * ($taxPPN / 100);
							if($rowAccount2->send_weight < 0){
								$amountPPN1 = $amountPPN * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountPPN})";
							}
                        }elseif($rowAccount->account_no == 210101) {
							if($rowAccount2->send_weight < 0){
								$creditCurahPrice1 = $creditCurahPrice * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditCurahPrice1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditCurahPrice})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
					echo 'e';
                }
						//}
						
                           
						    
                        }
                    } else {
                        $boolContinue = false;
                    }
				
		}else if ($row->payment_method == 2){
			echo 'XYZ';
			$sql = "SELECT inv.*, apph.`account_no` AS a_pph,appn.`account_no` AS a_ppn,pp.`dpp`, pp.`pph_amount`, pp.`ppn_amount`, ((pp.`dpp` + pp.`ppn_amount`) - pp.`pph_amount`) AS amount
					FROM invoice_notim inv
					LEFT JOIN vendor v ON v.`vendor_id` = inv.`vendor_id`
					LEFT JOIN tax vpph ON vpph.`tax_id` = v.`pph_tax_id`
					LEFT JOIN account apph ON apph.`account_id` = vpph.`account_id`
					LEFT JOIN tax vppn ON vppn.`tax_id` = v.`ppn_tax_id`
					LEFT JOIN account appn ON appn.`account_id` = vppn.`account_id`
					LEFT JOIN pengajuan_payment pp ON pp.`idPP` = inv.`idPP`
					WHERE inv.`inv_notim_id`= {$invoiceId}";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
			//echo 'ZZ';
			 $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (9, 7) AND account_no in (130006, 210106 , '{$row->a_pph}', '{$row->a_ppn}')";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130002) {
								
								 $insertValues .= "(2, '{$source}', 'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->dpp})";	
								
                            } elseif($rowAccount->account_no == 210101) {
								
								$insertValues .= "(1, '{$source}',  'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount})";	
								
                            } elseif($rowAccount->account_no == $row->a_pph) {
								
								$insertValues .= "(1, '{$source}',  'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_amount})";	
								
                            } elseif($rowAccount->account_no == $row->a_ppn) {
								
								$insertValues .= "(2, '{$source}',  'Down Payment', 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_amount})";	
								
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
				}
			}
		
		}
	}	
				
                // </editor-fold>
            
		
        // </editor-fold>
}
*/elseif($transactionId != 'NULL' && $source == 'NOTA TIMBANG2') {
		
		$sql = "DELETE FROM general_ledger WHERE account_id IN (8,52,147) AND transaction_id = {$transactionId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
		
		
		$sql = "SELECT t.*, con.contract_type, fc.freight_id, a.`account_no` AS sales_account, sl.`price_converted` AS sales_price_converted
,sh.`shipment_code`, cust.ppn AS ppn_buyer, sl.price, sl.exchange_rate, f.freight_rule, vh.vendor_handling_rule
					FROM `transaction` t 
					LEFT JOIN stockpile_contract sc
						ON sc.stockpile_contract_id = t.stockpile_contract_id
					LEFT JOIN contract con
						ON con.contract_id = sc.contract_id
					LEFT JOIN freight_cost fc
						ON t.`freight_cost_id` = fc.`freight_cost_id`
					LEFT JOIN shipment sh
						ON t.`shipment_id` = sh.`shipment_id`
					LEFT JOIN sales sl
						ON sh.`sales_id` = sl.`sales_id`
					LEFT JOIN customer cust
						ON sl.`customer_id` = cust.`customer_id`
					LEFT JOIN account a
						ON sl.`account_id` = a.`account_id`
					LEFT JOIN freight f
						ON fc.freight_id = f.freight_id
					LEFT JOIN vendor_handling_cost vhc
						ON vhc.handling_cost_id = t.handling_cost_id
					LEFT JOIN vendor_handling vh
						ON vh.vendor_handling_id = vhc.vendor_handling_id
					WHERE t.transaction_id = {$transactionId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
			
			if($row->contract_type == 'P') {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (140000, 520100, 130100)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
					if($rowAccount->account_no == 140000) {
                                if($row->netto_weight < $row->send_weight) {
                                    $amount = $row->quantity * $row->unit_price;
                                } else {
                                    $amount = $row->send_weight * $row->unit_price;
                                }
								if($row->send_weight < 0){
									$amount1 = $amount * -1;
								$insertValues .= "(2, 'NOTA TIMBANG', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";	
								}else{
                                $insertValues .= "(1, 'NOTA TIMBANG', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
								}
                            } elseif($rowAccount->account_no == 520100) {
                                if($row->netto_weight < $row->send_weight) {
                                    $amount = $row->shrink * $row->unit_price;
                                } else {
                                    $amount = 0;
                                }
								if($row->send_weight < 0){
									$amount1 = $amount * -1;
                                $insertValues .= "(2, 'NOTA TIMBANG', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
								}else{
								$insertValues .= "(1, 'NOTA TIMBANG', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
								}
                            } elseif($rowAccount->account_no == 130100) {
                                $amount = $row->send_weight * $row->unit_price;
								if($row->send_weight < 0){
									$amount1 = $amount * -1;
                                $insertValues .= "(1, 'NOTA TIMBANG', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
								}else{
								$insertValues .= "(2, 'NOTA TIMBANG', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
			}
		
		} else {
            $boolContinue = false;
        }
		
	}elseif($transactionId != 'NULL') {
        // <editor-fold defaultstate="collapsed" desc="transaction">
       /*if($transactionId != 257943){
		$sqlCek = "SELECT transaction_type FROM `transaction` WHERE transaction_id = {$transactionId}";
		$resultCek = $myDatabase->query($sqlCek, MYSQLI_STORE_RESULT);
        if($resultCek !== false && $resultCek->num_rows == 1) {
            $rowCek = $resultCek->fetch_object();
		
		if($rowCek->transaction_type != 2){*/
        $sql = "DELETE FROM general_ledger WHERE transaction_id = {$transactionId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
		//}
			//}
		//}
		echo 'a';
		$aFreight = '';
        $sql = "SELECT t.*, con.contract_type, fc.freight_id, a.`account_no` AS sales_account, sl.`price_converted` AS sales_price_converted
                    ,sh.`shipment_code`, cust.ppn AS ppn_buyer, sl.price, sl.exchange_rate, f.freight_rule, vh.vendor_handling_rule,sl.`sales_status`,
                    af.`account_no` AS aFreight,con.`return_shipment`, con.`contract_id`,sl.`sales_type`
					FROM `transaction` t 
					LEFT JOIN stockpile_contract sc
						ON sc.stockpile_contract_id = t.stockpile_contract_id
					LEFT JOIN contract con
						ON con.contract_id = sc.contract_id
					LEFT JOIN freight_cost fc
						ON t.`freight_cost_id` = fc.`freight_cost_id`
					LEFT JOIN shipment sh
						ON t.`shipment_id` = sh.`shipment_id`
					LEFT JOIN sales sl
						ON sh.`sales_id` = sl.`sales_id`
					LEFT JOIN customer cust
						ON sl.`customer_id` = cust.`customer_id`
					LEFT JOIN account a
						ON sl.`account_id` = a.`account_id`
					LEFT JOIN freight f
						ON fc.freight_id = f.freight_id
					LEFT JOIN vendor_handling_cost vhc
						ON vhc.handling_cost_id = t.handling_cost_id
					LEFT JOIN vendor_handling vh
						ON vh.vendor_handling_id = vhc.vendor_handling_id
					LEFT JOIN tax ftx ON ftx.`tax_id` = t.`fc_tax_id`
					LEFT JOIN account af ON af.`account_id` = ftx.`account_id`
					WHERE t.transaction_id = {$transactionId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
           
			if($row->adjustmentAudit_id != '' && $row->adjustmentAudit_id != 'NULL'){
				//$totalCogsPrice = 0;
                $totalCogsHandling = 0;
                $totalCogsFC = 0;
                $totalCogsUC = 0;
                $totalCogsStock = 0;
                $sqlCogs1 = "SELECT SUM(a.cogs_pks) AS cogs_pks, SUM(a.cogs_oa) AS cogs_oa, SUM(a.cogs_ob) AS cogs_ob, SUM(a.cogs_handling) AS cogs_handling,
                             SUM(a.total_amount) AS total_amount FROM adjustment_audit_qty a WHERE a.`audit_id` =  {$row->adjustmentAudit_id}";
                $resultCogs1 = $myDatabase->query($sqlCogs1, MYSQLI_STORE_RESULT);
                
                if($resultCogs1 !== false && $resultCogs1->num_rows > 0) {
                    while($rowCogs1 = $resultCogs1->fetch_object()) {
						
                        $totalCogsHandling = $rowCogs1->cogs_handling ;
                        $totalCogsFC = $rowCogs1->cogs_oa;
                        $totalCogsUC = $rowCogs1->cogs_ob;
                        $totalCogsStock = $rowCogs1->cogs_pks;
                        $totalCogs = $rowCogs1->total_amount;
				
                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (510101, 510102, 510103, 510104, 140000)";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                        if($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while($rowAccount = $resultAccount->fetch_object()) {
                                if($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if($rowAccount->account_no == 510101) {
                                    if($row->send_weight < 0){
                                        //$total_pks21 = $total_pks2 * -1;
                                        $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId},  {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogsStock})";
                                    }else{
                                        $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId},  {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogsStock})";
                                    }
                                } /*elseif($rowAccount->account_no == 510201) {
                                    if($qty < 0){
                                        //$shrink1 = $shrink * -1;
                                    $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$shrink})";
                                    }else{
                                    $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$shrink})";
                                    }
                                } */elseif($rowAccount->account_no == 510102) {
                                    if($row->send_weight < 0){
                                        //$total_fc1 = $total_fc * -1;
                                    $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogsFC})";
                                    }else{
                                    $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogsFC})";
                                    }
                                } elseif($rowAccount->account_no == 510103) {
                                    if($row->send_weight < 0){
                                        //$total_uc1 = $total_uc * -1;
                                    $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogsUC})";
                                    }else{
                                    $insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogsUC})";
                                    }
                                } elseif($rowAccount->account_no == 510104) {
                                    if($row->send_weight < 0){
                                        //$total_hc1 = $total_hc * -1;
                                    $insertValues .= "(1, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogsHandling})";
                                    }else{
                                    $insertValues .= "(2, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogsHandling})";
                                    }
                                } elseif($rowAccount->account_no == 140000) {
                                    if($row->send_weight < 0){
                                        //$total_cogs1 = $total_cogs * -1;
                                    $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogs})";
                                    }else{
                                    $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalCogs})";
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                
			        }
                }else{
                    echo 'mm';
                }
			
			}elseif($row->stock_transit_id != 0 && $row->stock_transit_id != 'NULL'){                        
				$amt_stock = $row->unit_cost * $row->netto_weight;
                $amt_stock_transit = $row->unit_cost * $row->netto_weight;

                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (141000, 140000)";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 140000) {
							
                            $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$amt_stock})";
							
                        } elseif($rowAccount->account_no == 141000) {
							
                            $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$amt_stock_transit})";
							
                        } 
                    }
                } else {
                    $boolContinue = false;
                }
                
			
				
			}else{
                if($row->transaction_type == 1) {
                    $aFreight = $row->aFreight;
                    // <editor-fold defaultstate="collapsed" desc="nota timbang">
                    if($row->contract_type == 'P') {
                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (140000, 520100, 130100)";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                        if($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while($rowAccount = $resultAccount->fetch_object()) {
                                if($insertValues != "") {
                                    $insertValues .= ", ";
                                }

                                if($rowAccount->account_no == 140000) {
                                    if($row->netto_weight < $row->send_weight) {
                                        $amount = $row->quantity * $row->unit_price;
                                    } else {
                                        $amount = $row->send_weight * $row->unit_price;
                                    }
                                    if($row->send_weight < 0){
                                        $amount1 = ($row->quantity * $row->unit_price) * -1;
                                    $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";	
                                    }else{
                                    $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                    }
                                } elseif($rowAccount->account_no == 520100) {
                                    if($row->netto_weight < $row->send_weight) {
                                        $amount = $row->shrink * $row->unit_price;
                                    } else {
                                        $amount = 0;
                                    }
                                    if($row->send_weight < 0){
                                        $amount1 = ($row->shrink * $row->unit_price) * -1;
                                    $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                    }else{
                                    $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                    }
                                } elseif($rowAccount->account_no == 130100) {
                                    $amount = $row->send_weight * $row->unit_price;
                                    if($row->send_weight < 0){
                                        $amount1 = $amount * -1;
                                    $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                    }else{
                                    $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                            echo 'b';
                        }
                    } elseif($row->contract_type == 'C') { 
                        // echo " -- CURAh -- | " ;
                       if($row->return_shipment == 0){ //UNBILLED GOODS
                            // $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (140000, 123459)"; //210101
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (140000, 210101)"; //210101
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                $amount = $row->quantity * $row->unit_price;
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if($rowAccount->account_no == 140000) { //stock
                                        if($row->send_weight < 0){
                                            $amount1 = $amount * -1;
                                            $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})"; //28
                                        }
                                    } elseif($rowAccount->account_no == 123459) { //unbilled goods
                                        if($row->send_weight < 0){
                                            $amount1 = $amount * -1;
                                            $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})"; //29
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                                echo 'c';
                            } 
                        } 
                       /* if ($row->return_shipment == 0) { //HUTANG DAGANG
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (140000, 210101)";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            echo " CURAH -  " . $sqlAccount; 
                            if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                                $amount = $row->quantity * $row->unit_price;
                                $amountOA = $row->freight_quantity * $row->freight_price;
                                $amountOB = $row->unloading_price;
                                $amountHandling = $row->handling_quantity * $row->handling_price;

                                while ($rowAccount = $resultAccount->fetch_object()) {
                                    if ($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if ($rowAccount->account_no == 140000) {
                                        if ($row->send_weight < 0) {
                                            $amount1 = $amount * -1;
                                            $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                        } else {
                                            $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                        }
                                    } elseif ($rowAccount->account_no == 210101) {
                                        if ($row->send_weight < 0) {
                                            $amount1 = $amount * -1;
                                            $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                        } else {
                                            $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                                echo 'c';
                            }

                        } */
                        else{ 
                            $sqlA = "SELECT sl.*, a.account_no AS shipmentAccount, cust.`ppn` AS ppn_buyer  FROM account a
                                    LEFT JOIN sales sl ON a.`account_id` = sl.`account_id`
                                    LEFT JOIN shipment sh ON sh.`sales_id` = sl.`sales_id`
                                    LEFT JOIN contract c ON c.`return_shipment_id` = sh.`shipment_id`
                                    LEFT JOIN customer cust ON cust.`customer_id` = sl.`customer_id`
                                    WHERE c.`contract_id` = {$row->contract_id}
                                    LIMIT 1";
                            $resultA = $myDatabase->query($sqlA, MYSQLI_STORE_RESULT);
                            if($resultA !== false && $resultA->num_rows > 0) {
                                    $rowA = $resultA->fetch_object();
                                    $shipmentAccount = $rowA->shipmentAccount;
                                    $newSalesPriceA = round($rowA->price * $row->send_weight,2);
                                    $newSalesPriceB = round($newSalesPriceA * $rowA->exchange_rate,0);
                            //$salesPrice = $row->quantity * $row->sales_price_converted;
                                    $taxValueA = ($rowA->ppn_buyer / 100 * $newSalesPriceB);
                                    $totalSalesPriceA = $newSalesPriceB + $taxValueA;
                            }
                            
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (0,1) AND account_no in (120000, 230100, {$shipmentAccount}) GROUP BY account_no";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if($rowAccount->account_no == 120000) {
                                        if($row->quantity < 0){
                                            $totalSalesPrice11 = $totalSalesPriceA *-1;
                                        $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalSalesPrice1})";
                                        }else{
                                        $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalSalesPriceA})";
                                        }
                                    } elseif($rowAccount->account_no == 230100) {
                                        if($row->quantity < 0){
                                            $taxValue11 = $taxValueA *-1;
                                        $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$taxValue11})";
                                        }else{
                                        $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$taxValueA})";
                                        }
                                    } elseif($rowAccount->account_no == $shipmentAccount) {
                                        if($row->quantity < 0){
                                            $newSalesPriceB1 = $newSalesPriceB *-1;
                                        $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$newSalesPriceB1})";
                                        }else{
                                        $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$newSalesPriceB})";
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                            }
                            
                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1) AND account_no in (510100, 140000)";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            $amount = $row->quantity * $row->unit_price;
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if($rowAccount->account_no == 140000) {
                                        if($row->send_weight < 0){
                                            $amount1 = $amount * -1;
                                            $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                        }
                                    } elseif($rowAccount->account_no == 510100) {
                                        if($row->send_weight < 0){
                                            $amount1 = $amount * -1;
                                            $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                            }
                        }
                    } else {
                        $boolContinue = false; //FREIGHT
                        echo 'd';
                    } 

                    // echo " -- FREIGHT -- | " ;
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 2 AND account_no in (140000, 123456)";
                    // $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 2 AND account_no in (140000, '{$aFreight}', 210103)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    //$taxValue = 0;
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        if($row->fc_tax_id != '' && $row->fc_tax_id != 0 && $row->freight_price != '' && $row->freight_price > 0) {
                            $sqlTax = "SELECT * FROM tax WHERE tax_id = {$row->fc_tax_id}";
                            $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
                            
                            if($resultTax !== false && $resultTax->num_rows > 0) {
                                $rowTax = $resultTax->fetch_object();
                                $taxValue = $rowTax->tax_value;
                                
                            if($row->freight_rule == 1){
                                    $totalFreight_Price = $row->freight_price * $row->send_weight;
                                    
                                }else{
                                    $totalFreight_Price = $row->freight_price * $row->freight_quantity;
                                    
                                }
                                if($rowTax->tax_category == 1) {
                                    $totalFreightPrice = ($totalFreight_Price) / ((100 - $taxValue) / 100);
                                    $creditFreightPrice = $totalFreight_Price;
                                } else {
                                    $totalFreightPrice = $totalFreight_Price;
                                    $creditFreightPrice = $totalFreight_Price - ($totalFreight_Price) * ($taxValue / 100);
                                }
                            } else {
                                $totalFreightPrice = $row->freight_price * $row->freight_quantity;
                                $creditFreightPrice = ($row->freight_price * $row->freight_quantity) - (($row->freight_price * $row->freight_quantity) * ($taxValue / 100)) ;
                                $taxValue = 0;
                            }
                        } else if($row->freight_price != '' && $row->freight_price > 0) {
                            if($row->freight_rule == 1){
                                    $totalFreightPrice = $row->freight_price * $row->send_weight;
                                    $creditFreightPrice = $totalFreightPrice;
                                }else{
                                    $totalFreightPrice = $row->freight_price * $row->freight_quantity;
                                    $creditFreightPrice = $totalFreightPrice;
                                }
                            $taxValue = 0;
                        }else {
                            $totalFreightPrice = 0;
                            $creditFreightPrice = 0;
                            $taxValue = 0;
                        }
                        
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 140000) {
                                if($row->send_weight < 0){
                                    $totalFreightPrice1 = $totalFreightPrice * -1;
                                $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalFreightPrice1})";
                                }else{
                                $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalFreightPrice})";
                                }
                            } elseif($rowAccount->account_no == $aFreight) {
                                $amount = $totalFreightPrice * ($taxValue / 100);
                                if($row->send_weight < 0){
                                    $amount1 = $amount * -1;
                                $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                }else{
                                $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                }
                            } 
                            // elseif($rowAccount->account_no == 210103) {
                            //     if($row->send_weight < 0){
                            //         $creditFreightPrice1 = $creditFreightPrice * -1;
                            //     $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditFreightPrice1})";
                            //     }else{
                            //     $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditFreightPrice})";
                            //     }
                            // }
                            elseif($rowAccount->account_no == 123456) {
                                if($row->send_weight < 0){ //Retur Debit
                                    $totalFreightPrice1 = $totalFreightPrice * -1;
                                $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalFreightPrice1})";
                                }else{ //Credit
                                    $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalFreightPrice})";
                                }
                            } 
                        }
                    } else {
                        $boolContinue = false;
                        echo 'e';
                    } //FREIGHT SHRINK

                    // $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 2 AND account_no in (140000, 210103)";
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 2 AND account_no in (140000, '{$aFreight}', 210103)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        //if($row->fc_tax_id != '') {
                        $sqlTax = "SELECT a.*, c.`tax_category`, c.`tax_value`,
                                    COALESCE(ROUND(CASE WHEN c.tax_category = 1 THEN a.amt_claim / ((100 - COALESCE(c.tax_value,0))/100) ELSE a.amt_claim END,10),0) AS freight_susut_credit,
                                    COALESCE(ROUND(CASE WHEN c.tax_category = 1 THEN a.amt_claim  ELSE a.amt_claim - (a.amt_claim * (COALESCE(c.tax_value,0)/100)) END,10),0) AS freight_susut_debit,
                                    COALESCE(ROUND((CASE WHEN c.tax_category = 1 THEN a.amt_claim / ((100 - COALESCE(c.tax_value,0))/100) ELSE a.amt_claim END) - 
                                    (CASE WHEN c.tax_category = 1 THEN a.amt_claim  ELSE a.amt_claim - (a.amt_claim * (COALESCE(c.tax_value,0)/100)) END),10),0) AS tax_susut_debit,
                                    b.`freight_cost_id`,
                                    b.`fc_tax_id`
                                    FROM transaction_shrink_weight a
                                    LEFT JOIN `transaction` b ON a.`transaction_id` = b.`transaction_id`
                                    LEFT JOIN tax c ON c.`tax_id` = b.`fc_tax_id`  
                                   WHERE a.`transaction_id` = {$transactionId}";
                        $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
                            
                        if($resultTax !== false && $resultTax->num_rows > 0) {
                            $rowTax = $resultTax->fetch_object();
                                
                            if($rowTax->freight_cost_id != ''){
                                $totalFreightShrink = $rowTax->freight_susut_debit;
                                $creditFreightShrink = $rowTax->freight_susut_credit;
                                $taxShrink = $rowTax->tax_susut_debit;
                            }else{
                                $totalFreightShrink = 0;
                                $creditFreightShrink = 0;
                                $taxShrink = 0;
                            }
                        } else {
                            $totalFreightShrink = 0;
                            $creditFreightShrink = 0;
                            $taxShrink = 0;
                        }
                        
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 140000) {
                                if($row->send_weight < 0){ //credit
                                    $creditFreightShrink1 = $creditFreightShrink * -1;
                                    $insertValues .= "(1, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$creditFreightShrink1})";
                                }else{ //debit
                                    $insertValues .= "(2, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$creditFreightShrink})";
                                }
                            } elseif($rowAccount->account_no == $aFreight) {
                                //$amount = $totalFreightPrice * ($taxValue / 100);
                                if($row->send_weight < 0){
                                    $taxShrink1 = $taxShrink * -1;
                                $insertValues .= "(2, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$taxShrink1})";
                                }else{
                                $insertValues .= "(1, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$taxShrink})";
                                }
                            } 
                            elseif($rowAccount->account_no == 210103) {
                                if($row->send_weight < 0){
                                    $totalFreightShrink1 = $totalFreightShrink * -1;
                                $insertValues .= "(2, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalFreightShrink1})";
                                }else{
                                $insertValues .= "(1, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalFreightShrink})";
                                }
                            }
                            // elseif($rowAccount->account_no == 123456) {
                            //     if($row->send_weight < 0){
                            //         $creditFreightShrink1 = $creditFreightShrink * -1;
                            //         $insertValues .= "(2, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditFreightShrink1})";
                            //     }else{
                            //         $insertValues .= "(1, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditFreightShrink})";
                            //     }
                            // } 
                        }
                    } else {
                        $boolContinue = false;
                        echo 'f';
                    } //SUSUT LUAR BIASA
                    
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 2 AND account_no in (520100, '{$aFreight}', 210103)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if ($resultAccount !== false && $resultAccount->num_rows > 0) {
                        //if($row->fc_tax_id != '') {
                        $sqlTax = "SELECT a.*, c.`tax_category`, c.`tax_value`,
                                    COALESCE(ROUND(CASE WHEN c.tax_category = 1 THEN a.amt_claim / ((100 - COALESCE(c.tax_value,0))/100) ELSE a.amt_claim END,10),0) AS freight_susut_credit,
                                    COALESCE(ROUND(CASE WHEN c.tax_category = 1 THEN a.amt_claim  ELSE a.amt_claim - (a.amt_claim * (COALESCE(c.tax_value,0)/100)) END,10),0) AS freight_susut_debit,
                                    COALESCE(ROUND((CASE WHEN c.tax_category = 1 THEN a.amt_claim / ((100 - COALESCE(c.tax_value,0))/100) ELSE a.amt_claim END) - 
                                    (CASE WHEN c.tax_category = 1 THEN a.amt_claim  ELSE a.amt_claim - (a.amt_claim * (COALESCE(c.tax_value,0)/100)) END),10),0) AS tax_susut_debit,
                                    b.`freight_cost_id`,
                                    b.`fc_tax_id`
                                    FROM transaction_additional_shrink a
                                    LEFT JOIN `transaction` b ON a.`transaction_id` = b.`transaction_id`
                                    LEFT JOIN tax c ON c.`tax_id` = b.`fc_tax_id`  
                                    WHERE a.`transaction_id` = {$transactionId}";
                        $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);

                        if ($resultTax !== false && $resultTax->num_rows > 0) {
                            $rowTax = $resultTax->fetch_object();

                            if ($rowTax->freight_cost_id != '') {
                                $totalFreightShrink = $rowTax->freight_susut_debit;
                                $creditFreightShrink = $rowTax->freight_susut_credit;
                                $taxShrink = $rowTax->tax_susut_debit;
                            } else {
                                $totalFreightShrink = 0;
                                $creditFreightShrink = 0;
                                $taxShrink = 0;
                            }
                        } else {
                            $totalFreightShrink = 0;
                            $creditFreightShrink = 0;
                            $taxShrink = 0;
                        }

                        while ($rowAccount = $resultAccount->fetch_object()) {
                            if ($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if ($rowAccount->account_no == 520100) {
                                if ($row->send_weight < 0) {
                                    $creditFreightShrink1 = $creditFreightShrink * -1;
                                    $insertValues .= "(1, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, 'add_shrink_fc', {$creditFreightShrink1})";
                                } else {
                                    $insertValues .= "(2, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, 'add_shrink_fc', {$creditFreightShrink})";
                                }
                            } elseif ($rowAccount->account_no == $aFreight) {
                                //$amount = $totalFreightPrice * ($taxValue / 100);
                                if ($row->send_weight < 0) {
                                    $taxShrink1 = $taxShrink * -1;
                                    $insertValues .= "(2, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'add_shrink_fc', {$taxShrink1})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId},  {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'add_shrink_fc', {$taxShrink})";
                                }
                            } elseif ($rowAccount->account_no == 210103) {
                                if ($row->send_weight < 0) {
                                    $totalFreightShrink1 = $totalFreightShrink * -1;
                                    $insertValues .= "(2, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'add_shrink_fc', {$totalFreightShrink1})";
                                } else {
                                    $insertValues .= "(1, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, 'add_shrink_fc', {$totalFreightShrink})";
                                }
                            }
                        }
                    } else {
                        $boolContinue = false;
                        echo 'f';
                    }//HANDLING
                    // echo " -- HANDLING -- | " ;
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 9 AND account_no in (140000, 1245678)";
                    // $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 9 AND account_no in (140000, '{$aHandling}', 210106)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        if($row->handling_cost_id != '') {
                            $sqlTax = "SELECT tx.* FROM tax tx
                            LEFT JOIN vendor_handling vh ON vh.`pph_tax_id` = tx.`tax_id`
                            LEFT JOIN vendor_handling_cost vhc ON vhc.`vendor_handling_id` = vh.`vendor_handling_id`
                            WHERE vhc.`handling_cost_id` = {$row->handling_cost_id}";
                            $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
                            
                            if($resultTax !== false && $resultTax->num_rows > 0) {
                                $rowTax = $resultTax->fetch_object();
                                $taxValue = $rowTax->tax_value;
                                
                            if($row->vendor_handling_rule == 1){
                                    $totalHandling_Price = $row->handling_price * $row->send_weight;
                                    
                                }else{
                                    $totalHandling_Price = $row->handling_price * $row->handling_quantity;
                                    
                                }
                                if($rowTax->tax_category == 1) {
                                    $totalHandlingPrice = ($totalHandling_Price) / ((100 - $taxValue) / 100);
                                    $creditHandlingPrice = $totalHandling_Price;
                                } else {
                                    $totalHandlingPrice = $totalHandling_Price;
                                    $creditHandlingPrice = $totalHandling_Price - ($totalHandling_Price) * ($taxValue / 100);
                                }
                            } else {
                                $totalHandlingPrice = $row->handling_price * $row->handling_quantity;
                                $creditHandlingPrice = ($row->handling_price * $row->handling_quantity) - (($row->handling_price * $row->handling_quantity) * ($taxValue / 100)) ;
                                $taxValue = 0;
                            }
                        } else {
                            $totalHandlingPrice = 0;
                            $creditHandlingPrice = 0;
                            $taxValue = 0;
                        }
                        
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 140000) { //stock
                                if($row->send_weight < 0){
                                    $totalHandlingPrice1 = $totalHandlingPrice * -1;
                                $insertValues .= "(2, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalHandlingPrice1})";
                                }else{
                                $insertValues .= "(1, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalHandlingPrice})";
                                }
                            } elseif($rowAccount->account_no == 230204) {
                                $amount = $totalHandlingPrice * ($taxValue / 100);
                                if($row->send_weight < 0){
                                    $amount1 = $amount * -1;
                                $insertValues .= "(1, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
                                }else{
                                $insertValues .= "(2, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                                }
                            } 
                            // elseif($rowAccount->account_no == 210106) {
                            //     if($row->send_weight < 0){
                            //         $creditHandlingPrice1 = $creditHandlingPrice * -1;
                            //     $insertValues .= "(1, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditHandlingPrice1})";
                            //     }else{
                            //     $insertValues .= "(2, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditHandlingPrice})";
                            //     }
                            // }
                            elseif($rowAccount->account_no == 1245678) { //unbilled Handling
                                if($row->send_weight < 0){
                                    $totalHandlingPrice1 = $totalHandlingPrice * -1;
                                $insertValues .= "(1, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalHandlingPrice1})";
                                }else{
                                $insertValues .= "(2, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalHandlingPrice})";
                                }
                            } 
                        }
                    } else {
                        echo 'test2';
                        $boolContinue = false; //UNLOADING
                    }
                    // echo " -- UNLOADING -- | " ;
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 3 AND account_no in (140000, 1234567)";
                    // $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (6,3) AND account_no in (140000, '{$aUnloading}', 210104)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        if($row->uc_tax_id != '') {
                            $sqlTax = "SELECT * FROM tax WHERE tax_id = {$row->uc_tax_id}";
                            $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
                            
                            if($resultTax !== false && $resultTax->num_rows > 0) {
                                $rowTax = $resultTax->fetch_object();
                                $taxValue = 0;
                                
                                if($rowTax->tax_category == 1) {
                                    $totalUnloadingPrice = $row->unloading_price / ((100 - $taxValue) / 100);
                                    $creditUnloadingPrice = $row->unloading_price;
                                } else {
                                    $totalUnloadingPrice = $row->unloading_price;
                                    $creditUnloadingPrice = $row->unloading_price - $row->unloading_price * ($taxValue / 100);
                                }
                            } else {
                                $totalUnloadingPrice = $row->unloading_price;
                                $creditUnloadingPrice = $row->unloading_price;
                                $taxValue = 0;
                            }
                        } else {
                            $totalUnloadingPrice = 0;
                            $creditUnloadingPrice = 0;
                            $taxValue = 0;
                        }
                        
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 140000) { //Stock
                                //echo 'betul betul';
                                if($row->send_weight < 0){
                                    $totalUnloadingPrice1 = $totalUnloadingPrice * -1;
                                $insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalUnloadingPrice1})";
                                }else{
                                $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalUnloadingPrice})";
                                }
                            } elseif($rowAccount->account_no == 230203) {
                                $amount = $totalUnloadingPrice * ($taxValue / 100);
                                if($row->send_weight < 0){
                                    $amount1 = $amount * -1;
                                $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$amount1})";
                                }else{
                                $insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$amount})";
                                }
                            } 
                            // elseif($rowAccount->account_no == 210104) {
                            //     if($row->send_weight < 0){
                            //         $creditUnloadingPrice1 = $creditUnloadingPrice * -1;
                            //     $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$creditUnloadingPrice1})";
                            //     }else{
                            //     $insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$creditUnloadingPrice})";
                            //     }
                            // }
                            elseif($rowAccount->account_no == 1234567) {  //Unbilled
                                if($row->send_weight < 0){
                                    $totalUnloadingPrice1 = $totalUnloadingPrice * -1;
                                $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalUnloadingPrice1})";
                                }else{
                                $insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalUnloadingPrice})";
                                }
                            } 
                        }
                    } else {
                        $boolContinue = false;
                        echo 'g';
                    }

                    // </editor-fold>
                    
                } elseif($row->transaction_type == 2) { //OUT
                
				if($row->sales_status == 3){
                $shipment_code = $row->shipment_code;
					$shipment_code1 = '-S-';
				    $pos1 = strpos($shipment_code, $shipment_code1);
                // <editor-fold defaultstate="collapsed" desc="nota timbang">
                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (0,1) AND account_no in (120000, 230100, {$row->sales_account}) GROUP BY account_no";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
					 if($pos1 !== FALSE){
					
					$newSalesPrice2 = 0;
                    $taxValue = 0;
                    $totalSalesPrice = 0;
					
					 }else{
                    $newSalesPrice1 = round($row->price * $row->quantity,2);
					$newSalesPrice2 = round($newSalesPrice1 * $row->exchange_rate,0);
					//$salesPrice = $row->quantity * $row->sales_price_converted;
                    $taxValue = ($row->ppn_buyer / 100 * $newSalesPrice2);
                    $totalSalesPrice = $newSalesPrice2 + $taxValue;
					 }
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 120000) {
							if($row->quantity < 0){
								$totalSalesPrice1 = $totalSalesPrice *-1;
                            $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalSalesPrice1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalSalesPrice})";
							}
                        } elseif($rowAccount->account_no == 230100) {
							if($row->quantity < 0){
								$taxValue1 = $taxValue *-1;
                            $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$taxValue1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$taxValue})";
							}
                        } elseif($rowAccount->account_no == $row->sales_account) {
							if($row->quantity < 0){
								$newSalesPrice21 = $newSalesPrice2 *-1;
                            $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$newSalesPrice21})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$newSalesPrice2})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
                }
			}  
                // </editor-fold>
                
                // <editor-fold defaultstate="collapsed" desc="cogs">
                
                $totalCogsPrice = 0;
                $totalCogsShrink = 0;
                $totalCogsFC = 0;
                $totalCogsUC = 0;
                $totalCogsStock = 0;
                $sqlCogs = "SELECT d.*, c.price_converted, t.shrink, t.freight_quantity, t.freight_price, t.unloading_price, t.handling_quantity, vhc.price_converted,
			f.ppn_tax_id AS fc_ppn_tax_id, f.ppn AS fc_ppn, fctxppn.tax_category AS fc_ppn_tax_category, t2.shrink AS susut,
            f.pph_tax_id AS fc_pph_tax_id, f.pph AS fc_pph, fctxpph.tax_category AS fc_pph_tax_category,
            l.ppn_tax_id AS uc_ppn_tax_id, l.ppn AS uc_ppn, uctxppn.tax_category AS uc_ppn_tax_category,
            l.pph_tax_id AS uc_pph_tax_id, l.pph AS uc_pph, uctxpph.tax_category AS uc_pph_tax_category,
			vh.ppn_tax_id AS vh_ppn_tax_id, vh.ppn AS vh_ppn, vhtxppn.tax_category AS vh_ppn_tax_category,
            vh.pph_tax_id AS vh_pph_tax_id, vh.pph AS vh_pph, vhtxpph.tax_category AS vh_pph_tax_category,
			d.quantity * c.price_converted AS cogs_amount,
			CASE WHEN t.delivery_status = 2 THEN (d.percent_taken / 100) * (t.quantity * t.freight_price)
			ELSE (d.percent_taken / 100) * (t.freight_quantity * t.freight_price) END AS freight_total,
			CASE WHEN t.delivery_status = 2 AND t.freight_cost_id IS NOT NULL THEN (d.quantity/t.freight_quantity) * COALESCE((SELECT amt_claim FROM transaction_shrink_weight WHERE transaction_id = d.transaction_id),0)
	    WHEN t.freight_cost_id IS NOT NULL THEN (d.percent_taken / 100) * COALESCE((SELECT amt_claim FROM transaction_shrink_weight WHERE transaction_id = d.transaction_id),0) ELSE 0 END AS freight_shrink,
			(d.percent_taken / 100) * t.unloading_price AS unloading_total, sh.shipment_code, (d.percent_taken / 100) * (t.handling_quantity * vhc.price_converted) AS handling_total, t2.quantity AS bl
            FROM `transaction` t2
                LEFT JOIN `delivery` d 
                    ON d.shipment_id = t2.shipment_id
				LEFT JOIN shipment sh
					ON d.shipment_id = sh.shipment_id
                LEFT JOIN `transaction` t
                    ON t.transaction_id = d.transaction_id
                LEFT JOIN stockpile_contract sc
					ON sc.`stockpile_contract_id` = t.`stockpile_contract_id`
			    LEFT JOIN contract c
					ON c.`contract_id` = sc.`contract_id`
			    LEFT JOIN freight_cost fc
					ON fc.`freight_cost_id` = t.`freight_cost_id`
			    LEFT JOIN freight f
					ON fc.`freight_id` = f.`freight_id`
			    LEFT JOIN labor l
					ON l.`labor_id` = t.`labor_id`
			    LEFT JOIN tax fctxpph
					ON fctxpph.tax_id = f.pph_tax_id
			    LEFT JOIN tax fctxppn
					ON fctxppn.tax_id = f.ppn_tax_id
			    LEFT JOIN tax uctxpph
			        ON uctxpph.tax_id = l.pph_tax_id
			    LEFT JOIN tax uctxppn
					ON uctxppn.tax_id = l.ppn_tax_id
				LEFT JOIN vendor_handling_cost vhc
					ON vhc.handling_cost_id = t.handling_cost_id
				LEFT JOIN vendor_handling vh
					ON vh.vendor_handling_id = vhc.vendor_handling_id
				LEFT JOIN tax vhtxpph
					ON vhtxpph.tax_id = vh.pph_tax_id
				LEFT JOIN tax vhtxppn
					ON vhtxppn.tax_id = vh.ppn_tax_id
				
                WHERE t2.transaction_id =  {$transactionId}";
                $resultCogs = $myDatabase->query($sqlCogs, MYSQLI_STORE_RESULT);
                
                if($resultCogs !== false && $resultCogs->num_rows > 0) {
                    while($rowCogs = $resultCogs->fetch_object()) {
						
					$shipmentCode11 = $rowCogs->shipment_code;
					$shipmentCode12 = '-S-';
				    $pos12 = strpos($shipmentCode11, $shipmentCode12);	
						
					if($rowCogs->fc_pph_tax_category == 1 && $rowCogs->fc_pph_tax_id != ''){
			         $pphfc2 = ($rowCogs->freight_total / ((100 - $rowCogs->fc_pph) / 100)) - $rowCogs->freight_total;
					 $pphfcShrink2 = ($rowCogs->freight_shrink / ((100 - $rowCogs->fc_pph) / 100)) - $rowCogs->freight_shrink;
				 
				 }elseif($rowCogs->fc_pph_tax_category == 0 && $rowCogs->fc_pph_tax_id != ''){
					  $pphfc2 =  0;
					  $pphfcShrink2 = 0;
					 //$pphfc =  $row->freight_total - ($row->freight_total * ((100 - $fc_pph) / 100));
				 }else{
				 	$pphfc2 = 0;
					$pphfcShrink2 = 0;
				 }
				 
				 $freightTotal2 = ($rowCogs->freight_total + $ppnfc2 + $pphfc2) - ($rowCogs->freight_shrink + $pphfcShrink2);
				 
				 if($rowCogs->vh_pph_tax_category == 1 && $rowCogs->vh_pph_tax_id != ''){
			         $pphvh2 = ($rowCogs->handling_total / ((100 - $rowCogs->vh_pph) / 100)) - $rowCogs->handling_total;
				 
				 }elseif($rowCogs->vh_pph_tax_category == 0 && $rowCogs->vh_pph_tax_id != ''){
					  $pphvh2 =  0;  
					 //$pphfc =  $row->freight_total - ($row->freight_total * ((100 - $fc_pph) / 100));
				 }else{
				 	$pphvh2 = 0;
				 }
				 
				 $handlingTotal2 = $rowCogs->handling_total + $pphvh2;
				 
				 if($rowCogs->uc_pph_tax_category == 1 &&$rowCogs->uc_pph_tax_id != ''){
			         $pphuc2 = ($rowCogs->unloading_total / ((100 - $rowCogs->uc_pph) / 100)) - $rowCogs->unloading_total;
					 
				 }elseif($rowCogs->uc_pph_tax_category == 0 && $rowCogs->uc_pph_tax_id != ''){
					 $pphuc2 =  0;
					 //$pphuc =  $row->unloading_total - ($row->unloading_total * ((100 - $row->uc_pph) / 100));
				 }else{
				 	$pphuc2 = 0;
				 }
				 
				 $unloadingTotal2 = $rowCogs->unloading_total + $ppnuc2 + $pphuc2;	
    
                $totalCogs2 = $rowCogs->cogs_amount + $freightTotal2 + $unloadingTotal2 + $handlingTotal2;
                
                $quantity_total= $rowCogs->quantity;
                $total_quantity = $quantity_total+$total_quantity;
                
                $pks_total = $rowCogs->cogs_amount;
                $total_pks = $pks_total+$total_pks;
                
                $fc_total = $freightTotal2;
                $total_fc = $fc_total+$total_fc;
                
                $uc_total = $unloadingTotal2;
                $total_uc = $uc_total+$total_uc;
                
                $hc_total = $handlingTotal2;
                $total_hc = $hc_total+$total_hc;
                
                $cogs_total = $totalCogs2;
                $total_cogs = $cogs_total+$total_cogs;
                
                
                $amtUnit = $total_cogs / $total_quantity;
                $shrink = $amtUnit * $rowCogs->susut;
                $total_pks2 = $total_pks - $shrink;
                                
                $qty = $rowCogs->bl;					
                    }
                }
                
			if($pos12 !== FALSE){
				
				$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1) AND account_no in (510201, 140000)";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 510201) {
							if($qty < 0){
								//$total_cogs1 = $total_cogs *-1;
                            $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}
                        } elseif($rowAccount->account_no == 140000) {
							if($qty < 0){
								//$total_cogs1 = $total_cogs * -1;
                            $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
                }
			}else if($row->sales_type == 3){
				
				$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1) AND account_no in (141000, 140000)";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 141000) {
							if($qty < 0){
								//$total_cogs1 = $total_cogs *-1;
                            $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}
                        } elseif($rowAccount->account_no == 140000) {
							if($qty < 0){
								//$total_cogs1 = $total_cogs * -1;
                            $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
                }
			}else{
				
                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (510101, 510201, 510102, 510103, 510104, 140000)";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 510101) {
							if($qty < 0){
								//$total_pks21 = $total_pks2 * -1;
                            $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_pks2})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_pks2})";
							}
                        } elseif($rowAccount->account_no == 510201) {
							if($qty < 0){
								//$shrink1 = $shrink * -1;
                            $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$shrink})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$shrink})";
							}
                        } elseif($rowAccount->account_no == 510102) {
							if($qty < 0){
								//$total_fc1 = $total_fc * -1;
                            $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_fc})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_fc})";
							}
                        } elseif($rowAccount->account_no == 510103) {
							if($qty < 0){
								//$total_uc1 = $total_uc * -1;
                            $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_uc})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_uc})";
							}
                        } elseif($rowAccount->account_no == 510104) {
							if($qty < 0){
								//$total_hc1 = $total_hc * -1;
                            $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_hc})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_hc})";
							}
                        } elseif($rowAccount->account_no == 140000) {
							if($qty < 0){
								//$total_cogs1 = $total_cogs * -1;
                            $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
                }
                
			}  // </editor-fold>
            }
		}
            
        } else {
            $boolContinue = false;
        }
        
        // </editor-fold>
    } elseif($paymentId != 'NULL') {
        // <editor-fold defaultstate="collapsed" desc="payment">
        if($source == 'PAYMENT' || $source == 'PETTY CASH' || $source == 'PAYMENT ADMIN'){
            $sql = "DELETE FROM general_ledger WHERE payment_id = {$paymentId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        }elseif($source == 'RETURN PAYMENT'){
            $sql = "DELETE FROM general_ledger WHERE payment_id = {$paymentId} AND general_ledger_module = 'RETURN PAYMENT'";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		//echo 'benar';
		}
        $sql = "SELECT p.*, a.account_no, ap.account_type AS ap_account_type, ap.account_no AS ap_account_no,
                        b.currency_id AS b_currency_id, ta.account_no AS gv_account_no, gv.pph_tax_id AS gv_pph_tax_id, ta.account_no AS at_account_no,
                        f.pph_tax_id AS f_pph_tax_id, f.pph AS f_pph_tax, f.ppn AS f_ppn_tax, atf.account_no AS f_account_no, u.pph_tax_id AS u_pph_tax_id, 
                        atu.account_no AS u_account_no, tfc.tax_category AS fc_tax_category,
                        vh.pph_tax_id AS vh_pph_tax_id, vh.pph AS vh_pph_tax, atvh.account_no AS vh_account_no, tvhc.tax_category AS vhc_tax_category
                FROM payment p 
                INNER JOIN bank b
                    ON b.bank_id = p.bank_id
                INNER JOIN account a
                    ON a.account_id = b.account_id
                INNER JOIN account ap
                    ON ap.account_id = p.account_id 
                LEFT JOIN general_vendor gv
                    ON gv.general_vendor_id = p.general_vendor_id
                LEFT JOIN tax t
                    ON t.tax_id = gv.pph_tax_id
                LEFT JOIN account ta
                    ON ta.account_id = t.account_id	
                LEFT JOIN freight f
                    ON f.freight_id = p.freight_id
                LEFT JOIN tax tfc
                    ON tfc.tax_id = f.pph_tax_id
                LEFT JOIN account atf
                    ON atf.account_id = tfc.account_id
                LEFT JOIN labor u
                    ON u.labor_id = p.labor_id
                LEFT JOIN tax tu
                    ON tu.tax_id = u.pph_tax_id
                LEFT JOIN account atu
                    ON atu.account_id = tu.account_id
                LEFT JOIN vendor_handling vh
                    ON vh.vendor_handling_id = p.vendor_handling_id
                LEFT JOIN tax tvhc
                    ON tvhc.tax_id = vh.pph_tax_id
                LEFT JOIN account atvh
                    ON atvh.account_id = tvhc.account_id
                WHERE p.payment_id = {$paymentId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        // echo $sql;
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            
			$paymentStatus = $row->payment_status;
			$payment_type = $row->payment_type;
			
            if($row->stockpile_contract_id != '') { //PKS
                if($row->payment_method == 1) {
                    $totalContractAmount = 0;
                    $totalContractDP = 0;
                    
                    $sqlContract = "SELECT sc.*, con.price_converted, con.quantity, 
                                        (
                                            SELECT COALESCE(SUM(amount_journal), 0) FROM payment
                                            WHERE stockpile_contract_id = sc.stockpile_contract_id
                                            AND payment_method = 2 AND payment_status = 0
                                        ) AS total_dp,
                                        (
                                            SELECT COALESCE(SUM(ppn_journal), 0) FROM payment
                                            WHERE stockpile_contract_id = sc.stockpile_contract_id
                                            AND payment_method = 2 AND payment_status = 0
                                        ) AS total_ppn,
										(
                                            SELECT a.account_no FROM account a LEFT JOIN payment p
											ON p.account_id = a.account_id
                                            WHERE p.stockpile_contract_id = sc.stockpile_contract_id
                                            AND p.payment_method = 2 AND p.payment_status = 0 LIMIT 1
                                        ) AS account_no
                                    FROM stockpile_contract sc
                                    INNER JOIN contract con
                                        ON con.contract_id = sc.contract_id
                                    WHERE sc.stockpile_contract_id = {$row->stockpile_contract_id}";
                    $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);
                    
                    if($resultContract !== false && $resultContract->num_rows == 1) {
                        $rowContract = $resultContract->fetch_object();
                        
                        $totalContractAmount = ceil($rowContract->price_converted * $rowContract->quantity);
                        $totalContractPPN = $rowContract->total_ppn;
						if($rowContract->account_no == 210102){
						    $totalContractDP = 0;
						}else{
						    $totalContractDP = $rowContract->total_dp - $totalContractPPN;
						}
						
                    }
                    
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (0, 7) AND account_no in (210102, 130001, {$row->account_no}, 230204)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 210102) {
								$amountJournal = $row->amount_journal + $totalContractDP;
								if($paymentStatus == 1){
									if($payment_type == 1){
									$insertValues .= "(1, '{$source}', 'Payment', 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountJournal})";	
									}else{
									$insertValues .= "(2, '{$source}', 'Payment', 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountJournal})";
									}
								}else{
									if($payment_type == 1){
									$insertValues .= "(2, '{$source}', 'Payment', 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountJournal})";
									}else{
									$insertValues .= "(1, '{$source}', 'Payment', 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountJournal})";
									}
								}
                            } elseif($rowAccount->account_no == 150410) {
								if($paymentStatus == 1){
									if($payment_type == 1){
									$insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->ppn_journal}), (1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}else{
									$insertValues .= "(2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->ppn_journal}), (1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";	
									}
								}else{
									if($payment_type == 1){
									$insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->ppn_journal}), (2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}else{
									$insertValues .= "(1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->ppn_journal}), (2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}
								}
							} elseif($rowAccount->account_no == 150410) {
								if($paymentStatus == 1){
									if($payment_type == 1){
									$insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}else{
									$insertValues .= "(1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}
								}else{
									if($payment_type == 1){
									$insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}else{
									$insertValues .= "(2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}
								}
                            } elseif($rowAccount->account_no == 130001) {
								if($paymentStatus == 1){
									if($payment_type == 1){
									$insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalContractDP})";
									}else{
									$insertValues .= "(1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalContractDP})";	
									}
								}else{
									if($payment_type == 1){
									$insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalContractDP})";
									}else{
									$insertValues .= "(2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalContractDP})";
									}
								}
                            }  elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
									if($payment_type == 1){
									$insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_journal})";
									}else{
									$insertValues .= "(1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_journal})";
									}
								}else{
									if($payment_type == 1){
									$insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_journal})";
									}else{
									$insertValues .= "(2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_journal})";
									}
								}
                            } elseif($rowAccount->account_no == 230204) {
								if($paymentStatus == 1){
									if($payment_type == 1){
									$insertValues .= "(1, '{$source}', NULL, 1, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->pph_journal})";
									}else{
									$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->pph_journal})";
									}
								}else{
									if($payment_type == 1){
									$insertValues .= "(2, '{$source}', NULL, 1, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->pph_journal})";
									}else{
									$insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->pph_journal})";
									}
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                } elseif($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (0, 7) AND account_no in ({$row->ap_account_no}, 150410, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == $row->ap_account_no) {
								$amountJournal = $row->amount_journal - $row->ppn_journal;
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountJournal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountJournal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == 150410) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->ppn_journal})";
								}else{
								$insertValues .= "(1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->ppn_journal})";	
								}
							}
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            }
			elseif($row->payment_cash_id != '') { 
				echo 'blt';
                // <editor-fold defaultstate="collapsed" desc="payment PKS kontrak">
				if($row->payment_method == 1) {
					
					$cashId = 0;
					$pc_id = 0;
					$acc_dp_pph = 'NULL';
					$acc_dp_ppn = 'NULL';
				  	$sqlcashDP = "SELECT pcdp.payment_cash_id, pcdp.payment_cash_dp, pcdp.`amount_payment` AS down_payment,
                                    (SELECT gv.ppn FROM general_vendor gv LEFT JOIN payment_cash pc ON gv.general_vendor_id = pc.general_vendor_id WHERE pc.payment_cash_id = pcdp.payment_cash_dp) AS gv_ppn,
                                    (SELECT gv.pph FROM general_vendor gv LEFT JOIN payment_cash pc ON gv.general_vendor_id = pc.general_vendor_id WHERE pc.payment_cash_id = pcdp.payment_cash_dp) AS gv_pph,
                                    (SELECT account_id FROM payment_cash WHERE payment_cash_id = pcdp.payment_cash_dp) AS account_id,
                                    (SELECT tx.account_id FROM tax tx LEFT JOIN payment_cash pc ON pc.ppnID = tx.tax_id WHERE pc.payment_cash_id = pcdp.payment_cash_dp) AS acc_dp_ppn,
                                    (SELECT tx.account_id FROM tax tx LEFT JOIN payment_cash pc ON pc.pphID = tx.tax_id WHERE pc.payment_cash_id = pcdp.payment_cash_dp) AS acc_dp_pph,  
                                    (SELECT pph FROM payment_cash WHERE payment_cash_id = pcdp.payment_cash_dp) AS pph,
                                    (SELECT ppn FROM payment_cash WHERE payment_cash_id = pcdp.payment_cash_dp) AS ppn,
                                    (SELECT `type` FROM payment_cash WHERE payment_cash_id = pcdp.payment_cash_dp) AS `type`
                                    FROM payment_cash_dp pcdp 
                                    LEFT JOIN payment_cash pc ON pc.`payment_cash_id` = pcdp.`payment_cash_id` 
                                    WHERE pc.payment_id = {$paymentId}";
					$resultCashDP = $myDatabase->query($sqlcashDP, MYSQLI_STORE_RESULT);
                    
                   if($resultCashDP !== false && $resultCashDP->num_rows > 0) {
						$dp_type = array();
						while($rowCashDP = mysqli_fetch_array($resultCashDP)){

							$accountDP = $rowCashDP['account_id'];
							
							if($rowCashDP['acc_dp_ppn'] != ''){
							$acc_dp_ppn = $rowCashDP['acc_dp_ppn'];
							}else{
							$acc_dp_ppn = 'NULL';
							}
							
							//$acc_dp_ppn = $rowCashDP['acc_dp_ppn'];
							if($rowCashDP['acc_dp_pph'] != ''){
							$acc_dp_pph = $rowCashDP['acc_dp_pph'];
							}else{
							$acc_dp_pph = 'NULL';
							}
							$ppn_dp = $rowCashDP['gv_ppn'];
							$pph_dp = $rowCashDP['gv_pph'];
							$ppn = $rowCashDP['ppn'];
							$pph = $rowCashDP['pph'];
							$cashId = $rowCashDP['payment_cash_dp'];
							$down_payment = $rowCashDP['down_payment'];
							$dp_type[] = $rowCashDP['type'];	 	
							$pc_dp_type =  implode(', ', $dp_type);	
					
							
							if($ppn == 0){
								$dpPPN = 0;	
							}else{
								$dpPPN = $down_payment * ($ppn_dp/100);
							}
							if($pph == 0){
								$dpPPh = 0;	
							}else{
								$dpPPh = $down_payment * ($pph_dp/100);
							}
								//$downPayment = ($down_payment + $dpPPN) - $dpPPh;
							
						
						
				
				if($acc_dp_ppn != '' || $acc_dp_ppn != 0 || $acc_dp_ppn != 'NULL') {
					$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$pc_dp_type}) AND account_no IN (150410)";
					$resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                   if($resultAccount !== false && $resultAccount->num_rows == 1) {
                        $rowAccount = $resultAccount->fetch_object();
							$accountId_dp = $rowAccount->account_id;
							
						}
					}
                
          
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
						
						
							if($cashId != '' || $cashId != 0 || $cashId != 'NULL') {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$accountDP}, NULL, {$down_payment}),";
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$acc_dp_pph}, NULL, {$dpPPh}),";
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$accountId_dp}, NULL,  {$dpPPN})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$accountDP}, NULL, {$down_payment}),";
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$acc_dp_pph}, NULL, {$dpPPh}),";
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$accountId_dp}, NULL,  {$dpPPN})";	
								}
                            }  
			
						}
				   }
			    }
				
                if($row->payment_method == 1) {
                    $totalCashAmount = 0;
                    $totalCashtDP = 0;
					
                    
                    $sqlPC = "SELECT pc.*, a.account_no, a.account_name, apph.account_id AS apph_id, apph.account_no AS apph_no, apph.account_name AS apph_name
							  FROM payment_cash pc
								LEFT JOIN account a ON a.`account_id` = pc.`account_id` 
								LEFT JOIN tax txpph ON txpph.`tax_id` = pc.`pphID`
								LEFT JOIN account apph ON apph.`account_id` = txpph.`account_id`
								WHERE pc.`payment_id` = {$paymentId}";
                    $resultPC = $myDatabase->query($sqlPC, MYSQLI_STORE_RESULT);
           			
						
						if($resultPC !== false && $resultPC->num_rows > 0) {
                        while($rowPC = $resultPC->fetch_object()) {
							
						$cashId = $rowPC->payment_cash_id;
						$amountConv = $rowPC->amount_converted;
						
						if($rowPC->apph_id == '' || $rowPC->apph_id == 0 || $rowPC->apph_id == 'NULL'){
							$apph_id = 'NULL';
						}else{
							$apph_id = $rowPC->apph_id;
						}
						
						if($rowPC->ppnID != '' || $rowPC->ppnID != 0 || $rowPC->ppnID != 'NULL') {
							$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$rowPC->type}) AND account_no IN (150410)";
							$resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                   if($resultAccount !== false && $resultAccount->num_rows == 1) {
                        $rowAccount = $resultAccount->fetch_object();
							$accountId = $rowAccount->account_id;
							
						}
					}
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
							if($row->payment_type == 1){
								if($rowPC->payment_cash_id != '' || $rowPC->payment_cash_id != 0 || $rowPC->payment_cash_id != 'NULL') {
								if($paymentStatus == 1){
								if($rowPC->amount_converted < 0){
									$amount_converted1 = $rowPC->amount_converted * -1;
									$pph_converted1 = $rowPC->pph_converted * -1;
                                $insertValues .= "(2, '{$source}', NULL, 1, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$amount_converted1}),";
								$insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$apph_id}, NULL, {$pph_converted1})";
								}else{
								$insertValues .= "(1, '{$source}', NULL, 1, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}),";
								$insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted})";	
								}
								}else{
									if($rowPC->amount_converted < 0){
									$amount_converted1 = $rowPC->amount_converted * -1;
									$pph_converted1 = $rowPC->pph_converted * -1;
								$insertValues .= "(1, '{$source}', NULL, 1, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$amount_converted1}),";
								$insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$apph_id}, NULL, {$pph_converted1})";
									}else{
								$insertValues .= "(2, '{$source}', NULL, 1, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}),";
								$insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted})";
									}								
								}
								}
							}else{
                           if($rowPC->payment_cash_id != '' || $rowPC->payment_cash_id != 0 || $rowPC->payment_cash_id != 'NULL') {
							   if($paymentStatus == 1){
								if($rowPC->amount_converted < 0){
									$amount_converted1 = $rowPC->amount_converted * -1;
									$pph_converted1 = $rowPC->pph_converted * -1;
									$ppn_converted1 = $rowPC->ppn_converted * -1;
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$amount_converted1}),";
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$apph_id}, NULL, {$pph_converted1}),";
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$accountId}, NULL,  {$ppn_converted1})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}),";
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted}),";
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$accountId}, NULL,  {$rowPC->ppn_converted})";	
								}
							   }else{
								 if($rowPC->amount_converted < 0){
									$amount_converted1 = $rowPC->amount_converted * -1;
									$pph_converted1 = $rowPC->pph_converted * -1;
									$ppn_converted1 = $rowPC->ppn_converted * -1;
								$insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$amount_converted1}),";
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$apph_id}, NULL, {$pph_converted1}),";
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$accountId}, NULL,  {$ppn_converted1})";  
								 
								 }else{
								$insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}),";
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted}),";
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$accountId}, NULL,  {$rowPC->ppn_converted})";  
								 }
							   }
                            }  
							}
						}	
                    } else {
                        $boolContinue = false;
                    }
						
				}
				if($row->payment_method == 1) {
                    $sqlPayment = "SELECT b.account_id, amount_journal FROM payment p LEFT JOIN bank b ON p.bank_id = b.bank_id WHERE p.payment_id = {$paymentId}";
                    $resultPayment = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT);
           			
						if($resultPayment !== false && $resultPayment->num_rows > 0) {
                        while($rowPayment = $resultPayment->fetch_object()) {
							
						
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
						   if($row->payment_type ==1){
							   if($rowPayment->account_id != '' || $rowPayment->account_id != 0 || $rowPayment->account_id != 'NULL') {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Payment', 1, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$rowPayment->amount_journal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Payment', 1, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$rowPayment->amount_journal})";	
								}
                            }
						   }else{
						   
						   if(($rowPayment->account_id != '' || $rowPayment->account_id != 0 || $rowPayment->account_id != 'NULL') && $row->amount_journal < 0) {
								$amountJournal = $row->amount_journal * -1;
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Payment', 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$amountJournal})";
								}else{
								 $insertValues .= "(1, '{$source}', 'Payment', 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$amountJournal})";	
								}
                            } 
                           elseif($rowPayment->account_id != '' || $rowPayment->account_id != 0 || $rowPayment->account_id != 'NULL') {
							   if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', 'Payment', 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$rowPayment->amount_journal})";
							   }else{
								$insertValues .= "(2, '{$source}', 'Payment', 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$rowPayment->amount_journal})";   
							   }
                            }
						   }
						}	
                    } else {
                        $boolContinue = false;
                    }
						
				}
				
				 if($row->payment_method == 2) {
                    $totalCashAmount = 0;
                    $totalCashtDP = 0;

                    $sqlPC = "SELECT pc.*, a.account_no, a.account_name, apph.account_id AS apph_id, apph.account_no AS apph_no, apph.account_name AS apph_name
							  FROM payment_cash pc
								LEFT JOIN account a ON a.`account_id` = pc.`account_id` 
								LEFT JOIN tax txpph ON txpph.`tax_id` = pc.`pphID`
								LEFT JOIN account apph ON apph.`account_id` = txpph.`account_id`
								WHERE pc.`payment_id` = {$paymentId}";
                    $resultPC = $myDatabase->query($sqlPC, MYSQLI_STORE_RESULT);
						
						if($resultPC !== false && $resultPC->num_rows > 0) {
                        while($rowPC = $resultPC->fetch_object()) {
							
						$cashId = $rowPC->payment_cash_id;
						$amountConv = $rowPC->amount_converted;
						
						if($rowPC->apph_id == '' || $rowPC->apph_id == 0 || $rowPC->apph_id == 'NULL'){
							$apph_id = 'NULL';
						}else{
							$apph_id = $rowPC->apph_id;
						}
						
						if($rowPC->ppnID != '' || $rowPC->ppnID != 0 || $rowPC->ppnID != 'NULL') {
							$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$rowPC->type}) AND account_no IN (150410)";
							$resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                   if($resultAccount !== false && $resultAccount->num_rows == 1) {
                        $rowAccount = $resultAccount->fetch_object();
							$accountId = $rowAccount->account_id;
							
						}
					}
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
							
                           if($rowPC->payment_cash_id != '' || $rowPC->payment_cash_id != 0 || $rowPC->payment_cash_id != 'NULL') {
							   if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}),";
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted}),";
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$accountId}, NULL,  {$rowPC->ppn_converted})";
							   }else{
								$insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}),";
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted}),";
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0,  {$cashId}, {$accountId}, NULL,  {$rowPC->ppn_converted})";   
							   }
                            }  
							
						}	
                    } else {
                        $boolContinue = false;
                    }
						
				}
				 if($row->payment_method == 2) {
                   
                    
                    $sqlPayment = "SELECT b.account_id, amount_journal FROM payment p LEFT JOIN bank b ON p.bank_id = b.bank_id WHERE p.payment_id = {$paymentId}";
                    $resultPayment = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT);
           			
						if($resultPayment !== false && $resultPayment->num_rows > 0) {
                        while($rowPayment = $resultPayment->fetch_object()) {
							
						
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
						   
                           if($rowPayment->account_id != '' || $rowPayment->account_id != 0 || $rowPayment->account_id != 'NULL') {
							   if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$rowPayment->amount_journal})";
							   }else{
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 12, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$rowPayment->amount_journal})";   
							   }
                            }
						   
						}	
                    } else {
                        $boolContinue = false;
                    }
						
				}
					
            } elseif($row->invoice_id != '') { //GENERAL
                // <editor-fold defaultstate="collapsed" desc="payment PKS kontrak">
                if($row->payment_method == 1) {
                    $totalInvoiceAmount = 0;
                    $totalInvoicetDP = 0;
                    
                    $sqlInvoice = "SELECT i.*,
                                        (
                                            SELECT COALESCE(SUM(amount_journal), 0) FROM payment
                                            WHERE invoice_id = i.invoice_id
                                            AND payment_method = 2 AND payment_status = 0
                                        ) AS total_dp
                                    FROM invoice i
                                    WHERE i.invoice_id = {$row->invoice_id}";
                    $resultInvoice = $myDatabase->query($sqlInvoice, MYSQLI_STORE_RESULT);
                    
                    if($resultInvoice !== false && $resultInvoice->num_rows == 1) {
                        $rowInvoice = $resultInvoice->fetch_object();
                        
                       // $totalInvoiceAmount = $rowInvoice->amount;
                       // $totalContractPPN = $rowContract->total_ppn;
						$totalInvoiceDP = $rowInvoice->total_dp;
						
                    }else {
                    echo 'false1';
                    }
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}, 7) AND account_no in ({$row->account_no},{$row->ap_account_no}, 130005)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
                            //1 = Dr
                            //2 = Cr
                            if($rowAccount->account_no == $row->account_no && $row->amount_converted < 0) {
								$amountConverted = $row->amount_converted * -1;
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Payment', 1, 10, {$contractId},  {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL,  {$amountConverted})";
								}else{
								 $insertValues .= "(1, '{$source}', 'Payment', 1, 10, {$contractId},  {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountConverted})";	
								}
                            }  elseif($rowAccount->account_no == $row->ap_account_no && $row->amount_journal < 0 ) {
								$amountJournal = $row->amount_journal * -1;
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 1, 10, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL,  {$amountJournal})";
								}else{
								 $insertValues .= "(2, '{$source}', NULL, 1, 10, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL,    {$amountJournal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 10, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_converted})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 10, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL,    {$row->amount_converted})";	
								}
                            } elseif($rowAccount->account_no == $row->ap_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 10, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL,   {$row->amount_journal})";
								}else{
								 $insertValues .= "(1, '{$source}', NULL, 2, 10, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL,  {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == 130005) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 10, {$contractId},  {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL,  {$totalInvoiceDP})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 10, {$contractId},  {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId},{$accrueId}, 0, 0, {$rowAccount->account_id}, NULL,  {$totalInvoiceDP})";	
								}
                            }  
                        }
                    } else {
                        $boolContinue = false;
						echo 'false2';
                    }
                } elseif($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}, 7) AND account_no in ({$row->ap_account_no}, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
                            //1 = Dr
                            //2 = Cr
                            if($rowAccount->account_no == $row->ap_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 10, {$contractId},  {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL,  {$row->amount_journal})";
								}else{
								 $insertValues .= "(1, '{$source}', 'Down Payment', 2, 10, {$contractId},  {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL,  {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 10, {$contractId},  {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL,  {$row->amount_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 10, {$contractId},  {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL,   {$row->amount_journal})";	
								}
                            } 
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            }  
			elseif($row->vendor_id != '') { //CURAH
           
                if($row->payment_method == 1) {
                    $totalAmount = 0;
                    $totaDP = 0;

                    $debitCurahPrice = 0;
                    $creditCurahPrice = 0;
                    $sqlInv = "SELECT SUBSTRING(inv_notim_no, 1, 2) as methodText FROM invoice_notim WHERE payment_id = {$paymentId}";
                    $resultInv = $myDatabase->query($sqlInv, MYSQLI_STORE_RESULT);
                    if($resultInv !== false){
                        $rowInv= $resultInv->fetch_object();
                        if($rowInv->methodText == 'FP'){
                            $boolNew = true;
                        }
                    }
                    if($boolNew){  //SETTLE TAPI ADA PAYMENT
                        //DP
                        $sqlAccountDp = "SELECT inv.inv_notim_id, SUM(ppd.dpp_dp_settle) AS amountDp, apph.`account_no` AS a_pph,appn.`account_no` AS a_ppn, 
                                         v.`ppn` AS vppn, v.pph AS vpph
                                        FROM invoice_notim inv
                                        INNER JOIN pengajuan_payment_dp ppd ON ppd.inv_notim_id = inv.inv_notim_id
                                        LEFT JOIN vendor v ON v.`vendor_id` = inv.`vendor_id`
                                        LEFT JOIN tax vpph ON vpph.`tax_id` = v.`pph_tax_id`
                                        LEFT JOIN account apph ON apph.`account_id` = vpph.`account_id`
                                        LEFT JOIN tax vppn ON vppn.`tax_id` = v.`ppn_tax_id`
                                        LEFT JOIN account appn ON appn.`account_id` = vppn.`account_id` 
                                        WHERE inv.`payment_id` = {$paymentId} GROUP BY ppd.inv_notim_id";
                        // echo " Curah => " . $sqlAccountDp;
                        $resultAccountDP = $myDatabase->query($sqlAccountDp, MYSQLI_STORE_RESULT);

                        if($resultAccountDP !== false){
                            $rowAccountDp = $resultAccountDP->fetch_object();
                            $creditCurahPrice = $rowAccountDp->amountDp;
                            $ppnVal = $creditCurahPrice * ($rowAccountDp->vppn/100);
                            $pphVal = $creditCurahPrice * ($rowAccountDp->vpph/100);

                            $sqlAccountB = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (210101, 210101, 150410)";
                            $resultAccountB = $myDatabase->query($sqlAccountB, MYSQLI_STORE_RESULT);

                            if($resultAccountB !== false && $resultAccountB->num_rows > 0) {
                                while($rowAccountB = $resultAccountB->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }
                                //1 = Dr
                                //2 = Cr
                                    if($rowAccountB->account_no == 210101) { //payment
                                        if($paymentStatus == 1){
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$creditCurahPrice})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$creditCurahPrice})";	
                                        }
                                    }elseif($rowAccountB->account_no == 210101) {
                                        if($paymentStatus == 1){
                                            $insertValues .= "(2, '{$source}',  'DP', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, 'Return Journal', {$pphVal})";	 
                                        }else{
                                            $insertValues .= "(1, '{$source}',  'DP', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$pphVal})";	 
                                        }
                                    } elseif($rowAccountB->account_no == 150410) {
                                        if($paymentStatus == 1){
                                            $insertValues .= "(1, '{$source}',  'DP', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, 'Return Journal', {$ppnVal})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}',  'DP', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$ppnVal})";	
                                        }
                                    }

            
                                }
                            } else {
                                $boolContinue = false;
                            }
                        }

                        //PAYMENT
                        $sqlAccount2 = "SELECT inv.inv_notim_id, pa.dpp  as amount, pa.`ppn_id`, pa.`ppn_value`,
                                                pa.pph_id, pa.pph_value, pa.transaction_id
                                        FROM invoice_notim inv
                                        LEFT JOIN payment_curah pa ON pa.inv_notim_id = inv.inv_notim_id
                                        WHERE inv.`payment_id` = {$paymentId}";
                        $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                        if($resultAccount2 !== false){
                            while($rowAccount2 = $resultAccount2->fetch_object()) {	
                                if($rowAccount2->ppn_id != '' || $rowAccount2->ppn_id != 0){
                                    $taxPPN = $rowAccount2->ppn_value;
                                }else{
                                    $taxPPN = 0;
                                }
                                if($rowAccount2->pph_id != '' || $rowAccount2->pph_id != 0){
                                    $taxValue = $rowAccount2->pph_value;
                                }else{
                                    $taxValue = 0;
                                }

                                if($rowAccount2->amount > 0) {
                                    $debitCurahPrice = $rowAccount2->amount + ($rowAccount2->amount  * ($taxPPN/100)) - ($rowAccount2->amount  * ($taxValue/100));
                                }
                            }

                            $sqlAccountA = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (210101, {$row->account_no})";
                            $resultAccountA = $myDatabase->query($sqlAccountA, MYSQLI_STORE_RESULT);
            
                            if($resultAccountA !== false && $resultAccountA->num_rows > 0) {
                                while($rowAccountA = $resultAccountA->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }
                                    //1 = Dr
                                    //2 = Cr
                                    if($rowAccountA->account_no == 210101) { //payment
                                        if($paymentStatus == 1){
                                            $insertValues .= "(2, '{$source}', 'Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountA->account_id}, NULL, {$debitCurahPrice})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', 'Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountA->account_id}, NULL, {$debitCurahPrice})";	
                                        }
                                    }elseif($rowAccountA->account_no == $row->account_no) { //bANK
                                        if($paymentStatus == 1){
                                        $insertValues .= "(1, '{$source}', 'Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountA->account_id}, NULL, {$row->amount_journal})";
                                        }else{
                                        $insertValues .= "(2, '{$source}', 'Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountA->account_id}, NULL, {$row->amount_journal})";	
                                        }
                                    }

            
                                }
                            } else {
                                $boolContinue = false;
                            }
                        }
                    }else{ //PAYMENT BIASA
                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (210101, {$row->account_no})";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                        if($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while($rowAccount = $resultAccount->fetch_object()) {
                                if($insertValues != "") {
                                    $insertValues .= ", ";
                                }
                            //1 = Dr
                            //2 = Cr                               

                            if($rowAccount->account_no == $row->account_no) {
                                if($paymentStatus == 1){
                                    $insertValues .= "(1, '{$source}', 'Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->original_amount_converted})";
                                }else{
                                    $insertValues .= "(2, '{$source}', 'Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->original_amount_converted})";   
                                }
                                } elseif($rowAccount->account_no == 210101) {
                                    if($paymentStatus == 1){
                                    $insertValues .= "(2, '{$source}', 'Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->original_amount_converted})";
                                    }else{
                                    $insertValues .= "(1, '{$source}', 'Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->original_amount_converted})";	
                                    }
                                } 
                            }
                        } else {
                            $boolContinue = false;
                        }
                    }
                }elseif($row->payment_method == 2) { //DOWN PAYMENT
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (210101, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
                        //1 = Dr
                        //2 = Cr
                            if($rowAccount->account_no == 210101) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            } elseif($row->freight_id != '') { //FREIGHT
				 if($row->payment_method == 1) {
                     $boolNew = false;
                     $debitFreightPrice = 0;
                     $creditFreightPrice = 0;
					
                    $sqlInv = "SELECT SUBSTRING(inv_notim_no, 1, 2) as methodText FROM invoice_notim WHERE payment_id = {$paymentId}";
                    $resultInv = $myDatabase->query($sqlInv, MYSQLI_STORE_RESULT);
                    if($resultInv !== false){
                        $rowInv= $resultInv->fetch_object();
                        if($rowInv->methodText == 'FP'){
                            $boolNew = true;
                        }
                    }
                  

                    if($boolNew){  //SETTLE TAPI ADA PAYMENT
                        //DP
                        $sqlAccountDp = "SELECT inv.inv_notim_id, SUM(ppd.dpp_dp_settle) AS amountDp, 
                                                f.pph AS fpph, f.ppn AS fppn,
                                                apph.`account_no` AS a_pph, appn.`account_no` AS a_ppn
                                        FROM invoice_notim inv
                                        INNER JOIN pengajuan_payment_dp ppd ON ppd.inv_notim_id = inv.inv_notim_id
                                        LEFT JOIN freight f ON f.`freight_id` = inv.`freightId` 
                                        LEFT JOIN tax fpph ON fpph.`tax_id` = f.`pph_tax_id`
                                        LEFT JOIN account apph ON apph.`account_id` = fpph.`account_id`
                                        LEFT JOIN tax fppn ON fppn.`tax_id` = f.`ppn_tax_id`
                                        LEFT JOIN account appn ON appn.`account_id` = fppn.`account_id`
                                        WHERE inv.`payment_id` = {$paymentId} GROUP BY ppd.inv_notim_id";
                        $resultAccountDP = $myDatabase->query($sqlAccountDp, MYSQLI_STORE_RESULT);
                    //   echo " test 1 => " . $sqlAccountDp . "<br";
                        if($resultAccountDP !== false){
                            $rowAccountDp = $resultAccountDP->fetch_object();
                            $creditFreightPrice = $rowAccountDp->amountDp; //DPP Downpayment
                            $ppnVal = $creditFreightPrice * ($rowAccountDp->fppn/100);
                            $pphVal = $creditFreightPrice * ($rowAccountDp->fpph/100);
                            // echo " pph val => " . $pphVal . "<br>";
                            

                            $sqlAccountB = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (210103, '{$rowAccountDp->a_pph}', '{$rowAccountDp->a_ppn}')";
                            $resultAccountB = $myDatabase->query($sqlAccountB, MYSQLI_STORE_RESULT);
                            if($resultAccountB !== false && $resultAccountB->num_rows > 0) {
                                while($rowAccountB = $resultAccountB->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                 //1 = Dr
                                //2 = Cr  
                                     if($rowAccountB->account_no == 210103) { //payment
                                        if($paymentStatus == 1){
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, 'Return Journal', {$creditFreightPrice})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$creditFreightPrice})";	
                                        }
                                    } elseif($rowAccountB->account_no == $rowAccountDp->a_pph) {
                                        if($paymentStatus == 1){
                                            $insertValues .= "(2, '{$source}',  'DP', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, 'Return Journal', {$pphVal})";	 
                                        }else{
                                            $insertValues .= "(1, '{$source}',  'DP', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$pphVal})";	 
                                        }
                                    } elseif($rowAccountB->account_no == $rowAccountDp->a_ppn) {
                                        if($paymentStatus == 1){
                                            $insertValues .= "(1, '{$source}',  'DP', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, 'Return Journal', {$ppnVal})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}',  'DP', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$ppnVal})";	
                                        }
                                    }
                                    // echo " TE => " . $rowAccountB->account_no . " | " . $rowAccountDp->a_pph;
            
                                }
                            } else {
                                $boolContinue = false;
                            }
                        }

                        //PAYMENT
                        $sqlAccount2 = "SELECT inv.inv_notim_id, (pa.dpp - (pa.shrink + pa.additional_shrink)) as amount, pa.`ppn_id`, pa.`ppn_value`,
                                                pa.pph_id, pa.pph_value
                                        FROM invoice_notim inv
                                        LEFT JOIN payment_oa pa ON pa.inv_notim_id = inv.inv_notim_id
                                        WHERE inv.`payment_id` = {$paymentId}";
                        $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                        if($resultAccount2 !== false){
                            $totalAmount = 0;
                            while($rowAccount2 = $resultAccount2->fetch_object()) {	
                                if($rowAccount2->ppn_id != '' || $rowAccount2->ppn_id != 0){
                                    $taxPPN = $rowAccount2->ppn_value;
                                }else{
                                    $taxPPN = 0;
                                }
                                if($rowAccount2->pph_id != '' || $rowAccount2->pph_id != 0){
                                    $taxValue = $rowAccount2->pph_value;
                                }else{
                                    $taxValue = 0;
                                }

                                if($rowAccount2->amount > 0) {
                                    $totalAmount = $totalAmount + $rowAccount2->amount;
                                    $debitFreightPrice = $totalAmount + ($totalAmount  * ($taxPPN/100)) - ($totalAmount  * ($taxValue/100));
                                    // echo " test nilai debit => " . $debitFreightPrice . " | " . $taxValue . " | " . $totalAmount;
                                }
                            }

                            $sqlAccountA = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (210103,{$row->account_no})";
                            $resultAccountA = $myDatabase->query($sqlAccountA, MYSQLI_STORE_RESULT);
	
                            if($resultAccountA !== false && $resultAccountA->num_rows > 0) {
                                while($rowAccountA = $resultAccountA->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }
                                //1 = Dr
                                //2 = Cr
                                    if($rowAccountA->account_no == 210103) { //payment
                                        if($paymentStatus == 1){
                                            $insertValues .= "(2, '{$source}', 'Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountA->account_id}, NULL, {$debitFreightPrice})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', 'Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountA->account_id}, NULL, {$debitFreightPrice})";	
                                        }
                                    }elseif($rowAccountA->account_no == $row->account_no) { //bANK
                                        if($paymentStatus == 1){
                                        $insertValues .= "(1, '{$source}', 'Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountA->account_id}, NULL, {$row->amount_journal})";
                                        }else{
                                        $insertValues .= "(2, '{$source}', 'Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountA->account_id}, NULL, {$row->amount_journal})";	
                                        }
                                    }

            
                                }
                            } else {
                                $boolContinue = false;
                            }
                        }
                    }else{ //PAYMENT BIASA
                       
                        $debitFreightPrice = $row->amount_journal;
                        $sqlAccountA = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (210103,{$row->account_no})";
                        $resultAccountA = $myDatabase->query($sqlAccountA, MYSQLI_STORE_RESULT);
                        if($resultAccountA !== false && $resultAccountA->num_rows > 0) {
                            while($rowAccount = $resultAccountA->fetch_object()) {
                                if($insertValues != "") {
                                    $insertValues .= ", ";
                                }
                            //1 = Dr
                            //2 = Cr
                                if($rowAccount->account_no == 210103) { //payment
                                    if($paymentStatus == 1){
                                        $insertValues .= "(2, '{$source}', 'Payment', 2, 3, {$contractId}, {$invoiceId},  {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$debitFreightPrice})";
                                    }else{
                                        $insertValues .= "(1, '{$source}', 'Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$debitFreightPrice})";	
                                    }
                                }elseif($rowAccount->account_no == $row->account_no) { //bANK
                                    if($paymentStatus == 1){
                                    $insertValues .= "(1, '{$source}', 'Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                    }else{
                                    $insertValues .= "(2, '{$source}', 'Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                    }			
                }elseif($row->payment_method == 2) {
						 
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (210103, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
                            //1 = Dr
                            //2 = Cr
                            if($rowAccount->account_no == 210103) {
								// $f_amountJournal = ($row->amount_journal + $row->ppn_journal) - $row->pph_journal;
                                $f_amountJournal = $row->amount_journal;
                                // echo $row->ppn_journal;
								if($paymentStatus == 1){
									$f_amountJournal1 = $f_amountJournal1;
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$f_amountJournal})";
								}else{
								 $insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$f_amountJournal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								// $f_Journal = $row->amount_journal + $row->ppn_journal - $row->pph_journal;
                                $f_Journal = $row->amount_journal;
								if($paymentStatus == 1){
									$f_Journal1 = $f_Journal;
                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$f_Journal1})";
								}else{
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$f_Journal})";	
								}
                            } 
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            } elseif($row->vendor_handling_id != 0) { //HANDLING
				 if($row->payment_method == 1) {
                    $boolNew = false;
                    $debitHandlingPrice = 0;
                    $creditHandlingPrice = 0;

                    $sqlInv = "SELECT SUBSTRING(inv_notim_no, 1, 2) as methodText FROM invoice_notim WHERE payment_id = {$paymentId}";
                    $resultInv = $myDatabase->query($sqlInv, MYSQLI_STORE_RESULT);
                    if($resultInv !== false){
                        $rowInv= $resultInv->fetch_object();
                        if($rowInv->methodText == 'FP'){
                            $boolNew = true;
                        }
                    }
                    
                    if($boolNew){  //SETTLE TAPI ADA PAYMENT
                        //DP
                        $sqlAccountDp = "SELECT inv.inv_notim_id, SUM(ppd.dpp_dp_settle) AS amountDp, l.`pph` AS vhpph , l.ppn AS vhppn,
                                        apph.`account_no` AS a_pph, appn.`account_no` AS a_ppn
                                        FROM invoice_notim inv
                                        INNER JOIN pengajuan_payment_dp ppd ON ppd.inv_notim_id = inv.inv_notim_id
                                        LEFT JOIN vendor_handling l ON l.`vendor_handling_id` = inv.`vendorHandlingId`
                                        LEFT JOIN tax lpph ON lpph.`tax_id` = l.`pph_tax_id`
                                        LEFT JOIN account apph ON apph.`account_id` = lpph.`account_id`
                                        LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
                                        LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`
                                        WHERE inv.`payment_id` = {$paymentId} GROUP BY ppd.inv_notim_id";
                        $resultAccountDP = $myDatabase->query($sqlAccountDp, MYSQLI_STORE_RESULT);
                        // echo "A  " . $sqlAccountDp;

                        if($resultAccountDP !== false){
                            $rowAccountDp = $resultAccountDP->fetch_object();
                            $creditHandlingPrice = $rowAccountDp->amountDp;
                            $ppnVal = $creditHandlingPrice * ($rowAccountDp->vhppn/100);
                            $pphVal = $creditHandlingPrice * ($rowAccountDp->vhpph/100);


                            $sqlAccountB = "SELECT account_id, account_no FROM account WHERE account_type IN (2,7) AND account_no in (210106, '{$rowAccountDp->a_pph}', '{$rowAccountDp->a_ppn}')";
                            $resultAccountB = $myDatabase->query($sqlAccountB, MYSQLI_STORE_RESULT);
                            if($resultAccountB !== false && $resultAccountB->num_rows > 0) {
                                while($rowAccountB = $resultAccountB->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }
                                //1 = Dr
                                //2 = Cr
                                    if($rowAccountB->account_no == 210106) { //payment
                                        if($paymentStatus == 1){
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$creditHandlingPrice})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$creditHandlingPrice})";	
                                        }
                                    }elseif($rowAccountB->account_no == $rowAccountDp->a_pph) {
                                        if($paymentStatus == 1){
                                            $insertValues .= "(2, '{$source}',  'DP', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, 'Return Journal', {$pphVal})";	 
                                        }else{
                                            $insertValues .= "(1, '{$source}',  'DP', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$pphVal})";	 
                                        }
                                    } elseif($rowAccountB->account_no == $rowAccountDp->a_ppn) {
                                        if($paymentStatus == 1){
                                            $insertValues .= "(1, '{$source}',  'DP', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, 'Return Journal', {$ppnVal})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}',  'DP', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$ppnVal})";	
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                            }
                        }

                        //PAYMENT
                        $sqlAccount2 = "SELECT inv.inv_notim_id, ph.dpp  as amount, ph.`ppn_id`, ph.`ppn_value`,
                                                ph.pph_id, ph.pph_value
                                        FROM invoice_notim inv
                                        LEFT JOIN payment_handling ph ON ph.inv_notim_id = inv.inv_notim_id
                                        WHERE inv.`payment_id` = {$paymentId}";
                        $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);

                        if($resultAccount2 !== false){
                            $totalAmount = 0;
                            while($rowAccount2 = $resultAccount2->fetch_object()) {	
                                if($rowAccount2->ppn_id != '' || $rowAccount2->ppn_id != 0){
                                    $taxPPN = $rowAccount2->ppn_value;
                                }else{
                                    $taxPPN = 0;
                                }
                                if($rowAccount2->pph_id != '' || $rowAccount2->pph_id != 0){
                                    $taxValue = $rowAccount2->pph_value;
                                }else{
                                    $taxValue = 0;
                                }

                                if($rowAccount2->amount > 0) {
                                    $totalAmount = $totalAmount + $rowAccount2->amount;
                                    $debitHandlingPrice =  $totalAmount + ($totalAmount  * ($taxPPN/100)) - ($totalAmount  * ($taxValue/100));
                                }
                            }

                            $sqlAccountA = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (210106,{$row->account_no})";
                            $resultAccountA = $myDatabase->query($sqlAccountA, MYSQLI_STORE_RESULT);

                            if($resultAccountA !== false && $resultAccountA->num_rows > 0) {
                                while($rowAccountA = $resultAccountA->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }

                                    if($rowAccountA->account_no == 210106) { //payment
                                        if($paymentStatus == 1){
                                            $insertValues .= "(2, '{$source}', 'Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountA->account_id}, NULL, {$debitHandlingPrice})";
                                        }else{
                                            $insertValues .= "(1, '{$source}', 'Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountA->account_id}, NULL, {$debitHandlingPrice})";	
                                        }
                                    }elseif($rowAccountA->account_no == $row->account_no) { //bANK
                                        if($paymentStatus == 1){
                                        $insertValues .= "(1, '{$source}', 'Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountA->account_id}, NULL, {$row->amount_journal})";
                                        }else{
                                        $insertValues .= "(2, '{$source}', 'Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountA->account_id}, NULL, {$row->amount_journal})";	
                                        }
                                    }

            
                                }
                            } else {
                                $boolContinue = false;
                            }
                        }
                    }else { //PAYMENT BIASA

                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (9, 7) AND account_no in (210106, {$row->account_no})";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                        if($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while($rowAccount = $resultAccount->fetch_object()) {
                                if($insertValues != "") {
                                    $insertValues .= ", ";
                                }
                                if($rowAccount->account_no == 210106) {
                                    if($paymentStatus == 1){
                                    $insertValues .= "(2, '{$source}', 'Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                    }else{
                                    $insertValues .= "(1, '{$source}', 'Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
                                    }
                                }elseif($rowAccount->account_no == $row->account_no) {
                                    if($paymentStatus == 1){
                                    $insertValues .= "(1, '{$source}', 'Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                    }else{
                                    $insertValues .= "(2, '{$source}', 'Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                    }
                }elseif($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (9, 7) AND account_no in (210106, {$row->account_no} , {$row->vh_account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {

                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 210106) {
								// $vh_amountJournal = $row->amount_journal - $row->pph_journal;
                                $vh_amountJournal = $row->amount_journal ;

								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								 $insertValues .= "(1, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								// $vh_amountJournal = $row->amount_journal - $row->pph_journal;
                                $vh_amountJournal = $row->amount_journal;
								if($vh_amountJournal == 1){
                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$f_amountJournal})";
								}else{
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$vh_amountJournal})";	
								}
                            } elseif($rowAccount->account_no == $row->vh_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
								}else{
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";	
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            }elseif($row->labor_id != '') { //UNLOADING
                if($row->payment_method == 1) {
                    $boolNew = false;
                     $debitUnloadingPrice = 0;
                     $creditUnloadingPrice = 0;
                    $totaDP = 0;

                    if($row->u_account_no == '' || $row->u_account_no == 'NULL'){
						  $u_account_no = 0;
					}else{
				     	$u_account_no = $row->u_account_no;
					}

                    $sqlInv = "SELECT SUBSTRING(inv_notim_no, 1, 2) as methodText FROM invoice_notim WHERE payment_id = {$paymentId}";
                    $resultInv = $myDatabase->query($sqlInv, MYSQLI_STORE_RESULT);
                    if($resultInv !== false){
                        $rowInv= $resultInv->fetch_object();
                        if($rowInv->methodText == 'FP'){
                            $boolNew = true;
                        }
                    }

                    if($boolNew){  //SETTLE TAPI ADA PAYMENT

                        //DOWNPAYMENT
                        $sqlAccountDp = "SELECT inv.inv_notim_id, SUM(ppd.dpp_dp_settle) AS amountDp,
                                        apph.`account_no` AS a_pph, appn.`account_no` AS a_ppn, l.ppn AS lppn, l.pph AS lpph
                                        FROM invoice_notim inv
                                        INNER JOIN pengajuan_payment_dp ppd ON ppd.inv_notim_id = inv.inv_notim_id
                                        LEFT JOIN labor l ON l.`labor_id` = inv.`laborId`
                                        LEFT JOIN tax lpph ON lpph.`tax_id` = l.`pph_tax_id`
                                        LEFT JOIN account apph ON apph.`account_id` = lpph.`account_id`
                                        LEFT JOIN tax lppn ON lppn.`tax_id` = l.`ppn_tax_id`
                                        LEFT JOIN account appn ON appn.`account_id` = lppn.`account_id`                                        
                                        WHERE inv.`payment_id` = {$paymentId} GROUP BY ppd.inv_notim_id";
                        $resultAccountDP = $myDatabase->query($sqlAccountDp, MYSQLI_STORE_RESULT);
                        if($resultAccountDP !== false){
                            $rowAccountDp = $resultAccountDP->fetch_object();
                            $creditUnloadingPrice = $rowAccountDp->amountDp;
                            $ppnVal = $creditUnloadingPrice * ($rowAccountDp->lppn/100);
                            $pphVal = $creditUnloadingPrice * ($rowAccountDp->lpph/100);

                            $sqlAccountB = "SELECT account_id, account_no FROM account WHERE account_type IN (3, 7) AND account_no in (210104, '{$rowAccountDp->a_pph}', '{$rowAccountDp->a_ppn}')";
                            $resultAccountB = $myDatabase->query($sqlAccountB, MYSQLI_STORE_RESULT);
                            if($resultAccountB !== false && $resultAccountB->num_rows > 0) {
                                $totalAmount = 0;
                                while($rowAccountB = $resultAccountB->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }
                                    //1 = Dr
                                    //2 = Cr
                                    if($rowAccountB->account_no == 210104) { //payment
                                        if($paymentStatus == 1){
                                            $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$creditUnloadingPrice})";
                                        }else{
                                            $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$creditUnloadingPrice})";	
                                        }
                                    }elseif($rowAccountB->account_no == $rowAccountDp->a_pph) {
                                        if($paymentStatus == 1){
                                            $insertValues .= "(2, '{$source}',  'DP', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, 'Return Journal', {$pphVal})";	 
                                        }else{
                                            $insertValues .= "(1, '{$source}',  'DP', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$pphVal})";	 
                                        }
                                    } elseif($rowAccountB->account_no == $rowAccountDp->a_ppn) {
                                        if($paymentStatus == 1){
                                            $insertValues .= "(1, '{$source}',  'DP', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, 'Return Journal', {$ppnVal})";	
                                        }else{
                                            $insertValues .= "(2, '{$source}',  'DP', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccountB->account_id}, NULL, {$ppnVal})";	
                                        }
                                    }


                                }
                            } else {
                                $boolContinue = false;
                            }
                        }
                        //PAYMENT
                        $sqlAccount2 = "SELECT inv.inv_notim_id, pb.dpp as amount, pb.`ppn_id`, pb.`ppn_value`,
                                                pb.pph_id, pb.pph_value
                                        FROM invoice_notim inv
                                        LEFT JOIN payment_ob pb ON pb.inv_notim_id = inv.inv_notim_id
                                        WHERE inv.`payment_id` = {$paymentId}";
                        $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);

                        if($resultAccount2 !== false){
                            while($rowAccount2 = $resultAccount2->fetch_object()) {	
                                if($rowAccount2->ppn_id != '' || $rowAccount2->ppn_id != 0){
                                    $taxPPN = $rowAccount2->ppn_value;
                                }else{
                                    $taxPPN = 0;
                                }
                                if($rowAccount2->pph_id != '' || $rowAccount2->pph_id != 0){
                                    $taxValue = $rowAccount2->pph_value;
                                }else{
                                    $taxValue = 0;
                                }

                                if($rowAccount2->amount != '' && $rowAccount2->amount > 0) {
                                    $totalAmount = $rowAccount2->amount;
                                    $debitUnloadingPrice = $totalAmount + ($totalAmount  * ($taxPPN/100)) - ($totalAmount  * ($taxValue/100));
                                }
                            }

                            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (3, 7) AND account_no in (210104, {$row->account_no})";
                            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                            
                            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                                while($rowAccount = $resultAccount->fetch_object()) {
                                    if($insertValues != "") {
                                        $insertValues .= ", ";
                                    }
                                        //1 = Dr
                                        //2 = Cr
                                    if($rowAccount->account_no == 210104) {
                                        if($paymentStatus == 1){
                                        $insertValues .= "(2, '{$source}', 'Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$debitUnloadingPrice})";
                                        }else{
                                        $insertValues .= "(1, '{$source}', 'Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$debitUnloadingPrice})";	
                                        }
                                    } elseif($rowAccount->account_no == $row->account_no) {
                                        if($paymentStatus == 1){
                                        $insertValues .= "(1, '{$source}', 'Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                        }else{
                                         $insertValues .= "(2, '{$source}', 'Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
                                        }
                                    }
                                }
                            } else {
                                $boolContinue = false;
                            }
                        }
                    }else{ //Payment BIASA

                        $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (3, 7) AND account_no in (210104, {$row->account_no})";
                        $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                        $totalDP = $row->amount - $row->amount_journal;
                        
                        if($resultAccount !== false && $resultAccount->num_rows > 0) {
                            while($rowAccount = $resultAccount->fetch_object()) {
                                if($insertValues != "") {
                                    $insertValues .= ", ";
                                }
                            //1 = Dr
                            //2 = Cr   
                                if($rowAccount->account_no == 210104) {
                                    if($paymentStatus == 1){
                                    $insertValues .= "(2, '{$source}', 'Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                    }else{
                                    $insertValues .= "(1, '{$source}', 'Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
                                    }
                                } elseif($rowAccount->account_no == $row->account_no) {
                                    if($paymentStatus == 1){
                                    $insertValues .= "(1, '{$source}', 'Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                                    }else{
                                     $insertValues .= "(2, '{$source}', 'Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
                                    }
                                }
                            }
                        } else {
                            $boolContinue = false;
                        }
                    }

                } elseif($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (3, 7) AND account_no in (210104, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
                        //1 = Dr
                        //2 = Cr
                            if($rowAccount->account_no == 210104) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            } elseif($row->sales_id != '') {
                // <editor-fold defaultstate="collapsed" desc="payment Sales">
               if($row->payment_method == 1) {
                    $totalSalesAmount = 0;
                    $totalSalesDP = 0;
                    
                    $sqlContract = "SELECT sh.quantity, sl.price_converted, 
                                        (
                                            SELECT COALESCE(SUM(amount_journal), 0) FROM payment_detail
                                            WHERE shipment_id = pd.shipment_id
                                            AND payment_id <> {$paymentId}
                                        ) AS total_dp
                                    FROM payment_detail pd
                                    INNER JOIN shipment sh
                                        ON sh.shipment_id = pd.shipment_id
                                    INNER JOIN sales sl
                                        ON sl.sales_id = sh.sales_id
                                    WHERE pd.payment_id = {$paymentId}";
                    $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);
                    
                    if($resultContract !== false && $resultContract->num_rows == 1) {
                        $rowContract = $resultContract->fetch_object();
                      
						
						if($row->ppn_journal !== 0){
                        $totalSalesDP = $rowContract->total_dp /1.1;
						}else{
						$totalSalesDP = $rowContract->total_dp;
                    }
                    }
                    
					
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (210200, 230100,{$row->ap_account_no},  {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
                        //1 = Dr
                        //2 = Cr
						if($row->ppn_journal != 0){
                        $totalSalesAmount = $row->amount_journal /1.1;
						}else{
						$totalSalesAmount = $row->amount_journal;
						}
                            if($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Payment', 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Payment', 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == 210200) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalSalesDP})";
								}else{
								$insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalSalesDP})";	
								}
                            } elseif($rowAccount->account_no == $row->ap_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalSalesAmount})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalSalesAmount})";	
								}
                            } elseif($rowAccount->account_no == 230100) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";	
								}
                            } 
                        }
                    } else {
                        $boolContinue = false;
                    }
                }  elseif($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (230100, 210200, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    $amountJournalDP = $row->amount_journal - $row->ppn_journal;
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Down Payment', 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == 210200) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournalDP})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournalDP})";	
								}
                            }elseif($rowAccount->account_no == 230100) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";	
								}
                            } 
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
			} elseif($row->ap_account_type == 7 && $row->stockpile_contract_id == '' && $row->vendor_id == '' && $row->freight_id == '' && $row->labor_id == '' && $row->general_vendor_id == '' && $row->sales_id == '') {
                // <editor-fold defaultstate="collapsed" desc="internal transfer">
			echo $row->ap_account_type;
                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 7 AND account_no in ({$row->ap_account_no}, {$row->account_no})";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
                          //1 = Dr
                            //2 = Cr
                        if($rowAccount->account_no == $row->ap_account_no) {
							if($paymentStatus == 1){
                            $insertValues .= "(2, '{$source}', 'Payment', 2, 6, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
							}else{
							$insertValues .= "(1, '{$source}', 'Payment', 2, 6, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
							}
                        } 
						if($rowAccount->account_no == $row->account_no) {
							if($paymentStatus == 1){
                            $insertValues .= "(1, '{$source}', NULL, 2, 6, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 2, 6, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
							}
                        }
                    }
                } else {
                    $boolContinue = false;
                }
                //</editor-fold>
            } 
			
		elseif($row->payment_type == 1 && $row->ap_account_type != 7 && $row->sales_id == '') {
                // <editor-fold defaultstate="collapsed" desc="in umum ho">
				echo 'test2';
				if($row->gv_account_no == '' || $row->gv_account_no == 'NULL'){
						  $gv_account_no = 0;
					  }elseif($row->gv_account_no != '' || $row->gv_account_no != 'NULL'){
						  $gv_account_no = $row->gv_account_no;
					  }
                $sqlAccount = "SELECT a.* FROM 
				(SELECT account_id, account_no FROM account WHERE account_type in ({$row->ap_account_type}, 7) AND account_no in ({$row->ap_account_no}, {$row->account_no}) UNION ALL SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}) AND account_no in ({$gv_account_no}, 150410))
				 a GROUP BY a.account_no";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
						
						$totalAmount = $row->amount_journal - $row->ppn_journal;
						
						if( $row->ppn_journal != 0 &&  $row->pph_journal == 0 ){
							$amountJ = $row->amount_journal - $row->ppn_journal;
						}else{
							$amountJ = $row->amount_journal;
						}
                            //1 = Dr
                            //2 = Cr
                        if($rowAccount->account_no == $row->account_no) {
							if($paymentStatus == 1){
                            $insertValues .= "(2, '{$source}', 'Payment', 1, 8, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
							}else{
							$insertValues .= "(1, '{$source}', 'Payment', 1, 8, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";	
							}
                        } elseif($rowAccount->account_no == $row->ap_account_no) {
							if($paymentStatus == 1){
                            $insertValues .= "(1, '{$source}', NULL, 1, 8, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJ})";
							}else{
							 $insertValues .= "(2, '{$source}', NULL, 1, 8, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJ})";	
							}
                        } elseif($rowAccount->account_no == 150410) {
							if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";	
							}
                        } elseif($rowAccount->account_no == $gv_account_no  && $row->ap_account_no != $gv_account_no ) {
							if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";	
							}
                        }elseif($rowAccount->account_no == $gv_account_no && $row->ap_account_no == $gv_account_no) {
							if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, 0)";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, 0)";	
							}
                            }  
                    }
                } else {
                    $boolContinue = false;
                }
                // </editor-fold>
            }elseif($row->payment_type == 2 && $row->stockpile_contract_id == '' && $row->vendor_id == '' && $row->freight_id == '' && $row->labor_id == '' && $row->general_vendor_id != '') {
                // <editor-fold defaultstate="collapsed" desc="out other with general vendor">
				
                if($row->payment_method == 1) {  
					
					if($row->gv_account_no == '' || $row->gv_account_no == 'NULL'){
						  $gv_account_no = 0;
					  }elseif($row->gv_account_no != '' || $row->gv_account_no != 'NULL'){
						  $gv_account_no = $row->gv_account_no;
					  }
					  
					  $account_no = $row->account_no;
					  $ap_account_no = $row->ap_account_no;
					  $ppn_journal = $row->ppn_journal;
					  $pph_journal = $row->pph_journal;
					  $amount_journal = $row->amount_journal;
					  $ap_account_type = $row->ap_account_type;
					  $totalAmount = 0;
					  $totaDP = 0;
                      //$totalAll = $row->amount;
					  
                    $sqlAccount = "SELECT a.* FROM (SELECT account_id, account_no FROM account WHERE account_type IN ({$ap_account_type}, 7) AND account_no IN (130005, {$account_no}, {$ap_account_no})
					UNION ALL SELECT account_id, account_no FROM account WHERE account_type IN ({$ap_account_type}) AND account_no IN ({$gv_account_no}, 150410))a GROUP BY a.account_no";
					
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($row->b_currency_id == $row->currency_id && $row->currency_id != 1) {
                        // USD - USD - IDR	
                        $totalAll = $row->amount * $row->exchange_rate;
                    } elseif($row->b_currency_id != $row->currency_id && $row->currency_id != 1) {
                        // IDR - USD - IDR
                        $totalAll = $row->amount;
                    } elseif($row->b_currency_id != $row->currency_id && $row->currency_id == 1) {
                        // USD - IDR - IDR
                        $totalAll = $row->amount * $row->exchange_rate;
                    } else {
                        $totalAll = $row->amount;
                    }  
                    
                    $totalAmount = $totalAll - $ppn_journal;
                    $totalDP = 0;
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
                            //1 = Dr
                            //2 = Cr
                           if($rowAccount->account_no == $ap_account_no) {
							   if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Payment', 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
							   }else{
								$insertValues .= "(1, '{$source}', 'Payment', 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";   
							   }
                            } elseif($rowAccount->account_no == 130005) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalDP})";
								}else{
								 $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalDP})";	
								}
                            } elseif($rowAccount->account_no == $account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount_journal})";	
								}
                            } elseif($rowAccount->account_no == 150410) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId},{$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn_journal})";
								}else{
								$insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId},{$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn_journal})";	
								}
                            } elseif($rowAccount->account_no == $gv_account_no && $gv_account_no != $ap_account_no && $rowAccount->gv_pph_tax_id == 21) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph_journal})";
								}else{
								$insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph_journal})";	
								}
							} elseif($rowAccount->account_no == $gv_account_no && $gv_account_no != $ap_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph_journal})";	
								}
                            }elseif($rowAccount->account_no == $gv_account_no && $gv_account_no == $ap_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, 0)";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, 0)";	
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
						echo 'FALSE 2';
                    }
                } 
				elseif($row->payment_method == 2) {
					if($row->gv_account_no == '' || $row->gv_account_no == 'NULL'){
						  $gv_account_no = 0;
					  }elseif($row->gv_account_no != '' || $row->gv_account_no != 'NULL'){
						  $gv_account_no = $row->gv_account_no;
					  }
                    $sqlAccount = "SELECT a.* FROM (SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}, 7) AND account_no IN ({$row->account_no}, {$row->ap_account_no})
					UNION ALL SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}) AND account_no IN ({$gv_account_no}, 150410)) a GROUP BY a.account_no";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
                        //1 = Dr
                        //2 = Cr
                            if($rowAccount->account_no == $row->ap_account_no) {
								$amountJournal = $row->amount_journal - $row->ppn_journal;
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}
                            } elseif($rowAccount->account_no == 150410) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
								}else{
								 $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";	
								}
                            } elseif($rowAccount->account_no == $gv_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
								}
                            } 
                        }
                    } else {
                        $boolContinue = false;
						 

                    }
                }
                // </editor-fold>
            } elseif($row->payment_type == 2 && $row->stockpile_contract_id == '' && $row->vendor_id == '' && $row->freight_id == '' && 
                    $row->labor_id == '' && $row->general_vendor_id == '') {
                // <editor-fold defaultstate="collapsed" desc="out other without general vendor">
                if($row->payment_method == 1) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}, 7) AND account_no in ({$row->account_no}, {$row->ap_account_no}) GROUP BY account_no";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    $totalAmount = ceil($row->amount_journal - $row->ppn_journal);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
                            //1 = Dr
                            //2 = Cr
                            if($rowAccount->account_no == $row->ap_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Payment', 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
								}else{
								$insertValues .= "(1, '{$source}', 'Payment', 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                } elseif($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}, 7) AND account_no in (130005, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
                            //1 = Dr
                            //2 = Cr
                            if($rowAccount->account_no == 130005) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$accrueId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            } else {
                $boolContinue = false;
            }
        } else {
            $boolContinue = false;
        }
                
            
        
        // </editor-fold>
    
    //1 = Dr
   //2 = Cr
    } elseif($returnId != 'NULL') {
        // <editor-fold defaultstate="collapsed" desc="return payment">
        
        $sql = "SELECT p.*, a.account_no, ap.account_type AS ap_account_type, ap.account_no AS ap_account_no,
                    b.currency_id AS b_currency_id
                FROM payment p 
                INNER JOIN bank b
                    ON b.bank_id = p.bank_id
                INNER JOIN account a
                    ON a.account_id = b.account_id
                INNER JOIN account ap
                    ON ap.account_id = p.account_id 		   
                WHERE p.payment_id = {$returnId} AND payment_status = 0";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            
            // <editor-fold defaultstate="collapsed" desc="in return">
            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 7 AND account_no in ({$row->account_no})";
            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                while($rowAccount = $resultAccount->fetch_object()) {
                    if($insertValues != "") {
                        $insertValues .= ", ";
                    }

                    if($rowAccount->account_no == $row->account_no) {
                        $insertValues .= "(1, '{$source}', 'Payment', 1, 7, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$returnId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                    } 
                }
                
                if($insertValues != "") {
                    $insertValues .= ", ";
                }
                
                $insertValues .= "(2, '{$source}', NULL, 1, 7, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 0, {$returnId}, {$jurnalId}, 0, 0, {$row->account_id}, NULL, {$row->amount_journal})";
            } else {
                $boolContinue = false;
            }
            // </editor-fold>
        } else {
            $boolContinue = false;
        }
        
        // </editor-fold>
    }
    
    if($boolContinue) { // insert into general_ledger
        // INSERT 
        $sql = "INSERT INTO general_ledger (general_ledger_type, general_ledger_module, 
                            general_ledger_method, 
                            general_ledger_transaction_type, general_ledger_for, contract_id, 
                            invoice_id, invoice_notim_id, 
                            transaction_id, t_id, payment_id, jurnal_id,accrue_id, 
                            i_id, cash_id, account_id, 
                description, amount) VALUES {$insertValues}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        // echo " --- SPASI ---" .$sql;

		if($result === false){
            echo "FALSE";
            //echo $insertValues;
			echo $sql . "</br>";

		}else{
			echo 'TRUE';
            echo $insertValues;
			echo $sql;
		//$general_ledger_id = $myDatabase->insert_id;
		
		}
    }
}
		//echo $general_ledger_id;
function insertReportGL($myDatabase, $source, $invoiceId = "NULL", $invoiceNotimId = "NULL", $i_id = "NULL", $contractId = "NULL", $transactionId = "NULL", $paymentId = "NULL", $jurnalId = "NULL", $accrueId = "NULL", $returnId = "NULL")
{
//echo 'BB';
    $whereCondition = '';
	$adjustmentId = "NULL";

    if ($accrueId != 'NULL') {
		
		$boolReverse = false;
		$sqlReverse = "SELECT * FROM invoice_detail WHERE prediction_detail_id = {$accrueId} ";
				$resultReverse = $myDatabase->query($sqlReverse, MYSQLI_STORE_RESULT);
			if ($resultReverse->num_rows == 1) {
                   $boolReverse = true;
              }
			  
		$sqlCancel = "SELECT * FROM accrue_prediction_detail WHERE prediction_detail_id = {$accrueId} ";
				$resultCancel = $myDatabase->query($sqlCancel, MYSQLI_STORE_RESULT);
			if ($resultCancel->num_rows == 1) {
				$rowCancel = $resultCancel->fetch_object();
                   $journalStatus = $rowCancel->journal_status;
              }
			  
		if(!$boolReverse && $journalStatus != 2){
			$sqlDelete = "UPDATE gl_report SET regenerate = 1 WHERE accrue_id = {$accrueId} AND general_ledger_module = 'JURNAL ACCRUE'";
			$result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);
		}
		
		if($boolReverse){
            $whereCondition .= "AND gl.accrue_id = {$accrueId} AND gl.general_ledger_module = 'JURNAL ACCRUE' AND gl.description = 'Reverse Journal'";
		}else if ($journalStatus == 2){
		    $whereCondition .= "AND gl.accrue_id = {$accrueId} AND gl.general_ledger_module = 'JURNAL ACCRUE' AND gl.description = 'Cancel Journal'";	
		}else{
		    $whereCondition .= "AND gl.accrue_id = {$accrueId} AND gl.general_ledger_module = 'JURNAL ACCRUE'";	
		}
		

    }else if ($contractId != 'NULL' && $source != 'STOCK TRANSIT' && $source == 'CONTRACT ADJUSTMENT') {
		
		
		$sql = "SELECT * FROM contract_adjustment WHERE adj_id = {$contractId}";
        $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if ($resultTaken !== false && $resultTaken->num_rows == 1) {
            $rowTaken = $resultTaken->fetch_object();

            $contractId = $rowTaken->contract_id;
            $adjustmentId = $rowTaken->adj_id;


        }

        $sqlDelete = "DELETE FROM gl_report WHERE contract_id = {$contractId} AND general_ledger_module = 'CONTRACT ADJUSTMENT'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.contract_id = {$contractId} AND gl.general_ledger_module = 'CONTRACT ADJUSTMENT'";

    } elseif ($contractId != 'NULL' && $source == 'STOCK TRANSIT' && $source != 'CONTRACT ADJUSTMENT') {

        $sqlDelete = "DELETE FROM gl_report WHERE contract_id = {$contractId} AND general_ledger_module = 'STOCK TRANSIT'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.contract_id = {$contractId} AND gl.general_ledger_module = 'STOCK TRANSIT'";

    } elseif ($contractId != 'NULL' && $source != 'STOCK TRANSIT' && $source != 'CONTRACT ADJUSTMENT') {

        $sqlDelete = "DELETE FROM gl_report WHERE contract_id = {$contractId} AND general_ledger_module = 'CONTRACT'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.contract_id = {$contractId} AND gl.general_ledger_module = 'CONTRACT'";

    } elseif ($jurnalId != 'NULL') {

        $sqlDelete = "DELETE FROM gl_report WHERE jurnal_id = {$jurnalId} AND general_ledger_module = 'JURNAL MEMORIAL'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.jurnal_id = {$jurnalId} AND gl.general_ledger_module = 'JURNAL MEMORIAL'";

    } elseif ($invoiceId != 'NULL' && $source == 'RETURN INVOICE') {

        $sqlDelete = "DELETE FROM gl_report WHERE invoice_id = {$invoiceId} AND general_ledger_module = 'RETURN INVOICE'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.invoice_id = {$invoiceId} AND gl.general_ledger_module = 'RETURN INVOICE'";

    } elseif ($invoiceId != 'NULL' && $source == 'INVOICE DETAIL') {

        $sqlDelete = "DELETE FROM gl_report WHERE invoice_id = {$invoiceId} AND general_ledger_module = 'INVOICE DETAIL'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.invoice_id = {$invoiceId} AND gl.general_ledger_module = 'INVOICE DETAIL'";

    } elseif ($transactionId != 'NULL' && $source == 'NOTA TIMBANG2') {

        $sqlDelete = "DELETE FROM gl_report WHERE transaction_id = {$transactionId} AND general_ledger_module = 'NOTA TIMBANG2'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.transaction_id = {$transactionId} AND gl.general_ledger_module = 'NOTA TIMBANG2'";

    } elseif ($transactionId != 'NULL' && $source == 'NOTA TIMBANG') {

        $sqlDelete = "DELETE FROM gl_report WHERE transaction_id = {$transactionId} AND general_ledger_module = 'NOTA TIMBANG'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        // $procedure  = "CALL GLreport_NotaTimbang({$transactionId}, 'NOTA TIMBANG')";
        // $resultYE = $myDatabase->query($procedure, MYSQLI_STORE_RESULT);
        $whereCondition .= "AND gl.transaction_id = {$transactionId} AND gl.general_ledger_module = 'NOTA TIMBANG'";

    } elseif ($paymentId != 'NULL' && $source == 'PAYMENT') {

        $sqlDelete = "DELETE FROM gl_report WHERE payment_id = {$paymentId} AND general_ledger_module = 'PAYMENT'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.payment_id = {$paymentId} AND gl.general_ledger_module = 'PAYMENT'";

    } elseif ($paymentId != 'NULL' && $source == 'PAYMENT ADMIN') {

        $sqlDelete = "DELETE FROM gl_report WHERE payment_id = {$paymentId} AND general_ledger_module = 'PAYMENT ADMIN'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.payment_id = {$paymentId} AND gl.general_ledger_module = 'PAYMENT ADMIN'";

    } elseif ($paymentId != 'NULL' && $source == 'PETTY CASH') {

        $sqlDelete = "DELETE FROM gl_report WHERE payment_id = {$paymentId} AND general_ledger_module = 'PETTY CASH'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.payment_id = {$paymentId} AND gl.general_ledger_module = 'PETTY CASH'";

    } elseif ($paymentId != 'NULL' && $source == 'RETURN PAYMENT') {

        $sqlDelete = "DELETE FROM gl_report WHERE payment_id = {$paymentId} AND general_ledger_module = 'RETURN PAYMENT'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.payment_id = {$paymentId} AND gl.general_ledger_module = 'RETURN PAYMENT'";

    } elseif ($invoiceNotimId != 'NULL' && $source == 'INVOICE NOTIM') {
		//echo 'AA';
        $sqlDelete = "DELETE FROM gl_report WHERE invoice_notim_id = {$invoiceNotimId} AND general_ledger_module = 'INVOICE NOTIM'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.invoice_notim_id = {$invoiceNotimId} AND gl.general_ledger_module = 'INVOICE NOTIM'";

    } elseif ($invoiceNotimId != 'NULL' && $source == 'RETURN INVOICE NOTIM') {
		//echo 'AA';
        $sqlDelete = "DELETE FROM gl_report WHERE invoice_notim_id = {$invoiceNotimId} AND general_ledger_module = 'RETURN INVOICE NOTIM'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.invoice_notim_id = {$invoiceNotimId} AND gl.general_ledger_module = 'RETURN INVOICE NOTIM'";

    }
//  if($invoiceNotimId == 1000){
    $sqla = "SELECT gl.*,
            (SELECT `amount` FROM  payment p WHERE p.payment_id = gl.payment_id  ) AS amountPayment , 
            (SELECT `pph_journal` FROM  payment p WHERE p.payment_id = gl.payment_id  ) AS pph_journal ,
            (SELECT `ppn_journal` FROM  payment p WHERE p.payment_id = gl.payment_id  ) AS ppn_journal,
            (SELECT `account_no` FROM  account a WHERE a.account_id = gl.account_id) AS account_no,
            (SELECT `account_name` FROM  account a WHERE a.account_id = gl.account_id) AS account_name,
            
            CASE WHEN gl.general_ledger_transaction_type = 1 THEN 'IN'
                WHEN gl.general_ledger_transaction_type = 2 THEN 'OUT'
                ELSE '' END AS general_ledger_transaction_type2,
                        
            CASE WHEN gl.general_ledger_for = 1 THEN 'PKS Kontrak'
                WHEN gl.general_ledger_for = 2 THEN 'PKS Curah'
                WHEN gl.general_ledger_for = 3 THEN 'Freight Cost'
                WHEN gl.general_ledger_for = 4 THEN 'Unloading Cost'
                WHEN gl.general_ledger_for = 5 THEN 'Other'
                WHEN gl.general_ledger_for = 6 THEN 'Internal Transfer'
                WHEN gl.general_ledger_for = 7 THEN 'Retur'
                WHEN gl.general_ledger_for = 8 THEN 'Umum, HO'
                WHEN gl.general_ledger_for = 9 THEN 'Sales'
                WHEN gl.general_ledger_for = 10 THEN 'Invoice'
                WHEN gl.general_ledger_for = 11 THEN 'Jurnal Memorial'
                WHEN gl.general_ledger_for = 13 THEN 'Handling Cost'
                WHEN gl.general_ledger_for = 14 THEN 'Freight Cost Shrink'
                WHEN gl.general_ledger_for = 15 THEN 'Job Costing'
                ELSE '' END AS general_ledger_for2,
                
            CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT s.stockpile_name FROM stockpile_contract sc INNER JOIN stockpile s ON s.stockpile_id = sc.stockpile_id
        WHERE sc.contract_id = gl.contract_id AND sc.quantity > 0 ORDER BY sc.`stockpile_contract_id` ASC LIMIT 1)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT s.stockpile_name FROM stockpile s LEFT JOIN invoice i ON i.stockpileId = s.stockpile_id LEFT JOIN invoice_detail id ON i.`invoice_id` = id.`invoice_id` WHERE id.invoice_detail_id = gl.invoice_id)
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) !=0 THEN (SELECT s.stockpile_name FROM stockpile s WHERE s.stockpile_code = (SELECT SUBSTR(slip_no,1,3) FROM TRANSACTION WHERE transaction_id = gl.transaction_id))
                WHEN gl.transaction_id IS NOT NULL AND gl.account_id != 8 AND gl.account_id != 51 AND gl.general_ledger_for = 2 AND (SELECT return_shipment FROM contract c WHERE c.contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id  = (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.transaction_id)))
                THEN (SELECT stockpile_name FROM stockpile WHERE stockpile_id = 
                    (SELECT stockpile_id FROM sales WHERE sales_id = (SELECT sales_id FROM shipment WHERE shipment_id = 
                    (SELECT return_shipment_id FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = 
                    (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.transaction_id))))))
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14)
                THEN (SELECT s.stockpile_name FROM stockpile_contract sc INNER JOIN stockpile s ON s.stockpile_id = sc.stockpile_id INNER JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id WHERE gl.transaction_id = t.transaction_id)
                
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT s.stockpile_name FROM stockpile s INNER JOIN sales sl ON s.stockpile_id = sl.stockpile_id INNER JOIN shipment sh ON sh.sales_id = sl.sales_id INNER JOIN `transaction` t ON t.shipment_id = sh.shipment_id WHERE gl.transaction_id = t.transaction_id) 
                WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 5 OR gl.general_ledger_for = 6 OR gl.general_ledger_for = 8 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 10 OR gl.general_ledger_for = 12 OR gl.general_ledger_for = 13) THEN (SELECT s.stockpile_name FROM 					stockpile s INNER JOIN payment p ON p.stockpile_location = s.stockpile_id WHERE gl.payment_id = p.payment_id)
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT s.stockpile_name FROM stockpile s LEFT JOIN gl_detail jd ON jd.stockpile_id = s.stockpile_id WHERE jd.gl_detail_id = gl.jurnal_id) 
                WHEN gl.accrue_id IS NOT NULL THEN (SELECT a.stockpile_name FROM stockpile a LEFT JOIN accrue_prediction b ON a.stockpile_id = b.stockpile_id LEFT JOIN accrue_prediction_detail c ON b.prediction_id = c.prediction_id WHERE c.prediction_detail_id = gl.accrue_id LIMIT 1)
                WHEN gl.invoice_notim_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13) 
                        THEN (SELECT s.stockpile_name FROM stockpile s INNER JOIN pengajuan_payment sl ON s.stockpile_id = sl.stockpile_id INNER JOIN invoice_notim sh ON sh.idpp = sl.idpp WHERE sh.inv_notim_id = gl.invoice_notim_id) 
                ELSE '' END AS stockpile_name2,
                    
            CASE WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) 
                THEN (SELECT t.slip_no FROM `transaction` t WHERE t.transaction_id = gl.transaction_id)
                WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13)
                THEN (SELECT t.slip_no FROM `transaction` t WHERE t.transaction_id = gl.t_id)
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT t.slip_no FROM `transaction` t LEFT JOIN gl_add jm ON jm.transaction_id = t.transaction_id LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id) 
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT t.slip_no FROM `transaction` t LEFT JOIN payment_cash pc ON pc.transaction_id = t.transaction_id WHERE pc.payment_cash_id = gl.cash_id)
             WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 2 
                        THEN (SELECT t.slip_no FROM TRANSACTION t 
                INNER JOIN payment_curah pc ON pc.transaction_id = t.transaction_id WHERE pc.transaction_id = gl.t_id)    
			WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 3 
                        THEN (SELECT t.slip_no FROM TRANSACTION t 
                INNER JOIN payment_oa po ON po.transaction_id = t.transaction_id WHERE po.transaction_id = gl.t_id)   
			WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 4
                        THEN (SELECT t.slip_no FROM TRANSACTION t 
                INNER JOIN payment_ob pb ON pb.transaction_id = t.transaction_id WHERE pb.transaction_id = gl.t_id)  
			WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 13
                        THEN (SELECT t.slip_no FROM TRANSACTION t 
                INNER JOIN payment_handling ph ON ph.transaction_id = t.transaction_id WHERE ph.transaction_id = gl.t_id)                  
            ELSE '' END AS slip_no, 
                                    
            CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT vendor_name FROM vendor WHERE vendor_id = (SELECT vendor_id FROM contract WHERE contract_id = gl.contract_id))
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) != 0 THEN 'ADJUSTMENT AUDIT'	
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2) THEN (SELECT vendor_name FROM vendor WHERE vendor_id = (SELECT c.vendor_id FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id WHERE t.transaction_id = gl.transaction_id))
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 3 OR gl.general_ledger_for = 14) THEN (SELECT `freight_supplier` FROM freight f WHERE f.freight_id = (SELECT freight_id FROM freight_cost WHERE freight_cost_id = (SELECT freight_cost_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`)))
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT vh.`vendor_handling_name` FROM vendor_handling vh WHERE vh.vendor_handling_id = (SELECT vendor_handling_id FROM vendor_handling_cost WHERE handling_cost_id = (SELECT handling_cost_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`)))
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT labor_name FROM labor WHERE labor_id = (SELECT labor_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`))
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT cust.customer_name FROM customer cust WHERE customer_id = (SELECT customer_id FROM sales WHERE sales_id = (SELECT sales_id FROM shipment WHERE shipment_id = (SELECT shipment_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`))))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT vendor_name FROM vendor WHERE vendor_id = (SELECT c.vendor_id FROM contract c LEFT JOIN stockpile_contract sc ON c.`contract_id` = sc.`contract_id` LEFT JOIN payment p ON sc.`stockpile_contract_id` = p.`stockpile_contract_id` WHERE p.`payment_id` = gl.payment_id))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 2 THEN (SELECT vendor_name FROM vendor WHERE vendor_id = (SELECT vendor_id FROM payment WHERE payment_id = gl.payment_id))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT `freight_supplier` FROM freight f WHERE f.freight_id = (SELECT freight_id FROM payment WHERE payment_id = gl.`payment_id`))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT vh.`vendor_handling_name` FROM vendor_handling vh WHERE vh.vendor_handling_id = (SELECT vendor_handling_id FROM payment WHERE payment_id = gl.`payment_id`))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT labor_name FROM labor WHERE labor_id = (SELECT labor_id FROM `payment` WHERE payment_id = gl.`payment_id`))   
                WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 5 OR gl.general_ledger_for = 8) THEN (SELECT gv.general_vendor_name FROM general_vendor gv WHERE gv.general_vendor_id = (SELECT p.general_vendor_id FROM payment p WHERE p.payment_id = gl.payment_id))                
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 6 THEN (SELECT ap.account_name FROM account ap WHERE ap.account_id = (SELECT p.account_id FROM payment p WHERE p.payment_id = gl.payment_id ))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT cust.customer_name FROM customer cust WHERE customer_id = (SELECT customer_id FROM sales WHERE sales_id = (SELECT sales_id FROM payment  WHERE payment_id = gl.payment_id)))				
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT DISTINCT(gv.general_vendor_name) FROM general_vendor gv LEFT JOIN invoice_detail id ON gv.general_vendor_id = id.general_vendor_id LEFT JOIN invoice i ON i.invoice_id = id.invoice_id LEFT JOIN payment p ON p.invoice_id = i.invoice_id WHERE p.payment_id = gl.payment_id LIMIT 1)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT DISTINCT(gv.general_vendor_name) FROM general_vendor gv LEFT JOIN payment_cash pc ON gv.general_vendor_id = pc.general_vendor_id WHERE pc.payment_id = gl.payment_id LIMIT 1)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT general_vendor_name FROM general_vendor  WHERE general_vendor_id = (SELECT general_vendor_id FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id))
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 AND (SELECT general_vendor_id FROM gl_add WHERE gl_add_id = (SELECT gl_add_id FROM gl_detail WHERE gl_detail_id = gl.jurnal_id)) IS NOT NULL THEN (SELECT general_vendor_name FROM general_vendor  WHERE general_vendor_id = (SELECT general_vendor_id FROM payment  WHERE payment_id = gl.payment_id))
                WHEN gl.accrue_id IS NOT NULL THEN (SELECT a.general_vendor_name FROM general_vendor a LEFT JOIN accrue_prediction_detail b ON a.general_vendor_id = b.general_vendor_id WHERE b.prediction_detail_id = gl.accrue_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 2 THEN (SELECT vendor_name FROM vendor WHERE vendor_id = (SELECT vendor_id FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id))
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT `freight_supplier` FROM freight f WHERE f.freight_id = (SELECT freightId FROM invoice_notim WHERE inv_notim_id = gl.`invoice_notim_id`))
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT vh.`vendor_handling_name` FROM vendor_handling vh WHERE vh.vendor_handling_id = (SELECT vendorHandlingId FROM invoice_notim WHERE inv_notim_id = gl.`invoice_notim_id`))
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT labor_name FROM labor WHERE labor_id = (SELECT laborId FROM `invoice_notim` WHERE inv_notim_id = gl.`invoice_notim_id`))   
                ELSE '' END AS supplier_name,
                
                CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT vendor_code FROM vendor WHERE vendor_id = (SELECT vendor_id FROM contract WHERE contract_id = gl.contract_id))
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) != 0 THEN 'ADJ'	
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2) THEN (SELECT vendor_code FROM vendor WHERE vendor_id = (SELECT c.vendor_id FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id WHERE t.transaction_id = gl.transaction_id))
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 3 OR gl.general_ledger_for = 14) THEN (SELECT `freight_code` FROM freight f WHERE f.freight_id = (SELECT freight_id FROM freight_cost WHERE freight_cost_id = (SELECT freight_cost_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`)))
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT vh.`vendor_handling_code` FROM vendor_handling vh WHERE vh.vendor_handling_id = (SELECT vendor_handling_id FROM vendor_handling_cost WHERE handling_cost_id = (SELECT handling_cost_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`)))
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT labor_code FROM labor WHERE labor_id = (SELECT labor_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`))
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT cust.customer_code FROM customer cust WHERE customer_id = (SELECT customer_id FROM sales WHERE sales_id = (SELECT sales_id FROM shipment WHERE shipment_id = (SELECT shipment_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`))))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT vendor_code FROM vendor WHERE vendor_id = (SELECT c.vendor_id FROM contract c LEFT JOIN stockpile_contract sc ON c.`contract_id` = sc.`contract_id` LEFT JOIN payment p ON sc.`stockpile_contract_id` = p.`stockpile_contract_id` WHERE p.`payment_id` = gl.payment_id))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 2 THEN (SELECT vendor_code FROM vendor WHERE vendor_id = (SELECT vendor_id FROM payment WHERE payment_id = gl.payment_id))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT `freight_code` FROM freight f WHERE f.freight_id = (SELECT freight_id FROM payment WHERE payment_id = gl.`payment_id`))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT vh.`vendor_handling_code` FROM vendor_handling vh WHERE vh.vendor_handling_id = (SELECT vendor_handling_id FROM payment WHERE payment_id = gl.`payment_id`))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT labor_code FROM labor WHERE labor_id = (SELECT labor_id FROM `payment` WHERE payment_id = gl.`payment_id`))   
                WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 5 OR gl.general_ledger_for = 8) THEN (SELECT gv.general_vendor_code FROM general_vendor gv WHERE gv.general_vendor_id = (SELECT p.general_vendor_id FROM payment p WHERE p.payment_id = gl.payment_id))                
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 6 THEN (SELECT ap.account_name FROM account ap WHERE ap.account_id = (SELECT p.account_id FROM payment p WHERE p.payment_id = gl.payment_id ))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT cust.customer_code FROM customer cust WHERE customer_id = (SELECT customer_id FROM sales WHERE sales_id = (SELECT sales_id FROM payment  WHERE payment_id = gl.payment_id)))				
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT DISTINCT(gv.general_vendor_code) FROM general_vendor gv LEFT JOIN invoice_detail id ON gv.general_vendor_id = id.general_vendor_id LEFT JOIN invoice i ON i.invoice_id = id.invoice_id LEFT JOIN payment p ON p.invoice_id = i.invoice_id WHERE p.payment_id = gl.payment_id LIMIT 1)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT DISTINCT(gv.general_vendor_code) FROM general_vendor gv LEFT JOIN payment_cash pc ON gv.general_vendor_id = pc.general_vendor_id WHERE pc.payment_id = gl.payment_id LIMIT 1)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT general_vendor_code FROM general_vendor  WHERE general_vendor_id = (SELECT general_vendor_id FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id))
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 AND (SELECT general_vendor_id FROM gl_add WHERE gl_add_id = (SELECT gl_add_id FROM gl_detail WHERE gl_detail_id = gl.jurnal_id)) IS NOT NULL THEN (SELECT general_vendor_code FROM general_vendor  WHERE general_vendor_id = (SELECT general_vendor_id FROM payment  WHERE payment_id = gl.payment_id))
                WHEN gl.accrue_id IS NOT NULL THEN (SELECT a.general_vendor_code FROM general_vendor a LEFT JOIN accrue_prediction_detail b ON a.general_vendor_id = b.general_vendor_id WHERE b.prediction_detail_id = gl.accrue_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 2 THEN (SELECT vendor_code FROM vendor WHERE vendor_id = (SELECT vendor_id FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id))
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT freight_code FROM freight WHERE freight_id = (SELECT freightId FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id))
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT labor_code FROM labor WHERE labor_id = (SELECT laborId FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id))
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT vendor_handling_code FROM vendor_handling WHERE vendor_handling_id = (SELECT vendorHandlingId FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id))                    
                ELSE '' END AS supplier_code,
                        
            CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT contract_no FROM contract WHERE contract_id = gl.contract_id)
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14)
                THEN  (SELECT contract_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.transaction_id))) 
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT sales_no FROM sales WHERE sales_id = (SELECT sales_id FROM shipment WHERE shipment_id = (SELECT shipment_id FROM `transaction` WHERE transaction_id = gl.transaction_id)))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 1 THEN  (SELECT contract_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM payment WHERE payment_id = gl.payment_id))) 
                WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 13) THEN (SELECT contract_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.t_id)))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT c.contract_no FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id LEFT JOIN payment_cash pc ON pc.transaction_id = t.transaction_id WHERE pc.payment_cash_id = gl.cash_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 4 THEN  (SELECT contract_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM payment WHERE payment_id = gl.payment_id))) 
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT sales_no FROM sales WHERE sales_id = (SELECT sales_id FROM shipment WHERE shipment_id = (SELECT shipment_id FROM `transaction` WHERE transaction_id = gl.transaction_id)))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT i.entry_date FROM invoice i LEFT JOIN payment p ON i.invoice_id = p.invoice_id WHERE p.payment_id = gl.payment_id), '%Y-%m-%d') < '2018-09-24' THEN (SELECT c.contract_no FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN invoice i ON i.`po_id` = sc.`stockpile_contract_id` LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT i.entry_date FROM invoice i LEFT JOIN payment p ON i.invoice_id = p.invoice_id WHERE p.payment_id = gl.payment_id), '%Y-%m-%d') >= '2018-09-24' THEN (SELECT c.contract_no FROM contract c LEFT JOIN invoice_detail id ON c.contract_id = id.poId LEFT JOIN invoice i ON i.invoice_id = id.invoice_id LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id LIMIT 1)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT entry_date FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id), '%Y-%m-%d') < '2018-09-24'  THEN (SELECT c.contract_no FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN invoice i ON i.`po_id` = sc.`stockpile_contract_id` LEFT JOIN invoice_detail id ON i.`invoice_id` = id.invoice_id WHERE id.`invoice_detail_id` = gl.invoice_id)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT entry_date FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id), '%Y-%m-%d') >= '2018-09-24' THEN (SELECT c.contract_no FROM contract c LEFT JOIN invoice_detail id ON c.contract_id = id.poId WHERE id.`invoice_detail_id` = gl.invoice_id)
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT c.contract_no FROM contract c LEFT JOIN gl_add jm ON jm.contract_id = c.contract_id LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13) THEN (SELECT contract_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.t_id)))
                ELSE '' END AS contract_no,

            CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT po_no FROM contract WHERE contract_id = gl.contract_id)
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14)
                THEN (SELECT po_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.transaction_id))) 
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT po_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM payment WHERE payment_id = gl.payment_id)))
                WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 13) THEN (SELECT po_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.t_id)))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT c.po_no FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id LEFT JOIN payment_cash pc ON pc.transaction_id = t.transaction_id WHERE pc.payment_cash_id = gl.cash_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT po_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM payment WHERE payment_id = gl.payment_id)))
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT i.entry_date FROM invoice i LEFT JOIN payment p ON i.invoice_id = p.invoice_id WHERE p.payment_id = gl.payment_id), '%Y-%m-%d') < '2018-09-24' THEN (SELECT c.po_no FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN invoice i ON i.`po_id` = sc.`stockpile_contract_id` LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT i.entry_date FROM invoice i LEFT JOIN payment p ON i.invoice_id = p.invoice_id WHERE p.payment_id = gl.payment_id), '%Y-%m-%d') >= '2018-09-24' THEN (SELECT c.po_no FROM contract c LEFT JOIN invoice_detail id ON c.contract_id = id.poId LEFT JOIN invoice i ON i.invoice_id = id.invoice_id LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id LIMIT 1)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT entry_date FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id), '%Y-%m-%d') < '2018-09-24'  THEN (SELECT c.po_no FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN invoice i ON i.`po_id` = sc.`stockpile_contract_id` LEFT JOIN invoice_detail id ON i.`invoice_id` = id.invoice_id WHERE id.`invoice_detail_id` = gl.invoice_id)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 AND DATE_FORMAT((SELECT entry_date FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id), '%Y-%m-%d') >= '2018-09-24' THEN (SELECT c.po_no FROM contract c LEFT JOIN invoice_detail id ON c.contract_id = id.poId WHERE id.`invoice_detail_id` = gl.invoice_id)
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT c.po_no FROM contract c LEFT JOIN gl_add jm ON jm.contract_id = c.contract_id LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
                ELSE '' END AS po_no,
                    
            CASE WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 12 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) THEN (SELECT invoice_no FROM payment WHERE payment_id = gl.payment_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.invoice_no FROM invoice i LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.invoice_no FROM invoice i LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id)
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT i.invoice_no FROM invoice i LEFT JOIN gl_add jm ON jm.invoice_id = i.invoice_id LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 )THEN (SELECT i.inv_notim_no FROM invoice_notim i WHERE i.inv_notim_id = gl.invoice_notim_id)
                ELSE '' END AS invoice_no,
                    
            CASE WHEN gl.payment_id IS NOT NULL THEN (SELECT tax_invoice FROM payment WHERE payment_id = gl.payment_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.invoice_tax FROM invoice i LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.invoice_tax FROM invoice i LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id
                WHERE id.invoice_detail_id = gl.invoice_id ORDER BY id.invoice_detail_id DESC LIMIT 1)
                WHEN gl.invoice_notim_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 )THEN (SELECT pp.tax_invoice  FROM  pengajuan_payment pp INNER JOIN invoice_notim i ON i.idpp = pp.idpp WHERE i.inv_notim_id = gl.invoice_notim_id)
                ELSE '' END AS tax_invoice,
                        
            CASE WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 12 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) THEN (SELECT invoice_no FROM payment WHERE payment_id = gl.payment_id)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.invoice_no2 FROM invoice i LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id
                WHERE id.invoice_detail_id = gl.invoice_id ORDER BY id.invoice_detail_id DESC LIMIT 1)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.invoice_no2 FROM invoice i LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT i.invoice_no2 FROM invoice i LEFT JOIN gl_add jm ON jm.invoice_id = i.invoice_id LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 )THEN (SELECT pp.invoice_no  FROM  pengajuan_payment pp INNER JOIN invoice_notim i ON i.idpp = pp.idpp WHERE i.inv_notim_id = gl.invoice_notim_id)
                ELSE '' END AS invoice_no_2,
                        
            CASE WHEN gl.invoice_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 ) THEN (SELECT i.status_payment FROM invoice_notim i WHERE i.inv_notim_id = gl.invoice_id)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.payment_status FROM invoice i LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id
                WHERE id.invoice_detail_id = gl.invoice_id)
                ELSE '' END AS invoice_payment,
                    
            CASE WHEN gl.payment_id IS NOT NULL THEN (SELECT cheque_no FROM payment WHERE payment_id = gl.payment_id)
                ELSE '' END AS cheque_no,
                        
            CASE WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 5 OR gl.general_ledger_for = 8) THEN  (SELECT shipment_no FROM shipment WHERE shipment_id = (SELECT shipment_id FROM payment WHERE payment_id = gl.payment_id)) 
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT GROUP_CONCAT(sh2.shipment_no) FROM payment_detail pd2 LEFT JOIN shipment sh2 ON sh2.shipment_id = pd2.shipment_id WHERE pd2.payment_id = gl.payment_id GROUP BY pd2.payment_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT DISTINCT(sh.shipment_no) FROM shipment sh LEFT JOIN invoice_detail id ON sh.shipment_id = id.shipment_id LEFT JOIN invoice i ON i.invoice_id = id.invoice_id LEFT JOIN payment p ON p.invoice_id = i.invoice_id WHERE p.payment_id = gl.payment_id LIMIT 1)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT DISTINCT(sh.shipment_no) FROM shipment sh LEFT JOIN payment_cash pc ON sh.shipment_id = pc.shipment_id WHERE pc.payment_cash_id = gl.cash_id LIMIT 1)
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) !=0 THEN (SELECT sh.shipment_no FROM shipment sh LEFT JOIN adjustment_audit aa ON sh.shipment_id = aa.shipment_id LEFT JOIN `transaction` t ON t.adjustmentAudit_id = audit_id WHERE t.transaction_id = gl.transaction_id)
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT mutasi_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT mh.kode_mutasi FROM mutasi_header mh LEFT JOIN TRANSACTION t ON t.mutasi_id = mh.mutasi_header_id WHERE t.transaction_id = gl.transaction_id)
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT c.return_shipment FROM contract c LEFT JOIN stockpile_contract sc ON c.`contract_id` = sc.`contract_id` LEFT JOIN TRANSACTION t ON t.`stockpile_contract_id` = sc.`stockpile_contract_id` WHERE t.`transaction_id` = gl.transaction_id LIMIT 1) IS NOT NULL THEN (SELECT sh.shipment_no FROM shipment sh LEFT JOIN contract c ON sh.shipment_id = c.return_shipment_id LEFT JOIN stockpile_contract sc ON sc.contract_id = c.contract_id LEFT JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id WHERE t.transaction_id = gl.transaction_id LIMIT 1)
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT shipment_no FROM shipment WHERE shipment_id = (SELECT shipment_id FROM `transaction` WHERE transaction_id = gl.transaction_id ))
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 AND (SELECT mutasi_detail_id FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id) IS NOT NULL THEN (SELECT mh.kode_mutasi FROM mutasi_header mh LEFT JOIN mutasi_detail md ON mh.mutasi_header_id = md.mutasi_header_id LEFT JOIN invoice_detail id ON id.mutasi_detail_id = md.mutasi_detail_id WHERE id.invoice_detail_id = gl.invoice_id LIMIT 1)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT shipment_no FROM shipment WHERE shipment_id = (SELECT shipment_id FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id))
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT sh.shipment_no FROM shipment sh LEFT JOIN gl_add jm ON jm.shipment_id = sh.shipment_id LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
                WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT mh.kode_mutasi FROM mutasi_header mh LEFT JOIN mutasi_contract mc ON mh.mutasi_header_id = mc.mutasi_header_id LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = mc.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)  
                WHEN gl.accrue_id IS NOT NULL THEN (SELECT a.shipment_no FROM shipment a LEFT JOIN accrue_prediction b ON a.shipment_id = b.shipment_id LEFT JOIN accrue_prediction_detail c ON b.prediction_id = c.prediction_id WHERE c.prediction_detail_id = gl.accrue_id LIMIT 1)	
                ELSE '' END AS shipment_code,
                        
            CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.general_ledger_module = 'CONTRACT ADJUSTMENT' THEN (SELECT adjustment FROM contract_adjustment WHERE adj_id = gl.description)
                WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT quantity FROM contract WHERE contract_id = gl.contract_id) 
                WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.general_ledger_module = 'STOCK TRANSIT' THEN (SELECT st.send_weight FROM stock_transit st LEFT JOIN stockpile_contract sc ON st.stockpile_contract_id = sc.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.account_id = 8 THEN (SELECT quantity FROM `transaction` WHERE transaction_id = gl.transaction_id)
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.account_id = 52 THEN (SELECT shrink FROM `transaction` WHERE transaction_id = gl.transaction_id) 
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.account_id = 147 THEN (SELECT send_weight FROM `transaction` WHERE transaction_id = gl.transaction_id) 
                WHEN gl.transaction_id IS NOT NULL AND(gl.general_ledger_for = 2 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 9) THEN (SELECT quantity FROM `transaction` WHERE transaction_id = gl.transaction_id)
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT freight_quantity FROM `transaction` WHERE transaction_id = gl.transaction_id) 
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT handling_quantity FROM `transaction` WHERE transaction_id = gl.transaction_id) 
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT pc.qty FROM payment_cash pc WHERE pc.`payment_cash_id` = gl.cash_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT quantity FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM payment WHERE payment_id = gl.payment_id ))) 
                WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 4) THEN (SELECT COALESCE(SUM(t2.quantity), 0) FROM `transaction` t2 WHERE t2.transaction_id = gl.t_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT COALESCE(SUM(t2.freight_quantity), 0) FROM `transaction` t2 WHERE t2.transaction_id = gl.t_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT COALESCE(SUM(t2.handling_quantity), 0) FROM `transaction` t2 WHERE t2.hc_payment_id = gl.payment_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT COALESCE(SUM(sh2.quantity), 0) FROM payment_detail pd2 LEFT JOIN shipment sh2 ON sh2.shipment_id = pd2.shipment_id WHERE pd2.payment_id = gl.payment_id)
                WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 5 OR gl.general_ledger_for = 6 OR gl.general_ledger_for = 8) THEN (SELECT qty FROM payment WHERE payment_id = gl.payment_id ) 
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT jm.quantity FROM gl_add jm LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT qty FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id)
                WHEN gl.accrue_id IS NOT NULL THEN (SELECT b.qty FROM accrue_prediction_detail b WHERE b.prediction_detail_id = gl.accrue_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 2 THEN (SELECT qty FROM payment_curah WHERE transaction_id = gl.t_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT qty FROM payment_oa WHERE transaction_id = gl.t_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT qty FROM payment_handling WHERE transaction_id = gl.t_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT qty FROM payment_ob WHERE transaction_id = gl.t_id)
                ELSE '' END AS quantity,
                        
            CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT price_converted FROM contract WHERE contract_id = gl.contract_id) 
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 9) THEN (SELECT unit_price FROM `transaction` WHERE transaction_id = gl.transaction_id) 
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT freight_price FROM `transaction` WHERE transaction_id = gl.transaction_id)  
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT GROUP_CONCAT(vhc.price_converted) FROM vendor_handling_cost vhc LEFT JOIN `transaction` t ON vhc.handling_cost_id = t.handling_cost_id WHERE t.transaction_id = gl.transaction_id)  
                WHEN gl.transaction_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT unloading_price FROM `transaction` WHERE transaction_id = gl.transaction_id) 
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT pc.price FROM payment_cash pc WHERE pc.`payment_cash_id` = gl.cash_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT GROUP_CONCAT(vhc.price_converted) FROM vendor_handling_cost vhc LEFT JOIN vendor_handling vh ON vh.vendor_handling_id = vhc.vendor_handling_id LEFT JOIN payment p ON p.vendor_handling_id = vh.vendor_handling_id WHERE p.payment_id = gl.payment_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT GROUP_CONCAT(t2.freight_price) FROM `transaction` t2 WHERE t2.transaction_id = gl.t_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 2 THEN (SELECT GROUP_CONCAT(t2.unit_price) FROM `transaction` t2 WHERE t2.transaction_id = gl.t_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 1 THEN (SELECT price_converted FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM payment WHERE payment_id = gl.payment_id ))) 
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 9 THEN (SELECT GROUP_CONCAT(t2.unit_price) FROM `transaction` t2 WHERE t2.payment_id = gl.payment_id GROUP BY t2.payment_id)
                WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 5 OR gl.general_ledger_for = 6 OR gl.general_ledger_for = 8) THEN (SELECT price FROM payment WHERE payment_id = gl.payment_id )
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT price FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id) 
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT jm.price FROM gl_add jm LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
                WHEN gl.accrue_id IS NOT NULL THEN (SELECT b.priceMT FROM accrue_prediction_detail b WHERE b.prediction_detail_id = gl.accrue_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 2 THEN (SELECT price FROM payment_curah WHERE transaction_id = gl.t_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT price FROM payment_oa WHERE transaction_id = gl.t_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 13 THEN (SELECT price FROM payment_handling WHERE transaction_id = gl.t_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT price FROM payment_ob WHERE transaction_id = gl.t_id)                    
                ELSE '' END AS price,
                        
            CASE WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT notes FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT i.remarks FROM invoice i LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 12 THEN (SELECT pc.notes FROM payment_cash pc WHERE pc.`payment_cash_id` = gl.cash_id)
                WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_module = 'CONTRACT ADJUSTMENT' THEN (SELECT adjustment_notes FROM contract_adjustment WHERE adj_id = gl.description) 
                WHEN gl.contract_id IS NOT NULL THEN (SELECT notes FROM contract WHERE contract_id = gl.contract_id) 
                WHEN gl.transaction_id IS NOT NULL THEN (SELECT CONCAT(slip_retur,' - ',notes) FROM `transaction` WHERE transaction_id = gl.transaction_id)    
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT jd.notes FROM gl_detail jd WHERE jd.gl_detail_id = gl.jurnal_id)
                WHEN gl.accrue_id IS NOT NULL THEN (SELECT b.cost_name FROM accrue_prediction_detail b WHERE b.prediction_detail_id = gl.accrue_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 )
                            THEN (SELECT pp.remarks  FROM  pengajuan_payment pp INNER JOIN invoice_notim i ON i.idpp = pp.idpp WHERE i.inv_notim_id = gl.invoice_notim_id)
                ELSE (SELECT remarks FROM payment WHERE payment_id = gl.payment_id )  END AS remarks,
                                            
            CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 AND gl.general_ledger_module = 'CONTRACT ADJUSTMENT' THEN DATE_FORMAT((SELECT adjustment_date FROM contract_adjustment WHERE adj_id = gl.description), '%Y-%m-%d')
                WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 AND (SELECT contract_status FROM contract WHERE contract_id = gl.contract_id) = 2 THEN DATE_FORMAT((SELECT reject_date FROM contract WHERE contract_id = gl.contract_id), '%Y-%m-%d')
                WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_for = 1 THEN DATE_FORMAT((SELECT entry_date FROM contract WHERE contract_id = gl.contract_id), '%Y-%m-%d')
                WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) 
                            THEN (SELECT unloading_date FROM `transaction` WHERE transaction_id = gl.transaction_id)
                WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 5 OR gl.general_ledger_for = 6 OR gl.general_ledger_for = 7 OR gl.general_ledger_for = 8 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 10 OR gl.general_ledger_for = 12 OR gl.general_ledger_for = 13) 
                            AND gl.general_ledger_module = 'RETURN PAYMENT' THEN DATE_FORMAT((SELECT edit_date FROM payment WHERE payment_id = gl.payment_id),'%Y-%m-%d')
                WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 5 OR gl.general_ledger_for = 6 OR gl.general_ledger_for = 7 OR gl.general_ledger_for = 8 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 10 OR gl.general_ledger_for = 12 OR gl.general_ledger_for = 13) 
                                THEN (SELECT payment_date FROM payment WHERE payment_id = gl.payment_id )
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT DATE_FORMAT(i.input_date, '%Y-%m-%d') FROM invoice i LEFT JOIN payment p ON p.`invoice_id` = i.invoice_id WHERE p.payment_id = gl.payment_id)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 AND gl.general_ledger_module = 'RETURN INVOICE' THEN (SELECT DATE_FORMAT(i.sync_date, '%Y-%m-%d') FROM invoice i LEFT JOIN invoice_detail id ON id.invoice_id = i.invoice_id WHERE id.invoice_detail_id = gl.invoice_id)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT DATE_FORMAT(i.invoice_date, '%Y-%m-%d') FROM invoice i LEFT JOIN invoice_detail id ON id.invoice_id = i.invoice_id WHERE id.invoice_detail_id = gl.invoice_id)
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT DATE_FORMAT(jm.gl_add_date, '%Y-%m-%d') FROM gl_add jm LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
                WHEN gl.accrue_id IS NOT NULL AND gl.description = 'Reverse Journal' THEN (SELECT a.invoice_date FROM invoice a LEFT JOIN invoice_detail b ON a.`invoice_id` = b.`invoice_id` LEFT JOIN accrue_prediction_detail c ON b.`prediction_detail_id` = c.`prediction_detail_id` WHERE c.`prediction_detail_id` = gl.accrue_id LIMIT 1)
                WHEN gl.accrue_id IS NOT NULL AND gl.description = 'Cancel Journal' THEN (SELECT cancel_jurnal_date FROM accrue_prediction_detail WHERE prediction_detail_id = gl.accrue_id)
                WHEN gl.accrue_id IS NOT NULL THEN (SELECT LAST_DAY(b.PEB_Date) FROM accrue_prediction b LEFT JOIN accrue_prediction_detail c ON b.prediction_id = c.prediction_id WHERE c.prediction_detail_id = gl.accrue_id LIMIT 1)
                WHEN gl.invoice_notim_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13) AND gl.general_ledger_module = 'INVOICE NOTIM' 
                                THEN (SELECT DATE_FORMAT(pp.invoice_date, '%Y-%m-%d') FROM pengajuan_payment pp 
                                    INNER JOIN invoice_notim ino ON pp.idpp = ino.idpp WHERE ino.inv_notim_id = gl.invoice_notim_id)
                WHEN gl.invoice_notim_id IS NOT NULL AND (gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13) AND gl.general_ledger_module = 'RETURN INVOICE NOTIM' 
                                THEN (SELECT DATE_FORMAT(inv.return_date, '%Y-%m-%d') FROM invoice_notim inv WHERE inv.inv_notim_id = gl.invoice_notim_id)                    
                ELSE '' END AS gl_date,
                        
            CASE WHEN gl.payment_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 5 OR gl.general_ledger_for = 6 OR gl.general_ledger_for = 7 OR gl.general_ledger_for = 8 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 10 OR gl.general_ledger_for = 12 OR gl.general_ledger_for = 13) THEN (SELECT exchange_rate FROM payment WHERE payment_id = gl.payment_id )
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT exchange_rate FROM invoice_detail WHERE invoice_detail_id = gl.invoice_id)
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT jd.exchange_rate FROM gl_detail jd WHERE jd.gl_detail_id = gl.jurnal_id)
                ELSE '' END AS exchange_rate,
                    
            CASE WHEN gl.payment_id IS NOT NULL THEN (SELECT bank_code FROM bank WHERE bank_id = (SELECT bank_id FROM payment WHERE payment_id = gl.payment_id ))
                WHEN gl.invoice_id IS NOT NULL THEN (SELECT b.bank_code FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN invoice i ON i.invoice_id = p.invoice_id LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id AND p.payment_status = 0 LIMIT 1)
                WHEN gl.contract_id IS NOT NULL THEN (SELECT b.bank_code FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = p.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)
                WHEN gl.transaction_id IS NOT NULL AND (SELECT payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT b.bank_code FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN TRANSACTION t ON t.payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS bank_code,
                        
            CASE WHEN gl.payment_id IS NOT NULL THEN (SELECT bank_type FROM bank WHERE bank_id = (SELECT bank_id FROM payment WHERE payment_id = gl.payment_id )) 
                WHEN gl.invoice_id IS NOT NULL THEN (SELECT b.bank_type FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN invoice i ON i.invoice_id = p.invoice_id LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id AND p.payment_status = 0 LIMIT 1)
                WHEN gl.contract_id IS NOT NULL THEN (SELECT b.bank_type FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = p.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)
                WHEN gl.transaction_id IS NOT NULL AND (SELECT payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT b.bank_type FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN TRANSACTION t ON t.payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS bank_type,
                        
            CASE WHEN gl.payment_id IS NOT NULL THEN (SELECT currency_code FROM currency WHERE currency_id = (SELECT currency_id FROM payment WHERE payment_id = gl.payment_id))
                WHEN gl.invoice_id IS NOT NULL THEN (SELECT pcur.currency_code FROM currency pcur LEFT JOIN payment p ON p.currency_id = pcur.currency_id LEFT JOIN invoice i ON i.invoice_id = p.invoice_id LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id AND p.payment_status = 0 LIMIT 1)
                WHEN gl.contract_id IS NOT NULL THEN (SELECT pcur.currency_code FROM currency pcur LEFT JOIN payment p ON p.currency_id = pcur.currency_id LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = p.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)		
                WHEN gl.transaction_id IS NOT NULL AND (SELECT payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT pcur.currency_code FROM currency pcur LEFT JOIN payment p ON p.currency_id = pcur.currency_id LEFT JOIN TRANSACTION t ON t.payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS pcur_currency_code,
                        
            CASE WHEN (SELECT payment_location FROM payment WHERE payment_id = gl.payment_id ) = 0 THEN 'HOF'
                WHEN gl.invoice_id IS NOT NULL THEN (SELECT CASE WHEN p.payment_location = 0 THEN 'HOF'
                ELSE sp.stockpile_code END AS sc FROM payment p LEFT JOIN stockpile sp ON p.payment_location = sp.stockpile_id LEFT JOIN invoice i ON i.invoice_id = p.invoice_id LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id AND p.payment_status = 0 LIMIT 1)
                WHEN gl.contract_id IS NOT NULL THEN (SELECT CASE WHEN p.payment_location = 0 THEN 'HOF'
                ELSE sp.stockpile_code END AS sc FROM payment p LEFT JOIN stockpile sp ON p.payment_location = sp.stockpile_id LEFT JOIN stockpile_contract sc ON sc.stockpile_contract_id = p.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)
                WHEN gl.transaction_id IS NOT NULL AND (SELECT payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN 'HOF'
                ELSE (SELECT stockpile_code FROM stockpile WHERE stockpile_id = (SELECT payment_location FROM payment WHERE payment_id = gl.payment_id )) END AS payment_location2,
                        
            CASE WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_module = 'STOCK TRANSIT' THEN (SELECT st.kode_stock_transit FROM stock_transit st LEFT JOIN stockpile_contract sc ON st.stockpile_contract_id = sc.stockpile_contract_id WHERE sc.contract_id = gl.contract_id LIMIT 1)
                WHEN gl.contract_id IS NOT NULL AND gl.general_ledger_module = 'CONTRACT ADJUSTMENT' THEN (SELECT CONCAT(po_no,'-A') FROM contract WHERE contract_id = gl.contract_id) 
                WHEN gl.contract_id IS NOT NULL THEN (SELECT po_no FROM contract WHERE contract_id = gl.contract_id) 
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_module = 'RETURN INVOICE' THEN (SELECT CONCAT(i.invoice_no,'-RET') FROM invoice i LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_module = 'INVOICE DETAIL' THEN (SELECT i.invoice_no FROM invoice i LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id)
            
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_module = 'RETURN INVOICE NOTIM' THEN (SELECT CONCAT(i.inv_notim_no,'-RET') FROM invoice_notim i WHERE i.inv_notim_id = gl.invoice_notim_id)
            WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_module = 'INVOICE NOTIM' THEN (SELECT id.inv_notim_no FROM  invoice_notim id WHERE id.inv_notim_id = gl.invoice_notim_id)

                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_module = 'RETURN PAYMENT' THEN (SELECT CONCAT(payment_no,'-RET') FROM payment WHERE payment_id = gl.payment_id)
                WHEN gl.payment_id IS NOT NULL THEN (SELECT payment_no FROM payment WHERE payment_id = gl.payment_id ) 
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT jm.gl_add_no FROM gl_add jm LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
                WHEN gl.transaction_id IS NOT NULL THEN (SELECT slip_no FROM TRANSACTION WHERE transaction_id = gl.transaction_id)
                WHEN gl.accrue_id IS NOT NULL AND gl.description = 'Reverse Journal' THEN (SELECT CONCAT(b.prediction_code,'-',c.prediction_detail_id,'-RVS') FROM accrue_prediction b LEFT JOIN accrue_prediction_detail c ON b.prediction_id = c.prediction_id WHERE c.prediction_detail_id = gl.accrue_id LIMIT 1)
                WHEN gl.accrue_id IS NOT NULL AND gl.description = 'Cancel Journal' THEN (SELECT CONCAT(b.prediction_code,'-',c.prediction_detail_id,'-RET') FROM accrue_prediction b LEFT JOIN accrue_prediction_detail c ON b.prediction_id = c.prediction_id WHERE c.prediction_detail_id = gl.accrue_id LIMIT 1)
                WHEN gl.accrue_id IS NOT NULL THEN (SELECT CONCAT(b.prediction_code,'-',c.prediction_detail_id) FROM accrue_prediction b LEFT JOIN accrue_prediction_detail c ON b.prediction_id = c.prediction_id WHERE c.prediction_detail_id = gl.accrue_id LIMIT 1)
                ELSE '' END AS payment_no,
                
            CASE WHEN gl.contract_id IS NOT NULL THEN (SELECT p.payment_no FROM payment p LEFT JOIN stockpile_contract sc ON p.stockpile_contract_id = sc.stockpile_contract_id LEFT JOIN contract c ON c.contract_id = sc.contract_id WHERE c.contract_id = gl.contract_id AND p.payment_status = 0 LIMIT 1)
                WHEN gl.invoice_id IS NOT NULL AND gl.general_ledger_for = 10 THEN (SELECT p.payment_no FROM payment p LEFT JOIN invoice i ON i.invoice_id = p.invoice_id LEFT JOIN invoice_detail id ON i.invoice_id = id.invoice_id WHERE id.invoice_detail_id = gl.invoice_id AND p.payment_status = 0 LIMIT 1 )
                WHEN gl.payment_id IS NOT NULL THEN (SELECT payment_no FROM payment WHERE payment_id = gl.payment_id ) 
                WHEN gl.jurnal_id IS NOT NULL AND gl.general_ledger_for = 11 THEN (SELECT jm.gl_add_no FROM gl_add jm LEFT JOIN gl_detail jd ON jd.gl_add_id = jm.gl_add_id WHERE jd.gl_detail_id = gl.jurnal_id)
                WHEN gl.transaction_id IS NOT NULL AND (SELECT payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT p.payment_no FROM payment p LEFT JOIN TRANSACTION t ON t.payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS payment_no2,
                
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT fc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT b.bank_code FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN TRANSACTION t ON t.fc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS bank_code_fc,
            
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT uc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT b.bank_code FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN TRANSACTION t ON t.uc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS bank_code_uc,
            
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT hc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT b.bank_code FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN TRANSACTION t ON t.hc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS bank_code_hc,
                
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT fc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT b.bank_type FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN TRANSACTION t ON t.fc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS bank_type_fc,
                
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT uc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT b.bank_type FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN TRANSACTION t ON t.uc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS bank_type_uc,
                
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT hc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT b.bank_type FROM bank b LEFT JOIN payment p ON p.bank_id = b.bank_id LEFT JOIN TRANSACTION t ON t.hc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS bank_type_hc,
            
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT fc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT pcur.currency_code FROM currency pcur LEFT JOIN payment p ON p.currency_id = pcur.currency_id LEFT JOIN TRANSACTION t ON t.fc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS pcur_currency_code_fc,
            
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT uc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT pcur.currency_code FROM currency pcur LEFT JOIN payment p ON p.currency_id = pcur.currency_id LEFT JOIN TRANSACTION t ON t.uc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS pcur_currency_code_uc,
            
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT hc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT pcur.currency_code FROM currency pcur LEFT JOIN payment p ON p.currency_id = pcur.currency_id LEFT JOIN TRANSACTION t ON t.hc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS pcur_currency_code_hc,
            
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT fc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT CASE WHEN p.payment_location = 0 THEN 'HOF'
                ELSE sp.stockpile_code END AS sc FROM payment p LEFT JOIN stockpile sp ON p.payment_location = sp.stockpile_id LEFT JOIN TRANSACTION t ON t.fc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS payment_location_fc,
            
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT uc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT CASE WHEN p.payment_location = 0 THEN 'HOF'
                ELSE sp.stockpile_code END AS sc FROM payment p LEFT JOIN stockpile sp ON p.payment_location = sp.stockpile_id LEFT JOIN TRANSACTION t ON t.uc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS payment_location_uc,
            
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT hc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT CASE WHEN p.payment_location = 0 THEN 'HOF'
                ELSE sp.stockpile_code END AS sc FROM payment p LEFT JOIN stockpile sp ON p.payment_location = sp.stockpile_id LEFT JOIN TRANSACTION t ON t.hc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS payment_location_hc,
            
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT fc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT p.payment_no FROM payment p LEFT JOIN TRANSACTION t ON t.fc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS payment_no_fc,
                
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT uc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT p.payment_no FROM payment p LEFT JOIN TRANSACTION t ON t.uc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS payment_no_uc,
                
            CASE WHEN gl.transaction_id IS NOT NULL AND (SELECT hc_payment_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT p.payment_no FROM payment p LEFT JOIN TRANSACTION t ON t.hc_payment_id = p.payment_id WHERE t.transaction_id = gl.transaction_id)
                ELSE '' END AS payment_no_hc,
                
            CASE WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT freight_id FROM payment WHERE payment_id = gl.payment_id) 
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT freightId FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id) 
            ELSE '' END AS freight_id,
            
            CASE WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 13 THEN  (SELECT vendor_handling_id FROM payment WHERE payment_id = gl.payment_id) 
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 13 THEN  (SELECT vendorHandlingId FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id)
            ELSE '' END AS vendor_handling_id, 
            
            CASE WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT labor_id FROM payment WHERE payment_id = gl.payment_id) 
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 4 THEN (SELECT laborId FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id)	    
            ELSE '' END AS labor_id, 

            (SELECT payment_status FROM payment WHERE payment_id = gl.payment_id) AS payment_status, 
            (SELECT payment_date FROM payment WHERE payment_id = gl.payment_id) AS payment_date,
            
            CASE WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT tax_category FROM tax WHERE tax_id = (SELECT pph_tax_id FROM freight WHERE freight_id = (SELECT freight_id FROM payment WHERE payment_id = gl.payment_id ))) 
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 3 THEN (SELECT tax_category FROM tax WHERE tax_id = (SELECT pph_tax_id FROM freight WHERE freight_id = (SELECT freightId FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id)))
            ELSE '' END AS fc_tax_category,
            
            CASE WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 3 THEN 
                    (SELECT tax_value FROM tax WHERE tax_id = (SELECT pph_tax_id FROM freight WHERE freight_id = (SELECT freight_id FROM payment WHERE payment_id = gl.payment_id ))) 
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 3 THEN
                    (SELECT tax_value FROM tax WHERE tax_id = (SELECT pph_tax_id FROM freight WHERE freight_id = (SELECT freightId FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id ))) 
            ELSE '' END AS fc_tax,

            CASE WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 13 THEN 
                    (SELECT tax_category FROM tax WHERE tax_id = (SELECT pph_tax_id FROM vendor_handling WHERE vendor_handling_id = (SELECT vendor_handling_id FROM payment WHERE payment_id = gl.payment_id ))) 
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 13 THEN 
                    (SELECT tax_category FROM tax WHERE tax_id = (SELECT pph_tax_id FROM vendor_handling WHERE vendor_handling_id = (SELECT vendor_handling_id FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id ))) 
            ELSE '' END AS vhc_tax_category, 

            CASE WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 13 THEN 
                    (SELECT tax_value FROM tax WHERE tax_id = (SELECT pph_tax_id FROM vendor_handling WHERE vendor_handling_id = (SELECT vendor_handling_id FROM payment WHERE payment_id = gl.payment_id )))   
                WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 13 THEN 
                    (SELECT tax_value FROM tax WHERE tax_id = (SELECT pph_tax_id FROM vendor_handling WHERE vendor_handling_id = (SELECT vendor_handling_id FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id )))
            ELSE ''  END AS vhc_tax,  
            
            (SELECT general_vendor_id FROM payment WHERE payment_id = gl.payment_id )  AS gv_id,
            (SELECT t.fc_tax_id FROM `transaction` t WHERE t.transaction_id = gl.transaction_id) AS fc_tax_id,
            (SELECT vh.pph_tax_id FROM vendor_handling vh LEFT JOIN vendor_handling_cost vhc ON vhc.vendor_handling_id = vh.vendor_handling_id LEFT JOIN TRANSACTION t ON t.handling_cost_id = vhc.handling_cost_id WHERE t.transaction_id = gl.transaction_id) AS vhc_tax_id, 
            (SELECT tax_category FROM tax WHERE tax_id = (SELECT fc_tax_id FROM `transaction` WHERE transaction_id = gl.transaction_id))  AS tf_tax_category,
            (SELECT tax_category FROM tax WHERE tax_id = (SELECT pph_tax_id FROM vendor_handling WHERE vendor_handling_id = (SELECT vendor_handling_id FROM vendor_handling_cost WHERE handling_cost_id = (SELECT handling_cost_id FROM `transaction` WHERE transaction_id = gl.transaction_id))))  AS tvh_tax_category,
            (SELECT pph_tax_id FROM general_vendor WHERE general_vendor_id = (SELECT general_vendor_id FROM payment WHERE payment_id = gl.payment_id )) AS gv_pph_id, 
            (SELECT ppn_tax_id FROM general_vendor WHERE general_vendor_id = (SELECT general_vendor_id FROM payment WHERE payment_id = gl.payment_id ))  AS gv_ppn_id, 
            (SELECT tax_category FROM tax WHERE tax_id = (SELECT pph_tax_id FROM general_vendor WHERE general_vendor_id = (SELECT general_vendor_id FROM payment WHERE payment_id = gl.payment_id )))  AS gv_pph_category, 
            CASE WHEN gl.payment_id IS NOT NULL AND gl.general_ledger_for = 3 THEN  
                        (SELECT tax_category FROM tax WHERE tax_id = (SELECT ppn_tax_id FROM freight WHERE freight_id = (SELECT freight_id FROM payment WHERE payment_id = gl.payment_id ))) 
                WHEN gl.invoice_notim_id IS NOT NULL AND gl.general_ledger_for = 3 THEN 		
                        (SELECT tax_category FROM tax WHERE tax_id = (SELECT ppn_tax_id FROM freight WHERE freight_id = (SELECT freightId FROM invoice_notim WHERE inv_notim_id = gl.invoice_notim_id ))) 
            ELSE '' END AS gv_ppn_category, 
            (SELECT account_type FROM account WHERE account_id = gl.account_id) AS  account_type, 
            (SELECT tax_value FROM tax WHERE tax_id = (SELECT fc_tax_id FROM `transaction` t WHERE t.transaction_id = gl.transaction_id)) AS fc_tax_value,
            (SELECT tax_value FROM tax WHERE tax_id = (SELECT pph_tax_id FROM vendor_handling WHERE vendor_handling_id = (SELECT vendor_handling_id FROM vendor_handling_cost WHERE handling_cost_id = (SELECT handling_cost_id FROM `transaction` WHERE transaction_id = gl.transaction_id))))  AS vhc_tax_value,
            (SELECT general_vendor_id FROM gl_add WHERE gl_add_id = (SELECT gl_add_id FROM gl_detail WHERE gl_detail_id= gl.jurnal_id )) AS general_vendor_id, 
            (SELECT vendor_id FROM gl_add WHERE gl_add_id = (SELECT gl_add_id FROM gl_detail WHERE gl_detail_id= gl.jurnal_id )) AS vendor_id, 
            (SELECT payment_method FROM payment WHERE payment_id = gl.payment_id ) AS payment_method,
            (SELECT payment_type FROM payment WHERE payment_id = gl.payment_id ) AS payment_type
        FROM general_ledger gl  WHERE  gl.amount > 0 {$whereCondition}";
    //    echo " querya " . $sqla;
    $resulta = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);
    while ($row = $resulta->fetch_object()) {

        $sql2 = "SELECT s.stockpile_name FROM stockpile s INNER JOIN stockpile_contract sc ON s.`stockpile_id` = sc.`stockpile_id` 
                 INNER JOIN contract c ON sc.`contract_id` = c.`contract_id` WHERE sc.`quantity` > 0 AND c.`contract_no` = '$row->contract_no'";
        $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
        while ($row2 = $result2->fetch_object()) {
            $stockpileName2 = $row2->stockpile_name;
        }

        //$rowActive++;
        if ($row->transaction_id != NULL && $row->account_id == 147 && $row->general_ledger_for == 1) {
            $stockpileName = $stockpileName2;
        } else {
            $stockpileName = $row->stockpile_name2;
        }


        if ($row->general_ledger_id == '' && $row->amount < 0) {
            $credit_amount = $row->amount * -1;
            $debit_amount = 0;
        } elseif ($row->general_ledger_id == '' && $row->amount > 0) {
            $debit_amount = $row->amount;
            $credit_amount = 0;
        }

        if ($row->general_ledger_id != '' && ($row->general_ledger_module == 'NOTA TIMBANG' || ($row->general_ledger_module == 'CONTRACT' && ($row->general_ledger_for == 1 || $row->general_ledger_for == 2)) 
            || $row->general_ledger_module == 'STOCK TRANSIT' || $row->general_ledger_module == 'CONTRACT ADJUSTMENT' || $row->general_ledger_module == 'JURNAL MEMORIAL' 
            || $row->general_ledger_module == 'INVOICE NOTIM' || $row->general_ledger_module == 'RETURN INVOICE NOTIM' || $row->general_ledger_module == 'JURNAL ACCRUE')) {
            $debit_amount = $row->amount;
            $credit_amount = $row->amount;
        }

        //INVOICE NOTIM 
        
        //FREIGHT
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'INVOICE NOTIM' && $row->general_ledger_for == 3 && $row->invoice_notim_id != 0) {
            $credit_amount = $row->amount;
        }

        //END INVOICE NOTIM

        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'INVOICE DETAIL' && $row->general_ledger_for == 10 && $row->invoice_id != 0) {
            $credit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN INVOICE' && $row->general_ledger_for == 10 && $row->invoice_id != 0) {
            $credit_amount = $row->amount;
        }
        //==CREDIT NOTIM==//
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 
            && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13 || $row->general_ledger_for == 14) && $row->account_no == 230204) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 
            && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13 || $row->general_ledger_for == 14) && $row->account_no == 210103) {
            $credit_amount = $row->amount;
        }
        //==END CREDIT NOTIM==//

        //==DEBIT NOTIM==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 
        && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13) && $row->account_no == 140000) {
            $debit_amount = $row->amount * ((100 - $row->tf_tax_value) / 100);
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 
        && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13) && $row->account_no == 230204 && $row->quantity < 0) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 
            && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13) && $row->account_no == 230204) {
            $debit_amount = 0;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 && ($row->general_ledger_for == 14) && $row->account_no == 230204) {
            $debit_amount = $row->amount;;
        }
        //==END DEBIT NOTIM==//

        //==PAYMENT CREDIT===//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 1) {
            $debit_amount = $row->amount;
        //redit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 1) {
        //$debit_amount = $row->amount;
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 1) {
            $debit_amount = $row->amount;
//$credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 1) {
//$debit_amount = $row->amount;
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PETTY CASH' && $row->general_ledger_for == 12) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT ADMIN') {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 12) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 12) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 10 && $row->payment_id != 0) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 10 && $row->payment_id != 0) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->labor_id != 0 && $row->pph_journal != 0 && $row->payment_status != 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = $row->pph_journal;
        }

    //==FREIGHT==//
        if ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3 && $row->payment_method == 2) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->account_id == 5 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 0 && ($row->account_no == 210103 || $row->account_no == 130003)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && ($row->account_no == 210103 || $row->account_no == 130003)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->payment_method == 2 && $row->freight_id != 0 && $row->pph_journal != 0 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->payment_method == 1 && $row->freight_id != 0 && $row->ppn_journal != 0 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && ($row->account_no == 150410)) {
            $credit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->general_ledger_method == 'DP' && $row->payment_status == 1 && ($row->fc_tax_category == 0 || $row->fc_tax_category == 1) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->fc_tax_category == 0 && $row->payment_status == 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = 0;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->fc_tax_category == 1 && $row->payment_status == 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = 0;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->general_ledger_method == 'Down Payment' && $row->freight_id != 0 && ($row->account_no == 210103 || $row->account_no == 130003) && $row->payment_status == 1) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->fc_tax_category == 0 && $row->amountPayment < 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount ;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->payment_status == 1 && $row->fc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->payment_status == 1 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->fc_tax_category == 0 && ($row->account_no == 210103 || $row->account_no == 130003) && $row->payment_status == 1) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && ($row->account_no == 210103 || $row->account_no == 130003) && $row->payment_status == 1) {
            $credit_amount = $row->amount;
        }
    //==END FREIGHT==//

    //==VENDOR HANDLING==//
        if ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13 && $row->payment_method == 2) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->account_id == 397 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->payment_method == 2 && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $credit_amount = $row->amount ;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $credit_amount = $row->amount;
        }


        if ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->general_ledger_method == 'DP' && $row->payment_status == 1 && ($row->vhc_tax_category == 0 || $row->vhc_tax_category == 1) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->vhc_tax_category == 0 && $row->payment_status == 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = 0;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->vhc_tax_category == 1 && $row->payment_status == 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = 0;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->general_ledger_method == 'Down Payment' && $row->vendor_handling_id != 0 && ($row->account_no == 210106 || $row->account_no == 130006) && $row->payment_status == 1) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->payment_status == 1 && $row->vhc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->payment_status == 1 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 0 && ($row->account_no == 210106 || $row->account_no == 130006) && $row->payment_status == 1) {
            $credit_amount = $row->amount ;
        } elseif ($row->general_ledger_type == 2 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && ($row->account_no == 210106 || $row->account_no == 130003) && $row->payment_status == 1) {
            $credit_amount = $row->amount;
        }
    //==END VENDOR HANDLING==//

    //==GENERAL VENDOR==//
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0 && ($row->account_no == 150410 || $row->account_no == 230100)) {
            $credit_amount = $row->ppn_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_transaction_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->ppn_journal != 0) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->account_type == 7 && $row->gv_pph_id == 21 && $row->gv_id != 0 && $row->pph_journal != 0 && $row->ppn_journal != 0) {
            $credit_amount = $row->amount + $row->ppn_journal + $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->ppn_journal != 0) {
            $credit_amount = ($row->amount + $row->ppn_journal) - $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0) {
            $credit_amount = $row->amount + $row->ppn_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->account_type == 7) {
            $credit_amount = $row->amount - $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0) {
            $credit_amount = $row->amount;
        }
        //elseif($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT'){
        //$credit_amount = $row->amount;
        //}

        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201 || $row->account_no == 150440) && $row->pph_journal != 0) {
            $credit_amount = $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_transaction_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->gv_pph_id == 21 && $row->ppn_journal != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8)) {
            $credit_amount = ($row->amount + $row->ppn_journal + $row->ppn_journal) + $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_transaction_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8)) {
            $credit_amount = ($row->amount + $row->ppn_journal + $row->ppn_journal) - $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8)) {
            $credit_amount = $row->amount + $row->ppn_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->gv_pph_id == 21 && $row->pph_journal != 0 && $row->account_type == 7) {
            $credit_amount = $row->amount + $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->account_type == 7) {
            $credit_amount = $row->amount - $row->pph_journal;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0) {
            $credit_amount = $row->amount;
        }
        //elseif($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT'){
        //$credit_amount = $row->amount;
        //}
        //==END GENERAL VENDOR==//

        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->payment_status != 1 && $row->account_type == 7 && ($row->general_ledger_for == 1)) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->payment_status != 1 && $row->account_no == 150410 && $row->general_ledger_for == 1) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 4 && $row->account_type == 7 && $row->payment_status != 1) {
            $credit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 6 && $row->account_type == 7 && $row->general_ledger_for2 == 'Internal Transfer') {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 6 && $row->account_type == 7 && $row->general_ledger_for2 == 'Internal Transfer') {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->payment_status != 1 && $row->account_no == 130001 && $row->general_ledger_for == 1) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->account_type == 7 && $row->pph_journal != 0 && $row->ppn_journal != 0 && $row->payment_status != 1 && $row->general_ledger_method == 'Down Payment') {
            $credit_amount = $row->amount + $row->ppn_journal - $row->pph_journal;
        }

        //==UNLOADING COST==//
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for2 == 'Unloading Cost' && $row->account_type == 7) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && ($row->account_no == 210104 || $row->account_no == 230207 || $row->account_no == 230204)) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->account_no == 130004) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && ($row->account_no == 210104 || $row->account_no == 230207 || $row->account_no == 230204)) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->account_no == 130004) {
            $credit_amount = $row->amount;
        }
        //==END UNLOADING COST==//

        //==CURAH==//
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 2 && ($row->account_no == 210101 || $row->account_no == 130002)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 2 && $row->account_type == 7) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 2) {
            $credit_amount = $row->amount;
        }
        //==END CURAH==//

        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && ($row->general_ledger_for == 5)) {
            $credit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && ($row->general_ledger_for == 5)) {
            $credit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && ($row->general_ledger_for == 5)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && ($row->general_ledger_for == 5)) {
            $debit_amount = $row->amount;
        }
        //==END PAYMENT CREDIT===//

        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'INVOICE DETAIL' && $row->general_ledger_for == 10 && $row->invoice_id != 0) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN INVOICE' && $row->general_ledger_for == 10 && $row->invoice_id != 0) {
            $debit_amount = $row->amount;
        }

        //==PAYMENT DEBIT==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PETTY CASH' && $row->general_ledger_for == 12) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT ADMIN') {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 12) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 12) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 10 && $row->payment_id != 0) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 10 && $row->payment_id != 0) {
            $debit_amount = $row->amount;
        }
        //==FREIGHT==//

        if ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->general_ledger_method == 'DP' && ($row->fc_tax_category == 0 || $row->fc_tax_category == 1) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->fc_tax_category == 0 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = 0;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->fc_tax_category == 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = 0;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->general_ledger_method == 'Down Payment' && $row->freight_id != 0 && ($row->account_no == 210103 || $row->account_no == 130003)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 0 && $row->amountPayment < 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount ;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && $row->fc_tax_category == 0 && ($row->account_no == 210103 || $row->account_no == 130003)) {
            $debit_amount = $row->amount ;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PAYMENT ADMIN' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && ($row->account_no == 210103 || $row->account_no == 130003)) {
            $debit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->freight_id != 0 && ($row->account_no == 150410)) {
            $debit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->payment_status == 1 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3 && $row->payment_method == 2) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->pph_journal != 0 && $row->payment_status == 1 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->payment_status == 1 && $row->fc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->payment_status == 1 && $row->fc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->payment_status == 1 && $row->account_id == 5 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->payment_method == 2 && $row->freight_id != 0 && $row->pph_journal != 0 && $row->general_ledger_for == 3) {
            $debit_amount = $row->amount;
        } /*elseif($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->payment_method == 2 && $row->freight_id != 0 && $row->payment_status == 1 && $row->pph_journal != 0 && $row->general_ledger_for == 3){
        $debit_amount = $row->amount ;
        }
        elseif($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->payment_method == 1 && $row->freight_id != 0 && $row->payment_status == 1 && $row->ppn_journal != 0 && $row->general_ledger_for == 3){
        $debit_amount = $row->amount;
        }*/
        elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && $row->fc_tax_category == 0 && ($row->account_no == 210103 || $row->account_no == 130003) && $row->payment_status == 1) {
            $debit_amount = $row->amount ;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->freight_id != 0 && ($row->account_no == 210103 || $row->account_no == 130003) && $row->payment_status == 1) {
            $debit_amount = $row->amount;
        }
        //==END FREIGHT==//

        //==VENDOR HANDLING==//
        if ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->general_ledger_method == 'DP' && ($row->vhc_tax_category == 0 || $row->vhc_tax_category == 1) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->vhc_tax_category == 0 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = 0;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->vhc_tax_category == 1 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = 0;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->general_ledger_method == 'Down Payment' && $row->vendor_handling_id != 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $debit_amount = $row->amount ;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $debit_amount = $row->amount;
        }

        if ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->payment_status == 1 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13 && $row->payment_method == 2) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->pph_journal != 0 && $row->payment_status == 1 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->payment_status == 1 && $row->vhc_tax_category == 1 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->payment_status == 1 && $row->vhc_tax_category == 0 && $row->account_type == 7 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->vendor_handling_id != 0 && $row->payment_status == 1 && $row->account_id == 397 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT') && $row->payment_method == 2 && $row->vendor_handling_id != 0 && $row->payment_status == 1 && $row->pph_journal != 0 && $row->general_ledger_for == 13) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && $row->vhc_tax_category == 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $debit_amount = $row->amount * ((100 - $row->vhc_tax) / 100);
        } elseif ($row->general_ledger_type == 1 && ($row->general_ledger_module == 'RETURN PAYMENT' || $row->general_ledger_module == 'PETTY CASH') && $row->vendor_handling_id != 0 && ($row->account_no == 210106 || $row->account_no == 130006)) {
            $debit_amount = $row->amount;
        }
        //==END VENDOR HANDLING==//

        //==UC==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for2 == 'Unloading Cost' && $row->account_type == 7 /*&& $row->payment_status != 1*/) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && ($row->account_no == 210104 || $row->account_no == 230207 || $row->account_no == 230204)) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->account_no == 130004) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && ($row->account_no == 210104 || $row->account_no == 230207 || $row->account_no == 230204)) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->account_no == 130004) {
            $debit_amount = $row->amount;
        }
        //==END UC==//

        //==PKS KONTRAK//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->account_no == 210102 && $row->payment_status != 1) {
            $debit_amount = $row->amount;
        }
        //==END PKS KONTRAK//

        //==GENERAL VENDOR==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201 || $row->account_no == 150440) && $row->pph_journal != 0) {
            $debit_amount = $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8) && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_transaction_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->gv_pph_id == 21 && $row->ppn_journal != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8)) {
            $debit_amount = ($row->amount + $row->ppn_journal + $row->ppn_journal) + $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_transaction_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8)) {
            $debit_amount = ($row->amount + $row->ppn_journal + $row->ppn_journal) - $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0 && ($row->general_ledger_for == 5 || $row->general_ledger_for == 8)) {
            $debit_amount = $row->amount + $row->ppn_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->gv_pph_id == 21 && $row->pph_journal != 0 && $row->account_type == 7) {
            $debit_amount = $row->amount + $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->account_type == 7) {
            $debit_amount = $row->amount - $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->gv_id != 0) {
            $debit_amount = $row->amount;
        }
        //elseif($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT'){
        //$debit_amount = $row->amount;
        //}

        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0 && ($row->account_no == 150410 || $row->account_no == 230100)) {
            $debit_amount = $row->ppn_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_transaction_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->ppn_journal != 0) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->account_type == 7 && $row->gv_pph_id == 21 && $row->gv_id != 0 && $row->pph_journal != 0 && $row->ppn_journal != 0) {
            $debit_amount = $row->amount + $row->ppn_journal + $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->ppn_journal != 0) {
            $debit_amount = ($row->amount + $row->ppn_journal) - $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->ppn_journal != 0) {
            $debit_amount = $row->amount + $row->ppn_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0 && $row->pph_journal != 0 && $row->account_type == 7) {
            $debit_amount = $row->amount - $row->pph_journal;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->gv_id != 0) {
            $debit_amount = $row->amount;
        }
        //elseif($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT'){
        //$debit_amount = $row->amount;
        //}
        //==END GENERAL VENDOR==//

        //==CURAH==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 2) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 2 && ($row->account_no == 210101 || $row->account_no == 130002)) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 2 && $row->account_type == 7) {
            $debit_amount = $row->amount;
        }

        //ND CURAH==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->payment_status != 1 && ($row->account_no == 150410 || $row->account_no == 230100)) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->account_type == 7 && $row->general_ledger_for == 6 && $row->general_ledger_for2 == 'Internal Transfer') {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->account_type == 7 && $row->general_ledger_for == 6 && $row->general_ledger_for2 == 'Internal Transfer') {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->payment_status != 1 && $row->account_no == 130001 && $row->general_ledger_for == 1) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->payment_status != 1 && $row->supplier_name == 'Kas Negara' && ($row->account_no == 230202 || $row->account_no == 230203 || $row->account_no == 230207 || $row->account_no == 230208 || $row->account_no == 230204 || $row->account_no == 230205 || $row->account_no == 230206 || $row->account_no == 230201)) {
            $debit_amount = $row->amount;
        }

        //==SALES==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 9 && $row->payment_status != 1) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 9 && $row->payment_status != 1) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 9 && $row->payment_status == 1) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'RETURN PAYMENT' && $row->general_ledger_for == 9 && $row->payment_status == 1) {
            $credit_amount = $row->amount;
        }
        //==END SALES==//

        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 10 && $row->payment_status != 1) {
            $debit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'PAYMENT' && $row->general_ledger_for == 10 && $row->payment_status != 1) {
            $credit_amount = $row->amount;
        }
        if ($row->payment_status == 1 && $row->gl_date < '2018-04-01') {
            $debit_amount = 'RETURN';
            $credit_amount = 'RETURN';
        }
        if ($row->invoice_payment == 2 && $row->gl_date < '2018-04-01') {
            $debit_amount = 'RETURN';
            $credit_amount = 'RETURN';
        }

        //$general_ledger_id = $row->general_ledger_id;

        $voucherNo = "";
        $paymentNo = "";
        if ($row->contract_id != '' && $row->general_ledger_module == 'CONTRACT ADJUSTMENT') {
            $voucherNo = $row->payment_no;
            $paymentNo = 'JV-PO-' . $row->payment_no2;
        } elseif ($row->contract_id != '' && $row->general_ledger_module != 'CONTRACT ADJUSTMENT') {
            $voucherCode = $row->payment_location2 . '/' . $row->bank_code . '/' . $row->pcur_currency_code;


            if ($row->bank_type == 1) {
                $voucherCode .= ' - B';
            } elseif ($row->bank_type == 2) {
                $voucherCode .= ' - P';
            } elseif ($row->bank_type == 3) {
                $voucherCode .= ' - CAS';
            }

            if ($row->bank_type != 3) {
                if ($row->payment_type == 1) {
                    $voucherCode .= 'RV';
                } else {
                    $voucherCode .= 'PV';
                }
            }


            $voucherNo = $row->payment_no;
            $paymentNo = $voucherCode . ' # ' . $row->payment_no2;
        } elseif ($row->payment_id != '') {


            $voucherCode = $row->payment_location2 . '/' . $row->bank_code . '/' . $row->pcur_currency_code;


            if ($row->bank_type == 1) {
                $voucherCode .= ' - B';
            } elseif ($row->bank_type == 2) {
                $voucherCode .= ' - P';
            } elseif ($row->bank_type == 3) {
                $voucherCode .= ' - CAS';
            }

            if ($row->bank_type != 3) {
                if ($row->payment_type == 1) {
                    $voucherCode .= 'RV';
                } else {
                    $voucherCode .= 'PV';
                }
            }

            $voucherNo = $voucherCode . ' # ' . $row->payment_no;
            $paymentNo = $voucherCode . ' # ' . $row->payment_no2;

        } elseif ($row->invoice_id != '') {


            $voucherCode = $row->payment_location2 . '/' . $row->bank_code . '/' . $row->pcur_currency_code;


            if ($row->bank_type == 1) {
                $voucherCode .= ' - B';
            } elseif ($row->bank_type == 2) {
                $voucherCode .= ' - P';
            } elseif ($row->bank_type == 3) {
                $voucherCode .= ' - CAS';
            }

            if ($row->bank_type != 3) {
                if ($row->payment_type == 1) {
                    $voucherCode .= 'RV';
                } else {
                    $voucherCode .= 'PV';
                }
            }

            $voucherNo = $row->payment_no;
            $paymentNo = $voucherCode . ' # ' . $row->payment_no2;
        } else {
            $voucherNo = $row->payment_no;
            $paymentNo = $row->payment_no2;
        }

        $general_ledger_id = $row->general_ledger_id;
        $stockpile = $row->stockpile_name2;
        $gl_date = $row->gl_date;
        $general_ledger_module = $row->general_ledger_module;
        $general_ledger_method = $row->general_ledger_method;
        $general_ledger_transaction_type2 = $row->general_ledger_transaction_type2;
        $supplier_name = $row->supplier_name;
        $supplier_code = $row->supplier_code;
        $po_no = $row->po_no;
        $contract_no = $row->contract_no;
        $slip_no = $row->slip_no;
        $invoice_no = $row->invoice_no;
        $invoice_no_2 = $row->invoice_no_2;
        $tax_invoice = $row->tax_invoice;
        $cheque_no = $row->cheque_no;
        $remarks = $row->remarks;
        $shipment_code = $row->shipment_code;
        $quantity = $row->quantity;
        $price = $row->price;
        $account_no = $row->account_no;
        $account_name = $row->account_name;
        $exchange_rate = $row->exchange_rate;

        $date = new DateTime();
        $currentDate = $date->format('d/m/Y H:i:s');

        $debitAmount = 0;
        if ($row->general_ledger_type == 1) {
            $debitAmount = $debit_amount;
        } elseif ($row->general_ledger_type == '') {
            $debitAmount = $debit_amount;
        }

        $creditAmount = 0;
        if ($row->general_ledger_type == 2) {
            $creditAmount = $credit_amount;
        } elseif ($row->general_ledger_type == '') {
            $creditAmount = $credit_amount;
        }

        $sqlb = "INSERT INTO gl_report(general_ledger_id, contract_id, invoice_id, invoice_notim_id, transaction_id, jurnal_id, 
                                accrue_id, payment_id, source, stockpile,gl_date, jurnal_no, general_ledger_module, 
                                general_ledger_method, general_ledger_transaction_type2, supplier_code,supplier_name, 
                                po_no, contract_no, slip_no, invoice_no, invoice_no_2, tax_invoice, cheque_no,
                                 remarks, shipment_code,quantity,price,account_no,account_name,exchange_rate,
                                 debitAmount,creditAmount, entry_date, entry_by, adj) 
                                 VALUES ({$general_ledger_id}, {$contractId}, {$invoiceId}, {$invoiceNotimId}, {$transactionId}, 
                                 {$jurnalId}, {$accrueId},{$paymentId}, 'GL', '{$stockpile}','{$gl_date}','{$voucherNo}', 
                                 '{$general_ledger_module}', '{$general_ledger_method}', 
                                 '{$general_ledger_transaction_type2}', '{$supplier_code}','{$supplier_name}', 
                                 '{$po_no}', '{$contract_no}', '{$slip_no}', '{$invoice_no}', '{$invoice_no_2}', 
                                 '{$tax_invoice}', '{$cheque_no}', '{$remarks}', '{$shipment_code}','{$quantity}',
                                 '{$price}','{$account_no}','{$account_name}','{$exchange_rate}',{$debitAmount},
                                 {$creditAmount}, STR_TO_DATE('{$currentDate}', '%d/%m/%Y %H:%i:%s'),
                                 {$_SESSION['userId']},{$adjustmentId})";
        $resultb = $myDatabase->query($sqlb, MYSQLI_STORE_RESULT);
         echo "</br> " . $sqlb . "</br> ";
        }
    // } 


}

function insertReportGL_notim($myDatabase, $source,  $transactionId = "NULL")
{
//echo 'BB';
    $whereCondition = '';
	$adjustmentId = "NULL";

    if ($transactionId != 'NULL' && $source == 'NOTA TIMBANG2') {

        $sqlDelete = "DELETE FROM gl_report WHERE transaction_id = {$transactionId} AND general_ledger_module = 'NOTA TIMBANG2'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        $whereCondition .= "AND gl.transaction_id = {$transactionId} AND gl.general_ledger_module = 'NOTA TIMBANG2'";

    } elseif ($transactionId != 'NULL' && $source == 'NOTA TIMBANG') {

        $sqlDelete = "DELETE FROM gl_report WHERE transaction_id = {$transactionId} AND general_ledger_module = 'NOTA TIMBANG'";
        $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);

        // $procedure  = "CALL GLreport_NotaTimbang({$transactionId}, 'NOTA TIMBANG')";
        // $resultYE = $myDatabase->query($procedure, MYSQLI_STORE_RESULT);
        $whereCondition .= "AND gl.transaction_id = {$transactionId} AND gl.general_ledger_module = 'NOTA TIMBANG'";

    } 
//  if($invoiceNotimId == 1000){
    $sqla = "SELECT gl.general_ledger_id, gl.general_ledger_type, gl.general_ledger_module, 
            CASE WHEN gl.general_ledger_transaction_type = 1 THEN 'IN'
                WHEN gl.general_ledger_transaction_type = 2 THEN 'OUT'
            ELSE '' END AS general_ledger_transaction_type2,
            CASE WHEN gl.general_ledger_for = 1 THEN 'PKS Kontrak'
                WHEN gl.general_ledger_for = 2 THEN 'PKS Curah'
                WHEN gl.general_ledger_for = 3 THEN 'Freight Cost'
                WHEN gl.general_ledger_for = 4 THEN 'Unloading Cost'
                WHEN gl.general_ledger_for = 5 THEN 'Other'
                WHEN gl.general_ledger_for = 9 THEN 'Sales'
                WHEN gl.general_ledger_for = 13 THEN 'Handling Cost'
                WHEN gl.general_ledger_for = 14 THEN 'Freight Cost Shrink'
                ELSE '' END AS general_ledger_for2,
                
            gl.general_ledger_for,
            gl.transaction_id,
            (SELECT tax_category FROM tax WHERE tax_id = (SELECT fc_tax_id FROM `transaction` WHERE transaction_id = gl.transaction_id))  AS tf_tax_category,
            (SELECT `account_no` FROM  account a WHERE a.account_id = gl.account_id) AS account_no,
            (SELECT `account_name` FROM  account a WHERE a.account_id = gl.account_id) AS account_name,
            
            CASE WHEN gl.transaction_id IS NOT NULL  AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 
                    OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) 
                AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL 
                AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) != 0 
                    THEN (SELECT s.stockpile_name FROM stockpile s WHERE s.stockpile_code = 
                        (SELECT SUBSTR(slip_no,1,3) FROM TRANSACTION WHERE transaction_id = gl.transaction_id))
                WHEN gl.transaction_id IS NOT NULL  AND gl.account_id != 8 AND gl.account_id != 51 AND gl.general_ledger_for = 2 
                AND (SELECT return_shipment FROM contract c WHERE c.contract_id = 
                    (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id  = 
                        (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.transaction_id)))
                            THEN (SELECT stockpile_name FROM stockpile WHERE stockpile_id = 
                                (SELECT stockpile_id FROM sales WHERE sales_id = 
                                    (SELECT sales_id FROM shipment WHERE shipment_id = 
                                        (SELECT return_shipment_id FROM contract WHERE contract_id = 
                                            (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = 
                                                    (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.transaction_id))))))
                WHEN gl.transaction_id IS NOT NULL  AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 
                    OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14)
                        THEN (SELECT s.stockpile_name FROM stockpile_contract sc INNER JOIN stockpile s ON s.stockpile_id = sc.stockpile_id 
                            INNER JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id WHERE gl.transaction_id = t.transaction_id)
                WHEN gl.transaction_id IS NOT NULL  AND  gl.general_ledger_for = 9 
                    THEN (SELECT s.stockpile_name FROM stockpile s 
                        INNER JOIN sales sl ON s.stockpile_id = sl.stockpile_id 
                        INNER JOIN shipment sh ON sh.sales_id = sl.sales_id 
                        INNER JOIN `transaction` t ON t.shipment_id = sh.shipment_id 
                        WHERE gl.transaction_id = t.transaction_id) 
                ELSE '' END AS stockpile_name2,
            
            CASE WHEN gl.transaction_id IS NOT NULL AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) 
                THEN (SELECT t.slip_no FROM `transaction` t WHERE t.transaction_id = gl.transaction_id) 
                ELSE '' END AS slip_no,
                
            CASE WHEN gl.transaction_id IS NOT NULL  AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) != 0 THEN 'ADJUSTMENT AUDIT'	
                WHEN gl.transaction_id IS NOT NULL  AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2) THEN (SELECT vendor_name FROM vendor WHERE vendor_id = (SELECT c.vendor_id FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id WHERE t.transaction_id = gl.transaction_id))
                WHEN gl.transaction_id IS NOT NULL  AND (gl.general_ledger_for = 3 OR gl.general_ledger_for = 14) THEN (SELECT `freight_supplier` FROM freight f WHERE f.freight_id = (SELECT freight_id FROM freight_cost WHERE freight_cost_id = (SELECT freight_cost_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`)))
                WHEN gl.transaction_id IS NOT NULL  AND gl.general_ledger_for = 13 THEN (SELECT vh.`vendor_handling_name` FROM vendor_handling vh WHERE vh.vendor_handling_id = (SELECT vendor_handling_id FROM vendor_handling_cost WHERE handling_cost_id = (SELECT handling_cost_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`)))
                WHEN gl.transaction_id IS NOT NULL  AND gl.general_ledger_for = 4 THEN (SELECT labor_name FROM labor WHERE labor_id = (SELECT labor_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`))
                WHEN gl.transaction_id IS NOT NULL  AND gl.general_ledger_for = 9 THEN (SELECT cust.customer_name FROM customer cust WHERE customer_id = (SELECT customer_id FROM sales WHERE sales_id = (SELECT sales_id FROM shipment WHERE shipment_id = (SELECT shipment_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`))))
                ELSE '' END AS supplier_name,
            
            CASE WHEN gl.transaction_id IS NOT NULL  AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) != 0 THEN 'ADJ'	
                WHEN gl.transaction_id IS NOT NULL  AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2) THEN (SELECT vendor_code FROM vendor WHERE vendor_id = (SELECT c.vendor_id FROM contract c LEFT JOIN stockpile_contract sc ON c.contract_id = sc.contract_id LEFT JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id WHERE t.transaction_id = gl.transaction_id))
                WHEN gl.transaction_id IS NOT NULL  AND (gl.general_ledger_for = 3 OR gl.general_ledger_for = 14) THEN (SELECT `freight_code` FROM freight f WHERE f.freight_id = (SELECT freight_id FROM freight_cost WHERE freight_cost_id = (SELECT freight_cost_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`)))
                WHEN  gl.transaction_id IS NOT NULL  AND gl.general_ledger_for = 13 THEN (SELECT vh.`vendor_handling_code` FROM vendor_handling vh WHERE vh.vendor_handling_id = (SELECT vendor_handling_id FROM vendor_handling_cost WHERE handling_cost_id = (SELECT handling_cost_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`)))
                WHEN  gl.transaction_id IS NOT NULL  AND gl.general_ledger_for = 4 THEN (SELECT labor_code FROM labor WHERE labor_id = (SELECT labor_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`))
                WHEN  gl.transaction_id IS NOT NULL  AND gl.general_ledger_for = 9 THEN (SELECT cust.customer_code FROM customer cust WHERE customer_id = (SELECT customer_id FROM sales WHERE sales_id = (SELECT sales_id FROM shipment WHERE shipment_id = (SELECT shipment_id FROM `transaction` WHERE transaction_id = gl.`transaction_id`))))
                ELSE '' END AS supplier_code,
            
            CASE WHEN gl.transaction_id IS NOT NULL  AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 9 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) 
                THEN (SELECT unloading_date FROM `transaction` WHERE transaction_id = gl.transaction_id)
                ELSE '' END AS gl_date,
            
            (SELECT slip_no FROM TRANSACTION WHERE transaction_id = gl.transaction_id) AS jurnal_no,

            CASE WHEN gl.transaction_id IS NOT NULL  AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14)
                THEN (SELECT po_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.transaction_id))) 
                ELSE '' END AS po_no,
            
            CASE WHEN gl.transaction_id IS NOT NULL  AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14)
                THEN  (SELECT contract_no FROM contract WHERE contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = (SELECT stockpile_contract_id FROM `transaction` WHERE transaction_id = gl.transaction_id))) 
                WHEN gl.transaction_id IS NOT NULL  AND gl.general_ledger_for = 9 THEN (SELECT sales_no FROM sales WHERE sales_id = (SELECT sales_id FROM shipment WHERE shipment_id = (SELECT shipment_id FROM `transaction` WHERE transaction_id = gl.transaction_id)))
                ELSE '' END AS contract_no,
                
            (SELECT CONCAT(slip_retur,' - ',notes) FROM `transaction` WHERE transaction_id = gl.transaction_id) AS remarks,
            
            CASE WHEN gl.transaction_id IS NOT NULL  AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL AND (SELECT adjustmentAudit_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) !=0 THEN (SELECT sh.shipment_no FROM shipment sh LEFT JOIN adjustment_audit aa ON sh.shipment_id = aa.shipment_id LEFT JOIN `transaction` t ON t.adjustmentAudit_id = audit_id WHERE t.transaction_id = gl.transaction_id)
                WHEN gl.transaction_id IS NOT NULL  AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT mutasi_id FROM TRANSACTION WHERE transaction_id = gl.transaction_id) IS NOT NULL THEN (SELECT mh.kode_mutasi FROM mutasi_header mh LEFT JOIN TRANSACTION t ON t.mutasi_id = mh.mutasi_header_id WHERE t.transaction_id = gl.transaction_id)
                WHEN gl.transaction_id IS NOT NULL  AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 3 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 13 OR gl.general_ledger_for = 14) AND (SELECT c.return_shipment FROM contract c LEFT JOIN stockpile_contract sc ON c.`contract_id` = sc.`contract_id` LEFT JOIN TRANSACTION t ON t.`stockpile_contract_id` = sc.`stockpile_contract_id` WHERE t.`transaction_id` = gl.transaction_id LIMIT 1) IS NOT NULL THEN (SELECT sh.shipment_no FROM shipment sh LEFT JOIN contract c ON sh.shipment_id = c.return_shipment_id LEFT JOIN stockpile_contract sc ON sc.contract_id = c.contract_id LEFT JOIN `transaction` t ON t.stockpile_contract_id = sc.stockpile_contract_id WHERE t.transaction_id = gl.transaction_id LIMIT 1)
                WHEN gl.transaction_id IS NOT NULL  AND gl.general_ledger_for = 9 THEN (SELECT shipment_no FROM shipment WHERE shipment_id = (SELECT shipment_id FROM `transaction` WHERE transaction_id = gl.transaction_id ))
                ELSE '' END AS shipment_code,
                
            CASE WHEN gl.transaction_id IS NOT NULL  AND gl.general_ledger_for = 1 AND gl.account_id = 8 THEN (SELECT quantity FROM `transaction` WHERE transaction_id = gl.transaction_id)
                WHEN gl.transaction_id IS NOT NULL  AND gl.general_ledger_for = 1 AND gl.account_id = 52 THEN (SELECT shrink FROM `transaction` WHERE transaction_id = gl.transaction_id) 
                WHEN gl.transaction_id IS NOT NULL  AND gl.general_ledger_for = 1 AND gl.account_id = 147 THEN (SELECT send_weight FROM `transaction` WHERE transaction_id = gl.transaction_id) 
                WHEN gl.transaction_id IS NOT NULL  AND  (gl.general_ledger_for = 2 OR gl.general_ledger_for = 4 OR gl.general_ledger_for = 9) THEN (SELECT quantity FROM `transaction` WHERE transaction_id = gl.transaction_id)
                WHEN gl.transaction_id IS NOT NULL  AND  gl.general_ledger_for = 3 THEN (SELECT freight_quantity FROM `transaction` WHERE transaction_id = gl.transaction_id) 
                WHEN gl.transaction_id IS NOT NULL  AND gl.general_ledger_for = 13 THEN (SELECT handling_quantity FROM `transaction` WHERE transaction_id = gl.transaction_id) 
                ELSE '' END AS quantity,
                
            CASE WHEN gl.transaction_id IS NOT NULL  AND (gl.general_ledger_for = 1 OR gl.general_ledger_for = 2 OR gl.general_ledger_for = 9) THEN (SELECT unit_price FROM `transaction` WHERE transaction_id = gl.transaction_id) 
                WHEN gl.transaction_id IS NOT NULL  AND gl.general_ledger_for = 3 THEN (SELECT freight_price FROM `transaction` WHERE transaction_id = gl.transaction_id)  
                WHEN gl.transaction_id IS NOT NULL  AND gl.general_ledger_for = 13 THEN (SELECT GROUP_CONCAT(vhc.price_converted) FROM vendor_handling_cost vhc LEFT JOIN `transaction` t ON vhc.handling_cost_id = t.handling_cost_id WHERE t.transaction_id = gl.transaction_id)  
                WHEN gl.transaction_id IS NOT NULL  AND gl.general_ledger_for = 4 THEN (SELECT unloading_price FROM `transaction` WHERE transaction_id = gl.transaction_id) 
                ELSE '' END AS price,
            gl.amount
        FROM general_ledger gl  WHERE  gl.amount > 0 {$whereCondition}";
        // echo " querya " . $sqla;
    $resulta = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);
    while ($row = $resulta->fetch_object()) {

        $sql2 = "SELECT s.stockpile_name FROM stockpile s INNER JOIN stockpile_contract sc ON s.`stockpile_id` = sc.`stockpile_id` 
                 INNER JOIN contract c ON sc.`contract_id` = c.`contract_id` WHERE sc.`quantity` > 0 AND c.`contract_no` = '$row->contract_no'";
        $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
        while ($row2 = $result2->fetch_object()) {
            $stockpileName2 = $row2->stockpile_name;
        }

        //$rowActive++;
        if ($row->transaction_id != NULL && $row->account_id == 147 && $row->general_ledger_for == 1) {
            $stockpileName = $stockpileName2;
        } else {
            $stockpileName = $row->stockpile_name2;
        }


        if ($row->general_ledger_id == '' && $row->amount < 0) {
            $credit_amount = $row->amount * -1;
            $debit_amount = 0;
        } elseif ($row->general_ledger_id == '' && $row->amount > 0) {
            $debit_amount = $row->amount;
            $credit_amount = 0;
        }

        if ($row->general_ledger_id != '' && ($row->general_ledger_module == 'NOTA TIMBANG')) {
            $debit_amount = $row->amount;
            $credit_amount = $row->amount;
        }

        //==CREDIT NOTIM==//
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 
            && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13 || $row->general_ledger_for == 14) && $row->account_no == 230204) {
            $credit_amount = $row->amount;
        }
        if ($row->general_ledger_type == 2 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 
            && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13 || $row->general_ledger_for == 14) && $row->account_no == 210103) {
            $credit_amount = $row->amount;
        }
        //==END CREDIT NOTIM==//

        //==DEBIT NOTIM==//
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 
        && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13) && $row->account_no == 140000) {
            $debit_amount = $row->amount * ((100 - $row->tf_tax_value) / 100);
        }
        if ($row->general_ledger_type == 1 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 
        && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13) && $row->account_no == 230204 && $row->quantity < 0) {
            $debit_amount = $row->amount;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 
            && ($row->general_ledger_for == 3 || $row->general_ledger_for == 13) && $row->account_no == 230204) {
            $debit_amount = 0;
        } elseif ($row->general_ledger_type == 1 && $row->general_ledger_module == 'NOTA TIMBANG' && $row->tf_tax_category == 0 && ($row->general_ledger_for == 14) && $row->account_no == 230204) {
            $debit_amount = $row->amount;;
        }
        //==END DEBIT NOTIM==//
        //$general_ledger_id = $row->general_ledger_id;

        $voucherNo = "";
        $paymentNo = "";
        $voucherNo = $row->payment_no;
        $paymentNo = $row->payment_no2;
        

        $general_ledger_id = $row->general_ledger_id;
        $stockpile = $row->stockpile_name2;
        $gl_date = $row->gl_date;
        $general_ledger_module = $row->general_ledger_module;
        $general_ledger_method = $row->general_ledger_method;
        $general_ledger_transaction_type2 = $row->general_ledger_transaction_type2;
        $supplier_name = $row->supplier_name;
        $supplier_code = $row->supplier_code;
        $po_no = $row->po_no;
        $contract_no = $row->contract_no;
        $slip_no = $row->slip_no;
        $remarks = $row->remarks;
        $shipment_code = $row->shipment_code;
        $quantity = $row->quantity;
        $price = $row->price;
        $account_no = $row->account_no;
        $account_name = $row->account_name;

        $date = new DateTime();
        $currentDate = $date->format('d/m/Y H:i:s');

        $debitAmount = 0;
        if ($row->general_ledger_type == 1) {
            $debitAmount = $debit_amount;
        } elseif ($row->general_ledger_type == '') {
            $debitAmount = $debit_amount;
        }

        $creditAmount = 0;
        if ($row->general_ledger_type == 2) {
            $creditAmount = $credit_amount;
        } elseif ($row->general_ledger_type == '') {
            $creditAmount = $credit_amount;
        }

        $sqlb = "INSERT INTO gl_report(general_ledger_id, transaction_id,
                                 source, stockpile,gl_date, jurnal_no, general_ledger_module, 
                                general_ledger_method, general_ledger_transaction_type2, supplier_code,supplier_name, 
                                po_no, contract_no, slip_no, remarks, shipment_code,quantity,price,account_no,account_name,
                                 debitAmount,creditAmount, entry_date, entry_by) 
                                 VALUES ({$general_ledger_id}, {$transactionId}, 'GL', '{$stockpile}','{$gl_date}','{$voucherNo}', 
                                 '{$general_ledger_module}', '{$general_ledger_method}', 
                                 '{$general_ledger_transaction_type2}', '{$supplier_code}','{$supplier_name}', 
                                 '{$po_no}', '{$contract_no}', '{$slip_no}', '{$remarks}', '{$shipment_code}','{$quantity}',
                                 '{$price}','{$account_no}','{$account_name}',{$debitAmount},
                                 {$creditAmount}, STR_TO_DATE('{$currentDate}', '%d/%m/%Y %H:%i:%s'),
                                 {$_SESSION['userId']})";
        $resultb = $myDatabase->query($sqlb, MYSQLI_STORE_RESULT);
         echo "</br> " . $sqlb . "</br> ";
        }
    // } 
}


function testGL($myDatabase, $transactionId = "NULL"){
    $sql = "DELETE FROM general_ledger WHERE account_id IN (8,52,147) AND transaction_id = {$transactionId}";
    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

    $sqlGL = "CALL generalLedger_notim($transactionId, @returned)";
    $resultGL = $myDatabase->query($sqlGL, MYSQLI_STORE_RESULT);
}

function testRgl($myDatabase,  $transactionId = "NULL"){

    $sqlDelete = "DELETE FROM gl_report WHERE transaction_id = {$transactionId} AND general_ledger_module = 'NOTA TIMBANG'";
    $result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);
    // echo  $sqlDelete . "</br>";

    $sqlRgl  = "CALL GLreport_NotaTimbang({$transactionId}, 'NOTA TIMBANG')";
    $result = $myDatabase->query($sqlRgl, MYSQLI_STORE_RESULT);

    echo  $sqlRgl . "</br>";
}

function insertGL_accrue($myDatabase, $source, $accrueId = "NULL")
{

    $insertValues = "";
    $boolContinue = true;

    if ($accrueId > 0) {
        // <editor-fold defaultstate="collapsed" desc="accrueId">
		$boolReverse = false;
		$sqlReverse = "SELECT * FROM invoice_detail WHERE prediction_detail_id = {$accrueId} ";
		$resultReverse = $myDatabase->query($sqlReverse, MYSQLI_STORE_RESULT);
			if ($resultReverse->num_rows == 1) {
                   $boolReverse = true;
              }
		$sqlCancel = "SELECT * FROM accrue_prediction_detail WHERE prediction_detail_id = {$accrueId} ";
				$resultCancel = $myDatabase->query($sqlCancel, MYSQLI_STORE_RESULT);
			if ($resultCancel->num_rows == 1) {
				$rowCancel = $resultCancel->fetch_object();
                   $journalStatus = $rowCancel->journal_status;
              }		
		
		if($boolReverse){
			$sql = "DELETE FROM general_ledger WHERE accrue_id = {$accrueId} AND description = 'Reverse Journal'";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		}else if ($journalStatus == 2){
			$sql = "DELETE FROM general_ledger WHERE accrue_id = {$accrueId} AND description = 'Cancel Journal'";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		}else{
			$sql = "DELETE FROM general_ledger WHERE accrue_id = {$accrueId}";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		}
		
		
        $sql = "SELECT a.*,b.*, d.`account_no` FROM accrue_prediction_detail a
                LEFT JOIN accrue_prediction b ON a.prediction_id = b.prediction_id
                LEFT JOIN account d ON d.`account_id` = a.`account_id`
                WHERE a.prediction_detail_id = {$accrueId} ";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
			
			$accountNo = $row->account_no;
			//$totalAmount = $row->total_amount * $row->exchange_rate;  //ini exchange rate punya PEB
            $totalAmount = $row->total_amount;
			$journal_status = $row->journal_status;

                
				$sqlAccount1 = "SELECT account_id, account_no, account_name FROM account WHERE account_type IN (6,4) AND account_no IN (220100, {$accountNo})";
                $resultAccount1 = $myDatabase->query($sqlAccount1, MYSQLI_STORE_RESULT);
                echo "SQL ACC <br> " . $sqlAccount1 . "<br><br>";

                if ($resultAccount1 !== false && $resultAccount1->num_rows > 0) {
                    while ($rowAccount1 = $resultAccount1->fetch_object()) {
                        if ($insertValues != "") {
                            $insertValues .= ", ";
                        }
						
                        
                        //1 = Dr
                        //2 = Cr
                        if($boolReverse){
                            if ($totalAmount != 0 && $totalAmount != '') {
                                if ($rowAccount1->account_no == $accountNo) {
                                    if ($totalAmount < 0) {
                                        $insertValues .= "(1, '{$source}', NULL, NULL, 15,  {$accrueId}, {$rowAccount1->account_id}, 'Reverse Journal', {$totalAmount})";
                                    } else {
                                        $insertValues .= "(2, '{$source}', NULL, NULL, 15,  {$accrueId}, {$rowAccount1->account_id}, 'Reverse Journal', {$totalAmount})";
                                    }
                                } elseif ($rowAccount1->account_no == 220100) {
                                    if ($totalAmount < 0) {
                                        $insertValues .= "(2, '{$source}', NULL, NULL, 15, {$accrueId},{$rowAccount1->account_id}, 'Reverse Journal', {$totalAmount})";
                                    } else {
                                        $insertValues .= "(1, '{$source}', NULL, NULL, 15, {$accrueId},{$rowAccount1->account_id}, 'Reverse Journal', {$totalAmount})";
                                    }
                                } 
                            }
                        }else{
                            if ($totalAmount != 0 && $totalAmount != '') {
                                if($journal_status == 2){
                                    if ($rowAccount1->account_no == $accountNo) {
                                        if ($totalAmount < 0) {
                                            $insertValues .= "(1, '{$source}', NULL, NULL, 15, {$accrueId},{$rowAccount1->account_id}, 'Cancel Journal', {$totalAmount})";
                                        } else {
                                            $insertValues .= "(2, '{$source}', NULL, NULL, 15, {$accrueId},{$rowAccount1->account_id}, 'Cancel Journal', {$totalAmount})";
                                        }
                                    } elseif ($rowAccount1->account_no == 220100) {
                                        if ($totalAmount < 0) {
                                            $insertValues .= "(2, '{$source}', NULL, NULL, 15, {$accrueId},{$rowAccount1->account_id}, 'Cancel Journal', {$totalAmount})";
                                        } else {
                                            $insertValues .= "(1, '{$source}', NULL, NULL, 15, {$accrueId},{$rowAccount1->account_id}, 'Cancel Journal', {$totalAmount})";
                                        }
                                    }
                                }else{
                                    if ($rowAccount1->account_no == $accountNo) {
                                        if ($totalAmount < 0) {
                                            $insertValues .= "(2, '{$source}', NULL, NULL, 15, {$accrueId}, {$rowAccount1->account_id}, NULL, {$totalAmount})";
                                        } else {
                                            $insertValues .= "(1, '{$source}', NULL, NULL, 15, {$accrueId}, {$rowAccount1->account_id}, NULL, {$totalAmount})";
                                        }
                                    } elseif ($rowAccount1->account_no == 220100) {
                                        if ($totalAmount < 0) {
                                            $insertValues .= "(1, '{$source}', NULL, NULL, 15, {$accrueId}, {$rowAccount1->account_id}, NULL, {$totalAmount})";
                                        } else {
                                            $insertValues .= "(2, '{$source}', NULL, NULL, 15, {$accrueId}, {$rowAccount1->account_id}, NULL, {$totalAmount})";
                                        }
                                    }
                                }
                            }
                            
                        }

                    }
                } else {
                    $boolContinue = false;
                    echo 'FALSE1';
                }
            
        } else {
            $boolContinue = false;
            echo 'FALSE3';
        }

        // </editor-fold>
    }

    if ($boolContinue) {
        // INSERT
        $sql = "INSERT INTO general_ledger (general_ledger_type, general_ledger_module, general_ledger_method, 
                            general_ledger_transaction_type, general_ledger_for, 
                            accrue_id, account_id, description, amount) VALUES {$insertValues}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if ($result === false) {
            echo 'FALSE insertGL_accrue';
            echo '</br>';
            echo $sql;
            echo '</br>';

        } else {
            echo 'TRUE insertGL_accrue';
            echo $sql;
            //$general_ledger_id = $myDatabase->insert_id;

        }
    }
}

function insertRGL_accrue($myDatabase, $source, $accrueId = "NULL")
{

    $whereCondition = '';
    if ($accrueId != 'NULL') {
		
		$boolReverse = false;
		$sqlReverse = "SELECT * FROM invoice_detail WHERE prediction_detail_id = {$accrueId} ";
		$resultReverse = $myDatabase->query($sqlReverse, MYSQLI_STORE_RESULT);
		if ($resultReverse->num_rows == 1) {
            $boolReverse = true;
        }
			  
		$sqlCancel = "SELECT * FROM accrue_prediction_detail WHERE prediction_detail_id = {$accrueId} ";
		$resultCancel = $myDatabase->query($sqlCancel, MYSQLI_STORE_RESULT);
		if ($resultCancel->num_rows == 1) {
		    $rowCancel = $resultCancel->fetch_object();
            $journalStatus = $rowCancel->journal_status;
        }
			  
		if(!$boolReverse && $journalStatus != 2){
			$sqlDelete = "UPDATE gl_report SET regenerate = 1 WHERE accrue_id = {$accrueId} AND general_ledger_module = 'JURNAL ACCRUE'";
			$result = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);
		}
		
		if($boolReverse){
            $whereCondition .= "AND gl.accrue_id = {$accrueId} AND gl.general_ledger_module = 'JURNAL ACCRUE' AND gl.description = 'Reverse Journal'";
		}else if ($journalStatus == 2){
		    $whereCondition .= "AND gl.accrue_id = {$accrueId} AND gl.general_ledger_module = 'RETURN ACCRUE' AND gl.description = 'Cancel Journal'";	
		}else{
		    $whereCondition .= "AND gl.accrue_id = {$accrueId} AND gl.general_ledger_module = 'JURNAL ACCRUE'";	
		}
		

    }

    $sqla = "SELECT gl.*, 'Accrue' AS general_ledger_for2,
                (SELECT `account_no` FROM  account a WHERE a.account_id = gl.account_id) AS account_no,
                (SELECT `account_name` FROM  account a WHERE a.account_id = gl.account_id) AS account_name,

            CASE WHEN gl.general_ledger_transaction_type = 1 THEN 'IN'
            WHEN gl.general_ledger_transaction_type = 2 THEN 'OUT'
            ELSE '' END AS general_ledger_transaction_type2,

            (
                SELECT a.stockpile_name FROM stockpile a 
                LEFT JOIN accrue_prediction b ON a.stockpile_id = b.stockpile_id 
                LEFT JOIN accrue_prediction_detail c ON b.prediction_id = c.prediction_id 
                WHERE c.prediction_detail_id = gl.accrue_id LIMIT 1
            )AS stockpile_name2,
                            
            (  
                SELECT a.general_vendor_name FROM general_vendor a
                LEFT JOIN accrue_prediction_detail b ON a.general_vendor_id = b.general_vendor_id 
                WHERE b.prediction_detail_id = gl.accrue_id
            )AS supplier_name,

            (
                SELECT a.general_vendor_code FROM general_vendor a 
                LEFT JOIN accrue_prediction_detail b ON a.general_vendor_id = b.general_vendor_id 
                WHERE b.prediction_detail_id = gl.accrue_id
            )AS supplier_code,               
                    
            (
                SELECT a.shipment_no FROM shipment a 
                LEFT JOIN accrue_prediction b ON a.shipment_id = b.shipment_id 
                LEFT JOIN accrue_prediction_detail c ON b.prediction_id = c.prediction_id 
                WHERE c.prediction_detail_id = gl.accrue_id LIMIT 1
            )AS shipment_code,
                    
            (
                SELECT b.qty FROM accrue_prediction_detail b 
                WHERE b.prediction_detail_id = gl.accrue_id
            )AS quantity,
                    
            (
                SELECT b.priceMT FROM accrue_prediction_detail b 
                WHERE b.prediction_detail_id = gl.accrue_id
            ) AS price,
                    
            CASE WHEN gl.accrue_id IS NOT NULL THEN 
            (
                SELECT b.cost_name FROM accrue_prediction_detail b 
                WHERE b.prediction_detail_id = gl.accrue_id
            )
            ELSE (SELECT remarks FROM payment WHERE payment_id = gl.payment_id) END AS remarks,
                                        
            CASE WHEN  gl.accrue_id IS NOT NULL AND gl.description = 'Reverse Journal' 
            THEN 
                (
                    SELECT a.invoice_date FROM invoice a 
                    LEFT JOIN invoice_detail b ON a.`invoice_id` = b.`invoice_id` 
                    LEFT JOIN accrue_prediction_detail c ON b.`prediction_detail_id` = c.`prediction_detail_id` 
                        WHERE c.`prediction_detail_id` = gl.accrue_id LIMIT 1
                )
            WHEN gl.accrue_id IS NOT NULL AND gl.description = 'Cancel Journal' THEN 
                (
                    SELECT cancel_jurnal_date FROM accrue_prediction_detail 
                    WHERE prediction_detail_id = gl.accrue_id
                )
            WHEN gl.accrue_id IS NOT NULL THEN 
                (SELECT LAST_DAY(b.PEB_Date) FROM accrue_prediction b LEFT JOIN accrue_prediction_detail c ON b.prediction_id = c.prediction_id WHERE c.prediction_detail_id = gl.accrue_id LIMIT 1)
            ELSE '' END AS gl_date,

            CASE WHEN gl.accrue_id IS NOT NULL AND gl.description = 'Reverse Journal' THEN (SELECT CONCAT(b.prediction_code,'-',c.prediction_detail_id,'-RVS') FROM accrue_prediction b LEFT JOIN accrue_prediction_detail c ON b.prediction_id = c.prediction_id WHERE c.prediction_detail_id = gl.accrue_id LIMIT 1)
            WHEN gl.accrue_id IS NOT NULL AND gl.description = 'Cancel Journal' THEN (SELECT CONCAT(b.prediction_code,'-',c.prediction_detail_id,'-RET') FROM accrue_prediction b LEFT JOIN accrue_prediction_detail c ON b.prediction_id = c.prediction_id WHERE c.prediction_detail_id = gl.accrue_id LIMIT 1)
            WHEN gl.accrue_id IS NOT NULL THEN (SELECT CONCAT(b.prediction_code,'-',c.prediction_detail_id) FROM accrue_prediction b LEFT JOIN accrue_prediction_detail c ON b.prediction_id = c.prediction_id WHERE c.prediction_detail_id = gl.accrue_id LIMIT 1)
            ELSE '' END AS payment_no,

            (SELECT payment_status FROM payment WHERE payment_id = gl.payment_id) AS payment_status, 
            (SELECT payment_date FROM payment WHERE payment_id = gl.payment_id) AS payment_date,
            (SELECT account_type FROM account WHERE account_id = gl.account_id) AS  account_type, 
            (SELECT payment_method FROM payment WHERE payment_id = gl.payment_id ) AS payment_method,
            (SELECT payment_type FROM payment WHERE payment_id = gl.payment_id ) AS payment_type
            FROM general_ledger gl  
 WHERE  gl.amount > 0 {$whereCondition}";
//   echo " <br> select insertRGL_accrue " . $sqla . "</br>";
    $resulta = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);
    while ($row = $resulta->fetch_object()) {
        $sql2 = "SELECT s.stockpile_name FROM stockpile s INNER JOIN stockpile_contract sc ON s.`stockpile_id` = sc.`stockpile_id` 
                INNER JOIN contract c ON sc.`contract_id` = c.`contract_id` WHERE sc.`quantity` > 0 AND c.`contract_no` = '$row->contract_no'";
        $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
        while ($row2 = $result2->fetch_object()) {
            $stockpileName2 = $row2->stockpile_name;
        }

        //$rowActive++;
        if ($row->transaction_id != NULL && $row->account_id == 147 && $row->general_ledger_for == 1) {
            $stockpileName = $stockpileName2;
        } else {
            $stockpileName = $row->stockpile_name2;
        }


        if ($row->general_ledger_id == '' && $row->amount < 0) {
            $credit_amount = $row->amount * -1;
            $debit_amount = 0;
        } elseif ($row->general_ledger_id == '' && $row->amount > 0) {
            $debit_amount = $row->amount;
            $credit_amount = 0;
        }
        if ($row->general_ledger_id != '' && ($row->general_ledger_module == 'JURNAL ACCRUE' || $row->general_ledger_module == 'RETURN ACCRUE')) {
            $debit_amount = $row->amount;
            $credit_amount = $row->amount;
        }

        $voucherNo = "";
        $voucherNo = $row->payment_no;

        $general_ledger_id = $row->general_ledger_id;
        $stockpile = $row->stockpile_name2;
        $gl_date = $row->gl_date;
        $general_ledger_module = $row->general_ledger_module;
        $general_ledger_method = $row->general_ledger_method;
        $general_ledger_transaction_type2 = $row->general_ledger_transaction_type2;
        $supplier_name = $row->supplier_name;
        $supplier_code = $row->supplier_code;
        $remarks = $row->remarks;
        $shipment_code = $row->shipment_code;
        $quantity = $row->quantity;
        $price = $row->price;
        $account_no = $row->account_no;
        $account_name = $row->account_name;
        $exchange_rate = $row->exchange_rate;

        $date = new DateTime();
        $currentDate = $date->format('d/m/Y H:i:s');

        $debitAmount = 0;
        if ($row->general_ledger_type == 1) {
            $debitAmount = $debit_amount;
        } elseif ($row->general_ledger_type == '') {
            $debitAmount = $debit_amount;
        }

        $creditAmount = 0;
        if ($row->general_ledger_type == 2) {
            $creditAmount = $credit_amount;
        } elseif ($row->general_ledger_type == '') {
            $creditAmount = $credit_amount;
        }
        
        $sqlb = "INSERT INTO gl_report (general_ledger_id, accrue_id, source, stockpile,gl_date, jurnal_no, general_ledger_module, 
                general_ledger_method, general_ledger_transaction_type2, supplier_code,supplier_name, remarks, 
                shipment_code,quantity,price,account_no,account_name,exchange_rate,debitAmount,creditAmount, 
                entry_date, entry_by) 
                VALUES ({$general_ledger_id}, {$accrueId}, 'GL', '{$stockpile}','{$gl_date}','{$voucherNo}', '{$general_ledger_module}',
                 '{$general_ledger_method}', '{$general_ledger_transaction_type2}', '{$supplier_code}',
                 '{$supplier_name}', '{$remarks}', '{$shipment_code}','{$quantity}','{$price}',
                  '{$account_no}','{$account_name}','{$exchange_rate}',{$debitAmount},{$creditAmount}, 
                  STR_TO_DATE('{$currentDate}', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']})";
        $resultb = $myDatabase->query($sqlb, MYSQLI_STORE_RESULT);
        echo " <br> insertRGL_accrue " . $sqlb . "</br>";
    }

}
