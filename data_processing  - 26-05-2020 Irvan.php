<?php

// PATH
require_once 'assets/include/path_variable.php';

// Session
require_once PATH_INCLUDE.DS.'session_variable.php';

// Initiate DB connection
require_once PATH_INCLUDE.DS.'db_init.php';

date_default_timezone_set('Asia/Jakarta');

$date = new DateTime();
$currentDate = $date->format('d/m/Y H:i:s');
$currentMonthYear = $date->format('m-y');
$currentYearMonth = $date->format('ym');
$todayDate = $date->format('Y-m-d');
$currentYear = $date->format('y');

if (isset($_REQUEST['action']) && $_REQUEST['action'] == 'login') {
    // <editor-fold defaultstate="collapsed" desc="Login">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $userEmail = $myDatabase->real_escape_string($_POST['userEmail']);
    $userPassword = $myDatabase->real_escape_string($_POST['userPassword']);
    // </editor-fold>
    
    if($userEmail != '' && $userPassword != '') {
        $sql = "SELECT * FROM `user`
                WHERE user_email = '{$userEmail}'";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            if($row->active == 1) {
                $salt = $row->user_salt;
                $saltedPW =  trim($userPassword) . $salt;
                $hashedPW = hash('sha256', $saltedPW);

                if($hashedPW == $row->user_password) {
                    unset($_SESSION['menu_name']);
                    $_SESSION['isLogin'] = 1;
                    $_SESSION['userName'] = $row->user_name;
                    $_SESSION['userId'] = $row->user_id;
                    $_SESSION['companyId'] = 2;
                    $return_value = '|OK||';
					if($row->change_password == 1) {
					$return_value = '|PASS||';
					}
                } else {
                    $return_value = '|FAIL|Password not match.|';
                }
            } else {
                $return_value = '|FAIL|Your account is not active.|';
            }
        } else {
            $return_value = '|FAIL|Email & Password combination not found.|';
        }
    } else {
        $return_value = '|FAIL|Email & Password can not be empty.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'freight_login_data') {
    // <editor-fold defaultstate="collapsed" desc="freight_login_data">
        
        $return_value = '';
        $boolNew = false;

        $freightLoginId = $myDatabase->real_escape_string($_POST['freightLoginId']);
        $freightId = $myDatabase->real_escape_string($_POST['freightId']);
        $masterGroupId = $myDatabase->real_escape_string($_POST['masterGroupId']);
        $username = $myDatabase->real_escape_string($_POST['freightUsername']);
	    $password= $myDatabase->real_escape_string($_POST['freightPassword']);

    if ($freightLoginId == '') {
        $boolNew = true;
    }
        // </editor-fold>
    
    
        if($freightId != '' && $masterGroupId != '' && $username != '' && $password != '') {
                if($boolNew) {
                    $hashedPW = hash('sha256', $password);
                    $sql = "INSERT INTO freight_login (freight_id, group_id, freight_username, freight_password, entry_by, entry_date)
                            VALUES ({$freightId}, {$masterGroupId}, '{$username}', '{$hashedPW}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                } elseif($password != ''){
                    $hashedPW = hash('sha256', $password);
                    $sql = "UPDATE `freight_login` SET "
                    . "group_id =  '{$masterGroupId}',"
                    . "freight_username = '{$username}', "
                    . "freight_password = '{$hashedPW}', "
                    . "WHERE freight_login = {$freightLoginId}";
    
                }
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    
                if($result !== false) {
                    $return_value = '|OK|Freight User has successfully inserted/updated.|';
                } else {
                    $return_value = '|FAIL|Insert/update freight user failed.|';
                    echo $sql;
                }
            }  else {
                $return_value = '|FAIL|Please fill the required fields.|';
                }
        
        echo $return_value;
        // </editor-fold>
    }

//     

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_freight_login') {
    // <editor-fold defaultstate="collapsed" desc="delete_vendor_login">

    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightLoginId = $myDatabase->real_escape_string($_POST['freightLoginId']);
    // </editor-fold>
    
    if($freightLoginId != '') {
        $sql = "DELETE FROM `freight_login` WHERE freight_login_id = {$freightLoginId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    
            if($result !== false) {
                $return_value = '|OK|Freigh User has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete Freight User failed.|';
            }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'freight_group_data') {
    // <editor-fold defaultstate="collapsed" desc="freight_data">

    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightGroupId = $myDatabase->real_escape_string($_POST['freightGroupId']);
    $freightGroupName = $myDatabase->real_escape_string($_POST['freightGroupName']);
    // </editor-fold>
    
    if ($freightGroupId == '') {
        $boolNew = true;
    }
    
    if($freightGroupName != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `master_group` WHERE UPPER(group_name) = UPPER('{$freightGroupName}')";
        } else {
            $sql = "SELECT * FROM `master_group` WHERE UPPER(group_name) = UPPER('{$freightGroupName}') AND master_group_id <> {$freightGroupId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `master_group` (group_name, entry_by, entry_date) VALUES ("
                        . "'{$freightGroupName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `master_group` SET "
                        . "group_name = '{$freightGroupName}' "
                        . "WHERE master_group_id = {$freightGroupId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $freightGroupId = $myDatabase->insert_id;
                }
                $return_value = '|OK|Group has successfully inserted/updated.|'. $freightGroupId .'|';
            } else {
                $return_value = '|FAIL|Insert/update Group failed.||';
            }
        } else {
            $return_value = '|FAIL|Group already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    echo $return_value;
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_freight_group') {
    // <editor-fold defaultstate="collapsed" desc="delete_freight">

    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightGroupId = $myDatabase->real_escape_string($_POST['freightGroupId']);
    // </editor-fold>
    
    if($freightGroupId != '') {
        $sql = "SELECT * FROM `freight_login` WHERE group_id = {$freightGroupId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `master_group` WHERE master_group_id = {$freightGroupId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Group has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete Group failed.|';
            }
        } else {
            $return_value = '|FAIL|Group use in Freight Login.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'SaldoAkun') {

    $return_value = '';
	
	$amount = $myDatabase->real_escape_string($_POST['amount']);
	$sa_id = $myDatabase->real_escape_string($_POST['sa_id']);
	
          $sql = "UPDATE saldo_awal SET amount = '{$amount}' WHERE sa_id = {$sa_id}";
			
		
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
               
                $return_value = '|OK|Data has successfully Updated.||';
				
				
            }else {
                $return_value = '|FAIL|Insert Data failed.||';
			}
			echo $return_value;
			/*
			$return_value=$POID;
			echo $return_value;
			*/
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'PO_data') {
    // <editor-fold defaultstate="collapsed" desc="invoice_data">
    
    $return_value = '';
    $addMessage = '';
    $boolNew = false;
    $boolContinue = true;
    $boolUpdate = false;
	$boolUpdateInvoice = false;
	$boolUpdateInvoiceDetail = false;
    $boolInsertVendor = false;
    $boolVendorExists = false;
    $boolRecalculate = false;
    $boolPriceUp = false;
    $boolPriceDown = false;
    $boolQuantityUp = false;
    $boolQuantityDown = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	$id = $myDatabase->real_escape_string($_POST['POId']);
    $POId = $myDatabase->real_escape_string($_POST['generatedPONo']);
	//$invoiceType = $myDatabase->real_escape_string($_POST['invoiceType']);
	//$accountId = $myDatabase->real_escape_string($_POST['accountId']);	
   	//$invoiceMethod = $myDatabase->real_escape_string($_POST['invoiceMethod']);
	//$invoiceDP = $myDatabase->real_escape_string($_POST['invoice_dp']);
   	//$generatedPONo = $myDatabase->real_escape_string($_POST['generatedInvoiceNo']);
	///$invoiceNo = $generatedInvoiceNo;
	//$invoiceNo2 = $myDatabase->real_escape_string($_POST['generatedInvoiceNo2']);
    $grandTotal = $myDatabase->real_escape_string($_POST['grandTotal']);
    $generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId']);
    //$stockpileContractId3 = $myDatabase->real_escape_string($_POST['stockpileContractId3']);
    //$shipmentId1 = $myDatabase->real_escape_string($_POST['shipmentId1']);
    //$invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
	//$inputDate = $myDatabase->real_escape_string($_POST['inputDate']);
	$tanggalpo = $myDatabase->real_escape_string($_POST['requestDate']);
	//$taxDate = $myDatabase->real_escape_string($_POST['taxDate']);
    //$invoiceTax = $myDatabase->real_escape_string($_POST['invoiceTax']);
	//$ppnID = $myDatabase->real_escape_string($_POST['ppnID']);
    //$ppn1 = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn1']));
	$nopenawaran = str_replace(",", "", $myDatabase->real_escape_string($_POST['inputnopenawaran']));
	//$ppn2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn2']));
	$remarks = $myDatabase->real_escape_string($_POST['remarks']);
	//$ppnConverted = $ppn;
	//$pphID = $myDatabase->real_escape_string($_POST['pphID']);
    //$pph1 = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph1']));
	//$pph2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph2']));
	//$dppPrice = $myDatabase->real_escape_string($_POST['dppPrice']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    //$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
	$totalppn = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalppn']));
	$totalpph = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalpph']));
	$totalall = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalall']));
    $toc =$myDatabase->real_escape_string($_POST['toc']);
	$signId =$myDatabase->real_escape_string($_POST['signId']);
    //$quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
	//$amount = $grandTotal;
	//$amountConverted = $grandTotal;
	//$amount_ori = $grandTotal;
	//$amount_ori_conv = $grandTotal;
	
    // </editor-fold>
	
	if($currencyId==1){
		$exchangeRate=0;
	
	}
	
	$sql2= "SELECT stockpile_id FROM USER WHERE USER_ID = {$_SESSION['userId']}";
	$resultsql2=  $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
	 if($resultsql2->num_rows == 1) {
            $rowsql2 = $resultsql2->fetch_object();
            $stockpileId =  $rowsql2->stockpile_id;
        }
    $sql3= "SELECT * FROM po_hdr WHERE no_po = '{$POId}'";
	$resultsql3=  $myDatabase->query($sql3, MYSQLI_STORE_RESULT);
	 if($resultsql3->num_rows == 0) {
            $sql="INSERT INTO `po_hdr`
					(`no_po`,`general_vendor_id`,`no_penawaran`,`tanggal`,`memo`,`entry_by`,`entry_date`,`currency_id`,`exchangerate`,`grandtotal`,`stockpile_id`,`toc`,`sign_id`,
					`totalppn`,`totalpph`,`totalall`)
				VALUES
					('{$POId}',{$generalVendorId},'{$nopenawaran}',STR_TO_DATE('{$tanggalpo}','%d/%m/%Y'),'{$remarks}',{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$currencyId},{$exchangeRate},{$grandTotal},{$stockpileId},'{$toc}',{$signId},{$totalppn},{$totalpph},{$totalall});";
			
      
		
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result !== false) {
		   $id = $myDatabase->insert_id;
            $return_value = '|OK|PO has successfully inserted/updated.'. $addMessage .'|'. $id .'|'. $POId .'|';
			unset($_SESSION['PO']);
        } else {
            $return_value = '|FAIL|Insert/update PO failed.'. $addMessage .'||';
			echo $sql;
			}
		}
		else{
			$sql="update `po_hdr` set `general_vendor_id` = {$generalVendorId},`no_penawaran` = '{$nopenawaran}',`tanggal` = STR_TO_DATE('{$tanggalpo}','%d/%m/%Y') ,
			`memo` = '{$remarks}' ,`entry_by` = {$_SESSION['userId']} ,`entry_date` = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),`currency_id` = {$currencyId},
			`exchangerate` = '{$exchangeRate}',`grandtotal` = {$grandTotal},`stockpile_id` = {$stockpileId},`toc` = '{$toc}',`sign_id` = {$signId},
			`totalppn` = {$totalppn},`totalpph` = {$totalpph},`totalall` = {$totalall} where `no_po` = '{$POId}'";
					  
		
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result !== false) {
		   $id = $myDatabase->insert_id;
            $return_value = '|OK|PO has successfully inserted/updated.'. $addMessage .'|'. $id .'|';
			unset($_SESSION['PO']);
        } else {
            $return_value = '|FAIL|Insert/update PO failed.'. $addMessage .'||';
			echo $sql;
			}
			
		}
			

       echo $return_value;
    }
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'PO_detail') {
		//echo 'test';
    // <editor-fold defaultstate="collapsed" desc="transaction_customer_data">

    $return_value = '';
	//$boolShipment1 = false;
    //$grandTotal = 0;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	//$POMethod = 2;
	//echo '<br>';
    //$POType = $myDatabase->real_escape_string($_POST['POType']);
	//echo '<br>';
    //$accountId = $myDatabase->real_escape_string($_POST['accountId']);
	//echo '<br>';
	$generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId']);
	//echo '<br>';
    //$shipmentId1 = $myDatabase->real_escape_string($_POST['shipmentId1']);
    //$stockpileId2 = $myDatabase->real_escape_string($_POST['stockpileId2']);
	 $qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty']));
	//echo '<br>';
	 $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
	//echo '<br>';
	//$termin = str_replace(",", "", $myDatabase->real_escape_string($_POST['termin']));
	 $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
	//$currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
	//$exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
	//echo '<br>';
	 $ppnpo = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppnPO1']));
	//echo '<br>';
	 $pphpo = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph1']));
	//echo '<br>';
	 $pphpoID = $myDatabase->real_escape_string($_POST['pphID']);
	//echo '<br>';
	 $ppnpoID = $myDatabase->real_escape_string($_POST['ppnPOID']);
	//$pphDP2 = $myDatabase->real_escape_string($_POST['pphDP2']);
	//$ppnDP2 = $myDatabase->real_escape_string($_POST['ppnDP2']);
	//$grandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal']));
	//$DP = $grandTotal;
	//$dp_total = str_replace(",", "", $myDatabase->real_escape_string($_POST['dp_total']));
	//$DP = $dp_total;
	//echo '<br>';
	//$keterangan = $myDatabase->real_escape_string($_POST['keterangan']);
	//$notes = $myDatabase->real_escape_string($_POST['notes']);
	//$invoiceMethodDetail = $myDatabase->real_escape_string($_POST['invoiceMethodDetail']);
	//echo '<br>';
	 $POID = $myDatabase->real_escape_string($_POST['generatedPONo']);
	 $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
	 $pphstatus = $myDatabase->real_escape_string($_POST['pphstatus']);
	 $ppnpostatus = $myDatabase->real_escape_string($_POST['ppnpostatus']);
	 $itemId = $myDatabase->real_escape_string($_POST['itemId']);
	 $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
	 $requestDate = $myDatabase->real_escape_string($_POST['requestDate']);


   $date = explode('/', $requestDate);
   $month = (int)$date[1];
    $day   = $date[0];
    $year  = $date[2];

	 if ($shipmentId==''){
		 $shipmentId=0;
	 }
	//$slipNos = "";
	//$slipNos2 = "";
    // </editor-fold>
   //echo

   $sql = "SELECT * FROM `po_hdr` ph
          left join po_detail pd on ph.no_po = pd.no_po
		  left join general_vendor gv on gv.general_vendor_id = ph.general_vendor_id
          WHERE ph.general_vendor_id = {$generalVendorId} and year(ph.tanggal)=$year and month(ph.tanggal)=$month and pd.stockpile_id=$stockpileId and gv.monthly_pay=1 AND ph.status = 0 AND ph.no_po != {$POID}";
  echo $sql;
   $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

   if($result->num_rows == 0) {
           $sql =
       "INSERT INTO `po_detail`
       (`no_po`,`qty`,`harga`,`amount`,`ppn`,`pph`,`ppn_id`,`pph_id`,`entry_by`,`entry_date`,`pphstatus`,`stockpile_id`,`item_id`,`shipment_id`, `ppnstatus`)
       VALUES
       ('{$POID}',{$qty},{$price},{$amount},{$ppnpo},{$pphpo},
       {$ppnpoID},{$pphpoID},{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$pphstatus},{$stockpileId},{$itemId},{$shipmentId},{$ppnpostatus});";


             $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

             if($result !== false) {

                 $return_value = '|OK|Data has successfully inserted.||';


             }else {
                 $return_value = '|FAIL|Insert Data failed.||';
       }
   }else {
       $return_value = '|FAIL|Same PO for vendor already created.||';
     }


			//$return_value=$sql;
			echo $return_value;

    // </editor-fold>
}
//-------------------------------------------------------------------------------------------------------------------------------------------
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'PO_reject') {
	//echo 'test';
    // <editor-fold defaultstate="collapsed" desc="transaction_customer_data">
    
    $return_value = '';
	//$boolShipment1 = false;
    //$grandTotal = 0;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	//$POMethod = 2;
	//echo '<br>';
    //$POType = $myDatabase->real_escape_string($_POST['POType']);
	//echo '<br>';
    //$accountId = $myDatabase->real_escape_string($_POST['accountId']);
	//echo '<br>';
	//echo $generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId']);
	//echo '<br>';
    //$shipmentId1 = $myDatabase->real_escape_string($_POST['shipmentId1']);
    //$stockpileId2 = $myDatabase->real_escape_string($_POST['stockpileId2']);
	//$qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty']));
	//echo '<br>';
	//$price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
	//echo '<br>';
	//$termin = str_replace(",", "", $myDatabase->real_escape_string($_POST['termin']));
	//$amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
	//$currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
	//$exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
	//echo '<br>';
	//$ppnpo = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppnPO1']));
	//echo '<br>';
	//$pphpo = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph1']));
	//echo '<br>';
	//$pphpoID = $myDatabase->real_escape_string($_POST['pphID']);
	//echo '<br>';
	//$ppnpoID = $myDatabase->real_escape_string($_POST['ppnPOID']);
	//$pphDP2 = $myDatabase->real_escape_string($_POST['pphDP2']);
	//$ppnDP2 = $myDatabase->real_escape_string($_POST['ppnDP2']);
	//$grandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal']));
	//$DP = $grandTotal;
	//$dp_total = str_replace(",", "", $myDatabase->real_escape_string($_POST['dp_total']));
	//$DP = $dp_total;
	//echo '<br>';
	//$keterangan = $myDatabase->real_escape_string($_POST['keterangan']);
	//$notes = $myDatabase->real_escape_string($_POST['notes']);
	//$invoiceMethodDetail = $myDatabase->real_escape_string($_POST['invoiceMethodDetail']);
	//echo '<br>';
	$POID = $myDatabase->real_escape_string($_POST['poId']);
	//$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
	//$pphstatus = $myDatabase->real_escape_string($_POST['pphstatus']);
	//$itemId = $myDatabase->real_escape_string($_POST['itemId']);
	//$slipNos = "";
	//$slipNos2 = "";
    // </editor-fold>
   //echo 
	
          $sql = 
			"update `po_hdr` set status = 3 where idpo_hdr={$POID};";
			
		
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
               
                $return_value = '|OK|Data has successfully inserted.||';
				
				
            }else {
                $return_value = '|FAIL|Insert Data failed.||';
			}
			echo $return_value;
			/*
			$return_value=$POID;
			echo $return_value;
			*/
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'PO_cancel') {
	//echo 'test';
    // <editor-fold defaultstate="collapsed" desc="transaction_customer_data">
    
    $return_value = '';
	//$boolShipment1 = false;
    //$grandTotal = 0;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	//$POMethod = 2;
	//echo '<br>';
    //$POType = $myDatabase->real_escape_string($_POST['POType']);
	//echo '<br>';
    //$accountId = $myDatabase->real_escape_string($_POST['accountId']);
	//echo '<br>';
	//echo $generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId']);
	//echo '<br>';
    //$shipmentId1 = $myDatabase->real_escape_string($_POST['shipmentId1']);
    //$stockpileId2 = $myDatabase->real_escape_string($_POST['stockpileId2']);
	//$qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty']));
	//echo '<br>';
	//$price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
	//echo '<br>';
	//$termin = str_replace(",", "", $myDatabase->real_escape_string($_POST['termin']));
	//$amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
	//$currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
	//$exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
	//echo '<br>';
	//$ppnpo = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppnPO1']));
	//echo '<br>';
	//$pphpo = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph1']));
	//echo '<br>';
	//$pphpoID = $myDatabase->real_escape_string($_POST['pphID']);
	//echo '<br>';
	//$ppnpoID = $myDatabase->real_escape_string($_POST['ppnPOID']);
	//$pphDP2 = $myDatabase->real_escape_string($_POST['pphDP2']);
	//$ppnDP2 = $myDatabase->real_escape_string($_POST['ppnDP2']);
	//$grandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal']));
	//$DP = $grandTotal;
	//$dp_total = str_replace(",", "", $myDatabase->real_escape_string($_POST['dp_total']));
	//$DP = $dp_total;
	//echo '<br>';
	//$keterangan = $myDatabase->real_escape_string($_POST['keterangan']);
	//$notes = $myDatabase->real_escape_string($_POST['notes']);
	//$invoiceMethodDetail = $myDatabase->real_escape_string($_POST['invoiceMethodDetail']);
	//echo '<br>';
	$POID = $myDatabase->real_escape_string($_POST['poId']);
	//$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
	//$pphstatus = $myDatabase->real_escape_string($_POST['pphstatus']);
	//$itemId = $myDatabase->real_escape_string($_POST['itemId']);
	//$slipNos = "";
	//$slipNos2 = "";
    // </editor-fold>
   //echo 
	
          $sql = 
			"update `po_hdr` set status = 4 where idpo_hdr={$POID};";
			
		
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
               
                $return_value = '|OK|Data has successfully inserted.||';
				
				
            }else {
                $return_value = '|FAIL|Insert Data failed.||';
			}
			echo $return_value;
			/*
			$return_value=$POID;
			echo $return_value;
			*/
    // </editor-fold>
}


elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_po_detail') {
    // <editor-fold defaultstate="collapsed" desc="delete_user">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $poDetailId = $myDatabase->real_escape_string($_POST['poDetailId']);
    // </editor-fold>
    
    if($poDetailId != '') {
		
        $sql = "DELETE FROM `po_detail` WHERE idpo_detail = {$poDetailId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|Detail has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete detail failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_item') {
    // <editor-fold defaultstate="collapsed" desc="delete_vehicle">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $itemId = $myDatabase->real_escape_string($_POST['itemId']);
    // </editor-fold>
    
    if($itemId != '') {
        $sql = "SELECT * FROM `po_detail` WHERE item_id = {$itemId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `master_item` WHERE idmaster_item = {$itemId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Item has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete item failed.|';
            }
        } else {
            $return_value = '|FAIL|Item in use in PO.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_groupitem') {
    // <editor-fold defaultstate="collapsed" desc="delete_vehicle">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $groupitemId = $myDatabase->real_escape_string($_POST['groupitemId']);
    // </editor-fold>
    
    if($groupitemId != '') {
        $sql = "SELECT * FROM `master_item` WHERE group_itemid = {$groupitemId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `master_groupitem` WHERE idmaster_groupitem = {$groupitemId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Item has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete item failed.|';
            }
        } else {
            $return_value = '|FAIL|Item in use in item.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_sign') {
    // <editor-fold defaultstate="collapsed" desc="delete_vehicle">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $signId = $myDatabase->real_escape_string($_POST['signId']);
    // </editor-fold>
    
    if($signId != '') {
        $sql = "SELECT * FROM `po_hdr` WHERE sign_id = {$signId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `master_sign` WHERE idmaster_sign = {$signId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Sign has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete sign failed.|';
            }
        } else {
            $return_value = '|FAIL|Sign in use in PO.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'reject_contract') {
    // <editor-fold defaultstate="collapsed" desc="delete_vehicle">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $purchasingId = $myDatabase->real_escape_string($_POST['modalPurchasingId']);
    $rejectNote = $myDatabase->real_escape_string($_POST['rejectNote']);
    // </editor-fold>

    if($purchasingId != '') {
        $sql = "CALL `reject_contract` ({$purchasingId},'$rejectNote')";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);



            if($result !== false) {
                $return_value = '|OK|Data has successfully Rejected.|';
            } else {
                $return_value = '|FAIL|Rejected data failed.|';
            }

    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
}


elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'approve_contract') {
    // <editor-fold defaultstate="collapsed" desc="delete_vehicle">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $purchasingId = $myDatabase->real_escape_string($_POST['modalPurchasingId']);

    $contractNo = $myDatabase->real_escape_string($_POST['contractNo']);
    // </editor-fold>

    if($purchasingId != '') {
        $sql = "update po_pks set final_status=1, contract_no='$contractNo' where purchasing_id = {$purchasingId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        $sql = "update contract c
                left join po_contract pc on pc.contract_id=c.contract_id
                left join po_pks pp on pp.po_pks_id=pc.po_pks_id
                set c.contract_no='$contractNo' where pp.purchasing_id = {$purchasingId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);


            if($result !== false) {
                $return_value = '|OK|Data has successfully Approved.|';
            } else {
                $return_value = '|FAIL|Approve data failed.|';
            }

    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_uom') {
    // <editor-fold defaultstate="collapsed" desc="delete_vehicle">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $uomId = $myDatabase->real_escape_string($_POST['uomId']);
    // </editor-fold>
    
    if($uomId != '') {
        $sql = "SELECT * FROM `master_item` WHERE uom_id = {$uomId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `uom` WHERE idUOM = {$uomId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|UOM has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete UOM failed.|';
            }
        } else {
            $return_value = '|FAIL|UOM in use in Master Item.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}


elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'item_data') {
    // <editor-fold defaultstate="collapsed" desc="vehicle_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $itemId = $myDatabase->real_escape_string($_POST['itemId']);
    $itemName = $myDatabase->real_escape_string($_POST['itemName']);
	$itemCode = $myDatabase->real_escape_string($_POST['itemCode']);
	$groupitemId = $myDatabase->real_escape_string($_POST['groupitemId']);
	$uom = $myDatabase->real_escape_string($_POST['uomId']);
	
    // </editor-fold>
    
    if ($itemId == '') {
        $boolNew = true;
    }
    
    if($itemName != '' && $itemCode != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `master_item` WHERE item_code = '{$itemCode}'";
        } else {
            $sql = "SELECT * FROM `master_item` WHERE item_code = '{$itemCode}' AND idmaster_item <> {$itemId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `master_item` (item_name, item_code, uom_id, group_itemid, entry_by, entry_date) VALUES ("
                        . "'{$itemName}','{$itemCode}','{$uom}',{$groupitemId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
               $sql = "UPDATE `master_item` SET "
                        . "item_name = '{$itemName}', "
						. "uom_id = '{$uom}', "
						. "group_itemid = '{$groupitemId}'"
                        . "WHERE idmaster_item = {$itemId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $itemId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Item has successfully inserted/updated.|'. $itemId .'|';
            } else {
                $return_value = '|FAIL|Insert/update Item failed.||';
            }
        } else {
            $return_value = '|FAIL|Item code already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'sign_data') {
    // <editor-fold defaultstate="collapsed" desc="vehicle_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $signId = $myDatabase->real_escape_string($_POST['signId']);
    $signName = $myDatabase->real_escape_string($_POST['signName']);
	$signJabatan = $myDatabase->real_escape_string($_POST['signJabatan']);
    // </editor-fold>
    
    if ($signId == '') {
        $boolNew = true;
    }
    
    if($signName != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `master_sign` WHERE name = '{$signName}'";
        } else {
            $sql = "SELECT * FROM `master_sign` WHERE name = '{$signName}' AND idmaster_sign <> {$signId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `master_sign` (`name`, `jabatan` , entry_by, entry_date) VALUES ("
                        . "'{$signName}','{$signJabatan}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `master_sign` SET "
                        . "name = '{$signName}', jabatan = '{$signJabatan}' "
                        . "WHERE idmaster_sign = {$signId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $signId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Sign has successfully inserted/updated.|'. $signId .'|';
            } else {
                $return_value = '|FAIL|Insert/update sign failed.||';
            }
        } else {
            $return_value = '|FAIL|Sign already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'uom_data') {
    // <editor-fold defaultstate="collapsed" desc="vehicle_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $uomId = $myDatabase->real_escape_string($_POST['uomId']);
    $uomName = $myDatabase->real_escape_string($_POST['uomName']);
    // </editor-fold>
    
    if ($uomId == '') {
        $boolNew = true;
    }
    
    if($uomName != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `uom` WHERE uom_type = '{$uomName}'";
        } else {
            $sql = "SELECT * FROM `uom` WHERE uom_type = '{$uomName}' AND iduom <> {$uomId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `uom` (`uom_type`, `entry_by`, `entry_date`) VALUES ("
                        . "'{$uomName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `uom` SET "
                        . "uom_type = '{$uomName}' "
                        . "WHERE iduom = {$uomId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $uomId = $myDatabase->insert_id;
                }

                $return_value = '|OK|UOM has successfully inserted/updated.|'. $uomId .'|';
            } else {
                $return_value = '|FAIL|Insert/update UOM failed.||';
            }
        } else {
            $return_value = '|FAIL|UOM already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}


elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'groupitem_data') {
    // <editor-fold defaultstate="collapsed" desc="vehicle_data">
    
    $return_value = '';
    $boolNew = false;
	
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $groupId = $myDatabase->real_escape_string($_POST['groupitemId']);
    $groupName = $myDatabase->real_escape_string($_POST['groupName']);
	$accountId = $myDatabase->real_escape_string($_POST['accountId']);
	//echo $groupId.$groupName.$accountId;
    // </editor-fold>
    
    if ($groupId == '') {
        $boolNew = true;
    }
    
    if($groupName != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `master_groupitem` WHERE UPPER(group_name) = UPPER('{$groupName}')";
        } else {
            $sql = "SELECT * FROM `master_groupitem` WHERE UPPER(group_name) = UPPER('{$groupName}') AND idmaster_groupitem <> {$groupId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `master_groupitem` (group_name, account_id , entry_by, entry_date) VALUES ("
                        . "'{$groupName}',{$accountId} , {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `master_groupitem` SET "
                        . "group_name = '{$groupName}' , account_id = {$accountId} "
                        . "WHERE idmaster_groupitem = {$groupId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $groupId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Group has successfully inserted/updated.|'. $groupId .'|';
            } else {
                $return_value = '|FAIL|Insert/update failed.|'. $sql .'|';
            }
        } else {
            $return_value = '|FAIL|Group already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
	
	
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'stockpile_handling_data') {
    // <editor-fold defaultstate="collapsed" desc="stockpile_freight_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $handlingCostId = $myDatabase->real_escape_string($_POST['handlingCostId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $vendorHandlingId = $myDatabase->real_escape_string($_POST['vendorHandlingId']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $paymentNotes = $myDatabase->real_escape_string($_POST['paymentNotes']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    // </editor-fold>
    
    if ($handlingCostId == '') {
        $boolNew = true;
    }
    
    if($vendorHandlingId != '' && $currencyId != '' && $price != '' && $vendorId != '') {
//        if($boolNew) {
//            $sql = "SELECT * FROM `freight_cost` WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId}";
//        } else {
//            $sql = "SELECT * FROM `freight_cost` WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId} AND freight_cost_id <> {$freightCostId}";
//        }
//        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//        if($result !== false && $result->num_rows == 0) {
        
        if($exchangeRate == '') {
            $exchangeRate = 1;
        }
        
        $priceConverted = $price * $exchangeRate;
        
            if($boolNew) {
                $sql = "INSERT INTO `vendor_handling_cost` (vendor_handling_id, stockpile_id, vendor_id, currency_id, exchange_rate, price, "
                        . "price_converted, payment_notes, remarks, company_id, entry_by, entry_date) VALUES ("
                        . "{$vendorHandlingId}, {$stockpileId}, {$vendorId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, "
                        . "'{$paymentNotes}', '{$remarks}', {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `vendor_handling_cost` SET "
                        . "vendor_handling_id = {$vendorHandlingId}, "
                        . "currency_id = {$currencyId}, "
                        . "exchange_rate = {$exchangeRate}, "
                        . "vendor_id = {$vendorId}, "
                        . "price = {$price}, "
                        . "price_converted = {$priceConverted}, "
                        . "payment_notes = '{$paymentNotes}', "
                        . "remarks = '{$remarks}', "
                        . "modify_by = {$_SESSION['userId']}, "
                        . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE handling_cost_id = {$handlingCostId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Handling cost has successfully inserted/updated.|';
            } else {
                $return_value = '|FAIL|Insert/update Handling cost failed.|';
				echo $sql;
            }
//        } else {
//            $return_value = '|FAIL|Freight cost already exists.|';
//        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_stockpile_handling') {
    // <editor-fold defaultstate="collapsed" desc="delete_stockpile_freight">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $handlingCostId = $myDatabase->real_escape_string($_POST['handlingCostId']);
    // </editor-fold>
    
    if($handlingCostId != '') {
        $sql = "SELECT * FROM `transaction` WHERE handling_cost_id = {$handlingCostId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `vendor_handling_cost` WHERE handling_cost_id = {$handlingCostId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Handling cost has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete handling cost failed.|';
            }
        } else {
            $return_value = '|FAIL|Handling cost in use in condition.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_vendor_handling') {
    // <editor-fold defaultstate="collapsed" desc="delete_freight">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorHandlingId = $myDatabase->real_escape_string($_POST['vendorHandlingId']);
    // </editor-fold>
    
    if($vendorHandlingId != '') {
        $sql = "SELECT * FROM `vendor_handling_cost` WHERE vendor_handling_id = {$vendorHandlingId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `vendor_handling` WHERE vendor_handling_id = {$vendorHandlingId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			
			$sql = "DELETE FROM `vendor_handling_bank` WHERE vendor_handling_id = {$vendorHandlingId}";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        

        if($result !== false) {
            $return_value = '|OK|User has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    

            if($result !== false) {
                $return_value = '|OK|Vendor Handling has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete Vendor Handling failed.|';
            }
        } else {
            $return_value = '|FAIL|Vendor Handling in use in stockpile handling cost.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'vendor_handling_data') {
    // <editor-fold defaultstate="collapsed" desc="freight_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorHandlingId = $myDatabase->real_escape_string($_POST['vendorHandlingId']);
    $vendorHandlingCode = $myDatabase->real_escape_string($_POST['vendorHandlingCode']);
    $vendorHandlingName = $myDatabase->real_escape_string($_POST['vendorHandlingName']);
    $vendorHandlingAddress = $myDatabase->real_escape_string($_POST['vendorHandlingAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
	$npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $bankName = '-';
	$branch = '-';
    $accountNo = '-';
    $beneficiary = '-';
    $swiftCode = '-';
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
	$active = $myDatabase->real_escape_string($_POST['active']);
	$nik = $myDatabase->real_escape_string($_POST['nik']);
	$vendorHandlingRule = $myDatabase->real_escape_string($_POST['vendorHandlingRule']);
    // </editor-fold>
    
    if ($vendorHandlingId == '') {
        $boolNew = true;
    }
    
    if($vendorHandlingCode != '' && $vendorHandlingName != '' && $vendorHandlingAddress != '' && $npwp != '' && $npwp_name != '' && $ppn != '' && $pph != '' && $active != '' && $vendorHandlingRule != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `vendor_handling` WHERE UPPER(vendor_handling_name) = UPPER('{$vendorHandlingName}') AND UPPER(vendor_handling_code) = UPPER('{$vendorHandlingCode}')";
        } else {
            $sql = "SELECT * FROM `vendor_handling` WHERE UPPER(vendor_handling_name) = UPPER('{$vendorHandlingName}') AND UPPER(vendor_handling_code) = UPPER('{$vendorHandlingCode}') AND vendor_handling_id <> {$vendorHandlingId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;
            
            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }
            
            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }
            
            if($boolNew) {
                $sql = "INSERT INTO `vendor_handling` (vendor_handling_code, vendor_handling_name, vendor_handling_address, nik, npwp, npwp_name, bank_name, branch, account_no, beneficiary, "
                        . "swift_code, ppn_tax_id, pph_tax_id, ppn, pph, active, vendor_handling_rule, entry_by, entry_date) VALUES ("
                        . "UPPER('{$vendorHandlingCode}'), '{$vendorHandlingName}', '{$vendorHandlingAddress}', '{$nik}','{$npwp}', '{$npwp_name}', '{$bankName}', '{$branch}', '{$accountNo}', "
                        . "'{$beneficiary}', '{$swiftCode}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$active}, {$vendorHandlingRule}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `vendor_handling` SET "
                        . "vendor_handling_code = UPPER('{$vendorHandlingCode}'), "
                        . "vendor_handling_name = '{$vendorHandlingName}', "
                        . "vendor_handling_address = '{$vendorHandlingAddress}', "
                        . "nik = '{$nik}', "
						. "npwp = '{$npwp}', "
						. "npwp_name = '{$npwp_name}', "
                        . "bank_name = '{$bankName}', "
						. "branch = '{$branch}', "
                        . "account_no = '{$accountNo}', "
                        . "beneficiary = '{$beneficiary}', "
                        . "swift_code = '{$swiftCode}', "
                        . "ppn_tax_id = {$ppn}, "
                        . "pph_tax_id = {$pph}, "
                        . "ppn = {$ppnValue}, "
                        . "pph = {$pphValue}, "
						. "active = {$active}, "
						. "vendor_handling_rule = {$vendorHandlingRule} "
                        . "WHERE vendor_handling_id = {$vendorHandlingId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $vendorHandlingId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Vendor Handling has successfully inserted/updated.|'. $vendorHandlingId .'|';
            } else {
                $return_value = '|FAIL|Insert/update Vendor Handling failed.||';
            }
        } else {
            $return_value = '|FAIL|Vendor Handling already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'dailyPks_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_customer_data">
    
    $return_value = '';
	//$boolShipment1 = false;
   
   	$sales_id = $myDatabase->real_escape_string($_POST['sales_id']);
	$stockpile_id = $myDatabase->real_escape_string($_POST['stockpile_id']);
    $screenedStock = str_replace(",", "", $myDatabase->real_escape_string($_POST['screenedStock']));
	$sprayedStock = str_replace(",", "", $myDatabase->real_escape_string($_POST['sprayedStock']));
    $unscreenedStock = str_replace(",", "", $myDatabase->real_escape_string($_POST['unscreenedStock']));
	$less_shipment = str_replace(",", "", $myDatabase->real_escape_string($_POST['less_shipment']));
	$less_local = str_replace(",", "", $myDatabase->real_escape_string($_POST['less_local']));
	$less_susut = str_replace(",", "", $myDatabase->real_escape_string($_POST['less_susut']));
	$notes = $myDatabase->real_escape_string($_POST['notes']);
	
	if($screenedStock == ''){
		$screenedStock = 0;
	}
	if($sprayedStock == ''){
		$sprayedStock = 0;
	}
	if($unscreenedStock == ''){
		$unscreenedStock = 0;
	}
	if($less_shipment == ''){
		$less_shipment = 0;
	}
	if($less_local == ''){
		$less_local = 0;
	}
	if($less_susut == ''){
		$less_susut = 0;
	}
	
    if($sales_id != '') {
		
	
				
            $sql = "INSERT INTO `sales_add` (sales_id, stockpile_id, screened_stock, sprayed_stock, unscreened_stock, less_shipment, less_local, less_susut, notes, entry_by, entry_date) VALUES ({$sales_id},  {$stockpile_id}, {$screenedStock}, {$sprayedStock}, {$unscreenedStock}, {$less_shipment}, {$less_local}, {$less_susut}, '{$notes}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $jurnalId = $myDatabase->insert_id;
                
                $return_value = '|OK|Data has successfully inserted.||';
				
				
				
            } else {
                $return_value = '|FAIL|Insert Data failed.||';
	
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    } 
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_dailyPks') {
    // <editor-fold defaultstate="collapsed" desc="delete_user">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $sales_add_id = $myDatabase->real_escape_string($_POST['sales_add_id']);
    // </editor-fold>
    
    if($sales_add_id != '') {
		
		
        $sql = "DELETE FROM `sales_add` WHERE sales_add_id = {$sales_add_id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|User has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_payment_detail') {
    // <editor-fold defaultstate="collapsed" desc="delete_user">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $payment_cash_id = $myDatabase->real_escape_string($_POST['payment_cash_id']);
    // </editor-fold>
    
    if($payment_cash_id != '') {
		
		$sql = "SELECT GROUP_CONCAT(payment_cash_dp) AS pc_dp FROM payment_cash_dp WHERE payment_cash_id = {$payment_cash_id}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($result !== false && $result->num_rows == 1) {
                $row = $result->fetch_object();
                $pcDp = $row->pc_dp;
            }
		
		$sql = "UPDATE payment_cash SET payment_cash_dp = NULL, payment_cash_status = 0 WHERE payment_cash_id = {$pcDp}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
        $sql = "DELETE FROM `payment_cash` WHERE payment_cash_id = {$payment_cash_id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|Data has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete data failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_payment_cash') {
    // <editor-fold defaultstate="collapsed" desc="delete_user">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentId = $myDatabase->real_escape_string($_POST['paymentId']);
    // </editor-fold>
    
    if($paymentId != '') {
		
        $sql = "DELETE FROM `payment` WHERE payment_id = {$paymentId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|Data has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete data failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'payment_cash') {
    // <editor-fold defaultstate="collapsed" desc="transaction_customer_data">
    
    $return_value = '';
	$boolShipment1 = false;
    //$grandTotal = 0;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	$pcMethod = $myDatabase->real_escape_string($_POST['pcMethod']);
    $paymentCashType = $myDatabase->real_escape_string($_POST['paymentCashType']);
    $accountId11 = $myDatabase->real_escape_string($_POST['accountId11']);
	$generalVendorId11 = $myDatabase->real_escape_string($_POST['generalVendorId11']);
    $shipmentId11 = $myDatabase->real_escape_string($_POST['shipmentId11']);
	$transaction_id = $myDatabase->real_escape_string($_POST['transaction_id']);
    $stockpileId11 = $myDatabase->real_escape_string($_POST['stockpileId11']);
	$qty11 = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty11']));
	$price11 = str_replace(",", "", $myDatabase->real_escape_string($_POST['price11']));
	$termin11 = str_replace(",", "", $myDatabase->real_escape_string($_POST['termin11']));
	$amount11 = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount11']));
	$currencyId11 = $myDatabase->real_escape_string($_POST['currencyId11']);
	$exchangeRate11 = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate11']));
	$ppn11 = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn11']));
	//$pph11 = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph11']));
	$pph12 = $myDatabase->real_escape_string($_POST['pph12']);
	$ppn12 = $myDatabase->real_escape_string($_POST['ppn12']);
	$pphID11 = $myDatabase->real_escape_string($_POST['pphTaxId']);
	$ppnID11 = $myDatabase->real_escape_string($_POST['ppnID11']);
	$grandTotal11 = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal11']));
	$DP = $grandTotal11;
	$notes11 = $myDatabase->real_escape_string($_POST['notes11']);
	$paymentCashMethod = $myDatabase->real_escape_string($_POST['payment_cash_method']);
	$slipNos = "";
	$slipNos2 = "";
    // </editor-fold>
     if($shipmentId11 == ''){
		$shipmentId11 = 'NULL';
	}else{
		$sqlSales = "SELECT sales_id FROM sales WHERE shipment_id = {$shipmentId1}";
			$resultSales = $myDatabase->query($sqlSales, MYSQLI_STORE_RESULT);
			if($resultSales !== false && $resultSales->num_rows > 0) {
       			 $rowSales = $resultSales->fetch_object();
       				$salesId = $rowSales->sales_id;
					
					$sqlStatus = "UPDATE sales SET " 
        				. "used_status = 1 "
                        . " WHERE sales_id = {$salesId}";
					$resultStatus = $myDatabase->query($sqlStatus, MYSQLI_STORE_RESULT);
			}
		
	}
	
	if($stockpileId11 == ''){
		$stockpileId11 = 'NULL';
	}
	
	if($transaction_id == ''){
		$transaction_id = 'NULL';
	}
	
	if($exchangeRate11 == ''){
		$exchangeRate11 = 1;
	}
	
	if($pph12 != 0 ){
		$sqlPPH = "SELECT tax_value FROM tax WHERE tax_id = {$pphID11}";
			$resultPPH = $myDatabase->query($sqlPPH, MYSQLI_STORE_RESULT);
			if($resultPPH !== false && $resultPPH->num_rows > 0) {
       			 $rowPPH = $resultPPH->fetch_object();
       				$pph1 = $rowPPH->tax_value;
					$dp_pph = $DP * ($pph1/100);
			}
		}else{
			$dp_pph = 0;
		}
		if($ppn12 != 0 ){
		$sqlPPN = "SELECT tax_value FROM tax WHERE tax_id = {$ppnID11}";
			$resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
			if($resultPPN !== false && $resultPPN->num_rows > 0) {
       			 $rowPPN = $resultPPN->fetch_object();
       				$ppn1 = $rowPPN->tax_value;
					$dp_ppn = $DP * ($ppn1/100);
			}
		}else{
			$dp_ppn = 0;
		}

			$dp_total = ($DP + $dp_ppn) - $dp_pph;
			
			
		$pph11 = 0;	
		if($pphID11 != 0){
			$sqlP = "SELECT tax_value FROM tax WHERE tax_id = {$pphID11}";
			$resultP = $myDatabase->query($sqlP, MYSQLI_STORE_RESULT);
			if($resultP !== false && $resultP->num_rows > 0) {
       			 $rowP= $resultP->fetch_object();
       				$pphTax = $rowP->tax_value;
					
					$pph11 = $amount11 * ($pphTax/100);
			}
		}
		
		if($pcMethod == 1){
				$amount12 = $amount11 * -1;
				$ppn12 = $ppn11 * -1;
				$pph12 = $pph11 * -1;
			}else{
				$amount12 = $amount11;
				$ppn12 = $ppn11;
				$pph12 = $pph11;
			}
			
		$sqlShipment = "SELECT account_no FROM account WHERE account_id = {$accountId11}";
			$resultShipment = $myDatabase->query($sqlShipment, MYSQLI_STORE_RESULT);
			if($resultShipment !== false && $resultShipment->num_rows > 0) {
       			 $rowShipment = $resultShipment->fetch_object();
       				$acc = $rowShipment->account_no;
					$sub_acc = substr($acc,0,2);
			}
				
			if($sub_acc == 51 && $shipmentId11 == 'NULL'){
						$boolShipment1 = false;
						//echo $sub_acc;
			 } else{
				 		$boolShipment1 = true;
						//echo 'SALAH';
			 }
	
	
    if($paymentCashType != '' && $accountId11 != '' && $qty11 != '' && $price11 != '' && $termin11 != '' && $amount11 != '' && $currencyId11 != '' && $boolShipment1) {
			$t_amount = $amount12 + $ppn12 - $pph12; 
            $tamount = $t_amount - $DP ;
			$amountConverted = $exchangeRate11 * $amount12;
			$ppnConverted = $exchangeRate11 * $ppn12;
			$pphConverted = $exchangeRate11 * $pph12;
			$tamountConverted = $exchangeRate11 * $tamount;
			
			if($paymentCashMethod == 2){
			$dpAmount = $tamountConverted;
			}else{
			$dpAmount = 0;
			}
			
			if (isset($_POST['checkedSlips'])) {
                    $checks = $_POST['checkedSlips'];
                    for ($i = 0; $i < sizeof($checks); $i++) {
                        if($slipNos == '') {
                            $slipNos .= $checks[$i];
                        } else {
                            $slipNos .= ','. $checks[$i];
                        }
                    }
                }
				
			
				
            $sql = "INSERT INTO `payment_cash` (type, account_id, general_vendor_id, transaction_id, shipment_id, stockpile_remark, qty, price, termin, amount, amount_converted, currency_id, exchange_rate, ppnID, ppn, ppn_converted, pphID, pph, pph_converted, tamount, tamount_converted, notes, entry_by, entry_date) VALUES ("
                    . " {$paymentCashType}, {$accountId11}, {$generalVendorId11}, {$transaction_id}, {$shipmentId11}, {$stockpileId11}, '{$qty11}', '{$price11}', '{$termin11}', '{$amount12}', '{$amountConverted}', {$currencyId11}, '{$exchangeRate11}', {$ppnID11} ,'{$ppn12}', '{$ppnConverted}', {$pphID11}, '{$pph12}', '{$pphConverted}', '{$tamount}', '{$tamountConverted}', '{$notes11}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $paymentCashId = $myDatabase->insert_id;
                
                $return_value = '|OK|Data has successfully inserted.||';
				
				/*$sql = "UPDATE `payment_cash` SET payment_cash_dp = {$paymentCashId} WHERE payment_cash_id IN ($slipNos)";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/
					
				//$sql = "UPDATE `payment_cash` SET payment_cash_status = 1 WHERE payment_cash_id IN ($slipNos)";
                    //$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
				if(isset($_POST['checkedSlips2'])){
					 $checks2 = $_POST['checkedSlips2'];
					if (isset($_POST['checkedSlips'])) {
						$checks = $_POST['checkedSlips'];
					}else{
						$checks = '';
					}
				
				for ($i = 0; $i < sizeof($checks2); $i++) {
						if($checks[$i] != ''){
							if($slipNos2 == '') {
                            $slipNos2 .= '('. $paymentCashId .','. $checks[$i] .','. $checks2[$i] .')';
                        } else {
                            $slipNos2 .= ','. '('. $paymentCashId .','. $checks[$i] .','. $checks2[$i] .')';
                        }
						}
					}
				}
			echo $slipNos2;
			$sql = "INSERT INTO payment_cash_dp (payment_cash_id, payment_cash_dp, amount_payment) VALUES {$slipNos2}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
					if($result === false) {
						echo 'salah';
					}
			
            
				
			//insertGeneralLedger($myDatabase, 'INVOICE DETAIL', $invoiceId);
				
            } else {
                $return_value = '|FAIL|Insert Data failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    } 
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_user') {
    // <editor-fold defaultstate="collapsed" desc="delete_user">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $userId = $myDatabase->real_escape_string($_POST['userId']);
    // </editor-fold>
    
    if($userId != '') {
        $sql = "DELETE FROM `user_module` WHERE user_id = {$userId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        $sql = "DELETE FROM `user_stockpile` WHERE user_id = {$userId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        $sql = "DELETE FROM `user` WHERE user_id = {$userId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|User has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'user_data') {
    // <editor-fold defaultstate="collapsed" desc="user_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $userId = $myDatabase->real_escape_string($_POST['userId']);
    $userEmail = $myDatabase->real_escape_string($_POST['userEmail']);
    $userPassword = $myDatabase->real_escape_string($_POST['userPassword']);
    $confirmPassword = $myDatabase->real_escape_string($_POST['confirmPassword']);
    $userName = $myDatabase->real_escape_string($_POST['userName']);
    $userPhone = $myDatabase->real_escape_string($_POST['userPhone']);
    $active = $myDatabase->real_escape_string($_POST['active']);
	$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    // </editor-fold>
    
    if ($userId == '') {
        $boolNew = true;
    }
    
    if($userPassword == $confirmPassword) {
        if($userEmail != '' && $userPassword != '' && $userName != '' && $active != '' && $stockpileId != '') {
            if($boolNew) {
                $sql = "SELECT * FROM `user` WHERE UPPER(user_email) = UPPER('{$userEmail}')";
            } else {
                $sql = "SELECT * FROM `user` WHERE UPPER(user_email) = UPPER('{$userEmail}') AND user_id <> {$userId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            
            if($result !== false && $result->num_rows == 0) {
                $salt = bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM));
                $saltedPW =  trim($userPassword) . $salt;
                $hashedPW = hash('sha256', $saltedPW);
                
                if($boolNew) {
                    $sql = "INSERT INTO `user` (user_email, user_password, user_name, user_phone, active, user_salt, stockpile_id, entry_by, entry_date) VALUES ("
                            . "LOWER('{$userEmail}'), '{$hashedPW}', '{$userName}', '{$userPhone}', {$active}, '{$salt}', {$stockpileId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                } else {
                    $sql = "UPDATE `user` SET "
                            . "user_email = LOWER('{$userEmail}'), "
                            . "user_password = '{$hashedPW}', "
                            . "user_name = '{$userName}', "
                            . "user_phone = '{$userPhone}', "
                            . "active = {$active},"
                            . "user_salt = '{$salt}', "
							. "stockpile_id = '{$stockpileId}' "
                            . "WHERE user_id = {$userId}";
                }
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                
                if($result !== false) {
                    if($boolNew) {
                        $userId = $myDatabase->insert_id;
                    }
                    
                    $return_value = '|OK|User has successfully inserted/updated.|'. $userId .'|';
                } else {
                    $return_value = '|FAIL|Insert/update user failed.||';
                }
            } else {
                $return_value = '|FAIL|Email already exists.||';
            }
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    } else {
        $return_value = '|FAIL|Confirm password is not valid.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

if (isset($_REQUEST['action']) && $_REQUEST['action'] == 'changePass') {
    // <editor-fold defaultstate="collapsed" desc="Login">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $userPassword = $myDatabase->real_escape_string($_POST['userPassword']);
    // </editor-fold>
    
    if($userPassword != '') {
				$salt = bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM));
                $saltedPW =  trim($userPassword) . $salt;
                $hashedPW = hash('sha256', $saltedPW);
				
		$sql = "UPDATE `user` SET "                            
                            . "user_password = '{$hashedPW}', "
							. "change_password = 0, "
							. "user_salt = '{$salt}' "							
                            . "WHERE user_id = {$_SESSION['userId']}";
                
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                
                if($result !== false) {
                    if($boolNew) {
                        $userId = $myDatabase->insert_id;
                    }
                    
                    $return_value = '|OK|Password has successfully updated.|'. $userId .'|';
                } else {
                    $return_value = '|FAIL|Update password failed.||';
                }				
    } else {
        $return_value = '|FAIL|Password can not be empty.|';
    }    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'user_module_data') {
    // <editor-fold defaultstate="collapsed" desc="user_module_data">
    
    $return_value = '';
    $selectedCheck = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $userId = $myDatabase->real_escape_string($_POST['userId']);
    // </editor-fold>
    
    if (isset($_POST['checks'])) {
        $checks = $_POST['checks'];
        for ($i = 0; $i < sizeof($checks); $i++) {
            $moduleId = $checks[$i];

            $sql = "SELECT * FROM user_module
                    WHERE user_id = {$userId}
                    AND module_id = {$moduleId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if ($result !== false && $result->num_rows == 0) {
                $sql = "INSERT INTO user_module (user_id, module_id) VALUES (
                        {$userId}, $moduleId)";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }

            if ($selectedCheck == '') {
                $selectedCheck .= $moduleId;
            } else {
                $selectedCheck .= ', ' . $moduleId;
            }
        }
        
        if ($selectedCheck != '') {
            $sql = "DELETE FROM user_module
                    WHERE user_id = {$userId}
                    AND module_id NOT IN ({$selectedCheck})";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        }
        $return_value = '|OK|User privilege(s) updated successfully.|';
    } else {
        $return_value = '|FAIL|Please choose at least 1 privilege.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_user_stockpile') {
    // <editor-fold defaultstate="collapsed" desc="delete_user_stockpile">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $userStockpileId = $myDatabase->real_escape_string($_POST['userStockpileId']);
    // </editor-fold>
    
    if ($userStockpileId != '') {
        $sql = "DELETE FROM user_stockpile WHERE user_stockpile_id = {$userStockpileId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Stockpile deleted successfully.|';
        } else {
            $return_value = '|FAIL|Failed deleting stockpiles.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'user_stockpile_data') {
    // <editor-fold defaultstate="collapsed" desc="user_stockpile_data">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $userId = $myDatabase->real_escape_string($_POST['modalUserId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    // </editor-fold>
    
    if ($userId != '' && $stockpileId != '') {
        $sql = "INSERT INTO user_stockpile (user_id, stockpile_id) VALUES ({$userId}, {$stockpileId})";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Stockpile added successfully.|';
        } else {
            $return_value = '|FAIL|Failed adding stockpiles.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_vh_bank') {
    // <editor-fold defaultstate="collapsed" desc="delete_user_stockpile">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vhBankId = $myDatabase->real_escape_string($_POST['vhBankId']);
    // </editor-fold>
    
    if ($vhBankId != '') {
        $sql = "DELETE FROM vendor_handling_bank WHERE vh_bank_id = {$vhBankId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Bank deleted successfully.|';
        } else {
            $return_value = '|FAIL|Failed deleting Bank.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'general_vendor_bank_data') {
    // <editor-fold defaultstate="collapsed" desc="user_stockpile_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $generalVendorId = $myDatabase->real_escape_string($_POST['modalGeneralVendorId']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
	$branch = $myDatabase->real_escape_string($_POST['branch']);
	$accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
	$beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
	$swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
  $masterBankId = $myDatabase->real_escape_string($_POST['masterBank']);
  $gvBankId = $myDatabase->real_escape_string($_POST['gvBankId']);
    // </editor-fold>
	if ($gvBankId == '') {
        $boolNew = true;
    }

    if ($generalVendorId != '' && $bankName != '' && $branch != '' && $accountNo != '' && $beneficiary != '') {
		if($boolNew){
        $sql = "INSERT INTO general_vendor_bank (general_vendor_id, bank_name, branch, account_no, beneficiary, swift_code,master_bank_id)
                VALUES ({$generalVendorId}, '{$bankName}', '{$branch}', '{$accountNo}', '{$beneficiary}', '{$swiftCode}',{$masterBankId} )";
		} else {
                $sql = "UPDATE `general_vendor_bank` SET "
                        . "bank_name = '{$bankName}', "
                        . "branch = '{$branch}', "
						. "account_no = '{$accountNo}', "
						. "beneficiary = '{$beneficiary}', "
						. "swift_code = '{$swiftCode}', "
                        . "master_bank_id = {$masterBankId} "
                        . "WHERE gv_bank_id = {$gvBankId}";
            }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|Bank added successfully.|';
        } else {
            $return_value = '|FAIL|Failed adding Bank.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'labor_bank_data') {
    // <editor-fold defaultstate="collapsed" desc="user_stockpile_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $laborId = $myDatabase->real_escape_string($_POST['modalLaborId']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
	$branch = $myDatabase->real_escape_string($_POST['branch']);
	$accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
	$beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
	$swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
  $masterBankId = $myDatabase->real_escape_string($_POST['masterBank']);
  $lBankId = $myDatabase->real_escape_string($_POST['lBankId']);
    // </editor-fold>
	
	if ($lBankId == '') {
        $boolNew = true;
    }

    if ($laborId != '' && $bankName != '' && $branch != '' && $accountNo != '' && $beneficiary != '') {
		if($boolNew){
        $sql = "INSERT INTO labor_bank (labor_id, bank_name, branch, account_no, beneficiary, swift_code,master_bank_id)
        VALUES ({$laborId}, '{$bankName}', '{$branch}', '{$accountNo}', '{$beneficiary}', '{$swiftCode}',$masterBankId )";
		} else {
                $sql = "UPDATE `labor_bank` SET "
                        . "bank_name = '{$bankName}', "
                        . "branch = '{$branch}', "
						. "account_no = '{$accountNo}', "
						. "beneficiary = '{$beneficiary}', "
						. "swift_code = '{$swiftCode}', "
                        . "master_bank_id = {$masterBankId} "
                        . "WHERE l_bank_id = {$lBankId}";
            }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|Bank added successfully.|';
        } else {
            $return_value = '|FAIL|Failed adding Bank.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'vh_bank_data') {
    // <editor-fold defaultstate="collapsed" desc="user_stockpile_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
	$vhBankId = $myDatabase->real_escape_string($_POST['vhBankId']);
    $vendorHandlingId = $myDatabase->real_escape_string($_POST['modalVendorHandlingId']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
	$branch = $myDatabase->real_escape_string($_POST['branch']);
	$accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
	$beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
	$swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
	$swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
	$masterBankId = $myDatabase->real_escape_string($_POST['masterBank']);
    // </editor-fold>
	
	if ($vhBankId == '') {
        $boolNew = true;
    }

    if ($vendorHandlingId != '' && $bankName != '' && $branch != '' && $accountNo != '' && $beneficiary != ''&& $masterBankId != '') {
		if($boolNew){
        $sql = "INSERT INTO vendor_handling_bank (vendor_handling_id, bank_name, branch, account_no, beneficiary, swift_code,master_bank_id)
                VALUES ({$vendorHandlingId}, '{$bankName}', '{$branch}', '{$accountNo}', '{$beneficiary}', '{$swiftCode}',{$masterBankId} )";
		} else {
                $sql = "UPDATE `vendor_handling_bank` SET "
                        . "bank_name = '{$bankName}', "
                        . "branch = '{$branch}', "
						. "account_no = '{$accountNo}', "
						. "beneficiary = '{$beneficiary}', "
						. "swift_code = '{$swiftCode}', "
                        . "master_bank_id = {$masterBankId} "
                        . "WHERE vh_bank_id = {$vhBankId}";
            }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|Bank added successfully.|';
        } else {
            $return_value = '|FAIL|Failed adding Bank.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'v_bank_data') {
    // <editor-fold defaultstate="collapsed" desc="user_stockpile_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['modalVendorId']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
	$branch = $myDatabase->real_escape_string($_POST['branch']);
	$accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
	$beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
	$swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
  $masterBankId = $myDatabase->real_escape_string($_POST['masterBank']);
  $vBankId = $myDatabase->real_escape_string($_POST['vBankId']);
    // </editor-fold>

	if ($vBankId == '') {
        $boolNew = true;
    }
	
    if ($vendorId != '' && $bankName != '' && $branch != '' && $accountNo != '' && $beneficiary != '') {
		if($boolNew){
        $sql = "INSERT INTO vendor_bank (vendor_id, bank_name, branch, account_no, beneficiary, swift_code,master_bank_id)
            VALUES ({$vendorId}, '{$bankName}', '{$branch}', '{$accountNo}', '{$beneficiary}', '{$swiftCode}',$masterBankId )";
			
		} else {
                $sql = "UPDATE `vendor_bank` SET "
                        . "bank_name = '{$bankName}', "
                        . "branch = '{$branch}', "
						. "account_no = '{$accountNo}', "
						. "beneficiary = '{$beneficiary}', "
						. "swift_code = '{$swiftCode}', "
                        . "master_bank_id = {$masterBankId} "
                        . "WHERE v_bank_id = {$vBankId}";
            }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|Bank added successfully.|';
        } else {
            $return_value = '|FAIL|Failed adding Bank.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'freight_bank_data') {
    // <editor-fold defaultstate="collapsed" desc="user_stockpile_data">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightId = $myDatabase->real_escape_string($_POST['modalFreightId']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
	$branch = $myDatabase->real_escape_string($_POST['branch']);
	$accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
	$beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
	$swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
	$masterBankId = $myDatabase->real_escape_string($_POST['masterBank']);
	$fBankId = $myDatabase->real_escape_string($_POST['fBankId']);
    // </editor-fold>
	
	if ($fBankId == '') {
        $boolNew = true;
    }

    if ($freightId != '' && $bankName != '' && $branch != '' && $accountNo != '' && $beneficiary != '') {
		
		if($boolNew){
        $sql = "INSERT INTO freight_bank (freight_id, bank_name, branch, account_no, beneficiary, swift_code,master_bank_id)
        VALUES ({$freightId}, '{$bankName}', '{$branch}', '{$accountNo}', '{$beneficiary}', '{$swiftCode}',$masterBankId )";
		} else {
                $sql = "UPDATE `freight_bank` SET "
                        . "bank_name = '{$bankName}', "
                        . "branch = '{$branch}', "
						. "account_no = '{$accountNo}', "
						. "beneficiary = '{$beneficiary}', "
						. "swift_code = '{$swiftCode}', "
                        . "master_bank_id = {$masterBankId} "
                        . "WHERE f_bank_id = {$fBankId}";
            }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|Bank added successfully.|';
        } else {
            $return_value = '|FAIL|Failed adding Bank.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }

    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_module') {
    // <editor-fold defaultstate="collapsed" desc="delete_module">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $moduleId = $myDatabase->real_escape_string($_POST['moduleId']);
    // </editor-fold>
    
    if($moduleId != '') {
        $sql = "DELETE FROM `user_module` WHERE module_id = {$moduleId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        $sql = "DELETE FROM `module` WHERE module_id = {$moduleId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|Module has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'module_data') {
    // <editor-fold defaultstate="collapsed" desc="module_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $moduleId = $myDatabase->real_escape_string($_POST['moduleId']);
    $moduleName = $myDatabase->real_escape_string($_POST['moduleName']);
    $moduleDescription = $myDatabase->real_escape_string($_POST['moduleDescription']);
    $active = $myDatabase->real_escape_string($_POST['active']);
    // </editor-fold>
    
    if ($moduleId == '') {
        $boolNew = true;
    }
    
    if($moduleName != '' && $active != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `module` WHERE UPPER(module_name) = UPPER('{$moduleName}')";
        } else {
            $sql = "SELECT * FROM `module` WHERE UPPER(module_name) = UPPER('{$moduleName}') AND module_id <> {$moduleId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `module` (module_name, module_description, active, entry_by, entry_date) VALUES ("
                        . "'{$moduleName}', '{$moduleDescription}', {$active}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `module` SET "
                        . "module_name = '{$moduleName}', "
                        . "module_description = '{$moduleDescription}', "
                        . "active = {$active} "
                        . "WHERE module_id = {$moduleId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $moduleId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Module has successfully inserted/updated.|'. $moduleId .'|';
            } else {
                $return_value = '|FAIL|Insert/update module failed.||';
            }
        } else {
            $return_value = '|FAIL|Module already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_invoice_data') {
    // <editor-fold defaultstate="collapsed" desc="module_data">
    
    $return_value = '';
    //$boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	$invoiceId = $myDatabase->real_escape_string($_POST['invoiceId']);
	$invoiceNo = $myDatabase->real_escape_string($_POST['invoiceNo']);
   // $invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
    $originalInvoiceNo = $myDatabase->real_escape_string($_POST['originalInvoiceNo']);
    $taxInvoiceNo = $myDatabase->real_escape_string($_POST['taxInvoiceNo']);
    $taxInvoiceDate = $myDatabase->real_escape_string($_POST['taxInvoiceDate']);
    // </editor-fold>
    
    //if ($moduleId == '') {
    //    $boolNew = true;
    //}
    
    if($invoiceId != '' ) {
        
                $sql = "UPDATE invoice SET "
                       // . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                        . "invoice_no2 = '{$originalInvoiceNo}', "
                        . "invoice_tax = '{$taxInvoiceNo}', "
						. "tax_date = STR_TO_DATE('{$taxInvoiceDate}', '%d/%m/%Y') "
                        . "WHERE invoice_id = {$invoiceId}";
            
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                

                $return_value = '|OK|Successfully Updated.|'. $invoiceId .'|';
            } else {
                $return_value = '|FAIL|Update Failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_payment_data') {
    // <editor-fold defaultstate="collapsed" desc="module_data">
    
    $return_value = '';
    //$boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	$paymentId = $myDatabase->real_escape_string($_POST['paymentId']);
	$paymentNo = $myDatabase->real_escape_string($_POST['paymentNo']);
	//$paymentDate = $myDatabase->real_escape_string($_POST['paymentDate']);
	$invoiceNo = $myDatabase->real_escape_string($_POST['invoiceNo']);
    $invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
    $taxInvoiceNo = $myDatabase->real_escape_string($_POST['taxInvoiceNo']);
    $taxInvoiceDate = $myDatabase->real_escape_string($_POST['taxInvoiceDate']);
    // </editor-fold>
    
    //if ($moduleId == '') {
    //    $boolNew = true;
    //}
    
    if($paymentId != '' ) {
        
                $sql = "UPDATE payment SET "
						//. "payment_date = STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), "
						. "invoice_no = '{$invoiceNo}', "
                        . "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
                        . "tax_invoice = '{$taxInvoiceNo}', "
						. "tax_invoice_date = STR_TO_DATE('{$taxInvoiceDate}', '%d/%m/%Y') "
                        . "WHERE payment_id = {$paymentId}";
            
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                

                $return_value = '|OK|Successfully Updated.|'. $paymentId .'|';
            } else {
                $return_value = '|FAIL|Update Failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_freight') {
    // <editor-fold defaultstate="collapsed" desc="delete_freight">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    // </editor-fold>
    
    if($freightId != '') {
        $sql = "SELECT * FROM `freight_cost` WHERE freight_id = {$freightId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `freight` WHERE freight_id = {$freightId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Freight has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete freight failed.|';
            }
        } else {
            $return_value = '|FAIL|Freight in use in stockpile freight cost.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'freight_data') {
    // <editor-fold defaultstate="collapsed" desc="freight_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    $freightCode = $myDatabase->real_escape_string($_POST['freightCode']);
    $freightSupplier = $myDatabase->real_escape_string($_POST['freightSupplier']);
    $freightAddress = $myDatabase->real_escape_string($_POST['freightAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
	$npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
	$branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
	$active = $myDatabase->real_escape_string($_POST['active']);
	$freightRule = $myDatabase->real_escape_string($_POST['freightRule']);
	$nik = $myDatabase->real_escape_string($_POST['nik']);
    // </editor-fold>
    
    if ($freightId == '') {
        $boolNew = true;
    }
    
    if($freightCode != '' && $freightSupplier != '' && $freightAddress != '' && $npwp != '' && $npwp_name != '' && $ppn != '' && $pph != '' && $active != '' && $freightRule != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `freight` WHERE UPPER(freight_supplier) = UPPER('{$freightSupplier}') AND UPPER(freight_code) = UPPER('{$freightCode}')";
        } else {
            $sql = "SELECT * FROM `freight` WHERE UPPER(freight_supplier) = UPPER('{$freightSupplier}') AND UPPER(freight_code) = UPPER('{$freightCode}') AND freight_id <> {$freightId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;
            
            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }
            
            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }
            
            if($boolNew) {
                $sql = "INSERT INTO `freight` (freight_code, freight_supplier, freight_address, nik, npwp, npwp_name, bank_name, branch, account_no, beneficiary, "
                        . "swift_code, ppn_tax_id, pph_tax_id, ppn, pph, active, freight_rule, entry_by, entry_date) VALUES ("
                        . "UPPER('{$freightCode}'), '{$freightSupplier}', '{$freightAddress}', '{$nik}', '{$npwp}', '{$npwp_name}', '{$bankName}', '{$branch}', '{$accountNo}', "
                        . "'{$beneficiary}', '{$swiftCode}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$active}, {$freightRule}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `freight` SET "
                        . "freight_code = UPPER('{$freightCode}'), "
                        . "freight_supplier = '{$freightSupplier}', "
                        . "freight_address = '{$freightAddress}', "
						. "nik = '{$nik}', "
                        . "npwp = '{$npwp}', "
						. "npwp_name = '{$npwp_name}', "
                        . "bank_name = '{$bankName}', "
						. "branch = '{$branch}', "
                        . "account_no = '{$accountNo}', "
                        . "beneficiary = '{$beneficiary}', "
                        . "swift_code = '{$swiftCode}', "
                        . "ppn_tax_id = {$ppn}, "
                        . "pph_tax_id = {$pph}, "
                        . "ppn = {$ppnValue}, "
                        . "pph = {$pphValue}, "
						. "active = {$active}, "
						. "freight_rule = {$freightRule} "
                        . "WHERE freight_id = {$freightId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $freightId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Freight has successfully inserted/updated.|'. $freightId .'|';
            } else {
                $return_value = '|FAIL|Insert/update freight failed.||';
            }
        } else {
            $return_value = '|FAIL|Freight supplier and vendor already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}



elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_vendor') {
    // <editor-fold defaultstate="collapsed" desc="delete_vendor">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    // </editor-fold>
    
    if($vendorId != '') {
        $contractCount = 0;
        $freightCount = 0;
        
        $sql = "SELECT * FROM `contract` WHERE vendor_id = {$vendorId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $contractCount = $result->num_rows;
        
        $sql = "SELECT * FROM `freight` WHERE vendor_id = {$vendorId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $freightCount = $result->num_rows;
        
        if($contractCount == 0 && $freightCount == 0) {
            $sql = "DELETE FROM `vendor` WHERE vendor_id = {$vendorId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Vendor has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete vendor failed.|';
            }
        } else {
            $return_value = '|FAIL|Vendor in use in freight and contract.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'vendor_data') {
    // <editor-fold defaultstate="collapsed" desc="vendor_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    $vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
	$npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $bankName = '-';
	$branch = '-';
    $accountNo = '-';
    $beneficiary = '-';
    $swiftCode = '-';
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
	$active = $myDatabase->real_escape_string($_POST['active']);
	$nik = $myDatabase->real_escape_string($_POST['nik']);
    // </editor-fold>
    
    if ($vendorId == '') {
        $boolNew = true;
    }
    
    if($vendorCode != '' && $vendorName != '' && $vendorAddress != '' && $npwp != '' && $npwp_name != '' && $ppn != '' && $pph != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$vendorCode}')";
        } else {
            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$vendorCode}') AND vendor_id <> {$vendorId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;
            
            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }
            
            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }
            
            if($boolNew) {
                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, nik, npwp, npwp_name, bank_name, branch, account_no, beneficiary, "
                        . "swift_code, ppn_tax_id, pph_tax_id, ppn, pph, active, entry_by, entry_date) VALUES ("
                        . "UPPER('{$vendorCode}'), '{$vendorName}', '{$vendorAddress}', '{$nik}', '{$npwp}', '{$npwp_name}', '{$bankName}', '{$branch}', '{$accountNo}', "
                        . "'{$beneficiary}', '{$swiftCode}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$active}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `vendor` SET "
                        . "vendor_code = UPPER('{$vendorCode}'), "
                        . "vendor_name = '{$vendorName}', "
                        . "vendor_address = '{$vendorAddress}', "
						. "nik = '{$nik}', "
                        . "npwp = '{$npwp}', "
						. "npwp_name = '{$npwp_name}', "
                        . "bank_name = '{$bankName}', "
						. "branch = '{$branch}', "
                        . "account_no = '{$accountNo}', "
                        . "beneficiary = '{$beneficiary}', "
                        . "swift_code = '{$swiftCode}', "
                        . "ppn_tax_id = {$ppn}, "
                        . "pph_tax_id = {$pph}, "
                        . "ppn = {$ppnValue}, "
                        . "pph = {$pphValue}, "
						. "active = {$active} "
                        . "WHERE vendor_id = {$vendorId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $vendorId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Vendor has successfully inserted/updated.|'. $vendorId .'|';
            } else {
                $return_value = '|FAIL|Insert/update vendor failed.||';
            }
        } else {
            $return_value = '|FAIL|Vendor code already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'general_vendor_pph') {
    // <editor-fold defaultstate="collapsed" desc="general_vendor_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $taxId = $myDatabase->real_escape_string($_POST['taxId']);
    
    // </editor-fold>
    
    
    
    if($vendorId != '' && $taxId != '' ) {
       
            
           
                $sql = "INSERT INTO `general_vendor_pph` (general_vendor_id, pph_tax_id) VALUES ({$vendorId},{$taxId})";
            
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $vendorId = $myDatabase->insert_id;
                }

                $return_value = '|OK|PPh General Vendor has successfully inserted.|'. $vendorId .'|';
            } else {
                $return_value = '|FAIL|Insert/update vendor failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_general_vendor') {
    // <editor-fold defaultstate="collapsed" desc="delete_general_vendor">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    // </editor-fold>
    
    if($vendorId != '') {
        $paymentCount = 0;
        
        $sql = "SELECT * FROM `payment` WHERE general_vendor_id = {$vendorId} AND payment_status = 0";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $contractCount = $result->num_rows;
        
        if($paymentCount == 0) {
            $sql = "DELETE FROM `general_vendor` WHERE general_vendor_id = {$vendorId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|General Vendor has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete vendor failed.|';
            }
        } else {
            $return_value = '|FAIL|General Vendor in use in payment.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'general_vendor_data') {
    // <editor-fold defaultstate="collapsed" desc="general_vendor_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    $vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
	$npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
	$branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    //$pph = $myDatabase->real_escape_string($_POST['pph']);
	$active = $myDatabase->real_escape_string($_POST['active']);
	$nik = $myDatabase->real_escape_string($_POST['nik']);
    // </editor-fold>
    
    if ($vendorId == '') {
        $boolNew = true;
    }
    
    if($vendorName != '' && $vendorAddress != '' && $npwp != '' && $npwp_name != ''&& $ppn != '' /*&& $pph != ''*/) {
        if($boolNew) {
            $sql = "SELECT * FROM `general_vendor` WHERE UPPER(general_vendor_name) = UPPER('{$vendorName}')";
        } else {
            $sql = "SELECT * FROM `general_vendor` WHERE UPPER(general_vendor_name) = UPPER('{$vendorName}') AND general_vendor_id <> {$vendorId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;
			$pph = 0;
            
            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }
            
            /*$sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }*/
            
            if($boolNew) {
                $sql = "INSERT INTO `general_vendor` (general_vendor_name, general_vendor_address, nik, npwp, npwp_name, bank_name, branch, account_no, beneficiary, "
                        . "swift_code, ppn_tax_id, pph_tax_id, ppn, pph, active, entry_by, entry_date) VALUES ("
                        . "'{$vendorName}', '{$vendorAddress}', '{$nik}', '{$npwp}', '{$npwp_name}', '{$bankName}', '{$branch}', '{$accountNo}', "
                        . "'{$beneficiary}', '{$swiftCode}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$active}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `general_vendor` SET "
                        . "general_vendor_name = '{$vendorName}', "
                        . "general_vendor_address = '{$vendorAddress}', "
						. "nik = '{$nik}', "
                        . "npwp = '{$npwp}', "
						. "npwp_name = '{$npwp_name}', "
                        . "bank_name = '{$bankName}', "
						. "branch = '{$branch}', "
                        . "account_no = '{$accountNo}', "
                        . "beneficiary = '{$beneficiary}', "
                        . "swift_code = '{$swiftCode}', "
                        . "ppn_tax_id = {$ppn}, "
                        . "pph_tax_id = {$pph}, "
                        . "ppn = {$ppnValue}, "
                        . "pph = {$pphValue}, "
						. "active = {$active} "
                        . "WHERE general_vendor_id = {$vendorId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $vendorId = $myDatabase->insert_id;
                }

                $return_value = '|OK|General Vendor has successfully inserted/updated.|'. $vendorId .'|';
            } else {
                $return_value = '|FAIL|Insert/update vendor failed.||';
            }
        } else {
            $return_value = '|FAIL|General Vendor already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_account') {
    // <editor-fold defaultstate="collapsed" desc="delete_account">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    // </editor-fold>
    
    if($accountId != '') {
        $sql = "SELECT * FROM `payment` WHERE account_id = {$accountId} AND payment_status = 0";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `account` WHERE account_id = {$accountId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Account has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete account failed.|';
            }
        } else {
            $return_value = '|FAIL|Account in use in payments.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'account_data') {
    // <editor-fold defaultstate="collapsed" desc="account_data">
    
    $return_value = '';
    $boolNew = false;
    $whereCondition = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $accountType = $myDatabase->real_escape_string($_POST['accountType']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $accountName = $myDatabase->real_escape_string($_POST['accountName']);
	$description = $myDatabase->real_escape_string($_POST['description']);
    // </editor-fold>
    
    if ($accountId == '') {
        $boolNew = true;
    }
    
    if($accountType == 1) {
        $whereCondition = " account_type in (0,1) ";
    } else {
        $whereCondition = " account_type = {$accountType} ";
    }
    
    if($accountType != '' && $accountNo != '' && $accountName != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `account` WHERE {$whereCondition} AND account_no = '{$accountNo}'";
        } else {
            $sql = "SELECT * FROM `account` WHERE {$whereCondition} AND account_no = '{$accountNo}' AND account_id <> {$accountId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                if($accountType == 1) {
                    $sql = "INSERT INTO `account` (account_type, account_no, account_name, description, entry_by, entry_date) VALUES ("
                            . "{$accountType}, '{$accountNo}', '{$accountName}', '{$description}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            
                } else {
                    $sql = "INSERT INTO `account` (account_type, account_no, account_name, description, entry_by, entry_date) VALUES ("
                            . "{$accountType}, '{$accountNo}', '{$accountName}', '{$description}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                }
            } else {
                $sql = "UPDATE `account` SET "
                        . "account_type = '{$accountType}', "
                        . "account_no = '{$accountNo}', "
                        . "account_name = '{$accountName}', "
						. "description = '{$description}' "
                        . "WHERE account_id = {$accountId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $accountId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Account has successfully inserted/updated.|'. $accountId .'|';
            } else {
                $return_value = '|FAIL|Insert/update account failed.||';
            }
        } else {
            $return_value = '|FAIL|Account already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_bank') {
    // <editor-fold defaultstate="collapsed" desc="delete_bank">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $bankId = $myDatabase->real_escape_string($_POST['bankId']);
    // </editor-fold>
    
    if($bankId != '') {
        $sql = "SELECT * FROM `payment` WHERE bank_id = {$bankId} AND payment_status = 0";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `bank` WHERE bank_id = {$bankId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Bank has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete bank failed.|';
            }
        } else {
            $return_value = '|FAIL|Bank in use in payments.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_tax') {
    // <editor-fold defaultstate="collapsed" desc="delete_vendor">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $taxId = $myDatabase->real_escape_string($_POST['taxId']);
    // </editor-fold>
    
    if($taxId != '') {
        $vendor = 0;
        $labor = 0;
		$generalVendor = 0;
		$freight = 0;
		$customer = 0;
        
        $sql = "SELECT * FROM `vendor` WHERE ppn_tax_id = {$taxId} OR pph_tax_id = {$taxId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $vendor = $result->num_rows;
        
        $sql = "SELECT * FROM `labor` WHERE ppn_tax_id = {$taxId} OR pph_tax_id = {$taxId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $labor = $result->num_rows;
		
		$sql = "SELECT * FROM `general_vendor` WHERE ppn_tax_id = {$taxId} OR pph_tax_id = {$taxId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $generalVendor = $result->num_rows;
		
		$sql = "SELECT * FROM `freight` WHERE ppn_tax_id = {$taxId} OR pph_tax_id = {$taxId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $freight = $result->num_rows;
		
		$sql = "SELECT * FROM `customer` WHERE ppn_tax_id = {$taxId} OR pph_tax_id = {$taxId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $customer = $result->num_rows;
        
        if($vendor == 0 && $labor == 0 && $generalVendor == 0 && $freight == 0 && $customer == 0) {
            $sql = "DELETE FROM `tax` WHERE tax_id = {$taxId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Tax has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete Tax failed.|';
            }
        } else {
            $return_value = '|FAIL|Tax in use in VENDOR, LABOR, GENERAL VENDOR, FREIGHT, CUSTOMER.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'tax_data') {
    // <editor-fold defaultstate="collapsed" desc="bank_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $taxId = $myDatabase->real_escape_string($_POST['taxId']);
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $taxType = $myDatabase->real_escape_string($_POST['taxType']);
    $taxCategory = $myDatabase->real_escape_string($_POST['taxCategory']);
    $taxName = $myDatabase->real_escape_string($_POST['taxName']);
    //$openingBalance = str_replace(",", "", $myDatabase->real_escape_string($_POST['openingBalance']));
    $taxValue = $myDatabase->real_escape_string($_POST['taxValue']);
    $active = $myDatabase->real_escape_string($_POST['active']);
    //$bankCode = $myDatabase->real_escape_string($_POST['bankCode']);
    // </editor-fold>
    
    if ($taxId == '') {
        $boolNew = true;
    }
    
    if($accountId != '' && $taxType != '' && $taxCategory != '' && $taxName != '' && $taxValue != '' && $active != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `tax` WHERE tax_name = '{$taxName}' AND tax_value = '{$taxValue}'";
        } else {
            $sql = "SELECT * FROM `tax` WHERE tax_name = '{$taxName}' AND tax_value = {$taxValue} AND tax_id <> {$taxId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `tax` (account_id, tax_type, tax_category, tax_name, tax_value, active, entry_by, entry_date) VALUES ("
                        . "{$accountId}, {$taxType}, {$taxCategory}, '{$taxName}', '{$taxValue}', {$active}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `tax` SET "
						. "account_id = {$accountId}, "
                        . "tax_type = {$taxType}, "
						. "tax_category = {$taxCategory}, "
                        . "tax_name = '{$taxName}', "
                        . "tax_value = '{$taxValue}', "
                        . "active = {$active} "
                        . "WHERE tax_id = {$taxId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $taxId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Tax has successfully inserted/updated.|'. $taxId .'|';
            } else {
                $return_value = '|FAIL|Insert/update tax failed.||';
            }
        } else {
            $return_value = '|FAIL|Tax already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'bank_data') {
    // <editor-fold defaultstate="collapsed" desc="bank_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $bankId = $myDatabase->real_escape_string($_POST['bankId']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
    $bankAccountNo = $myDatabase->real_escape_string($_POST['bankAccountNo']);
    $bankAccountName = $myDatabase->real_escape_string($_POST['bankAccountName']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $openingBalance = str_replace(",", "", $myDatabase->real_escape_string($_POST['openingBalance']));
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $bankType = $myDatabase->real_escape_string($_POST['bankType']);
    $bankCode = $myDatabase->real_escape_string($_POST['bankCode']);
	$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
	$branch = $myDatabase->real_escape_string($_POST['branch']);
	$masterBank = $myDatabase->real_escape_string($_POST['masterBank']);
    // </editor-fold>
    
    if ($bankId == '') {
        $boolNew = true;
    }
    
    if($bankName != '' && $bankAccountNo != '' && $bankAccountName != '' && $currencyId != '' && $accountId != '' && $openingBalance != '' && 
            $bankType != '' && $bankCode != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `bank` WHERE UPPER(bank_name) = UPPER('{$bankName}') AND bank_account_no = '{$bankAccountNo}'";
        } else {
            $sql = "SELECT * FROM `bank` WHERE UPPER(bank_name) = UPPER('{$bankName}') AND bank_account_no = '{$bankAccountNo}' AND bank_id <> {$bankId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `bank` (bank_name, bank_type, stockpile_id, bank_code, bank_account_no, bank_account_name, currency_id, opening_balance, account_id, entry_by, entry_date, branch, master_bank) VALUES ("
                        . "'{$bankName}', {$bankType}, {$stockpileId}, '{$bankCode}', '{$bankAccountNo}', '{$bankAccountName}', {$currencyId}, {$openingBalance}, {$accountId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), '{$branch}', {$masterBank})";
            } else {
                $sql = "UPDATE `bank` SET "
                        . "bank_name = '{$bankName}', "
                        . "bank_type = {$bankType}, "
						. "stockpile_id = {$stockpileId}, "
                        . "bank_code = '{$bankCode}', "
                        . "bank_account_no = '{$bankAccountNo}', "
                        . "bank_account_name = '{$bankAccountName}', "
                        . "currency_id = {$currencyId}, "
                        . "opening_balance = {$openingBalance}, "
						. "branch = '{$branch}', "
						. "master_bank = {$masterBank}, "
                        . "account_id = {$accountId} "
                        . "WHERE bank_id = {$bankId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $bankId = $myDatabase->insert_id;
				}
                
				$sqlPPN = "SELECT a.account_no, a.account_name, c.bank_name, b.branch, b.bank_account_no, b.bank_account_name, d.stockpile_name, b.master_bank FROM bank b 
					LEFT JOIN account a ON a.account_id = b.account_id 
					LEFT JOIN master_bank c ON c.master_bank_id = b.master_bank
					LEFT JOIN stockpile d ON d.stockpile_id = b.stockpile_id
					WHERE bank_id = {$bankId}";
					$resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
					if($resultPPN !== false && $resultPPN->num_rows == 1) {
					$rowPPN = $resultPPN->fetch_object();
						$accountNo = $rowPPN->account_no;
						$vendorName = $rowPPN->account_name;
						$bank = $rowPPN->bank_name;
						$branch = $rowPPN->branch;
						$no_rek = $rowPPN->bank_account_no;
						$beneficiary = $rowPPN->bank_account_name;
						$stockpile = $rowPPN->stockpile_name;
						$master_bank_id = $rowPPN->master_bank;
						
					
					if($boolNew) {
						
						$sql = "INSERT INTO vendor_pettycash (account_no, vendor_name, bank, branch, no_rek, beneficiary, stockpile, master_bank_id) VALUES ("
                        . "'{$accountNo}', '{$vendorName}', '{$bank}', '{$branch}', '{$no_rek}', '{$beneficiary}', '{$stockpile}', '{$master_bank_id}')";
						
					}else{
						
						$sql = "UPDATE `vendor_pettycash` SET "
                        . "account_no = '{$bankName}', "
                        . "vendor_name = '{$vendorName}', "
						. "bank = '{$bank}', "
                        . "branch = '{$branch}', "
                        . "no_rek = '{$no_rek}', "
                        . "beneficiary = '{$beneficiary}', "
                        . "master_bank_id = {$master_bank_id} "
                        . "WHERE account_no = '{$accountNo}'";
						
					}
					}
						$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
						
                $return_value = '|OK|Bank has successfully inserted/updated.|'. $bankId .'|';
            } else {
                $return_value = '|FAIL|Insert/update bank failed.||';
            }
        } else {
            $return_value = '|FAIL|Bank already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_category') {
    // <editor-fold defaultstate="collapsed" desc="delete_category">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $categoryId = $myDatabase->real_escape_string($_POST['categoryId']);
    // </editor-fold>
    
    if($categoryId != '') {
        $sql = "SELECT * FROM `condition` WHERE category_id = {$categoryId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `category` WHERE category_id = {$categoryId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Category has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete category failed.|';
            }
        } else {
            $return_value = '|FAIL|Category in use in condition.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'category_data') {
    // <editor-fold defaultstate="collapsed" desc="category_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $categoryId = $myDatabase->real_escape_string($_POST['categoryId']);
    $categoryName = $myDatabase->real_escape_string($_POST['categoryName']);
    // </editor-fold>
    
    if ($categoryId == '') {
        $boolNew = true;
    }
    
    if($categoryName != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `category` WHERE UPPER(category_name) = UPPER('{$categoryName}')";
        } else {
            $sql = "SELECT * FROM `category` WHERE UPPER(category_name) = UPPER('{$categoryName}') AND category_id <> {$categoryId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `category` (category_name, entry_by, entry_date) VALUES ("
                        . "'{$categoryName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `category` SET "
                        . "category_name = '{$categoryName}' "
                        . "WHERE category_id = {$categoryId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $categoryId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Category has successfully inserted/updated.|'. $categoryId .'|';
            } else {
                $return_value = '|FAIL|Insert/update category failed.||';
            }
        } else {
            $return_value = '|FAIL|Category already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_vehicle') {
    // <editor-fold defaultstate="collapsed" desc="delete_vehicle">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vehicleId = $myDatabase->real_escape_string($_POST['vehicleId']);
    // </editor-fold>
    
    if($vehicleId != '') {
        $sql = "SELECT * FROM `unloading_cost` WHERE vehicle_id = {$vehicleId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `vehicle` WHERE vehicle_id = {$vehicleId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Vehicle has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete vehicle failed.|';
            }
        } else {
            $return_value = '|FAIL|Vehicle in use in stockpile unloading cost.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'vehicle_data') {
    // <editor-fold defaultstate="collapsed" desc="vehicle_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vehicleId = $myDatabase->real_escape_string($_POST['vehicleId']);
    $vehicleName = $myDatabase->real_escape_string($_POST['vehicleName']);
    // </editor-fold>
    
    if ($vehicleId == '') {
        $boolNew = true;
    }
    
    if($vehicleName != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `vehicle` WHERE UPPER(vehicle_name) = UPPER('{$vehicleName}')";
        } else {
            $sql = "SELECT * FROM `vehicle` WHERE UPPER(vehicle_name) = UPPER('{$vehicleName}') AND vehicle_id <> {$vehicleId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `vehicle` (vehicle_name, entry_by, entry_date) VALUES ("
                        . "'{$vehicleName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `vehicle` SET "
                        . "vehicle_name = '{$vehicleName}' "
                        . "WHERE vehicle_id = {$vehicleId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $vehicleId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Vehicle has successfully inserted/updated.|'. $vehicleId .'|';
            } else {
                $return_value = '|FAIL|Insert/update vehicle failed.||';
            }
        } else {
            $return_value = '|FAIL|Vehicle already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_customer') {
    // <editor-fold defaultstate="collapsed" desc="delete_customer">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    // </editor-fold>
    
    if($customerId != '') {
        $sql = "SELECT * FROM `sales` WHERE customer_id = {$customerId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `customer` WHERE customer_id = {$customerId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Customer has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete customer failed.|';
            }
        } else {
            $return_value = '|FAIL|Customer in use in sales agreement.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'customer_data') {
    // <editor-fold defaultstate="collapsed" desc="customer_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    $customerName = $myDatabase->real_escape_string($_POST['customerName']);
    $customerAddress = $myDatabase->real_escape_string($_POST['customerAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
	$npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
	$branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>
    
    if ($customerId == '') {
        $boolNew = true;
    }
    
    if($customerName != '' && $customerAddress != '' && $npwp != '' && $npwp_name != '' && $ppn != '' && $pph != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$customerName}')";
        } else {
            $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$customerName}') AND customer_id <> {$customerId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;
            
            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }
            
            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }
            
            if($boolNew) {
                $sql = "INSERT INTO `customer` (customer_name, customer_address, npwp, npwp_name, bank_name, branch, account_no, beneficiary, "
                        . "swift_code, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                        . "'{$customerName}', '{$customerAddress}', '{$npwp}', '{$npwp_name}', '{$bankName}', '{$branch}', '{$accountNo}', "
                        . "'{$beneficiary}', '{$swiftCode}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `customer` SET "
                        . "customer_name = '{$customerName}', "
                        . "customer_address = '{$customerAddress}', "
                        . "npwp = '{$npwp}', "
						. "npwp_name = '{$npwp_name}', "
                        . "bank_name = '{$bankName}', "
						. "branch = '{$branch}', "
                        . "account_no = '{$accountNo}', "
                        . "beneficiary = '{$beneficiary}', "
                        . "swift_code = '{$swiftCode}', "
                        . "ppn_tax_id = {$ppn}, "
                        . "pph_tax_id = {$pph}, "
                        . "ppn = {$ppnValue}, "
                        . "pph = {$pphValue} "
                        . "WHERE customer_id = {$customerId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $customerId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Customer has successfully inserted/updated.|'. $customerId .'|';
            } else {
                $return_value = '|FAIL|Insert/update customer failed.||';
            }
        } else {
            $return_value = '|FAIL|Customer already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_labor') {
    // <editor-fold defaultstate="collapsed" desc="delete_labor">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    // </editor-fold>
    
    if($laborId != '') {
        $sql = "SELECT * FROM `transaction` WHERE labor_id = {$laborId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `labor` WHERE labor_id = {$laborId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Labor worker has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete labor worker failed.|';
            }
        } else {
            $return_value = '|FAIL|Labor worker in use in transaction.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'labor_data') {
    // <editor-fold defaultstate="collapsed" desc="labor_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $laborName = $myDatabase->real_escape_string($_POST['laborName']);
    $laborAddress = $myDatabase->real_escape_string($_POST['laborAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
	$npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
	$branch = $myDatabase->real_escape_string($_POST['branch']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $beneficiary = $myDatabase->real_escape_string($_POST['beneficiary']);
    $swiftCode = $myDatabase->real_escape_string($_POST['swiftCode']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
	$active = $myDatabase->real_escape_string($_POST['active']);
	$nik = $myDatabase->real_escape_string($_POST['nik']);
    // </editor-fold>
    
    if ($laborId == '') {
        $boolNew = true;
    }
    
    if($laborName != '' && $laborAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `labor` WHERE UPPER(labor_name) = UPPER('{$laborName}')";
        } else {
            $sql = "SELECT * FROM `labor` WHERE UPPER(labor_name) = UPPER('{$laborName}') AND labor_id <> {$laborId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;
            
            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }
            
            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }
            
            if($boolNew) {
                $sql = "INSERT INTO `labor` (labor_name, labor_address, nik, npwp, npwp_name, bank_name, branch, account_no, beneficiary, "
                        . "swift_code, ppn_tax_id, pph_tax_id, ppn, pph, active, entry_by, entry_date) VALUES ("
                        . "'{$laborName}', '{$laborAddress}', '{$nik}', '{$npwp}', '{$npwp_name}', '{$bankName}', '{$branch}', '{$accountNo}', "
                        . "'{$beneficiary}', '{$swiftCode}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$active}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `labor` SET "
                        . "labor_name = '{$laborName}', "
                        . "labor_address = '{$laborAddress}', "
						. "nik = '{$nik}', "
                        . "npwp = '{$npwp}', "
						. "npwp_name = '{$npwp_name}', "
                        . "bank_name = '{$bankName}', "
						. "branch = '{$branch}', "
                        . "account_no = '{$accountNo}', "
                        . "beneficiary = '{$beneficiary}', "
                        . "swift_code = '{$swiftCode}', "
                        . "ppn_tax_id = {$ppn}, "
                        . "pph_tax_id = {$pph}, "
                        . "ppn = {$ppnValue}, "
                        . "pph = {$pphValue}, "
						. "active = {$active} "
                        . "WHERE labor_id = {$laborId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $laborId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Labor worker has successfully inserted/updated.|'. $laborId .'|';
            } else {
                $return_value = '|FAIL|Insert/update labor worker failed.||';
            }
        } else {
            $return_value = '|FAIL|Labor worker already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}


elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'currency_data') {
    // <editor-fold defaultstate="collapsed" desc="currency_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $currencyCode = $myDatabase->real_escape_string($_POST['currencyCode']);
    $currencyName = $myDatabase->real_escape_string($_POST['currencyName']);
    $isCountryCurrency = $myDatabase->real_escape_string($_POST['isCountryCurrency']);
    $isPurchaseCurrency = $myDatabase->real_escape_string($_POST['isPurchaseCurrency']);
    $isSalesCurrency = $myDatabase->real_escape_string($_POST['isSalesCurrency']);
    $isReportCurrency = $myDatabase->real_escape_string($_POST['isReportCurrency']);
    // </editor-fold>
    
    if ($currencyId == '') {
        $boolNew = true;
    }
    
    if($currencyCode != '' && $currencyName != '' && $isCountryCurrency != '' && $isPurchaseCurrency != '' && 
            $isSalesCurrency != '' && $isReportCurrency != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `currency` WHERE UPPER(currency_code) = UPPER('{$currencyCode}')";
        } else {
            $sql = "SELECT * FROM `currency` WHERE UPPER(currency_code) = UPPER('{$currencyCode}') AND currency_id <> {$currencyId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `currency` (currency_code, currency_name, is_country_currency, is_purchase_currency, is_sales_currency, is_report_currency, entry_by, entry_date) VALUES ("
                        . "UPPER('{$currencyCode}'), '{$currencyName}', {$isCountryCurrency}, {$isPurchaseCurrency}, {$isSalesCurrency}, {$isReportCurrency}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `currency` SET "
                        . "currency_code = UPPER('{$currencyCode}'),"
                        . "currency_name = '{$currencyName}', "
                        . "is_country_currency = {$isCountryCurrency}, "
                        . "is_purchase_currency = {$isPurchaseCurrency}, "
                        . "is_sales_currency = {$isSalesCurrency}, "
                        . "is_report_currency = {$isReportCurrency} "
                        . "WHERE currency_id = {$currencyId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $currencyId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Currency has successfully inserted/updated.|'. $currencyId .'|';
            } else {
                $return_value = '|FAIL|Insert/update currency failed.||';
            }
        } else {
            $return_value = '|FAIL|Currency already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'stockpile_data') {
    // <editor-fold defaultstate="collapsed" desc="stockpile_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockpileCode = $myDatabase->real_escape_string($_POST['stockpileCode']);
    $stockpileName = $myDatabase->real_escape_string($_POST['stockpileName']);
    $stockpileAddress = $myDatabase->real_escape_string($_POST['stockpileAddress']);
    $active = $myDatabase->real_escape_string($_POST['active']);
    $freightWeightRule = $myDatabase->real_escape_string($_POST['freightWeightRule']);
    $curahWeightRule = $myDatabase->real_escape_string($_POST['curahWeightRule']);
    // </editor-fold>
    
    if ($stockpileId == '') {
        $boolNew = true;
    }
    
    if($stockpileCode != '' && $stockpileName != '' && $active != '' && $freightWeightRule !='' && $curahWeightRule != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `stockpile` WHERE UPPER(stockpile_code) = UPPER('{$stockpileCode}') AND UPPER(stockpile_name) = UPPER('{$stockpileName}')";
        } else {
            $sql = "SELECT * FROM `stockpile` WHERE UPPER(stockpile_code) = UPPER('{$stockpileCode}') AND UPPER(stockpile_name) = UPPER('{$stockpileName}') AND stockpile_id <> {$stockpileId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `stockpile` (stockpile_code, stockpile_name, stockpile_address, active, freight_weight_rule, curah_weight_rule, entry_by, entry_date) VALUES ("
                        . "UPPER('{$stockpileCode}'), '{$stockpileName}', '{$stockpileAddress}', {$active}, {$freightWeightRule}, {$curahWeightRule}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `stockpile` SET "
                        . "stockpile_code = UPPER('{$stockpileCode}'), "
                        . "stockpile_name = '{$stockpileName}',"
                        . "stockpile_address = '{$stockpileAddress}', "
                        . "freight_weight_rule = {$freightWeightRule}, "
                        . "curah_weight_rule = {$curahWeightRule}, "
                        . "active = {$active} "
                        . "WHERE stockpile_id = {$stockpileId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $stockpileId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Stockpile has successfully inserted/updated.|'. $stockpileId .'|';
            } else {
                $return_value = '|FAIL|Insert/update stockpile failed.||';
            }
        } else {
            $return_value = '|FAIL|Stockpile already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_stockpile_freight') {
    // <editor-fold defaultstate="collapsed" desc="delete_stockpile_freight">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightCostId = $myDatabase->real_escape_string($_POST['freightCostId']);
    // </editor-fold>
    
    if($freightCostId != '') {
        $sql = "SELECT * FROM `transaction` WHERE freight_cost_id = {$freightCostId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 0) {
            $sql = "DELETE FROM `freight_cost` WHERE freight_cost_id = {$freightCostId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Freight cost has successfully deleted.|';
            } else {
                $return_value = '|FAIL|Delete freight cost failed.|';
            }
        } else {
            $return_value = '|FAIL|Freight cost in use in condition.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'stockpile_freight_data') {
    // <editor-fold defaultstate="collapsed" desc="stockpile_freight_data">
    
    $return_value = '';
    $boolNew = false;
	$boolShrink = true;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $freightCostId = $myDatabase->real_escape_string($_POST['freightCostId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $paymentNotes = $myDatabase->real_escape_string($_POST['paymentNotes']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);	
    $contractPKHOA = $myDatabase->real_escape_string($_POST['contractPKHOA']);
	$shrink_tolerance_kg = $myDatabase->real_escape_string($_POST['shrink_tolerance_kg']);
	$shrink_tolerance_persen = $myDatabase->real_escape_string($_POST['shrink_tolerance_persen']);
	$shrink_claim = $myDatabase->real_escape_string($_POST['shrink_claim']);
    // </editor-fold>
    
    if ($freightCostId == '') {
        $boolNew = true;
    }
    
    if($freightId != '' && $currencyId != '' && $price != '' && $vendorId != '') {
//        if($boolNew) {
//            $sql = "SELECT * FROM `freight_cost` WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId}";
//        } else {
//            $sql = "SELECT * FROM `freight_cost` WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId} AND freight_cost_id <> {$freightCostId}";
//        }
//        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//        if($result !== false && $result->num_rows == 0) {
	
		if($shrink_tolerance_kg > 0 && $shrink_tolerance_persen > 0){
		 $boolShrink = false;
		}
        
        if($exchangeRate == '') {
            $exchangeRate = 1;
        }
        
        $priceConverted = $price * $exchangeRate;
        
            if($boolNew) {
                $sql = "INSERT INTO `freight_cost` (freight_id, stockpile_id, vendor_id, currency_id, exchange_rate, price, "
                        . "price_converted, payment_notes, remarks, company_id, entry_by, entry_date,contract_pkhoa,shrink_tolerance_kg,shrink_tolerance_persen,shrink_claim) VALUES ("
                        . "{$freightId}, {$stockpileId}, {$vendorId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, "
                        . "'{$paymentNotes}', '{$remarks}', {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),'{$contractPKHOA}','{$shrink_tolerance_kg}','{$shrink_tolerance_persen}','{$shrink_claim}')";
            } else {
                $sql = "UPDATE `freight_cost` SET "
                        . "freight_id = {$freightId}, "
                        . "currency_id = {$currencyId}, "
                        . "exchange_rate = {$exchangeRate}, "
                        . "vendor_id = {$vendorId}, "
                        . "price = {$price}, "
                        . "price_converted = {$priceConverted}, "
                        . "payment_notes = '{$paymentNotes}', "
                        . "contract_pkhoa = '{$contractPKHOA}', "
                        . "remarks = '{$remarks}', "
						. "shrink_tolerance_kg = '{$shrink_tolerance_kg}', "
						. "shrink_tolerance_persen = '{$shrink_tolerance_persen}', "
						. "shrink_claim = '{$shrink_claim}', "
                        . "modify_by = {$_SESSION['userId']}, "
                        . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE freight_cost_id = {$freightCostId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Freight cost has successfully inserted/updated.|';
            } else {
                $return_value = '|FAIL|Insert/update freight cost failed.|';
				echo $sql;
            }
//        } else {
//            $return_value = '|FAIL|Freight cost already exists.|';
//        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'stockpile_unloading_data') {
    // <editor-fold defaultstate="collapsed" desc="stockpile_unloading_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $unloadingCostId = $myDatabase->real_escape_string($_POST['unloadingCostId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $vehicleId = $myDatabase->real_escape_string($_POST['vehicleId']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
	$status = $myDatabase->real_escape_string($_POST['status']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    // </editor-fold>
    
    if ($unloadingCostId == '') {
        $boolNew = true;
    }
    
    if($vehicleId != '' && $currencyId != '' && $price != '') {
//        if($boolNew) {
//            $sql = "SELECT * FROM `freight_cost` WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId}";
//        } else {
//            $sql = "SELECT * FROM `freight_cost` WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId} AND freight_cost_id <> {$freightCostId}";
//        }
//        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//        if($result !== false && $result->num_rows == 0) {
        
        if($exchangeRate == '') {
            $exchangeRate = 1;
        }
        
        $priceConverted = $price * $exchangeRate;
        
            if($boolNew) {
                $sql = "INSERT INTO `unloading_cost` (vehicle_id, stockpile_id, currency_id, exchange_rate, price, "
                        . "price_converted, company_id, entry_by, entry_date, status) VALUES ("
                        . "{$vehicleId}, {$stockpileId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, "
                        . "{$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), {$status})";
            } else {
                $sql = "UPDATE `unloading_cost` SET "
                        . "vehicle_id = {$vehicleId}, "
                        . "currency_id = {$currencyId}, "
                        . "exchange_rate = {$exchangeRate}, "
                        . "price = {$price}, "
                        . "price_converted = {$priceConverted}, "
                        . "modify_by = {$_SESSION['userId']}, "
                        . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), "
						. "status = {$status} "
                        . "WHERE unloading_cost_id = {$unloadingCostId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Unloading cost has successfully inserted/updated.|';
            } else {
                $return_value = '|FAIL|Insert/update unloading cost failed.|';
            }
//        } else {
//            $return_value = '|FAIL|Freight cost already exists.|';
//        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_customer_data">
    
    $return_value = '';
	//$boolShipment1 = false;
   
   	$transaction_id = $myDatabase->real_escape_string($_POST['transaction_id']);
    $gl_add_date = $myDatabase->real_escape_string($_POST['gl_add_date']);
    //$gl_add_no = $myDatabase->real_escape_string($_POST['gl_add_no']);
	$stockpile_id = $myDatabase->real_escape_string($_POST['stockpile_id']);
    $general_vendor_id = $myDatabase->real_escape_string($_POST['general_vendor_id']);
	$vendor_id = $myDatabase->real_escape_string($_POST['vendor_id']);
    $contract_id = $myDatabase->real_escape_string($_POST['contract_id']);
	
	$shipment_id = $myDatabase->real_escape_string($_POST['shipment_id']);
	$invoice_id = $myDatabase->real_escape_string($_POST['invoice_id']);
	$notes = $myDatabase->real_escape_string($_POST['notes']);
	$quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
	$price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
	
   	
	if($contract_id == ''){
	$contract_id = 'NULL';
	}
	if($transaction_id == ''){
	$transaction_id = 'NULL';
	}
	if($shipment_id == ''){
	$shipment_id = 'NULL';
	}
	if($invoice_id == ''){
	$invoice_id = 'NULL';
	}
	if($notes == ''){
		$notes = 'NULL';
	}
	if($price == ''){
		$price = 0;
	}
	if($quantity == ''){
		$quantity = 0;
	}
	if($general_vendor_id == ''){
		$general_vendor_id = 'NULL';
	}
	if($vendor_id == ''){
		$vendor_id = 'NULL';
	}
	
	
	$str = $_POST['gl_add_date'];
	$date = DateTime::createFromFormat('d/m/Y', $str);
	$jurnalYearMonth = $date->format('ym');
	
	
    if($stockpile_id != '') {
		
		$checkJurnalNo = 'JM/JPJ/'. $jurnalYearMonth;
 
        $sql = "SELECT gl_add_no FROM gl_add WHERE gl_add_no LIKE '{$checkJurnalNo}%' ORDER BY gl_add_id DESC LIMIT 1";
        $resultJurnal = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($resultJurnal->num_rows == 1) {
            $rowJurnal = $resultJurnal->fetch_object();
            $splitJurnalNo = explode('/', $rowJurnal->gl_add_no);
            $lastExplode = count($splitJurnalNo) - 1;
            $nextJurnalNo = ((float) $splitJurnalNo[$lastExplode]) + 1;
            $jurnalNo = $checkJurnalNo .'/'. $nextJurnalNo;
        } else {
            $jurnalNo = $checkJurnalNo .'/1';
        
    }
				
            $sql = "INSERT INTO `gl_add` (gl_add_date, gl_add_no, stockpile_id, general_vendor_id, vendor_id , contract_id, transaction_id, shipment_id, invoice_id, notes, quantity, price, input_by, input_date) VALUES (STR_TO_DATE('{$gl_add_date}', '%d/%m/%Y'), '{$jurnalNo}', {$stockpile_id}, {$general_vendor_id}, {$vendor_id}, {$contract_id}, {$transaction_id}, {$shipment_id}, {$invoice_id}, '{$notes}', '{$quantity}', '{$price}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $jurnalId = $myDatabase->insert_id;
                
                $return_value = '|OK|Data has successfully inserted.||';
				
				$sql = "UPDATE `gl_detail` SET gl_add_id = {$jurnalId} WHERE gl_add_id IS NULL AND entry_by = {$_SESSION['userId']}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
				
            } else {
                $return_value = '|FAIL|Insert Data failed.||';
	
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    } 
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_jurnal_data') {
    // <editor-fold defaultstate="collapsed" desc="delete_user">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $jurnalId = $myDatabase->real_escape_string($_POST['jurnalId']);
    // </editor-fold>
    
    if($jurnalId != '') {
		
		
        $sql = "DELETE FROM `gl_add` WHERE gl_add_id = {$jurnalId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|User has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_detail') {
    // <editor-fold defaultstate="collapsed" desc="transaction_customer_data">
    
    $return_value = '';
	$boolShipment1 = false;
	//$exchangeRate = '';
    //$grandTotal = 0;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $jurnalType = $myDatabase->real_escape_string($_POST['jurnalType']);
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $stockpileId2 = $myDatabase->real_escape_string($_POST['stockpileId2']);
	$amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
	$currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
	$exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
	$notes = $myDatabase->real_escape_string($_POST['notes']);
	
    // </editor-fold>
  
	if($stockpileId2 == ''){
		$stockpileId2 = 'NULL';
	}
	
	if($exchangeRate == ''){
		$exchangeRate = 1;
	}
	
	
	
	
    if($jurnalType != '' && $accountId != '' && $amount != '' && $currencyId != '') {
			
			$amountConverted = $exchangeRate * $amount;
			
			
				
            $sql = "INSERT INTO `gl_detail` (gl_type, stockpile_id, account_id, currency_id, exchange_rate, amount, amount_converted, notes, entry_by, entry_date) VALUES ("
                    . "{$jurnalType}, {$stockpileId2}, {$accountId}, {$currencyId}, {$exchangeRate}, '{$amount}', '{$amountConverted}', '{$notes}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $jurnalId = $myDatabase->insert_id;
                
                $return_value = '|OK|Data has successfully inserted.||';
				
				
			insertGeneralLedger($myDatabase, 'JURNAL MEMORIAL', "NULL", "NULL", "NULL", "NULL", "NULL", $jurnalId);
				
            } else {
                $return_value = '|FAIL|Insert Data failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    } 
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_jurnal_detail') {
    // <editor-fold defaultstate="collapsed" desc="delete_user">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $jurnalDetailId = $myDatabase->real_escape_string($_POST['jurnalDetailId']);
    // </editor-fold>
    
    if($jurnalDetailId != '') {
		
        $sql = "DELETE FROM `gl_detail` WHERE gl_detail_id = {$jurnalDetailId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|User has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'invoice_detail') {
    // <editor-fold defaultstate="collapsed" desc="transaction_customer_data">
    
    $return_value = '';
	$boolShipment1 = false;
	$boolPO = false;
	$boolVendor = false;
    //$grandTotal = 0;
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	$invMethod = $myDatabase->real_escape_string($_POST['invMethod']);
    $invoiceType = $myDatabase->real_escape_string($_POST['invoiceType']);
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
	$generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId']);
    $shipmentId1 = $myDatabase->real_escape_string($_POST['shipmentId1']);
    $stockpileId2 = $myDatabase->real_escape_string($_POST['stockpileId2']);
	$qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty']));
	$price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
	$termin = str_replace(",", "", $myDatabase->real_escape_string($_POST['termin']));
	$amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
	$currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
	$exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
	$ppn = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn1']));
	//$pph = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph1']));
	$pphID = $myDatabase->real_escape_string($_POST['pphTaxId']);
	$ppnID = $myDatabase->real_escape_string($_POST['ppnID']);
	$pphDP2 = $myDatabase->real_escape_string($_POST['pphDP2']);
	$ppnDP2 = $myDatabase->real_escape_string($_POST['ppnDP2']);
	//$grandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal']));
	//$DP = $grandTotal;
	$dp_total = str_replace(",", "", $myDatabase->real_escape_string($_POST['dp_total']));
	$DP = $dp_total;
	$notes = $myDatabase->real_escape_string($_POST['notes']);
	$invoiceMethodDetail = $myDatabase->real_escape_string($_POST['invoiceMethodDetail']);
	$poId = $myDatabase->real_escape_string($_POST['poId']);
	$slipNos = "";
	$slipNos2 = "";
    // </editor-fold>
     if($shipmentId1 == ''){
		$shipmentId1 = 'NULL';
	}else{
		$sqlSales = "SELECT sales_id FROM sales WHERE shipment_id = {$shipmentId1}";
			$resultSales = $myDatabase->query($sqlSales, MYSQLI_STORE_RESULT);
			if($resultSales !== false && $resultSales->num_rows > 0) {
       			 $rowSales = $resultSales->fetch_object();
       				$salesId = $rowSales->sales_id;
					
					$sqlStatus = "UPDATE sales SET " 
        				. "used_status = 1 "
                        . " WHERE sales_id = {$salesId}";
					$resultStatus = $myDatabase->query($sqlStatus, MYSQLI_STORE_RESULT);
			}
		
	}
	if($poId == ''){
		$poId = 'NULL';
	}
	if($stockpileId2 == ''){
		$stockpileId2 = 'NULL';
	}
	
	if($exchangeRate == ''){
		$exchangeRate = 1;
	}
		if($pphDP2 != 0 ){
		$sqlPPH = "SELECT tax_value FROM tax WHERE tax_id = {$pphID}";
			$resultPPH = $myDatabase->query($sqlPPH, MYSQLI_STORE_RESULT);
			if($resultPPH !== false && $resultPPH->num_rows > 0) {
       			 $rowPPH = $resultPPH->fetch_object();
       				$pph1 = $rowPPH->tax_value;
					$dp_pph = $DP * ($pph1/100);
			}
		}else{
			$dp_pph = 0;
		}
		if($ppnDP2 != 0 ){
		$sqlPPN = "SELECT tax_value FROM tax WHERE tax_id = {$ppnID}";
			$resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
			if($resultPPN !== false && $resultPPN->num_rows > 0) {
       			 $rowPPN = $resultPPN->fetch_object();
       				$ppn1 = $rowPPN->tax_value;
					$dp_ppn = $DP * ($ppn1/100);
			}
		}else{
			$dp_ppn = 0;
		}

			$dp_total = ($DP + $dp_ppn) - $dp_pph;
		
		$pph = 0;	
		if($pphID != 0){
			$sqlP = "SELECT tax_value FROM tax WHERE tax_id = {$pphID}";
			$resultP = $myDatabase->query($sqlP, MYSQLI_STORE_RESULT);
			if($resultP !== false && $resultP->num_rows > 0) {
       			 $rowP= $resultP->fetch_object();
       				$pphTax = $rowP->tax_value;
					
					$pph = $amount * ($pphTax/100);
			}
		}
			
		if($invMethod == 1){
				$amount2 = $amount * -1;
				$ppn2 = $ppn * -1;
				$pph2 = $pph * -1;
			}else{
				$amount2 = $amount;
				$ppn2 = $ppn;
				$pph2 = $pph;
			}
			
		$sqlShipment = "SELECT account_no FROM account WHERE account_id = {$accountId}";
			$resultShipment = $myDatabase->query($sqlShipment, MYSQLI_STORE_RESULT);
			if($resultShipment !== false && $resultShipment->num_rows > 0) {
       			 $rowShipment = $resultShipment->fetch_object();
       				$acc = $rowShipment->account_no;
					$sub_acc = substr($acc,0,2);
			}
				
			if($sub_acc == 51 && $shipmentId1 == 'NULL'){
						$boolShipment1 = false;
						//echo $sub_acc;
			 } else{
				 		$boolShipment1 = true;
						//echo 'SALAH';
			 }
			if(($acc == 520900 || $acc == 521000) && ($poId == 'NULL' && $shipmentId1 == 'NULL')){
				$boolPO = false;
			}elseif(($acc == 520900 || $acc == 521000) && ($poId != 'NULL' || $shipmentId1 != 'NULL')){
				$boolPO = true;
			}else{
				$boolPO = true;
			}
			
			//cek vendor
		$gvId = '';
		$sqlv = "SELECT id.general_vendor_id, gv.general_vendor_name FROM invoice_detail id LEFT JOIN general_vendor gv ON gv.`general_vendor_id` = id.`general_vendor_id`
WHERE id.invoice_id IS NULL AND id.entry_by = {$_SESSION['userId']} GROUP BY id.general_vendor_id";
			$resultv = $myDatabase->query($sqlv, MYSQLI_STORE_RESULT);
			if($resultv !== false && $resultv->num_rows == 1) {
       			 $rowv = $resultv->fetch_object();
       				$gvId = $rowv->general_vendor_id;
					$gvName = $rowv->general_vendor_name;
				if($gvId == $generalVendorId){
					$boolVendor = true;
				} 
			}	
			if($gvId == ''){
				$boolVendor = true;
			}
	
	if($boolVendor){
	
    if($invoiceType != '' && $accountId != '' && $qty != '' && $price != '' && $termin != '' && $amount != '' && $currencyId != '' && $boolShipment1 && $boolPO) {
			$t_amount = $amount2 + $ppn2 - $pph2; 
            $tamount = $t_amount - $dp_total ;
			$amountConverted = $exchangeRate * $amount2;
			$ppnConverted = $exchangeRate * $ppn2;
			$pphConverted = $exchangeRate * $pph2;
			$tamountConverted = $exchangeRate * $tamount;
			
			if($invoiceMethodDetail == 2){
			$dpAmount = $tamountConverted;
			}else{
			$dpAmount = 0;
			}
			
			/*if (isset($_POST['checkedSlips'])) {
                    $checks = $_POST['checkedSlips'];
                    for ($i = 0; $i < sizeof($checks); $i++) {
                        if($slipNos == '') {
                            $slipNos .= $checks[$i];
                        } else {
                            $slipNos .= ','. $checks[$i];
                        }
                    }
                }*/
				
            $sql = "INSERT INTO `invoice_detail` (invoice_method_detail, type, account_id, poId, general_vendor_id, shipment_id, stockpile_remark, qty, price, termin, amount, amount_converted, currency_id, exchange_rate, ppnID, ppn, ppn_converted, pphID, pph, pph_converted, tamount, tamount_converted, dp_amount, notes, entry_by, entry_date) VALUES ("
                    . "{$invoiceMethodDetail}, {$invoiceType}, {$accountId}, {$poId}, {$generalVendorId}, {$shipmentId1}, {$stockpileId2}, '{$qty}', '{$price}', '{$termin}', '{$amount2}', '{$amountConverted}', {$currencyId}, '{$exchangeRate}', {$ppnID} ,'{$ppn2}', '{$ppnConverted}', {$pphID}, '{$pph2}', '{$pphConverted}', '{$tamount}', '{$tamountConverted}', '{$dpAmount}', '{$notes}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $invoiceId = $myDatabase->insert_id;
                
                $return_value = '|OK|Data has successfully inserted.||';
					//$checks2 = 0;
				if($poId != 'NULL'){
				$sql = "UPDATE `contract` SET invoice_status = 1 WHERE contract_id = {$poId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				}
				
				/*if (isset($_POST['checkedSlips']) && isset($_POST['checkedSlips'])) {
                    $checks2 = $_POST['checkedSlips2'];
					$checks = $_POST['checkedSlips'];*/
					
				if(isset($_POST['checkedSlips2'])){
					 $checks2 = $_POST['checkedSlips2'];
					if (isset($_POST['checkedSlips'])) {
						$checks = $_POST['checkedSlips'];
					}else{
						$checks = '';
					}
				
				/*$sql = "UPDATE `invoice_detail` SET invoice_detail_dp = {$invoiceId} WHERE invoice_detail_id IN ($slipNos)";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
					
				$sql = "UPDATE `invoice_detail` SET invoice_detail_status = 1 WHERE invoice_detail_id IN ($slipNos)";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				*/
				
				/*for ($i = 0; $i < sizeof($checks2), $i < sizeof($checks); $i++) {
						if($slipNos2 == '') {
                            $slipNos2 .= '('. $invoiceId .','. $checks[$i] .','. $checks2[$i] .')';
                        } else {
                            $slipNos2 .= ','. '('. $invoiceId .','. $checks[$i] .','. $checks2[$i] .')';
                        }
					
						
					}*/
					for ($i = 0; $i < sizeof($checks2); $i++) {
						if($checks[$i] != ''){
							if($slipNos2 == '') {
                            $slipNos2 .= '('. $invoiceId .','. $checks[$i] .','. $checks2[$i] .')';
                        } else {
                            $slipNos2 .= ','. '('. $invoiceId .','. $checks[$i] .','. $checks2[$i] .')';
                        }
						}
					}
				}
			echo $slipNos2;
			$sql = "INSERT INTO invoice_dp (invoice_detail_id, invoice_detail_dp, amount_payment) VALUES {$slipNos2}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
					if($result === false) {
						echo 'salah';
					}
				
			insertGeneralLedger($myDatabase, 'INVOICE DETAIL', $invoiceId);
				
            } else {
                $return_value = '|FAIL|Insert Data failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    } 
    } else {
		$return_value = '|FAIL|Please Choose Same Vendor. ('. $gvName .')||';
	}
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_invoice_detail') {
    // <editor-fold defaultstate="collapsed" desc="delete_user">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $invoiceDetailId = $myDatabase->real_escape_string($_POST['invoiceDetailId']);
    // </editor-fold>
    
    if($invoiceDetailId != '') {
		$sql = "UPDATE invoice_detail SET invoice_detail_dp = NULL, invoice_detail_status = 0 WHERE invoice_detail_dp = {$invoiceDetailId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
		$sql = "SELECT poId FROM invoice_detail WHERE invoice_detail_id = {$invoiceDetailId}";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			if($result->num_rows == 1) {
				$row = $result->fetch_object();
				$poId = $row->poId;
				
				$sqldp = "UPDATE contract SET " 
        				. "invoice_status = 0 "
                        . " WHERE contract_id = {$poId}";
				$resultdp = $myDatabase->query($sqldp, MYSQLI_STORE_RESULT);
			}
		
		
        $sql = "DELETE FROM `invoice_detail` WHERE invoice_detail_id = {$invoiceDetailId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $return_value = '|OK|User has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete user failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'invoice_data') {
    // <editor-fold defaultstate="collapsed" desc="invoice_data">
    
    $return_value = '';
    $addMessage = '';
    $boolNew = false;
    $boolContinue = true;
    $boolUpdate = false;
	$boolUpdateInvoice = false;
	$boolUpdateInvoiceDetail = false;
    $boolInsertVendor = false;
    $boolVendorExists = false;
    $boolRecalculate = false;
    $boolPriceUp = false;
    $boolPriceDown = false;
    $boolQuantityUp = false;
    $boolQuantityDown = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $invoiceId = $myDatabase->real_escape_string($_POST['invoiceId']);
	$invoiceType = $myDatabase->real_escape_string($_POST['invoiceType']);
	//$accountId = $myDatabase->real_escape_string($_POST['accountId']);	
   	$invoiceMethod = $myDatabase->real_escape_string($_POST['invoiceMethod']);
	$invoiceDP = $myDatabase->real_escape_string($_POST['invoice_dp']);
   	$generatedInvoiceNo = $myDatabase->real_escape_string($_POST['generatedInvoiceNo']);
	///$invoiceNo = $generatedInvoiceNo;
	$invoiceNo2 = $myDatabase->real_escape_string($_POST['generatedInvoiceNo2']);
    $grandTotal = $myDatabase->real_escape_string($_POST['grandTotal']);
    //$generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId']);
    $stockpileContractId3 = $myDatabase->real_escape_string($_POST['stockpileContractId3']);
    //$shipmentId1 = $myDatabase->real_escape_string($_POST['shipmentId1']);
    $invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
	$inputDate = $myDatabase->real_escape_string($_POST['inputDate']);
	$requestDate = $myDatabase->real_escape_string($_POST['requestDate']);
	$taxDate = $myDatabase->real_escape_string($_POST['taxDate']);
    $invoiceTax = $myDatabase->real_escape_string($_POST['invoiceTax']);
	//$ppnID = $myDatabase->real_escape_string($_POST['ppnID']);
    //$ppn1 = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn1']));
	//$ppn2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn2']));
	$remarks = $myDatabase->real_escape_string($_POST['remarks']);
	//$ppnConverted = $ppn;
	//$pphID = $myDatabase->real_escape_string($_POST['pphID']);
    //$pph1 = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph1']));
	//$pph2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph2']));
	//$dppPrice = $myDatabase->real_escape_string($_POST['dppPrice']);
    //$currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    //$exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    //$price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    //$quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
	$amount = $grandTotal;
	$amountConverted = $grandTotal;
	$amount_ori = $grandTotal;
	$amount_ori_conv = $grandTotal;
	
    // </editor-fold>
    if($stockpileContractId3 == ''){
		$stockpileContractId3 = 'NULL'; 	
	}
	if($invoiceDP == 0){
		$invoiceDP = 'NULL'; 	
	}
	if($shipmentId1 == ''){
		$shipmentId1 = 'NULL';
	}
	if($price == '') {
            $price = 'NULL';
        }
		if($quantity == '') {
            $quantity = 'NULL';
        }
		
   
    
		
   
    if ($invoiceId == '' || $invoiceId == 0 || $invoiceId == 'NULL') {
        $boolNew = true;
       // if($stockpileId == '') {
         //   $boolContinue = false;
        //}
    }
    
    if($grandTotal != '' && $boolContinue) {
        
        if($exchangeRate == '') {
            $exchangeRate = 1;
        }
		
		if($grandTotal <= 0){
		$boolContinue = true;
		
	}
        
    if($boolContinue){    
        
        if($boolNew) {
            $sql = "select DATE_FORMAT(STR_TO_DATE('{$inputDate}', '%d/%m/%Y'), '%y%m') AS slip_prefix from dual";
            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            $rowSlip = $resultSlip->fetch_object();
            $invoiceYearMonth = $rowSlip->slip_prefix;
           
		 
         $checkInvoiceNo = 'INV/JPJ/'. $invoiceYearMonth;
   /* if($contractSeq != "") {
        $poNo = $checkInvoiceNo .'/'. $contractSeq;
    } else {*/
        $sql = "SELECT invoice_no FROM invoice WHERE company_id = {$_SESSION['companyId']} AND invoice_no LIKE '{$checkInvoiceNo}%' ORDER BY invoice_id DESC LIMIT 1";
        $resultInvoice = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($resultInvoice->num_rows == 1) {
            $rowInvoice = $resultInvoice->fetch_object();
            $splitInvoiceNo = explode('/', $rowInvoice->invoice_no);
            $lastExplode = count($splitInvoiceNo) - 1;
            $nextInvoiceNo = ((float) $splitInvoiceNo[$lastExplode]) + 1;
            $invoiceNo = $checkInvoiceNo .'/'. $nextInvoiceNo;
        } else {
            $invoiceNo = $checkInvoiceNo .'/1';
        
    }
            
			if($grandTotal > 0){
	   			$boolUpdateInvoice = true;
				
				//$pph = $pph1;
				//$ppn = $ppn1;
   				}
				/*else{
				$pph = $pph1;
				$ppn = $ppn1;
				}*/
   			/*
			if (isset($_POST['checkedSlips'])) {
                    $checks = $_POST['checkedSlips'];
                    for ($i = 0; $i < sizeof($checks); $i++) {
                        if($slipNos == '') {
                            $slipNos .= $checks[$i];
                        } else {
                            $slipNos .= ','. $checks[$i];
                        }
                    }
                }*/
				
           /* if($invoiceDP != '' || $invoiceDP != 'NULL' || $invoiceDP != 0){
				$pph = $pph1 - $pph2;
				$ppn = $ppn1 - $ppn2;
			}else{
				$pph = $pph1;
				$ppn = $ppn1;
			}*/
			
			//$ppnConverted = $ppn;
			//$pphConverted = $pph;
			
			
			//$amountConverted = $amount * $exchangeRate;
			
            $sql = "INSERT INTO `invoice` (invoice_date, input_date, request_date, tax_date, invoice_method, stockpileId, invoice_no, invoice_no2, invoice_tax, remarks,"
                    . "po_id, company_id, entry_by, entry_date) VALUES ("
                    . "STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), STR_TO_DATE('{$inputDate}', '%d/%m/%Y'), STR_TO_DATE('{$requestDate}', '%d/%m/%Y'), STR_TO_DATE('{$taxDate}', '%d/%m/%Y'), {$invoiceMethod},  {$stockpileId}, '{$invoiceNo}', '{$invoiceNo2}', '{$invoiceTax}', '{$remarks}',"
                    . "{$stockpileContractId3}, {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        } else {
            
			
			if($grandTotal > 0){
	   			$boolUpdateInvoice = true;
				//$pph = $pph1 ;
				//$ppn = $ppn1;
   				}
				/*else{
				$pph = $pph1;
				$ppn = $ppn1;
				}
				
			$ppnConverted = $ppn;
			$pphConverted = $pph;
			*/
           
            $sql = "UPDATE `invoice` SET "
					. "invoice_date = STR_TO_DATE('{$invoiceDate}', '%d/%m/%Y'), "
					. "invoice_method = {$invoiceMethod}, "
					. "invoice_dp = {$invoiceDP}, "
					. "stockpileId = '{$stockpileId}', "
                    . "invoice_no = '{$invoiceNo}', "
					. "invoice_no2 = '{$invoiceNo2}', "
					. "invoice_tax = '{$invoiceTax}', "
                    . "general_vendor_id = {$generalVendorId}, "
					. "po_id = {$stockpileContractId3}, "
					. "shipmentId = {$shipmentId1}, "
                    . "price = {$price}, "
					. "remarks = '{$remarks}' "
                    . "WHERE invoice_id = {$invoiceId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

       if($result !== false) {
           if($boolNew) {
                $invoiceId = $myDatabase->insert_id;
		   }
            

            $return_value = '|OK|Invoice has successfully inserted/updated.'. $addMessage .'|'. $invoiceId .'|';
			
			$sql = "UPDATE `invoice_detail` SET invoice_id = {$invoiceId} WHERE invoice_id IS NULL AND entry_by = {$_SESSION['userId']}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			/*		
			if($boolUpdateInvoice){
				$sql = "UPDATE `invoice` SET invoice_dp = {$invoiceId} WHERE invoice_id IN ($slipNos)";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
					
				$sql = "UPDATE `invoice` SET invoice_status = 1 WHERE invoice_id IN ($slipNos)";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			}*/
            
          //  insertGeneralLedger($myDatabase, 'INVOICE', $invoiceId);
            
            unset($_SESSION['invoice']);
        } else {
            $return_value = '|FAIL|Insert/update invoice failed.'. $sql .'||';
			
        }
		} else {
			 $return_value = '|FAIL|Please insert correct amount.'. $addMessage .'||';
		}
    } else {
        $return_value = '|FAIL|Please fill the required fields.'. $addMessage .'||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_invoice') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $invoiceId = $myDatabase->real_escape_string($_POST['invoiceId']);
    // </editor-fold>
    
    if($invoiceId != '') {
		
		$sql = "UPDATE `invoice` SET invoice_status = 0 WHERE invoice_dp = {$invoiceId} AND invoice_method = 2";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		$sql = "UPDATE `invoice_detail` SET invoice_detail_status = 0 WHERE invoice_id = {$invoiceId} AND invoice_method_detail = 2";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
        $sql = "DELETE FROM `invoice` WHERE invoice_id = {$invoiceId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
        
        if($result !== false) {
            $return_value = '|OK|Invoice has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete invoice failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'return_invoice') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $invoice_Id = $myDatabase->real_escape_string($_POST['invoiceId']);
    // </editor-fold>
   
    if($invoice_Id != '') {
		
		$sql = "UPDATE invoice SET " 
        				. "payment_status = 2, "
						. "invoice_status = 1, "
                        . "sync_by = {$_SESSION['userId']}, "
                        . "sync_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . " WHERE invoice_id = {$invoice_Id}";
		$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
		
        
        if($result !== false) {
            $return_value = '|OK|Invoice has successfully returned.|';
			
			$sql = "SELECT GROUP_CONCAT(invoice_detail_id) AS invoice_detail_id FROM invoice_detail WHERE invoice_id = {$invoice_Id}";
			$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			if($result->num_rows == 1) {
				$row = $result->fetch_object();
				$invoiceId = $row->invoice_detail_id;
				
				$sqldp = "UPDATE invoice_dp SET " 
        				. "status = 1 "
                        . " WHERE invoice_detail_id IN ({$invoiceId})";
				$resultdp = $myDatabase->query($sqldp, MYSQLI_STORE_RESULT);
			}
			 insertGeneralLedger($myDatabase, 'RETURN INVOICE', $invoiceId);
			 
        } else {
            $return_value = '|FAIL|Returned invoice failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_po_pks') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $po_pks_id = $myDatabase->real_escape_string($_POST['po_pks_id']);
    // </editor-fold>
    
    if($po_pks_id != '') {
        $sql = "DELETE FROM `po_pks` WHERE po_pks_id = {$po_pks_id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Contract has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'po_pks_data') {
    // <editor-fold defaultstate="collapsed" desc="contract_data">
    
    $return_value = '';
    $addMessage = '';
    $boolNew = false;
    $boolContinue = true;
    $boolUpdate = false;
    $boolInsertVendor = false;
    $boolVendorExists = false;
	//$boolContractExists = false;
    $boolRecalculate = false;
    $boolPriceUp = false;
    $boolPriceDown = false;
    $boolQuantityUp = false;
    $boolQuantityDown = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $po_pks_id = $myDatabase->real_escape_string($_POST['po_pks_id']);
    //$contractType = $myDatabase->real_escape_string($_POST['contractType']);
    $contractNo = $myDatabase->real_escape_string($_POST['contractNo']);
	$spbNo = $myDatabase->real_escape_string($_POST['spbNo']);
    //$contractSeq = $myDatabase->real_escape_string($_POST['contractSeq']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    //$vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    //$vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    //$vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    //$npwp = $myDatabase->real_escape_string($_POST['npwp']);
    //$ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $contract = $myDatabase->real_escape_string($_POST['contract']);
	$spb = $myDatabase->real_escape_string($_POST['spb']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
	$notes = $myDatabase->real_escape_string($_POST['notes']);
	
  $finalStatus = $myDatabase->real_escape_string($_POST['finalStatus']);
    // </editor-fold>
    
    /*if($vendorId == 'INSERT') {
        if($vendorCode != '' && $vendorName != '' && $vendorAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$vendorCode}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($result !== false && $result->num_rows > 0) {
                $boolVendorExists = true;
                $addMessage = ' Vendor already exists.';
            } elseif($result !== false && $result->num_rows == 0) {
                $ppnValue = 0;
                $pphValue = 0;

                $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
                $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
                if($resultPPN !== false && $resultPPN->num_rows == 1) {
                    $rowPPN = $resultPPN->fetch_object();
                    $ppnValue = $rowPPN->tax_value;
                }

                $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
                $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                if($resultPPh !== false && $resultPPh->num_rows == 1) {
                    $rowPPh = $resultPPh->fetch_object();
                    $pphValue = $rowPPh->tax_value;
                }
                
                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                        . "UPPER('{$vendorCode}'), '{$vendorName}', '{$vendorAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $vendorId = $myDatabase->insert_id;
                    $boolInsertVendor = true;
                } 
            }
        } else {
            $boolInsertVendor = false;
        }
    } else {
        $boolInsertVendor = true;
    }
    */
    if ($po_pks_id == '') {
        $boolNew = true;
        
    }
	
	if ($contract != '' && $spb != '') {
        $purchasingId = $contract;
    }elseif ($contract != '' && $spb == '') {
		$purchasingId = $contract;
	}elseif ($contract == '' && $spb != '') {
		$purchasingId = $spb;
	}
    
    if($vendorId != '' && $currencyId != '' && $price != '' && $quantity != '' && $stockpileId != '' && $contractNo != '' && $spbNo != '' && $purchasingId != '') {
        
        if($exchangeRate == '') {
            $exchangeRate = 1;
        }
        
        $priceConverted = $price * $exchangeRate;
        
        if($boolNew) {
			 $sql = "SELECT * FROM `po_pks` WHERE UPPER(contract_no) = UPPER('{$contractNo}')";
        } else {
            $sql = "SELECT * FROM `po_pks` WHERE UPPER(contract_no) = UPPER('{$contractNo}') AND po_pks_id <> {$po_pks_id}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
			
			if($boolNew) {
           /* $sql = "SELECT * FROM vendor WHERE vendor_id = {$vendorId}";
            $resultVendor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultVendor !== false && $resultVendor->num_rows == 1) {
                $rowVendor = $resultVendor->fetch_object();
                $vendorCode = $rowVendor->vendor_code;
            }
            
            $checkPoNo = $contractType .'-'. $vendorCode .'-'. $currentYearMonth;
            if($contractSeq != "") {
                $poNo = $checkPoNo .'-'. $contractSeq;
            } else {
//            $sql = "SELECT RIGHT(po_no, 1) + 1 AS next_po FROM contract WHERE po_no LIKE '{$checkPoNo}%' ORDER BY entry_date DESC LIMIT 1";
//            $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//            $rowPo = $resultPo->fetch_object();
//            $nextPoNo = $rowPo->next_po;
//            $poNo = $checkPoNo .'-'. $nextPoNo;
                $sql = "SELECT po_no FROM contract WHERE company_id = {$_SESSION['companyId']} AND po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
                $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultPo->num_rows == 1) {
                    $rowPo = $resultPo->fetch_object();
                    $splitPoNo = explode('-', $rowPo->po_no);
                    $lastExplode = count($splitPoNo) - 1;
            		$nextPoNo = ((float) $splitPoNo[$lastExplode]) + 1;
                    $poNo = $checkPoNo .'-'. $nextPoNo;
                } else {
                    $poNo = $checkPoNo .'-1';
                }
            }*/
            
            
           $sql = "INSERT INTO `po_pks` (contract_no, spb_no, stockpile_id, vendor_id, currency_id, exchange_rate, price, price_converted, "
                    . "quantity, notes, company_id, entry_by, entry_date, purchasing_id,final_status) VALUES ("
                    . "'{$contractNo}', '{$spbNo}', {$stockpileId}, {$vendorId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, "
                    . "{$quantity}, '{$notes}', {$_SESSION['companyId']}, {$_SESSION['userId']},
                     STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$purchasingId},{$finalStatus})";
        } else {
			
			$boolUpdate = true;
            /*$sql = "SELECT * FROM po_pks WHERE contract_id = {$po_pks_id}";
            $resultContract = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            $rowContract = $resultContract->fetch_object();
            
            $sql = "SELECT * FROM vendor WHERE vendor_id = {$vendorId}";
            $resultVendor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultVendor !== false && $resultVendor->num_rows == 1) {
                $rowVendor = $resultVendor->fetch_object();
                $vendorCode = $rowVendor->vendor_code;
            }
            
            if($vendorId != $rowContract->vendor_id) {
                $checkPoNo = $contractType .'-'. $vendorCode .'-'. $currentYearMonth;
    //            $sql = "SELECT RIGHT(po_no, 1) + 1 AS next_po FROM contract WHERE po_no LIKE '{$checkPoNo}%' ORDER BY entry_date DESC LIMIT 1";
    //            $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    //            $rowPo = $resultPo->fetch_object();
    //            $nextPoNo = $rowPo->next_po;
    //            $poNo = $checkPoNo .'-'. $nextPoNo;
                $sql = "SELECT po_no FROM contract WHERE company_id = {$_SESSION['companyId']} AND po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
                $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultPo->num_rows == 1) {
                    $rowPo = $resultPo->fetch_object();
                    $splitPoNo = explode('-', $rowPo->po_no);
                    $lastExplode = count($splitPoNo) - 1;
            		$nextPoNo = ((float) $splitPoNo[$lastExplode]) + 1;
                    $poNo = $checkPoNo .'-'. $nextPoNo;
                } else {
                    $poNo = $checkPoNo .'-1';
                }
            } else {
                $poNo = $rowContract->po_no;
            }
            
            if($quantity != $rowContract->quantity) {
                $sql = "SELECT * FROM stockpile_contract WHERE contract_id = {$contractId}";
                $resultSC = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSC->num_rows == 1) {
                    $boolUpdate = true;
                } else {
                    $sql = "DELETE FROM stockpile_contract WHERE contract_id = {$contractId}";
                    $resultDel = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $addMessage = ' Please add stockpile in stockpile tab.';
                }
                
                $boolRecalculate = true;
                
                if((float) $quantity > (float) $rowContract->quantity) {
                    $boolQuantityUp = true;
                } else {
                    $boolQuantityDown = true;
                }
            }
            
            if($price != $rowContract->price) {
                $boolRecalculate = true;
                
                if((float) $price > (float) $rowContract->price) {
                    $boolPriceUp = true;
                } else {
                    $boolPriceDown = true;
                }
            }*/
			$sqlp2 = "SELECT * FROM po_pks WHERE po_pks_id = {$po_pks_id}";
				$resultp2 = $myDatabase->query($sqlp2, MYSQLI_STORE_RESULT);
					if ($resultp2->num_rows == 1) {
						while($rowp2 = $resultp2->fetch_object()){
							$p2 = $rowp2->purchasing_id;
							
			$sqlp3 = "UPDATE purchasing SET admin_input = NULL WHERE purchasing_id = {$p2}";
                    $resultp3 = $myDatabase->query($sqlp3, MYSQLI_STORE_RESULT);
						
						}
					}
            
            $sql = "UPDATE `po_pks` SET "
                    . "contract_no = '{$contractNo}', "
                    . "spb_no = '{$spbNo}', "
                    . "vendor_id = {$vendorId}, "
                    . "currency_id = {$currencyId}, "
                    . "exchange_rate = {$exchangeRate}, "
                    . "price = {$price}, "
                    . "price_converted = {$priceConverted}, "
                    . "quantity = {$quantity}, "
					. "purchasing_id = {$purchasingId}, "
					. "notes = '{$notes}', "
          	. "final_status = {$finalStatus} "
                    . "WHERE po_pks_id = {$po_pks_id}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
          /*  if($boolNew) {
                $contractId = $myDatabase->insert_id;
                
                $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                        . "{$stockpileId}, {$contractId}, {$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            } else {*/
			if($boolUpdate) {
				
				
				//echo $sql;
				$sqlC = "SELECT contract_id FROM po_contract
                                WHERE po_pks_id = {$po_pks_id}";
                $resultC = $myDatabase->query($sqlC, MYSQLI_STORE_RESULT);
                    if($resultC !== false && $resultC->num_rows >= 1) {
                      while($rowC = $resultC->fetch_object()){
                        $contractId = $rowC->contract_id;
						
                    
					$sqla = "UPDATE contract SET "
					. "vendor_id = {$vendorId}, "
                    . "price = {$price}, "
                    . "price_converted = {$priceConverted} "
					. "WHERE contract_id = {$contractId}";
                    $resulta = $myDatabase->query($sqla, MYSQLI_STORE_RESULT);
					
					insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);
					
				$sqlNotim = "SELECT t.`transaction_id`, t.`slip_no`, c.price_converted FROM `transaction` t
							LEFT JOIN stockpile_contract sc ON sc.`stockpile_contract_id` = t.`stockpile_contract_id`
							LEFT JOIN contract c ON sc.contract_id = c.contract_id
							WHERE sc.`contract_id` = {$contractId}";
				$resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
					if ($resultNotim->num_rows >= 1) {
						while($rowNotim = $resultNotim->fetch_object()){
							$tId = $rowNotim->transaction_id;
							$unit_price = $rowNotim->price_converted;
					 
					 $sqlb = "UPDATE transaction SET "
                    . "unit_price = {$unit_price}"
					. "WHERE transaction_id = {$tId}";
                    $resultb = $myDatabase->query($sqlb, MYSQLI_STORE_RESULT);
				
					insertGeneralLedger($myDatabase, 'NOTA TIMBANG2', "NULL", "NULL", "NULL", $tId);
				
					}
			
				}
					}
                }
				
				
			}
			
			
               
			$sqlp = "UPDATE purchasing SET "
                    . "admin_input = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),"
                    . "open_add = 0 "					
					. "WHERE purchasing_id = {$purchasingId}";
                    $resultp = $myDatabase->query($sqlp, MYSQLI_STORE_RESULT); 
					
			$sqlu = "call update_purchasing ( {$purchasingId})";
                    $resultp = $myDatabase->query($sqlu, MYSQLI_STORE_RESULT);
					if ($resultp->num_rows == 1) {
						while($rowp2 = $resultp->fetch_object()){
							if($rowp2->ho == "1"){
								if(isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0 ){
									$filename = $_FILES['imagefile']['name'];
									$ext = pathinfo($filename, PATHINFO_EXTENSION);
									$allowed = array('pdf','jpg','jpeg','png','bmp');
									$attachmentPath = "./import/1/stockpile-" .$stockpileId."/1/".$vendorId;
									$attachmentPath2 = "http://10.15.14.56/purchasing/import/1/stockpile-".$stockpileId."/1/".$vendorId;
									echo $attachmentPath. " / ".$attachmentPath2;
									if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
										$temp = mkdir($attachmentPath, 0755, TRUE);
									else
										$temp = TRUE;

									if ($temp === TRUE) {
										$attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
										$attachmentPath2 .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
										
										$sqlp = "UPDATE purchasing SET "
										. "upload_file = '$attachmentPath2'"
										. "WHERE purchasing_id = {$purchasingId}";
										$resultp = $myDatabase->query($sqlp, MYSQLI_STORE_RESULT); 
										
										if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
											$boolContinue = FALSE;
											$return_value = '|FAIL|Error while uploading file.|';
										}
									} else {
										$boolContinue = FALSE;
										$return_value = '|FAIL|Error while creating directory.|';
									}
								}
								
								}
						}
							
						
				
				}

            $return_value = '|OK|Contract has successfully inserted/updated.'. $addMessage .'|'. $sql .'|';
            
          //  insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", "NULL", $po_pks_id);
            
            unset($_SESSION['contract']);
        } else {
            $return_value = '|FAIL|Insert/update contract failed.'. $addMessage .'||';
        }
		}else {
            $return_value = '|FAIL|Contract No. already exists.||';
        }
			}else {
        $return_value = '|FAIL|Please fill the required fields.'. $addMessage .'||';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_contract') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    // </editor-fold>
    
    if($contractId != '') {
		$sql = "UPDATE `po_pks` po LEFT JOIN po_contract poc ON po.po_pks_id = poc.po_pks_id
				SET po_status = 0 WHERE po.po_status = 1 AND poc.contract_id = {$contractId}";
        $result1 = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
		$sql = "UPDATE `po_pks` po LEFT JOIN po_contract poc ON po.po_pks_id = poc.po_pks_id
				SET po.lock_contract = 0 WHERE po.lock_contract = 1 AND poc.contract_id = {$contractId}";
        $result1 = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
        $sql = "DELETE FROM `contract` WHERE contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
		$sql = "DELETE FROM `po_contract` WHERE contract_id = {$contractId}";
        $result1 = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Contract has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'lock_contract') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    // </editor-fold>
    
    if($contractId != '') {
        $sql = "UPDATE `contract` SET contract_status = 1 WHERE contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Contract has successfully locked.|';
        } else {
            $return_value = '|FAIL|locked contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'akses_invoice') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    // </editor-fold>
    
    if($contractId != '') {
        $sql = "UPDATE `contract` SET invoice_status = 0 WHERE contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Contract has successfully Opened.|';
        } else {
            $return_value = '|FAIL|Opened contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'cancel_sales') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $sales_Id = $myDatabase->real_escape_string($_POST['sales_Id']);
    // </editor-fold>
    
    if($sales_Id != '') {
        $sql = "UPDATE `sales` SET sales_status = 4 WHERE sales_id = {$sales_Id}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Sales has successfully Canceled.|';
        } else {
            $return_value = '|FAIL|Canceled Sales failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'close_invoice') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    // </editor-fold>
    
    if($contractId != '') {
        $sql = "UPDATE `contract` SET invoice_status = 1 WHERE contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Contract has successfully closed.|';
        } else {
            $return_value = '|FAIL|Closed contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'unlock_contract') {
    // <editor-fold defaultstate="collapsed" desc="delete_contract">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    // </editor-fold>
    
    if($contractId != '') {
        $sql = "UPDATE `contract` SET contract_status = 0 WHERE contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Contract has successfully locked.|';
        } else {
            $return_value = '|FAIL|locked contract failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'adjustment_data') {
    // <editor-fold defaultstate="collapsed" desc="user_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $adjustment = $myDatabase->real_escape_string($_POST['adjustment']);
    $adjustmentAcc = $myDatabase->real_escape_string($_POST['adjustmentAcc']);
    $adjustmentNotes = $myDatabase->real_escape_string($_POST['adjustmentNotes']);
	$adjustmentDate = $myDatabase->real_escape_string($_POST['adjustmentDate']);
	$contractId = $myDatabase->real_escape_string($_POST['contractId']);
	$ppn = $myDatabase->real_escape_string($_POST['ppn']);
    
    // </editor-fold>
    
    
    
   
        if($contractId != '' && $adjustment != '' && $adjustmentAcc != '' && $adjustmentNotes != '' && $adjustmentDate != '' && $ppn != '') {
            
           
                    $sql = "UPDATE `contract` SET "
                            . "adjustment = {$adjustment}, "
                            . "adjustment_acc = {$adjustmentAcc}, "
                            . "adjustment_notes = '{$adjustmentNotes}', "
							. "adjustment_ppn = {$ppn}, "
                            . "adjustment_date = STR_TO_DATE('{$adjustmentDate}', '%d/%m/%Y')"
                            . "WHERE contract_id = {$contractId}";
                
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                
                if($result !== false) {
                    
                    $return_value = '|OK|adjustment has successfully inserted/updated.||';
					
					insertGeneralLedger($myDatabase, 'CONTRACT ADJUSTMENT', "NULL", "NULL", $contractId);
					
                } else {
                    $return_value = '|FAIL|Insert/update adjustment failed.||';
					echo $sql;
                }
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'contract_data') {
    // <editor-fold defaultstate="collapsed" desc="contract_data">
    
    $return_value = '';
    $addMessage = '';
    $boolNew = false;
    $boolContinue = true;
    $boolUpdate = false;
    $boolInsertVendor = false;
    $boolVendorExists = false;
	//$boolContractExists = false;
    $boolRecalculate = false;
    $boolPriceUp = false;
    $boolPriceDown = false;
    $boolQuantityUp = false;
    $boolQuantityDown = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
	$po_pks_id = $myDatabase->real_escape_string($_POST['po_pks_id']);
    $contractType = $myDatabase->real_escape_string($_POST['contractType']);
    $contractNo = $myDatabase->real_escape_string($_POST['generatedContractNo']);
    $contractSeq = $myDatabase->real_escape_string($_POST['contractSeq']);
	$contractNo2 = $myDatabase->real_escape_string($_POST['contractNo2']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
	//$spbNo = $myDatabase->real_escape_string($_POST['spbNo']);
    //$vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    //$vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    //$vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    //$npwp = $myDatabase->real_escape_string($_POST['npwp']);
    //$ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $poNo = $myDatabase->real_escape_string($_POST['generatedPoNo']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpile_id']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty']));
	$adjustment = str_replace(",", "", $myDatabase->real_escape_string($_POST['adjustment']));
	$notes = $myDatabase->real_escape_string($_POST['notes']);
	$balance = $myDatabase->real_escape_string($_POST['balance']);
	$qty_rule = $myDatabase->real_escape_string($_POST['qty_rule']);
    // </editor-fold>
    
    if ($contractId == '') {
        $boolNew = true;
        if($stockpileId == '') {
            $boolContinue = false;
        }
    }
	
	if ($currencyId == '') {
        
            $currencyId = 1;
        
    }
   
			
	if($balance >= $qty || $balance == 0){
				
    if($contractType != '' && $vendorId != '' && $currencyId != '' && $price != '' && $qty != '' && $boolContinue) {
        
        if($exchangeRate == '') {
            $exchangeRate = 1;
        }
			
        $priceConverted = $price * $exchangeRate;
    /*    
       if($boolNew) {
			 $sql = "SELECT * FROM `contract` WHERE UPPER(contract_no) = UPPER('{$contractNo}')";
        } else {
            $sql = "SELECT * FROM `contract` WHERE UPPER(contract_no) = UPPER('{$contractNo}') AND contract_id <> {$contractId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
			*/
			if($boolNew) {
           /* $sql = "SELECT * FROM vendor WHERE vendor_id = {$vendorId}";
            $resultVendor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultVendor !== false && $resultVendor->num_rows == 1) {
                $rowVendor = $resultVendor->fetch_object();
                $vendorCode = $rowVendor->vendor_code;
            }
            
            $checkPoNo = $contractType .'-'. $vendorCode .'-'. $currentYearMonth;
            if($contractSeq != "") {
                $poNo = $checkPoNo .'-'. $contractSeq;
            } else {
//            $sql = "SELECT RIGHT(po_no, 1) + 1 AS next_po FROM contract WHERE po_no LIKE '{$checkPoNo}%' ORDER BY entry_date DESC LIMIT 1";
//            $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//            $rowPo = $resultPo->fetch_object();
//            $nextPoNo = $rowPo->next_po;
//            $poNo = $checkPoNo .'-'. $nextPoNo;
                $sql = "SELECT po_no FROM contract WHERE company_id = {$_SESSION['companyId']} AND po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
                $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultPo->num_rows == 1) {
                    $rowPo = $resultPo->fetch_object();
                    $splitPoNo = explode('-', $rowPo->po_no);
                    $lastExplode = count($splitPoNo) - 1;
            		$nextPoNo = ((float) $splitPoNo[$lastExplode]) + 1;
                    $poNo = $checkPoNo .'-'. $nextPoNo;
                } else {
                    $poNo = $checkPoNo .'-1';
                }
            }*/
            
            
            $sql = "INSERT INTO `contract` (contract_type, po_no, contract_no, vendor_id, currency_id, exchange_rate, price, price_converted, "
                    . "quantity, notes, company_id, entry_by, entry_date, qty_rule) VALUES ("
                    . "'{$contractType}', '{$poNo}', '{$contractNo}', {$vendorId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, "
                    . "{$qty}, '{$notes}', {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$qty_rule})";
        } else {
           $sql = "SELECT * FROM contract WHERE contract_id = {$contractId}";
            $resultContract = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            $rowContract = $resultContract->fetch_object();
			
			$contractNo3 = substr($rowContract->contract_no, 0, -2);
         /*   
            $sql = "SELECT * FROM vendor WHERE vendor_id = {$vendorId}";
            $resultVendor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultVendor !== false && $resultVendor->num_rows == 1) {
                $rowVendor = $resultVendor->fetch_object();
                $vendorCode = $rowVendor->vendor_code;
            }
            
           if($vendorId != $rowContract->vendor_id) {
                $checkPoNo = $contractType .'-'. $vendorCode .'-'. $currentYearMonth;
    //            $sql = "SELECT RIGHT(po_no, 1) + 1 AS next_po FROM contract WHERE po_no LIKE '{$checkPoNo}%' ORDER BY entry_date DESC LIMIT 1";
    //            $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    //            $rowPo = $resultPo->fetch_object();
    //            $nextPoNo = $rowPo->next_po;
    //            $poNo = $checkPoNo .'-'. $nextPoNo;
                $sql = "SELECT po_no FROM contract WHERE company_id = {$_SESSION['companyId']} AND po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
                $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultPo->num_rows == 1) {
                    $rowPo = $resultPo->fetch_object();
                    $splitPoNo = explode('-', $rowPo->po_no);
                    $lastExplode = count($splitPoNo) - 1;
            		$nextPoNo = ((float) $splitPoNo[$lastExplode]) + 1;
                    $poNo = $checkPoNo .'-'. $nextPoNo;
                } else {
                    $poNo = $checkPoNo .'-1';
                }
            } else {
                $poNo = $rowContract->po_no;
            }
            */
            if($quantity != $rowContract->quantity) {
                $sql = "SELECT * FROM stockpile_contract WHERE contract_id = {$contractId}";
                $resultSC = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSC->num_rows == 1) {
                    $boolUpdate = true;
                } else {
                    $sql = "DELETE FROM stockpile_contract WHERE contract_id = {$contractId}";
                    $resultDel = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $addMessage = ' Please add stockpile in stockpile tab.';
                }
                
                $boolRecalculate = true;
                
                if((float) $quantity > (float) $rowContract->quantity) {
                    $boolQuantityUp = true;
                } else {
                    $boolQuantityDown = true;
                }
            }
            
            if($price != $rowContract->price) {
                $boolRecalculate = true;
                
                if((float) $price > (float) $rowContract->price) {
                    $boolPriceUp = true;
                } else {
                    $boolPriceDown = true;
                }
            }
			
			$sql = "UPDATE contract SET contract_no = REPLACE(contract_no, '{$contractNo3}', '{$contractNo2}') WHERE contract_id = {$contractId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			$sql = "UPDATE po_pks pop LEFT JOIN po_contract poc ON poc.po_pks_id = pop.po_pks_id SET pop.contract_no = '{$contractNo2}' WHERE poc.contract_id = {$contractId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            
            $sql = "UPDATE `contract` SET "
                    . "quantity = {$qty}, "
					. "adjustment = '{$adjustment}', "
					. "notes = '{$notes}', "
					. "qty_rule = '{$qty_rule}' "
                    . "WHERE contract_id = {$contractId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            if($boolNew) {
                $contractId = $myDatabase->insert_id;
                
                $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                        . "{$stockpileId}, {$contractId}, {$qty}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
				
				if($boolNew && $result!==false){
					$id = $myDatabase->insert_id;
					 $sqlsp = "CALL surattugas_generate2({$id})";
						$resultsp = $myDatabase->query($sqlsp, MYSQLI_STORE_RESULT);
						if($resultsp->num_rows == 1) {
							$rowsp = $resultsp->fetch_object();
							//$stockpileContractIds = $rowSC->stockpile_contract_ids;
						} 
				}
				
				$sql = "INSERT INTO po_contract (po_pks_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                        . "{$po_pks_id}, {$contractId}, {$qty}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
				$sql = "UPDATE po_pks SET lock_contract = 1 WHERE po_pks_id = {$po_pks_id}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
				if($qty == $balance){
					$sql = "UPDATE po_pks SET po_status = 1 WHERE po_pks_id = {$po_pks_id}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				}
					
            } else {
                if($boolUpdate) {
                    $sql = "UPDATE stockpile_contract SET quantity = {$qty} WHERE contract_id = {$contractId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
					$sql = "UPDATE po_contract SET quantity = {$qty} WHERE contract_id = {$contractId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                
                if($boolRecalculate) {
                    $stockpileContractIds = "";
                    
                    // get stockpile_contract_id to update payment, transaction
                    $sql = "SELECT group_concat(stockpile_contract_id) AS stockpile_contract_ids FROM stockpile_contract
                                WHERE contract_id = {$contractId}";
                    $resultSC = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultSC->num_rows == 1) {
                        $rowSC = $resultSC->fetch_object();
                        $stockpileContractIds = $rowSC->stockpile_contract_ids;
                    } 
                    
                    if($stockpileContractIds != "") {
                        if($boolPriceUp || $boolQuantityUp) {
                            // change all payment_status in contract = 0
                            // change all payment_method to 2 in payment
                            // change unit_price & inventory_value in transaction => if price up only
                            // change inventory_value in delivery => if price up only
                            // change cogs_amount in shipment & inventory_value in transaction for shipment => if price up only
                            // change payment if payment_id in shipment is not null
                        } elseif($boolPriceDown || $boolQuantityDown) {
                            
                        }
                    }
                }
            }
			
			 
            $return_value = '|OK|Contract has successfully inserted/updated.'. $addMessage .'|'. $contractId .'|';
            
            insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);
            
            unset($_SESSION['contract']);
        } else {
            $return_value = '|FAIL|Insert/update contract failed.'. $addMessage .'||';
        }
		/*}else {
            $return_value = '|FAIL|Contract No. already exists.||';
        }*/
			}
			else {
				 $return_value = '|FAIL|Please fill the required fields.'. $addMessage .'||';
        
    }
	}else {
       $return_value = '|FAIL|The quantity exceed the balance of the contract.|';
    }
    
    echo $return_value;
    // </editor-fold>
}/*
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'invoice_data') {
    // <editor-fold defaultstate="collapsed" desc="invoice_data">
    
    $return_value = '';
    $addMessage = '';
    $boolNew = false;
    $boolContinue = true;
    $boolUpdate = false;
    $boolInsertVendor = false;
    $boolVendorExists = false;
    $boolRecalculate = false;
    $boolPriceUp = false;
    $boolPriceDown = false;
    $boolQuantityUp = false;
    $boolQuantityDown = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $invoiceId = $myDatabase->real_escape_string($_POST['invoiceId']);
   // $contractType = $myDatabase->real_escape_string($_POST['contractType']);
   	$generatedInvoiceNo = $myDatabase->real_escape_string($_POST['generatedInvoiceNo']);
	$invoiceNo = $generatedInvoiceNo;
    //$contractSeq = $myDatabase->real_escape_string($_POST['contractSeq']);
    $generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId']);
    //$vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    //$vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    //$vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    //$npwp = $myDatabase->real_escape_string($_POST['npwp']);
    //$ppn = $myDatabase->real_escape_string($_POST['ppn']);
    //$pph = $myDatabase->real_escape_string($_POST['pph']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    //$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
	$amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
    // </editor-fold>
    
   
    
    if ($invoiceId == '') {
        $boolNew = true;
       // if($stockpileId == '') {
         //   $boolContinue = false;
        //}
    }
    
    if($generalVendorId != '' && $currencyId != '' && $price != '' && $quantity != '' && $amount != '' && $boolContinue) {
        
        if($exchangeRate == '') {
            $exchangeRate = 1;
        }
        
        
        
        if($boolNew) {
            
            
            $checkInvoiceNo = 'INV/JPJ/'. $currentYearMonth;
   
        $sql = "SELECT invoice_no FROM invoice WHERE company_id = {$_SESSION['companyId']} AND invoice_no LIKE '{$checkInvoiceNo}%' ORDER BY invoice_id DESC LIMIT 1";
        $resultInvoice = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($resultInvoice->num_rows == 1) {
            $rowInvoice = $resultInvoice->fetch_object();
            $splitInvoiceNo = explode('-', $rowInvoice->invoice_no);
            $lastExplode = count($splitInvoiceNo) - 1;
            $nextInvoiceNo = ((float) $splitInvoiceNo[$lastExplode]) + 1;
            $InvoiceNo = $checkPoNo .'/'. $nextInvoiceNo;
        } else {
            $InvoiceNo = $checkInvoiceNo .'/1';
        
    
            }
            $priceConverted = $price * $exchangeRate;
            
            $sql = "INSERT INTO `invoice` (invoice_no, general_vendor_id, currency_id, exchange_rate, quantity, price, price_converted, "
                    . "amount, company_id, entry_by, entry_date) VALUES ("
                    . "'{$invoiceNo}', {$generalVendorId}, {$currencyId}, {$exchangeRate}, {$quantity}, {$price}, {$priceConverted}, "
                    . "{$amount}, {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        } else {
            $sql = "SELECT * FROM invoice WHERE contract_id = {$invoiceId}";
            $resultInvoice = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            $rowInvoice = $resultInvoice->fetch_object();
            
           
            
            if($generalVendorId != $rowContract->general_vendor_id) {
                $checkInvoiceNo = 'INV/JPJ/'. $currentYearMonth;
   
        $sql = "SELECT invoice_no FROM invoice WHERE company_id = {$_SESSION['companyId']} AND invoice_no LIKE '{$checkInvoiceNo}%' ORDER BY invoice_id DESC LIMIT 1";
        $resultInvoice = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($resultInvoice->num_rows == 1) {
            $rowInvoice = $resultInvoice->fetch_object();
            $splitInvoiceNo = explode('-', $rowInvoice->invoice_no);
            $lastExplode = count($splitInvoiceNo) - 1;
            $nextInvoiceNo = ((float) $splitInvoiceNo[$lastExplode]) + 1;
            $InvoiceNo = $checkPoNo .'/'. $nextInvoiceNo;
        } else {
            $InvoiceNo = $checkInvoiceNo .'/1';
        
    
            }
            } else {
                $InvoiceNo = $rowInvoice->invoice_no;
            }
           
            
            $sql = "UPDATE `invoice` SET "
                    . "invoice_no = '{$invoiceNo}', "
                    . "general_vendor_id = {$generalVendorId}, "
                    . "currency_id = {$currencyId}, "
                    . "exchange_rate = {$exchangeRate}, "
                    . "price = {$price}, "
					. "amount = {$amount}, "
                    . "price_converted = {$priceConverted}, "
                    . "quantity = {$quantity} "
                    . "WHERE invoice_id = {$invoiceId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

       if($result !== false) {
        

            $return_value = '|OK|Contract has successfully inserted/updated.'. $addMessage .'|'. $invoiceId .'|';
            
           // insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", $contractId);
            
            unset($_SESSION['contract']);
        } else {
            $return_value = '|FAIL|Insert/update contract failed.'. $addMessage .'||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.'. $addMessage .'||';
    }
    
    echo $return_value;
    // </editor-fold>
}
*/
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'contract_stockpile_data') {
    // <editor-fold defaultstate="collapsed" desc="contract_stockpile_data">
    
    $return_value = '';
    $boolNew = false;
    $boolExceedQuantity = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    // </editor-fold>
    
    if ($stockpileContractId == '') {
        $boolNew = true;
    }
    
    if($stockpileId != '' && $quantity != '') {
        $sql = "SELECT * FROM contract WHERE contract_id = {$contractId}";
        $resultContract = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($resultContract !== false && $resultContract->num_rows == 1) {
            $rowContract = $resultContract->fetch_object();
            $totalQuantity = $rowContract->quantity;
        }
        
        $currentQuantity = 0;
        
        if($boolNew) {
            $sql = "SELECT * FROM `stockpile_contract` WHERE stockpile_id = {$stockpileId} AND contract_id = {$contractId}";
            $sqlQuantity = "SELECT COALESCE(SUM(quantity), 0) AS current_quantity FROM stockpile_contract WHERE stockpile_id = {$stockpileId} AND contract_id = {$contractId}";
        } else {
            $sql = "SELECT * FROM `stockpile_contract` WHERE stockpile_id = {$stockpileId} AND contract_id = {$contractId} AND stockpile_contract_id <> {$stockpileContractId}";
            $sqlQuantity = "SELECT COALESCE(SUM(quantity), 0) AS current_quantity FROM stockpile_contract WHERE stockpile_id = {$stockpileId} AND contract_id = {$contractId} AND stockpile_contract_id NOT IN ({$stockpileContractId})";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        $resultQuantity = $myDatabase->query($sqlQuantity, MYSQLI_STORE_RESULT);
        if($resultQuantity !== false && $resultQuantity->num_rows == 1) {
            $rowQuantity = $resultQuantity->fetch_object();
            $currentQuantity = $rowQuantity->current_quantity;
        }
        
        $maxQuantity = $totalQuantity - $currentQuantity;
        if($quantity > $maxQuantity) {
            $boolExceedQuantity = true;
        }

        if($result !== false && $result->num_rows == 0 && !$boolExceedQuantity) {
            if($boolNew) {
                $sql = "INSERT INTO `stockpile_contract` (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                        . "{$stockpileId}, {$contractId}, {$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `stockpile_contract` SET "
                        . "quantity = {$quantity}, "
						. "stockpile_id = {$stockpileId} "
                        . "WHERE stockpile_contract_id = {$stockpileContractId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
			
			if($boolNew && $result!==false){
				$id = $myDatabase->insert_id;
				 $sqlsp = "CALL surattugas_generate2({$id})";
                    $resultsp = $myDatabase->query($sqlsp, MYSQLI_STORE_RESULT);
                    if($resultsp->num_rows == 1) {
                        $rowsp = $resultsp->fetch_object();
                        //$stockpileContractIds = $rowSC->stockpile_contract_ids;
                    } 
			}
			
            if($result !== false) {
                $return_value = '|OK|Stockpile has successfully inserted/updated.|';
            } else {
                $return_value = '|FAIL|Insert/update stockpile failed.|';
            }
        } else {
            if($boolExceedQuantity) {
                $return_value = '|FAIL|Quantity exceed total quantity.|';
            } else {
                $return_value = '|FAIL|Stockpile already exists.|';
            }
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'contract_condition_data') {
    // <editor-fold defaultstate="collapsed" desc="contract_condition_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $conditionId = $myDatabase->real_escape_string($_POST['conditionId']);
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    $categoryId = $myDatabase->real_escape_string($_POST['categoryId']);
    $rule = $myDatabase->real_escape_string($_POST['rule']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    // </editor-fold>
    
    if ($conditionId == '') {
        $boolNew = true;
    }
    
    if($categoryId != '' && $rule != '') {
        if($boolNew) {
            $sql = "SELECT * FROM `condition` WHERE category_id = {$categoryId} AND contract_id = {$contractId}";
        } else {
            $sql = "SELECT * FROM `condition` WHERE category_id = {$categoryId} AND contract_id = {$contractId} AND condition_id <> {$conditionId}";
        }
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 0) {
            if($boolNew) {
                $sql = "INSERT INTO `condition` (category_id, contract_id, rule, remarks, entry_by, entry_date) VALUES ("
                        . "{$categoryId}, {$contractId}, '{$rule}', '{$remarks}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `condition` SET "
                        . "category_id = {$categoryId}, "
                        . "rule = '{$rule}', "
                        . "remarks = '{$remarks}' "
                        . "WHERE condition_id = {$conditionId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $return_value = '|OK|Condition has successfully inserted/updated.|';
            } else {
                $return_value = '|FAIL|Insert/update condition failed.|';
            }
        } else {
            $return_value = '|FAIL|Category already exists.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_transaction') {
    // <editor-fold defaultstate="collapsed" desc="delete_transaction">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $transactionId = $myDatabase->real_escape_string($_POST['transactionId']);
    // </editor-fold>
    
    if($transactionId != '') {
        $sql = "DELETE FROM `transaction` WHERE transaction_id = {$transactionId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Transaction has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete transaction failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_data">
    
    $return_value = '';
    $boolQuantity = true;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
    $transactionDate = $myDatabase->real_escape_string($_POST['transactionDate']);
    $loadingDate = $myDatabase->real_escape_string($_POST['loadingDate']);
    $transactionDate2 = $myDatabase->real_escape_string($_POST['transactionDate2']);
    $vehicleNo = $myDatabase->real_escape_string($_POST['vehicleNo']);
    $vehicleNo2 = $myDatabase->real_escape_string($_POST['vehicleNo2']);
    $unloadingCostId = $myDatabase->real_escape_string($_POST['unloadingCostId']);
    $unloadingDate = $myDatabase->real_escape_string($_POST['unloadingDate']);
    $freightCostId = $myDatabase->real_escape_string($_POST['freightCostId']);
	$handlingCostId = $myDatabase->real_escape_string($_POST['handlingCostId']);
    $permitNo = $myDatabase->real_escape_string($_POST['permitNo']);
    $transactionType = $myDatabase->real_escape_string($_POST['transactionType']);
    $sendWeightRule = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight']));
    $sendWeight2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight2']));
    $blWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['blWeight']));
    $brutoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['brutoWeight']));
    $tarraWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['tarraWeight']));
    $nettoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['nettoWeight']));
    $notes = $myDatabase->real_escape_string($_POST['notes']);
	$notes2 = $myDatabase->real_escape_string($_POST['notes2']);
    $driver = $myDatabase->real_escape_string($_POST['driver']);
    $block = $myDatabase->real_escape_string($_POST['block']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $supplierId = $myDatabase->real_escape_string($_POST['supplierId']);
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $isTaxable = $myDatabase->real_escape_string($_POST['isTaxable']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $stockpileCode = '';
    $unitPrice = 0;
    $balanceQuantity = 0;
    $contractId = 0;
    $custTaxId = 'NULL';
    $curahTaxId = 'NULL';
    $ucTaxId = 0;
    $fcTaxId = 0;
	$t_date = str_replace('/', '-', $unloadingDate);
	$t_date2 = str_replace('/', '-', $transactionDate2);
	$currentYear2 = date('y', strtotime($t_date));
	$currentYear3 = date('y', strtotime($t_date2));
	$slipUpload = $myDatabase->real_escape_string($_POST['idSuratTugas']);
    // </editor-fold>
	
	
	$allowInsert = false;
	$allowInsert2 = false;
	$date = new DateTime();
	$todayDate = $date->format('Y-m-d');
	$date1 = new DateTime($todayDate);
	
	$dateTrans = str_replace("/", "-", $myDatabase->real_escape_string($_POST['unloadingDate']));
	$dt = date('Y-m-d',strtotime($dateTrans));
	$date2 = new DateTime($dt);
	$a = $date1->format('Y-m-d');
	$b = $date2->format('Y-m-d');
	$diff =date_diff(date_create($a),date_create($b));
    $interval = $diff->days;
	
	$dateTrans2 = str_replace("/", "-", $myDatabase->real_escape_string($_POST['transactionDate2']));
	$dt2 = date('Y-m-d',strtotime($dateTrans2));
	$date22 = new DateTime($dt2);
	$a2 = $date1->format('Y-m-d');
	$b2 = $date22->format('Y-m-d');
	$diff2 =date_diff(date_create($a2),date_create($b2));
    $interval2 = $diff2->days;
	
	if($interval < 5){
		$allowInsert = true;
	}
	
	if($interval2 < 5){
		$allowInsert2 = true;
	}
    
	$sql = "SELECT * FROM user_module WHERE user_id = {$_SESSION['userId']} and module_id = 30";
	$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
	if($result->num_rows > 0) {
    while($row = $result->fetch_object()) {
        if($row->module_id == 30) {
            $allowInsert = true;
			$allowInsert2 = true;
        }
	}
}
	
    if($isTaxable == '') {
        $isTaxable = 0;
    }
    
    if($ppn == '') {
        $ppn = 0;
    }
    
    if($pph == '') {
        $pph = 0;
    }
	
	
	
	
    
    if($transactionType == 1) {
		if($allowInsert){
        // <editor-fold defaultstate="collapsed" desc="IN">
        if($stockpileId != '' && $stockpileContractId != '' && $loadingDate != '' && $vehicleNo != '' && $unloadingCostId != '' &&
                $unloadingDate != '' && $freightCostId != '' && $handlingCostId != '' && $transactionType != '' && $sendWeightRule != '' &&
                $brutoWeight != '' && $tarraWeight != '' && $driver != '' && $vendorId != '' && $laborId != '') {

            if($supplierId == '') {
                $supplierId = "NULL";
            }
            if($slipUpload == '') {
			$slipUpload = 0;
			}
            // check balance contract & get unit price
            $sql = "SELECT s.stockpile_code, con.price_converted, sc.contract_id, con.contract_type, con.qty_rule,
                        ((SELECT COALESCE(SUM(quantity), 0) FROM stockpile_contract WHERE contract_id = sc.contract_id
                        ) - con.adjustment) - (
                            SELECT CASE WHEN c.contract_type = 'C' THEN COALESCE(SUM(t.quantity), 0)
                ELSE COALESCE(SUM(t.send_weight), 0) END 
                FROM TRANSACTION t LEFT JOIN stockpile_contract sc ON t.stockpile_contract_id = sc.`stockpile_contract_id`
                LEFT JOIN contract c ON c.contract_id = sc.contract_id
                WHERE sc.contract_id =  con.contract_id
                        ) AS balance, s.freight_weight_rule, s.curah_weight_rule, v.pph_tax_id
                    FROM stockpile_contract sc
                    INNER JOIN stockpile s
                        ON s.stockpile_id = sc.stockpile_id
                    INNER JOIN contract con
                        ON con.contract_id = sc.contract_id
                    INNER JOIN vendor v
                        ON v.vendor_id = con.vendor_id
                    WHERE stockpile_contract_id = {$stockpileContractId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $contractId = $rowStockpile->contract_id;
                $unitPrice = $rowStockpile->price_converted;
                $contractType = $rowStockpile->contract_type;
                $freightWeightRule = $rowStockpile->freight_weight_rule;
                $curahWeightRule = $rowStockpile->curah_weight_rule;
                if($contractType == 'P') {
                    $balanceQuantity = $rowStockpile->balance;
                } elseif($contractType == 'C') {
                    $balanceQuantity = $rowStockpile->balance;
                    if($rowStockpile->pph_tax_id != 0 && $rowStockpile->pph_tax_id != '') {
                        $curahTaxId = $rowStockpile->pph_tax_id;
                    }
                }
            $qty_rule = $rowStockpile->qty_rule;
				if($qty_rule == 0){
					$sendWeight = $sendWeightRule;
				}else if($qty_rule == 1){
					$sendWeight = $nettoWeight;
				}else{
					if($sendWeightRule < $nettoWeight){
						$sendWeight = $sendWeightRule;
					} elseif($nettoWeight < $sendWeightRule) {
						$sendWeight = $nettoWeight;
					}else{
						$sendWeight = $sendWeightRule;
					}
				
				}
            }

            // get netto weight
            //$nettoWeight = $brutoWeight - $tarraWeight;
            
            // get freight weight
			$freightRule = '';
			$freightQuantity = 0;
			$sqlfc = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                    $resultFreight = $myDatabase->query($sqlfc, MYSQLI_STORE_RESULT);
                    if($resultFreight !== false && $resultFreight->num_rows == 1) {
                        $rowFreight = $resultFreight->fetch_object();
                        $freightRule = $rowFreight->freight_rule;
					
                       
                    }
					
			if($freightRule == 0 && $nettoWeight < $sendWeight){
				$freightQuantity = $nettoWeight;
			}else if($freightRule == 0 && $nettoWeight > $sendWeight){
				$freightQuantity = $sendWeight;
			}else if($freightRule == 1){
				$freightQuantity = $sendWeight;
			} else if($nettoWeight == $sendWeight){
				$freightQuantity = $sendWeight;
			}else {
                    $freightQuantity = $sendWeight;
                }
			
			/*if($freightRule == 1) {
				$freightQuantity = $sendWeight;
            }else if($freightRule == 0) {
                if($nettoWeight < $sendWeight) {
                    $freightQuantity = $nettoWeight;
                } else if($nettoWeight > $sendWeight) {
                    $freightQuantity = $sendWeight;
                } else {
                    $freightQuantity = $sendWeight;
                }
            }*/ /*elseif($freightWeightRule == 1) {
                $freightQuantity = $sendWeight;
            } elseif($freightWeightRule == 2) {
                $freightQuantity = $nettoWeight;
            } else {
                $freightQuantity = $sendWeight;
            }*/

            // get shrink condition
//            $quantity = $nettoWeight;
//            $sql = "SELECT * FROM `condition` WHERE category_id = 1 AND contract_id = {$contractId}";
//            $resultCondition = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//            if($resultCondition !== false && $resultCondition->num_rows == 1) {
//                $rowCondition = $resultCondition->fetch_object();
//                $quantity = ${$rowCondition->rule};
//            }

            if($sendWeight <= $balanceQuantity || ($contractType == 'C' && $balanceQuantity >=0)) {
                // get shrink
                $shrink = 0;
                if($contractType == 'P') {
                    if($nettoWeight < $sendWeight) {
                        $quantity = $nettoWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } elseif($nettoWeight > $sendWeight) {
                        $quantity = $sendWeight;
                        $shrink = 0;
                    } else {
                        $quantity = $sendWeight;
                    }
                } elseif($contractType == 'C') {
                    if($curahWeightRule == 0) {
                        if($nettoWeight < $sendWeight) {
                            $quantity = $nettoWeight;
                            $shrink = $sendWeight - $nettoWeight;
                        } elseif($nettoWeight > $sendWeight) {
                            $quantity = $sendWeight;
                            $shrink = 0;
                        } else {
                            $quantity = $sendWeight;
                        }
                    } elseif($curahWeightRule == 1) {
                        $quantity = $sendWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } elseif($curahWeightRule == 2) {
                        $quantity = $nettoWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } else {
                        $quantity = $sendWeight;
                    }
                }

                // get next slip no
                // $checkSlipNo = $stockpileCode /*.'-'. $currentYear*/;
				
					$checkSlipNo = $stockpileCode .'-'. $currentYear2;
				
//                $sql = "SELECT LPAD(COUNT(1) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ";
//                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;

                // get freight cost
                 if($freightCostId == 'NONE') {
                    $freightCostId = 'NULL';
                    $freightPrice = 0;
					//$freightQuantity2111 = 0;
                } else {
                    $sqlF = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                    $resultF = $myDatabase->query($sqlF, MYSQLI_STORE_RESULT);
                    if($resultF !== false && $resultF->num_rows == 1) {
                        $rowF = $resultF->fetch_object();
                        $freightPrice = $rowF->price_converted;
					if($rowF->freight_rule == 1){
							//$freightQuantity2111 = $sendWeight;
						}else{
							//$freightQuantity2111 = $freightQuantity;
						}
                        if($rowF->pph_tax_id != 0 && $rowF->pph_tax_id != '') {
                            $fcTaxId = $rowF->pph_tax_id;
                        }else{
							$fcTaxId = 0;
						}
                    }
                }
			
			// get handling cost
				 if($handlingCostId == 'NONE') {
                    $handlingCostId = 'NULL';
					$handlingQuantity = 0;
					$handlingPrice = 0;
                } else {
                    $sql = "SELECT vhc.vendor_handling_id, vhc.price_converted, vh.pph_tax_id, vh.vendor_handling_rule
                            FROM `vendor_handling_cost` vhc 
                            INNER JOIN vendor_handling vh
                                ON vh.vendor_handling_id = vhc.vendor_handling_id
                            WHERE vhc.handling_cost_id = {$handlingCostId}";
                    $resultHandling = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultHandling !== false && $resultHandling->num_rows == 1) {
                        $rowHandling = $resultHandling->fetch_object();
                        $handlingPrice = $rowHandling->price_converted;
					if($rowHandling->vendor_handling_rule == 1){
							$handlingQuantity = $sendWeight;
						}else{
							$handlingQuantity = $nettoWeight;
						}
                        
                    }
                }
				
                // get unloading cost
                if($unloadingCostId == 'NONE') {
                    $unloadingCostId = 'NULL';
                    $unloadingPrice = 0;
                } else {
                    $sql = "SELECT uc.price_converted 
                            FROM `unloading_cost` uc 
                            WHERE uc.unloading_cost_id = {$unloadingCostId}";
                    $resultUnloading = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultUnloading !== false && $resultUnloading->num_rows == 1) {
                        $rowUnloading = $resultUnloading->fetch_object();
                        $unloadingPrice = $rowUnloading->price_converted;
                    }
                }
                
                if($laborId == 'NONE') {
                    $laborId = 'NULL';
                } else {
                    $sql = "SELECT l.pph_tax_id
                            FROM `labor` l
                            WHERE l.labor_id = {$laborId}";
                    $resultLabor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultLabor !== false && $resultLabor->num_rows == 1) {
                        $rowLabor = $resultLabor->fetch_object();
                        if($rowLabor->pph_tax_id != 0 && $rowLabor->pph_tax_id != '') {
                            $ucTaxId = $rowLabor->pph_tax_id;
                        } else{
							 $ucTaxId = 0;
						}
                    }
                }
                
                // get inventory value
                $inventoryValue = ($freightQuantity * $freightPrice) + $unloadingPrice + ($quantity * $unitPrice);

				//check double input
				$boolTiket = true;
				if($slipUpload != '' && $slipUpload != 'NULL' && $slipUpload != 0){
				
				$sqlTiket = "SELECT COUNT(*) as tiket FROM transaction WHERE t_timbangan = '{$slipUpload}'";
				$resultTiket = $myDatabase->query($sqlTiket, MYSQLI_STORE_RESULT);
                    if($resultTiket !== false && $resultTiket->num_rows == 1) {
					$rowTiket = $resultTiket->fetch_object();
						if($rowTiket->tiket >= 1){
							$boolTiket = false;
						}
					}
				}
				if($boolTiket){
                // insert into transaction
                $sql = "INSERT INTO `transaction` (slip_no, t_timbangan, stockpile_contract_id, transaction_date, loading_date, vehicle_no, labor_id, unloading_cost_id, "
                        . "unloading_date, freight_cost_id, handling_cost_id, permit_no, transaction_type, vendor_id, send_weight, bruto_weight, tarra_weight, "
                        . "netto_weight, notes, driver, freight_quantity, handling_quantity, quantity, shrink, freight_price, handling_price, unloading_price, unit_price, "
                        . "inventory_value, block, curah_tax_id, uc_tax_id, fc_tax_id, entry_by, entry_date) "
                        . "VALUES ('{$slipNo}', '{$slipUpload}', {$stockpileContractId}, STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), STR_TO_DATE('{$loadingDate}', '%d/%m/%Y'), "
                        . "'{$vehicleNo}', {$laborId}, {$unloadingCostId}, STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), {$freightCostId}, {$handlingCostId}, '{$permitNo}', "
                        . "{$transactionType}, {$supplierId}, {$sendWeight}, {$brutoWeight}, {$tarraWeight}, {$nettoWeight}, '{$notes}', "
                        . "'{$driver}', {$freightQuantity}, {$handlingQuantity}, {$quantity}, {$shrink}, {$freightPrice}, {$handlingPrice}, {$unloadingPrice}, {$unitPrice}, {$inventoryValue}, '{$block}', "
                        . "{$curahTaxId}, {$ucTaxId}, {$fcTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $return_value = '|OK|Transaction has inserted successfully.|';
                    
                    $transactionId = $myDatabase->insert_id;
                    
                    // if curah update contract and stockpile_contract quantity
                    if($contractType == 'C') {
                        /*$sql = "UPDATE contract SET quantity = {$quantity} WHERE contract_id = {$contractId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        
                        $sql = "UPDATE stockpile_contract SET quantity = {$quantity} WHERE stockpile_contract_id = {$stockpileContractId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/
                    }
						
						$sql = "UPDATE transaction_timbangan SET notim_status = 1 WHERE transaction_id = '{$slipUpload}'";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
					
						$sql = "CALL sp_shrink_weight({$transactionId})";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
						
						if($qty_rule !== 0){
						$sql = "INSERT INTO contract_netto (transaction_id, send_weight) VALUES ({$transactionId},{$sendWeightRule})";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
						}
                    
                    insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                    
                    unset($_SESSION['transaction']);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.| '.$sql.'';
                }
				}else{
					$return_value = '|FAIL|Tiket timbang sudah diinput.|';
				}
            } else {
                $return_value = '|FAIL|The quantity exceed the balance of the contract.|';
            }
        } else {
            $return_value = '|FAIL|Please fill the required fields.|'.$sql.'';
        }
		
	}else{
		$return_value = '|FAIL|Tanggal transaksi sudah lebih dari 5 hari.|';
	}
        // </editor-fold>
    } elseif($transactionType == 2) {
        // <editor-fold defaultstate="collapsed" desc="OUT">
		if($allowInsert2){
        if($stockpileId != '' && $salesId != '' && $shipmentId != '' && $transactionDate2 != '' && $vehicleNo2 != '' && $sendWeight2 != '' && $blWeight != '') {
           

		   // check stockpile detail & transaction balance
            $sql = "SELECT s.stockpile_code, s.stockpile_name, 
                        (
                            SELECT COALESCE(SUM(t.quantity), 0) FROM `transaction` t
                            INNER JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                            WHERE sc.stockpile_id = s.stockpile_id
                            AND t.transaction_type = 1
                        ) AS available_balance,
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction` 
                            WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                            AND transaction_type = 2
                        ) AS delivered_balance
                    FROM stockpile s
                    WHERE s.stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $stockpileName = $rowStockpile->stockpile_name;
                $availableBalance = $rowStockpile->available_balance;
                $deliveredBalance = $rowStockpile->delivered_balance;
            }
            
            // get sales detail
            $sql = "SELECT sl.quantity, sl.price_converted, sl.currency_id, sl.exchange_rate, sl.price, cust.pph_tax_id
                    FROM sales sl 
                    INNER JOIN customer cust
                        ON cust.customer_id = sl.customer_id
                    WHERE sl.sales_id = {$salesId}";
            $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSales !== false && $resultSales->num_rows == 1) {
                $rowSales = $resultSales->fetch_object();
                $salesBalance = $rowSales->quantity;
                $salesUnitPrice = $rowSales->price_converted;
                $salesCurrencyId = $rowSales->currency_id;
                $salesExchangeRate = $rowSales->exchange_rate;
                $salesOriginalUnitPrice = $rowSales->price;
                $custTaxId = $rowSales->pph_tax_id;
            }

            // get next slip no
			
					$checkSlipNo = $stockpileCode .'-'. $currentYear3;
				
            //$checkSlipNo = $stockpileCode /*.'-'. $currentYear*/;
//            $sql = "SELECT LPAD(COUNT(1) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ";
//            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSlip->num_rows == 0) {
                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }
            $rowSlipNo = $resultSlip->fetch_object();
            $nextSlipNo = $rowSlipNo->next_id;
            $slipNo = $checkSlipNo .'-'. $nextSlipNo;
            

//            if($sendWeight2 <= $availableBalance && $blWeight <= ($salesBalance - $deliveredBalance)) {
            if($sendWeight2 <= $availableBalance) {    
                $shrink = $sendWeight2 - $blWeight;
                
                // insert into transaction
                $sql = "INSERT INTO `transaction` (slip_no, shipment_id, transaction_date,unloading_date, vehicle_no, transaction_type, "
                        . "send_weight, notes, quantity, shrink, cust_tax_id, entry_by, entry_date) "
                        . "VALUES ('{$slipNo}', {$shipmentId}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), '{$vehicleNo2}', "
                        . "{$transactionType}, {$sendWeight2}, '{$notes2}', {$blWeight}, {$shrink}, {$custTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $transactionId = $myDatabase->insert_id;
                    
                    $return_value = '|OK|Transaction has inserted successfully.|';
                    
                    // insert into delivery
                    $sql = "SELECT t.* 
                            FROM transaction t 
                            WHERE t.stockpile_contract_id IN (
                                SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                            ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                              ORDER BY t.unloading_date ASC, t.slip_no ASC";
                    $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $totalInventoryValue = 0;
                    if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                        $balanceLeft = $sendWeight2;
                        while($rowDelivery = $resultDelivery->fetch_object()) {
                            $syncStatus = 0;
                            if($rowDelivery->sync_status == 1) {
                                $syncStatus = 2;
                            }
                            
                            if($balanceLeft > 0) {
                                if($rowDelivery->delivery_status == 0) {
                                    if($balanceLeft >= $rowDelivery->quantity) {
                                        $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                        $quantityTaken = $rowDelivery->quantity;
                                        $percentTaken = 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < $rowDelivery->quantity) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } elseif($rowDelivery->delivery_status == 2) {
                                    $totalTaken = 0;
                                    $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                    $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                        $rowTaken = $resultTaken->fetch_object();
                                        $totalTaken = $rowTaken->total_taken;
                                    }
                                    
                                    if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                        $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                        $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } 
                                
                                $deliveryValue = $quantityTaken * $salesUnitPrice;
                                $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                $percentTaken = $percentTaken * 100;

                                $sql = "INSERT INTO `delivery` (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                        . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                        . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                                $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus}, sync_status = {$syncStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    }
                    
                    //$updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                    $updateInventoryValue = $totalInventoryValue;
                    echo $updateInventoryValue;
					echo 'AA';
                    $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    
                    // update shipment
                    $cogsAmount = $updateInventoryValue;
                    if($salesCurrencyId != 1) {
                        $cogsAmount = $updateInventoryValue / $salesExchangeRate;
                    }
                    $invoiceAmount = $blWeight * $salesOriginalUnitPrice;
                    $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                            . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$blWeight}, shipment_status = 1 "
                            . "WHERE shipment_id = {$shipmentId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    
                    // update sales
                    $boolUpdateSales = false;
                    if($blWeight == ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 1;
                        $boolUpdateSales = true;
                    } elseif($blWeight < ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 2;
                        $boolUpdateSales = true;
                    }
                    
                    if($boolUpdateSales) {
                        $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
						
						$sql = "UPDATE sales SET used_status = 1 WHERE sales_id = {$salesId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }
                    
                     insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                     
                    unset($_SESSION['transaction']);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.|';
                }
            } else {
                if($sendWeight2 > $availableBalance) {
                    $return_value = '|FAIL|Available quantity in '. $stockpileName .' is '. number_format($availableBalance, 4, '.', ',') .' Kg.|';
                } elseif($sendWeight2 > ($salesBalance - $deliveredBalance)) {
                    $return_value = '|FAIL|Sales agreement balance is '. ($salesBalance - $deliveredBalance) .' Kg.|';
                }
            }
		
        } else {
            $return_value = '|FAIL|Please fill the required fields.|';
        }
        
		}else{
		$return_value = '|FAIL|Tanggal transaksi sudah lebih dari 5 hari.|';
	}// </editor-fold>
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'return_notim_out') {
    // <editor-fold defaultstate="collapsed" desc="delete_sales">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $transactionId2 = $myDatabase->real_escape_string($_POST['transactionId2']);
	$returnOutDate = $myDatabase->real_escape_string($_POST['returnOutDate']);
	$t_date = str_replace('/', '-', $returnOutDate);
	$currentYear2 = date('y', strtotime($t_date));
	 
    // </editor-fold>
    $sql = "UPDATE `transaction` SET notim_status = 1 WHERE transaction_id = {$transactionId2}";
	$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
						
    if($transactionId2 != '') {
        $sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode FROM `transaction` t WHERE t.transaction_id = {$transactionId2}";
	$resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
            if($resultR !== false && $resultR->num_rows == 1) {
                $rowR = $resultR->fetch_object();
				//$R = "R";
				//$U = "-U";
                //$sql = "UPDATE `transaction` SET shipment_id = NULL WHERE transaction_id = {$transactionId}";
                //$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				//$slipU = $rowR->slip_no .''. $U;
				//$currentYear2 =
				$checkSlipNo = $rowR->stockpileCode .'-'. $currentYear2;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				$slipR = $rowR->slip_no .'-R';
				$slipU = $rowR->slip_no .'-U';
				$dateR = $date->format('Y-m-d');
				$sendW = $rowR->send_weight * -1;
				$quantityW = $rowR->quantity * -1;
				$shrinkW = $rowR->shrink * -1;
				$shipmentId = $rowR->shipment_id;
				if($rowR->notes == '')
				$notes = 'NULL';
			}
				
	$sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},NULL,{$shipmentId},'{$rowR->transaction_date}',NULL,'{$rowR->vehicle_no}',NULL,NULL,STR_TO_DATE('{$returnOutDate}', '%d/%m/%Y'),NULL,NULL,NULL,{$rowR->transaction_type},NULL,'{$sendW}',0,0,0,'{$notes}',NULL,0,0,'{$quantityW}','{$shrinkW}',0,0,0,0,0,NULL,NULL,NULL,0,NULL,NULL,NULL,NULL,NULL,{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
       if($resultLog !== false) {     
    //echo $sqlLog;
	$transactionId = $myDatabase->insert_id;
	
	insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
	
	// delete from delivery and update delivery_status in transaction
                    $sql = "SELECT d.*, t.sync_status 
                            FROM delivery d
                            INNER JOIN `transaction` t
                                ON t.transaction_id = d.transaction_id
                            WHERE d.shipment_id = {$shipmentId}";
                    $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultShipment !== false && $resultShipment->num_rows > 0) {
                        while($rowShipment = $resultShipment->fetch_object()) {
                            $syncStatus = 0;
                            if($rowShipment->sync_status == 1) {
                                $syncStatus = 2;
                            }
                            
                            if($rowShipment->percent_taken == 100) {
                                $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } else {
                                $sqlOther = "SELECT * FROM delivery WHERE shipment_id <> {$shipmentId} AND transaction_id = {$rowShipment->transaction_id}";
                                $resultOther = $myDatabase->query($sqlOther, MYSQLI_STORE_RESULT);
                                
                                if($resultOther->num_rows > 0) {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 2, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                } else {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                }
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            }
                        }
                        
                        $sqlDelete = "DELETE FROM delivery WHERE shipment_id = {$shipmentId}";
                        $resultDelete = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);
						
                    }
					$sql = "UPDATE sales sl
							LEFT JOIN shipment sh ON sh.sales_id = sl.sales_id 
							SET sl.sales_status = 0, sh.shipment_status = 0 WHERE sh.shipment_id = {$shipmentId}";
						$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
				$return_value = '|OK|Nota Timbang has successfully Returned.|'. $transactionId2 .'|';
        } else {
            $return_value = '|FAIL|Returned Nota Timbang failed.|'.$sqlLog.'';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'return_notim_in') {
    // <editor-fold defaultstate="collapsed" desc="delete_sales">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $transactionId2 = $myDatabase->real_escape_string($_POST['transactionId']);
	$returnInDate = $myDatabase->real_escape_string($_POST['returnInDate']);
	$t_date = str_replace('/', '-', $returnInDate);
	$currentYear2 = date('y', strtotime($t_date));
	 
    // </editor-fold>
    
						
    if($transactionId2 != '') {
        $sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode FROM `transaction` t WHERE t.transaction_id = {$transactionId2}";
	$resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
            if($resultR !== false && $resultR->num_rows == 1) {
                $rowR = $resultR->fetch_object();
				//$R = "R";
				//$U = "-U";
                
				//$slipU = $rowR->slip_no .''. $U;
				$checkSlipNo = $rowR->stockpileCode .'-'. $currentYear2;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				$slipR = $rowR->slip_no .'-R';
				$slipU = $rowR->slip_no .'-U';
				$dateR = $date->format('Y-m-d');
				$sendW = $rowR->send_weight * -1;
				$brutoW = $rowR->bruto_weight * -1;
				$tarraW = $rowR->tarra_weight * -1;
				$nettoW = $rowR->netto_weight * -1;
				$handlingW = $rowR->handling_quantity * -1;
				$freightW = $rowR->freight_quantity * -1;
				$quantityW = $rowR->quantity * -1;
				$shrinkW = $rowR->shrink * -1;
				$unloadingP = $rowR->unloading_price * -1;
				
				if($rowR->shipment_id == ''){
					$shipment_id = 'NULL';	
				}else{
					$shipment_id = $rowR->shipment_id;	
				}
				if($rowR->labor_id == ''){
					$labor_id = 'NULL';
				}else{
					$labor_id = $rowR->labor_id;
				}
				if($rowR->unloading_cost_id == ''){
					$unloading_cost_id = 'NULL';
				}else{
					$unloading_cost_id = $rowR->unloading_cost_id;
				}
				if($rowR->handling_cost_id == ''){
					$handling_cost_id = 'NULL';
				}else{
					$handling_cost_id = $rowR->handling_cost_id;
				}
				if($rowR->freight_cost_id == ''){
					$freight_cost_id = 'NULL';
				}else{
					$freight_cost_id = $rowR->freight_cost_id;
				}
				if($rowR->permit_no == ''){
					$permit_no = 'NULL';
				}else{
					$permit_no = $rowR->permit_no;
				}
				if($rowR->vendor_id == ''){
					$vendor_id = 'NULL';
				}else{
					$vendor_id = $rowR->vendor_id;
				}
				if($rowR->cust_tax_id == ''){
					$cust_tax_id = 'NULL';
				}else{
					$cust_tax_id = $rowR->cust_tax_id;
				}
				if($rowR->curah_tax_id == ''){
					$curah_tax_id = 'NULL';
				}else{
					$curah_tax_id = $rowR->curah_tax_id;
				}
				if($rowR->uc_tax_id == ''){
					$uc_tax_id = 'NULL';
				}else{
					$uc_tax_id = $rowR->uc_tax_id;
				}
				if($rowR->fc_tax_id == ''){
					$fc_tax_id = 'NULL';
				}else{
					$fc_tax_id = $rowR->fc_tax_id;
				}
				if($rowR->block == ''){
					$block = 'NULL';
				}else{
					$block = $rowR->block;
				}
				//if($rowR->payment_id == ''){
					$payment_id = 'NULL';
				//}else{
					//$payment_id = $rowR->payment_id;
				//}
				//if($rowR->fc_payment_id == ''){
					$fc_payment_id = 'NULL';
				//}else{
					//$fc_payment_id = $rowR->fc_payment_id;
				//}
				//if($rowR->hc_payment_id == ''){
					$hc_payment_id = 'NULL';
				//}else{
					//$hc_payment_id = $rowR->hc_payment_id;
				//}
				//if($rowR->uc_payment_id == ''){
					$uc_payment_id = 'NULL';
				//}else{
					//$uc_payment_id = $rowR->uc_payment_id;
				//}
				if($rowR->notes == ''){
					$notes = 'NULL';
				}else{
					$notes = $rowR->notes;
				}
				$delivery_status = 0;
			}
				
	$sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,handling_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},{$rowR->stockpile_contract_id},{$shipment_id},STR_TO_DATE('{$returnInDate}', '%d/%m/%Y'),STR_TO_DATE('{$returnInDate}', '%d/%m/%Y'),'{$rowR->vehicle_no}',{$labor_id},{$unloading_cost_id},STR_TO_DATE('{$returnInDate}', '%d/%m/%Y'),{$handling_cost_id},{$freight_cost_id},'{$permit_no}',{$rowR->transaction_type},{$vendor_id},'{$sendW}','{$brutoW}','{$tarraW}','{$nettoW}','{$notes}','{$rowR->driver}','{$handlingW}','{$freightW}','{$quantityW}','{$shrinkW}','{$rowR->freight_price}','{$rowR->handling_price}','{$unloadingP}','{$rowR->unit_price}','{$rowR->inventory_value}',{$cust_tax_id},{$curah_tax_id},{$uc_tax_id},{$fc_tax_id},{$delivery_status},'{$block}',{$payment_id},{$fc_payment_id},{$hc_payment_id},{$uc_payment_id},{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
       if($resultLog !== false) {     
    //echo $sqlLog;
	$transactionId = $myDatabase->insert_id;
	
	$sql = "UPDATE `transaction` SET notim_status = 1 WHERE transaction_id = {$transactionId2}";
	$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
	
	$sql = "CALL sp_shrink_weight_retur({$transactionId},{$transactionId2})";
         $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		 
	insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
	   
	  
				
				$return_value = '|OK|Nota Timbang has successfully Returned.|' . $transactionId2 .'|';
        } else {
            $return_value = '|FAIL|Returned Nota Timbang failed.|'.$sqlLog.'';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'fixedAsset_data') {
    // <editor-fold defaultstate="collapsed" desc="vehicle_data">
    
    $return_value = '';
    $boolNew = false;
	
	
	$fixedAssetId = $myDatabase->real_escape_string($_POST['fixedAssetId']);;
	$dateofAcquisition= $myDatabase->real_escape_string($_POST['dateofAcquisition']);;
	$nopol= $myDatabase->real_escape_string($_POST['nopol']);;
	$assetName =  $myDatabase->real_escape_string($_POST['assetName']);;
	$merk= $myDatabase->real_escape_string($_POST['merk']);;
	$type= $myDatabase->real_escape_string($_POST['type']);;
	$rangka= $myDatabase->real_escape_string($_POST['rangka']);;
	$mesin= $myDatabase->real_escape_string($_POST['mesin']);;
	$unit= $myDatabase->real_escape_string($_POST['unit']);;
	$acquisitionCost= $myDatabase->real_escape_string($_POST['acquisitionCost']);;
	$usageYear= $myDatabase->real_escape_string($_POST['usageYear']);;
	$usageMonth= $myDatabase->real_escape_string($_POST['usageMonth']);;
	$depresitionType= $myDatabase->real_escape_string($_POST['depresitionId']);;
	$stockpileId= $myDatabase->real_escape_string($_POST['stockpileId']);;
	$masterAssettypeId= $myDatabase->real_escape_string($_POST['masterAssettypeId']);;

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    // </editor-fold>
    
    if ($fixedAssetId == '') {
        $boolNew = true;
    }
    
    if($dateofAcquisition != '' && $assetName != '' && $unit != '' && $acquisitionCost != '' && $usageYear != '' && $usageMonth != '' && $depresitionType != '') {
		$date = new DateTime();
		$currentmonth = $date->format('m');
		$currentyear = $date->format('Y');
        $checkAssetCode = 'AST/'.$currentmonth.'/'. $currentyear;   
        $sql = "SELECT assetcode FROM fixed_asset WHERE assetcode LIKE '%{$checkAssetCode}' ORDER BY fixed_asset_id DESC LIMIT 1";
        $resultFA = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($resultFA->num_rows == 1) {
            $rowFA = $resultFA->fetch_object();
            $splitFACode = explode('/', $rowFA->assetcode);
            $lastExplode = count($splitFACode) - 4;
            $nextFACode = ((float) $splitFACode[$lastExplode]) + 1;
			$FACode = str_pad($nextFACode, 4, '0', STR_PAD_LEFT);
            $Asset_Code =  $FACode.'/'.$checkAssetCode;
        } else {
            $Asset_Code = '0001/'.$checkAssetCode;
			}
        
            if($boolNew) {
                $sql = "INSERT INTO `fixed_asset`(`AssetCode`,`DateofAcquisition`,
						`NoPol`,`AssetName`,`Merk`,`Type`,`Rangka`,`Mesin`,`Unit`,`AcquisitionCost`,`UsageYear`,`UsageMonth`,`DepresitionType`,
						`entry_by`,`entry_date`,`stockpile_id`,`master_assettype_id`)
						VALUES
						('$Asset_Code',STR_TO_DATE('{$dateofAcquisition}', '%d/%m/%Y'),'$nopol','$assetName','$merk',
						'$type','$rangka','$mesin',$unit,$acquisitionCost,$usageYear,$usageMonth,'$depresitionType',
						{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),$stockpileId,$masterAssettypeId)";
            } else {
                $sql = "UPDATE `fixed_asset`
						SET
						`DateofAcquisition` = STR_TO_DATE('{$dateofAcquisition}', '%d/%m/%Y'),
						`NoPol` = '$nopol',
						`AssetName` = '$assetName',
						`Merk` = '$merk',
						`Type` = '$type',
						`Rangka` = '$rangka',
						`Mesin` = '$mesin',
						`Unit` = $unit,
						`AcquisitionCost` = $acquisitionCost,
						`UsageYear` = $usageYear,
						`UsageMonth` = $usageMonth,
						`DepresitionType` = '$depresitionType',
						`entry_by` = {$_SESSION['userId']},
						`entry_date` = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),
						`stockpile_id` = $stockpileId,
						`master_assettype_id` = $masterAssettypeId
						WHERE `fixed_asset_id` = $fixedAssetId;
						";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $itemId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Fixed Asset has successfully inserted/updated.|'. $itemId .'|';
            } else {
                $return_value = '|FAIL|Insert/update Fixed Asset failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    echo $sql;
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_contract_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_contract_data">
    
    $return_value = '';
    $boolInsertVendor = false;
    $boolVendorExists = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $contractType = $myDatabase->real_escape_string($_POST['contractType']);
    $contractNo = $myDatabase->real_escape_string($_POST['contractNo']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    $vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    // </editor-fold>
    
    if($vendorId == 'INSERT') {
        if($vendorCode != '' && $vendorName != '') {
            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$vendorCode}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($result !== false && $result->num_rows > 0) {
                $boolVendorExists = true;
            } elseif($result !== false && $result->num_rows == 0) {
                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, entry_by, entry_date) VALUES ("
                        . "UPPER('{$vendorCode}'), '{$vendorName}', '{$vendorAddress}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $vendorId = $myDatabase->insert_id;
                    $boolInsertVendor = true;
                } 
            }
        } else {
            $boolInsertVendor = false;
        }
    } else {
        $boolInsertVendor = true;
    }
    
    if($contractType != '' && $vendorId != '' && $currencyId != '' && $price != '' && 
            $boolInsertVendor && !$boolVendorExists) {
        
        if($quantity == '') {
            $quantity = 'NULL';
        }
        
        if($exchangeRate == '') {
            $exchangeRate = 1;
        }
        
        $priceConverted = $price * $exchangeRate;
        
        $sql = "SELECT * FROM vendor WHERE vendor_id = {$vendorId}";
        $resultVendor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($resultVendor !== false && $resultVendor->num_rows == 1) {
            $rowVendor = $resultVendor->fetch_object();
            $vendorCode = $rowVendor->vendor_code;
        }

        $checkPoNo = $contractType .'-'. $vendorCode .'-'. $currentYearMonth;
        $sql = "SELECT * FROM contract WHERE company_id = {$_SESSION['companyId']} AND po_no LIKE '{$checkPoNo}%'";
        $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        $nextPoNo = $resultPo->num_rows + 1;
        $poNo = $checkPoNo .'-'. $nextPoNo;

        $sql = "INSERT INTO `contract` (contract_type, po_no, contract_no, vendor_id, currency_id, exchange_rate, price, price_converted, quantity, entry_by, entry_date) VALUES ("
                . "'{$contractType}', '{$poNo}', '{$contractNo}', {$vendorId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, {$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $contractId = $myDatabase->insert_id;
            
            $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                    . "{$stockpileId}, {$contractId}, {$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            
            if($result !== false) {
                $stockpileContractId = $myDatabase->insert_id;
                $return_value = '|OK|Contract has successfully inserted.|CONTRACT~'. $stockpileContractId .'|';
            } else {
                $sql = "DELETE FROM `contract` WHERE contract_id = {$contractId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                
                $return_value = '|FAIL|Insert contract failed.||';
            }
        } else {
            $return_value = '|FAIL|Insert contract failed.||';
        }
    } else {
        if($boolVendorExists) {
            $return_value = '|FAIL|Vendor already exists.||';
        } elseif(!$boolInsertVendor) {
            $return_value = '|FAIL|Insert vendor failed.||';
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_unloading_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_unloading_data">
    
    $return_value = '';
    $boolInsertVehicle = false;
    $boolVehicleExists = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $vehicleId = $myDatabase->real_escape_string($_POST['vehicleId']);
    $vehicleName = $myDatabase->real_escape_string($_POST['vehicleName']);
    // </editor-fold>
    
    if($vehicleId == 'INSERT') {
        if($vehicleName != '') {
            $sql = "SELECT * FROM `vehicle` WHERE UPPER(vehicle_name) = UPPER('{$vehicleName}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($result !== false && $result->num_rows > 0) {
                $boolVehicleExists = true;
            } elseif($result !== false && $result->num_rows == 0) {
                $sql = "INSERT INTO `vehicle` (vehicle_name, entry_by, entry_date) VALUES ("
                        . "'{$vehicleName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $vehicleId = $myDatabase->insert_id;
                    $boolInsertVehicle = true;
                } 
            }
        } else {
            $boolInsertVehicle = false;
        }
    } else {
        $boolInsertVehicle = true;
    }
    
    if($vehicleId != '' && $currencyId != '' && $price != '' && 
            $boolInsertVehicle && !$boolVehicleExists) {
        
        if($exchangeRate == '') {
            $exchangeRate = 1;
        }
        
        $priceConverted = $price * $exchangeRate;
        
        $sql = "INSERT INTO `unloading_cost` (vehicle_id, stockpile_id, currency_id, exchange_rate, price, price_converted, entry_by, entry_date) VALUES ("
                . "{$vehicleId}, {$stockpileId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $unloadingCostId = $myDatabase->insert_id;
            
            $return_value = '|OK|Vehicle has successfully inserted.|UNLOADING~'. $unloadingCostId .'|';
        } else {
            $return_value = '|FAIL|Insert vehicle failed.||';
        }
    } else {
        if($boolVehicleExists) {
            $return_value = '|FAIL|Vehicle already exists.||';
        } elseif(!$boolInsertVehicle) {
            $return_value = '|FAIL|Insert vehicle failed.||';
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_freight_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_freight_data">
    
    $return_value = '';
    $boolInsertFreight = false;
    $boolFreightExists = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $paymentNotes = $myDatabase->real_escape_string($_POST['paymentNotes']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
    $freightCode = $myDatabase->real_escape_string($_POST['freightCode']);
    $freightSupplier = $myDatabase->real_escape_string($_POST['freightSupplier']);
    $freightAddress = $myDatabase->real_escape_string($_POST['freightAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>
    
//    $sql = "SELECT con.vendor_id FROM `contract` con 
//            WHERE con.contract_id = (SELECT contract_id FROM stockpile_contract WHERE stockpile_contract_id = {$stockpileContractId})";
//    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//    if($result !== false && $result->num_rows == 1) {
//        $row = $result->fetch_object();
//        $vendorId = $row->vendor_id;
//    }
    
    if($freightId == 'INSERT') {
        if($freightCode != '' && $freightSupplier != '' && $vendorId != '' && $freightAddress != '' && $npwp != '' && 
                $ppn != '' && $pph != '') {
            $sql = "SELECT * FROM `freight` WHERE UPPER(freight_supplier) = UPPER('{$freightSupplier}') AND UPPER(freight_code) = UPPER('{$freightCode}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($result !== false && $result->num_rows > 0) {
                $boolFreightExists = true;
            } elseif($result !== false && $result->num_rows == 0) {
                $ppnValue = 0;
                $pphValue = 0;

                $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
                $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
                if($resultPPN !== false && $resultPPN->num_rows == 1) {
                    $rowPPN = $resultPPN->fetch_object();
                    $ppnValue = $rowPPN->tax_value;
                }

                $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
                $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                if($resultPPh !== false && $resultPPh->num_rows == 1) {
                    $rowPPh = $resultPPh->fetch_object();
                    $pphValue = $rowPPh->tax_value;
                }
                
                $sql = "INSERT INTO `freight` (freight_code, freight_supplier, freight_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                        . "UPPER('{$freightCode}'), '{$freightSupplier}', '{$freightAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $freightId = $myDatabase->insert_id;
                    $boolInsertFreight = true;
                } 
            }
        } else {
            $boolInsertFreight = false;
        }
    } else {
        $boolInsertFreight = true;
    }
    
    if($freightId != '' && $currencyId != '' && $price != '' && $vendorId != '' &&
            $boolInsertFreight && !$boolFreightExists) {
        
        if($exchangeRate == '') {
            $exchangeRate = 1;
        }
        
        $priceConverted = $price * $exchangeRate;
        
        $sql = "INSERT INTO `freight_cost` (freight_id, stockpile_id, vendor_id, currency_id, exchange_rate, price, price_converted, payment_notes, remarks, entry_by, entry_date) VALUES ("
                . "{$freightId}, {$stockpileId}, {$vendorId}, {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, '{$paymentNotes}', '{$remarks}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $freightCostId = $myDatabase->insert_id;
            
            $return_value = '|OK|Freight Supplier has successfully inserted.|FREIGHT~'. $freightCostId .'|';
        } else {
            $return_value = '|FAIL|Insert freight supplier failed.||';
        }
    } else {
        if($boolFreightExists) {
            $return_value = '|FAIL|Freight supplier already exists.||';
        } elseif(!$boolInsertFreight) {
            $return_value = '|FAIL|Insert freight supplier failed.||';
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_vendor_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_vendor_data">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId0']);
    $vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    $vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>
    
    if($vendorId == 'INSERT') {
        if($vendorCode != '' && $vendorName != '' && $vendorAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$vendorCode}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($result !== false && $result->num_rows == 0) {
                $ppnValue = 0;
                $pphValue = 0;

                $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
                $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
                if($resultPPN !== false && $resultPPN->num_rows == 1) {
                    $rowPPN = $resultPPN->fetch_object();
                    $ppnValue = $rowPPN->tax_value;
                }

                $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
                $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                if($resultPPh !== false && $resultPPh->num_rows == 1) {
                    $rowPPh = $resultPPh->fetch_object();
                    $pphValue = $rowPPh->tax_value;
                }

                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                        . "UPPER('{$vendorCode}'), '{$vendorName}', '{$vendorAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $vendorId = $myDatabase->insert_id;

                    $return_value = '|OK|Vendor has successfully inserted.|VENDOR~'. $vendorId .'|';
                } else {
                    $return_value = '|FAIL|Insert vendor failed.||';
                }
            } else {
                $return_value = '|FAIL|Vendor already exists.||';
            }
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    } elseif($vendorId != '') {
        $return_value = '|OK|Vendor has successfully inserted.|VENDOR~'. $vendorId .'|';
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_sales_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_sales_data">
    
    $return_value = '';
//    $boolInsertCustomer = false;
//    $boolCustomerExists = false;
    $boolExists = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    $customerName = $myDatabase->real_escape_string($_POST['customerName']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    $loading = $myDatabase->real_escape_string($_POST['portLoading']);
    $destination = $myDatabase->real_escape_string($_POST['destination']);
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $salesNo = $myDatabase->real_escape_string($_POST['salesNo']);
    $totalShipment = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalShipment']));
    // </editor-fold>
    
    $sql = "SELECT * FROM `sales` WHERE company_id = {$_SESSION['companyId']} AND sales_no = '{$salesNo}'";
    $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
    if($resultSales->num_rows > 0) {
        $boolExists = true;
    }
    
    if($customerId != '' && $currencyId != '' && $price != '' && $salesNo != '' && $quantity != '' && $totalShipment != '' &&
            !$boolExists) {
        
        if($exchangeRate == '') {
            $exchangeRate = 1;
        }
        
        $priceConverted = $price * $exchangeRate;
        
        // get next slip no
//        $checkShipmentNo = $shipmentCode .'-'. $currentYear;
//        $sql = "SELECT LPAD(COUNT(1) + 1, 3, '0') AS next_id FROM shipment WHERE shipment_no LIKE '{$checkShipmentNo}%'";
//        $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//        $rowShipmentNo = $resultShipment->fetch_object();
//        $nextShipmentNo = $rowShipmentNo->next_id;
//        $shipmentNo = $checkShipmentNo .'-'. $nextShipmentNo;
            
        $sql = "INSERT INTO `sales` (sales_no, sales_date, sales_type, customer_id, stockpile_id, destination, notes, "
                . "currency_id, exchange_rate, price, price_converted, quantity, total_shipment, entry_by, entry_date) VALUES ("
                . "'{$salesNo}', STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'), 2, {$customerId}, {$loading}, '{$destination}', "
                . "'{$notes}', {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, {$quantity}, {$totalShipment}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false) {
            $salesId = $myDatabase->insert_id;
            
            for($i = 1; $i <= $totalShipment; $i++) {
                $shipmentCode = $salesNo .'-'. $i;

                $sql = "INSERT INTO `shipment` (shipment_code, sales_id, entry_by, entry_date) VALUES ("
                        . "'{$shipmentCode}', {$salesId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }
            
            $return_value = '|OK|Sales Agreement has successfully inserted.|SALES~'. $salesId .'|';
        } else {
            $return_value = '|FAIL|Insert sales failed.||';
        }
    } else {
        if($boolExists) {
            $return_value = '|FAIL|Sales No. already exists.||';
//        } elseif(!$boolInsertCustomer) {
//            $return_value = '|FAIL|Insert customer failed.||';
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_customer_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_customer_data">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $customerName = $myDatabase->real_escape_string($_POST['customerName']);
    $customerAddress = $myDatabase->real_escape_string($_POST['customerAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>
    
    if($customerName != '' && $customerAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
        $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$customerName}')";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;
            
            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }
            
            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }
            
            $sql = "INSERT INTO `customer` (customer_name, customer_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                    . "'{$customerName}', '{$customerAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $customerId = $myDatabase->insert_id;
                
                $return_value = '|OK|Buyer has successfully inserted.|CUSTOMER~'. $customerId .'|';
            } else {
                $return_value = '|FAIL|Insert buyer failed.||';
            }
        } else {
            $return_value = '|FAIL|Buyer already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_labor_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_labor_data">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $laborName = $myDatabase->real_escape_string($_POST['laborName']);
    $laborAddress = $myDatabase->real_escape_string($_POST['laborAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>
    
    if($laborName != '' && $laborAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
        $sql = "SELECT * FROM `labor` WHERE UPPER(labor_name) = UPPER('{$laborName}')";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;

            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }

            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }
            
            $sql = "INSERT INTO `labor` (labor_name, labor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                    . "'{$laborName}', '{$laborAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $laborId = $myDatabase->insert_id;
                
                $return_value = '|OK|Labor Workers has successfully inserted.|LABOR~'. $laborId .'|';
            } else {
                $return_value = '|FAIL|Insert labor workers failed.||';
            }
        } else {
            $return_value = '|FAIL|Labor Workers already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'transaction_supplier_data') {
    // <editor-fold defaultstate="collapsed" desc="transaction_supplier_data">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorCode = $myDatabase->real_escape_string($_POST['vendorCode']);
    $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    $vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>
    
    if($vendorCode != '' && $vendorName != '' && $vendorAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
        $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$vendorCode}')";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;

            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }

            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }
            
            $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                        . "UPPER('{$vendorCode}'), '{$vendorName}', '{$vendorAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $vendorId = $myDatabase->insert_id;

                $return_value = '|OK|Supplier has successfully inserted.|SUPPLIER~'. $vendorId .'|';
            } else {
                $return_value = '|FAIL|Insert vendor failed.||';
            }
        } else {
            $return_value = '|FAIL|Supplier already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_transaction_data') {
    // <editor-fold defaultstate="collapsed" desc="update_transaction_data">
    
    $return_value = '';
    $boolQuantity = true;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $transactionId = $myDatabase->real_escape_string($_POST['transactionId']);
	$transactionId2 = $transactionId;
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
    $transactionDate = $myDatabase->real_escape_string($_POST['transactionDate']);
    $loadingDate = $myDatabase->real_escape_string($_POST['loadingDate']);
    $transactionDate2 = $myDatabase->real_escape_string($_POST['transactionDate2']);
    $vehicleNo = $myDatabase->real_escape_string($_POST['vehicleNo']);
    $vehicleNo2 = $myDatabase->real_escape_string($_POST['vehicleNo2']);
    $unloadingCostId = $myDatabase->real_escape_string($_POST['unloadingCostId']);
    $unloadingDate = $myDatabase->real_escape_string($_POST['unloadingDate']);
    $freightCostId = $myDatabase->real_escape_string($_POST['freightCostId']);
	$handlingCostId = $myDatabase->real_escape_string($_POST['handlingCostId']);
    $permitNo = $myDatabase->real_escape_string($_POST['permitNo']);
    $transactionType = $myDatabase->real_escape_string($_POST['transactionType']);
    $sendWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight']));
    $sendWeight2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight2']));
    $blWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['blWeight']));
    $brutoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['brutoWeight']));
    $tarraWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['tarraWeight']));
    $nettoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['nettoWeight']));
    $notes = $myDatabase->real_escape_string($_POST['notes']);
	$notes2 = $myDatabase->real_escape_string($_POST['notes2']);
    $driver = $myDatabase->real_escape_string($_POST['driver']);
    $block = $myDatabase->real_escape_string($_POST['block']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $supplierId = $myDatabase->real_escape_string($_POST['supplierId']);
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $isTaxable = $myDatabase->real_escape_string($_POST['isTaxable']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $stockpileCode = '';
    $unitPrice = 0;
    $balanceQuantity = 0;
    $contractId = 0;
    $custTaxId = 'NULL';
    $curahTaxId = 'NULL';
    $ucTaxId = 0;
    $fcTaxId = 0;
    // </editor-fold>
    
    //insert to log table
	/*if($transactionId == 257942){
	$sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode FROM `transaction` t WHERE t.transaction_id = {$transactionId}";
	$resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
            if($resultR !== false && $resultR->num_rows == 1) {
                $rowR = $resultR->fetch_object();
				//$R = "R";
				//$U = "-U";
                
				//$slipU = $rowR->slip_no .''. $U;
				$checkSlipNo = $rowR->stockpileCode .'-'. $currentYear;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				$slipR = $rowR->slip_no .'-R';
				$slipU = $rowR->slip_no .'-U';
				$dateR = $date->format('Y-m-d');
				$sendW = $rowR->send_weight * -1;
				$brutoW = $rowR->bruto_weight * -1;
				$tarraW = $rowR->tarra_weight * -1;
				$nettoW = $rowR->netto_weight * -1;
				$handlingW = $rowR->handling_quantity * -1;
				$freightW = $rowR->freight_quantity * -1;
				$quantityW = $rowR->quantity * -1;
				$shrinkW = $rowR->shrink * -1;
				$unloadingP = $rowR->unloading_price * -1;
				
				if($rowR->shipment_id == ''){
					$shipment_id = 'NULL';	
				}else{
					$shipment_id = $rowR->shipment_id;	
				}
				if($rowR->labor_id == ''){
					$labor_id = 'NULL';
				}else{
					$labor_id = $rowR->labor_id;
				}
				if($rowR->unloading_cost_id == ''){
					$unloading_cost_id = 'NULL';
				}else{
					$unloading_cost_id = $rowR->unloading_cost_id;
				}
				if($rowR->handling_cost_id == ''){
					$handling_cost_id = 'NULL';
				}else{
					$handling_cost_id = $rowR->handling_cost_id;
				}
				if($rowR->freight_cost_id == ''){
					$freight_cost_id = 'NULL';
				}else{
					$freight_cost_id = $rowR->freight_cost_id;
				}
				if($rowR->permit_no == ''){
					$permit_no = 'NULL';
				}else{
					$permit_no = $rowR->permit_no;
				}
				if($rowR->vendor_id == ''){
					$vendor_id = 'NULL';
				}else{
					$vendor_id = $rowR->vendor_id;
				}
				if($rowR->cust_tax_id == ''){
					$cust_tax_id = 'NULL';
				}else{
					$cust_tax_id = $rowR->cust_tax_id;
				}
				if($rowR->curah_tax_id == ''){
					$curah_tax_id = 'NULL';
				}else{
					$curah_tax_id = $rowR->curah_tax_id;
				}
				if($rowR->uc_tax_id == ''){
					$uc_tax_id = 'NULL';
				}else{
					$uc_tax_id = $rowR->uc_tax_id;
				}
				if($rowR->fc_tax_id == ''){
					$fc_tax_id = 'NULL';
				}else{
					$fc_tax_id = $rowR->fc_tax_id;
				}
				if($rowR->block == ''){
					$block = 'NULL';
				}else{
					$block = $rowR->block;
				}
				//if($rowR->payment_id == ''){
					$payment_id = 'NULL';
				//}else{
					//$payment_id = $rowR->payment_id;
				//}
				//if($rowR->fc_payment_id == ''){
					$fc_payment_id = 'NULL';
				//}else{
					//$fc_payment_id = $rowR->fc_payment_id;
				//}
				//if($rowR->hc_payment_id == ''){
					$hc_payment_id = 'NULL';
				//}else{
					//$hc_payment_id = $rowR->hc_payment_id;
				//}
				//if($rowR->uc_payment_id == ''){
					$uc_payment_id = 'NULL';
				//}else{
					//$uc_payment_id = $rowR->uc_payment_id;
				//}
				if($rowR->notes == ''){
					$notes = 'NULL';
				}else{
					$notes = $rowR->notes;
				}
				$delivery_status = 0;
			}
				
	$sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},{$rowR->stockpile_contract_id},{$shipment_id},'{$dateR}','{$dateR}','{$rowR->vehicle_no}',{$labor_id},{$unloading_cost_id},'{$dateR}',{$handling_cost_id},{$freight_cost_id},'{$permit_no}',{$rowR->transaction_type},{$vendor_id},'{$sendW}','{$brutoW}','{$tarraW}','{$nettoW}','{$notes}','{$rowR->driver}','{$handlingW}','{$freightW}','{$quantityW}','{$shrinkW}','{$rowR->freight_price}','{$unloadingP}','{$rowR->unit_price}','{$rowR->inventory_value}',{$cust_tax_id},{$curah_tax_id},{$uc_tax_id},{$fc_tax_id},{$delivery_status},'{$block}',{$payment_id},{$fc_payment_id},{$hc_payment_id},{$uc_payment_id},{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
       if($resultLog !== false) {     
    //echo $sqlLog;
	$transactionId = $myDatabase->insert_id;
	
	insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
	   }
	   
	}*/
    
    if($isTaxable == '') {
        $isTaxable = 0;
    }
    
    if($ppn == '') {
        $ppn = 0;
    }
    
    if($pph == '') {
        $pph = 0;
    }
    
    if($transactionType == 1) {
		//echo 'test2';
		//$transactionId2 = 0;
        // <editor-fold defaultstate="collapsed" desc="IN">
        if($stockpileId != '' && $stockpileContractId != '' && $loadingDate != '' && $vehicleNo != '' && $unloadingCostId != '' &&
                $unloadingDate != '' && $freightCostId != '' && $handlingCostId != '' && $permitNo != '' && $transactionType != '' && $sendWeight != '' &&
                $brutoWeight != '' && $tarraWeight != '' && $driver != '' && $vendorId != '' && $laborId != '') {

            if($supplierId == '') {
                $supplierId = "NULL";
            }
           
            // check balance contract & get unit price
            $sql = "SELECT s.stockpile_code, con.price_converted, sc.contract_id, con.contract_type, 
                        ((SELECT COALESCE(SUM(quantity), 0) FROM stockpile_contract WHERE contract_id = sc.contract_id
                        ) - con.adjustment) - (
                            SELECT COALESCE(SUM(t.send_weight), 0) FROM `transaction` t LEFT JOIN stockpile_contract sc ON t.stockpile_contract_id = sc.stockpile_contract_id
                            WHERE sc.contract_id =  con.contract_id
                        ) AS balance, s.freight_weight_rule, s.curah_weight_rule, v.pph_tax_id
                    FROM stockpile_contract sc
                    INNER JOIN stockpile s
                        ON s.stockpile_id = sc.stockpile_id
                    INNER JOIN contract con
                        ON con.contract_id = sc.contract_id
                    INNER JOIN vendor v
                        ON v.vendor_id = con.vendor_id
                    WHERE stockpile_contract_id = {$stockpileContractId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $contractId = $rowStockpile->contract_id;
                $unitPrice = $rowStockpile->price_converted;
                $contractType = $rowStockpile->contract_type;
                $freightWeightRule = $rowStockpile->freight_weight_rule;
                $curahWeightRule = $rowStockpile->curah_weight_rule;
                if($contractType == 'P') {
                    $balanceQuantity = $rowStockpile->balance;
                } elseif($contractType == 'C') {
                    $balanceQuantity = $sendWeight;
                    if($rowStockpile->pph_tax_id != 0 && $rowStockpile->pph_tax_id != '') {
                        $curahTaxId = $rowStockpile->pph_tax_id;
                    }
                }
            }

            // get netto weight
            //$nettoWeight = $brutoWeight - $tarraWeight;
            
			// get freight weight
			$sqlfc = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                    $resultFreight = $myDatabase->query($sqlfc, MYSQLI_STORE_RESULT);
                    if($resultFreight !== false && $resultFreight->num_rows == 1) {
                        $rowFreight = $resultFreight->fetch_object();
                        $freightRule = $rowFreight->freight_rule;
					
                       
                    }
					
            // get freight weight
           if($freightRule == 1) {
				$freightQuantity = $sendWeight;
            }else if($freightRule == 0) {
                if($nettoWeight < $sendWeight) {
                    $freightQuantity = $nettoWeight;
                } else if($nettoWeight > $sendWeight) {
                    $freightQuantity = $sendWeight;
                } else {
                    $freightQuantity = $sendWeight;
                }
            } /*elseif($freightWeightRule == 1) {
                $freightQuantity = $sendWeight;
            } elseif($freightWeightRule == 2) {
                $freightQuantity = $nettoWeight;
            } else {
                $freightQuantity = $sendWeight;
            }*/

            // get shrink condition
//            $quantity = $nettoWeight;
//            $sql = "SELECT * FROM `condition` WHERE category_id = 1 AND contract_id = {$contractId}";
//            $resultCondition = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//            if($resultCondition !== false && $resultCondition->num_rows == 1) {
//                $rowCondition = $resultCondition->fetch_object();
//                $quantity = ${$rowCondition->rule};
//            }
			if($sendWeight > $balanceQuantity && $balanceQuantity > 0){
				$balanceQuantity = $sendWeight;
					
			}

            if($sendWeight <= $balanceQuantity || $balanceQuantity == 0) {
                // get shrink
                $shrink = 0;
                if($contractType == 'P') {
                    if($nettoWeight < $sendWeight) {
                        $quantity = $nettoWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } elseif($nettoWeight > $sendWeight) {
                        $quantity = $sendWeight;
                        $shrink = 0;
                    } else {
                        $quantity = $sendWeight;
                    }
                } elseif($contractType == 'C') {
                    if($curahWeightRule == 0) {
                        if($nettoWeight < $sendWeight) {
                            $quantity = $nettoWeight;
                            $shrink = $sendWeight - $nettoWeight;
                        } elseif($nettoWeight > $sendWeight) {
                            $quantity = $sendWeight;
                            $shrink = $sendWeight - $nettoWeight;
                        } else {
                            $quantity = $sendWeight;
                        }
                    } elseif($curahWeightRule == 1) {
                        $quantity = $sendWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } elseif($curahWeightRule == 2) {
                        $quantity = $nettoWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } else {
                        $quantity = $sendWeight;
                    }
                }
				/*if($transactionId2 == 257942){
                $checkSlipNo = $rowR->stockpileCode .'-'. $currentYear;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				}*/
                // get freight cost
                if($freightCostId == 'NONE') {
                    $freightCostId = 'NULL';
                    $freightPrice = 0;
					//$freightQuantity2 = 0;
                } else {
                     $sqlF = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                    $resultF = $myDatabase->query($sqlF, MYSQLI_STORE_RESULT);
                    if($resultF !== false && $resultF->num_rows == 1) {
                        $rowF = $resultF->fetch_object();
                        $freightPrice = $rowF->price_converted;
						if($rowF->freight_rule == 1){
							//$freightQuantity2 = $sendWeight;
						}else{
							//$freightQuantity2 = $nettoWeight;
						}
                        if($rowF->pph_tax_id != 0 && $rowF->pph_tax_id != '') {
                            $fcTaxId = $rowF->pph_tax_id;
                        }else{
							$fcTaxId = 0;
						}
                    }
                }
				
				// get handling cost
				if($handlingCostId == 'NONE') {
                    $handlingCostId = 'NULL';
					$handlingQuantity = 0;
					$handlingPrice = 0;
                } else {
                    $sql = "SELECT vhc.vendor_handling_id, vhc.price_converted, vh.pph_tax_id, vh.vendor_handling_rule
                            FROM `vendor_handling_cost` vhc 
                            INNER JOIN vendor_handling vh
                                ON vh.vendor_handling_id = vhc.vendor_handling_id
                            WHERE vhc.handling_cost_id = {$handlingCostId}";
                    $resultHandling = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultHandling !== false && $resultHandling->num_rows == 1) {
                        $rowHandling = $resultHandling->fetch_object();
                        $handlingPrice = $rowHandling->price_converted;
					if($rowHandling->vendor_handling_rule == 1){
							$handlingQuantity = $sendWeight;
						}else{
							$handlingQuantity = $nettoWeight;
						}
                        
                    }
                }

                // get unloading cost
                if($unloadingCostId == 'NONE') {
                    $unloadingCostId = 'NULL';
                    $unloadingPrice = 0;
                } else {
                    $sql = "SELECT uc.price_converted 
                            FROM `unloading_cost` uc 
                            WHERE uc.unloading_cost_id = {$unloadingCostId}";
                    $resultUnloading = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultUnloading !== false && $resultUnloading->num_rows == 1) {
                        $rowUnloading = $resultUnloading->fetch_object();
                        $unloadingPrice = $rowUnloading->price_converted;
                    }
                }
                
                if($laborId == 'NONE') {
                    $laborId = 'NULL';
                } else {
                    $sql = "SELECT l.pph_tax_id
                            FROM `labor` l
                            WHERE l.labor_id = {$laborId}";
                    $resultLabor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultLabor !== false && $resultLabor->num_rows == 1) {
                        $rowLabor = $resultLabor->fetch_object();
                        if($rowLabor->pph_tax_id != 0 && $rowLabor->pph_tax_id != '') {
                            $ucTaxId = $rowLabor->pph_tax_id;
                        }
                    }
                }
                
                $syncStatus = 0;
                $sql = "SELECT sync_status FROM `transaction` WHERE transaction_id = {$transactionId}";
                $resultTrans = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultTrans !== false && $resultTrans->num_rows == 1) {
                    $rowTrans = $resultTrans->fetch_object();
                    if($rowTrans->sync_status == 1) {
                        $syncStatus = 2;
                    } 
                }
                
                // get inventory value
               $inventoryValue = ($freightQuantity * $freightPrice) + $unloadingPrice + ($quantity * $unitPrice) + ($handlingQuantity * $handlingPrice); 
                
				/*if($transactionId2 == 257942){
                // insert into transaction
				$sql = "INSERT INTO `transaction` (slip_no, slip_retur, stockpile_contract_id, transaction_date, loading_date, vehicle_no, labor_id, unloading_cost_id, "
                        . "unloading_date, freight_cost_id, handling_cost_id, permit_no, transaction_type, vendor_id, send_weight, bruto_weight, tarra_weight, "
                        . "netto_weight, notes, driver, freight_quantity, handling_quantity, quantity, shrink, freight_price, unloading_price, unit_price, "
                        . "inventory_value, block, curah_tax_id, uc_tax_id, fc_tax_id, entry_by, entry_date, modify_by, modify_date) "
                        . "VALUES ('{$slipNo}', '{$slipU}',{$stockpileContractId}, '{$dateR}', '{$dateR}', "
                        . "'{$vehicleNo}', {$laborId}, {$unloadingCostId}, '{$dateR}', {$freightCostId}, {$handlingCostId}, '{$permitNo}', "
                        . "{$transactionType}, {$supplierId}, {$sendWeight}, {$brutoWeight}, {$tarraWeight}, {$nettoWeight}, '{$notes}', "
                        . "'{$driver}', {$freightQuantity}, {$handlingQuantity}, {$quantity}, {$shrink}, {$freightPrice}, {$unloadingPrice}, {$unitPrice}, {$inventoryValue}, '{$block}', "
                        . "{$curahTaxId}, {$ucTaxId}, {$fcTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				}else{*/
                $sql = "UPDATE `transaction` SET "
                        . "stockpile_contract_id = {$stockpileContractId}, "
                        . "loading_date = STR_TO_DATE('{$loadingDate}', '%d/%m/%Y'), "
                        . "vehicle_no = '{$vehicleNo}', "
                        . "labor_id = {$laborId}, "
                        . "unloading_cost_id = {$unloadingCostId}, "
						. "transaction_date = STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), "
                        . "unloading_date = STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), "
                        . "freight_cost_id = {$freightCostId}, "
						. "handling_cost_id = {$handlingCostId}, "
                        . "permit_no = '{$permitNo}', "
                        . "vendor_id = {$supplierId}, "
                        . "send_weight = {$sendWeight}, "
                        . "bruto_weight = {$brutoWeight}, "
                        . "tarra_weight = {$tarraWeight}, "
                        . "netto_weight = {$nettoWeight}, "
                        . "notes = '{$notes}', "
                        . "driver = '{$driver}', "
                        . "freight_quantity = {$freightQuantity}, "
						. "handling_quantity = {$handlingQuantity}, "
                        . "quantity = {$quantity}, "
                        . "shrink = {$shrink}, "
						//. "susut_qty = {$qtySusut}, "
						//. "susut_price = {$hargaSusut}, "
                        . "freight_price = {$freightPrice}, "
						. "handling_price = {$handlingPrice}, "
                        . "unloading_price = {$unloadingPrice}, "
                        . "unit_price = {$unitPrice}, "
                        . "inventory_value = {$inventoryValue}, "
						. "fc_tax_id = {$fcTaxId}, "
						. "uc_tax_id = {$ucTaxId}, "
                        . "block = '{$block}', "
                        . "sync_status = {$syncStatus}, "
                        . "modify_by = {$_SESSION['userId']}, "
                        . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE transaction_id = {$transactionId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				//}
                if($result !== false) {
                    $return_value = '|OK|Transaction has updated successfully.|';
                    
                    // if curah update contract and stockpile_contract quantity
                    if($contractType == 'C') {
                       /* $sql = "UPDATE contract SET quantity = {$quantity} WHERE contract_id = {$contractId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        
                        $sql = "UPDATE stockpile_contract SET quantity = {$quantity} WHERE stockpile_contract_id = {$stockpileContractId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/
                    }
					
					$sql = "CALL sp_shrink_weight({$transactionId})";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    
                    insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.'. $sql .'|';
                }
            } else {
                $return_value = '|FAIL|The quantity exceed the balance of the contract.|';
            }
        } else {
            $return_value = '|FAIL|Please fill the required fields.|';
        }
        // </editor-fold>
        
    } elseif($transactionType == 2) {
        // <editor-fold defaultstate="collapsed" desc="OUT">
        if($stockpileId != '' && $salesId != '' && $shipmentId != '' && $transactionDate2 != '' && $vehicleNo2 != '' && $sendWeight2 != '' && $blWeight != '') {
			
			$sql = "UPDATE `transaction` SET "
                        . "vehicle_no = '{$vehicleNo2}', "
                        . "transaction_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                        . "unloading_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                        . "notes = '{$notes2}', "
                        . "modify_by = {$_SESSION['userId']}, "
                        . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE transaction_id = {$transactionId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				if($result !== false) {
                    
					$return_value = '|OK|Transaction has updated successfully.|';
                    
					insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.'. $sql .'|';
                }
            // check stockpile detail & transaction balance
			/*$sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode FROM `transaction` t WHERE t.transaction_id = {$transactionId}";
	$resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
            if($resultR !== false && $resultR->num_rows == 1) {
                $rowR = $resultR->fetch_object();
				//$R = "R";
				//$U = "-U";
                //$sql = "UPDATE `transaction` SET shipment_id = NULL WHERE transaction_id = {$transactionId}";
                //$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				//$slipU = $rowR->slip_no .''. $U;
				$checkSlipNo = $rowR->stockpileCode .'-'. $currentYear2;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				$slipR = $rowR->slip_no .'-R';
				$slipU = $rowR->slip_no .'-U';
				$dateR = $date->format('Y-m-d');
				$sendW = $rowR->send_weight * -1;
				$quantityW = $rowR->quantity * -1;
				$shrinkW = $rowR->shrink * -1;
				//$unloadingP = $rowR->unloading_price * -1;
				if($rowR->notes == '')
				$notes = 'NULL';
			}
				
	$sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},NULL,{$shipmentId},'{$rowR->transaction_date}',NULL,'{$rowR->vehicle_no}',NULL,NULL,'{$rowR->transaction_date}',NULL,NULL,NULL,{$rowR->transaction_type},NULL,'{$sendW}',0,0,0,'{$notes}',NULL,0,0,'{$quantityW}','{$shrinkW}',0,0,0,0,0,NULL,NULL,NULL,0,NULL,NULL,NULL,NULL,NULL,{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
       if($resultLog !== false) {     
    //echo $sqlLog;
	$transactionId = $myDatabase->insert_id;
	
	insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
	
	// delete from delivery and update delivery_status in transaction
                    $sql = "SELECT d.*, t.sync_status 
                            FROM delivery d
                            INNER JOIN `transaction` t
                                ON t.transaction_id = d.transaction_id
                            WHERE d.shipment_id = {$shipmentId}";
                    $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultShipment !== false && $resultShipment->num_rows > 0) {
                        while($rowShipment = $resultShipment->fetch_object()) {
                            $syncStatus = 0;
                            if($rowShipment->sync_status == 1) {
                                $syncStatus = 2;
                            }
                            
                            if($rowShipment->percent_taken == 100) {
                                $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } else {
                                $sqlOther = "SELECT * FROM delivery WHERE shipment_id <> {$shipmentId} AND transaction_id = {$rowShipment->transaction_id}";
                                $resultOther = $myDatabase->query($sqlOther, MYSQLI_STORE_RESULT);
                                
                                if($resultOther->num_rows > 0) {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 2, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                } else {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                }
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            }
                        }
                        
                        $sqlDelete = "DELETE FROM delivery WHERE shipment_id = {$shipmentId}";
                        $resultDelete = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);
						
                    }
					//$sql = "UPDATE `transaction` SET shipment_id = NULL WHERE transaction_id = {$transactionId}";
						//$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
	   }*/
					
	  // echo $sqlLog;
	  //insert new delivery
			/*$sql = "SELECT s.stockpile_code, s.stockpile_name, 
                        (
                            SELECT COALESCE(SUM(t.quantity), 0) FROM `transaction` t
                            INNER JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                            WHERE sc.stockpile_id = s.stockpile_id
                            AND t.transaction_type = 1
                        ) AS available_balance,
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction` 
                            WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                            AND transaction_type = 2
                        ) AS delivered_balance
                    FROM stockpile s
                    WHERE s.stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $stockpileName = $rowStockpile->stockpile_name;
                $availableBalance = $rowStockpile->available_balance;
                $deliveredBalance = $rowStockpile->delivered_balance;
            }
            
            // get sales detail
            $sql = "SELECT sl.quantity, sl.price_converted, sl.currency_id, sl.exchange_rate, sl.price, cust.pph_tax_id
                    FROM sales sl 
                    INNER JOIN customer cust
                        ON cust.customer_id = sl.customer_id
                    WHERE sl.sales_id = {$salesId}";
            $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSales !== false && $resultSales->num_rows == 1) {
                $rowSales = $resultSales->fetch_object();
                $salesBalance = $rowSales->quantity;
                $salesUnitPrice = $rowSales->price_converted;
                $salesCurrencyId = $rowSales->currency_id;
                $salesExchangeRate = $rowSales->exchange_rate;
                $salesOriginalUnitPrice = $rowSales->price;
                $custTaxId = $rowSales->pph_tax_id;
            }

            // get next slip no
			
					$checkSlipNo = $stockpileCode .'-'. $currentYear3;
				
            //$checkSlipNo = $stockpileCode /*.'-'. $currentYear*///;
//            $sql = "SELECT LPAD(COUNT(1) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ";
//            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            /*$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSlip->num_rows == 0) {
                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }
            $rowSlipNo = $resultSlip->fetch_object();
            $nextSlipNo = $rowSlipNo->next_id;
            $slipNo = $checkSlipNo .'-'. $nextSlipNo;
            

//            if($sendWeight2 <= $availableBalance && $blWeight <= ($salesBalance - $deliveredBalance)) {
            if($sendWeight2 <= $availableBalance) {    
                $shrink = $sendWeight2 - $blWeight;
                
                // insert into transaction
                $sql = "INSERT INTO `transaction` (slip_no, slip_retur, shipment_id, transaction_date,unloading_date, vehicle_no, transaction_type, "
                        . "send_weight, notes, quantity, shrink, cust_tax_id, entry_by, entry_date) "
                        . "VALUES ('{$slipNo}', '{$slipU}', {$shipmentId}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), '{$vehicleNo2}', "
                        . "{$transactionType}, {$sendWeight2}, '{$notes2}', {$blWeight}, {$shrink}, {$custTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $transactionId = $myDatabase->insert_id;
                    
                    $return_value = '|OK|Transaction has inserted successfully.|';
                    
                    // insert into delivery
                    $sql = "SELECT t.* 
                            FROM transaction t 
                            WHERE t.stockpile_contract_id IN (
                                SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                            ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                              ORDER BY t.unloading_date ASC, t.slip_no ASC";
                    $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $totalInventoryValue = 0;
                    if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                        $balanceLeft = $sendWeight2;
                        while($rowDelivery = $resultDelivery->fetch_object()) {
                            $syncStatus = 0;
                            if($rowDelivery->sync_status == 1) {
                                $syncStatus = 2;
                            }
                            
                            if($balanceLeft > 0) {
                                if($rowDelivery->delivery_status == 0) {
                                    if($balanceLeft >= $rowDelivery->quantity) {
                                        $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                        $quantityTaken = $rowDelivery->quantity;
                                        $percentTaken = 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < $rowDelivery->quantity) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } elseif($rowDelivery->delivery_status == 2) {
                                    $totalTaken = 0;
                                    $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                    $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                        $rowTaken = $resultTaken->fetch_object();
                                        $totalTaken = $rowTaken->total_taken;
                                    }
                                    
                                    if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                        $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                        $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } 
                                
                                $deliveryValue = $quantityTaken * $salesUnitPrice;
                                $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                $percentTaken = $percentTaken * 100;

                                $sql = "INSERT INTO `delivery` (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                        . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                        . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                                $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus}, sync_status = {$syncStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    }
                    
                    //$updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                    $updateInventoryValue = $totalInventoryValue;
                    
                    $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    
                    // update shipment
                    $cogsAmount = $updateInventoryValue;
                    if($salesCurrencyId != 1) {
                        $cogsAmount = $updateInventoryValue / $salesExchangeRate;
                    }
                    $invoiceAmount = $blWeight * $salesOriginalUnitPrice;
                    $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                            . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$blWeight}, shipment_status = 1 "
                            . "WHERE shipment_id = {$shipmentId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    
                    // update sales
                    $boolUpdateSales = false;
                    if($blWeight == ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 1;
                        $boolUpdateSales = true;
                    } elseif($blWeight < ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 2;
                        $boolUpdateSales = true;
                    }
                    
                    if($boolUpdateSales) {
                        $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }
                    
                     insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                     
                    unset($_SESSION['transaction']);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.|';
                }
            } else {
                if($sendWeight2 > $availableBalance) {
                    $return_value = '|FAIL|Available quantity in '. $stockpileName .' is '. number_format($availableBalance, 4, '.', ',') .' Kg.|';
                } elseif($sendWeight2 > ($salesBalance - $deliveredBalance)) {
                    $return_value = '|FAIL|Sales agreement balance is '. ($salesBalance - $deliveredBalance) .' Kg.|';
                }
            }*/
          /*  $sql = "SELECT s.stockpile_code, s.stockpile_name, 
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction` 
                            WHERE stockpile_id = s.stockpile_id
                            AND transaction_type = 1
                        ) AS available_balance,
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction` 
                            WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                            AND transaction_type = 2
                        ) AS delivered_balance
                    FROM stockpile s
                    WHERE s.stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $stockpileName = $rowStockpile->stockpile_name;
                $availableBalance = $rowStockpile->available_balance;
                $deliveredBalance = $rowStockpile->delivered_balance;
            }
            
            // get sales detail
            $sql = "SELECT quantity, price_converted, currency_id, exchange_rate, price FROM sales WHERE sales_id = {$salesId}";
            $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSales !== false && $resultSales->num_rows == 1) {
                $rowSales = $resultSales->fetch_object();
                $salesBalance = $rowSales->quantity;
                $salesUnitPrice = $rowSales->price_converted;
                $salesCurrencyId = $rowSales->currency_id;
                $salesExchangeRate = $rowSales->exchange_rate;
                $salesOriginalUnitPrice = $rowSales->price;
            }

            if($sendWeight2 != 0 && $blWeight != 0) {
                
                $shrink = $sendWeight2 - $blWeight;
                
                $syncStatus = 0;
                $sql = "SELECT sync_status FROM `transaction` WHERE transaction_id = {$transactionId}";
                $resultTrans = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultTrans !== false && $resultTrans->num_rows == 1) {
                    $rowTrans = $resultTrans->fetch_object();
                    if($rowTrans->sync_status == 1) {
                        $syncStatus = 2;
                    } 
                }
                
                // insert into transaction
                $sql = "UPDATE `transaction` SET "
                        . "shipment_id = {$shipmentId}, "
                        . "vehicle_no = '{$vehicleNo2}', "
                        . "send_weight = {$sendWeight2}, "
						. "notes = '{$notes2}', "
                        . "quantity = {$blWeight}, "
                        . "shrink = {$shrink}, "
                        . "sync_status = {$syncStatus}, "
                        . "modify_by = {$_SESSION['userId']}, "
                        . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE transaction_id = {$transactionId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $transactionId = $myDatabase->insert_id;
                    
                    $return_value = '|OK|Transaction has updated successfully.|';
                    
                    // delete from delivery and update delivery_status in transaction
                    $sql = "SELECT d.*, t.sync_status 
                            FROM delivery d
                            INNER JOIN `transaction` t
                                ON t.transaction_id = d.transaction_id
                            WHERE d.shipment_id = {$shipmentId}";
                    $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultShipment !== false && $resultShipment->num_rows > 0) {
                        while($rowShipment = $resultShipment->fetch_object()) {
                            $syncStatus = 0;
                            if($rowShipment->sync_status == 1) {
                                $syncStatus = 2;
                            }
                            
                            if($rowShipment->percent_taken == 100) {
                                $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } else {
                                $sqlOther = "SELECT * FROM delivery WHERE shipment_id <> {$shipmentId} AND transaction_id = {$rowShipment->transaction_id}";
                                $resultOther = $myDatabase->query($sqlOther, MYSQLI_STORE_RESULT);
                                
                                if($resultOther->num_rows > 0) {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 2, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                } else {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                }
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            }
                        }
                        
                        $sqlDelete = "DELETE FROM delivery WHERE shipment_id = {$shipmentId}";
                        $resultDelete = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);
                    }
                    
                    
                    // insert into delivery
						$sql = "SELECT t.* 
                            FROM transaction t 
                            WHERE t.stockpile_contract_id IN (
                                SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                            ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                            ORDER BY  t.unloading_date ASC, t.slip_no ASC";
                    $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $totalInventoryValue = 0;
                    if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                        $balanceLeft = $sendWeight2;
                        while($rowDelivery = $resultDelivery->fetch_object()) {
                            $syncStatus = 0;
                            if($rowDelivery->sync_status == 1) {
                                $syncStatus = 2;
                            }
                            
                            if($balanceLeft > 0) {
                                if($rowDelivery->delivery_status == 0) {
                                    if($balanceLeft >= $rowDelivery->quantity) {
                                        $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                        $quantityTaken = $rowDelivery->quantity;
                                        $percentTaken = 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < $rowDelivery->quantity) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } elseif($rowDelivery->delivery_status == 2) {
                                    $totalTaken = 0;
                                    $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                    $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                        $rowTaken = $resultTaken->fetch_object();
                                        $totalTaken = $rowTaken->total_taken;
                                    }
                                    
                                    if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                        $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                        $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                }  
                                
                                $deliveryValue = $quantityTaken * $salesUnitPrice;
                                $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                $percentTaken = $percentTaken * 100;

                                $sql = "INSERT INTO delivery (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                        . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                        . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                                $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus}, sync_status = {$syncStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    }
                    
                    $updateInventoryValue = $totalInventoryValue;
//                    $updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                    
                    $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    
                    // update shipment
                    $cogsAmount = $updateInventoryValue;
                    if($salesCurrencyId != 1) {
                        $cogsAmount = $updateInventoryValue / $salesExchangeRate;
                    }
                    $invoiceAmount = $blWeight * $salesOriginalUnitPrice;
                    $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                            . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$blWeight}, shipment_status = 1 "
                            . "WHERE shipment_id = {$shipmentId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    
                    // update sales
                    $boolUpdateSales = false;
                    if($sendWeight2 == ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 1;
                        $boolUpdateSales = true;
                    } elseif($sendWeight2 < ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 2;
                        $boolUpdateSales = true;
                    }
                    
                    if($boolUpdateSales) {
                        $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }
					
					insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                     
                    unset($_SESSION['transaction']);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.|';
					echo $sql;
                }
            } else {
                if($sendWeight2 > $availableBalance) {
                    $return_value = '|FAIL|Available quantity in '. $stockpileName .' is '. number_format($availableBalance, 4, '.', ',') .' Kg.|';
                } elseif($sendWeight2 > ($salesBalance - $deliveredBalance)) {
                    $return_value = '|FAIL|Sales agreement balance is '. ($salesBalance - $deliveredBalance) .' Kg.|';
                }
            }*/
        } else {
            $return_value = '|FAIL|Please fill the required fields.|';
        }
        // </editor-fold>
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_transaction_data_new') {
    // <editor-fold defaultstate="collapsed" desc="update_transaction_data">
    
    $return_value = '';
    $boolQuantity = true;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $transactionId = $myDatabase->real_escape_string($_POST['transactionId']);
	$transactionId2 = $transactionId;
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
    $transactionDate = $myDatabase->real_escape_string($_POST['transactionDate']);
    $loadingDate = $myDatabase->real_escape_string($_POST['loadingDate']);
    $transactionDate2 = $myDatabase->real_escape_string($_POST['transactionDate2']);
    $vehicleNo = $myDatabase->real_escape_string($_POST['vehicleNo']);
    $vehicleNo2 = $myDatabase->real_escape_string($_POST['vehicleNo2']);
    $unloadingCostId = $myDatabase->real_escape_string($_POST['unloadingCostId']);
    $unloadingDate = $myDatabase->real_escape_string($_POST['unloadingDate']);
    $freightCostId = $myDatabase->real_escape_string($_POST['freightCostId']);
	$handlingCostId = $myDatabase->real_escape_string($_POST['handlingCostId']);
    $permitNo2 = $myDatabase->real_escape_string($_POST['permitNo2']);
    $transactionType = $myDatabase->real_escape_string($_POST['transactionType']);
    $sendWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight']));
    $sendWeight2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['sendWeight2']));
    $blWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['blWeight']));
    $brutoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['brutoWeight']));
    $tarraWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['tarraWeight']));
    $nettoWeight = str_replace(",", "", $myDatabase->real_escape_string($_POST['nettoWeight']));
    $notes = $myDatabase->real_escape_string($_POST['notes']);
	$notes2 = $myDatabase->real_escape_string($_POST['notes2']);
    $driver = $myDatabase->real_escape_string($_POST['driver']);
    $block = $myDatabase->real_escape_string($_POST['block']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $supplierId = $vendorId;
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $isTaxable = $myDatabase->real_escape_string($_POST['isTaxable']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $stockpileCode = '';
    $unitPrice = 0;
    $balanceQuantity = 0;
    $contractId = 0;
    $custTaxId = 'NULL';
    $curahTaxId = 'NULL';
    $ucTaxId = 0;
    $fcTaxId = 0;
    // </editor-fold>
    
    //insert to log table
	/*if($transactionId == 257942){
	$sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode FROM `transaction` t WHERE t.transaction_id = {$transactionId}";
	$resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
            if($resultR !== false && $resultR->num_rows == 1) {
                $rowR = $resultR->fetch_object();
				//$R = "R";
				//$U = "-U";
                
				//$slipU = $rowR->slip_no .''. $U;
				$checkSlipNo = $rowR->stockpileCode .'-'. $currentYear;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				$slipR = $rowR->slip_no .'-R';
				$slipU = $rowR->slip_no .'-U';
				$dateR = $date->format('Y-m-d');
				$sendW = $rowR->send_weight * -1;
				$brutoW = $rowR->bruto_weight * -1;
				$tarraW = $rowR->tarra_weight * -1;
				$nettoW = $rowR->netto_weight * -1;
				$handlingW = $rowR->handling_quantity * -1;
				$freightW = $rowR->freight_quantity * -1;
				$quantityW = $rowR->quantity * -1;
				$shrinkW = $rowR->shrink * -1;
				$unloadingP = $rowR->unloading_price * -1;
				
				if($rowR->shipment_id == ''){
					$shipment_id = 'NULL';	
				}else{
					$shipment_id = $rowR->shipment_id;	
				}
				if($rowR->labor_id == ''){
					$labor_id = 'NULL';
				}else{
					$labor_id = $rowR->labor_id;
				}
				if($rowR->unloading_cost_id == ''){
					$unloading_cost_id = 'NULL';
				}else{
					$unloading_cost_id = $rowR->unloading_cost_id;
				}
				if($rowR->handling_cost_id == ''){
					$handling_cost_id = 'NULL';
				}else{
					$handling_cost_id = $rowR->handling_cost_id;
				}
				if($rowR->freight_cost_id == ''){
					$freight_cost_id = 'NULL';
				}else{
					$freight_cost_id = $rowR->freight_cost_id;
				}
				if($rowR->permit_no == ''){
					$permit_no = 'NULL';
				}else{
					$permit_no = $rowR->permit_no;
				}
				if($rowR->vendor_id == ''){
					$vendor_id = 'NULL';
				}else{
					$vendor_id = $rowR->vendor_id;
				}
				if($rowR->cust_tax_id == ''){
					$cust_tax_id = 'NULL';
				}else{
					$cust_tax_id = $rowR->cust_tax_id;
				}
				if($rowR->curah_tax_id == ''){
					$curah_tax_id = 'NULL';
				}else{
					$curah_tax_id = $rowR->curah_tax_id;
				}
				if($rowR->uc_tax_id == ''){
					$uc_tax_id = 'NULL';
				}else{
					$uc_tax_id = $rowR->uc_tax_id;
				}
				if($rowR->fc_tax_id == ''){
					$fc_tax_id = 'NULL';
				}else{
					$fc_tax_id = $rowR->fc_tax_id;
				}
				if($rowR->block == ''){
					$block = 'NULL';
				}else{
					$block = $rowR->block;
				}
				//if($rowR->payment_id == ''){
					$payment_id = 'NULL';
				//}else{
					//$payment_id = $rowR->payment_id;
				//}
				//if($rowR->fc_payment_id == ''){
					$fc_payment_id = 'NULL';
				//}else{
					//$fc_payment_id = $rowR->fc_payment_id;
				//}
				//if($rowR->hc_payment_id == ''){
					$hc_payment_id = 'NULL';
				//}else{
					//$hc_payment_id = $rowR->hc_payment_id;
				//}
				//if($rowR->uc_payment_id == ''){
					$uc_payment_id = 'NULL';
				//}else{
					//$uc_payment_id = $rowR->uc_payment_id;
				//}
				if($rowR->notes == ''){
					$notes = 'NULL';
				}else{
					$notes = $rowR->notes;
				}
				$delivery_status = 0;
			}
				
	$sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},{$rowR->stockpile_contract_id},{$shipment_id},'{$dateR}','{$dateR}','{$rowR->vehicle_no}',{$labor_id},{$unloading_cost_id},'{$dateR}',{$handling_cost_id},{$freight_cost_id},'{$permit_no}',{$rowR->transaction_type},{$vendor_id},'{$sendW}','{$brutoW}','{$tarraW}','{$nettoW}','{$notes}','{$rowR->driver}','{$handlingW}','{$freightW}','{$quantityW}','{$shrinkW}','{$rowR->freight_price}','{$unloadingP}','{$rowR->unit_price}','{$rowR->inventory_value}',{$cust_tax_id},{$curah_tax_id},{$uc_tax_id},{$fc_tax_id},{$delivery_status},'{$block}',{$payment_id},{$fc_payment_id},{$hc_payment_id},{$uc_payment_id},{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
       if($resultLog !== false) {     
    //echo $sqlLog;
	$transactionId = $myDatabase->insert_id;
	
	insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
	   }
	   
	}*/
    
    if($isTaxable == '') {
        $isTaxable = 0;
    }
    
    if($ppn == '') {
        $ppn = 0;
    }
    
    if($pph == '') {
        $pph = 0;
    }
    
    if($transactionType == 1) {
		//echo 'test2';
		//$transactionId2 = 0;
        // <editor-fold defaultstate="collapsed" desc="IN">
        if($stockpileId != '' && $stockpileContractId != '' && $loadingDate != '' && $vehicleNo != '' && $unloadingCostId != '' &&
                $unloadingDate != '' && $freightCostId != '' && $handlingCostId != '' && $permitNo2 != '' && $transactionType != '' && $sendWeight != '' &&
                $brutoWeight != '' && $tarraWeight != '' && $driver != '' && $vendorId != '' && $laborId != '') {

            if($supplierId == '') {
                $supplierId = "NULL";
            }
           
            // check balance contract & get unit price
            $sql = "SELECT s.stockpile_code, con.price_converted, sc.contract_id, con.contract_type, 
                        ((SELECT COALESCE(SUM(quantity), 0) FROM stockpile_contract WHERE contract_id = sc.contract_id
                        ) - con.adjustment) - (
                            SELECT COALESCE(SUM(t.send_weight), 0) FROM `transaction` t LEFT JOIN stockpile_contract sc ON t.stockpile_contract_id = sc.stockpile_contract_id
                            WHERE sc.contract_id =  con.contract_id
                        ) AS balance, s.freight_weight_rule, s.curah_weight_rule, v.pph_tax_id
                    FROM stockpile_contract sc
                    INNER JOIN stockpile s
                        ON s.stockpile_id = sc.stockpile_id
                    INNER JOIN contract con
                        ON con.contract_id = sc.contract_id
                    INNER JOIN vendor v
                        ON v.vendor_id = con.vendor_id
                    WHERE stockpile_contract_id = {$stockpileContractId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $contractId = $rowStockpile->contract_id;
                $unitPrice = $rowStockpile->price_converted;
                $contractType = $rowStockpile->contract_type;
                $freightWeightRule = $rowStockpile->freight_weight_rule;
                $curahWeightRule = $rowStockpile->curah_weight_rule;
                if($contractType == 'P') {
                    $balanceQuantity = $rowStockpile->balance;
                } elseif($contractType == 'C') {
                    $balanceQuantity = $sendWeight;
                    if($rowStockpile->pph_tax_id != 0 && $rowStockpile->pph_tax_id != '') {
                        $curahTaxId = $rowStockpile->pph_tax_id;
                    }
                }
            }

            // get netto weight
            //$nettoWeight = $brutoWeight - $tarraWeight;
            
			// get freight weight
			$sqlfc = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                    $resultFreight = $myDatabase->query($sqlfc, MYSQLI_STORE_RESULT);
                    if($resultFreight !== false && $resultFreight->num_rows == 1) {
                        $rowFreight = $resultFreight->fetch_object();
                        $freightRule = $rowFreight->freight_rule;
					
                       
                    }
					
            // get freight weight
           if($freightRule == 1) {
				$freightQuantity = $sendWeight;
            }else if($freightRule == 0) {
                if($nettoWeight < $sendWeight) {
                    $freightQuantity = $nettoWeight;
                } else if($nettoWeight > $sendWeight) {
                    $freightQuantity = $sendWeight;
                } else {
                    $freightQuantity = $sendWeight;
                }
            } /*elseif($freightWeightRule == 1) {
                $freightQuantity = $sendWeight;
            } elseif($freightWeightRule == 2) {
                $freightQuantity = $nettoWeight;
            } else {
                $freightQuantity = $sendWeight;
            }*/

            // get shrink condition
//            $quantity = $nettoWeight;
//            $sql = "SELECT * FROM `condition` WHERE category_id = 1 AND contract_id = {$contractId}";
//            $resultCondition = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//            if($resultCondition !== false && $resultCondition->num_rows == 1) {
//                $rowCondition = $resultCondition->fetch_object();
//                $quantity = ${$rowCondition->rule};
//            }
			if($sendWeight > $balanceQuantity && $balanceQuantity > 0){
				$balanceQuantity = $sendWeight;
					
			}

            if($sendWeight <= $balanceQuantity || $balanceQuantity == 0) {
                // get shrink
                $shrink = 0;
                if($contractType == 'P') {
                    if($nettoWeight < $sendWeight) {
                        $quantity = $nettoWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } elseif($nettoWeight > $sendWeight) {
                        $quantity = $sendWeight;
                        $shrink = 0;
                    } else {
                        $quantity = $sendWeight;
                    }
                } elseif($contractType == 'C') {
                    if($curahWeightRule == 0) {
                        if($nettoWeight < $sendWeight) {
                            $quantity = $nettoWeight;
                            $shrink = $sendWeight - $nettoWeight;
                        } elseif($nettoWeight > $sendWeight) {
                            $quantity = $sendWeight;
                            $shrink = $sendWeight - $nettoWeight;
                        } else {
                            $quantity = $sendWeight;
                        }
                    } elseif($curahWeightRule == 1) {
                        $quantity = $sendWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } elseif($curahWeightRule == 2) {
                        $quantity = $nettoWeight;
                        $shrink = $sendWeight - $nettoWeight;
                    } else {
                        $quantity = $sendWeight;
                    }
                }
				/*if($transactionId2 == 257942){
                $checkSlipNo = $rowR->stockpileCode .'-'. $currentYear;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				}*/
                // get freight cost
                if($freightCostId == 'NONE') {
                    $freightCostId = 'NULL';
                    $freightPrice = 0;
					//$freightQuantity2 = 0;
                } else {
                     $sqlF = "SELECT fc.freight_id, fc.price_converted, f.pph_tax_id, f.freight_rule
                            FROM `freight_cost` fc 
                            INNER JOIN freight f
                                ON f.freight_id = fc.freight_id
                            WHERE fc.freight_cost_id = {$freightCostId}";
                    $resultF = $myDatabase->query($sqlF, MYSQLI_STORE_RESULT);
                    if($resultF !== false && $resultF->num_rows == 1) {
                        $rowF = $resultF->fetch_object();
                        $freightPrice = $rowF->price_converted;
						if($rowF->freight_rule == 1){
							//$freightQuantity2 = $sendWeight;
						}else{
							//$freightQuantity2 = $nettoWeight;
						}
                        if($rowF->pph_tax_id != 0 && $rowF->pph_tax_id != '') {
                            $fcTaxId = $rowF->pph_tax_id;
                        }else{
							$fcTaxId = 0;
						}
                    }
                }
				
				// get handling cost
				if($handlingCostId == 'NONE') {
                    $handlingCostId = 'NULL';
					$handlingQuantity = 0;
					$handlingPrice = 0;
                } else {
                    $sql = "SELECT vhc.vendor_handling_id, vhc.price_converted, vh.pph_tax_id, vh.vendor_handling_rule
                            FROM `vendor_handling_cost` vhc 
                            INNER JOIN vendor_handling vh
                                ON vh.vendor_handling_id = vhc.vendor_handling_id
                            WHERE vhc.handling_cost_id = {$handlingCostId}";
                    $resultHandling = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultHandling !== false && $resultHandling->num_rows == 1) {
                        $rowHandling = $resultHandling->fetch_object();
                        $handlingPrice = $rowHandling->price_converted;
					if($rowHandling->vendor_handling_rule == 1){
							$handlingQuantity = $sendWeight;
						}else{
							$handlingQuantity = $nettoWeight;
						}
                        
                    }
                }

                // get unloading cost
                if($unloadingCostId == 'NONE') {
                    $unloadingCostId = 'NULL';
                    $unloadingPrice = 0;
                } else {
                    $sql = "SELECT uc.price_converted 
                            FROM `unloading_cost` uc 
                            WHERE uc.unloading_cost_id = {$unloadingCostId}";
                    $resultUnloading = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultUnloading !== false && $resultUnloading->num_rows == 1) {
                        $rowUnloading = $resultUnloading->fetch_object();
                        $unloadingPrice = $rowUnloading->price_converted;
                    }
                }
                
                if($laborId == 'NONE') {
                    $laborId = 'NULL';
                } else {
                    $sql = "SELECT l.pph_tax_id
                            FROM `labor` l
                            WHERE l.labor_id = {$laborId}";
                    $resultLabor = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultLabor !== false && $resultLabor->num_rows == 1) {
                        $rowLabor = $resultLabor->fetch_object();
                        if($rowLabor->pph_tax_id != 0 && $rowLabor->pph_tax_id != '') {
                            $ucTaxId = $rowLabor->pph_tax_id;
                        }
                    }
                }
                
                $syncStatus = 0;
                $sql = "SELECT sync_status FROM `transaction` WHERE transaction_id = {$transactionId}";
                $resultTrans = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultTrans !== false && $resultTrans->num_rows == 1) {
                    $rowTrans = $resultTrans->fetch_object();
                    if($rowTrans->sync_status == 1) {
                        $syncStatus = 2;
                    } 
                }
                
                // get inventory value
               $inventoryValue = ($freightQuantity * $freightPrice) + $unloadingPrice + ($quantity * $unitPrice) + ($handlingQuantity * $handlingPrice); 
                
				/*if($transactionId2 == 257942){
                // insert into transaction
				$sql = "INSERT INTO `transaction` (slip_no, slip_retur, stockpile_contract_id, transaction_date, loading_date, vehicle_no, labor_id, unloading_cost_id, "
                        . "unloading_date, freight_cost_id, handling_cost_id, permit_no, transaction_type, vendor_id, send_weight, bruto_weight, tarra_weight, "
                        . "netto_weight, notes, driver, freight_quantity, handling_quantity, quantity, shrink, freight_price, unloading_price, unit_price, "
                        . "inventory_value, block, curah_tax_id, uc_tax_id, fc_tax_id, entry_by, entry_date, modify_by, modify_date) "
                        . "VALUES ('{$slipNo}', '{$slipU}',{$stockpileContractId}, '{$dateR}', '{$dateR}', "
                        . "'{$vehicleNo}', {$laborId}, {$unloadingCostId}, '{$dateR}', {$freightCostId}, {$handlingCostId}, '{$permitNo}', "
                        . "{$transactionType}, {$supplierId}, {$sendWeight}, {$brutoWeight}, {$tarraWeight}, {$nettoWeight}, '{$notes}', "
                        . "'{$driver}', {$freightQuantity}, {$handlingQuantity}, {$quantity}, {$shrink}, {$freightPrice}, {$unloadingPrice}, {$unitPrice}, {$inventoryValue}, '{$block}', "
                        . "{$curahTaxId}, {$ucTaxId}, {$fcTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				}else{*/
                $sql = "UPDATE `transaction` SET "
                        . "stockpile_contract_id = {$stockpileContractId}, "
                        . "loading_date = STR_TO_DATE('{$loadingDate}', '%d/%m/%Y'), "
                        . "vehicle_no = '{$vehicleNo}', "
                        . "labor_id = {$laborId}, "
                        . "unloading_cost_id = {$unloadingCostId}, "
						. "transaction_date = STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), "
                        . "unloading_date = STR_TO_DATE('{$unloadingDate}', '%d/%m/%Y'), "
                        . "freight_cost_id = {$freightCostId}, "
						. "handling_cost_id = {$handlingCostId}, "
                        . "do_no = '{$permitNo2}', "
                        . "vendor_id = {$supplierId}, "
                        . "send_weight = {$sendWeight}, "
                        . "bruto_weight = {$brutoWeight}, "
                        . "tarra_weight = {$tarraWeight}, "
                        . "netto_weight = {$nettoWeight}, "
                        . "notes = '{$notes}', "
                        . "driver = '{$driver}', "
                        . "freight_quantity = {$freightQuantity}, "
						. "handling_quantity = {$handlingQuantity}, "
                        . "quantity = {$quantity}, "
                        . "shrink = {$shrink}, "
						//. "susut_qty = {$qtySusut}, "
						//. "susut_price = {$hargaSusut}, "
                        . "freight_price = {$freightPrice}, "
						. "handling_price = {$handlingPrice}, "
                        . "unloading_price = {$unloadingPrice}, "
                        . "unit_price = {$unitPrice}, "
                        . "inventory_value = {$inventoryValue}, "
						. "fc_tax_id = {$fcTaxId}, "
						. "uc_tax_id = {$ucTaxId}, "
                        . "block = '{$block}', "
                        . "sync_status = {$syncStatus}, "
                        . "modify_by = {$_SESSION['userId']}, "
                        . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE transaction_id = {$transactionId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				//}
                if($result !== false) {
                    $return_value = '|OK|Transaction has updated successfully.|';
                    
                    // if curah update contract and stockpile_contract quantity
                    if($contractType == 'C') {
                      /*  $sql = "UPDATE contract SET quantity = {$quantity} WHERE contract_id = {$contractId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        
                        $sql = "UPDATE stockpile_contract SET quantity = {$quantity} WHERE stockpile_contract_id = {$stockpileContractId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/
                    }
					
					$sql = "CALL sp_shrink_weight({$transactionId})";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    
                    insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.'. $sql .'|';
                }
            } else {
                $return_value = '|FAIL|The quantity exceed the balance of the contract.|';
            }
        } else {
            $return_value = '|FAIL|Please fill the required fields.|';
        }
        // </editor-fold>
        
    } elseif($transactionType == 2) {
        // <editor-fold defaultstate="collapsed" desc="OUT">
        if($stockpileId != '' && $salesId != '' && $shipmentId != '' && $transactionDate2 != '' && $vehicleNo2 != '' && $sendWeight2 != '' && $blWeight != '') {
			
			$sql = "UPDATE `transaction` SET "
                        . "vehicle_no = '{$vehicleNo2}', "
                        . "transaction_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                        . "unloading_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                        . "notes = '{$notes2}', "
                        . "modify_by = {$_SESSION['userId']}, "
                        . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE transaction_id = {$transactionId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				if($result !== false) {
                    
					$return_value = '|OK|Transaction has updated successfully.|';
                    
					insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.'. $sql .'|';
                }
            // check stockpile detail & transaction balance
			/*$sqlR = "SELECT t.*, SUBSTRING(t.slip_no,1,3) AS stockpileCode FROM `transaction` t WHERE t.transaction_id = {$transactionId}";
	$resultR = $myDatabase->query($sqlR, MYSQLI_STORE_RESULT);
            if($resultR !== false && $resultR->num_rows == 1) {
                $rowR = $resultR->fetch_object();
				//$R = "R";
				//$U = "-U";
                //$sql = "UPDATE `transaction` SET shipment_id = NULL WHERE transaction_id = {$transactionId}";
                //$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				//$slipU = $rowR->slip_no .''. $U;
				$checkSlipNo = $rowR->stockpileCode .'-'. $currentYear2;
				$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultSlip->num_rows == 0) {
                    $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                $rowSlipNo = $resultSlip->fetch_object();
                $nextSlipNo = $rowSlipNo->next_id;
                $slipNo = $checkSlipNo .'-'. $nextSlipNo;
				$slipR = $rowR->slip_no .'-R';
				$slipU = $rowR->slip_no .'-U';
				$dateR = $date->format('Y-m-d');
				$sendW = $rowR->send_weight * -1;
				$quantityW = $rowR->quantity * -1;
				$shrinkW = $rowR->shrink * -1;
				//$unloadingP = $rowR->unloading_price * -1;
				if($rowR->notes == '')
				$notes = 'NULL';
			}
				
	$sqlLog = "INSERT INTO `transaction`
(slip_no,slip_retur,product_id,stockpile_contract_id,shipment_id,transaction_date,loading_date,vehicle_no,labor_id,unloading_cost_id,unloading_date,handling_cost_id,freight_cost_id,permit_no,
transaction_type,vendor_id,send_weight,bruto_weight,tarra_weight,netto_weight,notes,driver,handling_quantity,freight_quantity,quantity,shrink,freight_price,unloading_price,unit_price,
inventory_value,cust_tax_id,curah_tax_id,uc_tax_id,fc_tax_id,delivery_status,block,payment_id,fc_payment_id,hc_payment_id,uc_payment_id,sync_status,company_id,entry_by,entry_date,modify_by,modify_date)
VALUES
('{$slipNo}','{$slipR}',{$rowR->product_id},NULL,{$shipmentId},'{$rowR->transaction_date}',NULL,'{$rowR->vehicle_no}',NULL,NULL,'{$rowR->transaction_date}',NULL,NULL,NULL,{$rowR->transaction_type},NULL,'{$sendW}',0,0,0,'{$notes}',NULL,0,0,'{$quantityW}','{$shrinkW}',0,0,0,0,0,NULL,NULL,NULL,0,NULL,NULL,NULL,NULL,NULL,{$rowR->sync_status},{$rowR->company_id},{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$_SESSION['userId']},STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
    $resultLog = $myDatabase->query($sqlLog, MYSQLI_STORE_RESULT);
       if($resultLog !== false) {     
    //echo $sqlLog;
	$transactionId = $myDatabase->insert_id;
	
	insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
	
	// delete from delivery and update delivery_status in transaction
                    $sql = "SELECT d.*, t.sync_status 
                            FROM delivery d
                            INNER JOIN `transaction` t
                                ON t.transaction_id = d.transaction_id
                            WHERE d.shipment_id = {$shipmentId}";
                    $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultShipment !== false && $resultShipment->num_rows > 0) {
                        while($rowShipment = $resultShipment->fetch_object()) {
                            $syncStatus = 0;
                            if($rowShipment->sync_status == 1) {
                                $syncStatus = 2;
                            }
                            
                            if($rowShipment->percent_taken == 100) {
                                $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } else {
                                $sqlOther = "SELECT * FROM delivery WHERE shipment_id <> {$shipmentId} AND transaction_id = {$rowShipment->transaction_id}";
                                $resultOther = $myDatabase->query($sqlOther, MYSQLI_STORE_RESULT);
                                
                                if($resultOther->num_rows > 0) {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 2, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                } else {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                }
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            }
                        }
                        
                        $sqlDelete = "DELETE FROM delivery WHERE shipment_id = {$shipmentId}";
                        $resultDelete = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);
						
                    }
					//$sql = "UPDATE `transaction` SET shipment_id = NULL WHERE transaction_id = {$transactionId}";
						//$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
	   }*/
					
	  // echo $sqlLog;
	  //insert new delivery
			/*$sql = "SELECT s.stockpile_code, s.stockpile_name, 
                        (
                            SELECT COALESCE(SUM(t.quantity), 0) FROM `transaction` t
                            INNER JOIN stockpile_contract sc ON sc.stockpile_contract_id = t.stockpile_contract_id
                            WHERE sc.stockpile_id = s.stockpile_id
                            AND t.transaction_type = 1
                        ) AS available_balance,
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction` 
                            WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                            AND transaction_type = 2
                        ) AS delivered_balance
                    FROM stockpile s
                    WHERE s.stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $stockpileName = $rowStockpile->stockpile_name;
                $availableBalance = $rowStockpile->available_balance;
                $deliveredBalance = $rowStockpile->delivered_balance;
            }
            
            // get sales detail
            $sql = "SELECT sl.quantity, sl.price_converted, sl.currency_id, sl.exchange_rate, sl.price, cust.pph_tax_id
                    FROM sales sl 
                    INNER JOIN customer cust
                        ON cust.customer_id = sl.customer_id
                    WHERE sl.sales_id = {$salesId}";
            $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSales !== false && $resultSales->num_rows == 1) {
                $rowSales = $resultSales->fetch_object();
                $salesBalance = $rowSales->quantity;
                $salesUnitPrice = $rowSales->price_converted;
                $salesCurrencyId = $rowSales->currency_id;
                $salesExchangeRate = $rowSales->exchange_rate;
                $salesOriginalUnitPrice = $rowSales->price;
                $custTaxId = $rowSales->pph_tax_id;
            }

            // get next slip no
			
					$checkSlipNo = $stockpileCode .'-'. $currentYear3;
				
            //$checkSlipNo = $stockpileCode /*.'-'. $currentYear*///;
//            $sql = "SELECT LPAD(COUNT(1) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ";
//            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            /*$sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSlip->num_rows == 0) {
                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }
            $rowSlipNo = $resultSlip->fetch_object();
            $nextSlipNo = $rowSlipNo->next_id;
            $slipNo = $checkSlipNo .'-'. $nextSlipNo;
            

//            if($sendWeight2 <= $availableBalance && $blWeight <= ($salesBalance - $deliveredBalance)) {
            if($sendWeight2 <= $availableBalance) {    
                $shrink = $sendWeight2 - $blWeight;
                
                // insert into transaction
                $sql = "INSERT INTO `transaction` (slip_no, slip_retur, shipment_id, transaction_date,unloading_date, vehicle_no, transaction_type, "
                        . "send_weight, notes, quantity, shrink, cust_tax_id, entry_by, entry_date) "
                        . "VALUES ('{$slipNo}', '{$slipU}', {$shipmentId}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), '{$vehicleNo2}', "
                        . "{$transactionType}, {$sendWeight2}, '{$notes2}', {$blWeight}, {$shrink}, {$custTaxId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $transactionId = $myDatabase->insert_id;
                    
                    $return_value = '|OK|Transaction has inserted successfully.|';
                    
                    // insert into delivery
                    $sql = "SELECT t.* 
                            FROM transaction t 
                            WHERE t.stockpile_contract_id IN (
                                SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                            ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                              ORDER BY t.unloading_date ASC, t.slip_no ASC";
                    $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $totalInventoryValue = 0;
                    if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                        $balanceLeft = $sendWeight2;
                        while($rowDelivery = $resultDelivery->fetch_object()) {
                            $syncStatus = 0;
                            if($rowDelivery->sync_status == 1) {
                                $syncStatus = 2;
                            }
                            
                            if($balanceLeft > 0) {
                                if($rowDelivery->delivery_status == 0) {
                                    if($balanceLeft >= $rowDelivery->quantity) {
                                        $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                        $quantityTaken = $rowDelivery->quantity;
                                        $percentTaken = 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < $rowDelivery->quantity) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } elseif($rowDelivery->delivery_status == 2) {
                                    $totalTaken = 0;
                                    $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                    $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                        $rowTaken = $resultTaken->fetch_object();
                                        $totalTaken = $rowTaken->total_taken;
                                    }
                                    
                                    if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                        $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                        $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } 
                                
                                $deliveryValue = $quantityTaken * $salesUnitPrice;
                                $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                $percentTaken = $percentTaken * 100;

                                $sql = "INSERT INTO `delivery` (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                        . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                        . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                                $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus}, sync_status = {$syncStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    }
                    
                    //$updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                    $updateInventoryValue = $totalInventoryValue;
                    
                    $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    
                    // update shipment
                    $cogsAmount = $updateInventoryValue;
                    if($salesCurrencyId != 1) {
                        $cogsAmount = $updateInventoryValue / $salesExchangeRate;
                    }
                    $invoiceAmount = $blWeight * $salesOriginalUnitPrice;
                    $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                            . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$blWeight}, shipment_status = 1 "
                            . "WHERE shipment_id = {$shipmentId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    
                    // update sales
                    $boolUpdateSales = false;
                    if($blWeight == ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 1;
                        $boolUpdateSales = true;
                    } elseif($blWeight < ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 2;
                        $boolUpdateSales = true;
                    }
                    
                    if($boolUpdateSales) {
                        $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }
                    
                     insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                     
                    unset($_SESSION['transaction']);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.|';
                }
            } else {
                if($sendWeight2 > $availableBalance) {
                    $return_value = '|FAIL|Available quantity in '. $stockpileName .' is '. number_format($availableBalance, 4, '.', ',') .' Kg.|';
                } elseif($sendWeight2 > ($salesBalance - $deliveredBalance)) {
                    $return_value = '|FAIL|Sales agreement balance is '. ($salesBalance - $deliveredBalance) .' Kg.|';
                }
            }*/
          /*  $sql = "SELECT s.stockpile_code, s.stockpile_name, 
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction` 
                            WHERE stockpile_id = s.stockpile_id
                            AND transaction_type = 1
                        ) AS available_balance,
                        (
                            SELECT COALESCE(SUM(quantity), 0) FROM `transaction` 
                            WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                            AND transaction_type = 2
                        ) AS delivered_balance
                    FROM stockpile s
                    WHERE s.stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultStockpile !== false && $resultStockpile->num_rows == 1) {
                $rowStockpile = $resultStockpile->fetch_object();
                $stockpileCode = $rowStockpile->stockpile_code;
                $stockpileName = $rowStockpile->stockpile_name;
                $availableBalance = $rowStockpile->available_balance;
                $deliveredBalance = $rowStockpile->delivered_balance;
            }
            
            // get sales detail
            $sql = "SELECT quantity, price_converted, currency_id, exchange_rate, price FROM sales WHERE sales_id = {$salesId}";
            $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSales !== false && $resultSales->num_rows == 1) {
                $rowSales = $resultSales->fetch_object();
                $salesBalance = $rowSales->quantity;
                $salesUnitPrice = $rowSales->price_converted;
                $salesCurrencyId = $rowSales->currency_id;
                $salesExchangeRate = $rowSales->exchange_rate;
                $salesOriginalUnitPrice = $rowSales->price;
            }

            if($sendWeight2 != 0 && $blWeight != 0) {
                
                $shrink = $sendWeight2 - $blWeight;
                
                $syncStatus = 0;
                $sql = "SELECT sync_status FROM `transaction` WHERE transaction_id = {$transactionId}";
                $resultTrans = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($resultTrans !== false && $resultTrans->num_rows == 1) {
                    $rowTrans = $resultTrans->fetch_object();
                    if($rowTrans->sync_status == 1) {
                        $syncStatus = 2;
                    } 
                }
                
                // insert into transaction
                $sql = "UPDATE `transaction` SET "
                        . "shipment_id = {$shipmentId}, "
                        . "vehicle_no = '{$vehicleNo2}', "
                        . "send_weight = {$sendWeight2}, "
						. "notes = '{$notes2}', "
                        . "quantity = {$blWeight}, "
                        . "shrink = {$shrink}, "
                        . "sync_status = {$syncStatus}, "
                        . "modify_by = {$_SESSION['userId']}, "
                        . "modify_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . "WHERE transaction_id = {$transactionId}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $transactionId = $myDatabase->insert_id;
                    
                    $return_value = '|OK|Transaction has updated successfully.|';
                    
                    // delete from delivery and update delivery_status in transaction
                    $sql = "SELECT d.*, t.sync_status 
                            FROM delivery d
                            INNER JOIN `transaction` t
                                ON t.transaction_id = d.transaction_id
                            WHERE d.shipment_id = {$shipmentId}";
                    $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($resultShipment !== false && $resultShipment->num_rows > 0) {
                        while($rowShipment = $resultShipment->fetch_object()) {
                            $syncStatus = 0;
                            if($rowShipment->sync_status == 1) {
                                $syncStatus = 2;
                            }
                            
                            if($rowShipment->percent_taken == 100) {
                                $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            } else {
                                $sqlOther = "SELECT * FROM delivery WHERE shipment_id <> {$shipmentId} AND transaction_id = {$rowShipment->transaction_id}";
                                $resultOther = $myDatabase->query($sqlOther, MYSQLI_STORE_RESULT);
                                
                                if($resultOther->num_rows > 0) {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 2, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                } else {
                                    $sqlUpdate = "UPDATE `transaction` SET delivery_status = 0, sync_status = {$syncStatus} WHERE transaction_id = {$rowShipment->transaction_id}";
                                }
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            }
                        }
                        
                        $sqlDelete = "DELETE FROM delivery WHERE shipment_id = {$shipmentId}";
                        $resultDelete = $myDatabase->query($sqlDelete, MYSQLI_STORE_RESULT);
                    }
                    
                    
                    // insert into delivery
						$sql = "SELECT t.* 
                            FROM transaction t 
                            WHERE t.stockpile_contract_id IN (
                                SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                            ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                            ORDER BY  t.unloading_date ASC, t.slip_no ASC";
                    $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    $totalInventoryValue = 0;
                    if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                        $balanceLeft = $sendWeight2;
                        while($rowDelivery = $resultDelivery->fetch_object()) {
                            $syncStatus = 0;
                            if($rowDelivery->sync_status == 1) {
                                $syncStatus = 2;
                            }
                            
                            if($balanceLeft > 0) {
                                if($rowDelivery->delivery_status == 0) {
                                    if($balanceLeft >= $rowDelivery->quantity) {
                                        $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                        $quantityTaken = $rowDelivery->quantity;
                                        $percentTaken = 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < $rowDelivery->quantity) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                } elseif($rowDelivery->delivery_status == 2) {
                                    $totalTaken = 0;
                                    $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                    $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                        $rowTaken = $resultTaken->fetch_object();
                                        $totalTaken = $rowTaken->total_taken;
                                    }
                                    
                                    if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                        $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                        $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $deliveryStatus = 1;
                                    } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                        $quantityTaken = $balanceLeft;
                                        $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                        $balanceLeft = 0;
                                        $deliveryStatus = 2;
                                    }
                                }  
                                
                                $deliveryValue = $quantityTaken * $salesUnitPrice;
                                $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                $percentTaken = $percentTaken * 100;

                                $sql = "INSERT INTO delivery (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                        . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), {$percentTaken}, "
                                        . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                                $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus}, sync_status = {$syncStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                        }
                    }
                    
                    $updateInventoryValue = $totalInventoryValue;
//                    $updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                    
                    $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    
                    // update shipment
                    $cogsAmount = $updateInventoryValue;
                    if($salesCurrencyId != 1) {
                        $cogsAmount = $updateInventoryValue / $salesExchangeRate;
                    }
                    $invoiceAmount = $blWeight * $salesOriginalUnitPrice;
                    $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$transactionDate2}', '%d/%m/%Y'), "
                            . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$blWeight}, shipment_status = 1 "
                            . "WHERE shipment_id = {$shipmentId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    
                    // update sales
                    $boolUpdateSales = false;
                    if($sendWeight2 == ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 1;
                        $boolUpdateSales = true;
                    } elseif($sendWeight2 < ($salesBalance - $deliveredBalance)) {
                        $salesStatus = 2;
                        $boolUpdateSales = true;
                    }
                    
                    if($boolUpdateSales) {
                        $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }
					
					insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                     
                    unset($_SESSION['transaction']);
                } else {
                    $return_value = '|FAIL|Failed insert transaction.|';
					echo $sql;
                }
            } else {
                if($sendWeight2 > $availableBalance) {
                    $return_value = '|FAIL|Available quantity in '. $stockpileName .' is '. number_format($availableBalance, 4, '.', ',') .' Kg.|';
                } elseif($sendWeight2 > ($salesBalance - $deliveredBalance)) {
                    $return_value = '|FAIL|Sales agreement balance is '. ($salesBalance - $deliveredBalance) .' Kg.|';
                }
            }*/
        } else {
            $return_value = '|FAIL|Please fill the required fields.|';
        }
        // </editor-fold>
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_POST['action']) && $_POST['action'] == 'import_transaction') {  
    // <editor-fold defaultstate="collapsed" desc="import_transaction">
    
    $return_value = '';
    $boolContinue = true;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    
    // </editor-fold>
    
    if($stockpileId != '' && isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import/stockpile-" . $stockpileId;
        
        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if($boolContinue) {

            $importResult = excelImportTransaction($myDatabase, $attachmentPath, $stockpileId, $vendorId, $stockpileContractId);
            $importResult = explode("|", $importResult);

            if($importResult[0] == 'OK') {
                $return_value = '|OK|'. $importResult[1] .'|';
            } else {
                $return_value = '|FAIL|'. $importResult[1] .'|';
            }

        }
    } else {
        $return_value = '|FAIL|Please fill required fields.|';
    }
    
    echo $return_value;
    
    // </editor-fold>
}
elseif (isset($_POST['action']) && $_POST['action'] == 'import_general_vendor') {  
    // <editor-fold defaultstate="collapsed" desc="import_transaction">
    
    $return_value = '';
    $boolContinue = true;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    //$vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    //$stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    
    // </editor-fold>
    
    if($stockpileId != '' && isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import/stockpile-" . $stockpileId;
        
        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if($boolContinue) {

            $importResult = excelImportGeneralVendor($myDatabase, $attachmentPath, $stockpileId);
            $importResult = explode("|", $importResult);

            if($importResult[0] == 'OK') {
                $return_value = '|OK|'. $importResult[1] .'|';
            } else {
                $return_value = '|FAIL|'. $importResult[1] .'|';
            }

        }
    } else {
        $return_value = '|FAIL|Please fill required fields.|';
    }
    
    echo $return_value;
    
    // </editor-fold>
}
elseif (isset($_POST['action']) && $_POST['action'] == 'import_jurnal') {  
    // <editor-fold defaultstate="collapsed" desc="import_transaction">
    
    $return_value = '';
    $boolContinue = true;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    
    //$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    //$vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    //$stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    
    // </editor-fold>
    
    if(isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import/jurnal/";
        
        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if($boolContinue) {

            $importResult = excelImportJurnal($myDatabase, $attachmentPath);
            $importResult = explode("|", $importResult);

            if($importResult[0] == 'OK') {
                $return_value = '|OK|'. $importResult[1] .'|';
            } else {
                $return_value = '|FAIL|'. $importResult[1] .'|';
            }

        }
    } else {
        $return_value = '|FAIL|Please fill required fields.|';
    }
    
    echo $return_value;
    
    // </editor-fold>
}
elseif (isset($_POST['action']) && $_POST['action'] == 'import_user_signature') {  
    // <editor-fold defaultstate="collapsed" desc="import_transaction">
    
    $return_value = '';
    $boolContinue = true;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    
   $userId = $myDatabase->real_escape_string($_POST['userId']);
   // $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
   // $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    
    // </editor-fold>
    
    if(isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import/signature/";
		$imageName = $_FILES['imagefile']['name'];
        
        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" .basename($imageName);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if($boolContinue && $userId != '') {

            $sql = "INSERT INTO user_signature (user_id, signature) VALUES ({$userId}, '{$imageName}')";
        	$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Stockpile added successfully.|';
        } else {
            $return_value = '|FAIL|Failed adding signature.|';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.|';
    }
    
    echo $return_value;
	}
    // </editor-fold>
}
elseif (isset($_POST['action']) && $_POST['action'] == 'import_payment') {  
    // <editor-fold defaultstate="collapsed" desc="import_transaction">
    
    $return_value = '';
    $boolContinue = true;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    
    //$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    //$vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    //$stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
    
    // </editor-fold>
    
    if(isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import/payment-";
        
        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if($boolContinue) {

            $importResult = excelImportPayment($myDatabase, $attachmentPath);
            $importResult = explode("|", $importResult);

            if($importResult[0] == 'OK') {
                $return_value = '|OK|'. $importResult[1] .'|';
            } else {
                $return_value = '|FAIL|'. $importResult[1] .'|';
            }

        }
    } else {
        $return_value = '|FAIL|Please fill required fields.|';
    }
    
    echo $return_value;
    
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_sales') {
    // <editor-fold defaultstate="collapsed" desc="delete_sales">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    // </editor-fold>
    
    if($salesId != '') {
        $sql = "DELETE FROM `sales` WHERE sales_id = {$salesId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Sales agreement has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete sales agreement failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}



elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'sales_detail_data') {
    // <editor-fold defaultstate="collapsed" desc="bank_data">
    
    $return_value = '';
    $boolNew = false;
    $salesHeaderId = $myDatabase->real_escape_string($_POST['salesHeaderId']);
	$salesDetailId = $myDatabase->real_escape_string($_POST['salesDetailId']);
	$customerId = $myDatabase->real_escape_string($_POST['customerId']);
	$vessel = $myDatabase->real_escape_string($_POST['vessel']);
	$shipmentNo = $myDatabase->real_escape_string($_POST['shipmentNo']);
	$quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
	$statsType = $myDatabase->real_escape_string($_POST['statsType']);
	$stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
	$tolerance = str_replace(",", "", $myDatabase->real_escape_string($_POST['tolerance']));
	$moisture = str_replace(",", "", $myDatabase->real_escape_string($_POST['moisture']));
	$ncv = str_replace(",", "", $myDatabase->real_escape_string($_POST['ncv']));
	$tax_base = str_replace(",", "", $myDatabase->real_escape_string($_POST['tax_base']));
	$fm = str_replace(",", "", $myDatabase->real_escape_string($_POST['fm']));
	$fob = str_replace(",", "", $myDatabase->real_escape_string($_POST['fob']));
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    // </editor-fold>
    
    if ($salesDetailId == '') {
        $boolNew = true;
    }

            if($boolNew) {
                $sql = "INSERT INTO `sales_detail`
						(`sales_header_id`,
						`customer_id`,
						`vessel`,
						`qty`,
						`stockpile_id`,
						`stats`,
						`shipment_no`,
						`tolerance`,
						`moisture`,
						`ncv`,
						`tax_base`,
						`fm`,
						`fob`,
						`entry_by`,
						`entry_date`)
						VALUES
						($salesHeaderId,
						$customerId,
						'$vessel',
						$quantity,
						$stockpileId,
						'$statsType',
						'$shipmentNo',						
						$moisture,
						$tolerance,
						$ncv,
						$tax_base,
						$fm,
						$fob,
						{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `sales_detail`
						SET
						`sales_header_id` = $salesHeaderId,
						`customer_id` = $customerId,
						`vessel` = '$vessel',
						`qty` = $quantity,
						`stats` = '$statsType',
						`shipment_no` = '$shipmentNo',
						`tolerance` = $tolerance,
						`moisture` = $moisture,
						`ncv` = $ncv,
						`tax_base` = $tax_base,
						`fm` = $fm,
						`fob` = $fob,
						`entry_by` = {$_SESSION['userId']},
						`entry_date` = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s')
						WHERE `sales_detail_id` = $salesDetailId";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $salesDetailId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Sales Schedule has successfully inserted/updated.|'. $salesDetailId .'|';
            } else {
                $return_value = '|FAIL|Insert/update sales schedule failed.||';
            }
        
    
    echo $sql;
    echo $return_value;
    // </editor-fold>
}




elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'sales_header_data') {
    // <editor-fold defaultstate="collapsed" desc="bank_data">
    
    $return_value = '';
    $boolNew = false;
    
	$salesHeaderId = $myDatabase->real_escape_string($_POST['salesHeaderId']);
	$dateFrom = $myDatabase->real_escape_string($_POST['dateFrom']);
	$dateTo = $myDatabase->real_escape_string($_POST['dateTo']);
	$eta = $myDatabase->real_escape_string($_POST['eta']);
	$salesNo = str_replace(",", "", $myDatabase->real_escape_string($_POST['salesNo']));
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    // </editor-fold>
    
    if ($salesHeaderId == '') {
        $boolNew = true;
    }

            if($boolNew) {
                $sql = "INSERT INTO `sales_header`
						(`date_from`,
						`date_to`,
						`eta`,
						`sales_no`,
						`entry_by`,
						`entry_date`)
						VALUES
						(STR_TO_DATE('{$dateFrom}','%d/%m/%Y'),
						STR_TO_DATE('{$dateTo}','%d/%m/%Y'),
						STR_TO_DATE('{$eta}','%d/%m/%Y'),
						'$salesNo',
						{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `sales_header`
						SET
						`date_from` = STR_TO_DATE('{$dateFrom}','%d/%m/%Y'),
						`date_to` = STR_TO_DATE('{$dateTo}','%d/%m/%Y'),
						`eta` = STR_TO_DATE('{$eta}','%d/%m/%Y'),
						`sales_no` = '$salesNo',						
						`entry_by` = {$_SESSION['userId']},
						`entry_date` = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s')
						WHERE `sales_header_id` = $salesHeaderId";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $salesHeaderId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Sales has successfully inserted/updated.|'. $salesHeaderId .'|';
            } else {
                $return_value = '|FAIL|Insert/update sales failed.||';
            }
        
    
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_price_rate_sales') {
    // <editor-fold defaultstate="collapsed" desc="sales_data">
    
    $return_value = '';
    /*$boolNew = false;
    $boolExists = true;
    $boolShipment = true;
    $boolUpdateShipment = false;
    $boolInsertCustomer = false;
    $boolCustomerExists = false;
    $addMessage = "";*/
    
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRateUpdate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceUpdate']));
    
	// </editor-fold>
    
    
    
    if($salesId != '' && $exchangeRate != '' && $price != '' ) {
        
            
            $priceConverted = $price * $exchangeRate;
            
            
                $sql = "UPDATE `sales` sl SET "
                        . "sl.exchange_rate = {$exchangeRate}, "
                        . "sl.price = {$price}, "
                        . "sl.price_converted = {$priceConverted}, "
						. "sl.sales_status = 3 "
                        . "WHERE sl.sales_id = {$salesId}";
            
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                
				$sql = "SELECT sl.sales_id, t.transaction_id
						FROM sales sl 
						LEFT JOIN shipment sh ON sh.`sales_id` = sl.`sales_id`
						LEFT JOIN `transaction` t ON t.`shipment_id` = sh.`shipment_id` 
						WHERE sl.sales_id = {$salesId}";
				$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				if($result->num_rows > 0) {
				while($row = $result->fetch_object()) {
					
				$transactionId = $row->transaction_id;
				
				insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
						
						}
					}
				
				

                $return_value = '|OK|Sales Agreement has successfully inserted/updated.'. $salesId .'|';
            } else {
                $return_value = '|FAIL|Insert/update sales agreement failed.||';
				echo $sql;
            }
        
    } else {
        
            $return_value = '|FAIL|Please fill the required fields.||';
        
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'sales_data') {
    // <editor-fold defaultstate="collapsed" desc="sales_data">
    
    $return_value = '';
    $boolNew = false;
    $boolExists = true;
    $boolShipment = true;
    $boolUpdateShipment = false;
    $boolInsertCustomer = false;
    $boolCustomerExists = false;
    $addMessage = "";
    
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
	$accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $salesNo = $myDatabase->real_escape_string($_POST['salesNo']);
	$shipmentNo = $myDatabase->real_escape_string($_POST['shipmentNo']);
    $salesDate = $myDatabase->real_escape_string($_POST['salesDate']);
	$shipmentDate = $myDatabase->real_escape_string($_POST['shipmentDate']);
    $salesType = $myDatabase->real_escape_string($_POST['salesType']);
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    $customerName = $myDatabase->real_escape_string($_POST['customerName']);
    $customerAddress = $myDatabase->real_escape_string($_POST['customerAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $destination = $myDatabase->real_escape_string($_POST['destination']);
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
    $quantity = str_replace(",", "", $myDatabase->real_escape_string($_POST['quantity']));
    $totalShipment = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalShipment']));
    $oldTotalShipment = str_replace(",", "", $myDatabase->real_escape_string($_POST['oldTotalShipment']));
    $bkp_jkp = $myDatabase->real_escape_string($_POST['bkp_jkp']);
	$peb_fp_no = $myDatabase->real_escape_string($_POST['peb_fp_no']);
	$pebDate = $myDatabase->real_escape_string($_POST['pebDate']);
	// </editor-fold>
    
    if($customerId == 'INSERT') {
        if($customerName != '' && $customerAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
            $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$customerName}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($result !== false && $result->num_rows > 0) {
                $boolCustomerExists = true;
            } elseif($result !== false && $result->num_rows == 0) {
                $ppnValue = 0;
                $pphValue = 0;

                $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
                $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
                if($resultPPN !== false && $resultPPN->num_rows == 1) {
                    $rowPPN = $resultPPN->fetch_object();
                    $ppnValue = $rowPPN->tax_value;
                }

                $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
                $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                if($resultPPh !== false && $resultPPh->num_rows == 1) {
                    $rowPPh = $resultPPh->fetch_object();
                    $pphValue = $rowPPh->tax_value;
                }
                
                $sql = "INSERT INTO `customer` (customer_name, customer_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                    . "'{$customerName}', '{$customerAddress}', '{$npwp}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                if($result !== false) {
                    $customerId = $myDatabase->insert_id;
                    $boolInsertCustomer = true;
                } 
            }
        } else {
            $boolInsertCustomer = false;
        }
    } else {
        $boolInsertCustomer = true;
    }
    
    if ($salesId == '') {
        $boolNew = true;
    } else {
        if($totalShipment != $oldTotalShipment) {
            if($totalShipment < $oldTotalShipment) {
                $boolShipment = false;
            }
        }
    }
    
    if($salesDate != '' && $salesNo != '' && $salesType != '' && $customerId != '' && $currencyId != '' &&
            $price != '' && $quantity != '' && $totalShipment != '' && $stockpileId != '' && $boolShipment &&
            $boolInsertCustomer && !$boolCustomerExists) {
        
        if($boolNew) {
            $sql = "SELECT * FROM `sales` WHERE company_id = {$_SESSION['companyId']} AND sales_no = '{$salesNo}'";
            $resultSales = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultSales->num_rows > 0) {
                $boolExists = false;
            }
        } 

        if($boolExists) {
            if($exchangeRate == '') {
                $exchangeRate = 1;
            }
            
            $priceConverted = $price * $exchangeRate;
            
            if($boolNew) {
                $sql = "INSERT INTO `sales` (sales_no, sales_date, sales_type, customer_id, "
                        . "stockpile_id, account_id, destination, notes, currency_id, exchange_rate, price, price_converted, quantity, "
                        . "total_shipment, shipment_date, bkp_jkp, peb_fp_no, peb_fp_date, company_id, entry_by, entry_date) VALUES ("
                        . "'{$salesNo}', STR_TO_DATE('{$salesDate}', '%d/%m/%Y'), {$salesType}, "
                        . "{$customerId}, {$stockpileId}, {$accountId}, '{$destination}', '{$notes}', {$currencyId}, {$exchangeRate}, {$price}, "
                        . "{$priceConverted}, {$quantity}, {$totalShipment}, STR_TO_DATE('{$shipmentDate}', '%m/%Y'), '{$bkp_jkp}', '{$peb_fp_no}', STR_TO_DATE('{$pebDate}', '%d/%m/%Y'), {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `sales` sl INNER JOIN shipment sh ON sl.sales_id = sh.sales_id SET "
                        . "sh.shipment_no = '{$shipmentNo}', "
						. "sl.sales_no = '{$salesNo}', "
                        . "sl.sales_date = STR_TO_DATE('{$salesDate}', '%d/%m/%Y'), "
                        . "sl.sales_type = {$salesType}, "
                        . "sl.customer_id = {$customerId}, "
                        . "sl.stockpile_id = {$stockpileId}, "
						. "sl.account_id = {$accountId}, "
                        . "sl.destination = '{$destination}', "
                        . "sl.notes = '{$notes}', "
                        . "sl.currency_id = {$currencyId}, "
                        . "sl.exchange_rate = {$exchangeRate}, "
                        . "sl.price = {$price}, "
                        . "sl.price_converted = {$priceConverted}, "
                        . "sl.quantity = {$quantity}, "
                        . "sl.total_shipment = {$totalShipment}, "
						. "sl.shipment_date = STR_TO_DATE('{$shipmentDate}', '%m/%Y'), "
						. "sl.bkp_jkp = '{$bkp_jkp}', "
						. "sl.peb_fp_no = '{$peb_fp_no}', "
						. "sl.peb_fp_date = STR_TO_DATE('{$pebDate}', '%d/%m/%Y') "
                        . "WHERE sl.sales_id = {$salesId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $salesId = $myDatabase->insert_id;
                    $j = 1;
                    $boolUpdateShipment = true;
                } else {
                    if($totalShipment > $oldTotalShipment) {
                        $j = $oldTotalShipment + 1;
                        $boolUpdateShipment = true;
                    } else {
                        $addMessage = " Total shipment cannot be updated.";
                    }
                    
//                    $sql = "DELETE FROM `shipment` WHERE sales_id = {$salesId}";
//                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                
                if($boolUpdateShipment) {
                    for($i = $j; $i <= $totalShipment; $i++) {
                        $shipmentCode = $salesNo .'-'. $i;

                        $sql = "INSERT INTO `shipment` (shipment_code, shipment_no, sales_id, entry_by, entry_date) VALUES ("
                                . "'{$shipmentCode}', '{$shipmentNo}', {$salesId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }
                }

                $return_value = '|OK|Sales Agreement has successfully inserted/updated.'. $addMessage .'|'. $salesId .'|';
            } else {
                $return_value = '|FAIL|Insert/update sales agreement failed.||';
				echo $sql;
            }
        } else {
            $return_value = '|FAIL|Sales agreement already exists.||';
        }
    } else {
        if(!$boolShipment) {
            $return_value = '|FAIL|Total shipment cant be less than before.||';
        } else {
            $return_value = '|FAIL|Please fill the required fields.||';
        }
    }
    
    echo $return_value;
    // </editor-fold>
}


elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'shipment_data') {
    // <editor-fold defaultstate="collapsed" desc="shipment_data">
    
    $return_value = '';
    $boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
    $shipmentCode = $myDatabase->real_escape_string($_POST['shipmentCode']);
    $shipmentDate = $myDatabase->real_escape_string($_POST['shipmentDate']);
    $shipmentType = $myDatabase->real_escape_string($_POST['shipmentType']);
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    $destination = $myDatabase->real_escape_string($_POST['destination']);
    $notes = $myDatabase->real_escape_string($_POST['notes']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $exchangeRate = $myDatabase->real_escape_string($_POST['exchangeRate']);
    $price = $myDatabase->real_escape_string($_POST['price']);
    $quantity = $myDatabase->real_escape_string($_POST['quantity']);
    // </editor-fold>
    
    if ($shipmentId == '') {
        $boolNew = true;
    }
    
    if($shipmentCode != '' && $shipmentDate != '' && $shipmentType != '' && $customerId != '' && $currencyId != '' &&
            $price != '' && $quantity != '') {
        
        if($boolNew) {
            // get next slip no
            $checkShipmentNo = $shipmentCode .'-'. $currentYearMonth;
            $sql = "SELECT LPAD(COUNT(1) + 1, 3, '0') AS next_id FROM shipment WHERE shipment_no LIKE '{$checkShipmentNo}%'";
            $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            $rowShipmentNo = $resultShipment->fetch_object();
            $nextShipmentNo = $rowShipmentNo->next_id;
            $shipmentNo = $checkShipmentNo .'-'. $nextShipmentNo;
        } 

        if($shipmentNo != '') {
            if($exchangeRate == '') {
                $exchangeRate = 1;
            }
            
            $priceConverted = $price * $exchangeRate;
            
            if($boolNew) {
                $sql = "INSERT INTO `shipment` (shipment_no, shipment_code, shipment_date, shipment_type, customer_id, "
                        . "destination, notes, currency_id, exchange_rate, price, price_converted, quantity, entry_by, entry_date) VALUES ("
                        . "'{$shipmentNo}', UPPER('{$shipmentCode}'), STR_TO_DATE('{$shipmentDate}', '%d/%m/%Y'), {$shipmentType}, "
                        . "{$customerId}, '{$destination}', '{$notes}', {$currencyId}, {$exchangeRate}, {$price}, {$priceConverted}, "
                        . "{$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            } else {
                $sql = "UPDATE `shipment` SET "
                        . "shipment_date = STR_TO_DATE('{$shipmentDate}', '%d/%m/%Y'), "
                        . "shipment_type = {$shipmentType}, "
                        . "customer_id = {$customerId}, "
                        . "destination = '{$destination}', "
                        . "notes = '{$notes}', "
                        . "currency_id = {$currencyId}, "
                        . "exchange_rate = {$exchangeRate}, "
                        . "price = {$price}, "
                        . "price_converted = {$priceConverted}, "
                        . "quantity = {$quantity} "
                        . "WHERE shipment_id = {$shipmentId}";
            }
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                if($boolNew) {
                    $shipmentId = $myDatabase->insert_id;
                }

                $return_value = '|OK|Sales Agreement has successfully inserted/updated.|'. $shipmentId .'|';
            } else {
                $return_value = '|FAIL|Insert/update sales agreement failed.||';
            }
        } else {
            $return_value = '|FAIL|Sales agreement already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'delete_payment') {
    // <editor-fold defaultstate="collapsed" desc="delete_payment">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentId = $myDatabase->real_escape_string($_POST['paymentId']);
    // </editor-fold>
    
    if($paymentId != '') {
        // check dp di shipment
        
        $sql = "SELECT p.*, b.currency_id AS b_currency_id, con.contract_id, con.contract_type, con.price_converted, con.quantity
                FROM payment p 
                INNER JOIN bank b
                    ON b.bank_id = p.bank_id
                LEFT JOIN stockpile_contract sc
                    ON sc.stockpile_contract_id = p.stockpile_contract_id
                LEFT JOIN contract con
                    ON con.contract_id = sc.contract_id
                WHERE p.payment_id = {$paymentId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();

            if($row->stockpile_contract_id != '') {
                if($row->contract_type == 'P') {
                    if($row->payment_method == 1) {
                        $sqlUpdate = "UPDATE contract set payment_status = 0 WHERE contract_id = {$row->contract_id}";
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

                        if($row->original_amount_converted != $row->amount_converted) {
                            $sqlDP = "SELECT p.*, b.currency_id AS b_currency_id 
                                    FROM payment p
                                    INNER JOIN bank b
                                        ON b.bank_id = p.bank_id
                                    WHERE p.stockpile_contract_id = {$row->stockpile_contract_id} 
                                    AND p.payment_method = 2
                                    AND p.payment_status = 0";
                            $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                            if($resultDP !== false && $resultDP->num_rows > 0) {
                                while($rowDP = $resultDP->fetch_object()) {
                                    $sqlUpdate = "UPDATE payment SET amount = {$rowDP->original_amount}, amount_converted = {$rowDP->original_amount_converted}
                                                WHERE payment_id = {$rowDP->payment_id}";
                                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                                }
                            }
                        }
                    }
                } 

                $sqlUpdate = "UPDATE `transaction` set payment_id = NULL where payment_id = {$paymentId}";
                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
            } elseif($row->vendor_id != '' || $row->freight_id != '' || $row->labor_id != ''|| $row->general_vendor_id != '') {
                if($row->vendor_id != '') {
                    $whereProperty = " p.vendor_id = {$row->vendor_id} ";

                    $sqlUpdate = "UPDATE `transaction` set payment_id = NULL where payment_id = {$paymentId}";
                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                } elseif($row->freight_id != '') {
                    $whereProperty = " p.freight_id = {$row->freight_id} ";

                    $sqlUpdate = "UPDATE `transaction` set fc_payment_id = NULL where fc_payment_id = {$paymentId}";
                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                } elseif($row->labor_id != '') {
                    $whereProperty = " p.labor_id = {$row->labor_id} ";

                    $sqlUpdate = "UPDATE `transaction` set uc_payment_id = NULL where uc_payment_id = {$paymentId}";
                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                } elseif($row->general_vendor_id != '') {
                    $whereProperty = " p.general_vendor_id = {$row->general_vendor_id} ";
                }

                if($row->payment_method == 1) {

                    $takenDP = $row->amount - $row->original_amount;
                    $takenDPConverted = $row->amount_coverted - $row->original_amount_converted;

                    if($takenDP > 0) {
                        $sqlDP = "SELECT p.*, b.currency_id AS b_currency_id 
                                FROM payment p
                                INNER JOIN bank b
                                    ON b.bank_id = p.bank_id
                                WHERE {$whereProperty}
                                AND p.payment_method = 2
                                AND .ppayment_status = 0
                                ORDER BY p.payment_id ASC";
                        $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                        if($resultDP !== false && $resultDP->num_rows > 0) {
                            while($rowDP = $resultDP->fetch_object()) {
                                if($takenDP > 0) {
                                    if($row->b_currency_id == $rowDP->b_currency_id) {
                                        $amount = $takenDP - $rowDP->original_amount;
                                        $amountConverted = $takenDPConverted - $rowDP->original_amount_converted;
                                        $takenDP = $takenDP - $amount;
                                    } elseif($row->b_currency_id != $rowDP->b_currency_id) {
                                        if($rowDP->b_currency_id == 2) {
                                            $amount = ceil($takenDP / $rowDP->exchange_rate) - $rowDP->original_amount;
                                            $amountConverted = ceil($takenDPConverted / $rowDP->exchange_rate) - $rowDP->original_amount_converted;
                                            $takenDP = $takenDP - ceil($amount * $rowDP->exchange_rate);
                                        } else {
                                            $amount = ceil($takenDP * $rowDP->exchange_rate) - $rowDP->original_amount;
                                            $amountConverted = ceil($takenDPConverted * $rowDP->exchange_rate) - $rowDP->original_amount_converted;
                                            $takenDP = $takenDP - ceil($amount / $rowDP->exchange_rate);
                                        }
                                    } else {
                                        $amount = $takenDP - $rowDP->original_amount;
                                        $amountConverted = $takenDPConverted - $rowDP->original_amount_converted;
                                        $takenDP = $takenDP - $amount;
                                    }

                                    $sqlUpdate = "UPDATE payment SET amount = {$amount}, amount_converted = {$amountConverted}
                                                WHERE payment_id = {$rowDP->payment_id}";
                                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                                }
                            }
                        }
                    }
                }
            } elseif($row->sales_id != '') {
                if($row->payment_method == 1) {
                    $sqlUpdate = "UPDATE shipment SET payment_id = NULL WHERE payment_id = {$paymentId}";
                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                } elseif($row->payment_method == 2) {
                    $sqlShipment = "SELECT pd.*, sh.dp_amount
                            FROM payment_detail pd 
                            INNER JOIN shipment sh
                                ON sh.shipment_id = pd.shipment_id
                            WHERE pd.payment_id = {$paymentId}";
                    $resultShipment = $myDatabase->query($sqlShipment, MYSQLI_STORE_RESULT);
                    if($resultShipment !== false && $resultShipment->num_rows > 0) {
                        while($rowShipment = $resultShipment->fetch_object()) {
                            $newDP = $rowShipment->dp_amount - $rowShipment->amount_converted;

                            $sqlUpdate = "UPDATE shipment SET dp_amount = {$newDP} WHERE shipment_id = {$rowShipment->shipment_id}";
                            $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                        }
                    }
                }
            }
        }
        
        
        $sql = "DELETE FROM `payment` WHERE payment_id = {$paymentId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
            $return_value = '|OK|Payment has successfully deleted.|';
        } else {
            $return_value = '|FAIL|Delete payment failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'return_payment') {
    // <editor-fold defaultstate="collapsed" desc="return_payment">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentId = $myDatabase->real_escape_string($_POST['paymentId']);
    // </editor-fold>
    
    if($paymentId != '') {
        
       $sql = "UPDATE `payment` SET "
                        . "payment_status = 1, "
                        . "edit_by = {$_SESSION['userId']}, "
                        . "edit_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . " WHERE payment_id = {$paymentId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
			
			 insertGeneralLedger($myDatabase, 'RETURN PAYMENT', "NULL", "NULL", "NULL", "NULL", $paymentId);
			
			
            $sql = "SELECT p.*, b.currency_id AS b_currency_id, con.contract_id, con.contract_type, con.price_converted, con.quantity
                    FROM payment p 
                    INNER JOIN bank b
                        ON b.bank_id = p.bank_id
                    LEFT JOIN stockpile_contract sc
                        ON sc.stockpile_contract_id = p.stockpile_contract_id
                    LEFT JOIN contract con
                        ON con.contract_id = sc.contract_id
                    WHERE p.payment_id = {$paymentId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            
            if($result !== false && $result->num_rows == 1) {
                $row = $result->fetch_object();
                
                if($row->stockpile_contract_id != '') {
                    if($row->contract_type == 'P') {
                        if($row->payment_method == 1) {
                            $sqlUpdate = "UPDATE contract set payment_status = 0 WHERE contract_id = {$row->contract_id}";
                            $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            
                            if($row->original_amount_converted != $row->amount_converted) {
                                $sqlDP = "SELECT p.*, b.currency_id AS b_currency_id 
                                        FROM payment p
                                        INNER JOIN bank b
                                            ON b.bank_id = p.bank_id
                                        WHERE p.stockpile_contract_id = {$row->stockpile_contract_id} 
                                        AND p.payment_method = 2
                                        AND p.payment_status = 0";
                                $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                                if($resultDP !== false && $resultDP->num_rows > 0) {
                                    while($rowDP = $resultDP->fetch_object()) {
                                        $sqlUpdate = "UPDATE payment SET amount = {$rowDP->original_amount}, amount_converted = {$rowDP->original_amount_converted}
                                                    WHERE payment_id = {$rowDP->payment_id}";
                                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                                    }
                                }
                            }
                        }
                    } 
                    
                    $sqlUpdate = "UPDATE `transaction` set payment_id = NULL where payment_id = {$paymentId}";
                    $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                } elseif($row->vendor_id != '' || $row->freight_id != '' || $row->labor_id != ''|| $row->general_vendor_id != '' || $row->invoice_id != '') {
                    if($row->vendor_id != '') {
                        $whereProperty = " p.vendor_id = {$row->vendor_id} ";

                        $sqlUpdate = "UPDATE `transaction` set payment_id = NULL where payment_id = {$paymentId}";
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    } elseif($row->freight_id != '') {
                        $whereProperty = " p.freight_id = {$row->freight_id} ";

                        $sqlUpdate = "UPDATE `transaction` set fc_payment_id = NULL where fc_payment_id = {$paymentId}";
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    } elseif($row->labor_id != '') {
                        $whereProperty = " p.labor_id = {$row->labor_id} ";

                        $sqlUpdate = "UPDATE `transaction` set uc_payment_id = NULL where uc_payment_id = {$paymentId}";
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    } elseif($row->general_vendor_id != '') {
                        $whereProperty = " p.general_vendor_id = {$row->general_vendor_id} ";
                    } elseif($row->invoice_id != '') {
                         $sqlUpdate = "UPDATE invoice set payment_status = 0 WHERE invoice_id = {$row->invoice_id}";
                         $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    }
                    
                    if($row->payment_method == 1) {

                        $takenDP = $row->amount - $row->original_amount;
                        $takenDPConverted = $row->amount_coverted - $row->original_amount_converted;

                        if($takenDP > 0) {
                            $sqlDP = "SELECT p.*, b.currency_id AS b_currency_id 
                                    FROM payment p
                                    INNER JOIN bank b
                                        ON b.bank_id = p.bank_id
                                    WHERE {$whereProperty}
                                    AND p.payment_method = 2
                                    AND .ppayment_status = 0
                                    ORDER BY p.payment_id ASC";
                            $resultDP = $myDatabase->query($sqlDP, MYSQLI_STORE_RESULT);
                            if($resultDP !== false && $resultDP->num_rows > 0) {
                                while($rowDP = $resultDP->fetch_object()) {
                                    if($takenDP > 0) {
                                        if($row->b_currency_id == $rowDP->b_currency_id) {
                                            $amount = $takenDP - $rowDP->original_amount;
                                            $amountConverted = $takenDPConverted - $rowDP->original_amount_converted;
                                            $takenDP = $takenDP - $amount;
                                        } elseif($row->b_currency_id != $rowDP->b_currency_id) {
                                            if($rowDP->b_currency_id == 2) {
                                                $amount = ceil($takenDP / $rowDP->exchange_rate) - $rowDP->original_amount;
                                                $amountConverted = ceil($takenDPConverted / $rowDP->exchange_rate) - $rowDP->original_amount_converted;
                                                $takenDP = $takenDP - ceil($amount * $rowDP->exchange_rate);
                                            } else {
                                                $amount = ceil($takenDP * $rowDP->exchange_rate) - $rowDP->original_amount;
                                                $amountConverted = ceil($takenDPConverted * $rowDP->exchange_rate) - $rowDP->original_amount_converted;
                                                $takenDP = $takenDP - ceil($amount / $rowDP->exchange_rate);
                                            }
                                        } else {
                                            $amount = $takenDP - $rowDP->original_amount;
                                            $amountConverted = $takenDPConverted - $rowDP->original_amount_converted;
                                            $takenDP = $takenDP - $amount;
                                        }

                                        $sqlUpdate = "UPDATE payment SET amount = {$amount}, amount_converted = {$amountConverted}
                                                    WHERE payment_id = {$rowDP->payment_id}";
                                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                                    }
                                }
                            }
                        }
                    }
                } elseif($row->sales_id != '') {
                    if($row->payment_method == 1) {
                        $sqlUpdate = "UPDATE shipment SET payment_id = NULL WHERE payment_id = {$paymentId}";
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    } elseif($row->payment_method == 2) {
                        $sqlShipment = "SELECT pd.*, sh.dp_amount
                                FROM payment_detail pd 
                                INNER JOIN shipment sh
                                    ON sh.shipment_id = pd.shipment_id
                                WHERE pd.payment_id = {$paymentId}";
                        $resultShipment = $myDatabase->query($sqlShipment, MYSQLI_STORE_RESULT);
                        if($resultShipment !== false && $resultShipment->num_rows > 0) {
                            while($rowShipment = $resultShipment->fetch_object()) {
                                $newDP = $rowShipment->dp_amount - $rowShipment->amount_converted;
                                
                                $sqlUpdate = "UPDATE shipment SET dp_amount = {$newDP} WHERE shipment_id = {$rowShipment->shipment_id}";
                                $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                            }
                        }
                    }
                }
            }
            
           
            
            $return_value = '|OK|Payment has successfully returned.|';
        } else {
            $return_value = '|FAIL|Return payment failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'return_pc') {
    // <editor-fold defaultstate="collapsed" desc="return_payment">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentId = $myDatabase->real_escape_string($_POST['pc_id']);
    // </editor-fold>
    
    if($paymentId != '') {
        
       $sql = "UPDATE `payment` SET "
                        . "payment_status = 1, "
                        . "edit_by = {$_SESSION['userId']}, "
                        . "edit_date = STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s') "
                        . " WHERE payment_id = {$paymentId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false) {
			
			 insertGeneralLedger($myDatabase, 'RETURN PAYMENT', "NULL", "NULL", "NULL", "NULL", $paymentId);
			
			
            $sql = "SELECT p.*, b.currency_id AS b_currency_id, con.contract_id, con.contract_type, con.price_converted, con.quantity
                    FROM payment p 
                    INNER JOIN bank b
                        ON b.bank_id = p.bank_id
                    LEFT JOIN stockpile_contract sc
                        ON sc.stockpile_contract_id = p.stockpile_contract_id
                    LEFT JOIN contract con
                        ON con.contract_id = sc.contract_id
                    WHERE p.payment_id = {$paymentId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            
            if($result !== false && $result->num_rows == 1) {
                $row = $result->fetch_object();
                
                if($row->vendor_id != '' || $row->freight_id != '' || $row->labor_id != ''|| $row->general_vendor_id != '' || $row->payment_cash_id != '') {
                    if($row->vendor_id != '') {
                        $whereProperty = " p.vendor_id = {$row->vendor_id} ";

                        $sqlUpdate = "UPDATE `transaction` set payment_id = NULL where payment_id = {$paymentId}";
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    } elseif($row->freight_id != '') {
                        $whereProperty = " p.freight_id = {$row->freight_id} ";

                        $sqlUpdate = "UPDATE `transaction` set fc_payment_id = NULL where fc_payment_id = {$paymentId}";
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    } elseif($row->labor_id != '') {
                        $whereProperty = " p.labor_id = {$row->labor_id} ";

                        $sqlUpdate = "UPDATE `transaction` set uc_payment_id = NULL where uc_payment_id = {$paymentId}";
                        $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    } elseif($row->general_vendor_id != '') {
                        $whereProperty = " p.general_vendor_id = {$row->general_vendor_id} ";
                    } elseif($row->payment_cash_id != '') {
                         $sqlUpdate = "UPDATE payment_cash set payment_cash_status = 2 WHERE payment_id = {$paymentId}";
                         $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                    }
                    
                  
                } 
            }
            
           // insertGeneralLedger($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", $paymentId);
            
            $return_value = '|OK|Payment has successfully returned.|';
        } else {
            $return_value = '|FAIL|Return payment failed.|';
        }
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_payment') {
    // <editor-fold defaultstate="collapsed" desc="return_payment">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    //$paymentId = $myDatabase->real_escape_string($_POST['paymentId']);
    // </editor-fold>
	 $sqlNotim = "SELECT * FROM `payment` WHERE payment_id IN (43162)";
                        $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
                        if($resultNotim !== false && $resultNotim->num_rows > 0) {
                            while($rowNotim = $resultNotim->fetch_object()) {
                                $paymentId = $rowNotim->payment_id;
    
    if($paymentId != '') {
        
      
            
           insertGeneralLedger($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", "NULL", $paymentId);
            
            $return_value = '|OK|Payment has successfully returned.|';
        
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
	
	}
						}
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_petty_cash') {
    // <editor-fold defaultstate="collapsed" desc="return_payment">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentId = $myDatabase->real_escape_string($_POST['paymentId']);
    // </editor-fold>
    
    if($paymentId != '') {
        
      
            
           insertGeneralLedger($myDatabase, 'PETTY CASH', "NULL", "NULL", "NULL", "NULL", $paymentId);
            
            $return_value = '|OK|Payment has successfully returned.|';
        
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_contract') {
    // <editor-fold defaultstate="collapsed" desc="return_payment">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    // </editor-fold>
    
    if($contractId != '') {
        
      
            
           insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);
            
            $return_value = '|OK|Payment has successfully returned.|';
        
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
    echo $return_value;
    // </editor-fold>
}

//surya update-------------------------------------------------------------------------------
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_reject_contract') {
    // <editor-fold defaultstate="collapsed" desc="return_payment">

    $return_value = '';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $contractId = $myDatabase->real_escape_string($_POST['contractId']);
    // </editor-fold>

    if($contractId != '') {

      $sqlUpdate = "UPDATE contract SET contract_status = 2 , `contract_no`=concat(contract_no,'REJECTED') , `po_no`=concat(po_no,'REJECTED') 
					WHERE contract_id = {$contractId}";
      $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
			if($resultUpdate !== false) {
	
			$sqlUpdate2 = "UPDATE po_pks AS a LEFT JOIN po_contract b ON a.po_pks_id = b.po_pks_id
						SET po_status = 0 WHERE b.contract_id = {$contractId}";
			$resultUpdate2 = $myDatabase->query($sqlUpdate2, MYSQLI_STORE_RESULT);
			
				
				
           insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", "NULL", $contractId);

            $return_value = '|OK|Payment has successfully rejected.|';
			}
			else{
				$return_value = '|FAIL|Record not found.|';
			}
    } else {
        $return_value = '|FAIL|Record not found.|';
    }

    echo $return_value;
    // </editor-fold>
}
//surya update-------------------------------------------------------------

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_invoice') {
    // <editor-fold defaultstate="collapsed" desc="return_payment"a2a>
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    //$invoiceId = 7322;
    // </editor-fold>
    $sqlNotim = "SELECT * FROM `invoice_detail` WHERE invoice_detail_id IN
                    (13802
)";
                        $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
                        if($resultNotim !== false && $resultNotim->num_rows > 0) {
                            while($rowNotim = $resultNotim->fetch_object()) {
                                $invoiceId = $rowNotim->invoice_detail_id;
                                
								
    if($invoiceId != '') {
              
			insertGeneralLedger($myDatabase, 'INVOICE DETAIL', $invoiceId);
            
            $return_value = '|OK|Invoice has successfully Created.|';
        
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
    
							}
						}
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_invoice_return') {
    // <editor-fold defaultstate="collapsed" desc="return_payment">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
   $sqlNotim = "SELECT * FROM `invoice_detail` WHERE invoice_detail_id IN
                    (13802

)";
                        $resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
                        if($resultNotim !== false && $resultNotim->num_rows > 0) {
                            while($rowNotim = $resultNotim->fetch_object()) {
                                $invoiceId = $rowNotim->invoice_detail_id;
    
                      
                            
    if($invoiceId != '') {
              
			insertGeneralLedger($myDatabase, 'RETURN INVOICE', $invoiceId);
            
            $return_value = '|OK|Invoice has successfully Created.|';
        
    } else {
        $return_value = '|FAIL|Record not found.|';
    }
							}
						}
							
    
    echo $return_value;
    // </editor-fold>
}
	elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'jurnal_notim') {
		// <editor-fold defaultstate="collapsed" desc="return_payment">
		
		$return_value = '';
		
		// <editor-fold defaultstate="collapsed" desc="POST variables">
		//$transactionId = $myDatabase->real_escape_string($_POST['transactionId']);
		// </editor-fold>
		
		//$sqlNotim = "SELECT * FROM `transaction` WHERE slip_no IN ('MAR-19-0000002195','MAR-19-0000002196')";
		$sqlNotim = "SELECT * FROM `transaction` WHERE slip_no IN ('MAR-20-0000001001')";						
							$resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
							if($resultNotim !== false && $resultNotim->num_rows > 0) {
								while($rowNotim = $resultNotim->fetch_object()) {
									$transactionId = $rowNotim->transaction_id;
									
						  
								
							
		
		if($transactionId != '') {
			
		  
				
			   insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
				
				$return_value = '|OK|Payment has successfully returned.|';
			
		} else {
			$return_value = '|FAIL|Record not found.|';
		}
		
								}
							}
		
		echo $return_value;
		// </editor-fold>
	}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'susut_notim') {
		// <editor-fold defaultstate="collapsed" desc="return_payment">
		
		$return_value = '';
		
		// <editor-fold defaultstate="collapsed" desc="POST variables">
		//$transactionId = $myDatabase->real_escape_string($_POST['transactionId']);
		// </editor-fold>
		
		//$sqlNotim = "SELECT * FROM `transaction` WHERE slip_no IN ('MAR-19-0000002195','MAR-19-0000002196')";
		$sqlNotim = "SELECT * FROM `transaction` WHERE transaction_id IN (296173)";						
							$resultNotim = $myDatabase->query($sqlNotim, MYSQLI_STORE_RESULT);
							if($resultNotim !== false && $resultNotim->num_rows > 0) {
								while($rowNotim = $resultNotim->fetch_object()) {
									$transactionId = $rowNotim->transaction_id;
									
						  
								
							
		
		if($transactionId != '') {
			
		  
				
			  $sql = "CALL sp_shrink_weight({$transactionId})";
              $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
				$return_value = '|OK|Payment has successfully returned.|';
			
		} else {
			$return_value = '|FAIL|Record not found.|';
		}
		
								}
							}
		
		echo $return_value;
		// </editor-fold>
	}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'payment_data') {
    // <editor-fold defaultstate="collapsed" desc="payment_data">

    $return_value = '';
    $boolContinue = false;
	$boolBank = false;
    $boolUpdateTransaction = false;
    $boolUpdateShipment = false;
    $boolContinue2 = true;
    $tempStamp = '';
    $periodPaymentFrom='';
    $periodPaymentTo='';

    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $paymentMethod = $myDatabase->real_escape_string($_POST['paymentMethod']);
    $paymentDate = $myDatabase->real_escape_string($_POST['paymentDate']);
    $paymentType = $myDatabase->real_escape_string($_POST['paymentType']);
	$payment_type = $myDatabase->real_escape_string($_POST['payment_type']);
    $bankId = $myDatabase->real_escape_string($_POST['bankId']);
    $paymentFor = $myDatabase->real_escape_string($_POST['paymentFor']);
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    $vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
    $stockpileContractId = $myDatabase->real_escape_string($_POST['stockpileContractId']);
	$stockpileContractId2 = $myDatabase->real_escape_string($_POST['stockpileContractId2']);
	$stockpileContractId3 = $myDatabase->real_escape_string($_POST['stockpileContractId3']);
    $stockpileId1 = $myDatabase->real_escape_string($_POST['stockpileId1']);
    $vendorId1 = $myDatabase->real_escape_string($_POST['vendorId1']);
    $stockpileId2 = $myDatabase->real_escape_string($_POST['stockpileId2']);
    $freightId = $myDatabase->real_escape_string($_POST['freightId']);
	$stockpileId4 = $myDatabase->real_escape_string($_POST['stockpileId4']);
    $vendorHandlingId = $myDatabase->real_escape_string($_POST['vendorHandlingId']);
    $stockpileId3 = $myDatabase->real_escape_string($_POST['stockpileId3']);
    $laborId = $myDatabase->real_escape_string($_POST['laborId']);
    $customerId = $myDatabase->real_escape_string($_POST['customerId']);
    $salesId = $myDatabase->real_escape_string($_POST['salesId']);
    $shipmentId = $myDatabase->real_escape_string($_POST['shipmentId']);
	$shipmentId1 = $myDatabase->real_escape_string($_POST['shipmentId1']);
	$contractId = $myDatabase->real_escape_string($_POST['contractId']);
    $generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId']);
    $taxInvoice = $myDatabase->real_escape_string($_POST['taxInvoice']);
    $invoiceNo = $myDatabase->real_escape_string($_POST['invoiceNo']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $bankCurrencyId = $myDatabase->real_escape_string($_POST['bankCurrencyId']);
    $journalCurrencyId = $myDatabase->real_escape_string($_POST['journalCurrencyId']);
    $exchangeRate = str_replace(",", "", $myDatabase->real_escape_string($_POST['exchangeRate']));
    $amount = str_replace(",", "", $myDatabase->real_escape_string($_POST['amount']));
    $originalAmount = $amount;
    $totalPrice = str_replace(",", "", $myDatabase->real_escape_string($_POST['totalPrice']));
    $downPayment = str_replace(",", "", $myDatabase->real_escape_string($_POST['downPayment']));
    $grandTotal = str_replace(",", "", $myDatabase->real_escape_string($_POST['grandTotal']));
    $ppn = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn']));
    $pph = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph']));
    $price = str_replace(",", "", $myDatabase->real_escape_string($_POST['price']));
	$qty = str_replace(",", "", $myDatabase->real_escape_string($_POST['qty']));
	$fc_ppn_dp = str_replace(",", "", $myDatabase->real_escape_string($_POST['fc_ppn_dp']));
    $ppn1 = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn1']));
	$ppn2 = str_replace(",", "", $myDatabase->real_escape_string($_POST['ppn2']));
    $pph1 = str_replace(",", "", $myDatabase->real_escape_string($_POST['pph1']));
    $notes = $myDatabase->real_escape_string($_POST['paymentNotes']);
    $remarks = $myDatabase->real_escape_string($_POST['remarks']);
	$remarks2 = $myDatabase->real_escape_string($_POST['remarks2']);
    $paymentLocation = $myDatabase->real_escape_string($_POST['paymentLocation']);
	$stockpileLocation = $myDatabase->real_escape_string($_POST['stockpileLocation']);
    $chequeNo = $myDatabase->real_escape_string($_POST['chequeNo']);
	$invoiceDate = $myDatabase->real_escape_string($_POST['invoiceDate']);
	$invoiceId = $myDatabase->real_escape_string($_POST['invoiceId']);
	$paymentCashId = $paymentFor;
    $slipNos = "";
    $shipmentNos = "";
	$priceFreight = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceFreight']));
	$qtyFreight = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyFreight']));
	$terminFreight = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminFreight']));
	$stockpileIdFcDp = $myDatabase->real_escape_string($_POST['stockpileIdFcDp']);
    $freightIdFcDp = $myDatabase->real_escape_string($_POST['freightIdFcDp']);
	$freightBankDp = $myDatabase->real_escape_string($_POST['freightBankDp']);
	$vendorBankId = $myDatabase->real_escape_string($_POST['vendorBankId']);
	$qtyHandlingDP = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyHandlingDP']));
	$priceHandlingDP = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceHandlingDP']));
	$terminHandlingDP = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminHandlingDP']));
	$stockpileVhDp = $myDatabase->real_escape_string($_POST['stockpileVhDp']);
	$vendorHandlingDp = $myDatabase->real_escape_string($_POST['vendorHandlingDp']);
	$vendorHandlingBankDp = $myDatabase->real_escape_string($_POST['vendorHandlingBankDp']);
	$vendorHandlingBankId = $myDatabase->real_escape_string($_POST['vendorHandlingBankId']);
	$freightBankId = $myDatabase->real_escape_string($_POST['freightBankId']);
	$qtyLabor = str_replace(",", "", $myDatabase->real_escape_string($_POST['qtyLabor']));
	$priceLabor = str_replace(",", "", $myDatabase->real_escape_string($_POST['priceLabor']));
	$terminLabor = str_replace(",", "", $myDatabase->real_escape_string($_POST['terminLabor']));
	$stockpileLaborDp = $myDatabase->real_escape_string($_POST['stockpileLaborDp']);
	$laborDp = $myDatabase->real_escape_string($_POST['laborDp']);
	$laborBankDp = $myDatabase->real_escape_string($_POST['laborBankDp']);
	$laborBankId = $myDatabase->real_escape_string($_POST['laborBankId']);
	$gvBankId = $myDatabase->real_escape_string($_POST['gvBankId']);
	$curahBankId = $myDatabase->real_escape_string($_POST['curahBankId']);
	$gvPCBankId = $myDatabase->real_escape_string($_POST['gvPCBankId']);
  $paymentFrom = $myDatabase->real_escape_string($_POST['paymentFrom']);
  $paymentFrom1 = $myDatabase->real_escape_string($_POST['paymentFrom1']);
  $paymentFromUP = $myDatabase->real_escape_string($_POST['paymentFromUP']);
  $paymentFromHP = $myDatabase->real_escape_string($_POST['paymentFromHP']);
  $paymentTo = $myDatabase->real_escape_string($_POST['paymentTo']);
  $paymentTo1 = $myDatabase->real_escape_string($_POST['paymentTo1']);
  $paymentToUP = $myDatabase->real_escape_string($_POST['paymentToUP']);
  $paymentToHP = $myDatabase->real_escape_string($_POST['paymentToHP']);

	if($stockpileContractId2 == '' && $stockpileContractId3 == ''){
		$stockpileContract_Id = 'NULL';
	}elseif($stockpileContractId2 == '' && $stockpileContractId3 != ''){
		$stockpileContract_Id = $stockpileContractId3;
	}elseif($stockpileContractId3 == '' && $stockpileContractId2 != ''){
		$stockpileContract_Id = $stockpileContractId2;
	}

	if($shipmentId == '' && $shipmentId1 == ''){
		$shipment_Id = 'NULL';
	}elseif($shipmentId == '' && $shipmentId1 != ''){
		$shipment_Id = $shipmentId1;
	}elseif($shipmentId != '' && $shipmentId1 == ''){
		$shipment_Id = $shipmentId;
	}

	if($invoiceId == '') {
            $invoiceId = 'NULL';
        }
	if($vendorHandlingId == '') {
            $vendorHandlingId = 'NULL';
        }
	if($ppn12 == '') {
            $ppn12 = 0;
        }
	if($pph12 == '') {
            $pph12 = 0;
        }
	if($paymentCashId != 10 ) {
            $paymentCashId = 'NULL';
        }

	$sqlBankAcc = "SELECT account_id FROM bank WHERE bank_id = {$bankId}";
                    $resultBankAcc = $myDatabase->query($sqlBankAcc, MYSQLI_STORE_RESULT);
                    if($resultBankAcc->num_rows == 1) {
                        $rowBankAcc = $resultBankAcc->fetch_object();

						if($rowBankAcc->account_id !== $accountId){
							$boolBank = true;
						}
					}	
		
	$termin = 'NULL';
	$vendorBank = 'NULL';

    if($paymentFor == 0) {
        // PKS Kontrak
        if($stockpileId != '' && $vendorId != '' && $stockpileContractId != '' && $vendorBankId != '' && $grandTotal != 0) {
            if($paymentMethod == 1) {
                if($ppn > 0) {
                    if($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
            } else {
                $boolContinue = true;
                $pph = 0;
				$ppn = $ppn2;
				$amount = $amount + $ppn;
				$originalAmount = $originalAmount + $ppn;
				if($ppn2 == '') {
					$ppn = 0;
				}
            }
            $salesId = 'NULL';
            $freightId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
			$qty = 'NULL';
			$price = 'NULL';
            //$shipment_Id = 'NULL';
			//$stockpileContract_Id = 'NULL';
			//$shipmentId1 = 'NULL';
			//$stockpileContractId3 = 'NULL';
            $generalVendorId = 'NULL';
			$vendorBank = $vendorBankId;
        }
    } else if($paymentFor == 1) {
      $periodPaymentFrom=$paymentFrom1;
      $periodPaymentTo=$paymentTo1;
        if($paymentType == 1) {
            // Sales
      			if($customerId != '' && $salesId != '') {
                $boolContinue = true;
                $stockpileContractId = 'NULL';
                $freightId = 'NULL';
                $laborId = 'NULL';
                $vendorId1 = 'NULL';
				$qty = 'NULL';
				$price = 'NULL';
               // $shipment_Id = 'NULL';
				//$stockpileContract_Id = 'NULL';
				//$shipmentId1 = 'NULL';
				//$stockpileContractId3 = 'NULL';
                $generalVendorId = 'NULL';

                if($paymentMethod == 2) {

					$ppn = 0;

                    $pph = 0;
                }
//                $amount = 0;
//                $originalAmount = 0;
            }
        } else if($paymentType == 2) {
            // PKS Curah
            if($paymentMethod == 1 && $stockpileId1 != '' && $vendorId1 != '' && $grandTotal != 0) {
                if($ppn > 0) {
                    if($taxInvoice != '') {
                        $boolContinue = true;
                    }
                } else {
                    $boolContinue = true;
                }
                $salesId = 'NULL';
                $stockpileContractId = 'NULL';
                $freightId = 'NULL';
                $laborId = 'NULL';
				$qty = 'NULL';
				$price = 'NULL';
				$vendorBank = $curahBankId;
              	//$shipment_Id = 'NULL';
				//$stockpileContract_Id = 'NULL';
				//$shipmentId1 = 'NULL';
				//$stockpileContractId3 = 'NULL';
                $generalVendorId = 'NULL';
            } elseif($paymentMethod == 2 && $stockpileId1 != '' && $vendorId1 != '' && $amount != 0) {
                $boolContinue = true;
                $salesId = 'NULL';
                $stockpileContractId = 'NULL';
                $freightId = 'NULL';
                $laborId = 'NULL';
				$qty = 'NULL';
			    $price = 'NULL';
                //$shipment_Id = 'NULL';
				//$stockpileContract_Id = 'NULL';
				//$shipmentId1 = 'NULL';
				//$stockpileContractId3 = 'NULL';
                $generalVendorId = 'NULL';
                $ppn = 0;
                $pph = 0;
            }
        }
    } else if($paymentFor == 9) {
        // HC payment
        $periodPaymentFrom=$paymentFromHP;
        $periodPaymentTo=$paymentToHP;
        if($paymentMethod == 2 && $stockpileVhDp != '' && $vendorHandlingDp != '' && $vendorHandlingBankDp != '' && $amount != 0) {
            $boolContinue = true;
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
			$freightId = 'NULL';
			$qty = $qtyHandlingDP;
			$price = $priceHandlingDP;
			$termin = $terminHandlingDP;
			$vendorBank = $vendorHandlingBankDp;
			$vendorHandlingId = $vendorHandlingDp;
            //$shipment_Id = 'NULL';
			//$stockpileContract_Id = 'NULL';
			//$shipmentId1 = 'NULL';
			//$stockpileContractId3 = 'NULL';
            $generalVendorId = 'NULL';
			 $sql = "SELECT pph FROM vendor_handling WHERE vendor_handling_id = {$vendorHandlingDp}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($result->num_rows == 1) {
                        $row = $result->fetch_object();

						$pph = $amount * ($row->pph/100);
                    } else{
						$pph = 0;
					}
            $ppn = 0;

        } elseif($paymentMethod == 1 && $stockpileId4 != '' && $vendorHandlingId != '' && $grandTotal >= 0 && $vendorHandlingBankId != '') {
            if($ppn > 0) {
                if($taxInvoice != '') {
                    $boolContinue = true;
                }
            } else {
                $boolContinue = true;
            }
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $laborId = 'NULL';
			$freightId = 'NULL';
            $vendorId1 = 'NULL';
			$qty = 'NULL';
			$price = 'NULL';
			$vendorBank = $vendorHandlingBankId;
            //$shipment_Id = 'NULL';
			//$stockpileContract_Id = 'NULL';
			//$shipmentId1 = 'NULL';
			//$stockpileContractId3 = 'NULL';
            $generalVendorId = 'NULL';
        }
    }else if($paymentFor == 2) {
        // FC payment
        $periodPaymentFrom=$paymentFrom;
        $periodPaymentTo=$paymentTo;
        if($paymentMethod == 2 && $stockpileIdFcDp != '' && $freightIdFcDp != '' && $freightBankDp != '' && $amount != 0) {
            $boolContinue = true;
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
			$qty = $qtyFreight;
			$price = $priceFreight;
			$termin = $terminFreight;
			$freightId = $freightIdFcDp;
			$vendorBank = $freightBankDp;
            //$shipment_Id = 'NULL';
			//$stockpileContract_Id = 'NULL';
			//$shipmentId1 = 'NULL';
			//$stockpileContractId3 = 'NULL';
            $generalVendorId = 'NULL';
            $sql = "SELECT pph,ppn FROM freight WHERE freight_id = {$freightIdFcDp}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($result->num_rows == 1) {
                        $row = $result->fetch_object();
                        $ppn = $amount * ($row->ppn/100);
						$pph = $amount * ($row->pph/100);
                    } else{
						$pph = 0;
						$ppn = 0;
					}

        } elseif($paymentMethod == 1 && $stockpileId2 == 10 && $freightId == 26 && $freightBankId != '') {
			$boolContinue = true;
            $ppn = 0;
            $pph = 0;
			$freightId = 26;
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
			$qty = 'NULL';
			$price = 'NULL';
            //$shipmentId = 'NULL';
            $generalVendorId = 'NULL';
			$vendorBank = $freightBankId;
			//$shipment_Id = 'NULL';
			//$stockpileContract_Id = 'NULL';
			//$shipmentId1 = 'NULL';
			//$stockpileContractId3 = 'NULL';
			$totalPrice = $originalAmount;
			$grandTotal = $originalAmount;
      }elseif($paymentMethod == 1 && $stockpileId2 != '' && $freightId != '' && $grandTotal >= 0 && $freightBankId != '') {
            if($ppn > 0) {
                if($taxInvoice != '') {
                    $boolContinue = true;
                }
            } else {
                $boolContinue = true;
            }
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $laborId = 'NULL';
            $vendorId1 = 'NULL';
			$qty = 'NULL';
			$price = 'NULL';
			$vendorBank = $freightBankId;
            //$shipment_Id = 'NULL';
			//$stockpileContract_Id = 'NULL';
			//$shipmentId1 = 'NULL';
			//$stockpileContractId3 = 'NULL';
            $generalVendorId = 'NULL';
			$originalAmount = $amount + $fc_ppn_dp;
        }
    } else if($paymentFor == 3) {
        // UC payment
        $periodPaymentFrom=$paymentFromUP;
        $periodPaymentTo=$paymentToUP;
        if($paymentMethod == 1 && $stockpileId3 != '' && $laborId != '' && $grandTotal >= 0 && $laborBankId != '')  {
            if($ppn > 0) {
                if($taxInvoice != '') {
                    $boolContinue = true;
                }
            } else {
                $boolContinue = true;
            }
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $freightId = 'NULL';
            $vendorId1 = 'NULL';
			$qty = 'NULL';
			$price = 'NULL';
			$vendorBank = $laborBankId;
            //$shipment_Id = 'NULL';
			//$stockpileContract_Id = 'NULL';
			//$shipmentId1 = 'NULL';
			//$stockpileContractId3 = 'NULL';
            $generalVendorId = 'NULL';
        } elseif($paymentMethod == 2 && $stockpileLaborDp != '' && $laborDp != '' && $laborBankDp != '' && $amount != 0) {
            $boolContinue = true;
            $stockpileContractId = 'NULL';
            $salesId = 'NULL';
            $freightId = 'NULL';
            $vendorId1 = 'NULL';
            //$shipmentId = 'NULL';
			$qty = $qtyLabor;
			$price = $priceLabor;
			$termin = $terminLabor;
			$laborId = $laborDp;
			$vendorBank = $laborBankDp;
			//$shipment_Id = 'NULL';
			//$stockpileContract_Id = 'NULL';
			//$shipmentId1 = 'NULL';
			//$stockpileContractId3 = 'NULL';
            $generalVendorId = 'NULL';
            $ppn = 0;
            $pph = 0;
        }
    } else {
        $boolContinue = true;
        $stockpileContractId = 'NULL';
        $salesId = 'NULL';
        $freightId = 'NULL';
        $laborId = 'NULL';
        $vendorId1 = 'NULL';
        /*if($shipment_Id == '') {
            $shipment_Id = 'NULL';
        }
		if($stockpileContract_Id == '') {
            $stockpileContract_Id = 'NULL';
        }*/
		if($paymentFor == 8){
		$vendorBank = $gvBankId;
		}else if($paymentFor == 10){
		$vendorBank = $gvPCBankId;
		}

        if($generalVendorId == '') {
            $generalVendorId = 'NULL';
        }
         if($price == '') {
            $price = 'NULL';
        }
		if($qty == '') {
            $qty = 'NULL';
        }
		 if($paymentType == 1 && ($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 7 || $paymentFor == 8 || $paymentFor == 10)) {
	        $ppn1 = $ppn1;
            $pph1 = $pph1;
            $grandTotal = $amount;
			$totalPrice = $amount;

		 }else if($paymentType == 1) {

			$ppn1 = 0;
            $pph1 = 0;
            $grandTotal = $amount;
        }
        if($paymentFor == 7 || $paymentMethod == 2) {
            $ppn = 0;
            $pph = 0;
        }

       if($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 8 || $paymentFor == 10) {
            if(is_numeric($ppn1)) {
                $ppn = $ppn1;
            } else {
                $ppn = 0;
            }

            if(is_numeric($pph1)) {
                $pph = $pph1;
            } else {
                $pph = 0;
            }
        }
    }

	if($boolBank){
    if($paymentDate != '' && $paymentType != '' && $paymentMethod != '' && $accountId != '' && $bankId != '' &&
            $currencyId != ''  && $boolContinue) {
       if($paymentMethod == 1 && $paymentType == 2 && ($paymentFor == 0 || $paymentFor == 1 || $paymentFor == 2 || $paymentFor == 3 || $paymentFor == 9)) {
            // <editor-fold defaultstate="collapsed" desc="PAYMENT - OUT - PKS Curah/FC/UC - UPDATE TRANSACTION">
            if($amount < $grandTotal || ($amount != 0 && $amount > $grandTotal)) {
                $boolContinue2 = false;
            } else {
                $boolUpdateTransaction = true;

                if($paymentFor == 0) {
                    $whereProperty = " AND stockpile_contract_id = {$stockpileContractId} ";
                    $updateProperty = " payment_id ";

                    $sql = "SELECT GROUP_CONCAT(transaction_id) AS transaction_ids "
                            . "FROM `transaction` "
                            . "WHERE stockpile_contract_id = {$stockpileContractId} ";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($result->num_rows == 1) {
                        $row = $result->fetch_object();
                        $slipNos = $row->transaction_id;
                    }
                } else if($paymentFor == 1) {
                    $whereProperty = " AND vendor_id = {$vendorId1} ";
                    $updateProperty = " payment_id ";
                } else if($paymentFor == 2) {
                    $whereProperty = " AND p.freight_id = {$freightId} ";
                    $updateProperty = " fc_payment_id ";
                } else if($paymentFor == 9) {
                    $whereProperty = " AND p.vendor_handling_id = {$vendorHandlingId} ";
                    $updateProperty = " hc_payment_id ";
                } else if($paymentFor == 3) {
                    $whereProperty = " AND labor_id = {$laborId} ";
                    $updateProperty = " uc_payment_id ";
                }

                if (isset($_POST['checkedSlips'])) {
                    $checks = $_POST['checkedSlips'];
                    for ($i = 0; $i < sizeof($checks); $i++) {
                        if($slipNos == '') {
                            $slipNos .= $checks[$i];
                        } else {
                            $slipNos .= ','. $checks[$i];
                        }
                    }
                }

               if($grandTotal <= 0) {
                    $amount = $totalPrice;

                    $sql = "SELECT p.*, f.pph
                            FROM `payment` p
                            LEFT JOIN freight f ON f.`freight_id` = p.`freight_id`
                            WHERE p.payment_type = {$paymentType}
                            AND p.payment_method = 2 AND p.payment_status = 0
                            {$whereProperty}
                            AND p.amount_converted > 0
                            AND p.company_id = {$_SESSION['companyId']}
                            ORDER BY p.payment_id ASC";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($result !== false && $result->num_rows > 0) {
                        $balanceLeft = $totalPrice;
                        while($row = $result->fetch_object()) {
								$dp = $row->amount_converted;
								$availableDP = $dp - $balanceLeft;
                            if($availableDP > 0) {
                                $sql2 = "UPDATE payment SET amount = ". $availableDP/$row->exchange_rate .", amount_converted = ". $availableDP ." WHERE payment_id = {$row->payment_id}";
                                $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                              //  break;
                            } elseif($availableDP <= 0) {
                                $balanceLeft = $balanceLeft - $row->amount_converted;
                                $sql2 = "UPDATE payment SET amount = 0, amount_converted = 0, pph_amount = 0  WHERE payment_id = {$row->payment_id}";
                                $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                            }
                        }
                    }
                 } else {

					///if($freightId != 312 && $stockpileLocation != 8){
                 $amount = $totalPrice;

                    $sql = "UPDATE `payment` p SET p.amount = 0, p.amount_converted = 0
                            WHERE p.payment_type = {$paymentType}
                            AND p.payment_method = 2
                            {$whereProperty}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
					 //}
                } //edited by alan
            }
            // </editor-fold>
        }elseif($paymentMethod == 1 && $paymentType == 1 && ($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 8)) {
            // <editor-fold defaultstate="collapsed" desc="PAYMENT - IN - Other with GV">
            if($invoiceId != 'NULL') {
                $sql = "SELECT p.*, b.currency_id AS b_currency_id
                        FROM `payment` p
                        INNER JOIN bank b
                        ON b.bank_id = p.bank_id
                        WHERE p.payment_type = {$paymentType}
                        AND p.payment_method = 2 AND p.payment_status = 0
                        AND p.invoice_id = {$invoiceId}
                        AND p.amount_converted > 0
                        AND p.company_id = {$_SESSION['companyId']}
                        ORDER BY p.payment_id ASC";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($result !== false && $result->num_rows > 0) {
                    while($row = $result->fetch_object()) {
                        if($row->b_currency_id == $bankCurrencyId && $bankCurrencyId == $journalCurrencyId) {
                            // IDR - IDR - IDR
                            $addedAmount = $row->amount;
                        } elseif($row->b_currency_id != $bankCurrencyId && $bankCurrencyId == $journalCurrencyId) {
                            // USD - IDR - IDR
                            $addedAmount = $row->amount * $row->exchange_rate;
                        } elseif($row->b_currency_id == $bankCurrencyId && $bankCurrencyId != $journalCurrencyId) {
                            // USD - USD - IDR
                            $addedAmount = $row->amount;
                        } elseif($row->b_currency_id != $bankCurrencyId && $bankCurrencyId != $journalCurrencyId) {
                            // IDR - USD - IDR
                            $addedAmount = $row->amount / $row->exchange_rate;
                        }
                        $sql2 = "UPDATE payment SET amount = 0, amount_converted = 0 WHERE payment_id = {$row->payment_id}";
                        $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                    }
                }

                $amount = $amount + $addedAmount;
            }

            // </editor-fold>
        } elseif($paymentMethod == 1 && $paymentType == 2 && ($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 8)) {
            // <editor-fold defaultstate="collapsed" desc="PAYMENT - OUT - Other with GV">
            if($generalVendorId != 'NULL') {
                $sql = "SELECT p.*, b.currency_id AS b_currency_id
                        FROM `payment` p
                        INNER JOIN bank b
                        ON b.bank_id = p.bank_id
                        WHERE p.payment_type = {$paymentType}
                        AND p.payment_method = 2 AND p.payment_status = 0
                        AND p.invoice_id = {$invoiceId}
                        AND p.amount_converted > 0
                        AND p.company_id = {$_SESSION['companyId']}
                        ORDER BY p.payment_id ASC";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                if($result !== false && $result->num_rows > 0) {
                    while($row = $result->fetch_object()) {
                        if($row->b_currency_id == $bankCurrencyId && $bankCurrencyId == $journalCurrencyId) {
                            // IDR - IDR - IDR
                            //$addedAmount = $row->amount;
							$addedAmount = 0;
                        } elseif($row->b_currency_id != $bankCurrencyId && $bankCurrencyId == $journalCurrencyId) {
                            // USD - IDR - IDR
                            //$addedAmount = $row->amount * $row->exchange_rate;
							$addedAmount = 0 * $row->exchange_rate;
                        } elseif($row->b_currency_id == $bankCurrencyId && $bankCurrencyId != $journalCurrencyId) {
                            // USD - USD - IDR
                            //$addedAmount = $row->amount;
							$addedAmount = 0;
                        } elseif($row->b_currency_id != $bankCurrencyId && $bankCurrencyId != $journalCurrencyId) {
                            // IDR - USD - IDR
                            //$addedAmount = $row->amount / $row->exchange_rate;
							$addedAmount = 0 * $row->exchange_rate;
                        }
                        $sql2 = "UPDATE payment SET amount = 0, amount_converted = 0 WHERE payment_id = {$row->payment_id}";
                        $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                    }
                }

                $amount = $amount + $addedAmount;
            }
		}
            // </editor-fold>

//        elseif($paymentMethod == 2 && $paymentType == 2) {
//            $ppn = 0;
//            $pph = 0;
//        }
        elseif($paymentMethod == 2 && $paymentType == 1 && $paymentFor != 4) {
            // <editor-fold defaultstate="collapsed" desc="DOWN PAYMENT - IN - PKS">
            $sql = "SELECT shipment_id, COALESCE(dp_amount, 0) AS dp_amount FROM shipment WHERE sales_id = {$salesId}";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($result->num_rows > 0) {
                $tempStamp = 1;
                while($row = $result->fetch_object()) {

					$downPayment1 = $myDatabase->real_escape_string($_POST['downPayment'. $row->shipment_id]);
					$ppn = $myDatabase->real_escape_string($_POST['ppnSales'. $row->shipment_id]);
					$downPayment = $downPayment1 + $ppn;
                    if($downPayment != '' && $downPayment != 0) {
                        if($exchangeRate == '') {
                            $exchangeRate = 1;
                        }

                        if($bankCurrencyId == $currencyId && $currencyId != $journalCurrencyId) {
                            $downPaymentDetailConverted = $downPayment;
                            $downPaymentDetailJournal = $downPayment * $exchangeRate;
                        } elseif($bankCurrencyId != $currencyId && $currencyId != $journalCurrencyId) {
                            $downPaymentDetailConverted = $downPayment / $exchangeRate;
                            $downPaymentDetailJournal = $downPayment;
                        } elseif($bankCurrencyId != $currencyId && $currencyId == $journalCurrencyId) {
                            $downPaymentDetailConverted = $downPayment * $exchangeRate;
                            $downPaymentDetailJournal = $downPayment * $exchangeRate;
                        } else {
                            $downPaymentDetailConverted = $downPayment;
                            $downPaymentDetailJournal = $downPayment;
                        }


                        $convertedDownPayment = $row->dp_amount + $downPaymentDetailConverted;

                        //untuk table payment
                        $amount = $amount + $downPayment;
                        $originalAmount = $originalAmount + $downPayment;

                        //amount = ikut cur payment
                        //amount_converted = ikut cur sales
                        //amount_journal = idr
                        $sql = "INSERT INTO payment_detail (payment_id, amount, amount_converted, amount_journal, shipment_id) VALUES ("
                                . "{$tempStamp}, {$downPayment}, {$downPaymentDetailConverted}, {$downPaymentDetailJournal}, {$row->shipment_id})";
                        $resultUpdate = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                        $sql = "UPDATE shipment SET dp_amount = {$convertedDownPayment} WHERE shipment_id = {$row->shipment_id}";
                        $resultUpdate = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    }
                }
            }

            if($amount <= 0) {
                $boolContinue2 = false;
            }
            // </editor-fold>
        }
		elseif($paymentMethod == 1 && $paymentType == 1 && $paymentFor == 1) {
            // <editor-fold defaultstate="collapsed" desc="PAYMENT - IN - PKS">


            if($exchangeRate == '') {
                $exchangeRate = 1;
            }

            if($bankCurrencyId == $currencyId && $currencyId != $journalCurrencyId) {
                // USD - USD - IDR
                $amountConverted = $amount;
                $grandTotalConverted = $grandTotal;
            } elseif($bankCurrencyId != $currencyId && $currencyId != $journalCurrencyId) {
                // IDR - USD - IDR
                $amountConverted = $amount / $exchangeRate;
                $grandTotalConverted = $grandTotal;
            } elseif($bankCurrencyId != $currencyId && $currencyId == $journalCurrencyId) {
                // USD - IDR - IDR
                $amountConverted = $amount * $exchangeRate;
                $grandTotalConverted = $grandTotal;
            } else {
                $amountConverted = $amount;
                $grandTotalConverted = $grandTotal;
            }

            if($amountConverted < $grandTotalConverted || ($amountConverted != 0 && $amountConverted > $grandTotalConverted)) {
                $boolContinue2 = false;
            } else {

                $boolUpdateShipment = true;

                if (isset($_POST['checkedSlips'])) {
                    $checks = $_POST['checkedSlips'];
                    $tempStamp = 1;
                    for ($i = 0; $i < sizeof($checks); $i++) {
                        if($shipmentNos == '') {
                            $shipmentNos .= $checks[$i];
                        } else {
                            $shipmentNos .= ','. $checks[$i];
                        }

                        $sql = "SELECT sh.*
                                FROM shipment sh
                                WHERE sh.shipment_id = {$checks[$i]}";
                        $resultShipment = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        $rowShipment = $resultShipment->fetch_object();
                        $shipmentPayment = $rowShipment->invoice_amount - $rowShipment->dp_amount;

                        if($bankCurrencyId == $currencyId && $currencyId != $journalCurrencyId) {
                            $shipmentAmount = $shipmentPayment;
                            $shipmentPaymentConverted = $shipmentPayment;
                            $shipmentPaymentJournal = $shipmentPayment * $exchangeRate;
                        } elseif($bankCurrencyId != $currencyId && $currencyId != $journalCurrencyId) {
                            $shipmentAmount = $shipmentPayment * $exchangeRate;
                            $shipmentPaymentConverted = $shipmentPayment;
                            $shipmentPaymentJournal = $shipmentPayment * $exchangeRate;
                        } elseif($bankCurrencyId != $currencyId && $currencyId == $journalCurrencyId) {
                            $shipmentAmount = $shipmentPayment / $exchangeRate;
                            $shipmentPaymentConverted = $shipmentPayment;
                            $shipmentPaymentJournal = $shipmentPayment;
                        } else {
                            $shipmentAmount = $shipmentPayment;
                            $shipmentPaymentConverted = $shipmentPayment;
                            $shipmentPaymentJournal = $shipmentPayment;
                        }


                        $sql = "INSERT INTO payment_detail (payment_id, amount, amount_converted, amount_journal, shipment_id) VALUES ("
                                . "{$tempStamp}, {$shipmentAmount}, {$shipmentPaymentConverted}, {$shipmentPaymentJournal}, {$checks[$i]})";
                        $resultUpdate = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    }
                }

                if($shipmentNos == "") {
                    $boolContinue2 = false;
                }
            }
            // </editor-fold>
        }

	  if($boolContinue2) {
            $sql = "select DATE_FORMAT(STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), '%y%m') AS slip_prefix from dual";
            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            $rowSlip = $resultSlip->fetch_object();
            $checkPaymentNo = $rowSlip->slip_prefix;

//            $checkPaymentNo = $currentYearMonth;

            $sql = "SELECT LPAD(RIGHT(payment_no, 5) + 1, 5, '0') AS next_id FROM payment WHERE company_id = {$_SESSION['companyId']} AND bank_id = {$bankId} AND payment_no LIKE '{$checkPaymentNo}%' ORDER BY payment_no DESC LIMIT 1";
            $resultPaymentNo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            if($resultPaymentNo->num_rows == 0) {
                $sql = "SELECT LPAD(1, 5, '0') AS next_id FROM dual LIMIT 1";
                $resultPaymentNo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
            }
            $rowPaymentNo = $resultPaymentNo->fetch_object();
            $nextPaymentNo = $rowPaymentNo->next_id;
            $paymentNo = $checkPaymentNo .'-'. $nextPaymentNo;

            if($exchangeRate == '') {
                $exchangeRate = 1;
            }

            if($bankCurrencyId == $currencyId && $currencyId != $journalCurrencyId) {
                // USD - USD - IDR
                $originalAmountConverted = $originalAmount;
                $amountConverted = $amount;
                $ppnConverted = $ppn;
                $pphConverted = $pph;
                $amountJournal = $originalAmount * $exchangeRate;
                $ppnJournal = $ppn * $exchangeRate;
                $pphJournal = $pph * $exchangeRate;
            } elseif($bankCurrencyId != $currencyId && $currencyId != $journalCurrencyId) {
                // IDR - USD - IDR
                $originalAmountConverted = $originalAmount / $exchangeRate;
                $amountConverted = $amount / $exchangeRate;
                $ppnConverted = $ppn / $exchangeRate;
                $pphConverted = $pph / $exchangeRate;
                $amountJournal = $originalAmount;
                $ppnJournal = $ppn;
                $pphJournal = $pph;
				$currencyId = $bankCurrencyId;
            } elseif($bankCurrencyId != $currencyId && $currencyId == $journalCurrencyId) {
                // USD - IDR - IDR
                $originalAmountConverted = $originalAmount * $exchangeRate;
                $amountConverted = $amount * $exchangeRate;
                $ppnConverted = $ppn * $exchangeRate;
                $pphConverted = $pph * $exchangeRate;
                $amountJournal = $originalAmount * $exchangeRate;
                $ppnJournal = $ppn * $exchangeRate;
                $pphJournal = $pph * $exchangeRate;
				$currencyId = $bankCurrencyId;
            } else {
                $originalAmountConverted = $originalAmount;
                $amountConverted = $amount;
                $ppnConverted = $ppn;
                $pphConverted = $pph;
                $amountJournal = $originalAmount;
                $ppnJournal = $ppn;
                $pphJournal = $pph;

            }
				if($freightId != '' && $fc_ppn_dp != 0){
					$amountJournal = $originalAmount - $fc_ppn_dp;
				}

            // currency_id = cur yg di bayarkan
            // amount, original_amount, ppn, pph = amount yg di input d form
            // *_converted = di konversi ke cur yg d bayarkan
            // *_journal = di konversi ke IDR
            $sql = "INSERT INTO payment (payment_no, payment_date, payment_type, payment_type2, payment_method, account_id, bank_id, stockpile_contract_id, invoice_id, payment_cash_id,"
                    . "vendor_id, sales_id, freight_id, vendor_handling_id, labor_id, stockpile_contract_id_2,shipment_id, vendor_bank_id, payment_notes, remarks, tax_invoice, invoice_no, currency_id, "
                    . "exchange_rate, qty, price, termin, amount, amount_converted, original_amount, original_amount_converted, ppn_amount, ppn_amount_converted, "
                    . "pph_amount, pph_amount_converted, amount_journal, ppn_journal, pph_journal, general_vendor_id, payment_location, cheque_no, entry_by, entry_date, stockpile_location, invoice_date,period_from,period_to,remarks2) VALUES ("
                    . "'{$paymentNo}', STR_TO_DATE('{$paymentDate}', '%d/%m/%Y'), {$paymentType}, {$payment_type},{$paymentMethod}, {$accountId}, {$bankId}, "
                    . "{$stockpileContractId}, {$invoiceId}, {$paymentCashId}, {$vendorId1}, {$salesId}, {$freightId}, {$vendorHandlingId}, {$laborId}, {$stockpileContract_Id}, {$shipment_Id}, {$vendorBank}, '{$notes}', '{$remarks}', "
                    . "'{$taxInvoice}', '{$invoiceNo}', {$currencyId}, {$exchangeRate}, "
                    . "{$qty}, {$price}, {$termin},{$amount}, {$amountConverted}, {$originalAmount}, {$originalAmountConverted}, {$ppn}, {$ppnConverted}, "
                    . "{$pph}, {$pphConverted}, {$amountJournal}, {$ppnJournal}, {$pphJournal}, {$generalVendorId}, {$paymentLocation}, '{$chequeNo}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'),{$stockpileLocation},STR_TO_DATE('$invoiceDate', '%d/%m/%Y %H:%i:%s'),STR_TO_DATE('{$periodPaymentFrom}', '%d/%m/%Y'),STR_TO_DATE('{$periodPaymentTo}', '%d/%m/%Y'), '{$remarks2}')";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $paymentId = $myDatabase->insert_id;

                $return_value = '|OK|Payment has inserted successfully.|'. $paymentId .'|';

                if($boolUpdateTransaction) {
                    $sql = "UPDATE `transaction` SET {$updateProperty} = {$paymentId} WHERE transaction_id IN ($slipNos)";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                    $sql = "SELECT transaction_id, sync_status FROM `transaction` WHERE transaction_id IN ($slipNos)";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($result !== false && $result->num_rows > 0) {
                        while($row = $result->fetch_object()) {
                            $syncStatus = 0;
                            if($row->sync_status == 1) {
                                $syncStatus = 2;
                            }

                            $sql2 = "UPDATE `transaction` SET sync_status = {$syncStatus} WHERE transaction_id = {$row->transaction_id}";
                            $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
                        }
                    }
                }

                if($boolUpdateShipment) {
                    $sql = "UPDATE `shipment` SET payment_id = {$paymentId} WHERE shipment_id IN ($shipmentNos)";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }

                if($tempStamp != '') {
                    $sql = "UPDATE payment_detail SET payment_id = {$paymentId} WHERE payment_id = {$tempStamp}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
                if($paymentFor == 0) {
                    $sql = "SELECT con.contract_id, con.price_converted * con.quantity AS contract_amount, SUM(p.amount_converted) AS paid_amount, v.ppn, v.pph
                            FROM stockpile_contract sc
                            INNER JOIN `contract` con
                                ON con.contract_id = sc.contract_id
                            INNER JOIN `payment` p
                                ON p.stockpile_contract_id = sc.stockpile_contract_id
							INNER JOIN vendor v
								ON v.vendor_id = con.vendor_id
                            WHERE sc.stockpile_contract_id = {$stockpileContractId}
                            AND con.company_id = {$_SESSION['companyId']} AND p.payment_status = 0
                            GROUP BY sc.stockpile_contract_id";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($result->num_rows > 0) {
                        $row = $result->fetch_object();
						$ppn = $row->ppn;
        				$pph = $row->pph;

        				$ppnAmount = ($ppn/100) * $row->contract_amount;
        				$pphAmount = ($pph/100) * $row->contract_amount;
						$total  = $pphAmount + $ppnAmount + $row->contract_amount;


                        if($row->paid_amount >= $total)
                 {
                            $sqlUpdate = "UPDATE `contract` SET payment_status = 1 WHERE contract_id = {$row->contract_id}";
                            $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);
                        }
                    }
                }

				if($paymentFor == 4 || $paymentFor == 5 || $paymentFor == 6 || $paymentFor == 8) {
                    /*$sql = "SELECT i.invoice_id, i.amount, SUM(p.amount_converted) AS paid_amount, i.ppn, i.pph
                            FROM invoice i
                            INNER JOIN `payment` p
                                ON p.invoice_id = i.invoice_id
                            WHERE i.`invoice_id` = {$invoiceId}
                            AND i.company_id = {$_SESSION['companyId']} AND p.payment_status = 0
                            GROUP BY i.invoice_id";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($result->num_rows > 0) {
                        $row = $result->fetch_object();
						$ppn = $row->ppn;
        				$pph = $row->pph;

						$total  = ($row->amount + $ppn) - $pph;


                        if($row->paid_amount >= $total)
                 {
				 }
					 }*/if($paymentMethod == 1){
                            $sqlUpdate = "UPDATE `invoice` SET payment_status = 1 WHERE invoice_id = {$invoiceId}";
                            $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

					 }
                }




					$sql = "SELECT b.* FROM bank b LEFT JOIN payment p ON p.`bank_id` = b.`bank_id` WHERE p.payment_id = {$paymentId}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($result !== false && $result->num_rows > 0) {
                        while($row = $result->fetch_object()) {
							$bankType = $row->bank_type;
							$bankStockpile = $row->stockpile_id;

						}
					}


				if($paymentFor == 10){
						$sqlUpdate = "UPDATE `payment_cash` SET payment_id = {$paymentId}, payment_cash_method = {$paymentMethod} WHERE payment_id IS NULL AND entry_by = {$_SESSION['userId']}";
                            $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

						if($paymentMethod == 1){
                            $sqlUpdate = "UPDATE `payment_cash` SET payment_cash_status = 1 WHERE payment_id = {$paymentId}";
                            $resultUpdate = $myDatabase->query($sqlUpdate, MYSQLI_STORE_RESULT);

					 }
				}
               if($paymentFor == 10 && $bankType == 2){
                insertGeneralLedger($myDatabase, 'PETTY CASH', "NULL", "NULL", "NULL", "NULL", $paymentId);
				}elseif($bankStockpile != 10){
				insertGeneralLedger($myDatabase, 'PAYMENT ADMIN', "NULL", "NULL", "NULL", "NULL", $paymentId);
				}else{
				insertGeneralLedger($myDatabase, 'PAYMENT', "NULL", "NULL", "NULL", "NULL", $paymentId);
				}
                unset($_SESSION['payment']);
            } else {
                $return_value = '|FAIL|Failed insert payment.||';
                //echo $downPayment;
				echo $sql;
				//echo $amount;
				//echo $ppn;
				//echo $qty;
				//echo $price;
				//echo $stockpileContract_Id;
                if($tempStamp != '') {
                    $sql = "DELETE FROM payment_detail WHERE payment_id = {$tempStamp}";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                }
            }
        } else {
            $return_value = '|FAIL|Please insert correct amount.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
		echo $sql;

    }
	}else{
		$return_value = '|FAIL|Please Choose Different Bank.||';
	}
    echo $return_value;

    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'payment_account_data') {
    // <editor-fold defaultstate="collapsed" desc="payment_account_data">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $accountType = $myDatabase->real_escape_string($_POST['accountType']);
    $accountNo = $myDatabase->real_escape_string($_POST['accountNo']);
    $accountName = $myDatabase->real_escape_string($_POST['accountName']);
    // </editor-fold>
    
    if($accountNo != '' && $accountName != '') {
        $sql = "SELECT * FROM `account` WHERE UPPER(account_no) = UPPER('{$accountNo}')";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result !== false && $result->num_rows == 0) {
            $sql = "INSERT INTO `account` (account_type, account_no, account_name, entry_by, entry_date) VALUES ("
                    . "{$accountType}, '{$accountNo}', '{$accountName}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $accountId = $myDatabase->insert_id;
                
                $return_value = '|OK|Account has successfully inserted.|ACCOUNT~'. $accountId .'|';
            } else {
                $return_value = '|FAIL|Insert account failed.||';
            }
        } else {
            $return_value = '|FAIL|Account No. already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'payment_bank_data') {
    // <editor-fold defaultstate="collapsed" desc="payment_bank_data">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $bankName = $myDatabase->real_escape_string($_POST['bankName']);
    $bankAccountNo = $myDatabase->real_escape_string($_POST['bankAccountNo']);
    $bankAccountName = $myDatabase->real_escape_string($_POST['bankAccountName']);
    $currencyId = $myDatabase->real_escape_string($_POST['currencyId']);
    $openingBalance = str_replace(",", "", $myDatabase->real_escape_string($_POST['openingBalance']));
    $accountId = $myDatabase->real_escape_string($_POST['accountId']);
    $bankType = $myDatabase->real_escape_string($_POST['bankType']);
    $bankCode = $myDatabase->real_escape_string($_POST['bankCode']);
    // </editor-fold>
    
    if($bankName != '' && $bankAccountNo != '' && $bankAccountName != '' && $currencyId != '' && $accountId != '' && $openingBalance != '' &&
            $bankType != '' && $bankCode != '') {
        $sql = "SELECT * FROM `bank` WHERE UPPER(bank_name) = UPPER('{$bankName}') AND UPPER(bank_account_no) = UPPER('{$bankAccountNo}')";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result !== false && $result->num_rows == 0) {
            $sql = "INSERT INTO `bank` (bank_name, bank_type, bank_code, bank_account_no, bank_account_name, currency_id, opening_balance, account_id, entry_by, entry_date) VALUES ("
                    . "'{$bankName}', {$bankType}, '{$bankCode}', '{$bankAccountNo}', UPPER('{$bankAccountName}'), {$currencyId}, {$openingBalance}, {$accountId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $bankId = $myDatabase->insert_id;
                
                $return_value = '|OK|Bank has successfully inserted.|BANK~'. $bankId .'|';
            } else {
                $return_value = '|FAIL|Insert bank failed.||';
            }
        } else {
            $return_value = '|FAIL|Bank Account already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'payment_general_vendor_data') {
    // <editor-fold defaultstate="collapsed" desc="payment_general_vendor_data">
    
    $return_value = '';
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    $vendorName = $myDatabase->real_escape_string($_POST['vendorName']);
    $vendorAddress = $myDatabase->real_escape_string($_POST['vendorAddress']);
    $npwp = $myDatabase->real_escape_string($_POST['npwp']);
	$npwp_name = $myDatabase->real_escape_string($_POST['npwp_name']);
    $ppn = $myDatabase->real_escape_string($_POST['ppn']);
    $pph = $myDatabase->real_escape_string($_POST['pph']);
    // </editor-fold>
    
    if($vendorName != '' && $vendorAddress != '' && $npwp != '' && $ppn != '' && $pph != '') {
        $sql = "SELECT * FROM `general_vendor` WHERE UPPER(general_vendor_name) = UPPER('{$vendorName}')";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        if($result !== false && $result->num_rows == 0) {
            $ppnValue = 0;
            $pphValue = 0;
            
            $sqlPPN = "SELECT * FROM tax WHERE tax_id = {$ppn}";
            $resultPPN = $myDatabase->query($sqlPPN, MYSQLI_STORE_RESULT);
            if($resultPPN !== false && $resultPPN->num_rows == 1) {
                $rowPPN = $resultPPN->fetch_object();
                $ppnValue = $rowPPN->tax_value;
            }
            
            $sqlPPh = "SELECT * FROM tax WHERE tax_id = {$pph}";
            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                $rowPPh = $resultPPh->fetch_object();
                $pphValue = $rowPPh->tax_value;
            }
            
            if($ppn == 'NONE') {
                $ppn = 0;
            }
            
            if($pph == 'NONE') {
                $pph = 0;
            }
            
            $sql = "INSERT INTO `general_vendor` (general_vendor_name, general_vendor_address, npwp, npwp_name, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                    . "'{$vendorName}', '{$vendorAddress}', '{$npwp}', '{$npwp_name}', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                $vendorId = $myDatabase->insert_id;

                $return_value = '|OK|General Vendor has successfully inserted.|GENERALVENDOR~'. $vendorId .'|';
            } else {
                $return_value = '|FAIL|Insert general vendor failed.'. $sql .'||';
            }
        } else {
            $return_value = '|FAIL|General Vendor already exists.||';
        }
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}

elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'logout') {
    // <editor-fold defaultstate="collapsed" desc="Logout and go back to index page">
    
    session_unset();
    echo 1;
    // </editor-fold>
}

elseif (isset($_POST['action']) && $_POST['action'] == 'import_contract') {  
    // <editor-fold defaultstate="collapsed" desc="import_contract">
    
    $return_value = '';
    $boolContinue = true;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpileId']);
    
    if($stockpileId == '') {
        $stockpileId = 0;
    }
    
    // </editor-fold>
    
    if(isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import";
        
        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if($boolContinue) {

            $importResult = excelImportContract($myDatabase, $attachmentPath, $stockpileId);
            $importResult = explode("|", $importResult);

            if($importResult[0] == 'OK') {
                $return_value = '|OK|'. $importResult[1] .'|';
            } else {
                $return_value = '|FAIL|'. $importResult[1] .'|';
            }

        }
    } else {
        $return_value = '|FAIL|Please fill required fields.|';
    }
    
    echo $return_value;
    
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_vendor_branch') {
    // <editor-fold defaultstate="collapsed" desc="module_data">
    
    $return_value = '';
    //$boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	$vendorId = $myDatabase->real_escape_string($_POST['vendorId']);
	$branchPKS = $myDatabase->real_escape_string($_POST['branchPKS']);
	
	$freightId = $myDatabase->real_escape_string($_POST['freightId']);
	$branchOA = $myDatabase->real_escape_string($_POST['branchOA']);
	
	$laborId = $myDatabase->real_escape_string($_POST['laborId']);
	$branchOB = $myDatabase->real_escape_string($_POST['branchOB']);
	
	$vendorHandlingId = $myDatabase->real_escape_string($_POST['vendorHandlingId']);
    $branchHC = $myDatabase->real_escape_string($_POST['branchHC']);
	
	$generalVendorId = $myDatabase->real_escape_string($_POST['generalVendorId']);
	$branchGV = $myDatabase->real_escape_string($_POST['branchGV']);
    // </editor-fold>
    
    //if ($moduleId == '') {
    //    $boolNew = true;
    //}
    
    if($vendorId != '' ) {
        
        $sql = "UPDATE vendor SET "
                . "branch = '{$branchPKS}'"
                . "WHERE vendor_id = {$vendorId}";
						
	}else if($freightId != '' ) {
		
		$sql = "UPDATE freight SET "
                . "branch = '{$branchOA}'"
                . "WHERE freight_id = {$freightId}";
						
	}else if($laborId != '' ) {
		
		$sql = "UPDATE labor SET "
                . "branch = '{$branchOB}'"
                . "WHERE labor_id = {$laborId}";
				
	}else if($vendorHandlingId != '' ) {
		
		$sql = "UPDATE vendor_handling SET "
                . "branch = '{$branchHC}'"
                . "WHERE vendor_handling_id = {$vendorHandlingId}";
				
	}else if($generalVendorId != '' ) {
		
		$sql = "UPDATE general_vendor SET "
                . "branch = '{$branchGV}'"
                . "WHERE general_vendor_id = {$generalVendorId}";
				
	}
		$result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                
                $return_value = '|OK|Successfully Updated.|';
            } else {
                $return_value = '|FAIL|Update Failed.||';
            }
        
    //} else {
      //  $return_value = '|FAIL|Please fill the required fields.||';
    //}
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_REQUEST['action']) && $_REQUEST['action'] == 'update_do_timbangan') {
    // <editor-fold defaultstate="collapsed" desc="module_data">
    
    $return_value = '';
    //$boolNew = false;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
	$slipId = $myDatabase->real_escape_string($_POST['slip_id']);
	$noDo = $myDatabase->real_escape_string($_POST['no_do']);
    
    // </editor-fold>
    
    //if ($moduleId == '') {
    //    $boolNew = true;
    //}
    
    if($slipId != '' ) {
        
                $sql = "UPDATE transaction_upload SET "
                        . "no_do = '{$noDo}'"
                        . "WHERE slip_id = {$slipId}";
            
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

            if($result !== false) {
                

                $return_value = '|OK|Successfully Updated.|'. $invoiceId .'|';
            } else {
                $return_value = '|FAIL|Update Failed.||';
            }
        
    } else {
        $return_value = '|FAIL|Please fill the required fields.||';
    }
    
    echo $return_value;
    // </editor-fold>
}
elseif (isset($_POST['action']) && $_POST['action'] == 'import_timbangan') {  
    // <editor-fold defaultstate="collapsed" desc="import_contract">
    
    $return_value = '';
    $boolContinue = true;
    
    // <editor-fold defaultstate="collapsed" desc="POST variables">
    
    $stockpileId = $myDatabase->real_escape_string($_POST['stockpile']);
    
    if($stockpileId == '') {
        $stockpileId = 0;
    }
    
    // </editor-fold>
    
    if(isset($_FILES['imagefile']) && $_FILES['imagefile']['size'] > 0) {
        $attachmentPath = "./import";
        
        if (!is_dir($attachmentPath) && !file_exists($attachmentPath))
            $temp = mkdir($attachmentPath, 0755, TRUE);
        else
            $temp = TRUE;

        if ($temp === TRUE) {
            $attachmentPath .= "/" . date("ymdHis") . "-" . basename($_FILES['imagefile']['name']);
            if (!move_uploaded_file($_FILES['imagefile']['tmp_name'], $attachmentPath)) {
                $boolContinue = FALSE;
                $return_value = '|FAIL|Error while uploading file.|';
            }
        } else {
            $boolContinue = FALSE;
            $return_value = '|FAIL|Error while creating directory.|';
        }

        if($boolContinue) {

            $importResult = excelImportTimbangan($myDatabase, $attachmentPath, $stockpileId);
            $importResult = explode("|", $importResult);

            if($importResult[0] == 'OK') {
                $return_value = '|OK|'. $importResult[1] .'|';
            } else {
                $return_value = '|FAIL|'. $importResult[1] .'|';
            }

        }
    } else {
        $return_value = '|FAIL|Please fill required fields.|';
    }
    
    echo $return_value;
    
    // </editor-fold>
}
function get_ip_address() {
    // <editor-fold defaultstate="collapsed" desc="get_ip_address">
    foreach (array('HTTP_CLIENT_IP', 'HTTP_X_FORWARDED_FOR', 'REMOTE_ADDR') as $key) {
        if (array_key_exists($key, $_SERVER)) {
            foreach (explode(',', $_SERVER[$key]) as $ip) {
                if (filter_var($ip, FILTER_VALIDATE_IP)) {
                    return $ip;
                }
            }
        }
    }
    return "0";
    // </editor-fold>
}

function generateRandomString($length = 10) {
    // <editor-fold defaultstate="collapsed" desc="generateRandomString">
    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $randomString = '';
    for ($i = 0; $i < $length; $i++) {
        $randomString .= $characters[rand(0, strlen($characters) - 1)];
    }
    return $randomString;
    // </editor-fold>
}

function excelImportContract($myDatabase, $fileName = "", $stockpileId = 0, $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1) {
    // <editor-fold defaultstate="collapsed" desc="excelImportContract($myDatabase, $fileName = "", $stockpileId = 0, $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1)">
    if (file_exists(realpath($fileName))) {
        $fileNameRealPath = realpath($fileName);
        
        require_once './assets/extensions/PHPExcel.php';
        require_once './assets/extensions/PHPExcel/IOFactory.php';
        require_once './assets/extensions/PHPExcel/Cell/AdvancedValueBinder.php';

        $objReader = PHPExcel_IOFactory::createReader('Excel5');

        $objPHPExcel = $objReader->load($fileNameRealPath);
        
        $readStartAtRow = 1; 
        $totalCols = 11;

        $result = $myDatabase->query("START TRANSACTION", MYSQLI_STORE_RESULT);
        
//        $sheetCount = $objPHPExcel->getSheetCount();
        $sheetCount = 1;
        for ($onSheet; $onSheet < $sheetCount; $onSheet++) {
            $objPHPExcel->setActiveSheetIndex($onSheet);
            $objWorksheet = $objPHPExcel->getActiveSheet();

            $rows = $objWorksheet->getHighestRow();
            $cols = PHPExcel_Cell::columnIndexFromString($objWorksheet->getHighestColumn());
            if ($toRow == -1)
                $toRow = $rows;
            if ($toCol == -1)
                $toCol = $cols;
            
            $key = array();
            $columnName = array();
            $getColumnAName = false;
            
            if($toCol == $totalCols) {
                for ($row = $fromRow; $row <= $rows; $row++) {
                    for ($i = $fromCol; $i < $cols; $i++) {
                        $columnName[$i] = "column_" . $i;
                        if (isset($columnName[$i])) {
                            if (PHPExcel_Shared_Date::isDateTime($objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row))) { 
                                $tmp = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 

                                if (is_numeric($tmp)) { 
                                    $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'YYYY-MM-DD'); 
                                } else { 
                                    $key[$row][$i]['value'] = substr($tmp, 6, 4) . "-" . substr($tmp, 3, 2) . "-" . substr($tmp, 0, 2); 
                                } 
//                                $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'DD-MMM-YYYY'); 
                            } else { 
//                                $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                $check = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                if (substr($check, 0, 1) == "=") {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getCalculatedValue(); 
                                } else {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                }
                            }
                        }
                    }
                }

                $getColumnAName = true;
            } else {
                return 'FAIL|Template is wrong.';
            }
        }
        
        if ($getColumnAName) {
            $temporaryTable = '';
            $temporaryTableWarning = '';
            $temporaryTableDuplicate = '';
            $fieldNames = '';

            foreach ($columnName as $i => $names) {
                if (trim($names) != '') {
                    $temporaryTable .= ( ($temporaryTable == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableWarning .= ( ($temporaryTableWarning == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableDuplicate .= ( ($temporaryTableDuplicate == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $fieldNames .= ( ($fieldNames == '') ? '' : ', ') . "`" . trim($names) . "`";
                }
            }

            $tempTable = '`tmp_contract_' . uniqid() . '`';
//            $temporaryTable = 'CREATE TEMPORARY TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableWarning = '`jb_sdw_' . uniqid() . '`';
//            $temporaryTableWarning = 'CREATE TEMPORARY TABLE ' . $tempTableWarning . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableWarning . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableDuplicate = '`jb_sdd_' . uniqid() . '`';
//            $temporaryTableDuplicate = 'CREATE TEMPORARY TABLE ' . $tempTableDuplicate . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableDuplicate . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
            $temporaryTable = 'CREATE TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';

//            return "0|". $temporaryTable;

            $result = $myDatabase->query($temporaryTable, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error create table '. $myDatabase->errorMessage;
            }

            $insertInto = '';
            foreach ($key as $row => $colData) {
                if ($colData[1] != null) {
                    $insertIntoCol = '';
                    foreach ($colData as $col => $colDatas) {
                        if (strpos($colDatas['value'], "NULL") !== false || $colDatas['value'] == '')
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "NULL";
                        else {
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "'". $colDatas['value'] ."'";
                        }
                    }
                    $insertInto .= ( ($insertInto == '') ? '' : ', ') . "(" . $insertIntoCol . ")";
//                die("INSERT INTO $temp_table ($fieldnames) VALUES " . $insertinto . ";");
                }
            }

            $insertIntoTemp = "INSERT INTO $tempTable ($fieldNames) VALUES " . $insertInto . ";";

            $result = $myDatabase->query($insertIntoTemp, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error insert table '. $myDatabase->errorMessage;
            }
            
//            return 'OK|Table created.';
            
            $sqlSelect = "select SUBSTR(a.column_1, 1, 1) as contract_type, a.* from $tempTable a;";
            $resultSelect = $myDatabase->query($sqlSelect, MYSQLI_STORE_RESULT);
            $successRow = 0;
            $errorRow = 0;
            $warningRow = 0;
            $counterRow = 1;
            $errorMessage = '';
            
            date_default_timezone_set('Asia/Jakarta');

            $date = new DateTime();
            $currentDate = $date->format('d/m/Y H:i:s');
            $currentYear = $date->format('y');
            $currentYearMonth = $date->format('ym');
            
            while($importedData = $resultSelect->fetch_object()) {
                if ($counterRow >= $readStartAtRow) {
                    // check Vendor
                    $boolInsertVendor = false;
                    $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$importedData->column_2}')";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($result !== false && $result->num_rows > 0) {
                        $rowVendor = $result->fetch_object();
                        $vendorId = $rowVendor->vendor_id;
                        $boolInsertVendor = true;
                    } elseif($result !== false && $result->num_rows == 0) {
                        $ppn = 0;
                        $pph = 0;
                        $ppnValue = 0;
                        $pphValue = 0;
                        
                        if(strtoupper($importedData->column_4) == 'PPN') {
                            $ppn = 1;
                            $ppnValue = 10;
                        }
                        
                        if($importedData->column_5 != '') {
                            $sqlPPh = "SELECT * FROM tax WHERE UPPER(tax_name) = UPPER({$importedData->column_4})";
                            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                                $rowPPh = $resultPPh->fetch_object();
                                $pph = $rowPPh->tax_id;
                                $pphValue = $rowPPh->tax_value;
                            }
                        }

                        $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                                . "UPPER('{$importedData->column_2}'), UPPER('{$importedData->column_3}'), '', '', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                        if($result !== false) {
                            $vendorId = $myDatabase->insert_id;
                            $boolInsertVendor = true;
                        } 
                    }
                    
                    if($boolInsertVendor) {
                        $sql = "SELECT * FROM contract WHERE UPPER(contract_no) = UPPER('{$importedData->column_7}')";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if($result !== false && $result->num_rows == 0) {
                            if($importedData->column_1 == '-' || $importedData->column_1 == '' || $importedData->column_1 == null) {
                                $checkPoNo = $importedData->contract_type .'-'. $importedData->column_2 .'-'. $currentYearMonth;
                                $sql = "SELECT po_no FROM contract WHERE company_id = {$_SESSION['companyId']} AND po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
                                $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if($resultPo->num_rows == 1) {
                                    $rowPo = $resultPo->fetch_object();
                                    $splitPoNo = explode('-', $rowPo->po_no);
                                    $nextPoNo = ((float) $splitPoNo[3]) + 1;
                                    $poNo = $checkPoNo .'-'. $nextPoNo;
                                } else {
                                    $poNo = $checkPoNo .'-1';
                                }
                            } else {
                                $poNo = $importedData->column_1;
                            }
                            
                            if($importedData->column_9 == '-' || $importedData->column_9 == '' || $importedData->column_9 == null) {
                                $quantity = 0;
                            } else {
                                $quantity = $importedData->column_9;
                            }

                            $sql = "INSERT INTO `contract` (contract_type, po_no, contract_no, vendor_id, currency_id, exchange_rate, price, price_converted, "
                                    . "quantity, company_id, entry_by, entry_date) VALUES ("
                                    . "'{$importedData->contract_type}', '{$poNo}', '{$importedData->column_7}', {$vendorId}, 1, 1, {$importedData->column_8}, {$importedData->column_8}, "
                                    . "{$quantity}, {$_SESSION['companyId']}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                            if($result !== false) {
                                $contractId = $myDatabase->insert_id;

                                $sql = "SELECT * FROM `stockpile` WHERE UPPER(stockpile_name) = UPPER('{$importedData->column_10}')";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if($result !== false && $result->num_rows > 0) {
                                    $rowSP = $result->fetch_object();
                                    $stockpileId = $rowSP->stockpile_id;

                                    $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                                            . "{$stockpileId}, {$contractId}, {$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                } else {
                                    $warningRow = $warningRow + 1;
                                }

                                insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", $contractId);

                                $successRow = $successRow + 1;
                            } else {
                                $errorRow = $errorRow + 1;
                            }
                        } else {
                            $warningRow = $warningRow + 1;
                        }
                    } else {
                        $errorRow = $errorRow + 1;
                    }
                }
                $counterRow++;
            }
            
            if(($successRow+$warningRow) >= ($counterRow-1) && $errorRow == 0) {
                $result = $myDatabase->query("COMMIT", MYSQLI_STORE_RESULT);
                
                $sql = "DROP TABLE {$tempTable}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                

                return "OK|". $successRow ." Row(s) import successfully, ". $warningRow ." Row(s) failed with warning. ". $errorMessage;
            } else {
                $result = $myDatabase->query("ROLLBACK", MYSQLI_STORE_RESULT);

                return "FAIL|Import failed. ". $errorRow ." Rows(s) can not be imported. Please contact administrator. ";
            }
            
        }
    } else {
        return 'FAIL|File not exists.';
    }
    // </editor-fold>
}

function excelImportPayment($myDatabase, $fileName = "", $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1) {
    // <editor-fold defaultstate="collapsed" desc="function excelImportTransaction($myDatabase, $fileName = "", $stockpileId = 0, $vendorId = 0, $stockpileContractId = 0, $onSheet = 0, $fromRow = 1, $toRow = -1, $fromCol = 0, $toCol = -1)">
    if (file_exists(realpath($fileName))) {
        $fileNameRealPath = realpath($fileName);
        
        require_once './assets/extensions/PHPExcel.php';
        require_once './assets/extensions/PHPExcel/IOFactory.php';
        require_once './assets/extensions/PHPExcel/Cell/AdvancedValueBinder.php';

        $objReader = PHPExcel_IOFactory::createReader('Excel5');

        $objPHPExcel = $objReader->load($fileNameRealPath);
        
        $readStartAtRow = 1; 
        $totalCols = 23;

        $result = $myDatabase->query("START TRANSACTION", MYSQLI_STORE_RESULT);
        
//        $sheetCount = $objPHPExcel->getSheetCount();
        $sheetCount = 1;
        for ($onSheet; $onSheet < $sheetCount; $onSheet++) {
            $objPHPExcel->setActiveSheetIndex($onSheet);
            $objWorksheet = $objPHPExcel->getActiveSheet();

            $rows = $objWorksheet->getHighestRow();
            $cols = PHPExcel_Cell::columnIndexFromString($objWorksheet->getHighestColumn());
            if ($toRow == -1)
                $toRow = $rows;
            if ($toCol == -1)
                $toCol = $cols;
            
            $key = array();
            $columnName = array();
            $getColumnAName = false;
            
            if($toCol == $totalCols) {
                for ($row = $fromRow; $row <= $rows; $row++) {
                    for ($i = $fromCol; $i < $cols; $i++) {
                        $columnName[$i] = "column_" . $i;
                        if (isset($columnName[$i])) {
                            if (PHPExcel_Shared_Date::isDateTime($objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row))) { 
                                $tmp = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 

                                if (is_numeric($tmp)) { 
                                    $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'YYYY-MM-DD'); 
                                } else { 
                                    $key[$row][$i]['value'] = substr($tmp, 6, 4) . "-" . substr($tmp, 3, 2) . "-" . substr($tmp, 0, 2); 
                                } 
//                                $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'DD-MMM-YYYY'); 
                            } else { 
//                                $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                $check = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                if (substr($check, 0, 1) == "=") {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getCalculatedValue(); 
                                } else {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                }
                            }
                        }
                    }
                }

                $getColumnAName = true;
            } else {
                return 'FAIL|Template is wrong.';
            }
        }
        
        if ($getColumnAName) {
            $temporaryTable = '';
            $temporaryTableWarning = '';
            $temporaryTableDuplicate = '';
            $fieldNames = '';

            foreach ($columnName as $i => $names) {
                if (trim($names) != '') {
                    $temporaryTable .= ( ($temporaryTable == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableWarning .= ( ($temporaryTableWarning == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableDuplicate .= ( ($temporaryTableDuplicate == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $fieldNames .= ( ($fieldNames == '') ? '' : ', ') . "`" . trim($names) . "`";
                }
            }

            $tempTable = '`tmp_payment_' . uniqid() . '`';
//            $temporaryTable = 'CREATE TEMPORARY TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableWarning = '`jb_sdw_' . uniqid() . '`';
//            $temporaryTableWarning = 'CREATE TEMPORARY TABLE ' . $tempTableWarning . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableWarning . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableDuplicate = '`jb_sdd_' . uniqid() . '`';
//            $temporaryTableDuplicate = 'CREATE TEMPORARY TABLE ' . $tempTableDuplicate . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableDuplicate . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
            $temporaryTable = 'CREATE TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';

//            return "0|". $temporaryTable;

            $result = $myDatabase->query($temporaryTable, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error create table '. $myDatabase->errorMessage;
            }

            $insertInto = '';
            foreach ($key as $row => $colData) {
                if ($colData[1] != null) {
                    $insertIntoCol = '';
                    foreach ($colData as $col => $colDatas) {
                        if (strpos($colDatas['value'], "NULL") !== false || $colDatas['value'] == '')
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "NULL";
                        else {
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "'". $colDatas['value'] ."'";
                        }
                    }
                    $insertInto .= ( ($insertInto == '') ? '' : ', ') . "(" . $insertIntoCol . ")";
//                die("INSERT INTO $temp_table ($fieldnames) VALUES " . $insertinto . ";");
                }
            }

            $insertIntoTemp = "INSERT INTO $tempTable ($fieldNames) VALUES " . $insertInto . ";";

            $result = $myDatabase->query($insertIntoTemp, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error insert table '. $myDatabase->errorMessage;
            }
		   
		    $sqlSelect = "SELECT a.*, DATE_FORMAT(a.column_2, '%y') AS trans_year, COALESCE(a.column_15, 0) AS tarra FROM $tempTable a ORDER BY id ASC;";
            $resultSelect = $myDatabase->query($sqlSelect, MYSQLI_STORE_RESULT);
            $successRow = 0;
            $errorRow = 0;
            $warningRow = 0;
            $counterRow = 1;
            $errorMessage = '';
            $shipmentError = 0;
            $categoryError = 0;
            $rateError = 0;
            $currencyError = 0;
            $insuredError = 0;
            $countryFromError = 0;
            $countryToError = 0;
            $duplicateError = 0;
            $duplicateQuotation = '';
            $shipmentQuotation = '';
            $categoryQuotation = '';
            $rateQuotation = '';
            $currencyQuotation = '';
            $insuredQuotation = '';
            $countryFromQuotation = '';
            $countryToQuotation = '';
            
            date_default_timezone_set('Asia/Jakarta');

            $date = new DateTime();
            $currentDate = $date->format('d/m/Y H:i:s');
            
           /* $sqlStockpile = "SELECT * FROM stockpile WHERE stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sqlStockpile, MYSQLI_STORE_RESULT);
            $rowStockpile = $resultStockpile->fetch_object();
            $freightWeightRule = $rowStockpile->freight_weight_rule;
            $curahWeightRule = $rowStockpile->curah_weight_rule;
            $stockpileCode = $rowStockpile->stockpile_code;
            */
            while($importedData = $resultSelect->fetch_object()) {
                if ($counterRow >= $readStartAtRow) {
                   // $custTaxId = 'NULL';
                    //$curahTaxId = 'NULL';
                    //$ucTaxId = 'NULL';
                    //$fcTaxId = 'NULL';
                 
                    if(strtoupper($importedData->column_0) == 'PAYMENT' && strtoupper($importedData->column_1) == 'OUT' && strtoupper($importedData->column_0) == 'FREIGHT COST') {
                        if($importedData->column_6 != '0' && strtoupper($importedData->column_6) != 'NONE' && $importedData->column_6 != '' && $importedData->column_11 != '-' && $importedData->column_6 != null) {
                            $sql = "SELECT * FROM stockpile WHERE UPPER(stockpile_name) = UPPER('{$importedData->column_6}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $stockpileId = $row->stockpile_id;
                            }
                        }
						
						if($importedData->column_11 != '0' && strtoupper($importedData->column_11) != 'NONE' && $importedData->column_11 != '' && $importedData->column_11 != '-' && $importedData->column_11 != null) {
                            $sql = "SELECT * FROM `freight` WHERE UPPER(freight_supplier) = UPPER('{$importedData->column_11}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $freightId = $row->freight_id;
                            }
                        }
                        
                        if($importedData->column_11 != '0' && strtoupper($importedData->column_11) != 'NONE' && $importedData->column_11 != '' && $importedData->column_11 != '-' && $importedData->column_11 != null) {
                            $sql = "SELECT * FROM `contract` WHERE UPPER(contract_no) = UPPER('{$importedData->column_11}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $vendorId = $row->vendor_id;
                            }
                        }
                        
                        if($importedData->column_10 != '0' && strtoupper($importedData->column_10) != 'NONE' && $importedData->column_10 != '' && $importedData->column_10 != '-' && $importedData->column_10 != null) {
                            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_name) = UPPER('{$importedData->column_10}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $supplierId = $row->vendor_id;
                            } else {
                                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, entry_by, entry_date) VALUES ("
                                        . "'". strtoupper(substr($importedData->column_10, 0, 3)) ."', '{$importedData->column_10}', "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $supplierId = $myDatabase->insert_id;
                            }
                        }
                        
//                        if($vendorId == "") {
//                            $vendorId = $supplierId;
//                        }
                        
                        if($supplierId == "") {
                            $supplierId = 'NULL';
                        }
                        
                        // </editor-fold>
                        
                        // <editor-fold defaultstate="collapsed" desc="check vehicle and unloading cost">
                        if($importedData->column_4 != '0' && strtoupper($importedData->column_4) != 'NONE' && $importedData->column_4 != '' && $importedData->column_4 != '-' && $importedData->column_4 != null) {
                            $sql = "SELECT * FROM `vehicle` WHERE UPPER(vehicle_name) = UPPER('{$importedData->column_4}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $vehicleId = $row->vehicle_id;
                            } else {
                                $sql = "INSERT INTO `vehicle` (vehicle_name, entry_by, entry_date) VALUES ("
                                        . "'{$importedData->column_4}', "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $vehicleId = $myDatabase->insert_id;
                            }
                        }
                        
                        if($importedData->column_32 != '0' && strtoupper($importedData->column_32) != 'NONE' && $importedData->column_32 != '' && $importedData->column_32 != '-' && $importedData->column_32 != null) {
                            $sql = "SELECT * FROM `labor` WHERE UPPER(labor_name) = UPPER('{$importedData->column_32}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $laborId = $row->labor_id;
                                $ucTaxId = $row->pph_tax_id;
                            } else {
								
                                $ppn = 0;
                                $pph = 0;
                                $ppnValue = 0;
                                $pphValue = 0;

                                if(strtoupper($importedData->column_33) == 'PPN') {
                                    $ppn = 1;
                                    $ppnValue = 10;
                                }

                                if($importedData->column_34 != '' || $importedData->column_34 != null) {
                                    $sqlPPh = "SELECT * FROM tax WHERE UPPER(tax_name) = UPPER('{$importedData->column_34}')";
                                    $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                                    if($resultPPh !== false && $resultPPh->num_rows == 1) {
                                        $rowPPh = $resultPPh->fetch_object();
                                        $pph = $rowPPh->tax_id;
                                        $pphValue = $rowPPh->tax_value;
                                    }
                                }
                                
                                $sql = "INSERT INTO `labor` (labor_name, labor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                                        . "'{$importedData->column_32}', '', '', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $laborId = $myDatabase->insert_id;
                                
                                $ucTaxId = $pph;
                            }
                        }
                        
                        if(($importedData->column_22 != '' && strtoupper($importedData->column_22) != 'NONE' && $importedData->column_22 != '0' && $importedData->column_22 != '-' && $importedData->column_22 != null) && $vehicleId != '') {
                            $sql = "SELECT * FROM unloading_cost WHERE vehicle_id = {$vehicleId} AND stockpile_id = {$stockpileId} AND price_converted = {$importedData->column_22} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $unloadingCostId = $row->unloading_cost_id;
                            } else {
                                $sql = "INSERT INTO `unloading_cost` (vehicle_id, stockpile_id, currency_id, exchange_rate, price, price_converted, entry_by, entry_date) VALUES ("
                                        . "{$vehicleId}, {$stockpileId}, 1, 1, {$importedData->column_22}, {$importedData->column_22}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $unloadingCostId = $myDatabase->insert_id;
                            }
                        } else {
                            $unloadingCostId = 'NULL';
                        }
                        
                        if($vehicleId == "") {
                            $unloadingCostId = 'NULL';
                        }
						if($laborId == "") {
                            $laborId = 'NULL';
                        }
                        
                        // </editor-fold>
                        
                        // <editor-fold defaultstate="collapsed" desc="check freight and freight cost">
                        if($importedData->column_6 != '0' && strtoupper($importedData->column_6) != 'NONE' && $importedData->column_6 != '' && $importedData->column_6 != '-' && $importedData->column_6 != null) {
                            $sql = "SELECT * FROM `freight` WHERE UPPER(freight_supplier) = UPPER('{$importedData->column_28}') AND UPPER(freight_code) = UPPER('{$importedData->column_29}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $freightId = $row->freight_id;
                                $fcTaxId = $row->pph_tax_id;
                            } else {
								
                                $ppn = 0;
                                $pph = 0;
                                $ppnValue = 0;
                                $pphValue = 0;

                                if(strtoupper($importedData->column_30) == 'PPN') {
                                    $ppn = 1;
                                    $ppnValue = 10;
                                }

                                if($importedData->column_31 != '' || $importedData->column_31 != null) {
                                    $sqlPPh = "SELECT * FROM tax WHERE UPPER(tax_name) = UPPER('{$importedData->column_31}')";
                                    $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                                    if($resultPPh !== false && $resultPPh->num_rows == 1) {
                                        $rowPPh = $resultPPh->fetch_object();
                                        $pph = $rowPPh->tax_id;
                                        $pphValue = $rowPPh->tax_value;
                                    }
                                }
                                
                                $sql = "INSERT INTO `freight` (freight_code, freight_supplier, freight_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                                        . "'". strtoupper($importedData->column_29) ."', '{$importedData->column_28}', '', '', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $freightId = $myDatabase->insert_id;
                                
                                $fcTaxId = $pph;
                            }
                        }
                        
                        $freightQuantity = 0;
                        if(($importedData->column_21 != '' || $importedData->column_21 != '0' || $importedData->column_21 != '-' || $importedData->column_21 != null) && $freightId != '') {
                            // get freight weight
                            if($freightWeightRule == 0) {
                                if((float) $importedData->column_16 < (float) $importedData->column_13) {
                                    $freightQuantity = (float) $importedData->column_16;
                                } elseif((float) $importedData->column_16 > (float) $importedData->column_13) {
                                    $freightQuantity = (float) $importedData->column_13;
                                } else {
                                    $freightQuantity = (float) $importedData->column_13;
                                }
                            } elseif($freightWeightRule == 1) {
                                $freightQuantity = (float) $importedData->column_13;
                            } elseif($freightWeightRule == 2) {
                                $freightQuantity = (float) $importedData->column_16;
                            } else {
                                $freightQuantity = (float) $importedData->column_13;
                            }
                            
                            $freightPrice = (float) $importedData->column_21 / $freightQuantity;
                            
                            $sql = "SELECT * FROM freight_cost WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId} AND vendor_id = {$vendorId} AND price_converted = {$freightPrice} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $freightCostId = $row->freight_cost_id;
                            } else {
                                $sql = "INSERT INTO `freight_cost` (freight_id, stockpile_id, vendor_id, currency_id, exchange_rate, price, price_converted, entry_by, entry_date) VALUES ("
                                        . "{$freightId}, {$stockpileId}, {$vendorId}, 1, 1, {$freightPrice}, {$freightPrice}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $freightCostId = $myDatabase->insert_id;
                            }
                        }
                        
                        if($freightId == "") {
                            $freightCostId = 'NULL';
                        }
                        
                        // </editor-fold>
                        
                        //curah
                        $boolNewContract = false;
                        $boolContinue = false;
                        $boolUpdateCurah = false;
                        if(strtoupper($importedData->column_24) == 'CURAH') {
                            $contractType = 'C';
                            
                            $totalSend = (float) $importedData->column_13;
                            $totalNetto = (float) $importedData->column_16;
                            
                            $sqlContract = "SELECT con.*, v.pph_tax_id 
                                    FROM contract con 
                                    INNER JOIN vendor v
                                        ON v.vendor_id = con.vendor_id
                                    WHERE contract_type = '{$contractType}' AND contract_no = '{$importedData->column_11}'";
                            $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);
                            if($resultContract->num_rows == 1) {
                                $rowContract = $resultContract->fetch_object();
                                $contractId = $rowContract->contract_id;
                                $unitPrice = $rowContract->price;
                                $curahTaxId = $rowContract->pph_tax_id;

                                $sqlStockpileContract = "SELECT * FROM stockpile_contract WHERE contract_id = {$contractId} AND stockpile_id = {$stockpileId}";
                                $resultStockpileContract = $myDatabase->query($sqlStockpileContract, MYSQLI_STORE_RESULT);
                                if($resultStockpileContract->num_rows == 1) {
                                    $rowStockpileContract = $resultStockpileContract->fetch_object();
                                    $stockpileContractId = $rowStockpileContract->stockpile_contract_id;
                                    $currentQuantity = $rowStockpileContract->quantity;
                                    $boolContinue = true;
                                    $boolUpdateCurah = true;
                                } 
                            } 
                            
//                            $boolContinue = true;
//                            $boolNewContract = true;
                        } elseif(strtoupper($importedData->column_24) == 'PKS') {
                            $contractType = 'P';
                            
                            if(($importedData->column_8 != '' || $importedData->column_8 != '0' || $importedData->column_8 != '-' && $importedData->column_8 != 'NONE' && $importedData->column_8 != null) &&
                                    $importedData->column_11 != '' || $importedData->column_11 != '0' || $importedData->column_11 != '-' && $importedData->column_11 != 'NONE' && $importedData->column_11 != null) {
                                $sqlContract = "SELECT * FROM contract WHERE contract_type = '{$contractType}' AND contract_no = '{$importedData->column_11}'";
                                $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);
                                if($resultContract->num_rows == 1) {
                                    $rowContract = $resultContract->fetch_object();
                                    $contractId = $rowContract->contract_id;
                                    $unitPrice = $rowContract->price;
                                    
                                    $sqlStockpileContract = "SELECT * FROM stockpile_contract WHERE contract_id = {$contractId} AND stockpile_id = {$stockpileId}";
                                    $resultStockpileContract = $myDatabase->query($sqlStockpileContract, MYSQLI_STORE_RESULT);
                                    if($resultStockpileContract->num_rows == 1) {
                                        $rowStockpileContract = $resultStockpileContract->fetch_object();
                                        $stockpileContractId = $rowStockpileContract->stockpile_contract_id;
                                        $boolContinue = true;
                                    } 
                                } 
//                                else {
//                                    $sqlTemp = "SELECT SUM(column_13) AS total_send, SUM(column_16) AS total_netto FROM {$tempTable} WHERE column_8 = '{$importedData->column_8}' "
//                                            . "AND column_11 = '{$importedData->column_11}' AND UPPER(column_12) = UPPER('{$importedData->column_12}')";
//                                    $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
//                                    $rowTemp = $resultTemp->fetch_object();
//                                    
//                                    $totalSend = $rowTemp->total_send;
//                                    $totalNetto = $rowTemp->total_netto;
//                                    $boolNewContract = true;
//                                }
                            } else {
                                $totalSend = (float) $importedData->column_13;
                                $totalNetto = (float) $importedData->column_16;
//                                $boolContinue = true;
//                                $boolNewContract = true;
                            }
                        }
                        
//                        $boolContinue = true;
                        if($boolNewContract) {
                            // <editor-fold defaultstate="collapsed" desc="create new contract for curah">
                            
//                            $checkPoNo = $contractType .'-'. $vendorCode .'-'. $importedData->trans_year;
//                            $sql = "SELECT po_no FROM contract WHERE po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
//                            $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                            if($resultPo->num_rows == 1) {
//                                $rowPo = $resultPo->fetch_object();
//                                $splitPoNo = explode('-', $rowPo->po_no);
//                                $nextPoNo = ((float) $splitPoNo[3]) + 1;
//                                $poNo = $checkPoNo .'-'. $nextPoNo;
//                            } else {
//                                $poNo = $checkPoNo .'-1';
//                            }
//                            
//                            if($totalNetto < $totalSend) {
//                                $quantity = $totalNetto;
//                            } elseif($totalNetto > $totalSend) {
//                                $quantity = $totalSend;
//                            } else {
//                                $quantity = $totalSend;
//                            }
//                            
//                            $sql = "INSERT INTO contract (contract_type, po_no, contract_no, vendor_id, currency_id, exchange_rate, "
//                                    . "price, price_converted, quantity, entry_by, entry_date) VALUES ("
//                                    . "'{$contractType}', '{$poNo}', '{$importedData->column_11}', {$vendorId}, 1, 1, "
//                                    . "{$importedData->column_27}, {$importedData->column_27}, {$quantity}, "
//                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
//                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                            
//                            if($result === false) {
//                                $boolContinue = false;
//                            } else {
//                                $contractId = $myDatabase->insert_id;
//                                $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
//                                        . "{$stockpileId}, {$contractId}, {$quantity}, "
//                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
//                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                                if($result === false) {
//                                    $boolContinue = false;
//                                } else {
//                                    $stockpileContractId = $myDatabase->insert_id;
//                                }
//                            }
                            
                            // </editor-fold>
                        }
                        
                        if($boolContinue) {
                            $shrink = 0;
                            if($contractType == 'P') {
                                if((float) $importedData->column_16 < (float) $importedData->column_13) {
                                    $quantity = (float) $importedData->column_16;
                                    $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;
                                } elseif((float) $importedData->column_16 > (float) $importedData->column_13) {
                                    $quantity = (float) $importedData->column_13;
                                    $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;
                                } else {
                                    $quantity = (float) $importedData->column_13;
                                }
                            } elseif($contractType == 'C') {
                                if($curahWeightRule == 0) {
                                    if((float) $importedData->column_16 < (float) $importedData->column_13) {
                                        $quantity = (float) $importedData->column_16;
                                        $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;
                                    } elseif((float) $importedData->column_16 > (float) $importedData->column_13) {
                                        $quantity = (float) $importedData->column_13;
                                        $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;
                                    } else {
                                        $quantity = (float) $importedData->column_13;
                                    }
                                } elseif($curahWeightRule == 1) {
                                    $quantity = (float) $importedData->column_13;
                                    $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;
                                } elseif($curahWeightRule == 2) {
                                    $quantity = (float) $importedData->column_16;
                                    $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;
                                } else {
                                    $quantity = (float) $importedData->column_13;
                                }
                            }

                            // get next slip no
                            $checkSlipNo = $stockpileCode .'-'. $importedData->trans_year;
            //                $sql = "SELECT LPAD(COUNT(1) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ";
            //                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($resultSlip->num_rows == 0) {
                                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                            $rowSlipNo = $resultSlip->fetch_object();
                            $nextSlipNo = $rowSlipNo->next_id;
                            $slipNo = $checkSlipNo .'-'. $nextSlipNo;
                            
                            // get freight cost
                            if($freightCostId == 'NULL') {
                                $freightPrice = 0;
                            } 

                            // get unloading cost
                            
                            if($unloadingCostId == 'NULL') {
                                $unloadingPrice = 0;
                            } else {
                                $unloadingPrice = $importedData->column_22;
                            }
                            
//                            $unitPrice = $importedData->column_27;

                            // get inventory value
                            $inventoryValue = ($freightQuantity * $freightPrice) + $unloadingPrice + ($quantity * $unitPrice);

                            // insert into transaction
                            $sql = "INSERT INTO `transaction` (slip_no, stockpile_contract_id, transaction_date, loading_date, vehicle_no, labor_id, unloading_cost_id, "
                                    . "unloading_date, freight_cost_id, permit_no, transaction_type, vendor_id, send_weight, bruto_weight, tarra_weight, "
                                    . "netto_weight, notes, driver, freight_quantity, quantity, shrink, freight_price, unloading_price, unit_price, "
                                    . "inventory_value, block, uc_tax_id, fc_tax_id, curah_tax_id, entry_by, entry_date) "
                                    . "VALUES ('{$slipNo}', {$stockpileContractId}, STR_TO_DATE('{$importedData->column_2}', '%Y-%m-%d'), STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), "
                                    . "'{$importedData->column_3}', {$laborId}, {$unloadingCostId}, STR_TO_DATE('{$importedData->column_2}', '%Y-%m-%d'), {$freightCostId}, '{$importedData->column_7}', "
                                    . "1, {$supplierId}, {$importedData->column_13}, {$importedData->column_14}, {$importedData->tarra}, {$importedData->column_16}, '{$importedData->column_17}', "
                                    . "'{$importedData->column_18}', {$freightQuantity}, {$quantity}, {$shrink}, {$freightPrice}, {$unloadingPrice}, {$unitPrice}, {$inventoryValue}, 'NONE', "
                                    . "{$ucTaxId}, {$fcTaxId}, {$curahTaxId}, "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            
                            if($result !== false) {
                                $successRow = $successRow + 1;
                                
                                $transactionId = $myDatabase->insert_id;
                                
                                if($boolUpdateCurah) {
                                    /*$newQuantity = (float) $currentQuantity + (float) $totalSend;
                                    $sql = "UPDATE stockpile_contract SET quantity = {$newQuantity} WHERE stockpile_contract_id = {$stockpileContractId}";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    
                                    $sql = "UPDATE contract SET quantity = (SELECT SUM(quantity) FROM stockpile_contract_id WHERE contract_id = {$contractId}) WHERE contract_id = {$contractId}";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/
                                }
                                
                                $sql = "DELETE FROM {$tempTable} WHERE column_0 = {$importedData->column_0}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                                insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                            } else {
                                $errorRow = $errorRow + 1;
                            }
                        } else {
                            $errorRow = $errorRow + 1;
                        }
                        
                        // </editor-fold>
                    } elseif(strtoupper($importedData->column_12) == 'OUT') {
                        // <editor-fold defaultstate="collapsed" desc="OUT">
                        if(($importedData->column_10 != '0' || $importedData->column_10 != 'NONE' || $importedData->column_10 != '' || $importedData->column_10 != '-') &&
                                ($importedData->column_27 != '0' || $importedData->column_27 != 'NONE' || $importedData->column_27 != '' || $importedData->column_27 != '-')) {
                            $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$importedData->column_10}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $customerId = $row->customer_id;
                            } else {
                                $sql = "INSERT INTO `customer` (customer_name, entry_by, entry_date) VALUES ("
                                        . "'{$importedData->column_10}', "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $customerId = $myDatabase->insert_id;
                            }
                        }
                        
                        if($customerId != '') {
							
							
                            $salesNo = strtoupper(str_replace(' ', '', substr($importedData->column_10, 0, 5)));
                            
							
                            $sql = "SELECT * FROM sales WHERE UPPER(sales_no) = '{$salesNo}' AND customer_id = {$customerId} AND stockpile_id = {$stockpileId} "
                                    . "AND currency_id = 1 AND price = {$importedData->column_27} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $salesId = $row->sales_id;
                                $salesBalance = $row->quantity;
                            } else {
                                $sqlTemp = "SELECT count(1) AS total_shipment FROM {$tempTable} WHERE UPPER(column_10) = UPPER('{$importedData->column_10}') "
                                        . "AND UPPER(column_12) = UPPER('{$importedData->column_12}') AND column_27 = {$importedData->column_27}";
                                $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
                                $rowTemp = $resultTemp->fetch_object();
                                $totalShipment = $rowTemp->total_shipment;
                                
                                $sqlTemp = "SELECT MIN(column_5) AS sales_date, SUM(column_13) AS total_quantity FROM {$tempTable} WHERE UPPER(column_10) = UPPER('{$importedData->column_10}') "
                                        . "AND UPPER(column_12) = UPPER('{$importedData->column_12}') AND column_27 = {$importedData->column_27}";
                                $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
                                $rowTemp = $resultTemp->fetch_object();
                                $salesDate = $rowTemp->sales_date;
                                $totalQuantity = $rowTemp->total_quantity;
                                $salesBalance = $totalQuantity;
                                
								
                                $sql = "INSERT INTO sales (sales_no, sales_date, sales_type, customer_id, stockpile_id, currency_id, exchange_rate, "
                                        . "price, price_converted, quantity, total_shipment, entry_by, entry_date) VALUES ("
                                        . "'{$salesNo}', STR_TO_DATE('{$salesDate}', '%Y-%m-%d'), 1, {$customerId}, {$stockpileId}, 1, 1, "
                                        . "{$importedData->column_27}, {$importedData->column_27}, {$totalQuantity}, {$totalShipment}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                                $boolContinue = true;
                                if($result !== false) {
                                    $salesId = $myDatabase->insert_id;
                                    
                                    for($i = 1; $i <= $totalShipment; $i++) {
                                        $shipmentCode = $salesNo .'-'. $i;

                                        $sql = "INSERT INTO `shipment` (shipment_code, sales_id, entry_by, entry_date) VALUES ("
                                                . "'{$shipmentCode}', {$salesId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    }
                                } else {
                                    $boolContinue = false;
                                }
                            }
                            
                            if($boolContinue) {
                                $sql = "SELECT shipment_id FROM shipment WHERE shipment_code LIKE '{$salesNo}%' AND shipment_status = 0 ORDER BY shipment_code ASC LIMIT 1";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if($result->num_rows == 1) {
                                    $row = $result->fetch_object();
                                    $shipmentId = $row->shipment_id;
                                    
                                    $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;

                                    // get next slip no
                                    $checkSlipNo = $stockpileCode .'-'. $importedData->trans_year;
                                    $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultSlip->num_rows == 0) {
                                        $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM transaction LIMIT 1";
                                        $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    }

                                    $rowSlipNo = $resultSlip->fetch_object();
                                    $nextSlipNo = $rowSlipNo->next_id;
                                    $slipNo = $checkSlipNo .'-'. $nextSlipNo;
                                    
                                    $sql = "INSERT INTO `transaction` (slip_no, product_id, shipment_id, transaction_date, vehicle_no, transaction_type, "
                                            . "send_weight, quantity, shrink, entry_by, entry_date) VALUES ('{$slipNo}', 1, "
                                            . "{$shipmentId}, STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), '{$importedData->column_9}', 2, "
                                            . "{$importedData->column_13}, {$importedData->column_16}, {$shrink}, "
                                            . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    
                                    if($result !== false) {
                                        $transactionId = $myDatabase->insert_id;

                                        // insert into delivery
                                        $sql = "SELECT t.* 
                                                FROM transaction t 
                                                WHERE t.stockpile_contract_id IN (
                                                    SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                                                ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                                                ORDER BY t.unloading_date ASC";
                                        $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        $totalInventoryValue = 0;
                                        if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                                            $balanceLeft = (float) $importedData->column_13;
                                            while($rowDelivery = $resultDelivery->fetch_object()) {
                                                if($balanceLeft > 0) {
                                                    if($rowDelivery->delivery_status == 0) {
                                                        if($balanceLeft >= $rowDelivery->quantity) {
                                                            $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                                            $quantityTaken = $rowDelivery->quantity;
                                                            $percentTaken = 1;
                                                            $deliveryStatus = 1;
                                                        } elseif($balanceLeft < $rowDelivery->quantity) {
                                                            $quantityTaken = $balanceLeft;
                                                            $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                                            $balanceLeft = 0;
                                                            $deliveryStatus = 2;
                                                        }
                                                    } elseif($rowDelivery->delivery_status == 2) {
                                                        $totalTaken = 0;
                                                        $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                                        $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                                        if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                                            $rowTaken = $resultTaken->fetch_object();
                                                            $totalTaken = $rowTaken->total_taken;
                                                        }

                                                        if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                                            $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                                            $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                            $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                                            $deliveryStatus = 1;
                                                        } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                                            $quantityTaken = $balanceLeft;
                                                            $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                                            $balanceLeft = 0;
                                                            $deliveryStatus = 2;
                                                        }
                                                    } 

                                                    $deliveryValue = $quantityTaken * (float) $importedData->column_27;
                                                    $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                                    $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                                    $percentTaken = $percentTaken * 100;

                                                    $sql = "INSERT INTO delivery (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                                            . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), {$percentTaken}, "
                                                            . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                                    $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                                }
                                            }
                                        }

                                        //$updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                                        $updateInventoryValue = $totalInventoryValue;

                                        $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                        // update shipment
                                        $cogsAmount = $updateInventoryValue;
                                        $invoiceAmount = (float) $importedData->column_16 * (float) $importedData->column_27;
                                        $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), "
                                                . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$importedData->column_16}, shipment_status = 1 "
                                                . "WHERE shipment_id = {$shipmentId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                        $sql = "SELECT COALESCE(SUM(quantity), 0) AS delivered_balance FROM `transaction` 
                                                WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                                                AND transaction_type = 2
                                                AND transaction_id <> {$transactionId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        $row = $result->fetch_object();
                                        $deliveredBalance = $row->delivered_balance;
                                        
                                        // update sales
                                        $boolUpdateSales = false;
                                        if((float) $importedData->column_13 == ($salesBalance - $deliveredBalance)) {
                                            $salesStatus = 1;
                                            $boolUpdateSales = true;
                                        } elseif((float) $importedData->column_13 < ($salesBalance - $deliveredBalance)) {
                                            $salesStatus = 2;
                                            $boolUpdateSales = true;
                                        }

                                        if($boolUpdateSales) {
                                            $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        }
                                        
                                        $successRow = $successRow + 1;
                                    } else {
                                        $errorRow = $errorRow + 1;
                                    }
                                } else {
                                    $errorRow = $errorRow + 1;
                                }
                            }
                        }
                        
                        // </editor-fold>
                    }
                    
                }
                $counterRow++;
            } 
            
            if(($successRow+$warningRow) == ($counterRow-1) && $errorRow == 0) {
                $result = $myDatabase->query("COMMIT", MYSQLI_STORE_RESULT);
                
                $sql = "DROP TABLE {$tempTable}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                

                return "OK|". $successRow ." Row(s) import successfully, ". $warningRow ." Row(s) failed with warning. ". $errorMessage;
            } else {
                $result = $myDatabase->query("ROLLBACK", MYSQLI_STORE_RESULT);

                return "FAIL|Import failed. ". $errorRow ." Rows(s) can not be imported. Please contact administrator. ";
            }
        }
    } else {
        return 'FAIL|File not exists.';
    } 
    // </editor-fold>
}

function excelImportTransaction($myDatabase, $fileName = "", $stockpileId = 0, $vendorId = 0, $stockpileContractId = 0, $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1) {
    // <editor-fold defaultstate="collapsed" desc="function excelImportTransaction($myDatabase, $fileName = "", $stockpileId = 0, $vendorId = 0, $stockpileContractId = 0, $onSheet = 0, $fromRow = 1, $toRow = -1, $fromCol = 0, $toCol = -1)">
    if (file_exists(realpath($fileName))) {
        $fileNameRealPath = realpath($fileName);
        
        require_once './assets/extensions/PHPExcel.php';
        require_once './assets/extensions/PHPExcel/IOFactory.php';
        require_once './assets/extensions/PHPExcel/Cell/AdvancedValueBinder.php';

        $objReader = PHPExcel_IOFactory::createReader('Excel5');

        $objPHPExcel = $objReader->load($fileNameRealPath);
        
        $readStartAtRow = 1; 
        $totalCols = 35;

        $result = $myDatabase->query("START TRANSACTION", MYSQLI_STORE_RESULT);
        
//        $sheetCount = $objPHPExcel->getSheetCount();
        $sheetCount = 1;
        for ($onSheet; $onSheet < $sheetCount; $onSheet++) {
            $objPHPExcel->setActiveSheetIndex($onSheet);
            $objWorksheet = $objPHPExcel->getActiveSheet();

            $rows = $objWorksheet->getHighestRow();
            $cols = PHPExcel_Cell::columnIndexFromString($objWorksheet->getHighestColumn());
            if ($toRow == -1)
                $toRow = $rows;
            if ($toCol == -1)
                $toCol = $cols;
            
            $key = array();
            $columnName = array();
            $getColumnAName = false;
            
            if($toCol == $totalCols) {
                for ($row = $fromRow; $row <= $rows; $row++) {
                    for ($i = $fromCol; $i < $cols; $i++) {
                        $columnName[$i] = "column_" . $i;
                        if (isset($columnName[$i])) {
                            if (PHPExcel_Shared_Date::isDateTime($objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row))) { 
                                $tmp = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 

                                if (is_numeric($tmp)) { 
                                    $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'YYYY-MM-DD'); 
                                } else { 
                                    $key[$row][$i]['value'] = substr($tmp, 6, 4) . "-" . substr($tmp, 3, 2) . "-" . substr($tmp, 0, 2); 
                                } 
//                                $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'DD-MMM-YYYY'); 
                            } else { 
//                                $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                $check = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                if (substr($check, 0, 1) == "=") {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getCalculatedValue(); 
                                } else {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                }
                            }
                        }
                    }
                }

                $getColumnAName = true;
            } else {
                return 'FAIL|Template is wrong.';
            }
        }
        
        if ($getColumnAName) {
            $temporaryTable = '';
            $temporaryTableWarning = '';
            $temporaryTableDuplicate = '';
            $fieldNames = '';

            foreach ($columnName as $i => $names) {
                if (trim($names) != '') {
                    $temporaryTable .= ( ($temporaryTable == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableWarning .= ( ($temporaryTableWarning == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableDuplicate .= ( ($temporaryTableDuplicate == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $fieldNames .= ( ($fieldNames == '') ? '' : ', ') . "`" . trim($names) . "`";
                }
            }

            $tempTable = '`tmp_transaction_' . uniqid() . '`';
//            $temporaryTable = 'CREATE TEMPORARY TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableWarning = '`jb_sdw_' . uniqid() . '`';
//            $temporaryTableWarning = 'CREATE TEMPORARY TABLE ' . $tempTableWarning . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableWarning . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableDuplicate = '`jb_sdd_' . uniqid() . '`';
//            $temporaryTableDuplicate = 'CREATE TEMPORARY TABLE ' . $tempTableDuplicate . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableDuplicate . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
            $temporaryTable = 'CREATE TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';

//            return "0|". $temporaryTable;

            $result = $myDatabase->query($temporaryTable, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error create table '. $myDatabase->errorMessage;
            }

            $insertInto = '';
            foreach ($key as $row => $colData) {
                if ($colData[1] != null) {
                    $insertIntoCol = '';
                    foreach ($colData as $col => $colDatas) {
                        if (strpos($colDatas['value'], "NULL") !== false || $colDatas['value'] == '')
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "NULL";
                        else {
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "'". $colDatas['value'] ."'";
                        }
                    }
                    $insertInto .= ( ($insertInto == '') ? '' : ', ') . "(" . $insertIntoCol . ")";
//                die("INSERT INTO $temp_table ($fieldnames) VALUES " . $insertinto . ";");
                }
            }

            $insertIntoTemp = "INSERT INTO $tempTable ($fieldNames) VALUES " . $insertInto . ";";

            $result = $myDatabase->query($insertIntoTemp, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error insert table '. $myDatabase->errorMessage;
            }
//		}
//	}
//}

//            return 'OK|Table created.';
            
//            $insertIntoWarning = "INSERT INTO $tempTableWarning ($fieldNames) VALUES " . $insertInto . ";";
//
//            $resultWarning = $myDatabase->query($insertIntoWarning, MYSQLI_STORE_RESULT);
//            if($resultWarning === false) {
//                return 'FAIL|error insert warning table '. $myDatabase->errorMessage;
//            }
//            
//            $insertIntoDuplicate = "INSERT INTO $tempTableDuplicate ($fieldNames) VALUES " . $insertInto . ";";
//
//            $resultDuplicate = $myDatabase->query($insertIntoDuplicate, MYSQLI_STORE_RESULT);
//            if($resultDuplicate === false) {
//                return 'FAIL|error insert duplicate table '. $myDatabase->errorMessage;
//            }
            
//            return "0|". $temporaryTable;            
        
            $sqlSelect = "SELECT a.*, DATE_FORMAT(a.column_2, '%y') AS trans_year, COALESCE(a.column_15, 0) AS tarra FROM $tempTable a ORDER BY id ASC;";
            $resultSelect = $myDatabase->query($sqlSelect, MYSQLI_STORE_RESULT);
            $successRow = 0;
            $errorRow = 0;
            $warningRow = 0;
            $counterRow = 1;
            $errorMessage = '';
            $shipmentError = 0;
            $categoryError = 0;
            $rateError = 0;
            $currencyError = 0;
            $insuredError = 0;
            $countryFromError = 0;
            $countryToError = 0;
            $duplicateError = 0;
            $duplicateQuotation = '';
            $shipmentQuotation = '';
            $categoryQuotation = '';
            $rateQuotation = '';
            $currencyQuotation = '';
            $insuredQuotation = '';
            $countryFromQuotation = '';
            $countryToQuotation = '';
            
            date_default_timezone_set('Asia/Jakarta');

            $date = new DateTime();
            $currentDate = $date->format('d/m/Y H:i:s');
            
            $sqlStockpile = "SELECT * FROM stockpile WHERE stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sqlStockpile, MYSQLI_STORE_RESULT);
            $rowStockpile = $resultStockpile->fetch_object();
            $freightWeightRule = $rowStockpile->freight_weight_rule;
            $curahWeightRule = $rowStockpile->curah_weight_rule;
            $stockpileCode = $rowStockpile->stockpile_code;
            
            while($importedData = $resultSelect->fetch_object()) {
                if ($counterRow >= $readStartAtRow) {
                    $custTaxId = 'NULL';
                    $curahTaxId = 'NULL';
                    $ucTaxId = 'NULL';
                    $fcTaxId = 'NULL';
                    
                    if(strtoupper($importedData->column_12) == 'IN') {
                        // <editor-fold defaultstate="collapsed" desc="IN">
                        
                        // <editor-fold defaultstate="collapsed" desc="check vendor and supplier">
//                        if($importedData->column_9 != '0' || $importedData->column_9 != 'NONE' || $importedData->column_9 != '' || $importedData->column_9 != '-') {
//                            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_name) = UPPER('{$importedData->column_9}') LIMIT 1";
//                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                            if($result->num_rows == 1) {
//                                $row = $result->fetch_object();
//                                $vendorId = $row->vendor_id;
//                                $vendorCode = $row->vendor_code;
//                            } else {
//                                if($importedData->column_8 != '0' || $importedData->column_8 != 'NONE' || $importedData->column_8 != '' || $importedData->column_8 != '-') {
//                                    $vendorCode = strtoupper(substr($importedData->column_8, 2, 3)) ;
//                                } else {
//                                    $vendorCode = strtoupper(substr($importedData->column_9, 0, 3));
//                                }
//
//                                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, entry_by, entry_date) VALUES ("
//                                        . "'{$vendorCode}', '{$importedData->column_9}', "
//                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
//                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                                $vendorId = $myDatabase->insert_id;
//                            }
//                        }
                        
                        if($importedData->column_11 != '0' && strtoupper($importedData->column_11) != 'NONE' && $importedData->column_11 != '' && $importedData->column_11 != '-' && $importedData->column_11 != null) {
                            $sql = "SELECT * FROM `contract` WHERE UPPER(contract_no) = UPPER('{$importedData->column_11}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $vendorId = $row->vendor_id;
                            }
                        }
                        
                        if($importedData->column_10 != '0' && strtoupper($importedData->column_10) != 'NONE' && $importedData->column_10 != '' && $importedData->column_10 != '-' && $importedData->column_10 != null) {
                            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_name) = UPPER('{$importedData->column_10}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $supplierId = $row->vendor_id;
                            } else {
                                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, entry_by, entry_date) VALUES ("
                                        . "'". strtoupper(substr($importedData->column_10, 0, 3)) ."', '{$importedData->column_10}', "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $supplierId = $myDatabase->insert_id;
                            }
                        }
                        
//                        if($vendorId == "") {
//                            $vendorId = $supplierId;
//                        }
                        
                        if($supplierId == "") {
                            $supplierId = 'NULL';
                        }
                        
                        // </editor-fold>
                        
                        // <editor-fold defaultstate="collapsed" desc="check vehicle and unloading cost">
                        if($importedData->column_4 != '0' && strtoupper($importedData->column_4) != 'NONE' && $importedData->column_4 != '' && $importedData->column_4 != '-' && $importedData->column_4 != null) {
                            $sql = "SELECT * FROM `vehicle` WHERE UPPER(vehicle_name) = UPPER('{$importedData->column_4}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $vehicleId = $row->vehicle_id;
                            } else {
                                $sql = "INSERT INTO `vehicle` (vehicle_name, entry_by, entry_date) VALUES ("
                                        . "'{$importedData->column_4}', "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $vehicleId = $myDatabase->insert_id;
                            }
                        }
                        
                        if($importedData->column_32 != '0' && strtoupper($importedData->column_32) != 'NONE' && $importedData->column_32 != '' && $importedData->column_32 != '-' && $importedData->column_32 != null) {
                            $sql = "SELECT * FROM `labor` WHERE UPPER(labor_name) = UPPER('{$importedData->column_32}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $laborId = $row->labor_id;
                                $ucTaxId = $row->pph_tax_id;
                            } else {
								
                                $ppn = 0;
                                $pph = 0;
                                $ppnValue = 0;
                                $pphValue = 0;

                                if(strtoupper($importedData->column_33) == 'PPN') {
                                    $ppn = 1;
                                    $ppnValue = 10;
                                }

                                if($importedData->column_34 != '' || $importedData->column_34 != null) {
                                    $sqlPPh = "SELECT * FROM tax WHERE UPPER(tax_name) = UPPER('{$importedData->column_34}')";
                                    $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                                    if($resultPPh !== false && $resultPPh->num_rows == 1) {
                                        $rowPPh = $resultPPh->fetch_object();
                                        $pph = $rowPPh->tax_id;
                                        $pphValue = $rowPPh->tax_value;
                                    }
                                }
                                
                                $sql = "INSERT INTO `labor` (labor_name, labor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                                        . "'{$importedData->column_32}', '', '', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $laborId = $myDatabase->insert_id;
                                
                                $ucTaxId = $pph;
                            }
                        }
                        
                        if(($importedData->column_22 != '' && strtoupper($importedData->column_22) != 'NONE' && $importedData->column_22 != '0' && $importedData->column_22 != '-' && $importedData->column_22 != null) && $vehicleId != '') {
                            $sql = "SELECT * FROM unloading_cost WHERE vehicle_id = {$vehicleId} AND stockpile_id = {$stockpileId} AND price_converted = {$importedData->column_22} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $unloadingCostId = $row->unloading_cost_id;
                            } else {
                                $sql = "INSERT INTO `unloading_cost` (vehicle_id, stockpile_id, currency_id, exchange_rate, price, price_converted, entry_by, entry_date) VALUES ("
                                        . "{$vehicleId}, {$stockpileId}, 1, 1, {$importedData->column_22}, {$importedData->column_22}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $unloadingCostId = $myDatabase->insert_id;
                            }
                        } else {
                            $unloadingCostId = 'NULL';
                        }
                        
                        if($vehicleId == "") {
                            $unloadingCostId = 'NULL';
                        }
						if($laborId == "") {
                            $laborId = 'NULL';
                        }
                        
                        // </editor-fold>
                        
                        // <editor-fold defaultstate="collapsed" desc="check freight and freight cost">
                        if($importedData->column_6 != '0' && strtoupper($importedData->column_6) != 'NONE' && $importedData->column_6 != '' && $importedData->column_6 != '-' && $importedData->column_6 != null) {
                            $sql = "SELECT * FROM `freight` WHERE UPPER(freight_supplier) = UPPER('{$importedData->column_28}') AND UPPER(freight_code) = UPPER('{$importedData->column_29}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $freightId = $row->freight_id;
								$freightRule = $row->freight_rule;
                                $fcTaxId = $row->pph_tax_id;
                            } else {
								
                                $ppn = 0;
                                $pph = 0;
                                $ppnValue = 0;
                                $pphValue = 0;

                                if(strtoupper($importedData->column_30) == 'PPN') {
                                    $ppn = 1;
                                    $ppnValue = 10;
                                }

                                if($importedData->column_31 != '' || $importedData->column_31 != null) {
                                    $sqlPPh = "SELECT * FROM tax WHERE UPPER(tax_name) = UPPER('{$importedData->column_31}')";
                                    $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                                    if($resultPPh !== false && $resultPPh->num_rows == 1) {
                                        $rowPPh = $resultPPh->fetch_object();
                                        $pph = $rowPPh->tax_id;
                                        $pphValue = $rowPPh->tax_value;
                                    }
                                }
                                
                                $sql = "INSERT INTO `freight` (freight_code, freight_supplier, freight_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                                        . "'". strtoupper($importedData->column_29) ."', '{$importedData->column_28}', '', '', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $freightId = $myDatabase->insert_id;
                                
                                $fcTaxId = $pph;
                            }
                        }
                        
                        $freightQuantity = 0;
                        if(($importedData->column_21 != '' || $importedData->column_21 != '0' || $importedData->column_21 != '-' || $importedData->column_21 != null) && $freightId != '') {
                            // get freight weight
                            if($freightWeightRule == 0) {
                                if((float) $importedData->column_16 < (float) $importedData->column_13) {
                                    $freightQuantity = (float) $importedData->column_16;
                                } elseif((float) $importedData->column_16 > (float) $importedData->column_13) {
                                    $freightQuantity = (float) $importedData->column_13;
                                } else {
                                    $freightQuantity = (float) $importedData->column_13;
                                }
                            } elseif($freightWeightRule == 1) {
                                $freightQuantity = (float) $importedData->column_13;
                            } elseif($freightWeightRule == 2) {
                                $freightQuantity = (float) $importedData->column_16;
                            } else {
                                $freightQuantity = (float) $importedData->column_13;
                            }
                            
                            if($freightRule == 1){
							$freightPrice = (float) $importedData->column_21 / (float) $importedData->column_13;
							}else{
                            $freightPrice = (float) $importedData->column_21 / $freightQuantity;
							}
                            
                            $sql = "SELECT * FROM freight_cost WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId} AND vendor_id = {$vendorId} AND price_converted = {$freightPrice} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $freightCostId = $row->freight_cost_id;
                            } else {
                                $sql = "INSERT INTO `freight_cost` (freight_id, stockpile_id, vendor_id, currency_id, exchange_rate, price, price_converted, entry_by, entry_date) VALUES ("
                                        . "{$freightId}, {$stockpileId}, {$vendorId}, 1, 1, {$freightPrice}, {$freightPrice}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $freightCostId = $myDatabase->insert_id;
                            }
                        }
                        
                        if($freightId == '') {
                            $freightCostId = 'NULL';
                        }
                        
                        // </editor-fold>
                        
                        //curah
                        $boolNewContract = false;
                        $boolContinue = false;
                        $boolUpdateCurah = false;
                        if(strtoupper($importedData->column_24) == 'CURAH') {
                            $contractType = 'C';
                            
                            $totalSend = (float) $importedData->column_13;
                            $totalNetto = (float) $importedData->column_16;
                            
                            $sqlContract = "SELECT con.*, v.pph_tax_id 
                                    FROM contract con 
                                    INNER JOIN vendor v
                                        ON v.vendor_id = con.vendor_id
                                    WHERE contract_type = '{$contractType}' AND contract_no = '{$importedData->column_11}'";
                            $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);
                            if($resultContract->num_rows == 1) {
                                $rowContract = $resultContract->fetch_object();
                                $contractId = $rowContract->contract_id;
                                $unitPrice = $rowContract->price_converted;
                                $curahTaxId = $rowContract->pph_tax_id;

                                $sqlStockpileContract = "SELECT * FROM stockpile_contract WHERE contract_id = {$contractId} AND stockpile_id = {$stockpileId}";
                                $resultStockpileContract = $myDatabase->query($sqlStockpileContract, MYSQLI_STORE_RESULT);
                                if($resultStockpileContract->num_rows == 1) {
                                    $rowStockpileContract = $resultStockpileContract->fetch_object();
                                    $stockpileContractId = $rowStockpileContract->stockpile_contract_id;
                                    $currentQuantity = $rowStockpileContract->quantity;
                                    $boolContinue = true;
                                    $boolUpdateCurah = true;
                                } 
                            } 
                            
//                            $boolContinue = true;
//                            $boolNewContract = true;
                        } elseif(strtoupper($importedData->column_24) == 'PKS') {
                            $contractType = 'P';
                            
                            if(($importedData->column_8 != '' || $importedData->column_8 != '0' || $importedData->column_8 != '-' && $importedData->column_8 != 'NONE' && $importedData->column_8 != null) &&
                                    $importedData->column_11 != '' || $importedData->column_11 != '0' || $importedData->column_11 != '-' && $importedData->column_11 != 'NONE' && $importedData->column_11 != null) {
                                $sqlContract = "SELECT * FROM contract WHERE contract_type = '{$contractType}' AND contract_no = '{$importedData->column_11}'";
                                $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);
                                if($resultContract->num_rows == 1) {
                                    $rowContract = $resultContract->fetch_object();
                                    $contractId = $rowContract->contract_id;
                                    $unitPrice = $rowContract->price_converted;
                                    
                                    $sqlStockpileContract = "SELECT * FROM stockpile_contract WHERE contract_id = {$contractId} AND stockpile_id = {$stockpileId}";
                                    $resultStockpileContract = $myDatabase->query($sqlStockpileContract, MYSQLI_STORE_RESULT);
                                    if($resultStockpileContract->num_rows == 1) {
                                        $rowStockpileContract = $resultStockpileContract->fetch_object();
                                        $stockpileContractId = $rowStockpileContract->stockpile_contract_id;
                                        $boolContinue = true;
                                    } 
                                } 
//                                else {
//                                    $sqlTemp = "SELECT SUM(column_13) AS total_send, SUM(column_16) AS total_netto FROM {$tempTable} WHERE column_8 = '{$importedData->column_8}' "
//                                            . "AND column_11 = '{$importedData->column_11}' AND UPPER(column_12) = UPPER('{$importedData->column_12}')";
//                                    $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
//                                    $rowTemp = $resultTemp->fetch_object();
//                                    
//                                    $totalSend = $rowTemp->total_send;
//                                    $totalNetto = $rowTemp->total_netto;
//                                    $boolNewContract = true;
//                                }
                            } else {
                                $totalSend = (float) $importedData->column_13;
                                $totalNetto = (float) $importedData->column_16;
//                                $boolContinue = true;
//                                $boolNewContract = true;
                            }
                        }
                        
//                        $boolContinue = true;
                        if($boolNewContract) {
                            // <editor-fold defaultstate="collapsed" desc="create new contract for curah">
                            
//                            $checkPoNo = $contractType .'-'. $vendorCode .'-'. $importedData->trans_year;
//                            $sql = "SELECT po_no FROM contract WHERE po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
//                            $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                            if($resultPo->num_rows == 1) {
//                                $rowPo = $resultPo->fetch_object();
//                                $splitPoNo = explode('-', $rowPo->po_no);
//                                $nextPoNo = ((float) $splitPoNo[3]) + 1;
//                                $poNo = $checkPoNo .'-'. $nextPoNo;
//                            } else {
//                                $poNo = $checkPoNo .'-1';
//                            }
//                            
//                            if($totalNetto < $totalSend) {
//                                $quantity = $totalNetto;
//                            } elseif($totalNetto > $totalSend) {
//                                $quantity = $totalSend;
//                            } else {
//                                $quantity = $totalSend;
//                            }
//                            
//                            $sql = "INSERT INTO contract (contract_type, po_no, contract_no, vendor_id, currency_id, exchange_rate, "
//                                    . "price, price_converted, quantity, entry_by, entry_date) VALUES ("
//                                    . "'{$contractType}', '{$poNo}', '{$importedData->column_11}', {$vendorId}, 1, 1, "
//                                    . "{$importedData->column_27}, {$importedData->column_27}, {$quantity}, "
//                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
//                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                            
//                            if($result === false) {
//                                $boolContinue = false;
//                            } else {
//                                $contractId = $myDatabase->insert_id;
//                                $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
//                                        . "{$stockpileId}, {$contractId}, {$quantity}, "
//                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
//                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                                if($result === false) {
//                                    $boolContinue = false;
//                                } else {
//                                    $stockpileContractId = $myDatabase->insert_id;
//                                }
//                            }
                            
                            // </editor-fold>
                        }
                        
                        if($boolContinue) {
                            $shrink = 0;
                            if($contractType == 'P') {
                                if((float) $importedData->column_16 < (float) $importedData->column_13) {
                                    $quantity = (float) $importedData->column_16;
                                    $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;
                                } elseif((float) $importedData->column_16 > (float) $importedData->column_13) {
                                    $quantity = (float) $importedData->column_13;
                                    $shrink = 0;
                                } else {
                                    $quantity = (float) $importedData->column_13;
                                }
                            } elseif($contractType == 'C') {
                                if($curahWeightRule == 0) {
                                    if((float) $importedData->column_16 < (float) $importedData->column_13) {
                                        $quantity = (float) $importedData->column_16;
                                        $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;
                                    } elseif((float) $importedData->column_16 > (float) $importedData->column_13) {
                                        $quantity = (float) $importedData->column_13;
                                        $shrink = 0;
                                    } else {
                                        $quantity = (float) $importedData->column_13;
                                    }
                                } elseif($curahWeightRule == 1) {
                                    $quantity = (float) $importedData->column_13;
                                    $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;
                                } elseif($curahWeightRule == 2) {
                                    $quantity = (float) $importedData->column_16;
                                    $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;
                                } else {
                                    $quantity = (float) $importedData->column_13;
                                }
                            }

                            // get next slip no
							if($importedData->column_2 <= '2016-12-31'){
                            	$checkSlipNo = $stockpileCode;
							}else{
								$checkSlipNo = $stockpileCode .'-'. $importedData->trans_year;
							}
            //                $sql = "SELECT LPAD(COUNT(1) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ";
            //                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE company_id = {$_SESSION['companyId']} AND slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($resultSlip->num_rows == 0) {
                                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM dual";
                                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                            $rowSlipNo = $resultSlip->fetch_object();
                            $nextSlipNo = $rowSlipNo->next_id;
                            $slipNo = $checkSlipNo .'-'. $nextSlipNo;
                            
                            // get freight cost
                            if($freightCostId == 'NULL') {
                                $freightPrice = 0;
                            } 

                            // get unloading cost
                            
                            if($unloadingCostId == 'NULL') {
                                $unloadingPrice = 0;
                            } else {
                                $unloadingPrice = $importedData->column_22;
                            }
                            
//                            $unitPrice = $importedData->column_27;

                            // get inventory value
                            $inventoryValue = ($freightQuantity * $freightPrice) + $unloadingPrice + ($quantity * $unitPrice);

                            // insert into transaction
                            $sql = "INSERT INTO `transaction` (slip_no, stockpile_contract_id, transaction_date, loading_date, vehicle_no, labor_id, unloading_cost_id, "
                                    . "unloading_date, freight_cost_id, permit_no, transaction_type, vendor_id, send_weight, bruto_weight, tarra_weight, "
                                    . "netto_weight, notes, driver, freight_quantity, quantity, shrink, freight_price, unloading_price, unit_price, "
                                    . "inventory_value, block, uc_tax_id, fc_tax_id, curah_tax_id, entry_by, entry_date) "
                                    . "VALUES ('{$slipNo}', {$stockpileContractId}, STR_TO_DATE('{$importedData->column_2}', '%Y-%m-%d'), STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), "
                                    . "'{$importedData->column_3}', {$laborId}, {$unloadingCostId}, STR_TO_DATE('{$importedData->column_2}', '%Y-%m-%d'), {$freightCostId}, '{$importedData->column_7}', "
                                    . "1, {$supplierId}, {$importedData->column_13}, {$importedData->column_14}, {$importedData->tarra}, {$importedData->column_16}, '{$importedData->column_17}', "
                                    . "'{$importedData->column_18}', {$freightQuantity}, {$quantity}, {$shrink}, {$freightPrice}, {$unloadingPrice}, {$unitPrice}, {$inventoryValue}, 'NONE', "
                                    . "{$ucTaxId}, {$fcTaxId}, {$curahTaxId}, "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            
                            if($result !== false) {
                                $successRow = $successRow + 1;
                                
                                $transactionId = $myDatabase->insert_id;
                                
                                if($boolUpdateCurah) {
                                    /*$newQuantity = (float) $currentQuantity + (float) $totalSend;
                                    $sql = "UPDATE stockpile_contract SET quantity = {$newQuantity} WHERE stockpile_contract_id = {$stockpileContractId}";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    
                                    $sql = "UPDATE contract SET quantity = (SELECT SUM(quantity) FROM stockpile_contract_id WHERE contract_id = {$contractId}) WHERE contract_id = {$contractId}";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);*/
                                }
                                
                                $sql = "DELETE FROM {$tempTable} WHERE column_0 = {$importedData->column_0}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                               insertGeneralLedger($myDatabase, 'NOTA TIMBANG', "NULL", "NULL", "NULL", $transactionId);
                            } else {
                                $errorRow = $errorRow + 1;
                            }
                        } else {
                            $errorRow = $errorRow + 1;
                        }
                        
                        // </editor-fold>
                    } elseif(strtoupper($importedData->column_12) == 'OUT') {
                        // <editor-fold defaultstate="collapsed" desc="OUT">
                        if(($importedData->column_10 != '0' || $importedData->column_10 != 'NONE' || $importedData->column_10 != '' || $importedData->column_10 != '-') &&
                                ($importedData->column_27 != '0' || $importedData->column_27 != 'NONE' || $importedData->column_27 != '' || $importedData->column_27 != '-')) {
                            $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$importedData->column_10}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $customerId = $row->customer_id;
                            } else {
                                $sql = "INSERT INTO `customer` (customer_name, entry_by, entry_date) VALUES ("
                                        . "'{$importedData->column_10}', "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $customerId = $myDatabase->insert_id;
                            }
                        }
                        
                        if($customerId != '') {
							
							
                           // $salesNo = strtoupper(str_replace(' ', '', substr($importedData->column_10, 0, 5)));
                            
							
                            $sql = "SELECT * FROM sales WHERE  customer_id = {$customerId} AND stockpile_id = {$stockpileId} "
                                    . "AND currency_id = 1 AND price = {$importedData->column_27} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $salesId = $row->sales_id;
                                $salesBalance = $row->quantity;
                            } else {
                                $sqlTemp = "SELECT count(1) AS total_shipment FROM {$tempTable} WHERE UPPER(column_10) = UPPER('{$importedData->column_10}') "
                                        . "AND UPPER(column_12) = UPPER('{$importedData->column_12}') AND column_27 = {$importedData->column_27}";
                                $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
                                $rowTemp = $resultTemp->fetch_object();
                                $totalShipment = $rowTemp->total_shipment;
                                
                                $sqlTemp = "SELECT MIN(column_5) AS sales_date, SUM(column_13) AS total_quantity FROM {$tempTable} WHERE UPPER(column_10) = UPPER('{$importedData->column_10}') "
                                        . "AND UPPER(column_12) = UPPER('{$importedData->column_12}') AND column_27 = {$importedData->column_27}";
                                $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
                                $rowTemp = $resultTemp->fetch_object();
                                $salesDate = $rowTemp->sales_date;
                                $totalQuantity = $rowTemp->total_quantity;
                                $salesBalance = $totalQuantity;
                                
								
                                $sql = "INSERT INTO sales (sales_no, sales_date, sales_type, customer_id, stockpile_id, currency_id, exchange_rate, "
                                        . "price, price_converted, quantity, total_shipment, entry_by, entry_date) VALUES ("
                                        . "'{$salesNo}', STR_TO_DATE('{$salesDate}', '%Y-%m-%d'), 1, {$customerId}, {$stockpileId}, 1, 1, "
                                        . "{$importedData->column_27}, {$importedData->column_27}, {$totalQuantity}, {$totalShipment}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                                $boolContinue = true;
                                if($result !== false) {
                                    $salesId = $myDatabase->insert_id;
                                    
                                    for($i = 1; $i <= $totalShipment; $i++) {
                                        $shipmentCode = $salesNo .'-'. $i;

                                        $sql = "INSERT INTO `shipment` (shipment_code, sales_id, entry_by, entry_date) VALUES ("
                                                . "'{$shipmentCode}', {$salesId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    }
                                } else {
                                    $boolContinue = false;
                                }
                            }
                            
                            if($boolContinue) {
                                $sql = "SELECT shipment_id FROM shipment WHERE shipment_code LIKE '{$salesNo}%' AND shipment_status = 0 ORDER BY shipment_code ASC LIMIT 1";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if($result->num_rows == 1) {
                                    $row = $result->fetch_object();
                                    $shipmentId = $row->shipment_id;
                                    
                                    $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;

                                    // get next slip no
                                    //$checkSlipNo = $stockpileCode /*.'-'. $importedData->trans_year*/;
								if($importedData->column_2 <= '2016-12-31'){
                            		$checkSlipNo = $stockpileCode;
								}else{
									$checkSlipNo = $stockpileCode .'-'. $importedData->trans_year;
								}
                                    $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultSlip->num_rows == 0) {
                                        $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM transaction LIMIT 1";
                                        $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    }

                                    $rowSlipNo = $resultSlip->fetch_object();
                                    $nextSlipNo = $rowSlipNo->next_id;
                                    $slipNo = $checkSlipNo .'-'. $nextSlipNo;
                                    
                                    $sql = "INSERT INTO `transaction` (slip_no, product_id, shipment_id, transaction_date, vehicle_no, transaction_type, "
                                            . "send_weight, quantity, shrink, entry_by, entry_date) VALUES ('{$slipNo}', 1, "
                                            . "{$shipmentId}, STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), '{$importedData->column_9}', 2, "
                                            . "{$importedData->column_13}, {$importedData->column_16}, {$shrink}, "
                                            . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    
                                    if($result !== false) {
                                        $transactionId = $myDatabase->insert_id;

                                        // insert into delivery
                                        $sql = "SELECT t.* 
                                                FROM transaction t 
                                                WHERE t.stockpile_contract_id IN (
                                                    SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                                                ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                                                ORDER BY t.slip_no ASC, t.unloading_date ASC";
                                        $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        $totalInventoryValue = 0;
                                        if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                                            $balanceLeft = (float) $importedData->column_13;
                                            while($rowDelivery = $resultDelivery->fetch_object()) {
                                                if($balanceLeft > 0) {
                                                    if($rowDelivery->delivery_status == 0) {
                                                        if($balanceLeft >= $rowDelivery->quantity) {
                                                            $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                                            $quantityTaken = $rowDelivery->quantity;
                                                            $percentTaken = 1;
                                                            $deliveryStatus = 1;
                                                        } elseif($balanceLeft < $rowDelivery->quantity) {
                                                            $quantityTaken = $balanceLeft;
                                                            $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                                            $balanceLeft = 0;
                                                            $deliveryStatus = 2;
                                                        }
                                                    } elseif($rowDelivery->delivery_status == 2) {
                                                        $totalTaken = 0;
                                                        $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                                        $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                                        if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                                            $rowTaken = $resultTaken->fetch_object();
                                                            $totalTaken = $rowTaken->total_taken;
                                                        }

                                                        if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                                            $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                                            $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                            $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                                            $deliveryStatus = 1;
                                                        } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                                            $quantityTaken = $balanceLeft;
                                                            $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                                            $balanceLeft = 0;
                                                            $deliveryStatus = 2;
                                                        }
                                                    } 

                                                    $deliveryValue = $quantityTaken * (float) $importedData->column_27;
                                                    $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                                    $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                                    $percentTaken = $percentTaken * 100;

                                                    $sql = "INSERT INTO delivery (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                                            . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), {$percentTaken}, "
                                                            . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                                    $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                                }
                                            }
                                        }

                                        //$updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                                        $updateInventoryValue = $totalInventoryValue;

                                        $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                        // update shipment
                                        $cogsAmount = $updateInventoryValue;
                                        $invoiceAmount = (float) $importedData->column_16 * (float) $importedData->column_27;
                                        $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), "
                                                . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$importedData->column_16}, shipment_status = 1 "
                                                . "WHERE shipment_id = {$shipmentId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                        $sql = "SELECT COALESCE(SUM(quantity), 0) AS delivered_balance FROM `transaction` 
                                                WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                                                AND transaction_type = 2
                                                AND transaction_id <> {$transactionId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        $row = $result->fetch_object();
                                        $deliveredBalance = $row->delivered_balance;
                                        
                                        // update sales
                                        $boolUpdateSales = false;
                                        if((float) $importedData->column_13 == ($salesBalance - $deliveredBalance)) {
                                            $salesStatus = 1;
                                            $boolUpdateSales = true;
                                        } elseif((float) $importedData->column_13 < ($salesBalance - $deliveredBalance)) {
                                            $salesStatus = 2;
                                            $boolUpdateSales = true;
                                        }

                                        if($boolUpdateSales) {
                                            $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        }
                                        
                                        $successRow = $successRow + 1;
                                    } else {
                                        $errorRow = $errorRow + 1;
                                    }
                                } else {
                                    $errorRow = $errorRow + 1;
                                }
                            }
                        }
                        
                        // </editor-fold>
                    }
                    
                }
                $counterRow++;
            } 
            
            if(($successRow+$warningRow) == ($counterRow-1) && $errorRow == 0) {
                $result = $myDatabase->query("COMMIT", MYSQLI_STORE_RESULT);
                
                $sql = "DROP TABLE {$tempTable}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                

                return "OK|". $successRow ." Row(s) import successfully, ". $warningRow ." Row(s) failed with warning. ". $errorMessage;
            } else {
                $result = $myDatabase->query("ROLLBACK", MYSQLI_STORE_RESULT);

                return "FAIL|Import failed. ". $errorRow ." Rows(s) can not be imported. Please contact administrator. ";
            }
        }
    } else {
        return 'FAIL|File not exists.';
    } 
    // </editor-fold>
}
function excelImportGeneralVendor($myDatabase, $fileName = "", $stockpileId = 0, $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1) {
    // <editor-fold defaultstate="collapsed" desc="function excelImportTransaction($myDatabase, $fileName = "", $stockpileId = 0, $vendorId = 0, $stockpileContractId = 0, $onSheet = 0, $fromRow = 1, $toRow = -1, $fromCol = 0, $toCol = -1)">
    if (file_exists(realpath($fileName))) {
        $fileNameRealPath = realpath($fileName);
        
        require_once './assets/extensions/PHPExcel.php';
        require_once './assets/extensions/PHPExcel/IOFactory.php';
        require_once './assets/extensions/PHPExcel/Cell/AdvancedValueBinder.php';

        $objReader = PHPExcel_IOFactory::createReader('Excel5');

        $objPHPExcel = $objReader->load($fileNameRealPath);
        
        $readStartAtRow = 1; 
        $totalCols = 14;

        $result = $myDatabase->query("START TRANSACTION", MYSQLI_STORE_RESULT);
        
//        $sheetCount = $objPHPExcel->getSheetCount();
        $sheetCount = 1;
        for ($onSheet; $onSheet < $sheetCount; $onSheet++) {
            $objPHPExcel->setActiveSheetIndex($onSheet);
            $objWorksheet = $objPHPExcel->getActiveSheet();

            $rows = $objWorksheet->getHighestRow();
            $cols = PHPExcel_Cell::columnIndexFromString($objWorksheet->getHighestColumn());
            if ($toRow == -1)
                $toRow = $rows;
            if ($toCol == -1)
                $toCol = $cols;
            
            $key = array();
            $columnName = array();
            $getColumnAName = false;
            
            if($toCol == $totalCols) {
                for ($row = $fromRow; $row <= $rows; $row++) {
                    for ($i = $fromCol; $i < $cols; $i++) {
                        $columnName[$i] = "column_" . $i;
                        if (isset($columnName[$i])) {
                            if (PHPExcel_Shared_Date::isDateTime($objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row))) { 
                                $tmp = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 

                                if (is_numeric($tmp)) { 
                                    $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'YYYY-MM-DD'); 
                                } else { 
                                    $key[$row][$i]['value'] = substr($tmp, 6, 4) . "-" . substr($tmp, 3, 2) . "-" . substr($tmp, 0, 2); 
                                } 
//                                $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'DD-MMM-YYYY'); 
                            } else { 
//                                $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                $check = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                if (substr($check, 0, 1) == "=") {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getCalculatedValue(); 
                                } else {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                }
                            }
                        }
                    }
                }

                $getColumnAName = true;
            } else {
                return 'FAIL|Template is wrong.';
            }
        }
        
        if ($getColumnAName) {
            $temporaryTable = '';
            $temporaryTableWarning = '';
            $temporaryTableDuplicate = '';
            $fieldNames = '';

            foreach ($columnName as $i => $names) {
                if (trim($names) != '') {
                    $temporaryTable .= ( ($temporaryTable == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableWarning .= ( ($temporaryTableWarning == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableDuplicate .= ( ($temporaryTableDuplicate == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $fieldNames .= ( ($fieldNames == '') ? '' : ', ') . "`" . trim($names) . "`";
                }
            }

            $tempTable = '`tmp_general_vendor_' . uniqid() . '`';
//            $temporaryTable = 'CREATE TEMPORARY TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableWarning = '`jb_sdw_' . uniqid() . '`';
//            $temporaryTableWarning = 'CREATE TEMPORARY TABLE ' . $tempTableWarning . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableWarning . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableDuplicate = '`jb_sdd_' . uniqid() . '`';
//            $temporaryTableDuplicate = 'CREATE TEMPORARY TABLE ' . $tempTableDuplicate . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableDuplicate . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
            $temporaryTable = 'CREATE TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';

//            return "0|". $temporaryTable;

            $result = $myDatabase->query($temporaryTable, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error create table '. $myDatabase->errorMessage;
            }

            $insertInto = '';
            foreach ($key as $row => $colData) {
                if ($colData[1] != null) {
                    $insertIntoCol = '';
                    foreach ($colData as $col => $colDatas) {
                        if (strpos($colDatas['value'], "NULL") !== false || $colDatas['value'] == '')
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "NULL";
                        else {
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "'". $colDatas['value'] ."'";
                        }
                    }
                    $insertInto .= ( ($insertInto == '') ? '' : ', ') . "(" . $insertIntoCol . ")";
//                die("INSERT INTO $temp_table ($fieldnames) VALUES " . $insertinto . ";");
                }
            }

            $insertIntoTemp = "INSERT INTO $tempTable ($fieldNames) VALUES " . $insertInto . ";";

            $result = $myDatabase->query($insertIntoTemp, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error insert table '. $myDatabase->errorMessage;
            }
//		}
//	}
//}

//            return 'OK|Table created.';
            
//            $insertIntoWarning = "INSERT INTO $tempTableWarning ($fieldNames) VALUES " . $insertInto . ";";
//
//            $resultWarning = $myDatabase->query($insertIntoWarning, MYSQLI_STORE_RESULT);
//            if($resultWarning === false) {
//                return 'FAIL|error insert warning table '. $myDatabase->errorMessage;
//            }
//            
//            $insertIntoDuplicate = "INSERT INTO $tempTableDuplicate ($fieldNames) VALUES " . $insertInto . ";";
//
//            $resultDuplicate = $myDatabase->query($insertIntoDuplicate, MYSQLI_STORE_RESULT);
//            if($resultDuplicate === false) {
//                return 'FAIL|error insert duplicate table '. $myDatabase->errorMessage;
//            }
            
//            return "0|". $temporaryTable;            
        
            $sqlSelect = "SELECT a.* FROM $tempTable a ORDER BY id ASC;";
            $resultSelect = $myDatabase->query($sqlSelect, MYSQLI_STORE_RESULT);
            $successRow = 0;
            $errorRow = 0;
            $warningRow = 0;
            $counterRow = 1;
            $errorMessage = '';
            $shipmentError = 0;
            $categoryError = 0;
            $rateError = 0;
            $currencyError = 0;
            $insuredError = 0;
            $countryFromError = 0;
            $countryToError = 0;
            $duplicateError = 0;
            $duplicateQuotation = '';
            $shipmentQuotation = '';
            $categoryQuotation = '';
            $rateQuotation = '';
            $currencyQuotation = '';
            $insuredQuotation = '';
            $countryFromQuotation = '';
            $countryToQuotation = '';
            
            date_default_timezone_set('Asia/Jakarta');

            $date = new DateTime();
            $currentDate = $date->format('d/m/Y H:i:s');
            
            $sqlStockpile = "SELECT * FROM stockpile WHERE stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sqlStockpile, MYSQLI_STORE_RESULT);
            $rowStockpile = $resultStockpile->fetch_object();
            //$freightWeightRule = $rowStockpile->freight_weight_rule;
            //$curahWeightRule = $rowStockpile->curah_weight_rule;
            $stockpileCode = $rowStockpile->stockpile_code;
			$stockpileId = $rowStockpile->stockpile_id;
            
            while($importedData = $resultSelect->fetch_object()) {
                if ($counterRow >= $readStartAtRow) {
                    $generalVendorName = $importedData->column_2;
					$generalVendorAddress = 'NULL';
                    $npwp = 'NULL';
                    $npwpName = 'NULL';
					$npwpAddress = 'NULL';
                    $bankName = 'NULL';
					$branch = 'NULL';
					$accountNo = 'NULL';
					$beneficiary = 'NULL';
					$swiftCode	 = 'NULL';
					$ppnTaxId = 0;
					$pphTaxId = 0;
					$ppnTax = 0;
					$pphTax = 0;
                    
                   
					if($importedData->column_3 != '0' && strtoupper($importedData->column_3) != 'NONE' && $importedData->column_3 != '' && $importedData->column_3 != '-' && $importedData->column_3 != null) {
						$accountNo = $importedData->column_3;
					}
					if($importedData->column_4 != '0' && strtoupper($importedData->column_4) != 'NONE' && $importedData->column_4 != '' && $importedData->column_4 != '-' && $importedData->column_4 != null) {
						$generalVendorAddress = $importedData->column_4;
					}
					if($importedData->column_5 != '0' && strtoupper($importedData->column_5) != 'NONE' && $importedData->column_5 != '' && $importedData->column_5 != '-' && $importedData->column_5 != null) {
						$beneficiary = $importedData->column_5;
					}
					if($importedData->column_6 != '0' && strtoupper($importedData->column_6) != 'NONE' && $importedData->column_6 != '' && $importedData->column_6 != '-' && $importedData->column_6 != null) {
						$bankName = $importedData->column_6;
					}
					if($importedData->column_7 != '0' && strtoupper($importedData->column_7) != 'NONE' && $importedData->column_7 != '' && $importedData->column_7 != '-' && $importedData->column_7 != null) {
						$branch = $importedData->column_7;
					}
					if($importedData->column_8 != '0' && strtoupper($importedData->column_8) != 'NONE' && $importedData->column_8 != '' && $importedData->column_8 != '-' && $importedData->column_8 != null) {
						$swiftCode = $importedData->column_8;
					}
					if($importedData->column_9 != '0' && strtoupper($importedData->column_9) != 'NONE' && $importedData->column_9 != '' && $importedData->column_9 != '-' && $importedData->column_9 != null) {
						$npwp = $importedData->column_9;
					}
					if($importedData->column_10 != '0' && strtoupper($importedData->column_10) != 'NONE' && $importedData->column_10 != '' && $importedData->column_10 != '-' && $importedData->column_10 != null) {
						$npwpName = $importedData->column_10;
					}
					if($importedData->column_11 != '0' && strtoupper($importedData->column_11) != 'NONE' && $importedData->column_11 != '' && $importedData->column_11 != '-' && $importedData->column_11 != null) {
						$npwpAddress = $importedData->column_11;
					}
				
                        
                     if($importedData->column_12 != '0' && strtoupper($importedData->column_12) != 'NONE' && $importedData->column_12 != '' && $importedData->column_12 != '-' && $importedData->column_12 != null) {
                            $sql = "SELECT * FROM `tax` WHERE UPPER(tax_name) = UPPER('{$importedData->column_12}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $ppnTaxId = $row->tax_id;
								$ppnTax = $row->tax_value;
							}
                        }
					
					if($importedData->column_13 != '0' && strtoupper($importedData->column_13) != 'NONE' && $importedData->column_13 != '' && $importedData->column_13 != '-' && $importedData->column_13 != null) {
                            $sql = "SELECT * FROM `tax` WHERE UPPER(tax_name) = UPPER('{$importedData->column_13}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $pphTaxId = $row->tax_id;
								$pphTax = $row->tax_value;
                            }
                        }
                        

                            // insert into transaction
                            $sql = "INSERT INTO `general_vendor` (general_vendor_name, general_vendor_address, npwp, npwp_name, npwp_address, bank_name, branch, account_no, beneficiary, swift_code, ppn_tax_id, pph_tax_id, ppn, pph, stockpile_id, active, entry_by, entry_date)
                                    VALUES ('{$generalVendorName}', '{$generalVendorAddress}', '{$npwp}', '{$npwpName}', '{$npwpAddress}', '{$bankName}', '{$branch}', '{$accountNo}', '{$beneficiary}', '{$swiftCode}', '{$ppnTaxId}', '{$pphTaxId}', '{$ppnTax}', '{$pphTax}', {$stockpileId}, 1, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            
                            if($result !== false) {
                                $successRow = $successRow + 1;
                                                       
                                
                                $sql = "DELETE FROM {$tempTable} WHERE column_0 = {$importedData->column_0}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                              
                            } else {
                                $errorRow = $errorRow + 1;
                            }
                        
                        
                        // </editor-fold>
                     
                    
                }
                $counterRow++;
            } 
            
            if(($successRow+$warningRow) == ($counterRow-1) && $errorRow == 0) {
                $result = $myDatabase->query("COMMIT", MYSQLI_STORE_RESULT);
                
                $sql = "DROP TABLE {$tempTable}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                

                return "OK|". $successRow ." Row(s) import successfully, ". $warningRow ." Row(s) failed with warning. ". $errorMessage;
            } else {
                $result = $myDatabase->query("ROLLBACK", MYSQLI_STORE_RESULT);
				echo $sql;
                return "FAIL|Import failed. ". $errorRow ." Rows(s) can not be imported. Please contact administrator. ";
            }
        }
    } else {
        return 'FAIL|File not exists.';
    } 
    // </editor-fold>
}
function excelImportJurnal($myDatabase, $fileName = "", $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1) {
   
    if (file_exists(realpath($fileName))) {
        $fileNameRealPath = realpath($fileName);
        
        require_once './assets/extensions/PHPExcel.php';
        require_once './assets/extensions/PHPExcel/IOFactory.php';
        require_once './assets/extensions/PHPExcel/Cell/AdvancedValueBinder.php';

        $objReader = PHPExcel_IOFactory::createReader('Excel5');

        $objPHPExcel = $objReader->load($fileNameRealPath);
        
        $readStartAtRow = 1; 
        $totalCols = 16;

        $result = $myDatabase->query("START JURNAL", MYSQLI_STORE_RESULT);
        
//        $sheetCount = $objPHPExcel->getSheetCount();
        $sheetCount = 1;
        for ($onSheet; $onSheet < $sheetCount; $onSheet++) {
            $objPHPExcel->setActiveSheetIndex($onSheet);
            $objWorksheet = $objPHPExcel->getActiveSheet();

            $rows = $objWorksheet->getHighestRow();
            $cols = PHPExcel_Cell::columnIndexFromString($objWorksheet->getHighestColumn());
            if ($toRow == -1)
                $toRow = $rows;
            if ($toCol == -1)
                $toCol = $cols;
            
            $key = array();
            $columnName = array();
            $getColumnAName = false;
            
            if($toCol == $totalCols) {
                for ($row = $fromRow; $row <= $rows; $row++) {
                    for ($i = $fromCol; $i < $cols; $i++) {
                        $columnName[$i] = "column_" . $i;
                        if (isset($columnName[$i])) {
                            if (PHPExcel_Shared_Date::isDateTime($objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row))) { 
                                $tmp = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 

                                if (is_numeric($tmp)) { 
                                    $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'YYYY-MM-DD'); 
                                } else { 
                                    $key[$row][$i]['value'] = substr($tmp, 6, 4) . "-" . substr($tmp, 3, 2) . "-" . substr($tmp, 0, 2); 
                                } 
//                                $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'DD-MMM-YYYY'); 
                            } else { 
//                                $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                $check = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                if (substr($check, 0, 1) == "=") {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getCalculatedValue(); 
                                } else {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                }
                            }
                        }
                    }
                }

                $getColumnAName = true;
            } else {
                return 'FAIL|Template is wrong.';
            }
        }
        
        if ($getColumnAName) {
            $temporaryTable = '';
            $temporaryTableWarning = '';
            $temporaryTableDuplicate = '';
            $fieldNames = '';

            foreach ($columnName as $i => $names) {
                if (trim($names) != '') {
                    $temporaryTable .= ( ($temporaryTable == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableWarning .= ( ($temporaryTableWarning == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableDuplicate .= ( ($temporaryTableDuplicate == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $fieldNames .= ( ($fieldNames == '') ? '' : ', ') . "`" . trim($names) . "`";
                }
            }

            $tempTable = '`tmp_jurnal_' . uniqid() . '`';
//            $temporaryTable = 'CREATE TEMPORARY TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableWarning = '`jb_sdw_' . uniqid() . '`';
//            $temporaryTableWarning = 'CREATE TEMPORARY TABLE ' . $tempTableWarning . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableWarning . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableDuplicate = '`jb_sdd_' . uniqid() . '`';
//            $temporaryTableDuplicate = 'CREATE TEMPORARY TABLE ' . $tempTableDuplicate . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableDuplicate . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
            $temporaryTable = 'CREATE TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';

//            return "0|". $temporaryTable;

            $result = $myDatabase->query($temporaryTable, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error create table '. $myDatabase->errorMessage;
            }

            $insertInto = '';
            foreach ($key as $row => $colData) {
                if ($colData[1] != null) {
                    $insertIntoCol = '';
                    foreach ($colData as $col => $colDatas) {
                        if (strpos($colDatas['value'], "NULL") !== false || $colDatas['value'] == '')
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "NULL";
                        else {
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "'". $colDatas['value'] ."'";
                        }
                    }
                    $insertInto .= ( ($insertInto == '') ? '' : ', ') . "(" . $insertIntoCol . ")";
//                die("INSERT INTO $temp_table ($fieldnames) VALUES " . $insertinto . ";");
                }
            }

            $insertIntoTemp = "INSERT INTO $tempTable ($fieldNames) VALUES " . $insertInto . ";";

            $result = $myDatabase->query($insertIntoTemp, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error insert table '. $myDatabase->errorMessage;
            }
		//		}
//	}
//}

//            return 'OK|Table created.';
            
//            $insertIntoWarning = "INSERT INTO $tempTableWarning ($fieldNames) VALUES " . $insertInto . ";";
//
//            $resultWarning = $myDatabase->query($insertIntoWarning, MYSQLI_STORE_RESULT);
//            if($resultWarning === false) {
//                return 'FAIL|error insert warning table '. $myDatabase->errorMessage;
//            }
//            
//            $insertIntoDuplicate = "INSERT INTO $tempTableDuplicate ($fieldNames) VALUES " . $insertInto . ";";
//
//            $resultDuplicate = $myDatabase->query($insertIntoDuplicate, MYSQLI_STORE_RESULT);
//            if($resultDuplicate === false) {
//                return 'FAIL|error insert duplicate table '. $myDatabase->errorMessage;
//            }
            
//            return "0|". $temporaryTable;            
        
            $sqlSelect = "SELECT a.* FROM $tempTable a ORDER BY a.id ASC, a.column_1 ASC;";
            $resultSelect = $myDatabase->query($sqlSelect, MYSQLI_STORE_RESULT);
            $successRow = 0;
            $errorRow = 0;
            $warningRow = 0;
            $counterRow = 1;
            $errorMessage = '';
            $shipmentError = 0;
            $categoryError = 0;
            $rateError = 0;
            $currencyError = 0;
            $insuredError = 0;
            $countryFromError = 0;
            $countryToError = 0;
            $duplicateError = 0;
            $duplicateQuotation = '';
            $shipmentQuotation = '';
            $categoryQuotation = '';
            $rateQuotation = '';
            $currencyQuotation = '';
            $insuredQuotation = '';
            $countryFromQuotation = '';
            $countryToQuotation = '';
            $boolContinue = true;
			
            date_default_timezone_set('Asia/Jakarta');

            $date = new DateTime();
            $currentDate = $date->format('d/m/Y H:i:s');
            $currentYearMonth = $date->format('ym');
			
            while($importedData = $resultSelect->fetch_object()) {
                if ($counterRow >= $readStartAtRow) {
            
			/*$gl_add_no = 'NULL';
			//$sqlColumn = "SELECT column_1 FROM $tempTable GROUP BY column_1";
			$sqlColumn = "SELECT gl_add_id, gl_add_no FROM gl_add WHERE gl_add_no = UPPER('{$importedData->column_1}')";
            $resultColumn = $myDatabase->query($sqlColumn, MYSQLI_STORE_RESULT);
			while($rowColumn = $resultColumn->fetch_object()) {
            $gl_add_no = $rowColumn->gl_add_no;
			}
                    if(strtoupper($importedData->column_1) == strtoupper($gl_add_no)) {
						$gl_type = 0;
						$gl_add_id = 0;
						$amountConverted = 0;
						$amount = 0;
						$notes = 'NULL';
						
						
                        $sql = "SELECT gl_add_id, gl_add_no FROM gl_add WHERE gl_add_no = UPPER('{$importedData->column_1}')";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $gl_add_id = $row->gl_add_id;
                            }
							
							
                        if($importedData->column_18 != '0' && strtoupper($importedData->column_18) != 'NONE' && $importedData->column_18 != '' && $importedData->column_18 != '-' && $importedData->column_18 != null) {
                            $gl_type = 2;
							$amount = $importedData->column_18;
							$amountConverted = $importedData->column_18 * $importedData->column_16;
                        }
						
						if($importedData->column_17 != '0' && strtoupper($importedData->column_17) != 'NONE' && $importedData->column_17 != '' && $importedData->column_17 != '-' && $importedData->column_17 != null) {
                            $gl_type = 1;
							$amount = $importedData->column_17;
							$amountConverted = $importedData->column_17 * $importedData->column_16;
                        }
                        
                        if($importedData->column_11 != '0' && strtoupper($importedData->column_11) != 'NONE' && $importedData->column_11 != '' && $importedData->column_11 != '-' && $importedData->column_11 != null) {
                            $sql = "SELECT * FROM `stockpile` WHERE UPPER(stockpile_name) = UPPER('{$importedData->column_11}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $stockpileId = $row->stockpile_id;
                            }
                        }
                        
                        // <editor-fold defaultstate="collapsed" desc="check vehicle and unloading cost">
                        if($importedData->column_13 != '0' && strtoupper($importedData->column_13) != 'NONE' && $importedData->column_13 != '' && $importedData->column_13 != '-' && $importedData->column_13 != null) {
                            $sql = "SELECT * FROM `account` WHERE UPPER(account_no) = UPPER({$importedData->column_13}) LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $accountId = $row->account_id;
                            } 
                        }
                        
                        if($importedData->column_15 != '0' && strtoupper($importedData->column_15) != 'NONE' && $importedData->column_15 != '' && $importedData->column_15 != '-' && $importedData->column_15 != null) {
                            $sql = "SELECT * FROM `currency` WHERE UPPER(currency_code) = UPPER('{$importedData->column_15}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $currencyId = $row->currency_id;
                                
                            }
                        }
                         if($importedData->column_12 != '0' || $importedData->column_12 != 'NONE' || $importedData->column_12 != '' || $importedData->column_12 != '-') {
						  $notes = $importedData->column_12;
					   }
                        
                        if($boolContinue) {
                           
						   	$notes = $importedData->column_12;
                            // insert into transaction
                            $sql = "INSERT INTO `gl_detail` (gl_add_id, gl_type, stockpile_id, account_id, currency_id, exchange_rate, amount, "
                                    . "amount_converted, notes, entry_by, entry_date)"
                                    . "VALUES ('{$gl_add_id}', '{$gl_type}', '{$stockpileId}', '{$accountId}', '{$currencyId}',"
                                    . "'{$importedData->column_16}', '{$amount}', '{$amountConverted}', '{$notes}',"
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            
                            if($result !== false) {
                                $successRow = $successRow + 1;
                                
                                $jurnalId = $myDatabase->insert_id;
                              
                                
                                $sql = "DELETE FROM {$tempTable} WHERE column_0 = {$importedData->column_0}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                               insertGeneralLedger($myDatabase, 'JURNAL MEMORIAL', "NULL", "NULL", "NULL", "NULL", "NULL", $jurnalId);
                            } else {
                                $errorRow = $errorRow + 1;
								echo 'FALSE1';
								echo $sql;
                            } 
                        } else {
                            $errorRow = $errorRow + 1;
							echo 'FALSE2';
                        }
                        
                        // </editor-fold>
                    } elseif(strtoupper($importedData->column_1) != strtoupper($gl_add_no)) {
                        // <editor-fold defaultstate="collapsed" desc="OUT">
                        if($importedData->column_2 != '0' || $importedData->column_2 != 'NONE' || $importedData->column_2 != '' || $importedData->column_2 != '-') {
							$generalVendorId = 0;
							$vendorId = 0;
							$contractId = 0;
							$invoiceId = 0;
							$transactionId = 0;
							$shipmentId = 0;
							$qty = 0;
							$price = 0;
							$notes = 'NULL';
							 
							$sql = "SELECT * FROM stockpile WHERE UPPER(stockpile_name) = UPPER('{$importedData->column_2}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $stockpileId = $row->stockpile_id;
							}
							
							$str = $importedData->column_0;
							$dateJurnal = DateTime::createFromFormat('Y-m-d', $str);
							$jurnalYearMonth = $dateJurnal->format('ym');
	
		
						$checkJurnalNo = 'JM/JPJ/'. $jurnalYearMonth;
 
						$sql = "SELECT gl_add_no FROM gl_add WHERE gl_add_no LIKE '{$checkJurnalNo}%' ORDER BY gl_add_id DESC LIMIT 1";
					$resultJurnal = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
					if($resultJurnal->num_rows == 1) {
            $rowJurnal = $resultJurnal->fetch_object();
            $splitJurnalNo = explode('/', $rowJurnal->gl_add_no);
            $lastExplode = count($splitJurnalNo) - 1;
            $nextJurnalNo = ((float) $splitJurnalNo[$lastExplode]) + 1;
            $jurnalNo = $checkJurnalNo .'/'. $nextJurnalNo;
        } else {
            $jurnalNo = $checkJurnalNo .'/1';
        
    }
                        
                        
                       if($importedData->column_3 != '0' && strtoupper($importedData->column_3) != 'NONE' && $importedData->column_3 != '' && $importedData->column_3 != '-' && $importedData->column_3 != null) {
						  $sql = "SELECT * FROM general_vendor WHERE UPPER(general_vendor_name) = UPPER('{$importedData->column_3}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $generalVendorId = $row->general_vendor_id;
							}
						 
					   }
					   
					   if($importedData->column_4 != '0' && strtoupper($importedData->column_4) != 'NONE' && $importedData->column_4 != '' && $importedData->column_4 != '-' && $importedData->column_4 != null) {
						  $sql = "SELECT * FROM vendor WHERE UPPER(vendor_name) = UPPER('{$importedData->column_4}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $vendorId = $row->vendor_id;
							}
						   
					   }
					   
					   if($importedData->column_5 != '0' && strtoupper($importedData->column_5) != 'NONE' && $importedData->column_5 != '' && $importedData->column_5 != '-' && $importedData->column_5 != null) {
						  $sql = "SELECT sc.* FROM stockpile_contract sc LEFT JOIN contract c ON sc.`contract_id` = c.`contract_id` 
						  		  WHERE UPPER(c.po_no) = UPPER('{$importedData->column_5}') AND sc.stockpile_id = {$stockpileId} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $contractId = $row->contract_id;
							}
						   
					   }
					   
					   if($importedData->column_6 != '0' && strtoupper($importedData->column_6) != 'NONE' && $importedData->column_6 != '' && $importedData->column_6 != '-' && $importedData->column_6 != null) {
						  $sql = "SELECT * FROM invoice WHERE UPPER(invoice_no) = UPPER('{$importedData->column_6}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $invoiceId = $row->invoice_id;
							}
						   
					   }
					   
					   if($importedData->column_7 != '0' && strtoupper($importedData->column_7) != 'NONE' && $importedData->column_7 != '' && $importedData->column_7 != '-' && $importedData->column_7 != null) {
						  $sql = "SELECT * FROM `transaction` WHERE UPPER(slip_no) = UPPER('{$importedData->column_7}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $transactionId = $row->transaction_id;
							}
						   
					   }
					   
					   if($importedData->column_10 != '0' && strtoupper($importedData->column_10) != 'NONE' && $importedData->column_10 != '' && $importedData->column_10 != '-' && $importedData->column_10 != null) {
						  $sql = "SELECT * FROM `shipment` WHERE UPPER(shipment_no) = UPPER('{$importedData->column_10}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $shipmentId = $row->shipment_id;
							}
						   
					   }
					   
					     
					    if($importedData->column_12 != '0' && strtoupper($importedData->column_12) != 'NONE' && $importedData->column_12 != '' && $importedData->column_12 != '-' && $importedData->column_12 != null) {
                            $notes = $importedData->column_12;
                        }
						
						 if($importedData->column_8 != '0' && strtoupper($importedData->column_8) != 'NONE' && $importedData->column_18 != '' && $importedData->column_8 != '-' && $importedData->column_8 != null) {
                            $qty = $importedData->column_8;
                        }
						
						 if($importedData->column_9 != '0' && strtoupper($importedData->column_9) != 'NONE' && $importedData->column_9 != '' && $importedData->column_9 != '-' && $importedData->column_9 != null) {
                            $price = $importedData->column_9;
                        }
							
                            
                            if($boolContinue) {
                      
					  
							
									
                                    $sql = "INSERT INTO `gl_add` (gl_add_date, gl_add_no, stockpile_id, general_vendor_id, vendor_id, contract_id, transaction_id, "
											."shipment_id, invoice_id, notes, quantity, price, input_by, input_date) VALUES "
							. "('{$importedData->column_0}', '{$jurnalNo}', '{$stockpileId}', '{$generalVendorId}', '{$vendorId}',"
                                            . "'{$contractId}', '{$transactionId}', '{$shipmentId}', '{$invoiceId}', '{$notes}', '{$qty}', "
                                            . "'{$price}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                            
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    
                                    if($result !== false) {
                                        $gl_add_id = $myDatabase->insert_id;
										$gl_type = 0;
										$amountConverted = 0;
										$amount = 0;
										$notes = 'NULL';
                                        // insert into delivery
                                         
					   if($importedData->column_18 != '0' && strtoupper($importedData->column_18) != 'NONE' && $importedData->column_18 != '' && $importedData->column_18 != '-' && $importedData->column_18 != null) {
                            $gl_type = 2;
							$amount = $importedData->column_18;
							$amountConverted = $importedData->column_18 * $importedData->column_16;
                        }
						
						if($importedData->column_17 != '0' && strtoupper($importedData->column_17) != 'NONE' && $importedData->column_17 != '' && $importedData->column_17 != '-' && $importedData->column_17 != null) {
                            $gl_type = 1;
							$amount = $importedData->column_17;
							$amountConverted = $importedData->column_17 * $importedData->column_16;
                        }
                        
                        if($importedData->column_11 != '0' && strtoupper($importedData->column_11) != 'NONE' && $importedData->column_11 != '' && $importedData->column_11 != '-' && $importedData->column_11 != null) {
                            $sql = "SELECT * FROM `stockpile` WHERE UPPER(stockpile_name) = UPPER('{$importedData->column_11}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $stockpileId = $row->stockpile_id;
                            }
                        }
                        
                        // <editor-fold defaultstate="collapsed" desc="check vehicle and unloading cost">
                        if($importedData->column_13 != '0' && strtoupper($importedData->column_13) != 'NONE' && $importedData->column_13 != '' && $importedData->column_13 != '-' && $importedData->column_13 != null) {
                            $sql = "SELECT * FROM `account` WHERE UPPER(account_no) = UPPER({$importedData->column_13}) LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $accountId = $row->account_id;
                            } 
                        }
                        
                        if($importedData->column_15 != '0' && strtoupper($importedData->column_15) != 'NONE' && $importedData->column_15 != '' && $importedData->column_15 != '-' && $importedData->column_15 != null) {
                            $sql = "SELECT * FROM `currency` WHERE UPPER(currency_code) = UPPER('{$importedData->column_15}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $currencyId = $row->currency_id;
                                
                            }
                        }
						
						 if($importedData->column_12 != '0' || $importedData->column_12 != 'NONE' || $importedData->column_12 != '' || $importedData->column_12 != '-') {
						  $notes = $importedData->column_12;
					   }

                             $sql = "INSERT INTO `gl_detail` (gl_add_id, gl_type, stockpile_id, account_id, currency_id, exchange_rate, amount, "
                                    . "amount_converted, notes, entry_by, entry_date) "
                                    . "VALUES ('{$gl_add_id}', '{$gl_type}', '{$stockpileId}', '{$accountId}', '{$currencyId}',"
                                    . "'{$importedData->column_16}', '{$amount}', '{$amountConverted}', '{$notes}',"
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                             if($result !== false) {
                                $successRow = $successRow + 1;
                                
                                $jurnalId = $myDatabase->insert_id;
                              
                                
                                $sql = "DELETE FROM {$tempTable} WHERE column_0 = {$importedData->column_0}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                               insertGeneralLedger($myDatabase, 'JURNAL MEMORIAL', "NULL", "NULL", "NULL", "NULL", "NULL", $jurnalId);
                            	} else {
                                	$errorRow = $errorRow + 1;
									echo 'FALSE4';
                           		 } 
							
                        } else {
                                        $errorRow = $errorRow + 1;
										echo 'FALSE5';
										echo $sql;
                               }
                                
                            }
                        
						}
                        // </editor-fold>
                    }*/
                   $sql = "INSERT INTO `rpt_upload` (gl_module, payment_no, slip_no, supplier_name, contract_no, po_no, invoice_no, shipment_code, quantity, price, gl_date, stockpile_name, account_no, account_name, amounts, description) "
                                    . "VALUES ('{$importedData->column_0}', '{$importedData->column_1}', '{$importedData->column_2}', '{$importedData->column_3}', '{$importedData->column_4}', '{$importedData->column_5}', '{$importedData->column_6}', '{$importedData->column_7}', '{$importedData->column_8}', '{$importedData->column_9}', '{$importedData->column_10}', '{$importedData->column_11}', '{$importedData->column_12}', '{$importedData->column_13}', '{$importedData->column_14}', '{$importedData->column_15}')";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                             if($result !== false) {
                                $successRow = $successRow + 1;
                                
                                $jurnalId = $myDatabase->insert_id;
                              
                                
                                $sql = "DELETE FROM {$tempTable} WHERE column_0 = {$importedData->column_0}";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                             //  insertGeneralLedger($myDatabase, 'JURNAL MEMORIAL', "NULL", "NULL", "NULL", "NULL", "NULL", $jurnalId);
                            	} else {
                                	$errorRow = $errorRow + 1;
									echo 'FALSE4';
                           		 }
                }
                $counterRow++;
            } 
            
            if(($successRow+$warningRow) == ($counterRow-1) && $errorRow == 0) {
                $result = $myDatabase->query("COMMIT", MYSQLI_STORE_RESULT);
                
                $sql = "DROP TABLE {$tempTable}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                

                return "OK|". $successRow ." Row(s) import successfully, ". $warningRow ." Row(s) failed with warning. ". $errorMessage;
            } else {
                $result = $myDatabase->query("ROLLBACK", MYSQLI_STORE_RESULT);

                return "FAIL|Import failed. ". $errorRow ." Rows(s) can not be imported. Please contact administrator. ";
            }
        }
    } else {
        return 'FAIL|File not exists.';
    } 
    // </editor-fold>
}
function excelImportTimbangan($myDatabase, $fileName = "", $stockpileId = 0, $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1) {
    // <editor-fold defaultstate="collapsed" desc="excelImportContract($myDatabase, $fileName = "", $stockpileId = 0, $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1)">
    if (file_exists(realpath($fileName))) {
        $fileNameRealPath = realpath($fileName);
        
        require_once './assets/extensions/PHPExcel.php';
        require_once './assets/extensions/PHPExcel/IOFactory.php';
        require_once './assets/extensions/PHPExcel/Cell/AdvancedValueBinder.php';

        $objReader = PHPExcel_IOFactory::createReader('Excel5');

        $objPHPExcel = $objReader->load($fileNameRealPath);
        
        $readStartAtRow = 1; 
        $totalCols = 18;

        $result = $myDatabase->query("START TRANSACTION", MYSQLI_STORE_RESULT);
        
//        $sheetCount = $objPHPExcel->getSheetCount();
        $sheetCount = 1;
        for ($onSheet; $onSheet < $sheetCount; $onSheet++) {
            $objPHPExcel->setActiveSheetIndex($onSheet);
            $objWorksheet = $objPHPExcel->getActiveSheet();

            $rows = $objWorksheet->getHighestRow();
            $cols = PHPExcel_Cell::columnIndexFromString($objWorksheet->getHighestColumn());
            if ($toRow == -1)
                $toRow = $rows;
            if ($toCol == -1)
                $toCol = $cols;
            
            $key = array();
            $columnName = array();
            $getColumnAName = false;
            
            if($toCol == $totalCols) {
                for ($row = $fromRow; $row <= $rows; $row++) {
                    for ($i = $fromCol; $i < $cols; $i++) {
                        $columnName[$i] = "column_" . $i;
                        if (isset($columnName[$i])) {
                            if (PHPExcel_Shared_Date::isDateTime($objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row))) { 
                                $tmp = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 

                                if (is_numeric($tmp)) { 
                                    $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'YYYY-MM-DD'); 
                                } else { 
                                    $key[$row][$i]['value'] = substr($tmp, 6, 4) . "-" . substr($tmp, 3, 2) . "-" . substr($tmp, 0, 2); 
                                } 
//                                $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'DD-MMM-YYYY'); 
                            } else { 
//                                $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                $check = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                if (substr($check, 0, 1) == "=") {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getCalculatedValue(); 
                                } else {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                }
                            }
                        }
                    }
                }

                $getColumnAName = true;
            } else {
                return 'FAIL|Template is wrong.';
            }
        }
        
        if ($getColumnAName) {
            $temporaryTable = '';
            $temporaryTableWarning = '';
            $temporaryTableDuplicate = '';
            $fieldNames = '';

            foreach ($columnName as $i => $names) {
                if (trim($names) != '') {
                    $temporaryTable .= ( ($temporaryTable == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableWarning .= ( ($temporaryTableWarning == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableDuplicate .= ( ($temporaryTableDuplicate == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $fieldNames .= ( ($fieldNames == '') ? '' : ', ') . "`" . trim($names) . "`";
                }
            }

            $tempTable = '`tmp_timbangan_' . uniqid() . '`';
//            $temporaryTable = 'CREATE TEMPORARY TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableWarning = '`jb_sdw_' . uniqid() . '`';
//            $temporaryTableWarning = 'CREATE TEMPORARY TABLE ' . $tempTableWarning . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableWarning . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableDuplicate = '`jb_sdd_' . uniqid() . '`';
//            $temporaryTableDuplicate = 'CREATE TEMPORARY TABLE ' . $tempTableDuplicate . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableDuplicate . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
            $temporaryTable = 'CREATE TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';

//            return "0|". $temporaryTable;

            $result = $myDatabase->query($temporaryTable, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error create table '. $myDatabase->errorMessage;
            }

            $insertInto = '';
            foreach ($key as $row => $colData) {
                if ($colData[1] != null) {
                    $insertIntoCol = '';
                    foreach ($colData as $col => $colDatas) {
                        if (strpos($colDatas['value'], "NULL") !== false || $colDatas['value'] == '')
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "NULL";
                        else {
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "'". $colDatas['value'] ."'";
                        }
                    }
                    $insertInto .= ( ($insertInto == '') ? '' : ', ') . "(" . $insertIntoCol . ")";
//                die("INSERT INTO $temp_table ($fieldnames) VALUES " . $insertinto . ";");
                }
            }

            $insertIntoTemp = "INSERT INTO $tempTable ($fieldNames) VALUES " . $insertInto . ";";

            $result = $myDatabase->query($insertIntoTemp, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error insert table '. $myDatabase->errorMessage;
            }
            
			$sql = "DELETE FROM $tempTable WHERE column_0 IS NULL";
            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                
            //return 'OK|Table created.';
            
            $sqlSelect = "SELECT  a.* FROM $tempTable a WHERE a.column_0 IS NOT NULL;";
            $resultSelect = $myDatabase->query($sqlSelect, MYSQLI_STORE_RESULT);
            $successRow = 0;
            $errorRow = 0;
            $warningRow = 0;
            $counterRow = 1;
            $errorMessage = '';
            
            date_default_timezone_set('Asia/Jakarta');

            $date = new DateTime();
            $currentDate = $date->format('d/m/Y H:i:s');
            $currentYear = $date->format('y');
            $currentYearMonth = $date->format('ym');
            
            while($importedData = $resultSelect->fetch_object()) {
                if ($counterRow >= $readStartAtRow) {
                    // check Vendor
                    /*$boolInsertVendor = false;
                    $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_code) = UPPER('{$importedData->column_2}')";
                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                    if($result !== false && $result->num_rows > 0) {
                        $rowVendor = $result->fetch_object();
                        $vendorId = $rowVendor->vendor_id;
                        $boolInsertVendor = true;
                    } elseif($result !== false && $result->num_rows == 0) {
                        $ppn = 0;
                        $pph = 0;
                        $ppnValue = 0;
                        $pphValue = 0;
                        
                        if(strtoupper($importedData->column_4) == 'PPN') {
                            $ppn = 1;
                            $ppnValue = 10;
                        }
                        
                        if($importedData->column_5 != '') {
                            $sqlPPh = "SELECT * FROM tax WHERE UPPER(tax_name) = UPPER({$importedData->column_4})";
                            $resultPPh = $myDatabase->query($sqlPPh, MYSQLI_STORE_RESULT);
                            if($resultPPh !== false && $resultPPh->num_rows == 1) {
                                $rowPPh = $resultPPh->fetch_object();
                                $pph = $rowPPh->tax_id;
                                $pphValue = $rowPPh->tax_value;
                            }
                        }

                        $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, vendor_address, npwp, ppn_tax_id, pph_tax_id, ppn, pph, entry_by, entry_date) VALUES ("
                                . "UPPER('{$importedData->column_2}'), UPPER('{$importedData->column_3}'), '', '', {$ppn}, {$pph}, {$ppnValue}, {$pphValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                        if($result !== false) {
                            $vendorId = $myDatabase->insert_id;
                            $boolInsertVendor = true;
                        } 
                    }*/
                    
                    /*if($boolInsertVendor) {
                        $sql = "SELECT * FROM contract WHERE UPPER(contract_no) = UPPER('{$importedData->column_7}')";
                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                        if($result !== false && $result->num_rows == 0) {
                            if($importedData->column_1 == '-' || $importedData->column_1 == '' || $importedData->column_1 == null) {
                                $checkPoNo = $importedData->contract_type .'-'. $importedData->column_2 .'-'. $currentYearMonth;
                                $sql = "SELECT po_no FROM contract WHERE company_id = {$_SESSION['companyId']} AND po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
                                $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if($resultPo->num_rows == 1) {
                                    $rowPo = $resultPo->fetch_object();
                                    $splitPoNo = explode('-', $rowPo->po_no);
                                    $nextPoNo = ((float) $splitPoNo[3]) + 1;
                                    $poNo = $checkPoNo .'-'. $nextPoNo;
                                } else {
                                    $poNo = $checkPoNo .'-1';
                                }
                            } else {
                                $poNo = $importedData->column_1;
                            }
                            */
                            if($importedData->column_11 == '-' || $importedData->column_11 == '' || $importedData->column_11 == null) {
                                $potPercen = 0;
                            } else {
                                $potPercen = $importedData->column_11;
                            }
							if($importedData->column_12 == '-' || $importedData->column_12 == '' || $importedData->column_12 == null) {
                                $potKg = 0;
                            } else {
                                $potKg = $importedData->column_12;
                            }


                            $sql = "INSERT INTO `transaction_upload` (stockpile_id, no_slip, tgl_masuk, tgl_keluar, no_kendaraan, nama_barang, nama_customer, no_do, "
                                    . "supir, timbang1, timbang2, bruto, pot_percen, pot_kg, netto, keterangan, user_input, cetakan, editBy, upload_by, upload_date) VALUES ("
                                    . "{$stockpileId}, '{$importedData->column_0}', '{$importedData->column_1}','{$importedData->column_2}', '{$importedData->column_3}', '{$importedData->column_4}', '{$importedData->column_5}', '{$importedData->column_6}', '{$importedData->column_7}', {$importedData->column_8}, {$importedData->column_9}, {$importedData->column_10}, {$potPercen}, {$potKg}, {$importedData->column_13}, '{$importedData->column_14}',"
                                    . "'{$importedData->column_15}', '{$importedData->column_16}', '{$importedData->column_17}', {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                            if($result !== false) {
                              /*  $contractId = $myDatabase->insert_id;

                                $sql = "SELECT * FROM `stockpile` WHERE UPPER(stockpile_name) = UPPER('{$importedData->column_10}')";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if($result !== false && $result->num_rows > 0) {
                                    $rowSP = $result->fetch_object();
                                    $stockpileId = $rowSP->stockpile_id;

                                    $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                                            . "{$stockpileId}, {$contractId}, {$quantity}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                } else {
                                    $warningRow = $warningRow + 1;
                                }*/

                               // insertGeneralLedger($myDatabase, 'CONTRACT', "NULL", $contractId);

                                $successRow = $successRow + 1;
                            } else {
                                $errorRow = $errorRow + 1;
                            }
                        /*} else {
                            $warningRow = $warningRow + 1;
                        }
                    } else {
                        $errorRow = $errorRow + 1;
                    }*/
                }
                $counterRow++;
            }
            
            if(($successRow+$warningRow) >= ($counterRow-1) && $errorRow == 0) {
                $result = $myDatabase->query("COMMIT", MYSQLI_STORE_RESULT);
                
                $sql = "DROP TABLE {$tempTable}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
				$sql = "DELETE FROM transaction_upload WHERE no_slip = ''";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                

                return "OK|". $successRow ." Row(s) import successfully, ". $warningRow ." Row(s) failed with warning. ". $errorMessage;
            } else {
                $result = $myDatabase->query("ROLLBACK", MYSQLI_STORE_RESULT);

                return "FAIL|Import failed. ". $errorRow ." Rows(s) can not be imported. Please contact administrator. ". $sql ."";
            }
            
        }
    } else {
        return 'FAIL|File not exists.';
    }
    // </editor-fold>
}
function excelImportTransactionBACKUP($myDatabase, $fileName = "", $stockpileId = 0, $vendorId = 0, $stockpileContractId = 0, $onSheet = 0, $fromRow = 2, $toRow = -1, $fromCol = 0, $toCol = -1) {
    // <editor-fold defaultstate="collapsed" desc="function excelImportTransaction($myDatabase, $fileName = "", $stockpileId = 0, $vendorId = 0, $stockpileContractId = 0, $onSheet = 0, $fromRow = 1, $toRow = -1, $fromCol = 0, $toCol = -1)">
    if (file_exists(realpath($fileName))) {
        $fileNameRealPath = realpath($fileName);
        
        require_once './assets/extensions/PHPExcel.php';
        require_once './assets/extensions/PHPExcel/IOFactory.php';
        require_once './assets/extensions/PHPExcel/Cell/AdvancedValueBinder.php';

        $objReader = PHPExcel_IOFactory::createReader('Excel5');

        $objPHPExcel = $objReader->load($fileNameRealPath);
        
        $readStartAtRow = 1; 
        $totalCols = 28;

        $result = $myDatabase->query("START TRANSACTION", MYSQLI_STORE_RESULT);
        
//        $sheetCount = $objPHPExcel->getSheetCount();
        $sheetCount = 1;
        for ($onSheet; $onSheet < $sheetCount; $onSheet++) {
            $objPHPExcel->setActiveSheetIndex($onSheet);
            $objWorksheet = $objPHPExcel->getActiveSheet();

            $rows = $objWorksheet->getHighestRow();
            $cols = PHPExcel_Cell::columnIndexFromString($objWorksheet->getHighestColumn());
            if ($toRow == -1)
                $toRow = $rows;
            if ($toCol == -1)
                $toCol = $cols;
            
            $key = array();
            $columnName = array();
            $getColumnAName = false;
            
            if($toCol == $totalCols) {
                for ($row = $fromRow; $row <= $rows; $row++) {
                    for ($i = $fromCol; $i < $cols; $i++) {
                        $columnName[$i] = "column_" . $i;
                        if (isset($columnName[$i])) {
                            if (PHPExcel_Shared_Date::isDateTime($objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row))) { 
                                $tmp = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 

                                if (is_numeric($tmp)) { 
                                    $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'YYYY-MM-DD'); 
                                } else { 
                                    $key[$row][$i]['value'] = substr($tmp, 6, 4) . "-" . substr($tmp, 3, 2) . "-" . substr($tmp, 0, 2); 
                                } 
//                                $key[$row][$i]['value'] = PHPExcel_Style_NumberFormat::toFormattedString($tmp, 'DD-MMM-YYYY'); 
                            } else { 
//                                $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                $check = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                if (substr($check, 0, 1) == "=") {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getCalculatedValue(); 
                                } else {
                                    $key[$row][$i]['value'] = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow($i, $row)->getValue(); 
                                }
                            }
                        }
                    }
                }

                $getColumnAName = true;
            } else {
                return 'FAIL|Template is wrong.';
            }
        }
        
        if ($getColumnAName) {
            $temporaryTable = '';
            $temporaryTableWarning = '';
            $temporaryTableDuplicate = '';
            $fieldNames = '';

            foreach ($columnName as $i => $names) {
                if (trim($names) != '') {
                    $temporaryTable .= ( ($temporaryTable == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableWarning .= ( ($temporaryTableWarning == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $temporaryTableDuplicate .= ( ($temporaryTableDuplicate == '') ? '' : ', ') . " `" . trim($names) . "` varchar(512) DEFAULT NULL ";
                    $fieldNames .= ( ($fieldNames == '') ? '' : ', ') . "`" . trim($names) . "`";
                }
            }

            $tempTable = '`tmp_transaction_' . uniqid() . '`';
//            $temporaryTable = 'CREATE TEMPORARY TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableWarning = '`jb_sdw_' . uniqid() . '`';
//            $temporaryTableWarning = 'CREATE TEMPORARY TABLE ' . $tempTableWarning . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableWarning . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
//            $tempTableDuplicate = '`jb_sdd_' . uniqid() . '`';
//            $temporaryTableDuplicate = 'CREATE TEMPORARY TABLE ' . $tempTableDuplicate . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTableDuplicate . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';
            $temporaryTable = 'CREATE TABLE ' . $tempTable . ' (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ' . $temporaryTable . ') DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;';

//            return "0|". $temporaryTable;

            $result = $myDatabase->query($temporaryTable, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error create table '. $myDatabase->errorMessage;
            }

            $insertInto = '';
            foreach ($key as $row => $colData) {
                if ($colData[1] != null) {
                    $insertIntoCol = '';
                    foreach ($colData as $col => $colDatas) {
                        if (strpos($colDatas['value'], "NULL") !== false || $colDatas['value'] == '')
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "NULL";
                        else {
                            $insertIntoCol .= ( ($insertIntoCol == '') ? '' : ', ') . "'". $colDatas['value'] ."'";
                        }
                    }
                    $insertInto .= ( ($insertInto == '') ? '' : ', ') . "(" . $insertIntoCol . ")";
//                die("INSERT INTO $temp_table ($fieldnames) VALUES " . $insertinto . ";");
                }
            }

            $insertIntoTemp = "INSERT INTO $tempTable ($fieldNames) VALUES " . $insertInto . ";";

            $result = $myDatabase->query($insertIntoTemp, MYSQLI_STORE_RESULT);
            if($result === false) {
                return 'FAIL|error insert table '. $myDatabase->errorMessage;
            }
            
//            return 'OK|Table created.';
            
//            $insertIntoWarning = "INSERT INTO $tempTableWarning ($fieldNames) VALUES " . $insertInto . ";";
//
//            $resultWarning = $myDatabase->query($insertIntoWarning, MYSQLI_STORE_RESULT);
//            if($resultWarning === false) {
//                return 'FAIL|error insert warning table '. $myDatabase->errorMessage;
//            }
//            
//            $insertIntoDuplicate = "INSERT INTO $tempTableDuplicate ($fieldNames) VALUES " . $insertInto . ";";
//
//            $resultDuplicate = $myDatabase->query($insertIntoDuplicate, MYSQLI_STORE_RESULT);
//            if($resultDuplicate === false) {
//                return 'FAIL|error insert duplicate table '. $myDatabase->errorMessage;
//            }
            
//            return "0|". $temporaryTable;            
            
            $sqlSelect = "SELECT a.*, DATE_FORMAT(a.column_2, '%y') AS trans_year FROM $tempTable a ORDER BY column_0 ASC;";
            $resultSelect = $myDatabase->query($sqlSelect, MYSQLI_STORE_RESULT);
            $successRow = 0;
            $errorRow = 0;
            $warningRow = 0;
            $counterRow = 0;
            $errorMessage = '';
            $shipmentError = 0;
            $categoryError = 0;
            $rateError = 0;
            $currencyError = 0;
            $insuredError = 0;
            $countryFromError = 0;
            $countryToError = 0;
            $duplicateError = 0;
            $duplicateQuotation = '';
            $shipmentQuotation = '';
            $categoryQuotation = '';
            $rateQuotation = '';
            $currencyQuotation = '';
            $insuredQuotation = '';
            $countryFromQuotation = '';
            $countryToQuotation = '';
            
            date_default_timezone_set('Asia/Jakarta');

            $date = new DateTime();
            $currentDate = $date->format('d/m/Y H:i:s');
            
            $sqlStockpile = "SELECT * FROM stockpile WHERE stockpile_id = {$stockpileId}";
            $resultStockpile = $myDatabase->query($sqlStockpile, MYSQLI_STORE_RESULT);
            $rowStockpile = $resultStockpile->fetch_object();
            $freightWeightRule = $rowStockpile->freight_weight_rule;
            $stockpileCode = $rowStockpile->stockpile_code;
            
            while($importedData = $resultSelect->fetch_object()) {
                if ($counterRow >= $readStartAtRow) {
                    
                    if(strtoupper($importedData->column_12) == 'IN') {
                        // <editor-fold defaultstate="collapsed" desc="IN">
                        
                        // <editor-fold defaultstate="collapsed" desc="check vendor and supplier">
                        if($importedData->column_9 != '0' || $importedData->column_9 != 'NONE' || $importedData->column_9 != '' || $importedData->column_9 != '-') {
                            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_name) = UPPER('{$importedData->column_9}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $vendorId = $row->vendor_id;
                                $vendorCode = $row->vendor_code;
                            } else {
                                if($importedData->column_8 != '0' || $importedData->column_8 != 'NONE' || $importedData->column_8 != '' || $importedData->column_8 != '-') {
                                    $vendorCode = strtoupper(substr($importedData->column_8, 2, 3)) ;
                                } else {
                                    $vendorCode = strtoupper(substr($importedData->column_9, 0, 3));
                                }

                                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, entry_by, entry_date) VALUES ("
                                        . "'{$vendorCode}', '{$importedData->column_9}', "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $vendorId = $myDatabase->insert_id;
                            }
                        }
                        
                        if($importedData->column_10 != '0' || $importedData->column_10 != 'NONE' || $importedData->column_10 != '' || $importedData->column_10 != '-') {
                            $sql = "SELECT * FROM `vendor` WHERE UPPER(vendor_name) = UPPER('{$importedData->column_10}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $supplierId = $row->vendor_id;
                            } else {
                                $sql = "INSERT INTO `vendor` (vendor_code, vendor_name, entry_by, entry_date) VALUES ("
                                        . "'". strtoupper(substr($importedData->column_10, 0, 3)) ."', '{$importedData->column_10}', "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $supplierId = $myDatabase->insert_id;
                            }
                        }
                        
                        if($vendorId == "") {
                            $vendorId = $supplierId;
                        }
                        
                        if($supplierId == "") {
                            $supplierId = 'NULL';
                        }
                        
                        // </editor-fold>
                        
                        // <editor-fold defaultstate="collapsed" desc="check vehicle and unloading cost">
                        if($importedData->column_4 != '0' || $importedData->column_4 != 'NONE' || $importedData->column_4 != '' || $importedData->column_4 != '-') {
                            $sql = "SELECT * FROM `vehicle` WHERE UPPER(vehicle_name) = UPPER('{$importedData->column_4}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $vehicleId = $row->vehicle_id;
                            } else {
                                $sql = "INSERT INTO `vehicle` (vehicle_name, entry_by, entry_date) VALUES ("
                                        . "'{$importedData->column_4}', "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $vehicleId = $myDatabase->insert_id;
                            }
                        }
                        
                        if(($importedData->column_22 != '' || $importedData->column_22 != '0' || $importedData->column_22 != '-') && $vehicleId != '') {
                            $sql = "SELECT * FROM unloading_cost WHERE vehicle_id = {$vehicleId} AND stockpile_id = {$stockpileId} AND price_converted = {$importedData->column_22} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $unloadingCostId = $row->unloading_cost_id;
                            } else {
                                $sql = "INSERT INTO `unloading_cost` (vehicle_id, stockpile_id, currency_id, exchange_rate, price, price_converted, entry_by, entry_date) VALUES ("
                                        . "{$vehicleId}, {$stockpileId}, 1, 1, {$importedData->column_22}, {$importedData->column_22}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $unloadingCostId = $myDatabase->insert_id;
                            }
                        }
                        
                        if($vehicleId == "") {
                            $unloadingCostId = 'NULL';
                        }
                        
                        // </editor-fold>
                        
                        // <editor-fold defaultstate="collapsed" desc="check freight and freight cost">
                        if($importedData->column_6 != '0' || $importedData->column_6 != 'NONE' || $importedData->column_6 != '' || $importedData->column_6 != '-') {
                            $sql = "SELECT * FROM `freight` WHERE UPPER(freight_supplier) = UPPER('{$importedData->column_6}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $freightId = $row->freight_id;
                            } else {
                                $sql = "INSERT INTO `freight` (freight_code, freight_supplier, entry_by, entry_date) VALUES ("
                                        . "'". strtoupper(substr($importedData->column_6, 0, 3)) ."', '{$importedData->column_6}', "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $freightId = $myDatabase->insert_id;
                            }
                        }
                        
                        if(($importedData->column_21 != '' || $importedData->column_21 != '0' || $importedData->column_21 != '-') && $freightId != '') {
                            // get freight weight
                            if($freightWeightRule == 0) {
                                if((float) $importedData->column_16 < (float) $importedData->column_13) {
                                    $freightQuantity = (float) $importedData->column_16;
                                } elseif((float) $importedData->column_16 > (float) $importedData->column_13) {
                                    $freightQuantity = (float) $importedData->column_13;
                                } else {
                                    $freightQuantity = (float) $importedData->column_13;
                                }
                            } elseif($freightWeightRule == 1) {
                                $freightQuantity = (float) $importedData->column_13;
                            } elseif($freightWeightRule == 2) {
                                $freightQuantity = (float) $importedData->column_16;
                            } else {
                                $freightQuantity = (float) $importedData->column_13;
                            }
                            
                            $freightPrice = (float) $importedData->column_21 / $freightQuantity;
                            
                            $sql = "SELECT * FROM freight_cost WHERE freight_id = {$freightId} AND stockpile_id = {$stockpileId} AND vendor_id = {$vendorId} AND price_converted = {$freightPrice} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $freightCostId = $row->freight_cost_id;
                            } else {
                                $sql = "INSERT INTO `freight_cost` (freight_id, stockpile_id, vendor_id, currency_id, exchange_rate, price, price_converted, entry_by, entry_date) VALUES ("
                                        . "{$freightId}, {$stockpileId}, {$vendorId}, 1, 1, {$freightPrice}, {$freightPrice}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $freightCostId = $myDatabase->insert_id;
                            }
                        }
                        
                        if($freightId == "") {
                            $freightCostId = 'NULL';
                        }
                        
                        // </editor-fold>
                        
                        //curah
                        $boolNewContract = false;
                        if(strtoupper($importedData->column_24) == 'CURAH') {
                            $contractType = 'C';
                            
                            $totalSend = (float) $importedData->column_13;
                            $totalNetto = (float) $importedData->column_16;
                            $boolNewContract = true;
                        } elseif(strtoupper($importedData->column_24) == 'PKS') {
                            $contractType = 'P';
                            
                            if(($importedData->column_8 != '' || $importedData->column_8 != '0' || $importedData->column_8 != '-' && $importedData->column_8 != 'NONE') &&
                                    $importedData->column_11 != '' || $importedData->column_11 != '0' || $importedData->column_11 != '-' && $importedData->column_11 != 'NONE') {
                                $sqlContract = "SELECT * FROM contract WHERE contract_type = '{$contractType}' AND contract_no = '{$importedData->column_11}' AND vendor_id = {$vendorId}";
                                $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);
                                if($resultContract->num_rows == 1) {
                                    $rowContract = $resultContract->fetch_object();
                                    $contractId = $rowContract->contract_id;
                                    
                                    $sqlStockpileContract = "SELECT * FROM stockpile_contract WHERE contract_id = {$contractId} AND stockpile_id = {$stockpileId}";
                                    $resultStockpileContract = $myDatabase->query($sqlStockpileContract, MYSQLI_STORE_RESULT);
                                    if($resultStockpileContract->num_rows == 1) {
                                        $rowStockpileContract = $resultStockpileContract->fetch_object();
                                        $stockpileContractId = $rowStockpileContract->stockpile_contract_id;
                                    } 
                                } else {
                                    $sqlTemp = "SELECT SUM(column_13) AS total_send, SUM(column_16) AS total_netto FROM {$tempTable} WHERE column_8 = '{$importedData->column_8}' "
                                            . "AND column_11 = '{$importedData->column_11}' AND UPPER(column_12) = UPPER('{$importedData->column_12}')";
                                    $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
                                    $rowTemp = $resultTemp->fetch_object();
                                    
                                    $totalSend = $rowTemp->total_send;
                                    $totalNetto = $rowTemp->total_netto;
                                    $boolNewContract = true;
                                }
                            } else {
                                $totalSend = (float) $importedData->column_13;
                                $totalNetto = (float) $importedData->column_16;
                                $boolNewContract = true;
                            }
                        }
                        
                        $boolContinue = true;
                        if($boolNewContract) {
                            $checkPoNo = $contractType .'-'. $vendorCode .'-'. $importedData->trans_year;
                            $sql = "SELECT po_no FROM contract WHERE po_no LIKE '{$checkPoNo}%' ORDER BY contract_id DESC LIMIT 1";
                            $resultPo = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($resultPo->num_rows == 1) {
                                $rowPo = $resultPo->fetch_object();
                                $splitPoNo = explode('-', $rowPo->po_no);
                                $nextPoNo = ((float) $splitPoNo[3]) + 1;
                                $poNo = $checkPoNo .'-'. $nextPoNo;
                            } else {
                                $poNo = $checkPoNo .'-1';
                            }
                            
                            if($totalNetto < $totalSend) {
                                $quantity = $totalNetto;
                            } elseif($totalNetto > $totalSend) {
                                $quantity = $totalSend;
                            } else {
                                $quantity = $totalSend;
                            }
                            
                            $sql = "INSERT INTO contract (contract_type, po_no, contract_no, vendor_id, currency_id, exchange_rate, "
                                    . "price, price_converted, quantity, entry_by, entry_date) VALUES ("
                                    . "'{$contractType}', '{$poNo}', '{$importedData->column_11}', {$vendorId}, 1, 1, "
                                    . "{$importedData->column_27}, {$importedData->column_27}, {$quantity}, "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            
                            if($result === false) {
                                $boolContinue = false;
                            } else {
                                $contractId = $myDatabase->insert_id;
                                $sql = "INSERT INTO stockpile_contract (stockpile_id, contract_id, quantity, entry_by, entry_date) VALUES ("
                                        . "{$stockpileId}, {$contractId}, {$quantity}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if($result === false) {
                                    $boolContinue = false;
                                } else {
                                    $stockpileContractId = $myDatabase->insert_id;
                                }
                            }
                        }
                        
                        if($boolContinue) {
                            $shrink = 0;
                            if((float) $importedData->column_16 < (float) $importedData->column_13) {
                                $quantity = (float) $importedData->column_16;
                                $shrink = $quantity - (float) $importedData->column_13;
                            } elseif((float) $importedData->column_16 > (float) $importedData->column_13) {
                                $quantity = (float) $importedData->column_13;
                            } else {
                                $quantity = (float) $importedData->column_13;
                            }

                            // get next slip no
                            $checkSlipNo = $stockpileCode .'-'. $importedData->trans_year;
                            $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                            $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($resultSlip->num_rows == 0) {
                                $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM transaction LIMIT 1";
                                $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            }
                            
                            $rowSlipNo = $resultSlip->fetch_object();
                            $nextSlipNo = $rowSlipNo->next_id;
                            $slipNo = $checkSlipNo .'-'. $nextSlipNo;
                            
                            // get freight cost
                            if($freightCostId == 'NULL') {
                                $freightPrice = 0;
                            } 

                            // get unloading cost
                            if($unloadingCostId == 'NULL') {
                                $unloadingPrice = 0;
                            } else {
                                $unloadingPrice = $importedData->column_22;
                            }
                            
                            $unitPrice = $importedData->column_27;

                            // get inventory value
                            $inventoryValue = ($freightQuantity * $freightPrice) + $unloadingPrice + ($quantity * $unitPrice);

                            // insert into transaction
                            $sql = "INSERT INTO `transaction` (slip_no, stockpile_contract_id, transaction_date, loading_date, vehicle_no, labor_id, unloading_cost_id, "
                                    . "unloading_date, freight_cost_id, permit_no, transaction_type, vendor_id, send_weight, bruto_weight, tarra_weight, "
                                    . "netto_weight, notes, driver, freight_quantity, quantity, shrink, freight_price, unloading_price, unit_price, "
                                    . "inventory_value, block, entry_by, entry_date) "
                                    . "VALUES ('{$slipNo}', {$stockpileContractId}, STR_TO_DATE('{$importedData->column_2}', '%Y-%m-%d'), STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), "
                                    . "'{$importedData->column_3}', 1, {$unloadingCostId}, STR_TO_DATE('{$importedData->column_2}', '%Y-%m-%d'), {$freightCostId}, '{$importedData->column_7}', "
                                    . "1, {$supplierId}, {$importedData->column_13}, {$importedData->column_14}, {$importedData->column_15}, {$importedData->column_16}, '{$importedData->column_17}', "
                                    . "'{$importedData->column_18}', {$freightQuantity}, {$quantity}, {$shrink}, {$freightPrice}, {$unloadingPrice}, {$unitPrice}, {$inventoryValue}, 'NONE', "
                                    . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            
                            if($result !== false) {
                                $successRow = $successRow + 1;
                            } else {
                                $errorRow = $errorRow + 1;
                            }
                        } else {
                            $errorRow = $errorRow + 1;
                        }
                        
                        // </editor-fold>
                    } elseif(strtoupper($importedData->column_12) == 'OUT') {
                        // <editor-fold defaultstate="collapsed" desc="OUT">
                        if(($importedData->column_10 != '0' || $importedData->column_10 != 'NONE' || $importedData->column_10 != '' || $importedData->column_10 != '-') &&
                                ($importedData->column_27 != '0' || $importedData->column_27 != 'NONE' || $importedData->column_27 != '' || $importedData->column_27 != '-')) {
                            $sql = "SELECT * FROM `customer` WHERE UPPER(customer_name) = UPPER('{$importedData->column_10}') LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $customerId = $row->customer_id;
                            } else {
                                $sql = "INSERT INTO `customer` (customer_name, entry_by, entry_date) VALUES ("
                                        . "'{$importedData->column_10}', "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                $customerId = $myDatabase->insert_id;
                            }
                        }
                        
                        if($customerId != '') {
                            $salesNo = strtoupper(str_replace(' ', '', substr($importedData->column_10, 0, 5)));
                            
                            $sql = "SELECT * FROM sales WHERE UPPER(sales_no) = '{$salesNo}' AND customer_id = {$customerId} AND stockpile_id = {$stockpileId} "
                                    . "AND currency_id = 1 AND price = {$importedData->column_27} LIMIT 1";
                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                            if($result->num_rows == 1) {
                                $row = $result->fetch_object();
                                $salesId = $row->sales_id;
                                $salesBalance = $row->quantity;
                            } else {
                                $sqlTemp = "SELECT count(1) AS total_shipment FROM {$tempTable} WHERE UPPER(column_10) = UPPER('{$importedData->column_10}') "
                                        . "AND UPPER(column_12) = UPPER('{$importedData->column_12}') AND column_27 = {$importedData->column_27}";
                                $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
                                $rowTemp = $resultTemp->fetch_object();
                                $totalShipment = $rowTemp->total_shipment;
                                
                                $sqlTemp = "SELECT MIN(column_5) AS sales_date, SUM(column_13) AS total_quantity FROM {$tempTable} WHERE UPPER(column_10) = UPPER('{$importedData->column_10}') "
                                        . "AND UPPER(column_12) = UPPER('{$importedData->column_12}') AND column_27 = {$importedData->column_27}";
                                $resultTemp = $myDatabase->query($sqlTemp, MYSQLI_STORE_RESULT);
                                $rowTemp = $resultTemp->fetch_object();
                                $salesDate = $rowTemp->sales_date;
                                $totalQuantity = $rowTemp->total_quantity;
                                $salesBalance = $totalQuantity;
                                
                                $sql = "INSERT INTO sales (sales_no, sales_date, sales_type, customer_id, stockpile_id, currency_id, exchange_rate, "
                                        . "price, price_converted, quantity, total_shipment, entry_by, entry_date) VALUES ("
                                        . "'{$salesNo}', STR_TO_DATE('{$salesDate}', '%Y-%m-%d'), 1, {$customerId}, {$stockpileId}, 1, 1, "
                                        . "{$importedData->column_27}, {$importedData->column_27}, {$totalQuantity}, {$totalShipment}, "
                                        . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                
                                $boolContinue = true;
                                if($result !== false) {
                                    $salesId = $myDatabase->insert_id;
                                    
                                    for($i = 1; $i <= $totalShipment; $i++) {
                                        $shipmentCode = $salesNo .'-'. $i;

                                        $sql = "INSERT INTO `shipment` (shipment_code, sales_id, entry_by, entry_date) VALUES ("
                                                . "'{$shipmentCode}', {$salesId}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    }
                                } else {
                                    $boolContinue = false;
                                }
                            }
                            
                            if($boolContinue) {
                                $sql = "SELECT shipment_id FROM shipment WHERE shipment_code LIKE '{$salesNo}%' AND shipment_status = 0 ORDER BY shipment_code ASC LIMIT 1";
                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                if($result->num_rows == 1) {
                                    $row = $result->fetch_object();
                                    $shipmentId = $row->shipment_id;
                                    
                                    $shrink = (float) $importedData->column_13 - (float) $importedData->column_16;

                                    // get next slip no
                                    $checkSlipNo = $stockpileCode .'-'. $importedData->trans_year;
                                    $sql = "SELECT LPAD(RIGHT(slip_no, 10) + 1, 10, '0') AS next_id FROM transaction WHERE slip_no LIKE '{$checkSlipNo}%' ORDER BY transaction_id DESC LIMIT 1";
                                    $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    if($resultSlip->num_rows == 0) {
                                        $sql = "SELECT LPAD(1, 10, '0') AS next_id FROM transaction LIMIT 1";
                                        $resultSlip = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    }

                                    $rowSlipNo = $resultSlip->fetch_object();
                                    $nextSlipNo = $rowSlipNo->next_id;
                                    $slipNo = $checkSlipNo .'-'. $nextSlipNo;
                                    
                                    $sql = "INSERT INTO `transaction` (slip_no, product_id, shipment_id, transaction_date, vehicle_no, transaction_type, "
                                            . "send_weight, quantity, shrink, entry_by, entry_date) VALUES ('{$slipNo}', 1, "
                                            . "{$shipmentId}, STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), '{$importedData->column_9}', 2, "
                                            . "{$importedData->column_13}, {$importedData->column_16}, {$shrink}, "
                                            . "{$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                    
                                    if($result !== false) {
                                        $transactionId = $myDatabase->insert_id;

                                        // insert into delivery
                                        $sql = "SELECT t.* 
                                                FROM transaction t 
                                                WHERE t.stockpile_contract_id IN (
                                                    SELECT stockpile_contract_id FROM stockpile_contract WHERE stockpile_id = {$stockpileId}
                                                ) AND t.transaction_type = 1 AND t.delivery_status <> 1
                                                ORDER BY t.unloading_date ASC";
                                        $resultDelivery = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        $totalInventoryValue = 0;
                                        if($resultDelivery !== false && $resultDelivery->num_rows > 0) {
                                            $balanceLeft = (float) $importedData->column_13;
                                            while($rowDelivery = $resultDelivery->fetch_object()) {
                                                if($balanceLeft > 0) {
                                                    if($rowDelivery->delivery_status == 0) {
                                                        if($balanceLeft >= $rowDelivery->quantity) {
                                                            $balanceLeft = $balanceLeft - $rowDelivery->quantity;
                                                            $quantityTaken = $rowDelivery->quantity;
                                                            $percentTaken = 1;
                                                            $deliveryStatus = 1;
                                                        } elseif($balanceLeft < $rowDelivery->quantity) {
                                                            $quantityTaken = $balanceLeft;
                                                            $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                                            $balanceLeft = 0;
                                                            $deliveryStatus = 2;
                                                        }
                                                    } elseif($rowDelivery->delivery_status == 2) {
                                                        $totalTaken = 0;
                                                        $sql = "SELECT SUM(quantity) AS total_taken FROM delivery WHERE transaction_id = {$rowDelivery->transaction_id}";
                                                        $resultTaken = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                                        if($resultTaken !== false && $resultTaken->num_rows == 1) {
                                                            $rowTaken = $resultTaken->fetch_object();
                                                            $totalTaken = $rowTaken->total_taken;
                                                        }

                                                        if($balanceLeft >= ($rowDelivery->quantity - $totalTaken)) {
                                                            $balanceLeft = $balanceLeft - ($rowDelivery->quantity - $totalTaken);
                                                            $quantityTaken = ($rowDelivery->quantity - $totalTaken);
                                                            $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                                            $deliveryStatus = 1;
                                                        } elseif($balanceLeft < ($rowDelivery->quantity - $totalTaken)) {
                                                            $quantityTaken = $balanceLeft;
                                                            $percentTaken = ($quantityTaken/$rowDelivery->quantity) * 1;
                                                            $balanceLeft = 0;
                                                            $deliveryStatus = 2;
                                                        }
                                                    } 

                                                    $deliveryValue = $quantityTaken * (float) $importedData->column_27;
                                                    $inventoryValue = $percentTaken * $rowDelivery->inventory_value;
                                                    $totalInventoryValue = $totalInventoryValue + $inventoryValue;
                                                    $percentTaken = $percentTaken * 100;

                                                    $sql = "INSERT INTO delivery (shipment_id, transaction_id, delivery_date, percent_taken, quantity, inventory_value, delivery_value, entry_by, entry_date) VALUES ("
                                                            . "{$shipmentId}, {$rowDelivery->transaction_id}, STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), {$percentTaken}, "
                                                            . "{$quantityTaken}, {$inventoryValue}, {$deliveryValue}, {$_SESSION['userId']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
                                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                                    $sql = "UPDATE transaction SET delivery_status = {$deliveryStatus} WHERE transaction_id = {$rowDelivery->transaction_id}";
                                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                                }
                                            }
                                        }

                                        //$updateInventoryValue = ($blWeight/$sendWeight2) * $totalInventoryValue;
                                        $updateInventoryValue = $totalInventoryValue;

                                        $sql = "UPDATE transaction SET inventory_value = {$updateInventoryValue} WHERE transaction_id = {$transactionId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                        // update shipment
                                        $cogsAmount = $updateInventoryValue;
                                        $invoiceAmount = (float) $importedData->column_16 * (float) $importedData->column_27;
                                        $sql = "UPDATE shipment SET shipment_date = STR_TO_DATE('{$importedData->column_5}', '%Y-%m-%d'), "
                                                . "cogs_amount = {$cogsAmount}, invoice_amount = {$invoiceAmount}, quantity = {$importedData->column_16}, shipment_status = 1 "
                                                . "WHERE shipment_id = {$shipmentId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

                                        $sql = "SELECT COALESCE(SUM(quantity), 0) AS delivered_balance FROM `transaction` 
                                                WHERE shipment_id IN (SELECT shipment_id FROM `shipment` WHERE sales_id = {$salesId})
                                                AND transaction_type = 2
                                                AND transaction_id <> {$transactionId}";
                                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        $row = $result->fetch_object();
                                        $deliveredBalance = $row->delivered_balance;
                                        
                                        // update sales
                                        $boolUpdateSales = false;
                                        if((float) $importedData->column_13 == ($salesBalance - $deliveredBalance)) {
                                            $salesStatus = 1;
                                            $boolUpdateSales = true;
                                        } elseif((float) $importedData->column_13 < ($salesBalance - $deliveredBalance)) {
                                            $salesStatus = 2;
                                            $boolUpdateSales = true;
                                        }

                                        if($boolUpdateSales) {
                                            $sql = "UPDATE sales SET sales_status = {$salesStatus} WHERE sales_id = {$salesId}";
                                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                                        }
                                        
                                        $successRow = $successRow + 1;
                                    } else {
                                        $errorRow = $errorRow + 1;
                                    }
                                } else {
                                    $errorRow = $errorRow + 1;
                                }
                            }
                        }
                        
                        // </editor-fold>
                    }
                    
//                    // <editor-fold defaultstate="collapsed" desc="validate shipment date">
//                    $shipmentDate = "";
//                    if(validateDate($importedData->column_2, 'Y-m-d')) {
//                        $shipmentDate = $importedData->column_2;
//                        $shipmentDate2 = $importedData->column_2.' 23:59:59';
//                    } else {
//                        $shipmentError = $shipmentError + 1;
//                        if($shipmentQuotation == '') {
//                            $shipmentQuotation = "'". $importedData->column_1 ."'";
//                        } else {
//                            $shipmentQuotation .= ",'". $importedData->column_1 ."'";
//                        }
//                        $warningRow = $warningRow + 1;
//                        $counterRow++;
//                        continue;
//                    }
//                    // </editor-fold>
//                    
//                    // <editor-fold defaultstate="collapsed" desc="get insured details">
//                    $insuredName = '';
//                    $insuredAddress = '';
//                    $sql = "SELECT i.*,
//                                CONCAT(CASE WHEN i.title=1 THEN 'Mr. ' WHEN i.title=2 THEN 'Ms. ' WHEN i.title=3 THEN 'Mrs. ' WHEN i.title=4 THEN 'PT. ' WHEN i.title=5 THEN 'CV. ' ELSE '' END  , i.insured_name) as insured_name2
//                            FROM insured i
//                            WHERE i.insured_id = {$insuredId}";
//                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                    if($result !== false && $result->num_rows == 1) {
//                        $row = $result->fetch_object();
//                        $insuredName = $row->insured_name;
//                        $insuredAddress = $row->address1;
//                    } else {
//                        $insuredError = $insuredError + 1;
//                        if($insuredQuotation == '') {
//                            $insuredQuotation = "'". $importedData->column_1 ."'";
//                        } else {
//                            $insuredQuotation .= ",'". $importedData->column_1 ."'";
//                        }
//                        $warningRow = $warningRow + 1;
//                        $counterRow++;
//                        continue;
//                    }
//                    // </editor-fold>
//                    
//                    // <editor-fold defaultstate="collapsed" desc="get currency id">
//                    $currencyId = "";
//                    $sql = "SELECT cur.currency_id
//                            FROM currency cur
//                            WHERE UPPER(cur.currency_code) = UPPER('{$importedData->column_6}')";
//                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                    if($result !== false && $result->num_rows == 1) {
//                        $row = $result->fetch_object();
//                        $currencyId = $row->currency_id;
//                        
//                        // <editor-fold defaultstate="collapsed" desc="get exchange rate to company">
//                
//                        if($currencyId == $companyCurrencyId) {
//                            $exchangeRate = 1;
//                            $operatorSign = '*';
//                        } else {
//                            $returnExchgRate = getExchangeRateGlobal($currencyId, $companyCurrencyId, $shipmentDate2);
//                            $returnExchgRate = explode("|", $returnExchgRate);
//
//                            $exchangeRate = $returnExchgRate[0];
//                            $operatorSign = $returnExchgRate[1];
//                        }
//
//                        // </editor-fold>
//                        
//                        // <editor-fold defaultstate="collapsed" desc="get exchange rate to report">
//                
//                        if($currencyId == $companyCurrencyIdReport) {
//                            $exchangeRate2Report = 1;
//                            $operatorSign2Report = '*';
//                        } else {
//                            $returnExchgRate = getExchangeRateGlobal($currencyId, $companyCurrencyIdReport, $shipmentDate2);
//                            $returnExchgRate = explode("|", $returnExchgRate);
//
//                            $exchangeRate2Report = $returnExchgRate[0];
//                            $operatorSign2Report = $returnExchgRate[1];
//                        }
//
//                        // </editor-fold>
//                    } else {
//                        $currencyError = $currencyError + 1;
//                        if($currencyQuotation == '') {
//                            $currencyQuotation = "'". $importedData->column_1 ."'";
//                        } else {
//                            $currencyQuotation .= ",'". $importedData->column_1 ."'";
//                        }                        
//                        $warningRow = $warningRow + 1;
//                        $counterRow++;
//                        continue;
//                    }
//                    // </editor-fold>
//                    
//                    // <editor-fold defaultstate="collapsed" desc="get category id & rate">
//                    $categoryId = "";
//                    $rate = "";
//                    $sql = "SELECT cat.category_id
//                            FROM category cat
//                            WHERE cat.appl_id = {$_SESSION['appID']} AND cat.category_module = 1 
//                            AND UPPER(cat.category_name) = UPPER('{$importedData->column_10}')";
//                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                    if($result !== false && $result->num_rows == 1) {
//                        $row = $result->fetch_object();
//                        $categoryId = $row->category_id;
//                        
//                        //get rate & premium
//                        if($currencyId != '') {
//                            $sql2 = "SELECT copcr.rate, copcr.currency_id
//                                    FROM client_op_category_rate copcr 
//                                    INNER JOIN client_open_policy cop 
//                                        ON cop.client_op_id = copcr.client_op_id 
//                                    WHERE copcr.client_op_id = {$clientOpId} AND copcr.category_id = {$categoryId}";
//                            $result2 = $myDatabase->query($sql2, MYSQLI_STORE_RESULT);
//                            if($result2 !== false && $result2->num_rows == 1) {
//                                $rowCatRate = $result2->fetch_object();
//                                $rate = $rowCatRate->rate;
//                                $maxCurrencyId = $rowCatRate->currency_id;
//
//                                // <editor-fold defaultstate="collapsed" desc="get exchange rate to max si">
//
//                                if($currencyId == $maxCurrencyId) {
//                                    $maxExchangeRate = 1;
//                                    $maxOperatorSign = '*';
//                                } else {
//                                    $returnExchgRate = getExchangeRateGlobal($currencyId, $maxCurrencyId);
//                                    $returnExchgRate = explode("|", $returnExchgRate);
//
//                                    $maxExchangeRate = $returnExchgRate[0];
//                                    $maxOperatorSign = $returnExchgRate[1];
//                                }
//
//                                // </editor-fold>
//                            } else {
//                                $rateError = $rateError + 1;
//                                if($rateQuotation == '') {
//                                    $rateQuotation = "'". $importedData->column_1 ."'";
//                                } else {
//                                    $rateQuotation .= ",'". $importedData->column_1 ."'";
//                                }
//                                $warningRow = $warningRow + 1;
//                                $counterRow++;
//                                continue;
//                            }
//                        }
//                    } else {
//                        $categoryError = $categoryError + 1;
//                        if($categoryQuotation == '') {
//                            $categoryQuotation = "'". $importedData->column_1 ."'";
//                        } else {
//                            $categoryQuotation .= ",'". $importedData->column_1 ."'";
//                        }
//                        $warningRow = $warningRow + 1;
//                        $counterRow++;
//                        continue;
//                    }
//                    // </editor-fold>
//                    
//                    // <editor-fold defaultstate="collapsed" desc="get country id">
//                    $countryFrom = "";
//                    $sql = "SELECT c.country_id
//                            FROM country c
//                            WHERE UPPER(c.name_of_country) = UPPER('{$importedData->column_12}')";
//                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                    if($result !== false && $result->num_rows == 1) {
//                        $row = $result->fetch_object();
//                        $countryFrom = $row->country_id;
//                    } else {
//                        $countryFromError = $countryFromError + 1;
//                        if($countryFromQuotation == '') {
//                            $countryFromQuotation = "'". $importedData->column_1 ."'";
//                        } else {
//                            $countryFromQuotation .= ",'". $importedData->column_1 ."'";
//                        }
//                        $warningRow = $warningRow + 1;
//                        $counterRow++;
//                        continue;
//                    }
//
//                    $countryTo = "";
//                    $sql = "SELECT c.country_id
//                            FROM country c
//                            WHERE UPPER(c.name_of_country) = UPPER('{$importedData->column_14}')";
//                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                    if($result !== false && $result->num_rows == 1) {
//                        $row = $result->fetch_object();
//                        $countryTo = $row->country_id;
//                    } else {
//                        $countryToError = $countryToError + 1;
//                        if($countryToQuotation == '') {
//                            $countryToQuotation = "'". $importedData->column_1 ."'";
//                        } else {
//                            $countryToQuotation .= ",'". $importedData->column_1 ."'";
//                        }
//                        $warningRow = $warningRow + 1;
//                        $counterRow++;
//                        continue;
//                    }
//                    // </editor-fold>
//                    
//                    if($shipmentDate != '' && $categoryId != '' && $rate != '' && $insuredName != '' && $insuredAddress != '' && $currencyId != '' &&
//                            $countryFrom != '' && $countryTo != '') {
//                        
//                        // Check duplication
//                        
//                        $sql = "SELECT * FROM jb_policy WHERE UPPER(quotation_no) = UPPER('{$importedData->column_1}')";
//                        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                        
//                        if($result !== false && $result->num_rows == 0) {
//                            // <editor-fold defaultstate="collapsed" desc="Insert new row to next_folio_no">
//                            $folioNo = "";
//                            $sql = "INSERT INTO next_folio_no (entry_date) VALUES (STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
//                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//                            if($result !== false) {
//                                $folioNo = $myDatabase->insert_id;
//                            }
//                            // </editor-fold>
//
//                            $netPremium = round(((float) $importedData->column_11 * ($rate/100)), 2);
//
//                            $sql = "INSERT INTO jb_policy (op_id, quotation_no, policy_folio, business_type, cover_type, client_id, account_executive_id, "
//                                    . "category_id, insured_id, insured_name, insured_address, period_from, period_to, currency_id, exchange_rate, operator_sign, "
//                                    . "exchange_rate_2_report, operator_sign_2_report, brokerage, net_premium_client, closing_date, user_id, entry_date) VALUES ("
//                                    . "$opId, '{$importedData->column_1}', {$folioNo}, 1, {$coverType}, {$clientId}, {$aeId}, {$categoryId}, {$insuredId}, "
//                                    . "'{$insuredName}', '{$insuredAddress}', '{$opPeriodFrom}', '{$opPeriodTo}', {$currencyId}, {$exchangeRate}, '{$operatorSign}', "
//                                    . "{$exchangeRate2Report}, '{$operatorSign2Report}', {$brokerage}, {$netPremium}, '{$shipmentDate}', "
//                                    . "{$_SESSION['userID']}, STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
//                            $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//                            if($result !== false) {
//                                $jbId = $myDatabase->insert_id;
//
//                                // <editor-fold defaultstate="collapsed" desc="Query Insert to jb_policy_underwriter">
//
//                                $sql = "INSERT INTO jb_policy_underwriter (jb_id, type, underwriter_id, share) "
//                                        . "SELECT {$jbId}, type, underwriter_id, share FROM open_policy_underwriter "
//                                        . "WHERE op_id = (SELECT op_id FROM client_open_policy WHERE client_op_id = {$clientOpId})";
//                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//                                // </editor-fold>
//
//                                
//                                $sql = "INSERT INTO jb_policy_detail (jb_id, shipment_date, country_of_origin, city_of_origin, country_of_destination, "
//                                        . "city_of_destination, invoice_no, awb_no, mawb_no, taken_from, original_currency, exchange_rate, "
//                                        . "operator_sign, exchg_rate_max_si, operator_sign_max_si, total_shipment_value, primary_insurance_value, "
//                                        . "howden_insured_value, rate, premium, notes) VALUES ("
//                                        . "{$jbId}, '{$shipmentDate}', {$countryFrom}, '{$importedData->column_13}', {$countryTo}, '{$importedData->column_15}', "
//                                        . "'{$importedData->column_4}', '{$importedData->column_3}', '{$importedData->column_5}', '{$importedData->column_8}', "
//                                        . "{$currencyId}, {$exchangeRate}, '{$operatorSign}', {$maxExchangeRate}, '{$maxOperatorSign}', "
//                                        . "{$importedData->column_7}, {$importedData->column_9}, {$importedData->column_11}, {$rate}, {$netPremium}, "
//                                        . "'{$importedData->column_16}')";
//                                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//
//                                if($result !== false) {
//                                    // Insert to general_progress
//                                    $sql = "INSERT INTO general_progress (jb_id, progress_id, entry_by, entry_date) VALUES ("
//                                            . "{$jbId}, (SELECT progress_id FROM progress WHERE progress_code = '710' AND appl_id = ". $_SESSION['appID'] ." AND progress_module = 1), ". $_SESSION['userID'] .", STR_TO_DATE('$currentDate', '%d/%m/%Y %H:%i:%s'))";
//                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);                                    
//
//                                    $successRow = $successRow + 1;
//                                } else {
//                                    $sql = "DELETE FROM jb_policy WHERE jb_id = {$jbId}";
//                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                                    $sql = "DELETE FROM jb_policy_underwriter WHERE jb_id = {$jbId}";
//                                    $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
//                                    $errorRow = $errorRow + 1;
//                                }
//                            } else {
//                                $errorRow = $errorRow + 1;
//                            }
//                        } else {
//                            $duplicateError = $duplicateError + 1;
//                            $warningRow = $warningRow + 1;
//                            if($duplicateQuotation == '') {
//                                $duplicateQuotation = "'". $importedData->column_1 ."'";
//                            } else {
//                                $duplicateQuotation .= ",'". $importedData->column_1 ."'";
//                            }
//                        }
//                        
//                    } 
                }
                $counterRow++;
            }
            
            if(($successRow+$warningRow) == ($counterRow-1) && $errorRow == 0) {
                $result = $myDatabase->query("COMMIT", MYSQLI_STORE_RESULT);
                
                $sql = "DROP TABLE {$tempTable}";
                $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
                
//                if($duplicateError > 0) {
//                    $errorMessage .= '<br/>'. $duplicateError . ' Row(s) failed to be import due to duplication data.';
//                }
//                if($shipmentError > 0) {
//                    $errorMessage .= '<br/>'. $shipmentError . ' Row(s)failed to be import due to invalid shipment date.';
//                }
//                if($categoryError > 0) {
//                    $errorMessage .= '<br/>'. $categoryError .' Row(s) failed to be import due to coverage information was not identify.';
//                }
//                if($rateError > 0) {
//                    $errorMessage .= '<br/>'. $rateError .' Row(s) failed to be import due to rate was not identify.';
//                }
//                if($currencyError > 0) {
//                    $errorMessage .= '<br/>'. $currencyError .' Row(s) failed to be import due to currency information was not identify.';
//                }
//                if($insuredError > 0) {
//                    $errorMessage .= '<br/>'. $insuredError .' Row(s) failed to be import due to insured information was not identify.';
//                }
//                if($countryFromError > 0) {
//                    $errorMessage .= '<br/>'. $countryFromError .' Row(s) failed to be import due to country information was not identify.';
//                }
//                if($countryToError > 0) {
//                    $errorMessage .= '<br/>'. $countryToError .' Row(s) failed to be import due to country information was not identify.';
//                }
//                
//                // prepare warning data
//                $fileLink = '';
//                if($warningRow > 0 || $duplicateError > 0) {
//                    // <editor-fold defaultstate="collapsed" desc="Define Style for excel">
//                    $styleArray = array(
//                        'font' => array(
//                            'bold' => true
//                        ),
//                        'alignment' => array(
//                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
//                        ),
//                        'borders' => array(
//                            'top' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            )
//                        ),
//                        'fill' => array(
//                            'type' => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
//                            'rotation' => 90,
//                            'startcolor' => array(
//                                'argb' => 'FFA0A0A0'
//                            ),
//                            'endcolor' => array(
//                                'argb' => 'FFFFFFFF'
//                            )
//                        )
//                    );
//
//                    $styleArray1 = array(
//                        'alignment' => array(
//                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
//                        )
//                    );
//
//                    $styleArray2 = array(
//                        'font' => array(
//                            'bold' => true,
//                            'size' => 14
//                        ),
//                        'alignment' => array(
//                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
//                        )
//                    );
//
//                    $styleArray3 = array(
//                        'font' => array(
//                            'bold' => true
//                        )
//                    );
//
//                    $styleArray4 = array(
//                        'font' => array(
//                            'bold' => true
//                        ),
//                        'alignment' => array(
//                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
//                        ),
//                        'borders' => array(
//                            'top' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'left' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'right' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'bottom' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            )
//                        )
//                    );
//
//                    $styleArray5 = array(
//                        'alignment' => array(
//                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT
//                        ),
//                        'borders' => array(
//                            'top' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'left' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'right' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'bottom' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            )
//                        )
//                    );
//
//                    $styleArray6 = array(
//                        'alignment' => array(
//                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
//                        ),
//                        'borders' => array(
//                            'top' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'left' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'right' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'bottom' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            )
//                        )
//                    );
//
//                    $styleArray7 = array(
//                        'alignment' => array(
//                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
//                        ),
//                        'borders' => array(
//                            'top' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'left' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'right' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            ),
//                            'bottom' => array(
//                                'style' => PHPExcel_Style_Border::BORDER_THIN
//                            )
//                        )
//                    );
//
//                    $styleArray8 = array(
//                        'font' => array(
//                            'bold' => true
//                        ),
//                        'alignment' => array(
//                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
//                        )
//                    );
//
//                    $styleArray9 = array(
//                        'fill' => array(
//                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
//                            'color' => array('rgb' => 'FFFF00')
//                        )
//                    );
//                    // </editor-fold>
//
//                    $fileName = "JB Warning Import " . str_replace(" ", "-", $_SESSION['userName']) . " " . date("Ymd-His") . ".xls";
//                    $onSheet = 0;
//                    $lastColumn = "Q";
//
//                    // <editor-fold defaultstate="collapsed" desc="Create Excel and Define Warning Data's Header">
//                    $objPHPExcel2 = new PHPExcel();
//                    PHPExcel_Cell::setValueBinder(new PHPExcel_Cell_AdvancedValueBinder());
//
//                    $objPHPExcel2->setActiveSheetIndex($onSheet);
//                    $objPHPExcel2->getActiveSheet()->getSheetView()->setZoomScale(75);
//                    $objPHPExcel2->getActiveSheet()->getPageSetup()->setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);
//                    $objPHPExcel2->getDefaultStyle()->getFont()->setName('Arial');
//                    $objPHPExcel2->getDefaultStyle()->getFont()->setSize(12);
//                    $objPHPExcel2->getActiveSheet()->getDefaultRowDimension()->setRowHeight(15);
//
//                    $objPHPExcel2->getActiveSheet()->setTitle("Import Warning");
//                    
//                    $rowActive = 1;
//                    $headerRow = $rowActive;
//                    $bodyRowEnd = 0;
//                    $objPHPExcel2->getActiveSheet()->setCellValue("A{$rowActive}", "No");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("B{$rowActive}", "Ref. No.");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("C{$rowActive}", "Date");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("D{$rowActive}", "AWB No.");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("E{$rowActive}", "Invoice No.");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("F{$rowActive}", "Delivery No. (MAWB No.)");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("G{$rowActive}", "Currency");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("H{$rowActive}", "Total Value");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("I{$rowActive}", "Carrier");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("J{$rowActive}", "Primary Insurance with Carrier");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("K{$rowActive}", "Coverage");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("L{$rowActive}", "Insured Value");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("M{$rowActive}", "Country From");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("N{$rowActive}", "City From");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("O{$rowActive}", "Country To");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("P{$rowActive}", "City To");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("Q{$rowActive}", "Remarks");
//    //                $objPHPExcel2->getActiveSheet()->setCellValue("R{$rowActive}", "Warning Notes");
//
//                    $objPHPExcel2->getActiveSheet()->getStyle("A{$rowActive}:{$lastColumn}{$rowActive}")->applyFromArray($styleArray4);
//
//                    // </editor-fold>
//                    
//                    // <editor-fold defaultstate="collapsed" desc="Query warning data">
//                    $sqlWarning = "";
//                    $conditionWarning = "";
//                    if($shipmentQuotation != '') {
//                        $conditionWarning .= $shipmentQuotation;
//                    }
//
//                    if($categoryQuotation != '') {
//                        if($conditionWarning != '') {
//                            $conditionWarning .= " , ";
//                        }
//                        $conditionWarning .= $categoryQuotation;
//                    }
//
//                    if($rateQuotation != '') {
//                        if($conditionWarning != '') {
//                            $conditionWarning .= " , ";
//                        }
//                        $conditionWarning .= $rateQuotation;
//                    }
//
//                    if($currencyQuotation != '') {
//                        if($conditionWarning != '') {
//                            $conditionWarning .= " , ";
//                        }
//                        $conditionWarning .= $currencyQuotation;
//                    }
//
//                    if($insuredQuotation != '') {
//                        if($conditionWarning != '') {
//                            $conditionWarning .= " , ";
//                        }
//                        $conditionWarning .= $insuredQuotation;
//                    }
//
//                    if($countryFromQuotation != '') {
//                        if($conditionWarning != '') {
//                            $conditionWarning .= " , ";
//                        }
//                        $conditionWarning .= $countryFromQuotation;
//                    }
//
//                    if($countryToQuotation != '') {
//                        if($conditionWarning != '') {
//                            $conditionWarning .= " , ";
//                        }
//                        $conditionWarning .= $countryToQuotation;
//                    }
//                    // </editor-fold>
//
//                    if($conditionWarning != '') {
//                        // <editor-fold defaultstate="collapsed" desc="Create Excel Warning Data Body">
//                        
//                        $sqlWarning = "SELECT * FROM $tempTable WHERE column_1 IN ({$conditionWarning})";
//                        $resultWarning = $myDatabase->query($sqlWarning, MYSQLI_STORE_RESULT);
//
//                        $rowNo = 1;
//                        while($rowWarning = $resultWarning->fetch_object()) {
//                            $rowActive++;
//                            $objPHPExcel2->getActiveSheet()->setCellValue("A{$rowActive}", $rowNo);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("B{$rowActive}", $rowWarning->column_1);
//        //                    $objPHPExcel2->getActiveSheet()->setCellValue("C{$rowActive}", $rowWarning->column_2);
//                            $objPHPExcel2->getActiveSheet()->getCell("C{$rowActive}")->setValueExplicit(PHPExcel_Shared_Date::stringToExcel($rowWarning->column_2), PHPExcel_Cell_DataType::TYPE_NUMERIC);
//                            $checkShipmentDate = strpos($shipmentQuotation, $rowWarning->column_1);
//                            if($checkShipmentDate !== false) {
//                                $objPHPExcel2->getActiveSheet()->getStyle("C{$rowActive}")->applyFromArray($styleArray9);
//                            }
//                            $objPHPExcel2->getActiveSheet()->setCellValue("D{$rowActive}", $rowWarning->column_3);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("E{$rowActive}", $rowWarning->column_4);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("F{$rowActive}", $rowWarning->column_5);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("G{$rowActive}", $rowWarning->column_6);
//                            $checkCurrency = strpos($currencyQuotation, $rowWarning->column_1);
//                            if($checkCurrency !== false) {
//                                $objPHPExcel2->getActiveSheet()->getStyle("G{$rowActive}")->applyFromArray($styleArray9);
//                            }
//                            $objPHPExcel2->getActiveSheet()->setCellValue("H{$rowActive}", $rowWarning->column_7);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("I{$rowActive}", $rowWarning->column_8);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("J{$rowActive}", $rowWarning->column_9);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("K{$rowActive}", $rowWarning->column_10);
//                            $checkCoverage = strpos($categoryQuotation, $rowWarning->column_1);
//                            if($checkCoverage !== false) {
//                                $objPHPExcel2->getActiveSheet()->getStyle("K{$rowActive}")->applyFromArray($styleArray9);
//                            }
//                            $checkRate = strpos($rateQuotation, $rowWarning->column_1);
//                            if($checkRate !== false) {
//                                $objPHPExcel2->getActiveSheet()->getStyle("K{$rowActive}")->applyFromArray($styleArray9);
//                            }
//                            $objPHPExcel2->getActiveSheet()->setCellValue("L{$rowActive}", $rowWarning->column_11);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("M{$rowActive}", $rowWarning->column_12);
//                            $checkFrom = strpos($countryFromQuotation, $rowWarning->column_1);
//                            if($checkFrom !== false) {
//                                $objPHPExcel2->getActiveSheet()->getStyle("M{$rowActive}")->applyFromArray($styleArray9);
//                            }
//                            $objPHPExcel2->getActiveSheet()->setCellValue("N{$rowActive}", $rowWarning->column_13);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("O{$rowActive}", $rowWarning->column_14);
//                            $checkTo = strpos($countryToQuotation, $rowWarning->column_1);
//                            if($checkTo !== false) {
//                                $objPHPExcel2->getActiveSheet()->getStyle("O{$rowActive}")->applyFromArray($styleArray9);
//                            }
//                            $objPHPExcel2->getActiveSheet()->setCellValue("P{$rowActive}", $rowWarning->column_15);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("Q{$rowActive}", $rowWarning->column_16);
//
//                            $rowNo++;
//                        }
//                        $bodyRowEnd = $rowActive;
//                        
//                        // </editor-fold>
//                    }
//                    
//                    // <editor-fold defaultstate="collapsed" desc="Formating Excel Warning data">
//                    // Set column width
//                    for ($temp = ord("A"); $temp <= ord("Z"); $temp++) {
//                        $objPHPExcel2->getActiveSheet()->getColumnDimension(chr($temp))->setAutoSize(true);
//                        $objPHPExcel2->getActiveSheet()->getColumnDimension(chr($temp))->setAutoSize(true);
//                    }
//
//                    // Set format date in cell
//                    if ($bodyRowEnd > $headerRow) {
//                        $objPHPExcel2->getActiveSheet()->getStyle("C" . ($headerRow + 1) . ":C{$bodyRowEnd}")->getNumberFormat()->setFormatCode("M/D/YYYY");
//                    }
//
//                    // Set number format for Amount 
//                    $objPHPExcel2->getActiveSheet()->getStyle("H" . ($headerRow + 1) . ":H{$bodyRowEnd}")->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED1);
//                    $objPHPExcel2->getActiveSheet()->getStyle("J" . ($headerRow + 1) . ":J{$bodyRowEnd}")->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED1);
//                    $objPHPExcel2->getActiveSheet()->getStyle("L" . ($headerRow + 1) . ":L{$bodyRowEnd}")->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED1);
//
//                    // Set border for table
//                    $objPHPExcel2->getActiveSheet()->getStyle("A" . ($headerRow) . ":{$lastColumn}{$bodyRowEnd}")->getBorders()->getAllBorders()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
//
//                    // </editor-fold>
//                    
//                    // <editor-fold defaultstate="collapsed" desc="Create Excel and Define Duplication Data's Header">
//                    
//                    $objPHPExcel2->createSheet(1);
//                    // Rename sheet
////                    $objPHPExcel2->getSheet(1)->setTitle('Duplication');
//                    $objPHPExcel2->setActiveSheetIndex(1);
//                    $objPHPExcel2->getActiveSheet()->getSheetView()->setZoomScale(75);
//                    $objPHPExcel2->getActiveSheet()->getPageSetup()->setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);
//                    $objPHPExcel2->getDefaultStyle()->getFont()->setName('Arial');
//                    $objPHPExcel2->getDefaultStyle()->getFont()->setSize(12);
//                    $objPHPExcel2->getActiveSheet()->getDefaultRowDimension()->setRowHeight(15);
//
//                    $objPHPExcel2->getActiveSheet()->setTitle("Duplication");
//                    
//                    $rowActive = 1;
//                    $headerRow = $rowActive;
//                    $bodyRowEnd = 0;
//                    $objPHPExcel2->getActiveSheet()->setCellValue("A{$rowActive}", "No");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("B{$rowActive}", "Ref. No.");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("C{$rowActive}", "Date");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("D{$rowActive}", "AWB No.");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("E{$rowActive}", "Invoice No.");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("F{$rowActive}", "Delivery No. (MAWB No.)");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("G{$rowActive}", "Currency");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("H{$rowActive}", "Total Value");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("I{$rowActive}", "Carrier");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("J{$rowActive}", "Primary Insurance with Carrier");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("K{$rowActive}", "Coverage");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("L{$rowActive}", "Insured Value");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("M{$rowActive}", "Country From");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("N{$rowActive}", "City From");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("O{$rowActive}", "Country To");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("P{$rowActive}", "City To");
//                    $objPHPExcel2->getActiveSheet()->setCellValue("Q{$rowActive}", "Remarks");
//    //                $objPHPExcel2->getActiveSheet()->setCellValue("R{$rowActive}", "Warning Notes");
//
//                    $objPHPExcel2->getActiveSheet()->getStyle("A{$rowActive}:{$lastColumn}{$rowActive}")->applyFromArray($styleArray4);
//                    
//                    // </editor-fold>
//                    
//                    // <editor-fold defaultstate="collapsed" desc="Query duplication data">
//                    $sqlDuplicate = "";
//                    if($duplicateQuotation != '') {
//                        $sqlDuplicate .= "SELECT * FROM $tempTable WHERE column_1 IN ({$duplicateQuotation})";
//                    }
//                    // </editor-fold>
//                    
//                    if($sqlDuplicate != '') {
//                        // <editor-fold defaultstate="collapsed" desc="Create Excel Duplication Data Body">
//                        
//                        $resultDuplicate = $myDatabase->query($sqlDuplicate, MYSQLI_STORE_RESULT);
//
//                        $rowNo = 1;
//                        while($rowDuplicate = $resultDuplicate->fetch_object()) {
//                            $rowActive++;
//                            $objPHPExcel2->getActiveSheet()->setCellValue("A{$rowActive}", $rowNo);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("B{$rowActive}", $rowDuplicate->column_1);
//        //                    $objPHPExcel2->getActiveSheet()->setCellValue("C{$rowActive}", $rowDuplicate->column_2);
//                            $objPHPExcel2->getActiveSheet()->getCell("C{$rowActive}")->setValueExplicit(PHPExcel_Shared_Date::stringToExcel($rowDuplicate->column_2), PHPExcel_Cell_DataType::TYPE_NUMERIC);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("D{$rowActive}", $rowDuplicate->column_3);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("E{$rowActive}", $rowDuplicate->column_4);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("F{$rowActive}", $rowDuplicate->column_5);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("G{$rowActive}", $rowDuplicate->column_6);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("H{$rowActive}", $rowDuplicate->column_7);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("I{$rowActive}", $rowDuplicate->column_8);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("J{$rowActive}", $rowDuplicate->column_9);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("K{$rowActive}", $rowDuplicate->column_10);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("L{$rowActive}", $rowDuplicate->column_11);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("M{$rowActive}", $rowDuplicate->column_12);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("N{$rowActive}", $rowDuplicate->column_13);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("O{$rowActive}", $rowDuplicate->column_14);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("P{$rowActive}", $rowDuplicate->column_15);
//                            $objPHPExcel2->getActiveSheet()->setCellValue("Q{$rowActive}", $rowDuplicate->column_16);
//
//                            $rowNo++;
//                        }
//                        $bodyRowEnd = $rowActive;
//                        
//                        // </editor-fold>
//                    }
//                    
//                    // <editor-fold defaultstate="collapsed" desc="Formating Excel Duplication data">
//                    // Set column width
//                    for ($temp = ord("A"); $temp <= ord("Z"); $temp++) {
//                        $objPHPExcel2->getActiveSheet()->getColumnDimension(chr($temp))->setAutoSize(true);
//                        $objPHPExcel2->getActiveSheet()->getColumnDimension(chr($temp))->setAutoSize(true);
//                    }
//
//                    // Set format date in cell
//                    if ($bodyRowEnd > $headerRow) {
//                        $objPHPExcel2->getActiveSheet()->getStyle("C" . ($headerRow + 1) . ":C{$bodyRowEnd}")->getNumberFormat()->setFormatCode("M/D/YYYY");
//                    }
//
//                    // Set number format for Amount 
//                    $objPHPExcel2->getActiveSheet()->getStyle("H" . ($headerRow + 1) . ":H{$bodyRowEnd}")->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED1);
//                    $objPHPExcel2->getActiveSheet()->getStyle("J" . ($headerRow + 1) . ":J{$bodyRowEnd}")->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED1);
//                    $objPHPExcel2->getActiveSheet()->getStyle("L" . ($headerRow + 1) . ":L{$bodyRowEnd}")->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED1);
//
//                    // Set border for table
//                    $objPHPExcel2->getActiveSheet()->getStyle("A" . ($headerRow) . ":{$lastColumn}{$bodyRowEnd}")->getBorders()->getAllBorders()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
//
//                    // </editor-fold>
//
//                    $objPHPExcel2->setActiveSheetIndex($onSheet);
//                    
//                    // <editor-fold defaultstate="collapsed" desc="Save Excel and share link">
//                    ob_end_clean();
//                    header('Content-Type: application/vnd.ms-excel');
//                    header('Content-Disposition: attachment;filename="' . $fileName . '"');
//                    header('Cache-Control: max-age=0');
//                    $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel2, 'Excel5');
//                    $objWriter->save('./import/'.$fileName);
//                    $fileLink = './import/'.$fileName;
//                    // </editor-fold>
//                }
//                
//                if($fileLink != '') {
//                    $errorMessage .= '<br/>For more detail failed import data, please click this <a href="'. $fileLink .'" target="_blank" style="font-weight: bold; color: red;">link</a> to download and overview it again.';
//                }

                return "OK|". $successRow ." Row(s) import successfully, ". $warningRow ." Row(s) failed with warning. ". $errorMessage;
            } else {
                $result = $myDatabase->query("ROLLBACK", MYSQLI_STORE_RESULT);

                return "FAIL|Import failed. ". $errorRow ." Rows(s) can not be imported. Please contact administrator. ";
            }
        }
    } else {
        return 'FAIL|File not exists.';
    }
    // </editor-fold>
}

function validateDate($date, $format = 'Y-m-d H:i:s')
{
    $d = DateTime::createFromFormat($format, $date);
    return $d && $d->format($format) == $date;
}

function insertGeneralLedger($myDatabase, $source, $invoiceId = "NULL", $i_id = "NULL", $contractId = "NULL", $transactionId = "NULL", $paymentId = "NULL", $jurnalId = "NULL", $returnId = "NULL") {
    
    $insertValues = "";
    $boolContinue = true;
    
   if($contractId != 'NULL' && $source == 'CONTRACT ADJUSTMENT') {
        // <editor-fold defaultstate="collapsed" desc="contract">
        $sql = "DELETE FROM general_ledger WHERE general_ledger_module = 'CONTRACT ADJUSTMENT' AND contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
       	$adjustment = 0;
		$ppn = 0;
		$totalAdjustment = 0;
		$adjustment1 = 0;
		$ppn1 = 0;
		$totalAdjustment1 = 0;
        $sql = "SELECT con.*, v.*, a.account_no FROM contract con 
LEFT JOIN vendor v ON con.`vendor_id` = v.`vendor_id` LEFT JOIN account a ON a.account_id = con.adjustment_acc WHERE con.contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            
            if($row->contract_type == 'P') {
			
			$adjustment = $row->price_converted * $row->adjustment;
			if($row->adjustment_ppn == 1){
				$ppn = $adjustment * ($row->ppn/100);
			}else{
				$ppn = 0;
			}
			$totalAdjustment = $adjustment + $ppn;
			$totalAdjustment1 = $totalAdjustment;
			if($adjustment < 0 ){
				$adjustment1 = $adjustment * -1;
				$totalAdjustment1 = $totalAdjustment * -1;
				$ppn1 = $ppn * -1;
			}
			$accountNo = $row->account_no;	
			
			$sqlAccount1 = "SELECT account_id, account_no, account_name FROM account WHERE account_type = 1 AND account_no IN (130100, 150410, $accountNo)";
                $resultAccount1 = $myDatabase->query($sqlAccount1, MYSQLI_STORE_RESULT);
                
                if($resultAccount1 !== false && $resultAccount1->num_rows > 0) {
                    while($rowAccount1 = $resultAccount1->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
				if($adjustment != 0 && $adjustment != ''){
							if($rowAccount1->account_no == 130100) {
							if($adjustment < 0){
                            $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, NULL, {$adjustment1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, NULL, {$adjustment})";	
							}
							} elseif($rowAccount1->account_no == 150410) {
							if($adjustment < 0){
                            $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, NULL, {$ppn1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, NULL, {$ppn})";	
							}		
                        	} elseif($rowAccount1->account_no == 210102) {
							if($adjustment < 0){
							$insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, NULL, {$totalAdjustment1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, NULL, {$totalAdjustment1})";
							}
							} elseif($rowAccount1->account_no == 520100) {
                           if($adjustment < 0){
							$insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, NULL, {$totalAdjustment1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, NULL, {$totalAdjustment1})";
							}
							}elseif($rowAccount1->account_no == 150120) {
                           if($adjustment < 0){
							$insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, NULL, {$totalAdjustment1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount1->account_id}, NULL, {$totalAdjustment1})";
							}
							}
						}
				
					}
					}else {
                    $boolContinue = false;
					echo 'FALSE1';
                }
			}else {
                $boolContinue = false;
				echo 'FALSE2';
            }
        } else {
            $boolContinue = false;
			echo 'FALSE3';
        }
        
        // </editor-fold>
    }elseif($contractId != 'NULL' && $source != 'CONTRACT ADJUSTMENT') {
        // <editor-fold defaultstate="collapsed" desc="contract">
        
		   //update surya-----------------------------------------------------------------------------------------------------
        $sql = "SELECT contract_status FROM contract
       WHERE contract_id = {$contractId}";
       $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);

       if($result !== false && $result->num_rows == 1) {
           $row = $result->fetch_object();
           
               $contractStatus = $row->contract_status;}
        //----------------------------------------------------------------------------------------------------------------------------------


		 if($contractStatus !=2){
          $sql = "DELETE FROM general_ledger WHERE contract_id = {$contractId}";
          $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        }
		
        $sql = "SELECT con.*, v.* FROM contract con 
LEFT JOIN vendor v ON con.`vendor_id` = v.`vendor_id`  WHERE con.contract_id = {$contractId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            
           
			
			
			if($row->contract_type == 'P') {
                
                $amount = $row->price_converted * $row->quantity;
				
				if($row->ppn != 0){
				$totalAmount = $amount * 1.1;
				}else{
				$totalAmount = $amount;
				}
				$ppn = $totalAmount - $amount;
				
				
				
                $sqlAccount = "SELECT account_id, account_no, account_name FROM account WHERE account_type = 1 AND account_no IN (130100, 210102, 150410)";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
						
                        if($contractStatus !=2){
                          if($rowAccount->account_no == 130100) {
                              $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, 'Kontrak beli cangkang kontrak', {$amount})";
                          } elseif($rowAccount->account_no == 210102) {
                              $insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalAmount})";
                          } elseif($rowAccount->account_no == 150410) {
                              $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";
                          }
                        }else {
                          if($rowAccount->account_no == 130100) {
                              $insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, 'cancel kontrak', {$amount})";
                          } elseif($rowAccount->account_no == 210102) {
                              $insertValues .= "(1, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalAmount})";
                          } elseif($rowAccount->account_no == 150410) {
                              $insertValues .= "(2, '{$source}', NULL, NULL, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";
                          }
                        }
                    }
                } else {
                    $boolContinue = false;
					echo 'FALSE1';
                }
            } else {
                $boolContinue = false;
				echo 'FALSE2';
            }
        } else {
            $boolContinue = false;
			echo 'FALSE3';
        }
        
        // </editor-fold>
    }  elseif($jurnalId != 'NULL') {
        // <editor-fold defaultstate="collapsed" desc="contract">
				
        $sql = "DELETE FROM general_ledger WHERE jurnal_id = {$jurnalId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
				
				
		
        $sql = "SELECT * FROM gl_detail WHERE gl_detail_id = {$jurnalId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            
				
				$sqlAccount = "SELECT account_id, account_no, account_name FROM account WHERE account_id = {$row->account_id}";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
                        
                        if($row->gl_type == 1) {
							$insertValues .= "(1, '{$source}', NULL, NULL, 11, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_converted})";
                        } elseif($row->gl_type == 2) {
                            $insertValues .= "(2, '{$source}', NULL, NULL, 11, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_converted})";
                        }
					}
                } else {
                    $boolContinue = false;
				}
				
				
				
            
        } else {
            $boolContinue = false;
			echo 'FALSE3';
			echo $jurnalId;
        }
        
        // </editor-fold>
    }elseif($invoiceId != 'NULL' && $source == 'RETURN INVOICE') {
        // <editor-fold defaultstate="collapsed" desc="invoiceDetail">
		$sql = "DELETE FROM general_ledger WHERE invoice_id = {$invoiceId} AND general_ledger_module = 'RETURN INVOICE'";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
      /// echo 'test';
			$sql88 = "SELECT invoice_detail_id FROM invoice_detail WHERE invoice_detail_id IN ({$invoiceId})";
			$result88 = $myDatabase->query($sql88, MYSQLI_STORE_RESULT);
        if($result88 !== false && $result88->num_rows >= 0) {
				while($row88 = $result88->fetch_object()) {
					
				$invoiceId = $row88->invoice_detail_id;
		
		
         $sql = "SELECT id.*,i.*, a.`account_no`, a.`account_type`, apph.`account_no` AS a_pph FROM invoice_detail id
				LEFT JOIN invoice i ON i.`invoice_id` = id.`invoice_id`
				LEFT JOIN account a ON id.`account_id` = a.`account_id`
				LEFT JOIN tax txpph ON id.`pphID` = txpph.`tax_id`
				LEFT JOIN tax txppn ON id.`ppnID` = txppn.`tax_id`
				LEFT JOIN account apph ON apph.`account_id` = txpph.`account_id` 
				WHERE id.invoice_detail_id = {$invoiceId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
      
                $amount = $row->amount_converted;
				$ppn = $row->ppn_converted;
                $pph = $row->pph_converted;
				$totalAmount = $row->tamount_converted;
				$account_no = $row->account_no;
				$invoiceMethod = $row->invoice_method_detail;
				$gvId = $row->general_vendor_id;
				$paymentStatus = $row->payment_status;
				$invoiceStatus = $row->invoice_status;
				/*
				if($invoiceMethod = 1){
					
				$sql8 = "SELECT id.*, i.*, adp.`account_no`, aid.`account_no` AS accNo FROM invoice_detail id 
						 LEFT JOIN invoice i ON i.`invoice_id` = id.`invoice_id`
						 LEFT JOIN tax dptx ON id.`pphID` = dptx.`tax_id`
						 LEFT JOIN account adp ON dptx.`account_id` = adp.`account_id` 
						 LEFT JOIN account aid ON aid.`account_id` = id.`account_id`  
                         WHERE id.general_vendor_id = {$gvId} AND id.invoice_method_detail = 2 AND id.invoice_detail_dp = {$invoiceId} ORDER BY i.invoice_id ASC";
				$result8 = $myDatabase->query($sql8, MYSQLI_STORE_RESULT);
        
				if($result8 !== false && $result8->num_rows >= 0) {
				while($row8 = $result8->fetch_object()) {
			   			$tamount = $row8->amount_converted;
						$i_id = $row8->invoice_id;
						$accNo = $row8->account_no;
						$accountNo = $row8->accNo;
						$ppnDP = $row8->ppn_converted;
						$pphDP = $row8->pph_converted;
			
			$sqlAccountDP = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in ('{$accountNo}', 150410 ,'{$accNo}')";
                $resultAccountDP = $myDatabase->query($sqlAccountDP, MYSQLI_STORE_RESULT);
                
                if($resultAccountDP !== false && $resultAccountDP->num_rows > 0) {
                    while($rowAccountDP = $resultAccountDP->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
			 			if($rowAccountDP->account_no == $accountNo) {
							
			 				$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$tamount})";
							
                        }elseif($rowAccountDP->account_no == 150410) {
							
                            $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$ppnDP})";
							
                        }
						 elseif($rowAccountDP->account_no == $accNo) {
							 
                            $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$pphDP})";
							 
						 }
			}
		}
	  }
	}else {
                    $boolContinue = false;
			
				echo 'FALSE2';
				echo $gvId;
			
                }
			}*/
			
			if($invoiceMethod = 1){/* DP ADMIN BANK*/
					
			
				$sql9 = "SELECT idp.*, id.invoice_id, aid.`account_no` AS accNo, adp.`account_no` AS acc_pph, dptx.tax_value AS pph_dp, id.pph AS dpPPh,
adpppn.`account_no` AS acc_ppn, dpppn.tax_value AS ppn_dp, id.ppn AS dpPPn FROM invoice_dp idp
LEFT JOIN invoice_detail id ON id.`invoice_detail_id` = idp.invoice_detail_dp
LEFT JOIN tax dptx ON id.`pphID` = dptx.`tax_id`
LEFT JOIN account adp ON dptx.`account_id` = adp.`account_id`
LEFT JOIN tax dpppn ON id.`ppnID` = dpppn.`tax_id`
LEFT JOIN account adpppn ON dpppn.`account_id` = adpppn.`account_id`  
LEFT JOIN account aid ON aid.`account_id` = id.`account_id`       
WHERE idp.invoice_detail_id = {$invoiceId} AND aid.`account_no` = 700080 ORDER BY id.invoice_id ASC";
				$result9 = $myDatabase->query($sql9, MYSQLI_STORE_RESULT);
        
				if($result9 !== false && $result9->num_rows >= 0) {
				while($row9 = $result9->fetch_object()) {
					//echo 'test2';
			   			$tamount2 = $row9->amount_payment;
						$i_id2 = $row9->invoice_id;
						$accNo2 = $row9->accNo;
						//$accountNo = $row8->accNo;
						//$ppnDP = $row8->ppn_converted;
						//$pphDP = $row8->pph_converted;
						$acc_ppn2 = $row9->acc_ppn;
						$acc_pph2 = $row9->acc_pph;
						if($row9->dpPPn == 0){
						$ppnDP2 = 0;	
						}else{
						$ppnDP2 = $tamount2 * ($row9->ppn_dp/100);
						}
						if($row9->dpPPh == 0){
						$pphDP2 = 0;	
						}else{
						$pphDP2 = $tamount2 * ($row9->pph_dp/100);
						}
						echo $accNo2;
						
						
			
			$sqlAccountDP2 = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in ('{$acc_pph2}', 150410 , 700080)";
                $resultAccountDP2 = $myDatabase->query($sqlAccountDP2, MYSQLI_STORE_RESULT);
                
                if($resultAccountDP2 !== false && $resultAccountDP2->num_rows > 0) {
                    while($rowAccountDP2 = $resultAccountDP2->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
						
			 			if($rowAccountDP2->account_no == 700080) {
							
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id2}, 0, {$rowAccountDP2->account_id}, NULL, {$tamount2})";
							
                        }elseif($rowAccountDP2->account_no == 150410) {
							
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id2}, 0, {$rowAccountDP2->account_id}, NULL, {$ppnDP2})";	
							
                        }
						 elseif($rowAccountDP2->account_no == $acc_pph2) {
							 
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id2}, 0, {$rowAccountDP2->account_id}, NULL, {$pphDP2})";	 
							 
						 }
			}
		}
	  }
	}else {
                    $boolContinue = false;
			
				echo 'FALSE2';
				echo $gvId;
			
                }
			}
			
			if($invoiceMethod = 1){
					
				$totalAmountDp = 0;
				$sql8 = "SELECT idp.*, id.invoice_id, aid.`account_no` AS accNo, adp.`account_no` AS acc_pph, dptx.tax_value AS pph_dp, id.pph AS dpPPh,
adpppn.`account_no` AS acc_ppn, dpppn.tax_value AS ppn_dp, id.ppn AS dpPPn FROM invoice_dp idp
LEFT JOIN invoice_detail id ON id.`invoice_detail_id` = idp.invoice_detail_dp
LEFT JOIN tax dptx ON id.`pphID` = dptx.`tax_id`
LEFT JOIN account adp ON dptx.`account_id` = adp.`account_id`
LEFT JOIN tax dpppn ON id.`ppnID` = dpppn.`tax_id`
LEFT JOIN account adpppn ON dpppn.`account_id` = adpppn.`account_id`  
LEFT JOIN account aid ON aid.`account_id` = id.`account_id`       
WHERE idp.invoice_detail_id = {$invoiceId} AND aid.`account_no` != 700080 ORDER BY id.invoice_id ASC";
				$result8 = $myDatabase->query($sql8, MYSQLI_STORE_RESULT);
        
				if($result8 !== false && $result8->num_rows >= 0) {
				while($row8 = $result8->fetch_object()) {
					//echo 'test2';
			   			$tamount = $row8->amount_payment;
						$i_id = $row8->invoice_id;
						$accNo = $row8->accNo;
						//$accountNo = $row8->accNo;
						//$ppnDP = $row8->ppn_converted;
						//$pphDP = $row8->pph_converted;
						$acc_ppn = $row8->acc_ppn;
						$acc_pph = $row8->acc_pph;
						if($row8->dpPPn == 0){
						$ppnDP = 0;	
						}else{
						$ppnDP = $tamount * ($row8->ppn_dp/100);
						}
						if($row8->dpPPh == 0){
						$pphDP = 0;	
						}else{
						$pphDP = $tamount * ($row8->pph_dp/100);
						}
						echo $accNo;
						
						$amountDp = ($tamount + $ppnDP) - $pphDP;
						$totalAmountDp = $totalAmountDp + $amountDp;
						
			
			$sqlAccountDP = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in ('{$acc_pph}', 150410 ,'{$accNo}')";
                $resultAccountDP = $myDatabase->query($sqlAccountDP, MYSQLI_STORE_RESULT);
                
                if($resultAccountDP !== false && $resultAccountDP->num_rows > 0) {
                    while($rowAccountDP = $resultAccountDP->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
						
			 			if($rowAccountDP->account_no == $accNo) {
							
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$tamount})";
							
                        }elseif($rowAccountDP->account_no == 150410) {
							
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$ppnDP})";	
							
                        }
						 elseif($rowAccountDP->account_no == $acc_pph) {
							 
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$pphDP})";	 
							 
						 }
			}
		}
	  }
	}else {
                    $boolContinue = false;
			
				echo 'FALSE3';
				echo $gvId;
			
                }
			}
			
			
			if($invoiceMethod = 1){
					
				if($pph == 0){
					$a_pph = 0;
				}else{
					$a_pph = $row->a_pph;
				}
				
				//echo $row->account_type;
				//echo $account_no;
				//echo $a_pph;
                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in (210105, 150410, '{$account_no}', '{$a_pph}')";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
                        if($rowAccount->account_no == $account_no) {
							if($amount < 0){
								$amount1 = $amount * -1;
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";	
							}else{
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
							}
							
                        }  elseif($rowAccount->account_no == 210105) {
							$totalAmount = $totalAmount - $totalAmountDp;
							if($totalAmount < 0){
								$totalAmount1 = $totalAmount * -1;
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
							}
							
                        }
						 elseif($rowAccount->account_no == 150410) {
							if($ppn < 0){
								$ppn1 = $ppn * -1;
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn1})";	 
							}else{
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";	
							} 
                        }
						 elseif($rowAccount->account_no == $a_pph) {
							if($pph < 0){
								$pph1 = $pph * -1; 
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph1})";	 
							}else{
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph})";	
							}
                        }
                    }
                } else {
                    $boolContinue = false;
                }
			}elseif($invoiceMethod = 2){
				$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in (210105, 150410, '{$account_no}', '{$a_pph}')";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
                        
                        if($rowAccount->account_no == $account_no) {
							
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
							
                        } elseif($rowAccount->account_no == 210105) {
							
                            $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
							
                        }
						 elseif($rowAccount->account_no == 150410) {
							
                            $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";
							
                        }
						 elseif($rowAccount->account_no == $a_pph) {
							 
                            $insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph})";
							 
                        } 
                    }
                } else {
                    $boolContinue = false;
                }
			}
				
        } else {
            $boolContinue = false;
        }
	}
	}
		
        // </editor-fold>
    }elseif($invoiceId != 'NULL' && $source == 'INVOICE DETAIL' ) {
        // <editor-fold defaultstate="collapsed" desc="invoiceDetail">
        
        $sql = "DELETE FROM general_ledger WHERE invoice_id = {$invoiceId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
         $sql = "SELECT id.*,i.*, a.`account_no`, a.`account_type`, apph.`account_no` AS a_pph FROM invoice_detail id
				LEFT JOIN invoice i ON i.`invoice_id` = id.`invoice_id`
				LEFT JOIN account a ON id.`account_id` = a.`account_id`
				LEFT JOIN tax txpph ON id.`pphID` = txpph.`tax_id`
				LEFT JOIN tax txppn ON id.`ppnID` = txppn.`tax_id`
				LEFT JOIN account apph ON apph.`account_id` = txpph.`account_id` 
				WHERE id.invoice_detail_id = {$invoiceId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
      
                $amount = $row->amount_converted;
				$ppn = $row->ppn_converted;
                $pph = $row->pph_converted;
				$totalAmount = $row->tamount_converted;
				$account_no = $row->account_no;
				$invoiceMethod = $row->invoice_method_detail;
				$gvId = $row->general_vendor_id;
				$paymentStatus = $row->payment_status;
				$invoiceStatus = $row->invoice_status;
				
				if($invoiceMethod = 1){/* DP ADMIN BANK*/
					
			
				$sql9 = "SELECT idp.*, id.invoice_id, aid.`account_no` AS accNo, adp.`account_no` AS acc_pph, dptx.tax_value AS pph_dp, id.pph AS dpPPh,
adpppn.`account_no` AS acc_ppn, dpppn.tax_value AS ppn_dp, id.ppn AS dpPPn FROM invoice_dp idp
LEFT JOIN invoice_detail id ON id.`invoice_detail_id` = idp.invoice_detail_dp
LEFT JOIN tax dptx ON id.`pphID` = dptx.`tax_id`
LEFT JOIN account adp ON dptx.`account_id` = adp.`account_id`
LEFT JOIN tax dpppn ON id.`ppnID` = dpppn.`tax_id`
LEFT JOIN account adpppn ON dpppn.`account_id` = adpppn.`account_id`  
LEFT JOIN account aid ON aid.`account_id` = id.`account_id`       
WHERE idp.invoice_detail_id = {$invoiceId} AND aid.`account_no` = 700080 ORDER BY id.invoice_id ASC";
				$result9 = $myDatabase->query($sql9, MYSQLI_STORE_RESULT);
        
				if($result9 !== false && $result9->num_rows >= 0) {
				while($row9 = $result9->fetch_object()) {
					//echo 'test2';
			   			$tamount2 = $row9->amount_payment;
						$i_id2 = $row9->invoice_id;
						$accNo2 = $row9->accNo;
						//$accountNo = $row8->accNo;
						//$ppnDP = $row8->ppn_converted;
						//$pphDP = $row8->pph_converted;
						$acc_ppn2 = $row9->acc_ppn;
						$acc_pph2 = $row9->acc_pph;
						if($row9->dpPPn == 0){
						$ppnDP2 = 0;	
						}else{
						$ppnDP2 = $tamount2 * ($row9->ppn_dp/100);
						}
						if($row9->dpPPh == 0){
						$pphDP2 = 0;	
						}else{
						$pphDP2 = $tamount2 * ($row9->pph_dp/100);
						}
						echo $accNo2;
						
			
			$sqlAccountDP2 = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in ('{$acc_pph2}', 150410 , 700080)";
                $resultAccountDP2 = $myDatabase->query($sqlAccountDP2, MYSQLI_STORE_RESULT);
                
                if($resultAccountDP2 !== false && $resultAccountDP2->num_rows > 0) {
                    while($rowAccountDP2 = $resultAccountDP2->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
						
			 			if($rowAccountDP2->account_no == 700080) {
							
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id2}, 0, {$rowAccountDP2->account_id}, NULL, {$tamount2})";
							
                        }elseif($rowAccountDP2->account_no == 150410) {
							
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id2}, 0, {$rowAccountDP2->account_id}, NULL, {$ppnDP2})";	
							
                        }
						 elseif($rowAccountDP2->account_no == $acc_pph2) {
							 
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id2}, 0, {$rowAccountDP2->account_id}, NULL, {$pphDP2})";	 
							 
						 }
			}
		}
	  }
	}else {
                    $boolContinue = false;
			
				echo 'FALSE2';
				echo $gvId;
			
                }
			}
			
			if($invoiceMethod = 1){
					
			
				$sql8 = "SELECT idp.*, id.invoice_id, aid.`account_no` AS accNo, adp.`account_no` AS acc_pph, dptx.tax_value AS pph_dp, id.pph AS dpPPh,
adpppn.`account_no` AS acc_ppn, dpppn.tax_value AS ppn_dp, id.ppn AS dpPPn FROM invoice_dp idp
LEFT JOIN invoice_detail id ON id.`invoice_detail_id` = idp.invoice_detail_dp
LEFT JOIN tax dptx ON id.`pphID` = dptx.`tax_id`
LEFT JOIN account adp ON dptx.`account_id` = adp.`account_id`
LEFT JOIN tax dpppn ON id.`ppnID` = dpppn.`tax_id`
LEFT JOIN account adpppn ON dpppn.`account_id` = adpppn.`account_id`  
LEFT JOIN account aid ON aid.`account_id` = id.`account_id`       
WHERE idp.invoice_detail_id = {$invoiceId} AND aid.`account_no` != 700080 ORDER BY id.invoice_id ASC";
				$result8 = $myDatabase->query($sql8, MYSQLI_STORE_RESULT);
        
				if($result8 !== false && $result8->num_rows >= 0) {
				while($row8 = $result8->fetch_object()) {
					//echo 'test2';
			   			$tamount = $row8->amount_payment;
						$i_id = $row8->invoice_id;
						$accNo = $row8->accNo;
						//$accountNo = $row8->accNo;
						//$ppnDP = $row8->ppn_converted;
						//$pphDP = $row8->pph_converted;
						$acc_ppn = $row8->acc_ppn;
						$acc_pph = $row8->acc_pph;
						if($row8->dpPPn == 0){
						$ppnDP = 0;	
						}else{
						$ppnDP = $tamount * ($row8->ppn_dp/100);
						}
						if($row8->dpPPh == 0){
						$pphDP = 0;	
						}else{
						$pphDP = $tamount * ($row8->pph_dp/100);
						}
						echo $accNo;
						
						$amountDp = ($tamount + $ppnDP) - $pphDP;
						$totalAmountDp = $totalAmountDp + $amountDp;
						
			
			$sqlAccountDP = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in ('{$acc_pph}', 150410 ,'{$accNo}')";
                $resultAccountDP = $myDatabase->query($sqlAccountDP, MYSQLI_STORE_RESULT);
                
                if($resultAccountDP !== false && $resultAccountDP->num_rows > 0) {
                    while($rowAccountDP = $resultAccountDP->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
						
			 			if($rowAccountDP->account_no == $accNo) {
							
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$tamount})";
							
                        }elseif($rowAccountDP->account_no == 150410) {
							
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$ppnDP})";	
							
                        }
						 elseif($rowAccountDP->account_no == $acc_pph) {
							 
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, {$i_id}, 0, {$rowAccountDP->account_id}, NULL, {$pphDP})";	 
							 
						 }
			}
		}
	  }
	}else {
                    $boolContinue = false;
			
				echo 'FALSE3';
				echo $gvId;
			
                }
			}
			
			
			if($invoiceMethod = 1){
					
				if($pph == 0){
					$a_pph = 0;
				}else{
					$a_pph = $row->a_pph;
				}
				
				//echo $row->account_type;
				//echo $account_no;
				//echo $a_pph;
                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in (210105, 150410, '{$account_no}', '{$a_pph}')";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
                        
                        if($rowAccount->account_no == $account_no) {
							if($amount < 0){
								$amount1 = $amount * -1;
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";	
							}else{
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
							}
							
                        }  elseif($rowAccount->account_no == 210105) {
							$totalAmount = $totalAmount - $totalAmountDp;
							if($totalAmount < 0){
								$totalAmount1 = $totalAmount * -1;
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
							}
							
                        }
						 elseif($rowAccount->account_no == 150410) {
							if($ppn < 0){
								$ppn1 = $ppn * -1;
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn1})";	 
							}else{
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";	
							} 
                        }
						 elseif($rowAccount->account_no == $a_pph) {
							if($pph < 0){
								$pph1 = $pph * -1; 
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph1})";	 
							}else{
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph})";	
							}
                        }
                    }
                } else {
                    $boolContinue = false;
                }
			}elseif($invoiceMethod = 2){
				$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = {$row->account_type} AND account_no in (210105, 150410, '{$account_no}', '{$a_pph}')";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
                        
                        if($rowAccount->account_no == $account_no) {
							
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";	
							
                        } elseif($rowAccount->account_no == 210105) {
							
							$insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";	
							
                        }
						 elseif($rowAccount->account_no == 150410) {
							
							$insertValues .= "(1, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn})";	 
							 
                        }
						 elseif($rowAccount->account_no == $a_pph) {
							 
							 $insertValues .= "(2, '{$source}', NULL, NULL, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph})";	 
							 
                        } 
                    }
                } else {
                    $boolContinue = false;
                }
			}
				
        } else {
            $boolContinue = false;
        }
		
        // </editor-fold>
    } elseif($transactionId != 'NULL' && $source == 'NOTA TIMBANG2') {
		
		$sql = "DELETE FROM general_ledger WHERE account_id IN (8,52,147) AND transaction_id = {$transactionId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
		$sql = "SELECT t.*, con.contract_type, fc.freight_id, a.`account_no` AS sales_account, sl.`price_converted` AS sales_price_converted
,sh.`shipment_code`, cust.ppn AS ppn_buyer, sl.price, sl.exchange_rate, f.freight_rule, vh.vendor_handling_rule
					FROM `transaction` t 
					LEFT JOIN stockpile_contract sc
						ON sc.stockpile_contract_id = t.stockpile_contract_id
					LEFT JOIN contract con
						ON con.contract_id = sc.contract_id
					LEFT JOIN freight_cost fc
						ON t.`freight_cost_id` = fc.`freight_cost_id`
					LEFT JOIN shipment sh
						ON t.`shipment_id` = sh.`shipment_id`
					LEFT JOIN sales sl
						ON sh.`sales_id` = sl.`sales_id`
					LEFT JOIN customer cust
						ON sl.`customer_id` = cust.`customer_id`
					LEFT JOIN account a
						ON sl.`account_id` = a.`account_id`
					LEFT JOIN freight f
						ON fc.freight_id = f.freight_id
					LEFT JOIN vendor_handling_cost vhc
						ON vhc.handling_cost_id = t.handling_cost_id
					LEFT JOIN vendor_handling vh
						ON vh.vendor_handling_id = vhc.vendor_handling_id
					WHERE t.transaction_id = {$transactionId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
			
			if($row->contract_type == 'P') {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (140000, 520100, 130100)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
					if($rowAccount->account_no == 140000) {
                                if($row->netto_weight < $row->send_weight) {
                                    $amount = $row->quantity * $row->unit_price;
                                } else {
                                    $amount = $row->send_weight * $row->unit_price;
                                }
								if($row->send_weight < 0){
									$amount1 = $amount * -1;
								$insertValues .= "(2, 'NOTA TIMBANG', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";	
								}else{
                                $insertValues .= "(1, 'NOTA TIMBANG', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
								}
                            } elseif($rowAccount->account_no == 520100) {
                                if($row->netto_weight < $row->send_weight) {
                                    $amount = $row->shrink * $row->unit_price;
                                } else {
                                    $amount = 0;
                                }
								if($row->send_weight < 0){
									$amount1 = $amount * -1;
                                $insertValues .= "(2, 'NOTA TIMBANG', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
								}else{
								$insertValues .= "(1, 'NOTA TIMBANG', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
								}
                            } elseif($rowAccount->account_no == 130100) {
                                $amount = $row->send_weight * $row->unit_price;
								if($row->send_weight < 0){
									$amount1 = $amount * -1;
                                $insertValues .= "(1, 'NOTA TIMBANG', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
								}else{
								$insertValues .= "(2, 'NOTA TIMBANG', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
			}
		
		} else {
            $boolContinue = false;
        }
		
	}elseif($transactionId != 'NULL') {
        // <editor-fold defaultstate="collapsed" desc="transaction">
       /*if($transactionId != 257943){
		$sqlCek = "SELECT transaction_type FROM `transaction` WHERE transaction_id = {$transactionId}";
		$resultCek = $myDatabase->query($sqlCek, MYSQLI_STORE_RESULT);
        if($resultCek !== false && $resultCek->num_rows == 1) {
            $rowCek = $resultCek->fetch_object();
		
		if($rowCek->transaction_type != 2){*/
        $sql = "DELETE FROM general_ledger WHERE transaction_id = {$transactionId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		
		//}
			//}
		//}
		echo 'a';
		$aFreight = '';
		$aHandling = '';
        $sql = "SELECT t.*, con.contract_type, fc.freight_id, a.`account_no` AS sales_account, sl.`price_converted` AS sales_price_converted
,sh.`shipment_code`, cust.ppn AS ppn_buyer, sl.price, sl.exchange_rate, f.freight_rule, vh.vendor_handling_rule,sl.`sales_status`,
af.`account_no` AS aFreight, ah.`account_no` AS aHandling
					FROM `transaction` t 
					LEFT JOIN stockpile_contract sc
						ON sc.stockpile_contract_id = t.stockpile_contract_id
					LEFT JOIN contract con
						ON con.contract_id = sc.contract_id
					LEFT JOIN freight_cost fc
						ON t.`freight_cost_id` = fc.`freight_cost_id`
					LEFT JOIN shipment sh
						ON t.`shipment_id` = sh.`shipment_id`
					LEFT JOIN sales sl
						ON sh.`sales_id` = sl.`sales_id`
					LEFT JOIN customer cust
						ON sl.`customer_id` = cust.`customer_id`
					LEFT JOIN account a
						ON sl.`account_id` = a.`account_id`
					LEFT JOIN freight f
						ON fc.freight_id = f.freight_id
					LEFT JOIN vendor_handling_cost vhc
						ON vhc.handling_cost_id = t.handling_cost_id
					LEFT JOIN vendor_handling vh
						ON vh.vendor_handling_id = vhc.vendor_handling_id
					LEFT JOIN tax ftx ON ftx.`tax_id` = t.`fc_tax_id`
					LEFT JOIN account af ON af.`account_id` = ftx.`account_id`
					LEFT JOIN tax htx ON htx.`tax_id` = vh.`pph_tax_id`
					LEFT JOIN account ah ON ah.`account_id` = htx.`account_id`
					WHERE t.transaction_id = {$transactionId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            
            if($row->transaction_type == 1) {
				$aFreight = $row->aFreight;
				$aHandling = $row->aHandling;
                // <editor-fold defaultstate="collapsed" desc="nota timbang">

                if($row->contract_type == 'P') {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (140000, 520100, 130100)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            /*if($rowAccount->account_no == 140000) {
                                if($row->netto_weight < $row->send_weight) {
                                    $amount = $row->quantity * $row->unit_price;
                                } else {
                                    $amount = $row->send_weight * $row->unit_price;
                                }
                                $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                            } elseif($rowAccount->account_no == 520100) {
                                if($row->netto_weight < $row->send_weight) {
                                    $amount = $row->shrink * $row->unit_price;
                                } else {
                                    $amount = 0;
                                }
                                $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                            } elseif($rowAccount->account_no == 130100) {
                                $amount = $row->send_weight * $row->unit_price;
                                $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                            }*/
							if($rowAccount->account_no == 140000) {
                                if($row->netto_weight < $row->send_weight) {
                                    $amount = $row->quantity * $row->unit_price;
                                } else {
                                    $amount = $row->send_weight * $row->unit_price;
                                }
								if($row->send_weight < 0){
									$amount1 = ($row->quantity * $row->unit_price) * -1;
								$insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";	
								}else{
                                $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
								}
                            } elseif($rowAccount->account_no == 520100) {
                                if($row->netto_weight < $row->send_weight) {
                                    $amount = $row->shrink * $row->unit_price;
                                } else {
                                    $amount = 0;
                                }
								if($row->send_weight < 0){
									$amount1 = ($row->shrink * $row->unit_price) * -1;
                                $insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
								}else{
								$insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
								}
                            } elseif($rowAccount->account_no == 130100) {
                                $amount = $row->send_weight * $row->unit_price;
								if($row->send_weight < 0){
									$amount1 = $amount * -1;
                                $insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
						echo 'b';
                    }
                } elseif($row->contract_type == 'C') {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (140000, 210101)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        $amount = $row->quantity * $row->unit_price;
                        
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            /*if($rowAccount->account_no == 140000) {
                                $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                            } elseif($rowAccount->account_no == 210101) {
                                $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
                            }*/
							if($rowAccount->account_no == 140000) {
								if($row->send_weight < 0){
									$amount1 = $amount * -1;
                                $insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
								}else{
								$insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
								}
                            } elseif($rowAccount->account_no == 210101) {
								if($row->send_weight < 0){
									$amount1 = $amount * -1;
                                $insertValues .= "(1, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 1, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
						echo 'c';
                    } 
                } else {
                    $boolContinue = false;
					echo 'd';
                }

                // </editor-fold>

                // <editor-fold defaultstate="collapsed" desc="fc">
				echo $aFreight;
                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 2 AND account_no in (140000, '{$aFreight}', 210103)";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
				//$taxValue = 0;
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    if($row->fc_tax_id != '' && $row->fc_tax_id != 0 && $row->freight_price != '' && $row->freight_price > 0) {
                        $sqlTax = "SELECT * FROM tax WHERE tax_id = {$row->fc_tax_id}";
                        $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
                        
                        if($resultTax !== false && $resultTax->num_rows > 0) {
                            $rowTax = $resultTax->fetch_object();
                            $taxValue = $rowTax->tax_value;
                            
                           if($row->freight_rule == 1){
								$totalFreight_Price = $row->freight_price * $row->send_weight;
								
							}else{
								$totalFreight_Price = $row->freight_price * $row->freight_quantity;
								
							}
                            if($rowTax->tax_category == 1) {
                                $totalFreightPrice = ($totalFreight_Price) / ((100 - $taxValue) / 100);
                                $creditFreightPrice = $totalFreight_Price;
                            } else {
                                $totalFreightPrice = $totalFreight_Price;
                                $creditFreightPrice = $totalFreight_Price - ($totalFreight_Price) * ($taxValue / 100);
                            }
                        } else {
                            $totalFreightPrice = $row->freight_price * $row->freight_quantity;
                            $creditFreightPrice = ($row->freight_price * $row->freight_quantity) - (($row->freight_price * $row->freight_quantity) * ($taxValue / 100)) ;
                            $taxValue = 0;
                        }
                    } else if($row->freight_price != '' && $row->freight_price > 0) {
                        if($row->freight_rule == 1){
								$totalFreightPrice = $row->freight_price * $row->send_weight;
								$creditFreightPrice = $totalFreightPrice;
							}else{
								$totalFreightPrice = $row->freight_price * $row->freight_quantity;
								$creditFreightPrice = $totalFreightPrice;
							}
                        $taxValue = 0;
                    }else {
                        $totalFreightPrice = 0;
                        $creditFreightPrice = 0;
                        $taxValue = 0;
                    }
                    
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 140000) {
							if($row->send_weight < 0){
								$totalFreightPrice1 = $totalFreightPrice * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalFreightPrice1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalFreightPrice})";
							}
                        } elseif($rowAccount->account_no == $aFreight) {
                            $amount = $totalFreightPrice * ($taxValue / 100);
							if($row->send_weight < 0){
								$amount1 = $amount * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
							}
                        } elseif($rowAccount->account_no == 210103) {
							if($row->send_weight < 0){
								$creditFreightPrice1 = $creditFreightPrice * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditFreightPrice1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditFreightPrice})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
					echo 'e';
                }

				// <editor-fold defaultstate="collapsed" desc="fc shrink">
                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 2 AND account_no in (140000, '{$aFreight}', 210103)";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    //if($row->fc_tax_id != '') {
                        $sqlTax = "SELECT a.*, c.`tax_category`, c.`tax_value`,
COALESCE(ROUND(CASE WHEN c.tax_category = 1 THEN a.amt_claim / ((100 - COALESCE(c.tax_value,0))/100) ELSE a.amt_claim END,10),0) AS freight_susut_credit,
COALESCE(ROUND(CASE WHEN c.tax_category = 1 THEN a.amt_claim  ELSE a.amt_claim - (a.amt_claim * (COALESCE(c.tax_value,0)/100)) END,10),0) AS freight_susut_debit,
COALESCE(ROUND((CASE WHEN c.tax_category = 1 THEN a.amt_claim / ((100 - COALESCE(c.tax_value,0))/100) ELSE a.amt_claim END) - 
(CASE WHEN c.tax_category = 1 THEN a.amt_claim  ELSE a.amt_claim - (a.amt_claim * (COALESCE(c.tax_value,0)/100)) END),10),0) AS tax_susut_debit,
b.`freight_cost_id`,
b.`fc_tax_id`
FROM transaction_shrink_weight a
LEFT JOIN `transaction` b ON a.`transaction_id` = b.`transaction_id`
LEFT JOIN tax c ON c.`tax_id` = b.`fc_tax_id`  
WHERE a.`transaction_id` = {$transactionId}";
                        $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
                        
                        if($resultTax !== false && $resultTax->num_rows > 0) {
                            $rowTax = $resultTax->fetch_object();
							
							if($rowTax->freight_cost_id != ''){
                            $totalFreightShrink = $rowTax->freight_susut_debit;
							$creditFreightShrink = $rowTax->freight_susut_credit;
							$taxShrink = $rowTax->tax_susut_debit;
							}else{
								$totalFreightShrink = 0;
								$creditFreightShrink = 0;
								$taxShrink = 0;
							}
                    } else {
                        $totalFreightShrink = 0;
                        $creditFreightShrink = 0;
                        $taxShrink = 0;
                    }
                    
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 140000) {
							if($row->send_weight < 0){
								$creditFreightShrink1 = $creditFreightShrink * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$creditFreightShrink1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$creditFreightShrink})";
							}
                        } elseif($rowAccount->account_no == $aFreight) {
                            //$amount = $totalFreightPrice * ($taxValue / 100);
							if($row->send_weight < 0){
								$taxShrink1 = $taxShrink * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$taxShrink1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$taxShrink})";
							}
                        } elseif($rowAccount->account_no == 210103) {
							if($row->send_weight < 0){
								$totalFreightShrink1 = $totalFreightShrink * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalFreightShrink1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 14, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalFreightShrink})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
					echo 'f';
                }
                // </editor-fold>
				// <editor-fold defaultstate="collapsed" desc="hc">
				$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 9 AND account_no in (140000, '{$aHandling}', 210106)";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    if($row->handling_cost_id != '') {
                        $sqlTax = "SELECT tx.* FROM tax tx
LEFT JOIN vendor_handling vh ON vh.`pph_tax_id` = tx.`tax_id`
LEFT JOIN vendor_handling_cost vhc ON vhc.`vendor_handling_id` = vh.`vendor_handling_id`
WHERE vhc.`handling_cost_id` = {$row->handling_cost_id}";
                        $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
                        
                        if($resultTax !== false && $resultTax->num_rows > 0) {
                            $rowTax = $resultTax->fetch_object();
                            $taxValue = $rowTax->tax_value;
                            
                           if($row->vendor_handling_rule == 1){
								$totalHandling_Price = $row->handling_price * $row->send_weight;
								
							}else{
								$totalHandling_Price = $row->handling_price * $row->handling_quantity;
								
							}
                            if($rowTax->tax_category == 1) {
                                $totalHandlingPrice = ($totalHandling_Price) / ((100 - $taxValue) / 100);
                                $creditHandlingPrice = $totalHandling_Price;
                            } else {
                                $totalHandlingPrice = $totalHandling_Price;
                                $creditHandlingPrice = $totalHandling_Price - ($totalHandling_Price) * ($taxValue / 100);
                            }
                        } else {
                            $totalHandlingPrice = $row->handling_price * $row->handling_quantity;
                            $creditHandlingPrice = ($row->handling_price * $row->handling_quantity) - (($row->handling_price * $row->handling_quantity) * ($taxValue / 100)) ;
                            $taxValue = 0;
                        }
                    } else {
                        $totalHandlingPrice = 0;
                        $creditHandlingPrice = 0;
                        $taxValue = 0;
                    }
                    
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 140000) {
							if($row->send_weight < 0){
								$totalHandlingPrice1 = $totalHandlingPrice * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalHandlingPrice1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalHandlingPrice})";
							}
                        } elseif($rowAccount->account_no == $aHandling) {
                            $amount = $totalHandlingPrice * ($taxValue / 100);
							if($row->send_weight < 0){
								$amount1 = $amount * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount})";
							}
                        } elseif($rowAccount->account_no == 210106) {
							if($row->send_weight < 0){
								$creditHandlingPrice1 = $creditHandlingPrice * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditHandlingPrice1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$creditHandlingPrice})";
							}
                        }
                    }
                } else {
					echo 'test2';
                    $boolContinue = false;
                }

                // </editor-fold>

                // <editor-fold defaultstate="collapsed" desc="uc">
                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 3 AND account_no in (140000, 230203, 210104)";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    if($row->uc_tax_id != '') {
                        $sqlTax = "SELECT * FROM tax WHERE tax_id = {$row->uc_tax_id}";
                        $resultTax = $myDatabase->query($sqlTax, MYSQLI_STORE_RESULT);
                        
                        if($resultTax !== false && $resultTax->num_rows > 0) {
                            $rowTax = $resultTax->fetch_object();
                            $taxValue = 0;
                            
                            if($rowTax->tax_category == 1) {
                                $totalUnloadingPrice = $row->unloading_price / ((100 - $taxValue) / 100);
                                $creditUnloadingPrice = $row->unloading_price;
                            } else {
                                $totalUnloadingPrice = $row->unloading_price;
                                $creditUnloadingPrice = $row->unloading_price - $row->unloading_price * ($taxValue / 100);
                            }
                        } else {
                            $totalUnloadingPrice = $row->unloading_price;
                            $creditUnloadingPrice = $row->unloading_price;
                            $taxValue = 0;
                        }
                    } else {
                        $totalUnloadingPrice = 0;
                        $creditUnloadingPrice = 0;
                        $taxValue = 0;
                    }
                    
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 140000) {
							//echo 'betul betul';
							if($row->send_weight < 0){
								$totalUnloadingPrice1 = $totalUnloadingPrice * -1;
                            $insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalUnloadingPrice1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalUnloadingPrice})";
							}
                        } elseif($rowAccount->account_no == 230203) {
                            $amount = $totalUnloadingPrice * ($taxValue / 100);
							if($row->send_weight < 0){
								$amount1 = $amount * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amount1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amount})";
							}
                        } elseif($rowAccount->account_no == 210104) {
							if($row->send_weight < 0){
								$creditUnloadingPrice1 = $creditUnloadingPrice * -1;
                            $insertValues .= "(1, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$creditUnloadingPrice1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 1, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$creditUnloadingPrice})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
					echo 'g';
                }

                // </editor-fold>
                
            } elseif($row->transaction_type == 2) {
                
				if($row->sales_status == 3){
                $shipment_code = $row->shipment_code;
					$shipment_code1 = '-S-';
				    $pos1 = strpos($shipment_code, $shipment_code1);
                // <editor-fold defaultstate="collapsed" desc="nota timbang">
                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (0,1) AND account_no in (120000, 230100, {$row->sales_account}) GROUP BY account_no";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
					 if($pos1 !== FALSE){
					
					$newSalesPrice2 = 0;
                    $taxValue = 0;
                    $totalSalesPrice = 0;
					
					 }else{
                    $newSalesPrice1 = round($row->price * $row->quantity,2);
					$newSalesPrice2 = round($newSalesPrice1 * $row->exchange_rate,0);
					//$salesPrice = $row->quantity * $row->sales_price_converted;
                    $taxValue = ($row->ppn_buyer / 100 * $newSalesPrice2);
                    $totalSalesPrice = $newSalesPrice2 + $taxValue;
					 }
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 120000) {
							if($row->quantity < 0){
								$totalSalesPrice1 = $totalSalesPrice *-1;
                            $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalSalesPrice1})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalSalesPrice})";
							}
                        } elseif($rowAccount->account_no == 230100) {
							if($row->quantity < 0){
								$taxValue1 = $taxValue *-1;
                            $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$taxValue1})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$taxValue})";
							}
                        } elseif($rowAccount->account_no == $row->sales_account) {
							if($row->quantity < 0){
								$newSalesPrice21 = $newSalesPrice2 *-1;
                            $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$newSalesPrice21})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$newSalesPrice2})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
                }
			}  
                // </editor-fold>
                
                // <editor-fold defaultstate="collapsed" desc="cogs">
                
                $totalCogsPrice = 0;
                $totalCogsShrink = 0;
                $totalCogsFC = 0;
                $totalCogsUC = 0;
                $totalCogsStock = 0;
                $sqlCogs = "SELECT d.*, c.price_converted, t.shrink, t.freight_quantity, t.freight_price, t.unloading_price, t.handling_quantity, vhc.price_converted,
			f.ppn_tax_id AS fc_ppn_tax_id, f.ppn AS fc_ppn, fctxppn.tax_category AS fc_ppn_tax_category, t2.shrink,
            f.pph_tax_id AS fc_pph_tax_id, f.pph AS fc_pph, fctxpph.tax_category AS fc_pph_tax_category,
            l.ppn_tax_id AS uc_ppn_tax_id, l.ppn AS uc_ppn, uctxppn.tax_category AS uc_ppn_tax_category,
            l.pph_tax_id AS uc_pph_tax_id, l.pph AS uc_pph, uctxpph.tax_category AS uc_pph_tax_category,
			vh.ppn_tax_id AS vh_ppn_tax_id, vh.ppn AS vh_ppn, vhtxppn.tax_category AS vh_ppn_tax_category,
            vh.pph_tax_id AS vh_pph_tax_id, vh.pph AS vh_pph, vhtxpph.tax_category AS vh_pph_tax_category,
			d.quantity * c.price_converted AS cogs_amount,
			CASE WHEN t.delivery_status = 2 THEN (d.percent_taken / 100) * (t.quantity * t.freight_price)
			ELSE (d.percent_taken / 100) * (t.freight_quantity * t.freight_price) END AS freight_total,
			CASE WHEN t.delivery_status = 2 AND t.freight_cost_id IS NOT NULL THEN (d.quantity/t.freight_quantity) * COALESCE((SELECT amt_claim FROM transaction_shrink_weight WHERE transaction_id = d.transaction_id),0)
	    WHEN t.freight_cost_id IS NOT NULL THEN (d.percent_taken / 100) * COALESCE((SELECT amt_claim FROM transaction_shrink_weight WHERE transaction_id = d.transaction_id),0) ELSE 0 END AS freight_shrink,
			(d.percent_taken / 100) * t.unloading_price AS unloading_total, sh.shipment_code, (d.percent_taken / 100) * (t.handling_quantity * vhc.price_converted) AS handling_total, t2.quantity AS bl
            FROM `transaction` t2
                LEFT JOIN `delivery` d 
                    ON d.shipment_id = t2.shipment_id
				LEFT JOIN shipment sh
					ON d.shipment_id = sh.shipment_id
                LEFT JOIN `transaction` t
                    ON t.transaction_id = d.transaction_id
                LEFT JOIN stockpile_contract sc
					ON sc.`stockpile_contract_id` = t.`stockpile_contract_id`
			    LEFT JOIN contract c
					ON c.`contract_id` = sc.`contract_id`
			    LEFT JOIN freight_cost fc
					ON fc.`freight_cost_id` = t.`freight_cost_id`
			    LEFT JOIN freight f
					ON fc.`freight_id` = f.`freight_id`
			    LEFT JOIN labor l
					ON l.`labor_id` = t.`labor_id`
			    LEFT JOIN tax fctxpph
					ON fctxpph.tax_id = f.pph_tax_id
			    LEFT JOIN tax fctxppn
					ON fctxppn.tax_id = f.ppn_tax_id
			    LEFT JOIN tax uctxpph
			        ON uctxpph.tax_id = l.pph_tax_id
			    LEFT JOIN tax uctxppn
					ON uctxppn.tax_id = l.ppn_tax_id
				LEFT JOIN vendor_handling_cost vhc
					ON vhc.handling_cost_id = t.handling_cost_id
				LEFT JOIN vendor_handling vh
					ON vh.vendor_handling_id = vhc.vendor_handling_id
				LEFT JOIN tax vhtxpph
					ON vhtxpph.tax_id = vh.pph_tax_id
				LEFT JOIN tax vhtxppn
					ON vhtxppn.tax_id = vh.ppn_tax_id
				
                WHERE t2.transaction_id =  {$transactionId}";
                $resultCogs = $myDatabase->query($sqlCogs, MYSQLI_STORE_RESULT);
                
                if($resultCogs !== false && $resultCogs->num_rows > 0) {
                    while($rowCogs = $resultCogs->fetch_object()) {
						
					$shipmentCode11 = $rowCogs->shipment_code;
					$shipmentCode12 = '-S-';
				    $pos12 = strpos($shipmentCode11, $shipmentCode12);	
						
					if($rowCogs->fc_pph_tax_category == 1 && $rowCogs->fc_pph_tax_id != ''){
			         $pphfc2 = ($rowCogs->freight_total / ((100 - $rowCogs->fc_pph) / 100)) - $rowCogs->freight_total;
					 $pphfcShrink2 = ($rowCogs->freight_shrink / ((100 - $rowCogs->fc_pph) / 100)) - $rowCogs->freight_shrink;
				 
				 }elseif($rowCogs->fc_pph_tax_category == 0 && $rowCogs->fc_pph_tax_id != ''){
					  $pphfc2 =  0;
					  $pphfcShrink2 = 0;
					 //$pphfc =  $row->freight_total - ($row->freight_total * ((100 - $fc_pph) / 100));
				 }else{
				 	$pphfc2 = 0;
					$pphfcShrink2 = 0;
				 }
				 
				 $freightTotal2 = ($rowCogs->freight_total + $ppnfc2 + $pphfc2) - ($rowCogs->freight_shrink + $pphfcShrink2);
				 
				 if($rowCogs->vh_pph_tax_category == 1 && $rowCogs->vh_pph_tax_id != ''){
			         $pphvh2 = ($rowCogs->handling_total / ((100 - $rowCogs->vh_pph) / 100)) - $rowCogs->handling_total;
				 
				 }elseif($rowCogs->vh_pph_tax_category == 0 && $rowCogs->vh_pph_tax_id != ''){
					  $pphvh2 =  0;  
					 //$pphfc =  $row->freight_total - ($row->freight_total * ((100 - $fc_pph) / 100));
				 }else{
				 	$pphvh2 = 0;
				 }
				 
				 $handlingTotal2 = $rowCogs->handling_total + $pphvh2;
				 
				 if($rowCogs->uc_pph_tax_category == 1 &&$rowCogs->uc_pph_tax_id != ''){
			         $pphuc2 = ($rowCogs->unloading_total / ((100 - $rowCogs->uc_pph) / 100)) - $rowCogs->unloading_total;
					 
				 }elseif($rowCogs->uc_pph_tax_category == 0 && $rowCogs->uc_pph_tax_id != ''){
					 $pphuc2 =  0;
					 //$pphuc =  $row->unloading_total - ($row->unloading_total * ((100 - $row->uc_pph) / 100));
				 }else{
				 	$pphuc2 = 0;
				 }
				 
				 $unloadingTotal2 = $rowCogs->unloading_total + $ppnuc2 + $pphuc2;	
    
      $totalCogs2 = $rowCogs->cogs_amount + $freightTotal2 + $unloadingTotal2 + $handlingTotal2;
	 
	 $quantity_total= $rowCogs->quantity;
	 $total_quantity = $quantity_total+$total_quantity;
	 
	 $pks_total = $rowCogs->cogs_amount;
	 $total_pks = $pks_total+$total_pks;
	 
	 $fc_total = $freightTotal2;
	 $total_fc = $fc_total+$total_fc;
	 
	 $uc_total = $unloadingTotal2;
	 $total_uc = $uc_total+$total_uc;
	 
	 $hc_total = $handlingTotal2;
	 $total_hc = $hc_total+$total_hc;
	 
	 $cogs_total = $totalCogs2;
	 $total_cogs = $cogs_total+$total_cogs;
	 
	 $shrink = 0;
	 $total_pks2 = $total_pks - $shrink;
                       
	 $qty = $rowCogs->bl;					
                    }
                }
                
				if($pos12 !== FALSE){
				
				$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1) AND account_no in (510201, 140000)";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 510201) {
							if($qty < 0){
								//$total_cogs1 = $total_cogs *-1;
                            $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}
                        } elseif($rowAccount->account_no == 140000) {
							if($qty < 0){
								//$total_cogs1 = $total_cogs * -1;
                            $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
                }
			}else{
				
                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 1 AND account_no in (510101, 510201, 510102, 510103, 510104, 140000)";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }

                        if($rowAccount->account_no == 510101) {
							if($qty < 0){
								//$total_pks21 = $total_pks2 * -1;
                            $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_pks2})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_pks2})";
							}
                        } elseif($rowAccount->account_no == 510201) {
							if($qty < 0){
								//$shrink1 = $shrink * -1;
                            $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$shrink})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$shrink})";
							}
                        } elseif($rowAccount->account_no == 510102) {
							if($qty < 0){
								//$total_fc1 = $total_fc * -1;
                            $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_fc})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_fc})";
							}
                        } elseif($rowAccount->account_no == 510103) {
							if($qty < 0){
								//$total_uc1 = $total_uc * -1;
                            $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_uc})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_uc})";
							}
                        } elseif($rowAccount->account_no == 510104) {
							if($qty < 0){
								//$total_hc1 = $total_hc * -1;
                            $insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_hc})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_hc})";
							}
                        } elseif($rowAccount->account_no == 140000) {
							if($qty < 0){
								//$total_cogs1 = $total_cogs * -1;
                            $insertValues .= "(1, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 2, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$total_cogs})";
							}
                        }
                    }
                } else {
                    $boolContinue = false;
                }
                
			}  // </editor-fold>
            }
            
        } else {
            $boolContinue = false;
        }
        
        // </editor-fold>
    } elseif($paymentId != 'NULL') {
        // <editor-fold defaultstate="collapsed" desc="payment">
        if($source == 'PAYMENT' || $source == 'PETTY CASH' || $source == 'PAYMENT ADMIN'){
        $sql = "DELETE FROM general_ledger WHERE payment_id = {$paymentId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        }elseif($source == 'RETURN PAYMENT'){
		$sql = "DELETE FROM general_ledger WHERE payment_id = {$paymentId} AND general_ledger_module = 'RETURN PAYMENT'";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		//echo 'benar';
		}
        $sql = "SELECT p.*, a.account_no, ap.account_type AS ap_account_type, ap.account_no AS ap_account_no,
b.currency_id AS b_currency_id, ta.account_no AS gv_account_no, gv.pph_tax_id AS gv_pph_tax_id, ta.account_no AS at_account_no,
f.pph_tax_id AS f_pph_tax_id, f.pph AS f_pph_tax, f.ppn AS f_ppn_tax, atf.account_no AS f_account_no, u.pph_tax_id AS u_pph_tax_id, atu.account_no AS u_account_no, tfc.tax_category AS fc_tax_category,
vh.pph_tax_id AS vh_pph_tax_id, vh.pph AS vh_pph_tax, atvh.account_no AS vh_account_no, tvhc.tax_category AS vhc_tax_category
                FROM payment p 
                INNER JOIN bank b
                    ON b.bank_id = p.bank_id
                INNER JOIN account a
                    ON a.account_id = b.account_id
                INNER JOIN account ap
                    ON ap.account_id = p.account_id 
                LEFT JOIN general_vendor gv
                    ON gv.general_vendor_id = p.general_vendor_id
                LEFT JOIN tax t
                    ON t.tax_id = gv.pph_tax_id
                LEFT JOIN account ta
                    ON ta.account_id = t.account_id	
                LEFT JOIN freight f
                    ON f.freight_id = p.freight_id
                LEFT JOIN tax tfc
                    ON tfc.tax_id = f.pph_tax_id
                LEFT JOIN account atf
                    ON atf.account_id = tfc.account_id
                LEFT JOIN labor u
                    ON u.labor_id = p.labor_id
                LEFT JOIN tax tu
                    ON tu.tax_id = u.pph_tax_id
                LEFT JOIN account atu
                    ON atu.account_id = tu.account_id
                LEFT JOIN vendor_handling vh
                    ON vh.vendor_handling_id = p.vendor_handling_id
                LEFT JOIN tax tvhc
                    ON tvhc.tax_id = vh.pph_tax_id
                LEFT JOIN account atvh
                    ON atvh.account_id = tvhc.account_id
                WHERE p.payment_id = {$paymentId}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            
			$paymentStatus = $row->payment_status;
			$payment_type = $row->payment_type;
			
            if($row->stockpile_contract_id != '') {
                // <editor-fold defaultstate="collapsed" desc="payment PKS kontrak">
                if($row->payment_method == 1) {
                    $totalContractAmount = 0;
                    $totalContractDP = 0;
                    
                    $sqlContract = "SELECT sc.*, con.price_converted, con.quantity, 
                                        (
                                            SELECT COALESCE(SUM(amount_journal), 0) FROM payment
                                            WHERE stockpile_contract_id = sc.stockpile_contract_id
                                            AND payment_method = 2 AND payment_status = 0
                                        ) AS total_dp,
                                        (
                                            SELECT COALESCE(SUM(ppn_journal), 0) FROM payment
                                            WHERE stockpile_contract_id = sc.stockpile_contract_id
                                            AND payment_method = 2 AND payment_status = 0
                                        ) AS total_ppn,
										(
                                            SELECT a.account_no FROM account a LEFT JOIN payment p
											ON p.account_id = a.account_id
                                            WHERE p.stockpile_contract_id = sc.stockpile_contract_id
                                            AND p.payment_method = 2 AND p.payment_status = 0 LIMIT 1
                                        ) AS account_no
                                    FROM stockpile_contract sc
                                    INNER JOIN contract con
                                        ON con.contract_id = sc.contract_id
                                    WHERE sc.stockpile_contract_id = {$row->stockpile_contract_id}";
                    $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);
                    
                    if($resultContract !== false && $resultContract->num_rows == 1) {
                        $rowContract = $resultContract->fetch_object();
                        
                        $totalContractAmount = ceil($rowContract->price_converted * $rowContract->quantity);
                        $totalContractPPN = $rowContract->total_ppn;
						if($rowContract->account_no == 210102){
						$totalContractDP = 0;
						}else{
						$totalContractDP = $rowContract->total_dp - $totalContractPPN;
						}
						
                    }
                    
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (0, 7) AND account_no in ({$row->ap_account_no}, 150410,130001, {$row->account_no}, 230204)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == $row->ap_account_no) {
								if($totalContractDP > 0){
								$amountJournal = $row->amount_converted;
								}else{
								$amountJournal = $row->amount_journal + $totalContractDP;
								}
								if($paymentStatus == 1){
									if($payment_type == 1){
									$insertValues .= "(1, '{$source}', 'Payment', 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountJournal})";	
									}else{
									$insertValues .= "(2, '{$source}', 'Payment', 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountJournal})";
									}
								}else{
									if($payment_type == 1){
									$insertValues .= "(2, '{$source}', 'Payment', 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountJournal})";
									}else{
									$insertValues .= "(1, '{$source}', 'Payment', 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountJournal})";
									}
								}
                            } /*elseif($rowAccount->account_no == 150410) {
								if($paymentStatus == 1){
									if($payment_type == 1){
									$insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->ppn_journal}), (1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}else{
									$insertValues .= "(2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->ppn_journal}), (1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";	
									}
								}else{
									if($payment_type == 1){
									$insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->ppn_journal}), (2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}else{
									$insertValues .= "(1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->ppn_journal}), (2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}
								}
							}*/ elseif($rowAccount->account_no == 150410 && $totalContractDP > 0) {
								if($paymentStatus == 1){
									if($payment_type == 1){
									$insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}else{
									$insertValues .= "(1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}
								}else{
									if($payment_type == 1){
									$insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}else{
									$insertValues .= "(2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL,  {$totalContractPPN})";
									}
								}
                            } elseif($rowAccount->account_no == 130001) {
								if($paymentStatus == 1){
									if($payment_type == 1){
									$insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalContractDP})";
									}else{
									$insertValues .= "(1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalContractDP})";	
									}
								}else{
									if($payment_type == 1){
									$insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalContractDP})";
									}else{
									$insertValues .= "(2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$totalContractDP})";
									}
								}
                            }  elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
									if($payment_type == 1){
									$insertValues .= "(2, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_journal})";
									}else{
									$insertValues .= "(1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_journal})";
									}
								}else{
									if($payment_type == 1){
									$insertValues .= "(1, '{$source}', NULL, 1, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_journal})";
									}else{
									$insertValues .= "(2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_journal})";
									}
								}
                            } elseif($rowAccount->account_no == 230204) {
								if($paymentStatus == 1){
									if($payment_type == 1){
									$insertValues .= "(1, '{$source}', NULL, 1, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->pph_journal})";
									}else{
									$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->pph_journal})";
									}
								}else{
									if($payment_type == 1){
									$insertValues .= "(2, '{$source}', NULL, 1, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->pph_journal})";
									}else{
									$insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->pph_journal})";
									}
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                } elseif($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (0, 7) AND account_no in ({$row->ap_account_no}, 150410, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == $row->ap_account_no) {
								$amountJournal = $row->amount_journal - $row->ppn_journal;
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountJournal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$amountJournal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == 150410) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->ppn_journal})";
								}else{
								$insertValues .= "(1, '{$source}', NULL, 2, 1, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0,{$rowAccount->account_id}, NULL, {$row->ppn_journal})";	
								}
							}
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            }
			elseif($row->payment_cash_id != '') {
				echo 'blt';
                // <editor-fold defaultstate="collapsed" desc="payment PKS kontrak">
				if($row->payment_method == 1) {
					
					$cashId = 0;
					$pc_id = 0;
					$acc_dp_pph = 'NULL';
					$acc_dp_ppn = 'NULL';
				  	$sqlcashDP = "SELECT pcdp.payment_cash_id, pcdp.payment_cash_dp, pcdp.`amount_payment` AS down_payment,
(SELECT gv.ppn FROM general_vendor gv LEFT JOIN payment_cash pc ON gv.general_vendor_id = pc.general_vendor_id WHERE pc.payment_cash_id = pcdp.payment_cash_dp) AS gv_ppn,
(SELECT gv.pph FROM general_vendor gv LEFT JOIN payment_cash pc ON gv.general_vendor_id = pc.general_vendor_id WHERE pc.payment_cash_id = pcdp.payment_cash_dp) AS gv_pph,
(SELECT account_id FROM payment_cash WHERE payment_cash_id = pcdp.payment_cash_dp) AS account_id,
(SELECT tx.account_id FROM tax tx LEFT JOIN payment_cash pc ON pc.ppnID = tx.tax_id WHERE pc.payment_cash_id = pcdp.payment_cash_dp) AS acc_dp_ppn,
(SELECT tx.account_id FROM tax tx LEFT JOIN payment_cash pc ON pc.pphID = tx.tax_id WHERE pc.payment_cash_id = pcdp.payment_cash_dp) AS acc_dp_pph,  
(SELECT pph FROM payment_cash WHERE payment_cash_id = pcdp.payment_cash_dp) AS pph,
(SELECT ppn FROM payment_cash WHERE payment_cash_id = pcdp.payment_cash_dp) AS ppn,
(SELECT `type` FROM payment_cash WHERE payment_cash_id = pcdp.payment_cash_dp) AS `type`
FROM payment_cash_dp pcdp 
LEFT JOIN payment_cash pc ON pc.`payment_cash_id` = pcdp.`payment_cash_id` 
WHERE pc.payment_id = {$paymentId}";
					$resultCashDP = $myDatabase->query($sqlcashDP, MYSQLI_STORE_RESULT);
                    
                   if($resultCashDP !== false && $resultCashDP->num_rows > 0) {
						$dp_type = array();
						while($rowCashDP = mysqli_fetch_array($resultCashDP)){

							$accountDP = $rowCashDP['account_id'];
							
							if($rowCashDP['acc_dp_ppn'] != ''){
							$acc_dp_ppn = $rowCashDP['acc_dp_ppn'];
							}else{
							$acc_dp_ppn = 'NULL';
							}
							
							//$acc_dp_ppn = $rowCashDP['acc_dp_ppn'];
							if($rowCashDP['acc_dp_pph'] != ''){
							$acc_dp_pph = $rowCashDP['acc_dp_pph'];
							}else{
							$acc_dp_pph = 'NULL';
							}
							$ppn_dp = $rowCashDP['gv_ppn'];
							$pph_dp = $rowCashDP['gv_pph'];
							$ppn = $rowCashDP['ppn'];
							$pph = $rowCashDP['pph'];
							$cashId = $rowCashDP['payment_cash_dp'];
							$down_payment = $rowCashDP['down_payment'];
							$dp_type[] = $rowCashDP['type'];	 	
							$pc_dp_type =  implode(', ', $dp_type);	
					
							
							if($ppn == 0){
								$dpPPN = 0;	
							}else{
								$dpPPN = $down_payment * ($ppn_dp/100);
							}
							if($pph == 0){
								$dpPPh = 0;	
							}else{
								$dpPPh = $down_payment * ($pph_dp/100);
							}
								//$downPayment = ($down_payment + $dpPPN) - $dpPPh;
							
						
						
				
				if($acc_dp_ppn != '' || $acc_dp_ppn != 0 || $acc_dp_ppn != 'NULL') {
					$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$pc_dp_type}) AND account_no IN (150410)";
					$resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                   if($resultAccount !== false && $resultAccount->num_rows == 1) {
                        $rowAccount = $resultAccount->fetch_object();
							$accountId_dp = $rowAccount->account_id;
							
						}
					}
                
          
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
						
						
							if($cashId != '' || $cashId != 0 || $cashId != 'NULL') {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$accountDP}, NULL, {$down_payment}),";
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$acc_dp_pph}, NULL, {$dpPPh}),";
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$accountId_dp}, NULL,  {$dpPPN})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$accountDP}, NULL, {$down_payment}),";
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$acc_dp_pph}, NULL, {$dpPPh}),";
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$accountId_dp}, NULL,  {$dpPPN})";	
								}
                            }  
			
						}
				   }
	/*}else {
                   // $boolContinue = false;
			
				echo 'FALSE2';
				//echo '</br>';
				//echo $payment_cash_id;
				//echo '</br>';
				//echo $PCashDP;
				//echo '</br>';
				//echo $pc_id;
			
                }*/
			}
				
                if($row->payment_method == 1) {
                    $totalCashAmount = 0;
                    $totalCashtDP = 0;
					
                    
                    $sqlPC = "SELECT pc.*, a.account_no, a.account_name, apph.account_id AS apph_id, apph.account_no AS apph_no, apph.account_name AS apph_name
							  FROM payment_cash pc
								LEFT JOIN account a ON a.`account_id` = pc.`account_id` 
								LEFT JOIN tax txpph ON txpph.`tax_id` = pc.`pphID`
								LEFT JOIN account apph ON apph.`account_id` = txpph.`account_id`
								WHERE pc.`payment_id` = {$paymentId}";
                    $resultPC = $myDatabase->query($sqlPC, MYSQLI_STORE_RESULT);
           			
						
						if($resultPC !== false && $resultPC->num_rows > 0) {
                        while($rowPC = $resultPC->fetch_object()) {
							
						$cashId = $rowPC->payment_cash_id;
						$amountConv = $rowPC->amount_converted;
						
						if($rowPC->apph_id == '' || $rowPC->apph_id == 0 || $rowPC->apph_id == 'NULL'){
							$apph_id = 'NULL';
						}else{
							$apph_id = $rowPC->apph_id;
						}
						
						if($rowPC->ppnID != '' || $rowPC->ppnID != 0 || $rowPC->ppnID != 'NULL') {
							$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$rowPC->type}) AND account_no IN (150410)";
							$resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                   if($resultAccount !== false && $resultAccount->num_rows == 1) {
                        $rowAccount = $resultAccount->fetch_object();
							$accountId = $rowAccount->account_id;
							
						}
					}
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
							if($row->payment_type == 1){
								if($rowPC->payment_cash_id != '' || $rowPC->payment_cash_id != 0 || $rowPC->payment_cash_id != 'NULL') {
								if($paymentStatus == 1){
								if($rowPC->amount_converted < 0){
									$amount_converted1 = $rowPC->amount_converted * -1;
									$pph_converted1 = $rowPC->pph_converted * -1;
                                $insertValues .= "(2, '{$source}', NULL, 1, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$amount_converted1}),";
								$insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$apph_id}, NULL, {$pph_converted1})";
								}else{
								$insertValues .= "(1, '{$source}', NULL, 1, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}),";
								$insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted})";	
								}
								}else{
									if($rowPC->amount_converted < 0){
									$amount_converted1 = $rowPC->amount_converted * -1;
									$pph_converted1 = $rowPC->pph_converted * -1;
								$insertValues .= "(1, '{$source}', NULL, 1, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$amount_converted1}),";
								$insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$apph_id}, NULL, {$pph_converted1})";
									}else{
								$insertValues .= "(2, '{$source}', NULL, 1, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}),";
								$insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted})";
									}								
								}
								}
							}else{
                           if($rowPC->payment_cash_id != '' || $rowPC->payment_cash_id != 0 || $rowPC->payment_cash_id != 'NULL') {
							   if($paymentStatus == 1){
								if($rowPC->amount_converted < 0){
									$amount_converted1 = $rowPC->amount_converted * -1;
									$pph_converted1 = $rowPC->pph_converted * -1;
									$ppn_converted1 = $rowPC->ppn_converted * -1;
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$amount_converted1}),";
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$apph_id}, NULL, {$pph_converted1}),";
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$accountId}, NULL,  {$ppn_converted1})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}),";
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted}),";
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$accountId}, NULL,  {$rowPC->ppn_converted})";	
								}
							   }else{
								 if($rowPC->amount_converted < 0){
									$amount_converted1 = $rowPC->amount_converted * -1;
									$pph_converted1 = $rowPC->pph_converted * -1;
									$ppn_converted1 = $rowPC->ppn_converted * -1;
								$insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$amount_converted1}),";
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$apph_id}, NULL, {$pph_converted1}),";
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$accountId}, NULL,  {$ppn_converted1})";  
								 
								 }else{
								$insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}),";
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted}),";
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$accountId}, NULL,  {$rowPC->ppn_converted})";  
								 }
							   }
                            }  
							}
						}	
                    } else {
                        $boolContinue = false;
                    }
						
				}
				 if($row->payment_method == 1) {
                   
                    
                    $sqlPayment = "SELECT b.account_id, amount_journal FROM payment p LEFT JOIN bank b ON p.bank_id = b.bank_id WHERE p.payment_id = {$paymentId}";
                    $resultPayment = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT);
           			
						if($resultPayment !== false && $resultPayment->num_rows > 0) {
                        while($rowPayment = $resultPayment->fetch_object()) {
							
						
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
						   if($row->payment_type ==1){
							   if($rowPayment->account_id != '' || $rowPayment->account_id != 0 || $rowPayment->account_id != 'NULL') {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Payment', 1, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$rowPayment->amount_journal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Payment', 1, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$rowPayment->amount_journal})";	
								}
                            }
						   }else{
						   
						   if(($rowPayment->account_id != '' || $rowPayment->account_id != 0 || $rowPayment->account_id != 'NULL') && $row->amount_journal < 0) {
								$amountJournal = $row->amount_journal * -1;
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Payment', 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$amountJournal})";
								}else{
								 $insertValues .= "(1, '{$source}', 'Payment', 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$amountJournal})";	
								}
                            } 
                           elseif($rowPayment->account_id != '' || $rowPayment->account_id != 0 || $rowPayment->account_id != 'NULL') {
							   if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', 'Payment', 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$rowPayment->amount_journal})";
							   }else{
								$insertValues .= "(2, '{$source}', 'Payment', 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$rowPayment->amount_journal})";   
							   }
                            }
						   }
						}	
                    } else {
                        $boolContinue = false;
                    }
						
				}
				
				 if($row->payment_method == 2) {
                    $totalCashAmount = 0;
                    $totalCashtDP = 0;
                    
					
					
                    $sqlPC = "SELECT pc.*, a.account_no, a.account_name, apph.account_id AS apph_id, apph.account_no AS apph_no, apph.account_name AS apph_name
							  FROM payment_cash pc
								LEFT JOIN account a ON a.`account_id` = pc.`account_id` 
								LEFT JOIN tax txpph ON txpph.`tax_id` = pc.`pphID`
								LEFT JOIN account apph ON apph.`account_id` = txpph.`account_id`
								WHERE pc.`payment_id` = {$paymentId}";
                    $resultPC = $myDatabase->query($sqlPC, MYSQLI_STORE_RESULT);
						
						if($resultPC !== false && $resultPC->num_rows > 0) {
                        while($rowPC = $resultPC->fetch_object()) {
							
						$cashId = $rowPC->payment_cash_id;
						$amountConv = $rowPC->amount_converted;
						
						if($rowPC->apph_id == '' || $rowPC->apph_id == 0 || $rowPC->apph_id == 'NULL'){
							$apph_id = 'NULL';
						}else{
							$apph_id = $rowPC->apph_id;
						}
						
						if($rowPC->ppnID != '' || $rowPC->ppnID != 0 || $rowPC->ppnID != 'NULL') {
							$sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$rowPC->type}) AND account_no IN (150410)";
							$resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                   if($resultAccount !== false && $resultAccount->num_rows == 1) {
                        $rowAccount = $resultAccount->fetch_object();
							$accountId = $rowAccount->account_id;
							
						}
					}
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
							
                           if($rowPC->payment_cash_id != '' || $rowPC->payment_cash_id != 0 || $rowPC->payment_cash_id != 'NULL') {
							   if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}),";
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted}),";
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$accountId}, NULL,  {$rowPC->ppn_converted})";
							   }else{
								$insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$rowPC->account_id}, NULL, {$rowPC->amount_converted}),";
                                $insertValues .= "(2, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$apph_id}, NULL, {$rowPC->pph_converted}),";
                                $insertValues .= "(1, '{$source}', NULL, 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0,  {$cashId}, {$accountId}, NULL,  {$rowPC->ppn_converted})";   
							   }
                            }  
							
						}	
                    } else {
                        $boolContinue = false;
                    }
						
				}
				 if($row->payment_method == 2) {
                   
                    
                    $sqlPayment = "SELECT b.account_id, amount_journal FROM payment p LEFT JOIN bank b ON p.bank_id = b.bank_id WHERE p.payment_id = {$paymentId}";
                    $resultPayment = $myDatabase->query($sqlPayment, MYSQLI_STORE_RESULT);
           			
						if($resultPayment !== false && $resultPayment->num_rows > 0) {
                        while($rowPayment = $resultPayment->fetch_object()) {
							
						
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
						   
                           if($rowPayment->account_id != '' || $rowPayment->account_id != 0 || $rowPayment->account_id != 'NULL') {
							   if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', 'Down Payment', 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$rowPayment->amount_journal})";
							   }else{
								$insertValues .= "(2, '{$source}', 'Down Payment', 2, 12, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, {$cashId}, {$rowPayment->account_id}, NULL, {$rowPayment->amount_journal})";   
							   }
                            }
						   
						}	
                    } else {
                        $boolContinue = false;
                    }
						
				}
					
            }   
				elseif($row->invoice_id != '') {
                // <editor-fold defaultstate="collapsed" desc="payment PKS kontrak">
                if($row->payment_method == 1) {
                    $totalInvoiceAmount = 0;
                    $totalInvoicetDP = 0;
                    
                    $sqlInvoice = "SELECT i.*,
                                        (
                                            SELECT COALESCE(SUM(amount_journal), 0) FROM payment
                                            WHERE invoice_id = i.invoice_id
                                            AND payment_method = 2 AND payment_status = 0
                                        ) AS total_dp
                                    FROM invoice i
                                    WHERE i.invoice_id = {$row->invoice_id}";
                    $resultInvoice = $myDatabase->query($sqlInvoice, MYSQLI_STORE_RESULT);
                    
                    if($resultInvoice !== false && $resultInvoice->num_rows == 1) {
                        $rowInvoice = $resultInvoice->fetch_object();
                        
                       // $totalInvoiceAmount = $rowInvoice->amount;
                       // $totalContractPPN = $rowContract->total_ppn;
						$totalInvoiceDP = $rowInvoice->total_dp;
						
                    }else {
                    echo 'false1';
                    }
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}, 7) AND account_no in ({$row->account_no},{$row->ap_account_no}, 130005)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == $row->account_no && $row->amount_converted < 0) {
								$amountConverted = $row->amount_converted * -1;
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Payment', 1, 10, {$contractId},  {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountConverted})";
								}else{
								 $insertValues .= "(1, '{$source}', 'Payment', 1, 10, {$contractId},  {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountConverted})";	
								}
                            }  elseif($rowAccount->account_no == $row->ap_account_no && $row->amount_journal < 0 ) {
								$amountJournal = $row->amount_journal * -1;
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 1, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL,  {$amountJournal})";
								}else{
								 $insertValues .= "(2, '{$source}', NULL, 1, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL,  {$amountJournal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL,  {$row->amount_converted})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL,  {$row->amount_converted})";	
								}
                            } elseif($rowAccount->account_no == $row->ap_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL,  {$row->amount_journal})";
								}else{
								 $insertValues .= "(1, '{$source}', NULL, 2, 10, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL,  {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == 130005) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 10, {$contractId},  {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalInvoiceDP})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 10, {$contractId},  {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalInvoiceDP})";	
								}
                            }  
                        }
                    } else {
                        $boolContinue = false;
						echo 'false2';
                    }
                } elseif($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}, 7) AND account_no in ({$row->ap_account_no}, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == $row->ap_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 10, {$contractId},  {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								 $insertValues .= "(1, '{$source}', 'Down Payment', 2, 10, {$contractId},  {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 10, {$contractId},  {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 10, {$contractId},  {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            } 
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            }  
			elseif($row->vendor_id != '') {
                // <editor-fold defaultstate="collapsed" desc="payment PKS curah">
				if($row->payment_method == 1) {
                   // $totalAmount = 0;
                  //  $totaDP = 0;
                    
                    $sqlAccount2 = "SELECT t.transaction_id, a.account_id, a.account_no,(t.unit_price * t.quantity) AS total_amount
                FROM `transaction` t 
                LEFT JOIN payment p
                    ON t.payment_id = p.payment_id
                 LEFT JOIN account a
                 ON a.account_id = p.account_id
                               WHERE p.payment_id = {$row->payment_id}";
                    $resultAccount2 = $myDatabase->query($sqlAccount2, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount2 !== false && $resultAccount2->num_rows > 0) {
                        while($rowAccount2 = $resultAccount2->fetch_object()) {
							
						/*	if($row->b_currency_id == $row->currency_id && $row->currency_id != 1) {
				                // USD - USD - IDR
				                $totalAll2 = ceil($rowAccount2->amount * $row->exchange_rate);
				            } elseif($row->b_currency_id != $row->currency_id && $row->currency_id != 1) {
				                // IDR - USD - IDR
				                $totalAll2 = $rowAccount2->amount;
				            } elseif($row->b_currency_id != $row->currency_id && $row->currency_id == 1) {
				                // USD - IDR - IDR
				                $totalAll2 = ceil($rowAccount2->amount * $row->exchange_rate);
				            } else {
				                $totalAll2 = $rowAccount2->amount;
				            }  
                    */
                   // $totalAmount2 = ceil($totalAll2 - $row->ppn_journal);
                    //$totalDP = $totalAmount - $row->amount_journal;
                           
						    if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount2->account_no == 210101) {
								if($paymentStatus == 1){
									if($rowAccount2->total_amount < 0){
										$tAmount = $rowAccount2->total_amount * -1;
                                $insertValues .= "(1, '{$source}', 'Payment', 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount2->account_id}, NULL, {$tAmount})";
									}else{
										 $insertValues .= "(2, '{$source}', 'Payment', 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount2->account_id}, NULL, {$rowAccount2->total_amount})";
									}
								}else{
									if($rowAccount2->total_amount < 0){
										$tAmount = $rowAccount2->total_amount * -1;
								$insertValues .= "(2, '{$source}', 'Payment', 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount2->account_id}, NULL, {$tAmount})";
									}else{
										$insertValues .= "(1, '{$source}', 'Payment', 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount2->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount2->account_id}, NULL, {$rowAccount2->total_amount})";
									}								
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
				}
                    if($row->payment_method == 1) {
                    $totalAmount = 0;
                    $totaDP = 0;
                    
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (150410, 130002, {$row->account_no}, 230204)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($row->b_currency_id == $row->currency_id && $row->currency_id != 1) {
				                // USD - USD - IDR
				                $totalAll = ceil($row->amount * $row->exchange_rate);
				            } elseif($row->b_currency_id != $row->currency_id && $row->currency_id != 1) {
				                // IDR - USD - IDR
				                $totalAll = $row->amount;
				            } elseif($row->b_currency_id != $row->currency_id && $row->currency_id == 1) {
				                // USD - IDR - IDR
				                $totalAll = ceil($row->amount * $row->exchange_rate);
				            } else {
				                $totalAll = $row->amount;
				            }  
                    
                    $totalAmount = ceil($totalAll - $row->ppn_journal);
                    $totalDP = $totalAmount - $row->amount_journal;
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                           if($rowAccount->account_no == 150410) {
							   if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
							   }else{
								$insertValues .= "(1, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";   
							   }
                            } elseif($rowAccount->account_no == 130002) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalDP})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalDP})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            }elseif($rowAccount->account_no == 230204) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
								}else{
								$insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";	
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                } 
				elseif($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (130002, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130002) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {{$row->amount_journal}})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 2, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {{$row->amount_journal}})";	
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            } elseif($row->freight_id != '') {
                // <editor-fold defaultstate="collapsed" desc="payment FC">
                if($row->payment_method == 1) {
                                      
                    $sqlAccount1 = "SELECT t.transaction_id, a.account_id, a.account_no, fc.freight_id,
ROUND((CASE WHEN f.freight_rule = 1 THEN t.freight_price * t.send_weight
ELSE t.freight_price * t.freight_quantity END) - COALESCE(ts.amt_claim,0),10) AS total_amount
                FROM `transaction` t
                LEFT JOIN payment p
                    ON t.fc_payment_id = p.payment_id
                 LEFT JOIN account a
                 ON a.account_id = p.account_id
                 LEFT JOIN freight_cost fc
                 ON t.`freight_cost_id` = fc.`freight_cost_id`
		LEFT JOIN freight f
		ON fc.freight_id = f.freight_id
		LEFT JOIN transaction_shrink_weight ts
		ON t.transaction_id = ts.transaction_id	
                               WHERE p.payment_id = {$row->payment_id}";
                    $resultAccount1 = $myDatabase->query($sqlAccount1, MYSQLI_STORE_RESULT);
                    
                    
                    if($resultAccount1 !== false && $resultAccount1->num_rows > 0) {
                        while($rowAccount1 = $resultAccount1->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount1->account_no == 210103) {
								if($paymentStatus == 1){
									if($rowAccount1->total_amount < 0){
										$tAmount = $rowAccount1->total_amount * -1;
                                $insertValues .= "(1, '{$source}', 'Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount1->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount1->account_id}, NULL, {$tAmount})";
									}else{
										 $insertValues .= "(2, '{$source}', 'Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount1->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount1->account_id}, NULL, {$rowAccount1->total_amount})";
									}
								}else{
									if($rowAccount1->total_amount < 0){
										$tAmount = $rowAccount1->total_amount * -1;
								$insertValues .= "(2, '{$source}', 'Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount1->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount1->account_id}, NULL, {$tAmount})";
									}else{
									$insertValues .= "(1, '{$source}', 'Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount1->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount1->account_id}, NULL, {$rowAccount1->total_amount})";
									}
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                } 
				
				 if($row->payment_method == 1) {
						$totalDP = 0;
						$totalPPN_dp = 0;						
						$totalPPhDP = 0;
						 if($row->f_account_no == '' || $row->f_account_no == 'NULL'){
						  $f_account_no = 0;
					  }else{
						  $f_account_no = $row->f_account_no;
					  }
					 $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (150410, 130003, {$row->account_no},{$f_account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
					
					if($row->original_amount <= 0 && $row->amount >= 0){
					$totalDP = ($row->amount - $row->ppn_journal) + $row->pph_journal;	
					$totalPPhDP = $row->pph_journal;
					$totalPPN_dp = $row->ppn_journal;
					}elseif($row->amount >= 0){
					$totalDP = (($row->amount - $row->original_amount)/((100 - $row->f_pph_tax)/100));	
					$totalPPhDP = $totalDP - ($row->amount - $row->original_amount);
					$totalPPN_dp = $totalDP * ($row->f_ppn_tax/100);
					}
					
					if($row->fc_tax_category == 0 && $row->ppn_journal > 0 && $totalDP > 0){
					$amountJournal = (($row->amount - $row->ppn_journal) + $row->pph_journal) - $totalDP;	
					}elseif($row->fc_tax_category == 0 && $totalDP > 0 && $totalPPN_dp > 0){
					$amountJournal = ($row->original_amount + $row->pph_journal) - $totalPPN_dp;
					}elseif($totalDP > 0 && $totalPPN_dp > 0){
					$amountJournal = $row->original_amount - $totalPPN_dp;
					}elseif($row->fc_tax_category == 0){
					$amountJournal = ($row->original_amount + $row->pph_journal);
					}else{
					$amountJournal = $row->original_amount;	
					}
					//echo $sqlAccount;
					
					if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
                            if($rowAccount->account_no == 150410 ) {
								$ppnTotal = $row->ppn_journal - $totalPPN_dp;
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppnTotal})";
								}else{
								$insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppnTotal})";	
								}
                            }elseif($rowAccount->account_no == 130003 ) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', 'DP', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalDP})";
								}else{
								$insertValues .= "(2, '{$source}', 'DP', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalDP})";	
								}
                            } elseif($rowAccount->account_no == $f_account_no ) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'DP', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalPPhDP})";
								}else{
								$insertValues .= "(1, '{$source}', 'DP', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalPPhDP})";	
								}
                            }elseif($rowAccount->account_no == $row->account_no && $amountJournal < 0) {
								 $amountJournalIN =  $amountJournal * -1;
								 if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournalIN})";
								 }else{
								 $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournalIN})";	 
								 }
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournal})";	
								}
                            }elseif($rowAccount->account_no == $f_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
								}else{
								$insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";	
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
					 elseif($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (2, 7) AND account_no in (130003, {$row->account_no} , {$row->f_account_no}, 150410)";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130003) {
								$f_amountJournal = ($row->amount_journal + $row->ppn_journal) - $row->pph_journal;
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								 $insertValues .= "(1, '{$source}', 'Down Payment', 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$f_amountJournal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$f_amountJournal})";	
								}
                            } elseif($rowAccount->account_no == $row->f_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";	
								}
                            } elseif($rowAccount->account_no == 150410) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
								}else{
								$insertValues .= "(1, '{$source}', NULL, 2, 3, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";	
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            } elseif($row->vendor_handling_id != '') {
                // <editor-fold defaultstate="collapsed" desc="payment HC">
                if($row->payment_method == 1) {
                                      
                    $sqlAccount1 = "SELECT t.transaction_id, a.account_id, a.account_no, vhc.vendor_handling_id,
vhc.price_converted * t.handling_quantity AS total_amount

                FROM `transaction` t 
                LEFT JOIN payment p
                    ON t.hc_payment_id = p.payment_id
                 LEFT JOIN account a
                 ON a.account_id = p.account_id
                 LEFT JOIN vendor_handling_cost vhc
                 ON t.`handling_cost_id` = vhc.`handling_cost_id`
				 LEFT JOIN vendor_handling vh 
				 ON vhc.vendor_handling_id = vh.vendor_handling_id
                               WHERE p.payment_id = {$row->payment_id}";
                    $resultAccount1 = $myDatabase->query($sqlAccount1, MYSQLI_STORE_RESULT);
                    
                    
                    if($resultAccount1 !== false && $resultAccount1->num_rows > 0) {
                        while($rowAccount1 = $resultAccount1->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount1->account_no == 210106) {
								if($paymentStatus == 1){
								if($rowAccount1->total_amount < 0){
									$totAmount = $rowAccount1->total_amount * -1;
								$insertValues .= "(1, '{$source}', 'Payment', 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount1->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount1->account_id}, NULL, {$totAmount})";
								}else{
                                $insertValues .= "(2, '{$source}', 'Payment', 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount1->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount1->account_id}, NULL, {$rowAccount1->total_amount})";
								}
								}else{
								if($rowAccount1->total_amount < 0){
									$totAmount = $rowAccount1->total_amount * -1;
								$insertValues .= "(2, '{$source}', 'Payment', 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount1->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount1->account_id}, NULL, {$totAmount})";	
								}else{
								$insertValues .= "(1, '{$source}', 'Payment', 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount1->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount1->account_id}, NULL, {$rowAccount1->total_amount})";		
								}
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                } 
				
				 if($row->payment_method == 1) {
						$totaDP = 0; 
						$totalPPhDP = 0;
						 if($row->vh_account_no == '' || $row->vh_account_no == 'NULL'){
						  $vh_account_no = 0;
					  }else{
						  $vh_account_no = $row->vh_account_no;
					  }
					 $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (9, 7) AND account_no in (150410, 130006, {$row->account_no},{$vh_account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
					
					if($row->amount_journal < 0){
					$totalDP = $row->amount - $row->pph_journal - $row->amount_journal;
					$totalPPhDP = ($totalDP/(100 - $row->vh_pph_tax/100)) - $totalDP;
					}else{
					$totalDP = (($row->amount - $row->amount_journal)/((100 - $row->vh_pph_tax)/100));	
					$totalPPhDP = $totalDP - ($row->amount - $row->amount_journal);
					}
					
					if($row->vhc_tax_category == 0){
					$amountJournal = $row->amount_journal + $row->pph_journal;
					}else{
					$amountJournal = $row->amount_journal;
					}
					
					
					if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }
                            if($rowAccount->account_no == 150410) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
								}else{
								$insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";	
								}
                            } elseif($rowAccount->account_no == 130006 && $totalDP !== 0) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', 'DP', 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalDP})";
								}else{
								$insertValues .= "(2, '{$source}', 'DP', 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalDP})";	
								}
                            } elseif($rowAccount->account_no == $vh_account_no && $totalPPhDP !== 0) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'DP', 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalPPhDP})";
								}else{
								$insertValues .= "(1, '{$source}', 'DP', 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalPPhDP})";	
								}
                            }elseif($rowAccount->account_no == $row->account_no && $amountJournal < 0) {
								 $amountJournalIN =  $amountJournal * -1;
								 if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournalIN})";
								 }else{
								 $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournalIN})";	 
								 }
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournal})";	
								}
                            }elseif($rowAccount->account_no == $vh_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
								}else{
								$insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";	
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
					 elseif($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (9, 7) AND account_no in (130006, {$row->account_no} , {$row->vh_account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130006) {
								$vh_amountJournal = $row->amount_journal - $row->pph_journal;
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								 $insertValues .= "(1, '{$source}', 'Down Payment', 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								$vh_amountJournal = $row->amount_journal - $row->pph_journal;
								if($vh_amountJournal == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$f_amountJournal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$vh_amountJournal})";	
								}
                            } elseif($rowAccount->account_no == $row->vh_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 13, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";	
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            }elseif($row->labor_id != '') {
                // <editor-fold defaultstate="collapsed" desc="payment UC">
				if($row->payment_method == 1) {
                                       
                    $sqlAccount1 = "SELECT t.transaction_id, a.account_id, a.account_no, t.unloading_price AS total_amount
                FROM `transaction` t 
                LEFT JOIN payment p
                    ON t.uc_payment_id = p.payment_id
                 LEFT JOIN account a
                 ON a.account_id = p.account_id
                               WHERE p.payment_id = {$row->payment_id}";
                    $resultAccount1 = $myDatabase->query($sqlAccount1, MYSQLI_STORE_RESULT);
                    
                    
                    if($resultAccount1 !== false && $resultAccount1->num_rows > 0) {
                        while($rowAccount1 = $resultAccount1->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount1->account_no == 210104) {
								
								if($paymentStatus == 1){
									if($rowAccount1->total_amount < 0){
									$totalAmt = $rowAccount1->total_amount * -1;
                                $insertValues .= "(1, '{$source}', 'Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount1->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount1->account_id}, NULL, {$totalAmt})";
									}else{
										$totAmount = $rowAccount1->total_amount * -1;
                                $insertValues .= "(2, '{$source}', 'Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount1->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount1->account_id}, NULL, {$rowAccount1->total_amount})";
									}
								}else{
									if($rowAccount1->total_amount < 0){
									$totalAmt = $rowAccount1->total_amount * -1;
								$insertValues .= "(2, '{$source}', 'Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount1->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount1->account_id}, NULL, {$totalAmt})";
									}else{
										
									$insertValues .= "(1, '{$source}', 'Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, {$rowAccount1->transaction_id}, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount1->account_id}, NULL, {$rowAccount1->total_amount})";
									}
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                } 
                if($row->payment_method == 1) {
                   // $totalAmount = 0;
                    $totaDP = 0;
                    if($row->u_account_no == '' || $row->u_account_no == 'NULL'){
						  $u_account_no = 0;
					  }else{
						  $u_account_no = $row->u_account_no;
					  }
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (3, 7) AND account_no in ( 150410, 130004, {$row->account_no}, {$u_account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                   /* if($row->b_currency_id == $row->currency_id && $row->currency_id != 1) {
				                // USD - USD - IDR
				                $totalAll = ceil($row->amount * $row->exchange_rate);
				            } elseif($row->b_currency_id != $row->currency_id && $row->currency_id != 1) {
				                // IDR - USD - IDR
				                $totalAll = $row->amount;
				            } elseif($row->b_currency_id != $row->currency_id && $row->currency_id == 1) {
				                // USD - IDR - IDR
				                $totalAll = ceil($row->amount * $row->exchange_rate);
				            } else {
				                $totalAll = $row->amount;
				            }  
                    */
                    //$totalAmount = ceil($totalAll - $row->ppn_journal);
                    $totalDP = $row->amount - $row->amount_journal;
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 150410) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
								}else{
								$insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";	
								}
                            } elseif($rowAccount->account_no == 130004) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalDP})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalDP})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								 $insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            }elseif($rowAccount->account_no == $u_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";	
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                } elseif($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (3, 7) AND account_no in (130004, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130004) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 4, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            } elseif($row->sales_id != '') {
                // <editor-fold defaultstate="collapsed" desc="payment Sales">
               if($row->payment_method == 1) {
                    $totalSalesAmount = 0;
                    $totalSalesDP = 0;
                    
                    $sqlContract = "SELECT sh.quantity, sl.price_converted, 
                                        (
                                            SELECT COALESCE(SUM(amount_journal), 0) FROM payment_detail
                                            WHERE shipment_id = pd.shipment_id
                                            AND payment_id <> {$paymentId}
                                        ) AS total_dp
                                    FROM payment_detail pd
                                    INNER JOIN shipment sh
                                        ON sh.shipment_id = pd.shipment_id
                                    INNER JOIN sales sl
                                        ON sl.sales_id = sh.sales_id
                                    WHERE pd.payment_id = {$paymentId}";
                    $resultContract = $myDatabase->query($sqlContract, MYSQLI_STORE_RESULT);
                    
                    if($resultContract !== false && $resultContract->num_rows == 1) {
                        $rowContract = $resultContract->fetch_object();
                      
						
						if($row->ppn_journal !== 0){
                        $totalSalesDP = $rowContract->total_dp /1.1;
						}else{
						$totalSalesDP = $rowContract->total_dp;
                    }
                    }
                    
					
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (210200, 230100,{$row->ap_account_no},  {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

						if($row->ppn_journal != 0){
                        $totalSalesAmount = $row->amount_journal /1.1;
						}else{
						$totalSalesAmount = $row->amount_journal;
						}
                            if($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Payment', 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Payment', 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == 210200) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalSalesDP})";
								}else{
								$insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalSalesDP})";	
								}
                            } elseif($rowAccount->account_no == $row->ap_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalSalesAmount})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalSalesAmount})";	
								}
                            } elseif($rowAccount->account_no == 230100) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";	
								}
                            } 
                        }
                    } else {
                        $boolContinue = false;
                    }
                }  elseif($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN (1, 7) AND account_no in (230100, 210200, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    $amountJournalDP = $row->amount_journal - $row->ppn_journal;
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Down Payment', 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == 210200) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournalDP})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournalDP})";	
								}
                            }elseif($rowAccount->account_no == 230100) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 1, 9, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";	
								}
                            } 
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
			} elseif($row->ap_account_type == 7 && $row->stockpile_contract_id == '' && $row->vendor_id == '' && $row->freight_id == '' && $row->labor_id == '' && $row->general_vendor_id == '' && $row->sales_id == '') {
                // <editor-fold defaultstate="collapsed" desc="internal transfer">
			echo $row->ap_account_type;
                $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 7 AND account_no in ({$row->ap_account_no}, {$row->account_no})";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
                          
                        if($rowAccount->account_no == $row->ap_account_no) {
							if($paymentStatus == 1){
                            $insertValues .= "(2, '{$source}', 'Payment', 2, 6, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
							}else{
							$insertValues .= "(1, '{$source}', 'Payment', 2, 6, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
							}
                        } 
						if($rowAccount->account_no == $row->account_no) {
							if($paymentStatus == 1){
                            $insertValues .= "(1, '{$source}', NULL, 2, 6, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 2, 6, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
							}
                        }
                    }
                } else {
                    $boolContinue = false;
                }
                //</editor-fold>
            } 
			
		elseif($row->payment_type == 1 && $row->ap_account_type != 7 && $row->sales_id == '') {
                // <editor-fold defaultstate="collapsed" desc="in umum ho">
				echo 'test2';
				if($row->gv_account_no == '' || $row->gv_account_no == 'NULL'){
						  $gv_account_no = 0;
					  }elseif($row->gv_account_no != '' || $row->gv_account_no != 'NULL'){
						  $gv_account_no = $row->gv_account_no;
					  }
                $sqlAccount = "SELECT a.* FROM 
				(SELECT account_id, account_no FROM account WHERE account_type in ({$row->ap_account_type}, 7) AND account_no in ({$row->ap_account_no}, {$row->account_no}) UNION ALL SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}) AND account_no in ({$gv_account_no}, 150410))
				 a GROUP BY a.account_no";
                $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                
                if($resultAccount !== false && $resultAccount->num_rows > 0) {
                    while($rowAccount = $resultAccount->fetch_object()) {
                        if($insertValues != "") {
                            $insertValues .= ", ";
                        }
						
						$totalAmount = $row->amount_journal - $row->ppn_journal;
						
						if( $row->ppn_journal != 0 &&  $row->pph_journal == 0 ){
							$amountJ = $row->amount_journal - $row->ppn_journal;
						}else{
							$amountJ = $row->amount_journal;
						}
						
                        if($rowAccount->account_no == $row->account_no) {
							if($paymentStatus == 1){
                            $insertValues .= "(2, '{$source}', 'Payment', 1, 8, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
							}else{
							$insertValues .= "(1, '{$source}', 'Payment', 1, 8, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";	
							}
                        } elseif($rowAccount->account_no == $row->ap_account_no) {
							if($paymentStatus == 1){
                            $insertValues .= "(1, '{$source}', NULL, 1, 8, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJ})";
							}else{
							 $insertValues .= "(2, '{$source}', NULL, 1, 8, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJ})";	
							}
                        } elseif($rowAccount->account_no == 150410) {
							if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
							}else{
							$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";	
							}
                        } elseif($rowAccount->account_no == $gv_account_no  && $row->ap_account_no != $gv_account_no ) {
							if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";	
							}
                        }elseif($rowAccount->account_no == $gv_account_no && $row->ap_account_no == $gv_account_no) {
							if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, 0)";
							}else{
							$insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, 0)";	
							}
                            }  
                    }
                } else {
                    $boolContinue = false;
                }
                // </editor-fold>
            }elseif($row->payment_type == 2 && $row->stockpile_contract_id == '' && $row->vendor_id == '' && $row->freight_id == '' && $row->labor_id == '' && $row->general_vendor_id != '') {
                // <editor-fold defaultstate="collapsed" desc="out other with general vendor">
				
                if($row->payment_method == 1) {  
					
					if($row->gv_account_no == '' || $row->gv_account_no == 'NULL'){
						  $gv_account_no = 0;
					  }elseif($row->gv_account_no != '' || $row->gv_account_no != 'NULL'){
						  $gv_account_no = $row->gv_account_no;
					  }
					  
					  $account_no = $row->account_no;
					  $ap_account_no = $row->ap_account_no;
					  $ppn_journal = $row->ppn_journal;
					  $pph_journal = $row->pph_journal;
					  $amount_journal = $row->amount_journal;
					  $ap_account_type = $row->ap_account_type;
					  $totalAmount = 0;
					  $totaDP = 0;
                      //$totalAll = $row->amount;
					  
                    $sqlAccount = "SELECT a.* FROM (SELECT account_id, account_no FROM account WHERE account_type IN ({$ap_account_type}, 7) AND account_no IN (130005, {$account_no}, {$ap_account_no})
					UNION ALL SELECT account_id, account_no FROM account WHERE account_type IN ({$ap_account_type}) AND account_no IN ({$gv_account_no}, 150410))a GROUP BY a.account_no";
					
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($row->b_currency_id == $row->currency_id && $row->currency_id != 1) {
                        // USD - USD - IDR	
                        $totalAll = $row->amount * $row->exchange_rate;
                    } elseif($row->b_currency_id != $row->currency_id && $row->currency_id != 1) {
                        // IDR - USD - IDR
                        $totalAll = $row->amount;
                    } elseif($row->b_currency_id != $row->currency_id && $row->currency_id == 1) {
                        // USD - IDR - IDR
                        $totalAll = $row->amount * $row->exchange_rate;
                    } else {
                        $totalAll = $row->amount;
                    }  
                    
                    $totalAmount = $totalAll - $ppn_journal;
                    $totalDP = 0;
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                           if($rowAccount->account_no == $ap_account_no) {
							   if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Payment', 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
							   }else{
								$insertValues .= "(1, '{$source}', 'Payment', 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";   
							   }
                            } elseif($rowAccount->account_no == 130005) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalDP})";
								}else{
								 $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalDP})";	
								}
                            } elseif($rowAccount->account_no == $account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amount_journal})";	
								}
                            } elseif($rowAccount->account_no == 150410) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId},{$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn_journal})";
								}else{
								$insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId},{$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$ppn_journal})";	
								}
                            } elseif($rowAccount->account_no == $gv_account_no && $gv_account_no != $ap_account_no && $rowAccount->gv_pph_tax_id == 21) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph_journal})";
								}else{
								$insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph_journal})";	
								}
							} elseif($rowAccount->account_no == $gv_account_no && $gv_account_no != $ap_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$pph_journal})";	
								}
                            }elseif($rowAccount->account_no == $gv_account_no && $gv_account_no == $ap_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, 0)";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, 0)";	
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
						echo 'FALSE 2';
                    }
                } 
				elseif($row->payment_method == 2) {
					if($row->gv_account_no == '' || $row->gv_account_no == 'NULL'){
						  $gv_account_no = 0;
					  }elseif($row->gv_account_no != '' || $row->gv_account_no != 'NULL'){
						  $gv_account_no = $row->gv_account_no;
					  }
                    $sqlAccount = "SELECT a.* FROM (SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}, 7) AND account_no IN ({$row->account_no}, {$row->ap_account_no})
					UNION ALL SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}) AND account_no IN ({$gv_account_no}, 150410)) a GROUP BY a.account_no";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == $row->ap_account_no) {
								$amountJournal = $row->amount_journal - $row->ppn_journal;
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$amountJournal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}
                            } elseif($rowAccount->account_no == 150410) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";
								}else{
								 $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->ppn_journal})";	
								}
                            } elseif($rowAccount->account_no == $gv_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->pph_journal})";
								}
                            } 
                        }
                    } else {
                        $boolContinue = false;
						 

                    }
                }
                // </editor-fold>
            } elseif($row->payment_type == 2 && $row->stockpile_contract_id == '' && $row->vendor_id == '' && $row->freight_id == '' && 
                    $row->labor_id == '' && $row->general_vendor_id == '') {
                // <editor-fold defaultstate="collapsed" desc="out other without general vendor">
                if($row->payment_method == 1) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}, 7) AND account_no in ({$row->account_no}, {$row->ap_account_no}) GROUP BY account_no";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    $totalAmount = ceil($row->amount_journal - $row->ppn_journal);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == $row->ap_account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Payment', 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";
								}else{
								$insertValues .= "(1, '{$source}', 'Payment', 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$totalAmount})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                } elseif($row->payment_method == 2) {
                    $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type IN ({$row->ap_account_type}, 7) AND account_no in (130005, {$row->account_no})";
                    $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);
                    
                    if($resultAccount !== false && $resultAccount->num_rows > 0) {
                        while($rowAccount = $resultAccount->fetch_object()) {
                            if($insertValues != "") {
                                $insertValues .= ", ";
                            }

                            if($rowAccount->account_no == 130005) {
								if($paymentStatus == 1){
                                $insertValues .= "(2, '{$source}', 'Down Payment', 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(1, '{$source}', 'Down Payment', 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            } elseif($rowAccount->account_no == $row->account_no) {
								if($paymentStatus == 1){
                                $insertValues .= "(1, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
								}else{
								$insertValues .= "(2, '{$source}', NULL, 2, 5, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$paymentId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";	
								}
                            }
                        }
                    } else {
                        $boolContinue = false;
                    }
                }
                // </editor-fold>
            } else {
                $boolContinue = false;
            }
        } else {
            $boolContinue = false;
        }
                
            
        
        // </editor-fold>
    } elseif($returnId != 'NULL') {
        // <editor-fold defaultstate="collapsed" desc="return payment">
        
        $sql = "SELECT p.*, a.account_no, ap.account_type AS ap_account_type, ap.account_no AS ap_account_no,
                    b.currency_id AS b_currency_id
                FROM payment p 
                INNER JOIN bank b
                    ON b.bank_id = p.bank_id
                INNER JOIN account a
                    ON a.account_id = b.account_id
                INNER JOIN account ap
                    ON ap.account_id = p.account_id 		   
                WHERE p.payment_id = {$returnId} AND payment_status = 0";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
        
        if($result !== false && $result->num_rows == 1) {
            $row = $result->fetch_object();
            
            // <editor-fold defaultstate="collapsed" desc="in return">
            $sqlAccount = "SELECT account_id, account_no FROM account WHERE account_type = 7 AND account_no in ({$row->account_no})";
            $resultAccount = $myDatabase->query($sqlAccount, MYSQLI_STORE_RESULT);

            if($resultAccount !== false && $resultAccount->num_rows > 0) {
                while($rowAccount = $resultAccount->fetch_object()) {
                    if($insertValues != "") {
                        $insertValues .= ", ";
                    }

                    if($rowAccount->account_no == $row->account_no) {
                        $insertValues .= "(1, '{$source}', 'Payment', 1, 7, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$returnId}, {$jurnalId}, 0, 0, {$rowAccount->account_id}, NULL, {$row->amount_journal})";
                    } 
                }
                
                if($insertValues != "") {
                    $insertValues .= ", ";
                }
                
                $insertValues .= "(2, '{$source}', NULL, 1, 7, {$contractId}, {$invoiceId}, {$transactionId}, 0, {$returnId}, {$jurnalId}, 0, 0, {$row->account_id}, NULL, {$row->amount_journal})";
            } else {
                $boolContinue = false;
            }
            // </editor-fold>
        } else {
            $boolContinue = false;
        }
        
        // </editor-fold>
    }
    
    if($boolContinue) {
        // INSERT 
        $sql = "INSERT INTO general_ledger (general_ledger_type, general_ledger_module, general_ledger_method, general_ledger_transaction_type, general_ledger_for, contract_id, invoice_id, transaction_id, t_id, payment_id, jurnal_id, i_id, cash_id, account_id, description, amount) VALUES {$insertValues}";
        $result = $myDatabase->query($sql, MYSQLI_STORE_RESULT);
		if($result === false){
			echo 'FALSE';
			echo '</br>';
			echo $insertValues;
			echo '</br>';
		
		}else{
			echo 'TRUE';
			echo $sql;
		}
}
    
}